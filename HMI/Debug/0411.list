
0411.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000039a0  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000090  08003b30  08003b30  00013b30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003bc0  08003bc0  00020084  2**0
                  CONTENTS
  4 .ARM          00000008  08003bc0  08003bc0  00013bc0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003bc8  08003bc8  00020084  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003bc8  08003bc8  00013bc8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003bcc  08003bcc  00013bcc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000084  20000000  08003bd0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020084  2**0
                  CONTENTS
 10 .bss          00000240  20000084  20000084  00020084  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200002c4  200002c4  00020084  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020084  2**0
                  CONTENTS, READONLY
 13 .debug_info   00009870  00000000  00000000  000200b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001b86  00000000  00000000  00029924  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000007a8  00000000  00000000  0002b4b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000006f0  00000000  00000000  0002bc58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000028d9  00000000  00000000  0002c348  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000a3f1  00000000  00000000  0002ec21  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c2e5b  00000000  00000000  00039012  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  000fbe6d  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00002154  00000000  00000000  000fbec0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000084 	.word	0x20000084
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08003b18 	.word	0x08003b18

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000088 	.word	0x20000088
 80001cc:	08003b18 	.word	0x08003b18

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b974 	b.w	8000570 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	4604      	mov	r4, r0
 80002a8:	468e      	mov	lr, r1
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	d14d      	bne.n	800034a <__udivmoddi4+0xaa>
 80002ae:	428a      	cmp	r2, r1
 80002b0:	4694      	mov	ip, r2
 80002b2:	d969      	bls.n	8000388 <__udivmoddi4+0xe8>
 80002b4:	fab2 f282 	clz	r2, r2
 80002b8:	b152      	cbz	r2, 80002d0 <__udivmoddi4+0x30>
 80002ba:	fa01 f302 	lsl.w	r3, r1, r2
 80002be:	f1c2 0120 	rsb	r1, r2, #32
 80002c2:	fa20 f101 	lsr.w	r1, r0, r1
 80002c6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002ca:	ea41 0e03 	orr.w	lr, r1, r3
 80002ce:	4094      	lsls	r4, r2
 80002d0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002d4:	0c21      	lsrs	r1, r4, #16
 80002d6:	fbbe f6f8 	udiv	r6, lr, r8
 80002da:	fa1f f78c 	uxth.w	r7, ip
 80002de:	fb08 e316 	mls	r3, r8, r6, lr
 80002e2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002e6:	fb06 f107 	mul.w	r1, r6, r7
 80002ea:	4299      	cmp	r1, r3
 80002ec:	d90a      	bls.n	8000304 <__udivmoddi4+0x64>
 80002ee:	eb1c 0303 	adds.w	r3, ip, r3
 80002f2:	f106 30ff 	add.w	r0, r6, #4294967295
 80002f6:	f080 811f 	bcs.w	8000538 <__udivmoddi4+0x298>
 80002fa:	4299      	cmp	r1, r3
 80002fc:	f240 811c 	bls.w	8000538 <__udivmoddi4+0x298>
 8000300:	3e02      	subs	r6, #2
 8000302:	4463      	add	r3, ip
 8000304:	1a5b      	subs	r3, r3, r1
 8000306:	b2a4      	uxth	r4, r4
 8000308:	fbb3 f0f8 	udiv	r0, r3, r8
 800030c:	fb08 3310 	mls	r3, r8, r0, r3
 8000310:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000314:	fb00 f707 	mul.w	r7, r0, r7
 8000318:	42a7      	cmp	r7, r4
 800031a:	d90a      	bls.n	8000332 <__udivmoddi4+0x92>
 800031c:	eb1c 0404 	adds.w	r4, ip, r4
 8000320:	f100 33ff 	add.w	r3, r0, #4294967295
 8000324:	f080 810a 	bcs.w	800053c <__udivmoddi4+0x29c>
 8000328:	42a7      	cmp	r7, r4
 800032a:	f240 8107 	bls.w	800053c <__udivmoddi4+0x29c>
 800032e:	4464      	add	r4, ip
 8000330:	3802      	subs	r0, #2
 8000332:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000336:	1be4      	subs	r4, r4, r7
 8000338:	2600      	movs	r6, #0
 800033a:	b11d      	cbz	r5, 8000344 <__udivmoddi4+0xa4>
 800033c:	40d4      	lsrs	r4, r2
 800033e:	2300      	movs	r3, #0
 8000340:	e9c5 4300 	strd	r4, r3, [r5]
 8000344:	4631      	mov	r1, r6
 8000346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800034a:	428b      	cmp	r3, r1
 800034c:	d909      	bls.n	8000362 <__udivmoddi4+0xc2>
 800034e:	2d00      	cmp	r5, #0
 8000350:	f000 80ef 	beq.w	8000532 <__udivmoddi4+0x292>
 8000354:	2600      	movs	r6, #0
 8000356:	e9c5 0100 	strd	r0, r1, [r5]
 800035a:	4630      	mov	r0, r6
 800035c:	4631      	mov	r1, r6
 800035e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000362:	fab3 f683 	clz	r6, r3
 8000366:	2e00      	cmp	r6, #0
 8000368:	d14a      	bne.n	8000400 <__udivmoddi4+0x160>
 800036a:	428b      	cmp	r3, r1
 800036c:	d302      	bcc.n	8000374 <__udivmoddi4+0xd4>
 800036e:	4282      	cmp	r2, r0
 8000370:	f200 80f9 	bhi.w	8000566 <__udivmoddi4+0x2c6>
 8000374:	1a84      	subs	r4, r0, r2
 8000376:	eb61 0303 	sbc.w	r3, r1, r3
 800037a:	2001      	movs	r0, #1
 800037c:	469e      	mov	lr, r3
 800037e:	2d00      	cmp	r5, #0
 8000380:	d0e0      	beq.n	8000344 <__udivmoddi4+0xa4>
 8000382:	e9c5 4e00 	strd	r4, lr, [r5]
 8000386:	e7dd      	b.n	8000344 <__udivmoddi4+0xa4>
 8000388:	b902      	cbnz	r2, 800038c <__udivmoddi4+0xec>
 800038a:	deff      	udf	#255	; 0xff
 800038c:	fab2 f282 	clz	r2, r2
 8000390:	2a00      	cmp	r2, #0
 8000392:	f040 8092 	bne.w	80004ba <__udivmoddi4+0x21a>
 8000396:	eba1 010c 	sub.w	r1, r1, ip
 800039a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800039e:	fa1f fe8c 	uxth.w	lr, ip
 80003a2:	2601      	movs	r6, #1
 80003a4:	0c20      	lsrs	r0, r4, #16
 80003a6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003aa:	fb07 1113 	mls	r1, r7, r3, r1
 80003ae:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003b2:	fb0e f003 	mul.w	r0, lr, r3
 80003b6:	4288      	cmp	r0, r1
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0x12c>
 80003ba:	eb1c 0101 	adds.w	r1, ip, r1
 80003be:	f103 38ff 	add.w	r8, r3, #4294967295
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x12a>
 80003c4:	4288      	cmp	r0, r1
 80003c6:	f200 80cb 	bhi.w	8000560 <__udivmoddi4+0x2c0>
 80003ca:	4643      	mov	r3, r8
 80003cc:	1a09      	subs	r1, r1, r0
 80003ce:	b2a4      	uxth	r4, r4
 80003d0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003d4:	fb07 1110 	mls	r1, r7, r0, r1
 80003d8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003dc:	fb0e fe00 	mul.w	lr, lr, r0
 80003e0:	45a6      	cmp	lr, r4
 80003e2:	d908      	bls.n	80003f6 <__udivmoddi4+0x156>
 80003e4:	eb1c 0404 	adds.w	r4, ip, r4
 80003e8:	f100 31ff 	add.w	r1, r0, #4294967295
 80003ec:	d202      	bcs.n	80003f4 <__udivmoddi4+0x154>
 80003ee:	45a6      	cmp	lr, r4
 80003f0:	f200 80bb 	bhi.w	800056a <__udivmoddi4+0x2ca>
 80003f4:	4608      	mov	r0, r1
 80003f6:	eba4 040e 	sub.w	r4, r4, lr
 80003fa:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003fe:	e79c      	b.n	800033a <__udivmoddi4+0x9a>
 8000400:	f1c6 0720 	rsb	r7, r6, #32
 8000404:	40b3      	lsls	r3, r6
 8000406:	fa22 fc07 	lsr.w	ip, r2, r7
 800040a:	ea4c 0c03 	orr.w	ip, ip, r3
 800040e:	fa20 f407 	lsr.w	r4, r0, r7
 8000412:	fa01 f306 	lsl.w	r3, r1, r6
 8000416:	431c      	orrs	r4, r3
 8000418:	40f9      	lsrs	r1, r7
 800041a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800041e:	fa00 f306 	lsl.w	r3, r0, r6
 8000422:	fbb1 f8f9 	udiv	r8, r1, r9
 8000426:	0c20      	lsrs	r0, r4, #16
 8000428:	fa1f fe8c 	uxth.w	lr, ip
 800042c:	fb09 1118 	mls	r1, r9, r8, r1
 8000430:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000434:	fb08 f00e 	mul.w	r0, r8, lr
 8000438:	4288      	cmp	r0, r1
 800043a:	fa02 f206 	lsl.w	r2, r2, r6
 800043e:	d90b      	bls.n	8000458 <__udivmoddi4+0x1b8>
 8000440:	eb1c 0101 	adds.w	r1, ip, r1
 8000444:	f108 3aff 	add.w	sl, r8, #4294967295
 8000448:	f080 8088 	bcs.w	800055c <__udivmoddi4+0x2bc>
 800044c:	4288      	cmp	r0, r1
 800044e:	f240 8085 	bls.w	800055c <__udivmoddi4+0x2bc>
 8000452:	f1a8 0802 	sub.w	r8, r8, #2
 8000456:	4461      	add	r1, ip
 8000458:	1a09      	subs	r1, r1, r0
 800045a:	b2a4      	uxth	r4, r4
 800045c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000460:	fb09 1110 	mls	r1, r9, r0, r1
 8000464:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000468:	fb00 fe0e 	mul.w	lr, r0, lr
 800046c:	458e      	cmp	lr, r1
 800046e:	d908      	bls.n	8000482 <__udivmoddi4+0x1e2>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f100 34ff 	add.w	r4, r0, #4294967295
 8000478:	d26c      	bcs.n	8000554 <__udivmoddi4+0x2b4>
 800047a:	458e      	cmp	lr, r1
 800047c:	d96a      	bls.n	8000554 <__udivmoddi4+0x2b4>
 800047e:	3802      	subs	r0, #2
 8000480:	4461      	add	r1, ip
 8000482:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000486:	fba0 9402 	umull	r9, r4, r0, r2
 800048a:	eba1 010e 	sub.w	r1, r1, lr
 800048e:	42a1      	cmp	r1, r4
 8000490:	46c8      	mov	r8, r9
 8000492:	46a6      	mov	lr, r4
 8000494:	d356      	bcc.n	8000544 <__udivmoddi4+0x2a4>
 8000496:	d053      	beq.n	8000540 <__udivmoddi4+0x2a0>
 8000498:	b15d      	cbz	r5, 80004b2 <__udivmoddi4+0x212>
 800049a:	ebb3 0208 	subs.w	r2, r3, r8
 800049e:	eb61 010e 	sbc.w	r1, r1, lr
 80004a2:	fa01 f707 	lsl.w	r7, r1, r7
 80004a6:	fa22 f306 	lsr.w	r3, r2, r6
 80004aa:	40f1      	lsrs	r1, r6
 80004ac:	431f      	orrs	r7, r3
 80004ae:	e9c5 7100 	strd	r7, r1, [r5]
 80004b2:	2600      	movs	r6, #0
 80004b4:	4631      	mov	r1, r6
 80004b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	40d8      	lsrs	r0, r3
 80004c0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004c4:	fa21 f303 	lsr.w	r3, r1, r3
 80004c8:	4091      	lsls	r1, r2
 80004ca:	4301      	orrs	r1, r0
 80004cc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004d0:	fa1f fe8c 	uxth.w	lr, ip
 80004d4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004d8:	fb07 3610 	mls	r6, r7, r0, r3
 80004dc:	0c0b      	lsrs	r3, r1, #16
 80004de:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004e2:	fb00 f60e 	mul.w	r6, r0, lr
 80004e6:	429e      	cmp	r6, r3
 80004e8:	fa04 f402 	lsl.w	r4, r4, r2
 80004ec:	d908      	bls.n	8000500 <__udivmoddi4+0x260>
 80004ee:	eb1c 0303 	adds.w	r3, ip, r3
 80004f2:	f100 38ff 	add.w	r8, r0, #4294967295
 80004f6:	d22f      	bcs.n	8000558 <__udivmoddi4+0x2b8>
 80004f8:	429e      	cmp	r6, r3
 80004fa:	d92d      	bls.n	8000558 <__udivmoddi4+0x2b8>
 80004fc:	3802      	subs	r0, #2
 80004fe:	4463      	add	r3, ip
 8000500:	1b9b      	subs	r3, r3, r6
 8000502:	b289      	uxth	r1, r1
 8000504:	fbb3 f6f7 	udiv	r6, r3, r7
 8000508:	fb07 3316 	mls	r3, r7, r6, r3
 800050c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000510:	fb06 f30e 	mul.w	r3, r6, lr
 8000514:	428b      	cmp	r3, r1
 8000516:	d908      	bls.n	800052a <__udivmoddi4+0x28a>
 8000518:	eb1c 0101 	adds.w	r1, ip, r1
 800051c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000520:	d216      	bcs.n	8000550 <__udivmoddi4+0x2b0>
 8000522:	428b      	cmp	r3, r1
 8000524:	d914      	bls.n	8000550 <__udivmoddi4+0x2b0>
 8000526:	3e02      	subs	r6, #2
 8000528:	4461      	add	r1, ip
 800052a:	1ac9      	subs	r1, r1, r3
 800052c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000530:	e738      	b.n	80003a4 <__udivmoddi4+0x104>
 8000532:	462e      	mov	r6, r5
 8000534:	4628      	mov	r0, r5
 8000536:	e705      	b.n	8000344 <__udivmoddi4+0xa4>
 8000538:	4606      	mov	r6, r0
 800053a:	e6e3      	b.n	8000304 <__udivmoddi4+0x64>
 800053c:	4618      	mov	r0, r3
 800053e:	e6f8      	b.n	8000332 <__udivmoddi4+0x92>
 8000540:	454b      	cmp	r3, r9
 8000542:	d2a9      	bcs.n	8000498 <__udivmoddi4+0x1f8>
 8000544:	ebb9 0802 	subs.w	r8, r9, r2
 8000548:	eb64 0e0c 	sbc.w	lr, r4, ip
 800054c:	3801      	subs	r0, #1
 800054e:	e7a3      	b.n	8000498 <__udivmoddi4+0x1f8>
 8000550:	4646      	mov	r6, r8
 8000552:	e7ea      	b.n	800052a <__udivmoddi4+0x28a>
 8000554:	4620      	mov	r0, r4
 8000556:	e794      	b.n	8000482 <__udivmoddi4+0x1e2>
 8000558:	4640      	mov	r0, r8
 800055a:	e7d1      	b.n	8000500 <__udivmoddi4+0x260>
 800055c:	46d0      	mov	r8, sl
 800055e:	e77b      	b.n	8000458 <__udivmoddi4+0x1b8>
 8000560:	3b02      	subs	r3, #2
 8000562:	4461      	add	r1, ip
 8000564:	e732      	b.n	80003cc <__udivmoddi4+0x12c>
 8000566:	4630      	mov	r0, r6
 8000568:	e709      	b.n	800037e <__udivmoddi4+0xde>
 800056a:	4464      	add	r4, ip
 800056c:	3802      	subs	r0, #2
 800056e:	e742      	b.n	80003f6 <__udivmoddi4+0x156>

08000570 <__aeabi_idiv0>:
 8000570:	4770      	bx	lr
 8000572:	bf00      	nop

08000574 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000574:	b480      	push	{r7}
 8000576:	b083      	sub	sp, #12
 8000578:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800057a:	2300      	movs	r3, #0
 800057c:	607b      	str	r3, [r7, #4]
 800057e:	4b10      	ldr	r3, [pc, #64]	; (80005c0 <MX_GPIO_Init+0x4c>)
 8000580:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000582:	4a0f      	ldr	r2, [pc, #60]	; (80005c0 <MX_GPIO_Init+0x4c>)
 8000584:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000588:	6313      	str	r3, [r2, #48]	; 0x30
 800058a:	4b0d      	ldr	r3, [pc, #52]	; (80005c0 <MX_GPIO_Init+0x4c>)
 800058c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800058e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000592:	607b      	str	r3, [r7, #4]
 8000594:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000596:	2300      	movs	r3, #0
 8000598:	603b      	str	r3, [r7, #0]
 800059a:	4b09      	ldr	r3, [pc, #36]	; (80005c0 <MX_GPIO_Init+0x4c>)
 800059c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800059e:	4a08      	ldr	r2, [pc, #32]	; (80005c0 <MX_GPIO_Init+0x4c>)
 80005a0:	f043 0301 	orr.w	r3, r3, #1
 80005a4:	6313      	str	r3, [r2, #48]	; 0x30
 80005a6:	4b06      	ldr	r3, [pc, #24]	; (80005c0 <MX_GPIO_Init+0x4c>)
 80005a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005aa:	f003 0301 	and.w	r3, r3, #1
 80005ae:	603b      	str	r3, [r7, #0]
 80005b0:	683b      	ldr	r3, [r7, #0]

}
 80005b2:	bf00      	nop
 80005b4:	370c      	adds	r7, #12
 80005b6:	46bd      	mov	sp, r7
 80005b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005bc:	4770      	bx	lr
 80005be:	bf00      	nop
 80005c0:	40023800 	.word	0x40023800

080005c4 <initRingBuffer>:
float IMinA = 78.1;//甯�����灏�琛板��
int t_freq = 200 ;//淇″�烽���烽���
int single_freq = 300;

/* ��褰㈢��插�哄��濮��� */
void initRingBuffer(void) {
 80005c4:	b480      	push	{r7}
 80005c6:	af00      	add	r7, sp, #0
    rx_ring_buffer.head = 0;
 80005c8:	4b06      	ldr	r3, [pc, #24]	; (80005e4 <initRingBuffer+0x20>)
 80005ca:	2200      	movs	r2, #0
 80005cc:	f8a3 2100 	strh.w	r2, [r3, #256]	; 0x100
    rx_ring_buffer.tail = 0;
 80005d0:	4b04      	ldr	r3, [pc, #16]	; (80005e4 <initRingBuffer+0x20>)
 80005d2:	2200      	movs	r2, #0
 80005d4:	f8a3 2102 	strh.w	r2, [r3, #258]	; 0x102
}
 80005d8:	bf00      	nop
 80005da:	46bd      	mov	sp, r7
 80005dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005e0:	4770      	bx	lr
 80005e2:	bf00      	nop
 80005e4:	200000a0 	.word	0x200000a0

080005e8 <ringBufferAdd>:

/* ����褰㈢��插�烘坊���版�� */
void ringBufferAdd(uint8_t data) {
 80005e8:	b480      	push	{r7}
 80005ea:	b085      	sub	sp, #20
 80005ec:	af00      	add	r7, sp, #0
 80005ee:	4603      	mov	r3, r0
 80005f0:	71fb      	strb	r3, [r7, #7]
    uint16_t next_head = (rx_ring_buffer.head + 1) % RING_BUFFER_SIZE;
 80005f2:	4b17      	ldr	r3, [pc, #92]	; (8000650 <ringBufferAdd+0x68>)
 80005f4:	f8b3 3100 	ldrh.w	r3, [r3, #256]	; 0x100
 80005f8:	3301      	adds	r3, #1
 80005fa:	425a      	negs	r2, r3
 80005fc:	b2db      	uxtb	r3, r3
 80005fe:	b2d2      	uxtb	r2, r2
 8000600:	bf58      	it	pl
 8000602:	4253      	negpl	r3, r2
 8000604:	81fb      	strh	r3, [r7, #14]

    /* 濡���缂��插�哄凡婊★���瑕����ф�版�� */
    if (next_head == rx_ring_buffer.tail) {
 8000606:	4b12      	ldr	r3, [pc, #72]	; (8000650 <ringBufferAdd+0x68>)
 8000608:	f8b3 3102 	ldrh.w	r3, [r3, #258]	; 0x102
 800060c:	89fa      	ldrh	r2, [r7, #14]
 800060e:	429a      	cmp	r2, r3
 8000610:	d10c      	bne.n	800062c <ringBufferAdd+0x44>
        /* 褰�缂��插�烘弧�讹�绉诲�ㄥ熬����浠ヨ����ф�版�� */
        rx_ring_buffer.tail = (rx_ring_buffer.tail + 1) % RING_BUFFER_SIZE;
 8000612:	4b0f      	ldr	r3, [pc, #60]	; (8000650 <ringBufferAdd+0x68>)
 8000614:	f8b3 3102 	ldrh.w	r3, [r3, #258]	; 0x102
 8000618:	3301      	adds	r3, #1
 800061a:	425a      	negs	r2, r3
 800061c:	b2db      	uxtb	r3, r3
 800061e:	b2d2      	uxtb	r2, r2
 8000620:	bf58      	it	pl
 8000622:	4253      	negpl	r3, r2
 8000624:	b29a      	uxth	r2, r3
 8000626:	4b0a      	ldr	r3, [pc, #40]	; (8000650 <ringBufferAdd+0x68>)
 8000628:	f8a3 2102 	strh.w	r2, [r3, #258]	; 0x102
    }

    rx_ring_buffer.buffer[rx_ring_buffer.head] = data;
 800062c:	4b08      	ldr	r3, [pc, #32]	; (8000650 <ringBufferAdd+0x68>)
 800062e:	f8b3 3100 	ldrh.w	r3, [r3, #256]	; 0x100
 8000632:	4619      	mov	r1, r3
 8000634:	4a06      	ldr	r2, [pc, #24]	; (8000650 <ringBufferAdd+0x68>)
 8000636:	79fb      	ldrb	r3, [r7, #7]
 8000638:	5453      	strb	r3, [r2, r1]
    rx_ring_buffer.head = next_head;
 800063a:	4a05      	ldr	r2, [pc, #20]	; (8000650 <ringBufferAdd+0x68>)
 800063c:	89fb      	ldrh	r3, [r7, #14]
 800063e:	f8a2 3100 	strh.w	r3, [r2, #256]	; 0x100
}
 8000642:	bf00      	nop
 8000644:	3714      	adds	r7, #20
 8000646:	46bd      	mov	sp, r7
 8000648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800064c:	4770      	bx	lr
 800064e:	bf00      	nop
 8000650:	200000a0 	.word	0x200000a0

08000654 <HAL_UART_RxCpltCallback>:
uint16_t ringBufferSize(void) {
    return (RING_BUFFER_SIZE + rx_ring_buffer.head - rx_ring_buffer.tail) % RING_BUFFER_SIZE;
}

/* UART�ユ�朵腑����璋��芥�� */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8000654:	b580      	push	{r7, lr}
 8000656:	b084      	sub	sp, #16
 8000658:	af00      	add	r7, sp, #0
 800065a:	6078      	str	r0, [r7, #4]
    if (huart->Instance == USART1) {
 800065c:	687b      	ldr	r3, [r7, #4]
 800065e:	681b      	ldr	r3, [r3, #0]
 8000660:	4a09      	ldr	r2, [pc, #36]	; (8000688 <HAL_UART_RxCpltCallback+0x34>)
 8000662:	4293      	cmp	r3, r2
 8000664:	d10b      	bne.n	800067e <HAL_UART_RxCpltCallback+0x2a>
        uint8_t received_data = RxBuffer[0];
 8000666:	4b09      	ldr	r3, [pc, #36]	; (800068c <HAL_UART_RxCpltCallback+0x38>)
 8000668:	781b      	ldrb	r3, [r3, #0]
 800066a:	73fb      	strb	r3, [r7, #15]
        ringBufferAdd(received_data);  // 灏��ユ�剁���版��娣诲���扮��褰㈢��插��
 800066c:	7bfb      	ldrb	r3, [r7, #15]
 800066e:	4618      	mov	r0, r3
 8000670:	f7ff ffba 	bl	80005e8 <ringBufferAdd>
        HAL_UART_Receive_IT(&TJC_UART, RxBuffer, 1); // ���板���ㄦ�ユ�朵腑��
 8000674:	2201      	movs	r2, #1
 8000676:	4905      	ldr	r1, [pc, #20]	; (800068c <HAL_UART_RxCpltCallback+0x38>)
 8000678:	4805      	ldr	r0, [pc, #20]	; (8000690 <HAL_UART_RxCpltCallback+0x3c>)
 800067a:	f001 fe83 	bl	8002384 <HAL_UART_Receive_IT>
    }
}
 800067e:	bf00      	nop
 8000680:	3710      	adds	r7, #16
 8000682:	46bd      	mov	sp, r7
 8000684:	bd80      	pop	{r7, pc}
 8000686:	bf00      	nop
 8000688:	40011000 	.word	0x40011000
 800068c:	200001a8 	.word	0x200001a8
 8000690:	200001ac 	.word	0x200001ac

08000694 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000694:	b580      	push	{r7, lr}
 8000696:	b09a      	sub	sp, #104	; 0x68
 8000698:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800069a:	f000 faed 	bl	8000c78 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800069e:	f000 f87b 	bl	8000798 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006a2:	f7ff ff67 	bl	8000574 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 80006a6:	f000 f9db 	bl	8000a60 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
	initRingBuffer();                            // ��濮�����褰㈢��插��
 80006aa:	f7ff ff8b 	bl	80005c4 <initRingBuffer>
	HAL_UART_Receive_IT(&TJC_UART, RxBuffer, 1); // ��缃�涓����ユ��
 80006ae:	2201      	movs	r2, #1
 80006b0:	492c      	ldr	r1, [pc, #176]	; (8000764 <main+0xd0>)
 80006b2:	482d      	ldr	r0, [pc, #180]	; (8000768 <main+0xd4>)
 80006b4:	f001 fe66 	bl	8002384 <HAL_UART_Receive_IT>
	int a = 100;
 80006b8:	2364      	movs	r3, #100	; 0x64
 80006ba:	667b      	str	r3, [r7, #100]	; 0x64

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {

		sprintf(str, "n0.val=%d", single_freq);
 80006bc:	4b2b      	ldr	r3, [pc, #172]	; (800076c <main+0xd8>)
 80006be:	681a      	ldr	r2, [r3, #0]
 80006c0:	463b      	mov	r3, r7
 80006c2:	492b      	ldr	r1, [pc, #172]	; (8000770 <main+0xdc>)
 80006c4:	4618      	mov	r0, r3
 80006c6:	f002 fdb9 	bl	800323c <siprintf>
		tjc_send_string(str);
 80006ca:	463b      	mov	r3, r7
 80006cc:	4618      	mov	r0, r3
 80006ce:	f000 f9a7 	bl	8000a20 <tjc_send_string>

		sprintf(str, "x0.val=%d", (int)(Center_freq * 100));
 80006d2:	4b28      	ldr	r3, [pc, #160]	; (8000774 <main+0xe0>)
 80006d4:	edd3 7a00 	vldr	s15, [r3]
 80006d8:	ed9f 7a27 	vldr	s14, [pc, #156]	; 8000778 <main+0xe4>
 80006dc:	ee67 7a87 	vmul.f32	s15, s15, s14
 80006e0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80006e4:	463b      	mov	r3, r7
 80006e6:	ee17 2a90 	vmov	r2, s15
 80006ea:	4924      	ldr	r1, [pc, #144]	; (800077c <main+0xe8>)
 80006ec:	4618      	mov	r0, r3
 80006ee:	f002 fda5 	bl	800323c <siprintf>
		tjc_send_string(str);
 80006f2:	463b      	mov	r3, r7
 80006f4:	4618      	mov	r0, r3
 80006f6:	f000 f993 	bl	8000a20 <tjc_send_string>
		sprintf(str, "x1.val=%d", (int)(Bandwith * 100));
 80006fa:	4b21      	ldr	r3, [pc, #132]	; (8000780 <main+0xec>)
 80006fc:	edd3 7a00 	vldr	s15, [r3]
 8000700:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 8000778 <main+0xe4>
 8000704:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000708:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800070c:	463b      	mov	r3, r7
 800070e:	ee17 2a90 	vmov	r2, s15
 8000712:	491c      	ldr	r1, [pc, #112]	; (8000784 <main+0xf0>)
 8000714:	4618      	mov	r0, r3
 8000716:	f002 fd91 	bl	800323c <siprintf>
		tjc_send_string(str);
 800071a:	463b      	mov	r3, r7
 800071c:	4618      	mov	r0, r3
 800071e:	f000 f97f 	bl	8000a20 <tjc_send_string>
	    sprintf(str, "x2.val=%d", (int)(IMinA * 100));
 8000722:	4b19      	ldr	r3, [pc, #100]	; (8000788 <main+0xf4>)
 8000724:	edd3 7a00 	vldr	s15, [r3]
 8000728:	ed9f 7a13 	vldr	s14, [pc, #76]	; 8000778 <main+0xe4>
 800072c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000730:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000734:	463b      	mov	r3, r7
 8000736:	ee17 2a90 	vmov	r2, s15
 800073a:	4914      	ldr	r1, [pc, #80]	; (800078c <main+0xf8>)
 800073c:	4618      	mov	r0, r3
 800073e:	f002 fd7d 	bl	800323c <siprintf>
		tjc_send_string(str);
 8000742:	463b      	mov	r3, r7
 8000744:	4618      	mov	r0, r3
 8000746:	f000 f96b 	bl	8000a20 <tjc_send_string>

	    sprintf(str, "n1.val=%d", t_freq);
 800074a:	4b11      	ldr	r3, [pc, #68]	; (8000790 <main+0xfc>)
 800074c:	681a      	ldr	r2, [r3, #0]
 800074e:	463b      	mov	r3, r7
 8000750:	4910      	ldr	r1, [pc, #64]	; (8000794 <main+0x100>)
 8000752:	4618      	mov	r0, r3
 8000754:	f002 fd72 	bl	800323c <siprintf>
		tjc_send_string(str);
 8000758:	463b      	mov	r3, r7
 800075a:	4618      	mov	r0, r3
 800075c:	f000 f960 	bl	8000a20 <tjc_send_string>
		sprintf(str, "n0.val=%d", single_freq);
 8000760:	e7ac      	b.n	80006bc <main+0x28>
 8000762:	bf00      	nop
 8000764:	200001a8 	.word	0x200001a8
 8000768:	200001ac 	.word	0x200001ac
 800076c:	20000010 	.word	0x20000010
 8000770:	08003b30 	.word	0x08003b30
 8000774:	20000000 	.word	0x20000000
 8000778:	42c80000 	.word	0x42c80000
 800077c:	08003b3c 	.word	0x08003b3c
 8000780:	20000004 	.word	0x20000004
 8000784:	08003b48 	.word	0x08003b48
 8000788:	20000008 	.word	0x20000008
 800078c:	08003b54 	.word	0x08003b54
 8000790:	2000000c 	.word	0x2000000c
 8000794:	08003b60 	.word	0x08003b60

08000798 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000798:	b580      	push	{r7, lr}
 800079a:	b094      	sub	sp, #80	; 0x50
 800079c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800079e:	f107 0320 	add.w	r3, r7, #32
 80007a2:	2230      	movs	r2, #48	; 0x30
 80007a4:	2100      	movs	r1, #0
 80007a6:	4618      	mov	r0, r3
 80007a8:	f002 fd40 	bl	800322c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007ac:	f107 030c 	add.w	r3, r7, #12
 80007b0:	2200      	movs	r2, #0
 80007b2:	601a      	str	r2, [r3, #0]
 80007b4:	605a      	str	r2, [r3, #4]
 80007b6:	609a      	str	r2, [r3, #8]
 80007b8:	60da      	str	r2, [r3, #12]
 80007ba:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80007bc:	2300      	movs	r3, #0
 80007be:	60bb      	str	r3, [r7, #8]
 80007c0:	4b28      	ldr	r3, [pc, #160]	; (8000864 <SystemClock_Config+0xcc>)
 80007c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007c4:	4a27      	ldr	r2, [pc, #156]	; (8000864 <SystemClock_Config+0xcc>)
 80007c6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007ca:	6413      	str	r3, [r2, #64]	; 0x40
 80007cc:	4b25      	ldr	r3, [pc, #148]	; (8000864 <SystemClock_Config+0xcc>)
 80007ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007d4:	60bb      	str	r3, [r7, #8]
 80007d6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80007d8:	2300      	movs	r3, #0
 80007da:	607b      	str	r3, [r7, #4]
 80007dc:	4b22      	ldr	r3, [pc, #136]	; (8000868 <SystemClock_Config+0xd0>)
 80007de:	681b      	ldr	r3, [r3, #0]
 80007e0:	4a21      	ldr	r2, [pc, #132]	; (8000868 <SystemClock_Config+0xd0>)
 80007e2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80007e6:	6013      	str	r3, [r2, #0]
 80007e8:	4b1f      	ldr	r3, [pc, #124]	; (8000868 <SystemClock_Config+0xd0>)
 80007ea:	681b      	ldr	r3, [r3, #0]
 80007ec:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80007f0:	607b      	str	r3, [r7, #4]
 80007f2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80007f4:	2302      	movs	r3, #2
 80007f6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80007f8:	2301      	movs	r3, #1
 80007fa:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80007fc:	2310      	movs	r3, #16
 80007fe:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000800:	2302      	movs	r3, #2
 8000802:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000804:	2300      	movs	r3, #0
 8000806:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000808:	2308      	movs	r3, #8
 800080a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 800080c:	23a8      	movs	r3, #168	; 0xa8
 800080e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000810:	2302      	movs	r3, #2
 8000812:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000814:	2304      	movs	r3, #4
 8000816:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000818:	f107 0320 	add.w	r3, r7, #32
 800081c:	4618      	mov	r0, r3
 800081e:	f001 f8c7 	bl	80019b0 <HAL_RCC_OscConfig>
 8000822:	4603      	mov	r3, r0
 8000824:	2b00      	cmp	r3, #0
 8000826:	d001      	beq.n	800082c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000828:	f000 f820 	bl	800086c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800082c:	230f      	movs	r3, #15
 800082e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000830:	2302      	movs	r3, #2
 8000832:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000834:	2300      	movs	r3, #0
 8000836:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000838:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800083c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800083e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000842:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000844:	f107 030c 	add.w	r3, r7, #12
 8000848:	2105      	movs	r1, #5
 800084a:	4618      	mov	r0, r3
 800084c:	f001 fb28 	bl	8001ea0 <HAL_RCC_ClockConfig>
 8000850:	4603      	mov	r3, r0
 8000852:	2b00      	cmp	r3, #0
 8000854:	d001      	beq.n	800085a <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000856:	f000 f809 	bl	800086c <Error_Handler>
  }
}
 800085a:	bf00      	nop
 800085c:	3750      	adds	r7, #80	; 0x50
 800085e:	46bd      	mov	sp, r7
 8000860:	bd80      	pop	{r7, pc}
 8000862:	bf00      	nop
 8000864:	40023800 	.word	0x40023800
 8000868:	40007000 	.word	0x40007000

0800086c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800086c:	b480      	push	{r7}
 800086e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000870:	b672      	cpsid	i
}
 8000872:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8000874:	e7fe      	b.n	8000874 <Error_Handler+0x8>
	...

08000878 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000878:	b480      	push	{r7}
 800087a:	b083      	sub	sp, #12
 800087c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800087e:	2300      	movs	r3, #0
 8000880:	607b      	str	r3, [r7, #4]
 8000882:	4b10      	ldr	r3, [pc, #64]	; (80008c4 <HAL_MspInit+0x4c>)
 8000884:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000886:	4a0f      	ldr	r2, [pc, #60]	; (80008c4 <HAL_MspInit+0x4c>)
 8000888:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800088c:	6453      	str	r3, [r2, #68]	; 0x44
 800088e:	4b0d      	ldr	r3, [pc, #52]	; (80008c4 <HAL_MspInit+0x4c>)
 8000890:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000892:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000896:	607b      	str	r3, [r7, #4]
 8000898:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800089a:	2300      	movs	r3, #0
 800089c:	603b      	str	r3, [r7, #0]
 800089e:	4b09      	ldr	r3, [pc, #36]	; (80008c4 <HAL_MspInit+0x4c>)
 80008a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008a2:	4a08      	ldr	r2, [pc, #32]	; (80008c4 <HAL_MspInit+0x4c>)
 80008a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008a8:	6413      	str	r3, [r2, #64]	; 0x40
 80008aa:	4b06      	ldr	r3, [pc, #24]	; (80008c4 <HAL_MspInit+0x4c>)
 80008ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008b2:	603b      	str	r3, [r7, #0]
 80008b4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008b6:	bf00      	nop
 80008b8:	370c      	adds	r7, #12
 80008ba:	46bd      	mov	sp, r7
 80008bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008c0:	4770      	bx	lr
 80008c2:	bf00      	nop
 80008c4:	40023800 	.word	0x40023800

080008c8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80008c8:	b480      	push	{r7}
 80008ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80008cc:	e7fe      	b.n	80008cc <NMI_Handler+0x4>

080008ce <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80008ce:	b480      	push	{r7}
 80008d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80008d2:	e7fe      	b.n	80008d2 <HardFault_Handler+0x4>

080008d4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80008d4:	b480      	push	{r7}
 80008d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80008d8:	e7fe      	b.n	80008d8 <MemManage_Handler+0x4>

080008da <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80008da:	b480      	push	{r7}
 80008dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80008de:	e7fe      	b.n	80008de <BusFault_Handler+0x4>

080008e0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80008e0:	b480      	push	{r7}
 80008e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80008e4:	e7fe      	b.n	80008e4 <UsageFault_Handler+0x4>

080008e6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80008e6:	b480      	push	{r7}
 80008e8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80008ea:	bf00      	nop
 80008ec:	46bd      	mov	sp, r7
 80008ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008f2:	4770      	bx	lr

080008f4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80008f4:	b480      	push	{r7}
 80008f6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80008f8:	bf00      	nop
 80008fa:	46bd      	mov	sp, r7
 80008fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000900:	4770      	bx	lr

08000902 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000902:	b480      	push	{r7}
 8000904:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000906:	bf00      	nop
 8000908:	46bd      	mov	sp, r7
 800090a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800090e:	4770      	bx	lr

08000910 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000910:	b580      	push	{r7, lr}
 8000912:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000914:	f000 fa02 	bl	8000d1c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000918:	bf00      	nop
 800091a:	bd80      	pop	{r7, pc}

0800091c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 800091c:	b580      	push	{r7, lr}
 800091e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000920:	4802      	ldr	r0, [pc, #8]	; (800092c <USART1_IRQHandler+0x10>)
 8000922:	f001 fd5f 	bl	80023e4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000926:	bf00      	nop
 8000928:	bd80      	pop	{r7, pc}
 800092a:	bf00      	nop
 800092c:	200001ac 	.word	0x200001ac

08000930 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8000930:	b580      	push	{r7, lr}
 8000932:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8000934:	4802      	ldr	r0, [pc, #8]	; (8000940 <DMA2_Stream2_IRQHandler+0x10>)
 8000936:	f000 fc63 	bl	8001200 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 800093a:	bf00      	nop
 800093c:	bd80      	pop	{r7, pc}
 800093e:	bf00      	nop
 8000940:	200001f0 	.word	0x200001f0

08000944 <DMA2_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA2 stream7 global interrupt.
  */
void DMA2_Stream7_IRQHandler(void)
{
 8000944:	b580      	push	{r7, lr}
 8000946:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream7_IRQn 0 */

  /* USER CODE END DMA2_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8000948:	4802      	ldr	r0, [pc, #8]	; (8000954 <DMA2_Stream7_IRQHandler+0x10>)
 800094a:	f000 fc59 	bl	8001200 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream7_IRQn 1 */

  /* USER CODE END DMA2_Stream7_IRQn 1 */
}
 800094e:	bf00      	nop
 8000950:	bd80      	pop	{r7, pc}
 8000952:	bf00      	nop
 8000954:	20000250 	.word	0x20000250

08000958 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000958:	b580      	push	{r7, lr}
 800095a:	b086      	sub	sp, #24
 800095c:	af00      	add	r7, sp, #0
 800095e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000960:	4a14      	ldr	r2, [pc, #80]	; (80009b4 <_sbrk+0x5c>)
 8000962:	4b15      	ldr	r3, [pc, #84]	; (80009b8 <_sbrk+0x60>)
 8000964:	1ad3      	subs	r3, r2, r3
 8000966:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000968:	697b      	ldr	r3, [r7, #20]
 800096a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800096c:	4b13      	ldr	r3, [pc, #76]	; (80009bc <_sbrk+0x64>)
 800096e:	681b      	ldr	r3, [r3, #0]
 8000970:	2b00      	cmp	r3, #0
 8000972:	d102      	bne.n	800097a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000974:	4b11      	ldr	r3, [pc, #68]	; (80009bc <_sbrk+0x64>)
 8000976:	4a12      	ldr	r2, [pc, #72]	; (80009c0 <_sbrk+0x68>)
 8000978:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800097a:	4b10      	ldr	r3, [pc, #64]	; (80009bc <_sbrk+0x64>)
 800097c:	681a      	ldr	r2, [r3, #0]
 800097e:	687b      	ldr	r3, [r7, #4]
 8000980:	4413      	add	r3, r2
 8000982:	693a      	ldr	r2, [r7, #16]
 8000984:	429a      	cmp	r2, r3
 8000986:	d207      	bcs.n	8000998 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000988:	f002 fc26 	bl	80031d8 <__errno>
 800098c:	4603      	mov	r3, r0
 800098e:	220c      	movs	r2, #12
 8000990:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000992:	f04f 33ff 	mov.w	r3, #4294967295
 8000996:	e009      	b.n	80009ac <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000998:	4b08      	ldr	r3, [pc, #32]	; (80009bc <_sbrk+0x64>)
 800099a:	681b      	ldr	r3, [r3, #0]
 800099c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800099e:	4b07      	ldr	r3, [pc, #28]	; (80009bc <_sbrk+0x64>)
 80009a0:	681a      	ldr	r2, [r3, #0]
 80009a2:	687b      	ldr	r3, [r7, #4]
 80009a4:	4413      	add	r3, r2
 80009a6:	4a05      	ldr	r2, [pc, #20]	; (80009bc <_sbrk+0x64>)
 80009a8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80009aa:	68fb      	ldr	r3, [r7, #12]
}
 80009ac:	4618      	mov	r0, r3
 80009ae:	3718      	adds	r7, #24
 80009b0:	46bd      	mov	sp, r7
 80009b2:	bd80      	pop	{r7, pc}
 80009b4:	20020000 	.word	0x20020000
 80009b8:	00000400 	.word	0x00000400
 80009bc:	200001a4 	.word	0x200001a4
 80009c0:	200002c8 	.word	0x200002c8

080009c4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80009c4:	b480      	push	{r7}
 80009c6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80009c8:	4b06      	ldr	r3, [pc, #24]	; (80009e4 <SystemInit+0x20>)
 80009ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80009ce:	4a05      	ldr	r2, [pc, #20]	; (80009e4 <SystemInit+0x20>)
 80009d0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80009d4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80009d8:	bf00      	nop
 80009da:	46bd      	mov	sp, r7
 80009dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e0:	4770      	bx	lr
 80009e2:	bf00      	nop
 80009e4:	e000ed00 	.word	0xe000ed00

080009e8 <uart_send_char>:
 ���ܣ�    	���ڷ��͵����ַ�
 ���������		Ҫ���͵ĵ����ַ�
 ����ֵ�� 		��
 �޸ļ�¼��
 **********************************************************/
void uart_send_char(char ch) {
 80009e8:	b580      	push	{r7, lr}
 80009ea:	b084      	sub	sp, #16
 80009ec:	af00      	add	r7, sp, #0
 80009ee:	4603      	mov	r3, r0
 80009f0:	71fb      	strb	r3, [r7, #7]
	uint8_t ch2 = (uint8_t) ch;
 80009f2:	79fb      	ldrb	r3, [r7, #7]
 80009f4:	73fb      	strb	r3, [r7, #15]
	// ������0æ��ʱ��ȴ�����æ��ʱ���ٷ��ʹ��������ַ�
//    while (__HAL_UART_GET_FLAG(&TJC_UART, UART_FLAG_TXE) == RESET)
	; // �ȴ��������
	while (__HAL_UART_GET_FLAG(&TJC_UART, UART_FLAG_TC) == RESET)
 80009f6:	bf00      	nop
 80009f8:	4b08      	ldr	r3, [pc, #32]	; (8000a1c <uart_send_char+0x34>)
 80009fa:	681b      	ldr	r3, [r3, #0]
 80009fc:	681b      	ldr	r3, [r3, #0]
 80009fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000a02:	2b40      	cmp	r3, #64	; 0x40
 8000a04:	d1f8      	bne.n	80009f8 <uart_send_char+0x10>
		;
	// ���͵����ַ�
	HAL_UART_Transmit_IT(&TJC_UART, &ch2, 1);
 8000a06:	f107 030f 	add.w	r3, r7, #15
 8000a0a:	2201      	movs	r2, #1
 8000a0c:	4619      	mov	r1, r3
 8000a0e:	4803      	ldr	r0, [pc, #12]	; (8000a1c <uart_send_char+0x34>)
 8000a10:	f001 fc73 	bl	80022fa <HAL_UART_Transmit_IT>
	return;
 8000a14:	bf00      	nop
}
 8000a16:	3710      	adds	r7, #16
 8000a18:	46bd      	mov	sp, r7
 8000a1a:	bd80      	pop	{r7, pc}
 8000a1c:	200001ac 	.word	0x200001ac

08000a20 <tjc_send_string>:
 ���������		Ҫ���͵��ַ���
 ����ֵ�� 		��
 ʾ��:			tjc_send_val("n0", "val", 100); ���������ݾ��� n0.val=100
 �޸ļ�¼��
 **********************************************************/
void tjc_send_string(char *str) {
 8000a20:	b580      	push	{r7, lr}
 8000a22:	b082      	sub	sp, #8
 8000a24:	af00      	add	r7, sp, #0
 8000a26:	6078      	str	r0, [r7, #4]
	// ��ǰ�ַ�����ַ���ڽ�β ���� �ַ����׵�ַ��Ϊ��
	while (*str != 0 && str != 0) {
 8000a28:	e006      	b.n	8000a38 <tjc_send_string+0x18>
		// �����ַ����׵�ַ�е��ַ��������ڷ������֮���׵�ַ����
		uart_send_char(*str++);
 8000a2a:	687b      	ldr	r3, [r7, #4]
 8000a2c:	1c5a      	adds	r2, r3, #1
 8000a2e:	607a      	str	r2, [r7, #4]
 8000a30:	781b      	ldrb	r3, [r3, #0]
 8000a32:	4618      	mov	r0, r3
 8000a34:	f7ff ffd8 	bl	80009e8 <uart_send_char>
	while (*str != 0 && str != 0) {
 8000a38:	687b      	ldr	r3, [r7, #4]
 8000a3a:	781b      	ldrb	r3, [r3, #0]
 8000a3c:	2b00      	cmp	r3, #0
 8000a3e:	d002      	beq.n	8000a46 <tjc_send_string+0x26>
 8000a40:	687b      	ldr	r3, [r7, #4]
 8000a42:	2b00      	cmp	r3, #0
 8000a44:	d1f1      	bne.n	8000a2a <tjc_send_string+0xa>
	}
	uart_send_char(0xff);
 8000a46:	20ff      	movs	r0, #255	; 0xff
 8000a48:	f7ff ffce 	bl	80009e8 <uart_send_char>
	uart_send_char(0xff);
 8000a4c:	20ff      	movs	r0, #255	; 0xff
 8000a4e:	f7ff ffcb 	bl	80009e8 <uart_send_char>
	uart_send_char(0xff);
 8000a52:	20ff      	movs	r0, #255	; 0xff
 8000a54:	f7ff ffc8 	bl	80009e8 <uart_send_char>
	return;
 8000a58:	bf00      	nop
}
 8000a5a:	3708      	adds	r7, #8
 8000a5c:	46bd      	mov	sp, r7
 8000a5e:	bd80      	pop	{r7, pc}

08000a60 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_tx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8000a60:	b580      	push	{r7, lr}
 8000a62:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000a64:	4b11      	ldr	r3, [pc, #68]	; (8000aac <MX_USART1_UART_Init+0x4c>)
 8000a66:	4a12      	ldr	r2, [pc, #72]	; (8000ab0 <MX_USART1_UART_Init+0x50>)
 8000a68:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000a6a:	4b10      	ldr	r3, [pc, #64]	; (8000aac <MX_USART1_UART_Init+0x4c>)
 8000a6c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000a70:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000a72:	4b0e      	ldr	r3, [pc, #56]	; (8000aac <MX_USART1_UART_Init+0x4c>)
 8000a74:	2200      	movs	r2, #0
 8000a76:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000a78:	4b0c      	ldr	r3, [pc, #48]	; (8000aac <MX_USART1_UART_Init+0x4c>)
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000a7e:	4b0b      	ldr	r3, [pc, #44]	; (8000aac <MX_USART1_UART_Init+0x4c>)
 8000a80:	2200      	movs	r2, #0
 8000a82:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000a84:	4b09      	ldr	r3, [pc, #36]	; (8000aac <MX_USART1_UART_Init+0x4c>)
 8000a86:	220c      	movs	r2, #12
 8000a88:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a8a:	4b08      	ldr	r3, [pc, #32]	; (8000aac <MX_USART1_UART_Init+0x4c>)
 8000a8c:	2200      	movs	r2, #0
 8000a8e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a90:	4b06      	ldr	r3, [pc, #24]	; (8000aac <MX_USART1_UART_Init+0x4c>)
 8000a92:	2200      	movs	r2, #0
 8000a94:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000a96:	4805      	ldr	r0, [pc, #20]	; (8000aac <MX_USART1_UART_Init+0x4c>)
 8000a98:	f001 fbe2 	bl	8002260 <HAL_UART_Init>
 8000a9c:	4603      	mov	r3, r0
 8000a9e:	2b00      	cmp	r3, #0
 8000aa0:	d001      	beq.n	8000aa6 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000aa2:	f7ff fee3 	bl	800086c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000aa6:	bf00      	nop
 8000aa8:	bd80      	pop	{r7, pc}
 8000aaa:	bf00      	nop
 8000aac:	200001ac 	.word	0x200001ac
 8000ab0:	40011000 	.word	0x40011000

08000ab4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	b08a      	sub	sp, #40	; 0x28
 8000ab8:	af00      	add	r7, sp, #0
 8000aba:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000abc:	f107 0314 	add.w	r3, r7, #20
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	601a      	str	r2, [r3, #0]
 8000ac4:	605a      	str	r2, [r3, #4]
 8000ac6:	609a      	str	r2, [r3, #8]
 8000ac8:	60da      	str	r2, [r3, #12]
 8000aca:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	681b      	ldr	r3, [r3, #0]
 8000ad0:	4a4d      	ldr	r2, [pc, #308]	; (8000c08 <HAL_UART_MspInit+0x154>)
 8000ad2:	4293      	cmp	r3, r2
 8000ad4:	f040 8093 	bne.w	8000bfe <HAL_UART_MspInit+0x14a>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000ad8:	2300      	movs	r3, #0
 8000ada:	613b      	str	r3, [r7, #16]
 8000adc:	4b4b      	ldr	r3, [pc, #300]	; (8000c0c <HAL_UART_MspInit+0x158>)
 8000ade:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ae0:	4a4a      	ldr	r2, [pc, #296]	; (8000c0c <HAL_UART_MspInit+0x158>)
 8000ae2:	f043 0310 	orr.w	r3, r3, #16
 8000ae6:	6453      	str	r3, [r2, #68]	; 0x44
 8000ae8:	4b48      	ldr	r3, [pc, #288]	; (8000c0c <HAL_UART_MspInit+0x158>)
 8000aea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000aec:	f003 0310 	and.w	r3, r3, #16
 8000af0:	613b      	str	r3, [r7, #16]
 8000af2:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000af4:	2300      	movs	r3, #0
 8000af6:	60fb      	str	r3, [r7, #12]
 8000af8:	4b44      	ldr	r3, [pc, #272]	; (8000c0c <HAL_UART_MspInit+0x158>)
 8000afa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000afc:	4a43      	ldr	r2, [pc, #268]	; (8000c0c <HAL_UART_MspInit+0x158>)
 8000afe:	f043 0301 	orr.w	r3, r3, #1
 8000b02:	6313      	str	r3, [r2, #48]	; 0x30
 8000b04:	4b41      	ldr	r3, [pc, #260]	; (8000c0c <HAL_UART_MspInit+0x158>)
 8000b06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b08:	f003 0301 	and.w	r3, r3, #1
 8000b0c:	60fb      	str	r3, [r7, #12]
 8000b0e:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000b10:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000b14:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b16:	2302      	movs	r3, #2
 8000b18:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b1a:	2300      	movs	r3, #0
 8000b1c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b1e:	2303      	movs	r3, #3
 8000b20:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000b22:	2307      	movs	r3, #7
 8000b24:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b26:	f107 0314 	add.w	r3, r7, #20
 8000b2a:	4619      	mov	r1, r3
 8000b2c:	4838      	ldr	r0, [pc, #224]	; (8000c10 <HAL_UART_MspInit+0x15c>)
 8000b2e:	f000 fda3 	bl	8001678 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream2;
 8000b32:	4b38      	ldr	r3, [pc, #224]	; (8000c14 <HAL_UART_MspInit+0x160>)
 8000b34:	4a38      	ldr	r2, [pc, #224]	; (8000c18 <HAL_UART_MspInit+0x164>)
 8000b36:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 8000b38:	4b36      	ldr	r3, [pc, #216]	; (8000c14 <HAL_UART_MspInit+0x160>)
 8000b3a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000b3e:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000b40:	4b34      	ldr	r3, [pc, #208]	; (8000c14 <HAL_UART_MspInit+0x160>)
 8000b42:	2200      	movs	r2, #0
 8000b44:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000b46:	4b33      	ldr	r3, [pc, #204]	; (8000c14 <HAL_UART_MspInit+0x160>)
 8000b48:	2200      	movs	r2, #0
 8000b4a:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000b4c:	4b31      	ldr	r3, [pc, #196]	; (8000c14 <HAL_UART_MspInit+0x160>)
 8000b4e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000b52:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000b54:	4b2f      	ldr	r3, [pc, #188]	; (8000c14 <HAL_UART_MspInit+0x160>)
 8000b56:	2200      	movs	r2, #0
 8000b58:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000b5a:	4b2e      	ldr	r3, [pc, #184]	; (8000c14 <HAL_UART_MspInit+0x160>)
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8000b60:	4b2c      	ldr	r3, [pc, #176]	; (8000c14 <HAL_UART_MspInit+0x160>)
 8000b62:	2200      	movs	r2, #0
 8000b64:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8000b66:	4b2b      	ldr	r3, [pc, #172]	; (8000c14 <HAL_UART_MspInit+0x160>)
 8000b68:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000b6c:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000b6e:	4b29      	ldr	r3, [pc, #164]	; (8000c14 <HAL_UART_MspInit+0x160>)
 8000b70:	2200      	movs	r2, #0
 8000b72:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8000b74:	4827      	ldr	r0, [pc, #156]	; (8000c14 <HAL_UART_MspInit+0x160>)
 8000b76:	f000 fa03 	bl	8000f80 <HAL_DMA_Init>
 8000b7a:	4603      	mov	r3, r0
 8000b7c:	2b00      	cmp	r3, #0
 8000b7e:	d001      	beq.n	8000b84 <HAL_UART_MspInit+0xd0>
    {
      Error_Handler();
 8000b80:	f7ff fe74 	bl	800086c <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	4a23      	ldr	r2, [pc, #140]	; (8000c14 <HAL_UART_MspInit+0x160>)
 8000b88:	639a      	str	r2, [r3, #56]	; 0x38
 8000b8a:	4a22      	ldr	r2, [pc, #136]	; (8000c14 <HAL_UART_MspInit+0x160>)
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA2_Stream7;
 8000b90:	4b22      	ldr	r3, [pc, #136]	; (8000c1c <HAL_UART_MspInit+0x168>)
 8000b92:	4a23      	ldr	r2, [pc, #140]	; (8000c20 <HAL_UART_MspInit+0x16c>)
 8000b94:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Channel = DMA_CHANNEL_4;
 8000b96:	4b21      	ldr	r3, [pc, #132]	; (8000c1c <HAL_UART_MspInit+0x168>)
 8000b98:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000b9c:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000b9e:	4b1f      	ldr	r3, [pc, #124]	; (8000c1c <HAL_UART_MspInit+0x168>)
 8000ba0:	2240      	movs	r2, #64	; 0x40
 8000ba2:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000ba4:	4b1d      	ldr	r3, [pc, #116]	; (8000c1c <HAL_UART_MspInit+0x168>)
 8000ba6:	2200      	movs	r2, #0
 8000ba8:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000baa:	4b1c      	ldr	r3, [pc, #112]	; (8000c1c <HAL_UART_MspInit+0x168>)
 8000bac:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000bb0:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000bb2:	4b1a      	ldr	r3, [pc, #104]	; (8000c1c <HAL_UART_MspInit+0x168>)
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000bb8:	4b18      	ldr	r3, [pc, #96]	; (8000c1c <HAL_UART_MspInit+0x168>)
 8000bba:	2200      	movs	r2, #0
 8000bbc:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8000bbe:	4b17      	ldr	r3, [pc, #92]	; (8000c1c <HAL_UART_MspInit+0x168>)
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_HIGH;
 8000bc4:	4b15      	ldr	r3, [pc, #84]	; (8000c1c <HAL_UART_MspInit+0x168>)
 8000bc6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000bca:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000bcc:	4b13      	ldr	r3, [pc, #76]	; (8000c1c <HAL_UART_MspInit+0x168>)
 8000bce:	2200      	movs	r2, #0
 8000bd0:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8000bd2:	4812      	ldr	r0, [pc, #72]	; (8000c1c <HAL_UART_MspInit+0x168>)
 8000bd4:	f000 f9d4 	bl	8000f80 <HAL_DMA_Init>
 8000bd8:	4603      	mov	r3, r0
 8000bda:	2b00      	cmp	r3, #0
 8000bdc:	d001      	beq.n	8000be2 <HAL_UART_MspInit+0x12e>
    {
      Error_Handler();
 8000bde:	f7ff fe45 	bl	800086c <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	4a0d      	ldr	r2, [pc, #52]	; (8000c1c <HAL_UART_MspInit+0x168>)
 8000be6:	635a      	str	r2, [r3, #52]	; 0x34
 8000be8:	4a0c      	ldr	r2, [pc, #48]	; (8000c1c <HAL_UART_MspInit+0x168>)
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000bee:	2200      	movs	r2, #0
 8000bf0:	2100      	movs	r1, #0
 8000bf2:	2025      	movs	r0, #37	; 0x25
 8000bf4:	f000 f98d 	bl	8000f12 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000bf8:	2025      	movs	r0, #37	; 0x25
 8000bfa:	f000 f9a6 	bl	8000f4a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8000bfe:	bf00      	nop
 8000c00:	3728      	adds	r7, #40	; 0x28
 8000c02:	46bd      	mov	sp, r7
 8000c04:	bd80      	pop	{r7, pc}
 8000c06:	bf00      	nop
 8000c08:	40011000 	.word	0x40011000
 8000c0c:	40023800 	.word	0x40023800
 8000c10:	40020000 	.word	0x40020000
 8000c14:	200001f0 	.word	0x200001f0
 8000c18:	40026440 	.word	0x40026440
 8000c1c:	20000250 	.word	0x20000250
 8000c20:	400264b8 	.word	0x400264b8

08000c24 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000c24:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000c5c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000c28:	480d      	ldr	r0, [pc, #52]	; (8000c60 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000c2a:	490e      	ldr	r1, [pc, #56]	; (8000c64 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000c2c:	4a0e      	ldr	r2, [pc, #56]	; (8000c68 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000c2e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c30:	e002      	b.n	8000c38 <LoopCopyDataInit>

08000c32 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c32:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c34:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c36:	3304      	adds	r3, #4

08000c38 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c38:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c3a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c3c:	d3f9      	bcc.n	8000c32 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c3e:	4a0b      	ldr	r2, [pc, #44]	; (8000c6c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000c40:	4c0b      	ldr	r4, [pc, #44]	; (8000c70 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000c42:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c44:	e001      	b.n	8000c4a <LoopFillZerobss>

08000c46 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c46:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c48:	3204      	adds	r2, #4

08000c4a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c4a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c4c:	d3fb      	bcc.n	8000c46 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000c4e:	f7ff feb9 	bl	80009c4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000c52:	f002 fac7 	bl	80031e4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000c56:	f7ff fd1d 	bl	8000694 <main>
  bx  lr    
 8000c5a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000c5c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000c60:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c64:	20000084 	.word	0x20000084
  ldr r2, =_sidata
 8000c68:	08003bd0 	.word	0x08003bd0
  ldr r2, =_sbss
 8000c6c:	20000084 	.word	0x20000084
  ldr r4, =_ebss
 8000c70:	200002c4 	.word	0x200002c4

08000c74 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000c74:	e7fe      	b.n	8000c74 <ADC_IRQHandler>
	...

08000c78 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000c7c:	4b0e      	ldr	r3, [pc, #56]	; (8000cb8 <HAL_Init+0x40>)
 8000c7e:	681b      	ldr	r3, [r3, #0]
 8000c80:	4a0d      	ldr	r2, [pc, #52]	; (8000cb8 <HAL_Init+0x40>)
 8000c82:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000c86:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000c88:	4b0b      	ldr	r3, [pc, #44]	; (8000cb8 <HAL_Init+0x40>)
 8000c8a:	681b      	ldr	r3, [r3, #0]
 8000c8c:	4a0a      	ldr	r2, [pc, #40]	; (8000cb8 <HAL_Init+0x40>)
 8000c8e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000c92:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c94:	4b08      	ldr	r3, [pc, #32]	; (8000cb8 <HAL_Init+0x40>)
 8000c96:	681b      	ldr	r3, [r3, #0]
 8000c98:	4a07      	ldr	r2, [pc, #28]	; (8000cb8 <HAL_Init+0x40>)
 8000c9a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000c9e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ca0:	2003      	movs	r0, #3
 8000ca2:	f000 f92b 	bl	8000efc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000ca6:	200f      	movs	r0, #15
 8000ca8:	f000 f808 	bl	8000cbc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000cac:	f7ff fde4 	bl	8000878 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000cb0:	2300      	movs	r3, #0
}
 8000cb2:	4618      	mov	r0, r3
 8000cb4:	bd80      	pop	{r7, pc}
 8000cb6:	bf00      	nop
 8000cb8:	40023c00 	.word	0x40023c00

08000cbc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	b082      	sub	sp, #8
 8000cc0:	af00      	add	r7, sp, #0
 8000cc2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000cc4:	4b12      	ldr	r3, [pc, #72]	; (8000d10 <HAL_InitTick+0x54>)
 8000cc6:	681a      	ldr	r2, [r3, #0]
 8000cc8:	4b12      	ldr	r3, [pc, #72]	; (8000d14 <HAL_InitTick+0x58>)
 8000cca:	781b      	ldrb	r3, [r3, #0]
 8000ccc:	4619      	mov	r1, r3
 8000cce:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000cd2:	fbb3 f3f1 	udiv	r3, r3, r1
 8000cd6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000cda:	4618      	mov	r0, r3
 8000cdc:	f000 f943 	bl	8000f66 <HAL_SYSTICK_Config>
 8000ce0:	4603      	mov	r3, r0
 8000ce2:	2b00      	cmp	r3, #0
 8000ce4:	d001      	beq.n	8000cea <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000ce6:	2301      	movs	r3, #1
 8000ce8:	e00e      	b.n	8000d08 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	2b0f      	cmp	r3, #15
 8000cee:	d80a      	bhi.n	8000d06 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000cf0:	2200      	movs	r2, #0
 8000cf2:	6879      	ldr	r1, [r7, #4]
 8000cf4:	f04f 30ff 	mov.w	r0, #4294967295
 8000cf8:	f000 f90b 	bl	8000f12 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000cfc:	4a06      	ldr	r2, [pc, #24]	; (8000d18 <HAL_InitTick+0x5c>)
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000d02:	2300      	movs	r3, #0
 8000d04:	e000      	b.n	8000d08 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000d06:	2301      	movs	r3, #1
}
 8000d08:	4618      	mov	r0, r3
 8000d0a:	3708      	adds	r7, #8
 8000d0c:	46bd      	mov	sp, r7
 8000d0e:	bd80      	pop	{r7, pc}
 8000d10:	20000014 	.word	0x20000014
 8000d14:	2000001c 	.word	0x2000001c
 8000d18:	20000018 	.word	0x20000018

08000d1c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d1c:	b480      	push	{r7}
 8000d1e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d20:	4b06      	ldr	r3, [pc, #24]	; (8000d3c <HAL_IncTick+0x20>)
 8000d22:	781b      	ldrb	r3, [r3, #0]
 8000d24:	461a      	mov	r2, r3
 8000d26:	4b06      	ldr	r3, [pc, #24]	; (8000d40 <HAL_IncTick+0x24>)
 8000d28:	681b      	ldr	r3, [r3, #0]
 8000d2a:	4413      	add	r3, r2
 8000d2c:	4a04      	ldr	r2, [pc, #16]	; (8000d40 <HAL_IncTick+0x24>)
 8000d2e:	6013      	str	r3, [r2, #0]
}
 8000d30:	bf00      	nop
 8000d32:	46bd      	mov	sp, r7
 8000d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d38:	4770      	bx	lr
 8000d3a:	bf00      	nop
 8000d3c:	2000001c 	.word	0x2000001c
 8000d40:	200002b0 	.word	0x200002b0

08000d44 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d44:	b480      	push	{r7}
 8000d46:	af00      	add	r7, sp, #0
  return uwTick;
 8000d48:	4b03      	ldr	r3, [pc, #12]	; (8000d58 <HAL_GetTick+0x14>)
 8000d4a:	681b      	ldr	r3, [r3, #0]
}
 8000d4c:	4618      	mov	r0, r3
 8000d4e:	46bd      	mov	sp, r7
 8000d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d54:	4770      	bx	lr
 8000d56:	bf00      	nop
 8000d58:	200002b0 	.word	0x200002b0

08000d5c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d5c:	b480      	push	{r7}
 8000d5e:	b085      	sub	sp, #20
 8000d60:	af00      	add	r7, sp, #0
 8000d62:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	f003 0307 	and.w	r3, r3, #7
 8000d6a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d6c:	4b0c      	ldr	r3, [pc, #48]	; (8000da0 <__NVIC_SetPriorityGrouping+0x44>)
 8000d6e:	68db      	ldr	r3, [r3, #12]
 8000d70:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d72:	68ba      	ldr	r2, [r7, #8]
 8000d74:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000d78:	4013      	ands	r3, r2
 8000d7a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d7c:	68fb      	ldr	r3, [r7, #12]
 8000d7e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d80:	68bb      	ldr	r3, [r7, #8]
 8000d82:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d84:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000d88:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d8c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d8e:	4a04      	ldr	r2, [pc, #16]	; (8000da0 <__NVIC_SetPriorityGrouping+0x44>)
 8000d90:	68bb      	ldr	r3, [r7, #8]
 8000d92:	60d3      	str	r3, [r2, #12]
}
 8000d94:	bf00      	nop
 8000d96:	3714      	adds	r7, #20
 8000d98:	46bd      	mov	sp, r7
 8000d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d9e:	4770      	bx	lr
 8000da0:	e000ed00 	.word	0xe000ed00

08000da4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000da4:	b480      	push	{r7}
 8000da6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000da8:	4b04      	ldr	r3, [pc, #16]	; (8000dbc <__NVIC_GetPriorityGrouping+0x18>)
 8000daa:	68db      	ldr	r3, [r3, #12]
 8000dac:	0a1b      	lsrs	r3, r3, #8
 8000dae:	f003 0307 	and.w	r3, r3, #7
}
 8000db2:	4618      	mov	r0, r3
 8000db4:	46bd      	mov	sp, r7
 8000db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dba:	4770      	bx	lr
 8000dbc:	e000ed00 	.word	0xe000ed00

08000dc0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000dc0:	b480      	push	{r7}
 8000dc2:	b083      	sub	sp, #12
 8000dc4:	af00      	add	r7, sp, #0
 8000dc6:	4603      	mov	r3, r0
 8000dc8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000dca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dce:	2b00      	cmp	r3, #0
 8000dd0:	db0b      	blt.n	8000dea <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000dd2:	79fb      	ldrb	r3, [r7, #7]
 8000dd4:	f003 021f 	and.w	r2, r3, #31
 8000dd8:	4907      	ldr	r1, [pc, #28]	; (8000df8 <__NVIC_EnableIRQ+0x38>)
 8000dda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dde:	095b      	lsrs	r3, r3, #5
 8000de0:	2001      	movs	r0, #1
 8000de2:	fa00 f202 	lsl.w	r2, r0, r2
 8000de6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000dea:	bf00      	nop
 8000dec:	370c      	adds	r7, #12
 8000dee:	46bd      	mov	sp, r7
 8000df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df4:	4770      	bx	lr
 8000df6:	bf00      	nop
 8000df8:	e000e100 	.word	0xe000e100

08000dfc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000dfc:	b480      	push	{r7}
 8000dfe:	b083      	sub	sp, #12
 8000e00:	af00      	add	r7, sp, #0
 8000e02:	4603      	mov	r3, r0
 8000e04:	6039      	str	r1, [r7, #0]
 8000e06:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e08:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e0c:	2b00      	cmp	r3, #0
 8000e0e:	db0a      	blt.n	8000e26 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e10:	683b      	ldr	r3, [r7, #0]
 8000e12:	b2da      	uxtb	r2, r3
 8000e14:	490c      	ldr	r1, [pc, #48]	; (8000e48 <__NVIC_SetPriority+0x4c>)
 8000e16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e1a:	0112      	lsls	r2, r2, #4
 8000e1c:	b2d2      	uxtb	r2, r2
 8000e1e:	440b      	add	r3, r1
 8000e20:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e24:	e00a      	b.n	8000e3c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e26:	683b      	ldr	r3, [r7, #0]
 8000e28:	b2da      	uxtb	r2, r3
 8000e2a:	4908      	ldr	r1, [pc, #32]	; (8000e4c <__NVIC_SetPriority+0x50>)
 8000e2c:	79fb      	ldrb	r3, [r7, #7]
 8000e2e:	f003 030f 	and.w	r3, r3, #15
 8000e32:	3b04      	subs	r3, #4
 8000e34:	0112      	lsls	r2, r2, #4
 8000e36:	b2d2      	uxtb	r2, r2
 8000e38:	440b      	add	r3, r1
 8000e3a:	761a      	strb	r2, [r3, #24]
}
 8000e3c:	bf00      	nop
 8000e3e:	370c      	adds	r7, #12
 8000e40:	46bd      	mov	sp, r7
 8000e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e46:	4770      	bx	lr
 8000e48:	e000e100 	.word	0xe000e100
 8000e4c:	e000ed00 	.word	0xe000ed00

08000e50 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e50:	b480      	push	{r7}
 8000e52:	b089      	sub	sp, #36	; 0x24
 8000e54:	af00      	add	r7, sp, #0
 8000e56:	60f8      	str	r0, [r7, #12]
 8000e58:	60b9      	str	r1, [r7, #8]
 8000e5a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e5c:	68fb      	ldr	r3, [r7, #12]
 8000e5e:	f003 0307 	and.w	r3, r3, #7
 8000e62:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e64:	69fb      	ldr	r3, [r7, #28]
 8000e66:	f1c3 0307 	rsb	r3, r3, #7
 8000e6a:	2b04      	cmp	r3, #4
 8000e6c:	bf28      	it	cs
 8000e6e:	2304      	movcs	r3, #4
 8000e70:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e72:	69fb      	ldr	r3, [r7, #28]
 8000e74:	3304      	adds	r3, #4
 8000e76:	2b06      	cmp	r3, #6
 8000e78:	d902      	bls.n	8000e80 <NVIC_EncodePriority+0x30>
 8000e7a:	69fb      	ldr	r3, [r7, #28]
 8000e7c:	3b03      	subs	r3, #3
 8000e7e:	e000      	b.n	8000e82 <NVIC_EncodePriority+0x32>
 8000e80:	2300      	movs	r3, #0
 8000e82:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e84:	f04f 32ff 	mov.w	r2, #4294967295
 8000e88:	69bb      	ldr	r3, [r7, #24]
 8000e8a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e8e:	43da      	mvns	r2, r3
 8000e90:	68bb      	ldr	r3, [r7, #8]
 8000e92:	401a      	ands	r2, r3
 8000e94:	697b      	ldr	r3, [r7, #20]
 8000e96:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e98:	f04f 31ff 	mov.w	r1, #4294967295
 8000e9c:	697b      	ldr	r3, [r7, #20]
 8000e9e:	fa01 f303 	lsl.w	r3, r1, r3
 8000ea2:	43d9      	mvns	r1, r3
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ea8:	4313      	orrs	r3, r2
         );
}
 8000eaa:	4618      	mov	r0, r3
 8000eac:	3724      	adds	r7, #36	; 0x24
 8000eae:	46bd      	mov	sp, r7
 8000eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb4:	4770      	bx	lr
	...

08000eb8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	b082      	sub	sp, #8
 8000ebc:	af00      	add	r7, sp, #0
 8000ebe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	3b01      	subs	r3, #1
 8000ec4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000ec8:	d301      	bcc.n	8000ece <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000eca:	2301      	movs	r3, #1
 8000ecc:	e00f      	b.n	8000eee <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000ece:	4a0a      	ldr	r2, [pc, #40]	; (8000ef8 <SysTick_Config+0x40>)
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	3b01      	subs	r3, #1
 8000ed4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000ed6:	210f      	movs	r1, #15
 8000ed8:	f04f 30ff 	mov.w	r0, #4294967295
 8000edc:	f7ff ff8e 	bl	8000dfc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ee0:	4b05      	ldr	r3, [pc, #20]	; (8000ef8 <SysTick_Config+0x40>)
 8000ee2:	2200      	movs	r2, #0
 8000ee4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000ee6:	4b04      	ldr	r3, [pc, #16]	; (8000ef8 <SysTick_Config+0x40>)
 8000ee8:	2207      	movs	r2, #7
 8000eea:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000eec:	2300      	movs	r3, #0
}
 8000eee:	4618      	mov	r0, r3
 8000ef0:	3708      	adds	r7, #8
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	bd80      	pop	{r7, pc}
 8000ef6:	bf00      	nop
 8000ef8:	e000e010 	.word	0xe000e010

08000efc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000efc:	b580      	push	{r7, lr}
 8000efe:	b082      	sub	sp, #8
 8000f00:	af00      	add	r7, sp, #0
 8000f02:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f04:	6878      	ldr	r0, [r7, #4]
 8000f06:	f7ff ff29 	bl	8000d5c <__NVIC_SetPriorityGrouping>
}
 8000f0a:	bf00      	nop
 8000f0c:	3708      	adds	r7, #8
 8000f0e:	46bd      	mov	sp, r7
 8000f10:	bd80      	pop	{r7, pc}

08000f12 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000f12:	b580      	push	{r7, lr}
 8000f14:	b086      	sub	sp, #24
 8000f16:	af00      	add	r7, sp, #0
 8000f18:	4603      	mov	r3, r0
 8000f1a:	60b9      	str	r1, [r7, #8]
 8000f1c:	607a      	str	r2, [r7, #4]
 8000f1e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000f20:	2300      	movs	r3, #0
 8000f22:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000f24:	f7ff ff3e 	bl	8000da4 <__NVIC_GetPriorityGrouping>
 8000f28:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f2a:	687a      	ldr	r2, [r7, #4]
 8000f2c:	68b9      	ldr	r1, [r7, #8]
 8000f2e:	6978      	ldr	r0, [r7, #20]
 8000f30:	f7ff ff8e 	bl	8000e50 <NVIC_EncodePriority>
 8000f34:	4602      	mov	r2, r0
 8000f36:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f3a:	4611      	mov	r1, r2
 8000f3c:	4618      	mov	r0, r3
 8000f3e:	f7ff ff5d 	bl	8000dfc <__NVIC_SetPriority>
}
 8000f42:	bf00      	nop
 8000f44:	3718      	adds	r7, #24
 8000f46:	46bd      	mov	sp, r7
 8000f48:	bd80      	pop	{r7, pc}

08000f4a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f4a:	b580      	push	{r7, lr}
 8000f4c:	b082      	sub	sp, #8
 8000f4e:	af00      	add	r7, sp, #0
 8000f50:	4603      	mov	r3, r0
 8000f52:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000f54:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f58:	4618      	mov	r0, r3
 8000f5a:	f7ff ff31 	bl	8000dc0 <__NVIC_EnableIRQ>
}
 8000f5e:	bf00      	nop
 8000f60:	3708      	adds	r7, #8
 8000f62:	46bd      	mov	sp, r7
 8000f64:	bd80      	pop	{r7, pc}

08000f66 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000f66:	b580      	push	{r7, lr}
 8000f68:	b082      	sub	sp, #8
 8000f6a:	af00      	add	r7, sp, #0
 8000f6c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000f6e:	6878      	ldr	r0, [r7, #4]
 8000f70:	f7ff ffa2 	bl	8000eb8 <SysTick_Config>
 8000f74:	4603      	mov	r3, r0
}
 8000f76:	4618      	mov	r0, r3
 8000f78:	3708      	adds	r7, #8
 8000f7a:	46bd      	mov	sp, r7
 8000f7c:	bd80      	pop	{r7, pc}
	...

08000f80 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000f80:	b580      	push	{r7, lr}
 8000f82:	b086      	sub	sp, #24
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8000f88:	2300      	movs	r3, #0
 8000f8a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8000f8c:	f7ff feda 	bl	8000d44 <HAL_GetTick>
 8000f90:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	2b00      	cmp	r3, #0
 8000f96:	d101      	bne.n	8000f9c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8000f98:	2301      	movs	r3, #1
 8000f9a:	e099      	b.n	80010d0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	2202      	movs	r2, #2
 8000fa0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	2200      	movs	r2, #0
 8000fa8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	681a      	ldr	r2, [r3, #0]
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	f022 0201 	bic.w	r2, r2, #1
 8000fba:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000fbc:	e00f      	b.n	8000fde <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8000fbe:	f7ff fec1 	bl	8000d44 <HAL_GetTick>
 8000fc2:	4602      	mov	r2, r0
 8000fc4:	693b      	ldr	r3, [r7, #16]
 8000fc6:	1ad3      	subs	r3, r2, r3
 8000fc8:	2b05      	cmp	r3, #5
 8000fca:	d908      	bls.n	8000fde <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	2220      	movs	r2, #32
 8000fd0:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	2203      	movs	r2, #3
 8000fd6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8000fda:	2303      	movs	r3, #3
 8000fdc:	e078      	b.n	80010d0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	681b      	ldr	r3, [r3, #0]
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	f003 0301 	and.w	r3, r3, #1
 8000fe8:	2b00      	cmp	r3, #0
 8000fea:	d1e8      	bne.n	8000fbe <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8000ff4:	697a      	ldr	r2, [r7, #20]
 8000ff6:	4b38      	ldr	r3, [pc, #224]	; (80010d8 <HAL_DMA_Init+0x158>)
 8000ff8:	4013      	ands	r3, r2
 8000ffa:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	685a      	ldr	r2, [r3, #4]
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	689b      	ldr	r3, [r3, #8]
 8001004:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800100a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	691b      	ldr	r3, [r3, #16]
 8001010:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001016:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	699b      	ldr	r3, [r3, #24]
 800101c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001022:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	6a1b      	ldr	r3, [r3, #32]
 8001028:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800102a:	697a      	ldr	r2, [r7, #20]
 800102c:	4313      	orrs	r3, r2
 800102e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001034:	2b04      	cmp	r3, #4
 8001036:	d107      	bne.n	8001048 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001040:	4313      	orrs	r3, r2
 8001042:	697a      	ldr	r2, [r7, #20]
 8001044:	4313      	orrs	r3, r2
 8001046:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	697a      	ldr	r2, [r7, #20]
 800104e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	695b      	ldr	r3, [r3, #20]
 8001056:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001058:	697b      	ldr	r3, [r7, #20]
 800105a:	f023 0307 	bic.w	r3, r3, #7
 800105e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001064:	697a      	ldr	r2, [r7, #20]
 8001066:	4313      	orrs	r3, r2
 8001068:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800106e:	2b04      	cmp	r3, #4
 8001070:	d117      	bne.n	80010a2 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001076:	697a      	ldr	r2, [r7, #20]
 8001078:	4313      	orrs	r3, r2
 800107a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001080:	2b00      	cmp	r3, #0
 8001082:	d00e      	beq.n	80010a2 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001084:	6878      	ldr	r0, [r7, #4]
 8001086:	f000 fa7b 	bl	8001580 <DMA_CheckFifoParam>
 800108a:	4603      	mov	r3, r0
 800108c:	2b00      	cmp	r3, #0
 800108e:	d008      	beq.n	80010a2 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	2240      	movs	r2, #64	; 0x40
 8001094:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	2201      	movs	r2, #1
 800109a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800109e:	2301      	movs	r3, #1
 80010a0:	e016      	b.n	80010d0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	697a      	ldr	r2, [r7, #20]
 80010a8:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80010aa:	6878      	ldr	r0, [r7, #4]
 80010ac:	f000 fa32 	bl	8001514 <DMA_CalcBaseAndBitshift>
 80010b0:	4603      	mov	r3, r0
 80010b2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80010b8:	223f      	movs	r2, #63	; 0x3f
 80010ba:	409a      	lsls	r2, r3
 80010bc:	68fb      	ldr	r3, [r7, #12]
 80010be:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	2200      	movs	r2, #0
 80010c4:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	2201      	movs	r2, #1
 80010ca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80010ce:	2300      	movs	r3, #0
}
 80010d0:	4618      	mov	r0, r3
 80010d2:	3718      	adds	r7, #24
 80010d4:	46bd      	mov	sp, r7
 80010d6:	bd80      	pop	{r7, pc}
 80010d8:	f010803f 	.word	0xf010803f

080010dc <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80010dc:	b580      	push	{r7, lr}
 80010de:	b084      	sub	sp, #16
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80010e8:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80010ea:	f7ff fe2b 	bl	8000d44 <HAL_GetTick>
 80010ee:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80010f6:	b2db      	uxtb	r3, r3
 80010f8:	2b02      	cmp	r3, #2
 80010fa:	d008      	beq.n	800110e <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	2280      	movs	r2, #128	; 0x80
 8001100:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	2200      	movs	r2, #0
 8001106:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800110a:	2301      	movs	r3, #1
 800110c:	e052      	b.n	80011b4 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	681a      	ldr	r2, [r3, #0]
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	f022 0216 	bic.w	r2, r2, #22
 800111c:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	695a      	ldr	r2, [r3, #20]
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800112c:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001132:	2b00      	cmp	r3, #0
 8001134:	d103      	bne.n	800113e <HAL_DMA_Abort+0x62>
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800113a:	2b00      	cmp	r3, #0
 800113c:	d007      	beq.n	800114e <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	681a      	ldr	r2, [r3, #0]
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	f022 0208 	bic.w	r2, r2, #8
 800114c:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	681a      	ldr	r2, [r3, #0]
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	f022 0201 	bic.w	r2, r2, #1
 800115c:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800115e:	e013      	b.n	8001188 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001160:	f7ff fdf0 	bl	8000d44 <HAL_GetTick>
 8001164:	4602      	mov	r2, r0
 8001166:	68bb      	ldr	r3, [r7, #8]
 8001168:	1ad3      	subs	r3, r2, r3
 800116a:	2b05      	cmp	r3, #5
 800116c:	d90c      	bls.n	8001188 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	2220      	movs	r2, #32
 8001172:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	2203      	movs	r2, #3
 8001178:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	2200      	movs	r2, #0
 8001180:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8001184:	2303      	movs	r3, #3
 8001186:	e015      	b.n	80011b4 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	f003 0301 	and.w	r3, r3, #1
 8001192:	2b00      	cmp	r3, #0
 8001194:	d1e4      	bne.n	8001160 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800119a:	223f      	movs	r2, #63	; 0x3f
 800119c:	409a      	lsls	r2, r3
 800119e:	68fb      	ldr	r3, [r7, #12]
 80011a0:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	2201      	movs	r2, #1
 80011a6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	2200      	movs	r2, #0
 80011ae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80011b2:	2300      	movs	r3, #0
}
 80011b4:	4618      	mov	r0, r3
 80011b6:	3710      	adds	r7, #16
 80011b8:	46bd      	mov	sp, r7
 80011ba:	bd80      	pop	{r7, pc}

080011bc <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80011bc:	b480      	push	{r7}
 80011be:	b083      	sub	sp, #12
 80011c0:	af00      	add	r7, sp, #0
 80011c2:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80011ca:	b2db      	uxtb	r3, r3
 80011cc:	2b02      	cmp	r3, #2
 80011ce:	d004      	beq.n	80011da <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	2280      	movs	r2, #128	; 0x80
 80011d4:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80011d6:	2301      	movs	r3, #1
 80011d8:	e00c      	b.n	80011f4 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	2205      	movs	r2, #5
 80011de:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	681a      	ldr	r2, [r3, #0]
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	f022 0201 	bic.w	r2, r2, #1
 80011f0:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80011f2:	2300      	movs	r3, #0
}
 80011f4:	4618      	mov	r0, r3
 80011f6:	370c      	adds	r7, #12
 80011f8:	46bd      	mov	sp, r7
 80011fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011fe:	4770      	bx	lr

08001200 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001200:	b580      	push	{r7, lr}
 8001202:	b086      	sub	sp, #24
 8001204:	af00      	add	r7, sp, #0
 8001206:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001208:	2300      	movs	r3, #0
 800120a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800120c:	4b8e      	ldr	r3, [pc, #568]	; (8001448 <HAL_DMA_IRQHandler+0x248>)
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	4a8e      	ldr	r2, [pc, #568]	; (800144c <HAL_DMA_IRQHandler+0x24c>)
 8001212:	fba2 2303 	umull	r2, r3, r2, r3
 8001216:	0a9b      	lsrs	r3, r3, #10
 8001218:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800121e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001220:	693b      	ldr	r3, [r7, #16]
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800122a:	2208      	movs	r2, #8
 800122c:	409a      	lsls	r2, r3
 800122e:	68fb      	ldr	r3, [r7, #12]
 8001230:	4013      	ands	r3, r2
 8001232:	2b00      	cmp	r3, #0
 8001234:	d01a      	beq.n	800126c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	f003 0304 	and.w	r3, r3, #4
 8001240:	2b00      	cmp	r3, #0
 8001242:	d013      	beq.n	800126c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	681a      	ldr	r2, [r3, #0]
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	f022 0204 	bic.w	r2, r2, #4
 8001252:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001258:	2208      	movs	r2, #8
 800125a:	409a      	lsls	r2, r3
 800125c:	693b      	ldr	r3, [r7, #16]
 800125e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001264:	f043 0201 	orr.w	r2, r3, #1
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001270:	2201      	movs	r2, #1
 8001272:	409a      	lsls	r2, r3
 8001274:	68fb      	ldr	r3, [r7, #12]
 8001276:	4013      	ands	r3, r2
 8001278:	2b00      	cmp	r3, #0
 800127a:	d012      	beq.n	80012a2 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	695b      	ldr	r3, [r3, #20]
 8001282:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001286:	2b00      	cmp	r3, #0
 8001288:	d00b      	beq.n	80012a2 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800128e:	2201      	movs	r2, #1
 8001290:	409a      	lsls	r2, r3
 8001292:	693b      	ldr	r3, [r7, #16]
 8001294:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800129a:	f043 0202 	orr.w	r2, r3, #2
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80012a6:	2204      	movs	r2, #4
 80012a8:	409a      	lsls	r2, r3
 80012aa:	68fb      	ldr	r3, [r7, #12]
 80012ac:	4013      	ands	r3, r2
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d012      	beq.n	80012d8 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	f003 0302 	and.w	r3, r3, #2
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d00b      	beq.n	80012d8 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80012c4:	2204      	movs	r2, #4
 80012c6:	409a      	lsls	r2, r3
 80012c8:	693b      	ldr	r3, [r7, #16]
 80012ca:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80012d0:	f043 0204 	orr.w	r2, r3, #4
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80012dc:	2210      	movs	r2, #16
 80012de:	409a      	lsls	r2, r3
 80012e0:	68fb      	ldr	r3, [r7, #12]
 80012e2:	4013      	ands	r3, r2
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d043      	beq.n	8001370 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	f003 0308 	and.w	r3, r3, #8
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d03c      	beq.n	8001370 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80012fa:	2210      	movs	r2, #16
 80012fc:	409a      	lsls	r2, r3
 80012fe:	693b      	ldr	r3, [r7, #16]
 8001300:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800130c:	2b00      	cmp	r3, #0
 800130e:	d018      	beq.n	8001342 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800131a:	2b00      	cmp	r3, #0
 800131c:	d108      	bne.n	8001330 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001322:	2b00      	cmp	r3, #0
 8001324:	d024      	beq.n	8001370 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800132a:	6878      	ldr	r0, [r7, #4]
 800132c:	4798      	blx	r3
 800132e:	e01f      	b.n	8001370 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001334:	2b00      	cmp	r3, #0
 8001336:	d01b      	beq.n	8001370 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800133c:	6878      	ldr	r0, [r7, #4]
 800133e:	4798      	blx	r3
 8001340:	e016      	b.n	8001370 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800134c:	2b00      	cmp	r3, #0
 800134e:	d107      	bne.n	8001360 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	681a      	ldr	r2, [r3, #0]
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	f022 0208 	bic.w	r2, r2, #8
 800135e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001364:	2b00      	cmp	r3, #0
 8001366:	d003      	beq.n	8001370 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800136c:	6878      	ldr	r0, [r7, #4]
 800136e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001374:	2220      	movs	r2, #32
 8001376:	409a      	lsls	r2, r3
 8001378:	68fb      	ldr	r3, [r7, #12]
 800137a:	4013      	ands	r3, r2
 800137c:	2b00      	cmp	r3, #0
 800137e:	f000 808f 	beq.w	80014a0 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	f003 0310 	and.w	r3, r3, #16
 800138c:	2b00      	cmp	r3, #0
 800138e:	f000 8087 	beq.w	80014a0 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001396:	2220      	movs	r2, #32
 8001398:	409a      	lsls	r2, r3
 800139a:	693b      	ldr	r3, [r7, #16]
 800139c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80013a4:	b2db      	uxtb	r3, r3
 80013a6:	2b05      	cmp	r3, #5
 80013a8:	d136      	bne.n	8001418 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	681a      	ldr	r2, [r3, #0]
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	f022 0216 	bic.w	r2, r2, #22
 80013b8:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	695a      	ldr	r2, [r3, #20]
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80013c8:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d103      	bne.n	80013da <HAL_DMA_IRQHandler+0x1da>
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d007      	beq.n	80013ea <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	681a      	ldr	r2, [r3, #0]
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	f022 0208 	bic.w	r2, r2, #8
 80013e8:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80013ee:	223f      	movs	r2, #63	; 0x3f
 80013f0:	409a      	lsls	r2, r3
 80013f2:	693b      	ldr	r3, [r7, #16]
 80013f4:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	2201      	movs	r2, #1
 80013fa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	2200      	movs	r2, #0
 8001402:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800140a:	2b00      	cmp	r3, #0
 800140c:	d07e      	beq.n	800150c <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001412:	6878      	ldr	r0, [r7, #4]
 8001414:	4798      	blx	r3
        }
        return;
 8001416:	e079      	b.n	800150c <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001422:	2b00      	cmp	r3, #0
 8001424:	d01d      	beq.n	8001462 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001430:	2b00      	cmp	r3, #0
 8001432:	d10d      	bne.n	8001450 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001438:	2b00      	cmp	r3, #0
 800143a:	d031      	beq.n	80014a0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001440:	6878      	ldr	r0, [r7, #4]
 8001442:	4798      	blx	r3
 8001444:	e02c      	b.n	80014a0 <HAL_DMA_IRQHandler+0x2a0>
 8001446:	bf00      	nop
 8001448:	20000014 	.word	0x20000014
 800144c:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001454:	2b00      	cmp	r3, #0
 8001456:	d023      	beq.n	80014a0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800145c:	6878      	ldr	r0, [r7, #4]
 800145e:	4798      	blx	r3
 8001460:	e01e      	b.n	80014a0 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800146c:	2b00      	cmp	r3, #0
 800146e:	d10f      	bne.n	8001490 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	681a      	ldr	r2, [r3, #0]
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	f022 0210 	bic.w	r2, r2, #16
 800147e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	2201      	movs	r2, #1
 8001484:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	2200      	movs	r2, #0
 800148c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001494:	2b00      	cmp	r3, #0
 8001496:	d003      	beq.n	80014a0 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800149c:	6878      	ldr	r0, [r7, #4]
 800149e:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d032      	beq.n	800150e <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80014ac:	f003 0301 	and.w	r3, r3, #1
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d022      	beq.n	80014fa <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	2205      	movs	r2, #5
 80014b8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	681a      	ldr	r2, [r3, #0]
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	f022 0201 	bic.w	r2, r2, #1
 80014ca:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80014cc:	68bb      	ldr	r3, [r7, #8]
 80014ce:	3301      	adds	r3, #1
 80014d0:	60bb      	str	r3, [r7, #8]
 80014d2:	697a      	ldr	r2, [r7, #20]
 80014d4:	429a      	cmp	r2, r3
 80014d6:	d307      	bcc.n	80014e8 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	f003 0301 	and.w	r3, r3, #1
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d1f2      	bne.n	80014cc <HAL_DMA_IRQHandler+0x2cc>
 80014e6:	e000      	b.n	80014ea <HAL_DMA_IRQHandler+0x2ea>
          break;
 80014e8:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	2201      	movs	r2, #1
 80014ee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	2200      	movs	r2, #0
 80014f6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d005      	beq.n	800150e <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001506:	6878      	ldr	r0, [r7, #4]
 8001508:	4798      	blx	r3
 800150a:	e000      	b.n	800150e <HAL_DMA_IRQHandler+0x30e>
        return;
 800150c:	bf00      	nop
    }
  }
}
 800150e:	3718      	adds	r7, #24
 8001510:	46bd      	mov	sp, r7
 8001512:	bd80      	pop	{r7, pc}

08001514 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001514:	b480      	push	{r7}
 8001516:	b085      	sub	sp, #20
 8001518:	af00      	add	r7, sp, #0
 800151a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	b2db      	uxtb	r3, r3
 8001522:	3b10      	subs	r3, #16
 8001524:	4a14      	ldr	r2, [pc, #80]	; (8001578 <DMA_CalcBaseAndBitshift+0x64>)
 8001526:	fba2 2303 	umull	r2, r3, r2, r3
 800152a:	091b      	lsrs	r3, r3, #4
 800152c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800152e:	4a13      	ldr	r2, [pc, #76]	; (800157c <DMA_CalcBaseAndBitshift+0x68>)
 8001530:	68fb      	ldr	r3, [r7, #12]
 8001532:	4413      	add	r3, r2
 8001534:	781b      	ldrb	r3, [r3, #0]
 8001536:	461a      	mov	r2, r3
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800153c:	68fb      	ldr	r3, [r7, #12]
 800153e:	2b03      	cmp	r3, #3
 8001540:	d909      	bls.n	8001556 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800154a:	f023 0303 	bic.w	r3, r3, #3
 800154e:	1d1a      	adds	r2, r3, #4
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	659a      	str	r2, [r3, #88]	; 0x58
 8001554:	e007      	b.n	8001566 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800155e:	f023 0303 	bic.w	r3, r3, #3
 8001562:	687a      	ldr	r2, [r7, #4]
 8001564:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800156a:	4618      	mov	r0, r3
 800156c:	3714      	adds	r7, #20
 800156e:	46bd      	mov	sp, r7
 8001570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001574:	4770      	bx	lr
 8001576:	bf00      	nop
 8001578:	aaaaaaab 	.word	0xaaaaaaab
 800157c:	08003b84 	.word	0x08003b84

08001580 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001580:	b480      	push	{r7}
 8001582:	b085      	sub	sp, #20
 8001584:	af00      	add	r7, sp, #0
 8001586:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001588:	2300      	movs	r3, #0
 800158a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001590:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	699b      	ldr	r3, [r3, #24]
 8001596:	2b00      	cmp	r3, #0
 8001598:	d11f      	bne.n	80015da <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800159a:	68bb      	ldr	r3, [r7, #8]
 800159c:	2b03      	cmp	r3, #3
 800159e:	d856      	bhi.n	800164e <DMA_CheckFifoParam+0xce>
 80015a0:	a201      	add	r2, pc, #4	; (adr r2, 80015a8 <DMA_CheckFifoParam+0x28>)
 80015a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80015a6:	bf00      	nop
 80015a8:	080015b9 	.word	0x080015b9
 80015ac:	080015cb 	.word	0x080015cb
 80015b0:	080015b9 	.word	0x080015b9
 80015b4:	0800164f 	.word	0x0800164f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015bc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d046      	beq.n	8001652 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80015c4:	2301      	movs	r3, #1
 80015c6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80015c8:	e043      	b.n	8001652 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015ce:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80015d2:	d140      	bne.n	8001656 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80015d4:	2301      	movs	r3, #1
 80015d6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80015d8:	e03d      	b.n	8001656 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	699b      	ldr	r3, [r3, #24]
 80015de:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80015e2:	d121      	bne.n	8001628 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80015e4:	68bb      	ldr	r3, [r7, #8]
 80015e6:	2b03      	cmp	r3, #3
 80015e8:	d837      	bhi.n	800165a <DMA_CheckFifoParam+0xda>
 80015ea:	a201      	add	r2, pc, #4	; (adr r2, 80015f0 <DMA_CheckFifoParam+0x70>)
 80015ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80015f0:	08001601 	.word	0x08001601
 80015f4:	08001607 	.word	0x08001607
 80015f8:	08001601 	.word	0x08001601
 80015fc:	08001619 	.word	0x08001619
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001600:	2301      	movs	r3, #1
 8001602:	73fb      	strb	r3, [r7, #15]
      break;
 8001604:	e030      	b.n	8001668 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800160a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800160e:	2b00      	cmp	r3, #0
 8001610:	d025      	beq.n	800165e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8001612:	2301      	movs	r3, #1
 8001614:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001616:	e022      	b.n	800165e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800161c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001620:	d11f      	bne.n	8001662 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8001622:	2301      	movs	r3, #1
 8001624:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8001626:	e01c      	b.n	8001662 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001628:	68bb      	ldr	r3, [r7, #8]
 800162a:	2b02      	cmp	r3, #2
 800162c:	d903      	bls.n	8001636 <DMA_CheckFifoParam+0xb6>
 800162e:	68bb      	ldr	r3, [r7, #8]
 8001630:	2b03      	cmp	r3, #3
 8001632:	d003      	beq.n	800163c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001634:	e018      	b.n	8001668 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8001636:	2301      	movs	r3, #1
 8001638:	73fb      	strb	r3, [r7, #15]
      break;
 800163a:	e015      	b.n	8001668 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001640:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001644:	2b00      	cmp	r3, #0
 8001646:	d00e      	beq.n	8001666 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8001648:	2301      	movs	r3, #1
 800164a:	73fb      	strb	r3, [r7, #15]
      break;
 800164c:	e00b      	b.n	8001666 <DMA_CheckFifoParam+0xe6>
      break;
 800164e:	bf00      	nop
 8001650:	e00a      	b.n	8001668 <DMA_CheckFifoParam+0xe8>
      break;
 8001652:	bf00      	nop
 8001654:	e008      	b.n	8001668 <DMA_CheckFifoParam+0xe8>
      break;
 8001656:	bf00      	nop
 8001658:	e006      	b.n	8001668 <DMA_CheckFifoParam+0xe8>
      break;
 800165a:	bf00      	nop
 800165c:	e004      	b.n	8001668 <DMA_CheckFifoParam+0xe8>
      break;
 800165e:	bf00      	nop
 8001660:	e002      	b.n	8001668 <DMA_CheckFifoParam+0xe8>
      break;   
 8001662:	bf00      	nop
 8001664:	e000      	b.n	8001668 <DMA_CheckFifoParam+0xe8>
      break;
 8001666:	bf00      	nop
    }
  } 
  
  return status; 
 8001668:	7bfb      	ldrb	r3, [r7, #15]
}
 800166a:	4618      	mov	r0, r3
 800166c:	3714      	adds	r7, #20
 800166e:	46bd      	mov	sp, r7
 8001670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001674:	4770      	bx	lr
 8001676:	bf00      	nop

08001678 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001678:	b480      	push	{r7}
 800167a:	b089      	sub	sp, #36	; 0x24
 800167c:	af00      	add	r7, sp, #0
 800167e:	6078      	str	r0, [r7, #4]
 8001680:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001682:	2300      	movs	r3, #0
 8001684:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001686:	2300      	movs	r3, #0
 8001688:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800168a:	2300      	movs	r3, #0
 800168c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800168e:	2300      	movs	r3, #0
 8001690:	61fb      	str	r3, [r7, #28]
 8001692:	e16b      	b.n	800196c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001694:	2201      	movs	r2, #1
 8001696:	69fb      	ldr	r3, [r7, #28]
 8001698:	fa02 f303 	lsl.w	r3, r2, r3
 800169c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800169e:	683b      	ldr	r3, [r7, #0]
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	697a      	ldr	r2, [r7, #20]
 80016a4:	4013      	ands	r3, r2
 80016a6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80016a8:	693a      	ldr	r2, [r7, #16]
 80016aa:	697b      	ldr	r3, [r7, #20]
 80016ac:	429a      	cmp	r2, r3
 80016ae:	f040 815a 	bne.w	8001966 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80016b2:	683b      	ldr	r3, [r7, #0]
 80016b4:	685b      	ldr	r3, [r3, #4]
 80016b6:	f003 0303 	and.w	r3, r3, #3
 80016ba:	2b01      	cmp	r3, #1
 80016bc:	d005      	beq.n	80016ca <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80016be:	683b      	ldr	r3, [r7, #0]
 80016c0:	685b      	ldr	r3, [r3, #4]
 80016c2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80016c6:	2b02      	cmp	r3, #2
 80016c8:	d130      	bne.n	800172c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	689b      	ldr	r3, [r3, #8]
 80016ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80016d0:	69fb      	ldr	r3, [r7, #28]
 80016d2:	005b      	lsls	r3, r3, #1
 80016d4:	2203      	movs	r2, #3
 80016d6:	fa02 f303 	lsl.w	r3, r2, r3
 80016da:	43db      	mvns	r3, r3
 80016dc:	69ba      	ldr	r2, [r7, #24]
 80016de:	4013      	ands	r3, r2
 80016e0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80016e2:	683b      	ldr	r3, [r7, #0]
 80016e4:	68da      	ldr	r2, [r3, #12]
 80016e6:	69fb      	ldr	r3, [r7, #28]
 80016e8:	005b      	lsls	r3, r3, #1
 80016ea:	fa02 f303 	lsl.w	r3, r2, r3
 80016ee:	69ba      	ldr	r2, [r7, #24]
 80016f0:	4313      	orrs	r3, r2
 80016f2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	69ba      	ldr	r2, [r7, #24]
 80016f8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	685b      	ldr	r3, [r3, #4]
 80016fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001700:	2201      	movs	r2, #1
 8001702:	69fb      	ldr	r3, [r7, #28]
 8001704:	fa02 f303 	lsl.w	r3, r2, r3
 8001708:	43db      	mvns	r3, r3
 800170a:	69ba      	ldr	r2, [r7, #24]
 800170c:	4013      	ands	r3, r2
 800170e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001710:	683b      	ldr	r3, [r7, #0]
 8001712:	685b      	ldr	r3, [r3, #4]
 8001714:	091b      	lsrs	r3, r3, #4
 8001716:	f003 0201 	and.w	r2, r3, #1
 800171a:	69fb      	ldr	r3, [r7, #28]
 800171c:	fa02 f303 	lsl.w	r3, r2, r3
 8001720:	69ba      	ldr	r2, [r7, #24]
 8001722:	4313      	orrs	r3, r2
 8001724:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	69ba      	ldr	r2, [r7, #24]
 800172a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800172c:	683b      	ldr	r3, [r7, #0]
 800172e:	685b      	ldr	r3, [r3, #4]
 8001730:	f003 0303 	and.w	r3, r3, #3
 8001734:	2b03      	cmp	r3, #3
 8001736:	d017      	beq.n	8001768 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	68db      	ldr	r3, [r3, #12]
 800173c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800173e:	69fb      	ldr	r3, [r7, #28]
 8001740:	005b      	lsls	r3, r3, #1
 8001742:	2203      	movs	r2, #3
 8001744:	fa02 f303 	lsl.w	r3, r2, r3
 8001748:	43db      	mvns	r3, r3
 800174a:	69ba      	ldr	r2, [r7, #24]
 800174c:	4013      	ands	r3, r2
 800174e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001750:	683b      	ldr	r3, [r7, #0]
 8001752:	689a      	ldr	r2, [r3, #8]
 8001754:	69fb      	ldr	r3, [r7, #28]
 8001756:	005b      	lsls	r3, r3, #1
 8001758:	fa02 f303 	lsl.w	r3, r2, r3
 800175c:	69ba      	ldr	r2, [r7, #24]
 800175e:	4313      	orrs	r3, r2
 8001760:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	69ba      	ldr	r2, [r7, #24]
 8001766:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001768:	683b      	ldr	r3, [r7, #0]
 800176a:	685b      	ldr	r3, [r3, #4]
 800176c:	f003 0303 	and.w	r3, r3, #3
 8001770:	2b02      	cmp	r3, #2
 8001772:	d123      	bne.n	80017bc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001774:	69fb      	ldr	r3, [r7, #28]
 8001776:	08da      	lsrs	r2, r3, #3
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	3208      	adds	r2, #8
 800177c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001780:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001782:	69fb      	ldr	r3, [r7, #28]
 8001784:	f003 0307 	and.w	r3, r3, #7
 8001788:	009b      	lsls	r3, r3, #2
 800178a:	220f      	movs	r2, #15
 800178c:	fa02 f303 	lsl.w	r3, r2, r3
 8001790:	43db      	mvns	r3, r3
 8001792:	69ba      	ldr	r2, [r7, #24]
 8001794:	4013      	ands	r3, r2
 8001796:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001798:	683b      	ldr	r3, [r7, #0]
 800179a:	691a      	ldr	r2, [r3, #16]
 800179c:	69fb      	ldr	r3, [r7, #28]
 800179e:	f003 0307 	and.w	r3, r3, #7
 80017a2:	009b      	lsls	r3, r3, #2
 80017a4:	fa02 f303 	lsl.w	r3, r2, r3
 80017a8:	69ba      	ldr	r2, [r7, #24]
 80017aa:	4313      	orrs	r3, r2
 80017ac:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80017ae:	69fb      	ldr	r3, [r7, #28]
 80017b0:	08da      	lsrs	r2, r3, #3
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	3208      	adds	r2, #8
 80017b6:	69b9      	ldr	r1, [r7, #24]
 80017b8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80017c2:	69fb      	ldr	r3, [r7, #28]
 80017c4:	005b      	lsls	r3, r3, #1
 80017c6:	2203      	movs	r2, #3
 80017c8:	fa02 f303 	lsl.w	r3, r2, r3
 80017cc:	43db      	mvns	r3, r3
 80017ce:	69ba      	ldr	r2, [r7, #24]
 80017d0:	4013      	ands	r3, r2
 80017d2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80017d4:	683b      	ldr	r3, [r7, #0]
 80017d6:	685b      	ldr	r3, [r3, #4]
 80017d8:	f003 0203 	and.w	r2, r3, #3
 80017dc:	69fb      	ldr	r3, [r7, #28]
 80017de:	005b      	lsls	r3, r3, #1
 80017e0:	fa02 f303 	lsl.w	r3, r2, r3
 80017e4:	69ba      	ldr	r2, [r7, #24]
 80017e6:	4313      	orrs	r3, r2
 80017e8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	69ba      	ldr	r2, [r7, #24]
 80017ee:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80017f0:	683b      	ldr	r3, [r7, #0]
 80017f2:	685b      	ldr	r3, [r3, #4]
 80017f4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	f000 80b4 	beq.w	8001966 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80017fe:	2300      	movs	r3, #0
 8001800:	60fb      	str	r3, [r7, #12]
 8001802:	4b60      	ldr	r3, [pc, #384]	; (8001984 <HAL_GPIO_Init+0x30c>)
 8001804:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001806:	4a5f      	ldr	r2, [pc, #380]	; (8001984 <HAL_GPIO_Init+0x30c>)
 8001808:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800180c:	6453      	str	r3, [r2, #68]	; 0x44
 800180e:	4b5d      	ldr	r3, [pc, #372]	; (8001984 <HAL_GPIO_Init+0x30c>)
 8001810:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001812:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001816:	60fb      	str	r3, [r7, #12]
 8001818:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800181a:	4a5b      	ldr	r2, [pc, #364]	; (8001988 <HAL_GPIO_Init+0x310>)
 800181c:	69fb      	ldr	r3, [r7, #28]
 800181e:	089b      	lsrs	r3, r3, #2
 8001820:	3302      	adds	r3, #2
 8001822:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001826:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001828:	69fb      	ldr	r3, [r7, #28]
 800182a:	f003 0303 	and.w	r3, r3, #3
 800182e:	009b      	lsls	r3, r3, #2
 8001830:	220f      	movs	r2, #15
 8001832:	fa02 f303 	lsl.w	r3, r2, r3
 8001836:	43db      	mvns	r3, r3
 8001838:	69ba      	ldr	r2, [r7, #24]
 800183a:	4013      	ands	r3, r2
 800183c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	4a52      	ldr	r2, [pc, #328]	; (800198c <HAL_GPIO_Init+0x314>)
 8001842:	4293      	cmp	r3, r2
 8001844:	d02b      	beq.n	800189e <HAL_GPIO_Init+0x226>
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	4a51      	ldr	r2, [pc, #324]	; (8001990 <HAL_GPIO_Init+0x318>)
 800184a:	4293      	cmp	r3, r2
 800184c:	d025      	beq.n	800189a <HAL_GPIO_Init+0x222>
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	4a50      	ldr	r2, [pc, #320]	; (8001994 <HAL_GPIO_Init+0x31c>)
 8001852:	4293      	cmp	r3, r2
 8001854:	d01f      	beq.n	8001896 <HAL_GPIO_Init+0x21e>
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	4a4f      	ldr	r2, [pc, #316]	; (8001998 <HAL_GPIO_Init+0x320>)
 800185a:	4293      	cmp	r3, r2
 800185c:	d019      	beq.n	8001892 <HAL_GPIO_Init+0x21a>
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	4a4e      	ldr	r2, [pc, #312]	; (800199c <HAL_GPIO_Init+0x324>)
 8001862:	4293      	cmp	r3, r2
 8001864:	d013      	beq.n	800188e <HAL_GPIO_Init+0x216>
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	4a4d      	ldr	r2, [pc, #308]	; (80019a0 <HAL_GPIO_Init+0x328>)
 800186a:	4293      	cmp	r3, r2
 800186c:	d00d      	beq.n	800188a <HAL_GPIO_Init+0x212>
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	4a4c      	ldr	r2, [pc, #304]	; (80019a4 <HAL_GPIO_Init+0x32c>)
 8001872:	4293      	cmp	r3, r2
 8001874:	d007      	beq.n	8001886 <HAL_GPIO_Init+0x20e>
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	4a4b      	ldr	r2, [pc, #300]	; (80019a8 <HAL_GPIO_Init+0x330>)
 800187a:	4293      	cmp	r3, r2
 800187c:	d101      	bne.n	8001882 <HAL_GPIO_Init+0x20a>
 800187e:	2307      	movs	r3, #7
 8001880:	e00e      	b.n	80018a0 <HAL_GPIO_Init+0x228>
 8001882:	2308      	movs	r3, #8
 8001884:	e00c      	b.n	80018a0 <HAL_GPIO_Init+0x228>
 8001886:	2306      	movs	r3, #6
 8001888:	e00a      	b.n	80018a0 <HAL_GPIO_Init+0x228>
 800188a:	2305      	movs	r3, #5
 800188c:	e008      	b.n	80018a0 <HAL_GPIO_Init+0x228>
 800188e:	2304      	movs	r3, #4
 8001890:	e006      	b.n	80018a0 <HAL_GPIO_Init+0x228>
 8001892:	2303      	movs	r3, #3
 8001894:	e004      	b.n	80018a0 <HAL_GPIO_Init+0x228>
 8001896:	2302      	movs	r3, #2
 8001898:	e002      	b.n	80018a0 <HAL_GPIO_Init+0x228>
 800189a:	2301      	movs	r3, #1
 800189c:	e000      	b.n	80018a0 <HAL_GPIO_Init+0x228>
 800189e:	2300      	movs	r3, #0
 80018a0:	69fa      	ldr	r2, [r7, #28]
 80018a2:	f002 0203 	and.w	r2, r2, #3
 80018a6:	0092      	lsls	r2, r2, #2
 80018a8:	4093      	lsls	r3, r2
 80018aa:	69ba      	ldr	r2, [r7, #24]
 80018ac:	4313      	orrs	r3, r2
 80018ae:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80018b0:	4935      	ldr	r1, [pc, #212]	; (8001988 <HAL_GPIO_Init+0x310>)
 80018b2:	69fb      	ldr	r3, [r7, #28]
 80018b4:	089b      	lsrs	r3, r3, #2
 80018b6:	3302      	adds	r3, #2
 80018b8:	69ba      	ldr	r2, [r7, #24]
 80018ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80018be:	4b3b      	ldr	r3, [pc, #236]	; (80019ac <HAL_GPIO_Init+0x334>)
 80018c0:	689b      	ldr	r3, [r3, #8]
 80018c2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80018c4:	693b      	ldr	r3, [r7, #16]
 80018c6:	43db      	mvns	r3, r3
 80018c8:	69ba      	ldr	r2, [r7, #24]
 80018ca:	4013      	ands	r3, r2
 80018cc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80018ce:	683b      	ldr	r3, [r7, #0]
 80018d0:	685b      	ldr	r3, [r3, #4]
 80018d2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d003      	beq.n	80018e2 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80018da:	69ba      	ldr	r2, [r7, #24]
 80018dc:	693b      	ldr	r3, [r7, #16]
 80018de:	4313      	orrs	r3, r2
 80018e0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80018e2:	4a32      	ldr	r2, [pc, #200]	; (80019ac <HAL_GPIO_Init+0x334>)
 80018e4:	69bb      	ldr	r3, [r7, #24]
 80018e6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80018e8:	4b30      	ldr	r3, [pc, #192]	; (80019ac <HAL_GPIO_Init+0x334>)
 80018ea:	68db      	ldr	r3, [r3, #12]
 80018ec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80018ee:	693b      	ldr	r3, [r7, #16]
 80018f0:	43db      	mvns	r3, r3
 80018f2:	69ba      	ldr	r2, [r7, #24]
 80018f4:	4013      	ands	r3, r2
 80018f6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80018f8:	683b      	ldr	r3, [r7, #0]
 80018fa:	685b      	ldr	r3, [r3, #4]
 80018fc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001900:	2b00      	cmp	r3, #0
 8001902:	d003      	beq.n	800190c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001904:	69ba      	ldr	r2, [r7, #24]
 8001906:	693b      	ldr	r3, [r7, #16]
 8001908:	4313      	orrs	r3, r2
 800190a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800190c:	4a27      	ldr	r2, [pc, #156]	; (80019ac <HAL_GPIO_Init+0x334>)
 800190e:	69bb      	ldr	r3, [r7, #24]
 8001910:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001912:	4b26      	ldr	r3, [pc, #152]	; (80019ac <HAL_GPIO_Init+0x334>)
 8001914:	685b      	ldr	r3, [r3, #4]
 8001916:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001918:	693b      	ldr	r3, [r7, #16]
 800191a:	43db      	mvns	r3, r3
 800191c:	69ba      	ldr	r2, [r7, #24]
 800191e:	4013      	ands	r3, r2
 8001920:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001922:	683b      	ldr	r3, [r7, #0]
 8001924:	685b      	ldr	r3, [r3, #4]
 8001926:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800192a:	2b00      	cmp	r3, #0
 800192c:	d003      	beq.n	8001936 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800192e:	69ba      	ldr	r2, [r7, #24]
 8001930:	693b      	ldr	r3, [r7, #16]
 8001932:	4313      	orrs	r3, r2
 8001934:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001936:	4a1d      	ldr	r2, [pc, #116]	; (80019ac <HAL_GPIO_Init+0x334>)
 8001938:	69bb      	ldr	r3, [r7, #24]
 800193a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800193c:	4b1b      	ldr	r3, [pc, #108]	; (80019ac <HAL_GPIO_Init+0x334>)
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001942:	693b      	ldr	r3, [r7, #16]
 8001944:	43db      	mvns	r3, r3
 8001946:	69ba      	ldr	r2, [r7, #24]
 8001948:	4013      	ands	r3, r2
 800194a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800194c:	683b      	ldr	r3, [r7, #0]
 800194e:	685b      	ldr	r3, [r3, #4]
 8001950:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001954:	2b00      	cmp	r3, #0
 8001956:	d003      	beq.n	8001960 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001958:	69ba      	ldr	r2, [r7, #24]
 800195a:	693b      	ldr	r3, [r7, #16]
 800195c:	4313      	orrs	r3, r2
 800195e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001960:	4a12      	ldr	r2, [pc, #72]	; (80019ac <HAL_GPIO_Init+0x334>)
 8001962:	69bb      	ldr	r3, [r7, #24]
 8001964:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001966:	69fb      	ldr	r3, [r7, #28]
 8001968:	3301      	adds	r3, #1
 800196a:	61fb      	str	r3, [r7, #28]
 800196c:	69fb      	ldr	r3, [r7, #28]
 800196e:	2b0f      	cmp	r3, #15
 8001970:	f67f ae90 	bls.w	8001694 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001974:	bf00      	nop
 8001976:	bf00      	nop
 8001978:	3724      	adds	r7, #36	; 0x24
 800197a:	46bd      	mov	sp, r7
 800197c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001980:	4770      	bx	lr
 8001982:	bf00      	nop
 8001984:	40023800 	.word	0x40023800
 8001988:	40013800 	.word	0x40013800
 800198c:	40020000 	.word	0x40020000
 8001990:	40020400 	.word	0x40020400
 8001994:	40020800 	.word	0x40020800
 8001998:	40020c00 	.word	0x40020c00
 800199c:	40021000 	.word	0x40021000
 80019a0:	40021400 	.word	0x40021400
 80019a4:	40021800 	.word	0x40021800
 80019a8:	40021c00 	.word	0x40021c00
 80019ac:	40013c00 	.word	0x40013c00

080019b0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80019b0:	b580      	push	{r7, lr}
 80019b2:	b086      	sub	sp, #24
 80019b4:	af00      	add	r7, sp, #0
 80019b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d101      	bne.n	80019c2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80019be:	2301      	movs	r3, #1
 80019c0:	e267      	b.n	8001e92 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	f003 0301 	and.w	r3, r3, #1
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d075      	beq.n	8001aba <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80019ce:	4b88      	ldr	r3, [pc, #544]	; (8001bf0 <HAL_RCC_OscConfig+0x240>)
 80019d0:	689b      	ldr	r3, [r3, #8]
 80019d2:	f003 030c 	and.w	r3, r3, #12
 80019d6:	2b04      	cmp	r3, #4
 80019d8:	d00c      	beq.n	80019f4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80019da:	4b85      	ldr	r3, [pc, #532]	; (8001bf0 <HAL_RCC_OscConfig+0x240>)
 80019dc:	689b      	ldr	r3, [r3, #8]
 80019de:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80019e2:	2b08      	cmp	r3, #8
 80019e4:	d112      	bne.n	8001a0c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80019e6:	4b82      	ldr	r3, [pc, #520]	; (8001bf0 <HAL_RCC_OscConfig+0x240>)
 80019e8:	685b      	ldr	r3, [r3, #4]
 80019ea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80019ee:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80019f2:	d10b      	bne.n	8001a0c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80019f4:	4b7e      	ldr	r3, [pc, #504]	; (8001bf0 <HAL_RCC_OscConfig+0x240>)
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d05b      	beq.n	8001ab8 <HAL_RCC_OscConfig+0x108>
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	685b      	ldr	r3, [r3, #4]
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d157      	bne.n	8001ab8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001a08:	2301      	movs	r3, #1
 8001a0a:	e242      	b.n	8001e92 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	685b      	ldr	r3, [r3, #4]
 8001a10:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001a14:	d106      	bne.n	8001a24 <HAL_RCC_OscConfig+0x74>
 8001a16:	4b76      	ldr	r3, [pc, #472]	; (8001bf0 <HAL_RCC_OscConfig+0x240>)
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	4a75      	ldr	r2, [pc, #468]	; (8001bf0 <HAL_RCC_OscConfig+0x240>)
 8001a1c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a20:	6013      	str	r3, [r2, #0]
 8001a22:	e01d      	b.n	8001a60 <HAL_RCC_OscConfig+0xb0>
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	685b      	ldr	r3, [r3, #4]
 8001a28:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001a2c:	d10c      	bne.n	8001a48 <HAL_RCC_OscConfig+0x98>
 8001a2e:	4b70      	ldr	r3, [pc, #448]	; (8001bf0 <HAL_RCC_OscConfig+0x240>)
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	4a6f      	ldr	r2, [pc, #444]	; (8001bf0 <HAL_RCC_OscConfig+0x240>)
 8001a34:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001a38:	6013      	str	r3, [r2, #0]
 8001a3a:	4b6d      	ldr	r3, [pc, #436]	; (8001bf0 <HAL_RCC_OscConfig+0x240>)
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	4a6c      	ldr	r2, [pc, #432]	; (8001bf0 <HAL_RCC_OscConfig+0x240>)
 8001a40:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a44:	6013      	str	r3, [r2, #0]
 8001a46:	e00b      	b.n	8001a60 <HAL_RCC_OscConfig+0xb0>
 8001a48:	4b69      	ldr	r3, [pc, #420]	; (8001bf0 <HAL_RCC_OscConfig+0x240>)
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	4a68      	ldr	r2, [pc, #416]	; (8001bf0 <HAL_RCC_OscConfig+0x240>)
 8001a4e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001a52:	6013      	str	r3, [r2, #0]
 8001a54:	4b66      	ldr	r3, [pc, #408]	; (8001bf0 <HAL_RCC_OscConfig+0x240>)
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	4a65      	ldr	r2, [pc, #404]	; (8001bf0 <HAL_RCC_OscConfig+0x240>)
 8001a5a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001a5e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	685b      	ldr	r3, [r3, #4]
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d013      	beq.n	8001a90 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a68:	f7ff f96c 	bl	8000d44 <HAL_GetTick>
 8001a6c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a6e:	e008      	b.n	8001a82 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001a70:	f7ff f968 	bl	8000d44 <HAL_GetTick>
 8001a74:	4602      	mov	r2, r0
 8001a76:	693b      	ldr	r3, [r7, #16]
 8001a78:	1ad3      	subs	r3, r2, r3
 8001a7a:	2b64      	cmp	r3, #100	; 0x64
 8001a7c:	d901      	bls.n	8001a82 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001a7e:	2303      	movs	r3, #3
 8001a80:	e207      	b.n	8001e92 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a82:	4b5b      	ldr	r3, [pc, #364]	; (8001bf0 <HAL_RCC_OscConfig+0x240>)
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d0f0      	beq.n	8001a70 <HAL_RCC_OscConfig+0xc0>
 8001a8e:	e014      	b.n	8001aba <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a90:	f7ff f958 	bl	8000d44 <HAL_GetTick>
 8001a94:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001a96:	e008      	b.n	8001aaa <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001a98:	f7ff f954 	bl	8000d44 <HAL_GetTick>
 8001a9c:	4602      	mov	r2, r0
 8001a9e:	693b      	ldr	r3, [r7, #16]
 8001aa0:	1ad3      	subs	r3, r2, r3
 8001aa2:	2b64      	cmp	r3, #100	; 0x64
 8001aa4:	d901      	bls.n	8001aaa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001aa6:	2303      	movs	r3, #3
 8001aa8:	e1f3      	b.n	8001e92 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001aaa:	4b51      	ldr	r3, [pc, #324]	; (8001bf0 <HAL_RCC_OscConfig+0x240>)
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d1f0      	bne.n	8001a98 <HAL_RCC_OscConfig+0xe8>
 8001ab6:	e000      	b.n	8001aba <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ab8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	f003 0302 	and.w	r3, r3, #2
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d063      	beq.n	8001b8e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001ac6:	4b4a      	ldr	r3, [pc, #296]	; (8001bf0 <HAL_RCC_OscConfig+0x240>)
 8001ac8:	689b      	ldr	r3, [r3, #8]
 8001aca:	f003 030c 	and.w	r3, r3, #12
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d00b      	beq.n	8001aea <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001ad2:	4b47      	ldr	r3, [pc, #284]	; (8001bf0 <HAL_RCC_OscConfig+0x240>)
 8001ad4:	689b      	ldr	r3, [r3, #8]
 8001ad6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001ada:	2b08      	cmp	r3, #8
 8001adc:	d11c      	bne.n	8001b18 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001ade:	4b44      	ldr	r3, [pc, #272]	; (8001bf0 <HAL_RCC_OscConfig+0x240>)
 8001ae0:	685b      	ldr	r3, [r3, #4]
 8001ae2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d116      	bne.n	8001b18 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001aea:	4b41      	ldr	r3, [pc, #260]	; (8001bf0 <HAL_RCC_OscConfig+0x240>)
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	f003 0302 	and.w	r3, r3, #2
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d005      	beq.n	8001b02 <HAL_RCC_OscConfig+0x152>
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	68db      	ldr	r3, [r3, #12]
 8001afa:	2b01      	cmp	r3, #1
 8001afc:	d001      	beq.n	8001b02 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001afe:	2301      	movs	r3, #1
 8001b00:	e1c7      	b.n	8001e92 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b02:	4b3b      	ldr	r3, [pc, #236]	; (8001bf0 <HAL_RCC_OscConfig+0x240>)
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	691b      	ldr	r3, [r3, #16]
 8001b0e:	00db      	lsls	r3, r3, #3
 8001b10:	4937      	ldr	r1, [pc, #220]	; (8001bf0 <HAL_RCC_OscConfig+0x240>)
 8001b12:	4313      	orrs	r3, r2
 8001b14:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001b16:	e03a      	b.n	8001b8e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	68db      	ldr	r3, [r3, #12]
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d020      	beq.n	8001b62 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001b20:	4b34      	ldr	r3, [pc, #208]	; (8001bf4 <HAL_RCC_OscConfig+0x244>)
 8001b22:	2201      	movs	r2, #1
 8001b24:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b26:	f7ff f90d 	bl	8000d44 <HAL_GetTick>
 8001b2a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b2c:	e008      	b.n	8001b40 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001b2e:	f7ff f909 	bl	8000d44 <HAL_GetTick>
 8001b32:	4602      	mov	r2, r0
 8001b34:	693b      	ldr	r3, [r7, #16]
 8001b36:	1ad3      	subs	r3, r2, r3
 8001b38:	2b02      	cmp	r3, #2
 8001b3a:	d901      	bls.n	8001b40 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001b3c:	2303      	movs	r3, #3
 8001b3e:	e1a8      	b.n	8001e92 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b40:	4b2b      	ldr	r3, [pc, #172]	; (8001bf0 <HAL_RCC_OscConfig+0x240>)
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	f003 0302 	and.w	r3, r3, #2
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d0f0      	beq.n	8001b2e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b4c:	4b28      	ldr	r3, [pc, #160]	; (8001bf0 <HAL_RCC_OscConfig+0x240>)
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	691b      	ldr	r3, [r3, #16]
 8001b58:	00db      	lsls	r3, r3, #3
 8001b5a:	4925      	ldr	r1, [pc, #148]	; (8001bf0 <HAL_RCC_OscConfig+0x240>)
 8001b5c:	4313      	orrs	r3, r2
 8001b5e:	600b      	str	r3, [r1, #0]
 8001b60:	e015      	b.n	8001b8e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001b62:	4b24      	ldr	r3, [pc, #144]	; (8001bf4 <HAL_RCC_OscConfig+0x244>)
 8001b64:	2200      	movs	r2, #0
 8001b66:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b68:	f7ff f8ec 	bl	8000d44 <HAL_GetTick>
 8001b6c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001b6e:	e008      	b.n	8001b82 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001b70:	f7ff f8e8 	bl	8000d44 <HAL_GetTick>
 8001b74:	4602      	mov	r2, r0
 8001b76:	693b      	ldr	r3, [r7, #16]
 8001b78:	1ad3      	subs	r3, r2, r3
 8001b7a:	2b02      	cmp	r3, #2
 8001b7c:	d901      	bls.n	8001b82 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001b7e:	2303      	movs	r3, #3
 8001b80:	e187      	b.n	8001e92 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001b82:	4b1b      	ldr	r3, [pc, #108]	; (8001bf0 <HAL_RCC_OscConfig+0x240>)
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	f003 0302 	and.w	r3, r3, #2
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d1f0      	bne.n	8001b70 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	f003 0308 	and.w	r3, r3, #8
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d036      	beq.n	8001c08 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	695b      	ldr	r3, [r3, #20]
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d016      	beq.n	8001bd0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001ba2:	4b15      	ldr	r3, [pc, #84]	; (8001bf8 <HAL_RCC_OscConfig+0x248>)
 8001ba4:	2201      	movs	r2, #1
 8001ba6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ba8:	f7ff f8cc 	bl	8000d44 <HAL_GetTick>
 8001bac:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001bae:	e008      	b.n	8001bc2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001bb0:	f7ff f8c8 	bl	8000d44 <HAL_GetTick>
 8001bb4:	4602      	mov	r2, r0
 8001bb6:	693b      	ldr	r3, [r7, #16]
 8001bb8:	1ad3      	subs	r3, r2, r3
 8001bba:	2b02      	cmp	r3, #2
 8001bbc:	d901      	bls.n	8001bc2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001bbe:	2303      	movs	r3, #3
 8001bc0:	e167      	b.n	8001e92 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001bc2:	4b0b      	ldr	r3, [pc, #44]	; (8001bf0 <HAL_RCC_OscConfig+0x240>)
 8001bc4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001bc6:	f003 0302 	and.w	r3, r3, #2
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d0f0      	beq.n	8001bb0 <HAL_RCC_OscConfig+0x200>
 8001bce:	e01b      	b.n	8001c08 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001bd0:	4b09      	ldr	r3, [pc, #36]	; (8001bf8 <HAL_RCC_OscConfig+0x248>)
 8001bd2:	2200      	movs	r2, #0
 8001bd4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001bd6:	f7ff f8b5 	bl	8000d44 <HAL_GetTick>
 8001bda:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001bdc:	e00e      	b.n	8001bfc <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001bde:	f7ff f8b1 	bl	8000d44 <HAL_GetTick>
 8001be2:	4602      	mov	r2, r0
 8001be4:	693b      	ldr	r3, [r7, #16]
 8001be6:	1ad3      	subs	r3, r2, r3
 8001be8:	2b02      	cmp	r3, #2
 8001bea:	d907      	bls.n	8001bfc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001bec:	2303      	movs	r3, #3
 8001bee:	e150      	b.n	8001e92 <HAL_RCC_OscConfig+0x4e2>
 8001bf0:	40023800 	.word	0x40023800
 8001bf4:	42470000 	.word	0x42470000
 8001bf8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001bfc:	4b88      	ldr	r3, [pc, #544]	; (8001e20 <HAL_RCC_OscConfig+0x470>)
 8001bfe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001c00:	f003 0302 	and.w	r3, r3, #2
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d1ea      	bne.n	8001bde <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	f003 0304 	and.w	r3, r3, #4
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	f000 8097 	beq.w	8001d44 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001c16:	2300      	movs	r3, #0
 8001c18:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001c1a:	4b81      	ldr	r3, [pc, #516]	; (8001e20 <HAL_RCC_OscConfig+0x470>)
 8001c1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c1e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d10f      	bne.n	8001c46 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001c26:	2300      	movs	r3, #0
 8001c28:	60bb      	str	r3, [r7, #8]
 8001c2a:	4b7d      	ldr	r3, [pc, #500]	; (8001e20 <HAL_RCC_OscConfig+0x470>)
 8001c2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c2e:	4a7c      	ldr	r2, [pc, #496]	; (8001e20 <HAL_RCC_OscConfig+0x470>)
 8001c30:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c34:	6413      	str	r3, [r2, #64]	; 0x40
 8001c36:	4b7a      	ldr	r3, [pc, #488]	; (8001e20 <HAL_RCC_OscConfig+0x470>)
 8001c38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c3a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c3e:	60bb      	str	r3, [r7, #8]
 8001c40:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001c42:	2301      	movs	r3, #1
 8001c44:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c46:	4b77      	ldr	r3, [pc, #476]	; (8001e24 <HAL_RCC_OscConfig+0x474>)
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d118      	bne.n	8001c84 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001c52:	4b74      	ldr	r3, [pc, #464]	; (8001e24 <HAL_RCC_OscConfig+0x474>)
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	4a73      	ldr	r2, [pc, #460]	; (8001e24 <HAL_RCC_OscConfig+0x474>)
 8001c58:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c5c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001c5e:	f7ff f871 	bl	8000d44 <HAL_GetTick>
 8001c62:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c64:	e008      	b.n	8001c78 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001c66:	f7ff f86d 	bl	8000d44 <HAL_GetTick>
 8001c6a:	4602      	mov	r2, r0
 8001c6c:	693b      	ldr	r3, [r7, #16]
 8001c6e:	1ad3      	subs	r3, r2, r3
 8001c70:	2b02      	cmp	r3, #2
 8001c72:	d901      	bls.n	8001c78 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001c74:	2303      	movs	r3, #3
 8001c76:	e10c      	b.n	8001e92 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c78:	4b6a      	ldr	r3, [pc, #424]	; (8001e24 <HAL_RCC_OscConfig+0x474>)
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d0f0      	beq.n	8001c66 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	689b      	ldr	r3, [r3, #8]
 8001c88:	2b01      	cmp	r3, #1
 8001c8a:	d106      	bne.n	8001c9a <HAL_RCC_OscConfig+0x2ea>
 8001c8c:	4b64      	ldr	r3, [pc, #400]	; (8001e20 <HAL_RCC_OscConfig+0x470>)
 8001c8e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c90:	4a63      	ldr	r2, [pc, #396]	; (8001e20 <HAL_RCC_OscConfig+0x470>)
 8001c92:	f043 0301 	orr.w	r3, r3, #1
 8001c96:	6713      	str	r3, [r2, #112]	; 0x70
 8001c98:	e01c      	b.n	8001cd4 <HAL_RCC_OscConfig+0x324>
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	689b      	ldr	r3, [r3, #8]
 8001c9e:	2b05      	cmp	r3, #5
 8001ca0:	d10c      	bne.n	8001cbc <HAL_RCC_OscConfig+0x30c>
 8001ca2:	4b5f      	ldr	r3, [pc, #380]	; (8001e20 <HAL_RCC_OscConfig+0x470>)
 8001ca4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ca6:	4a5e      	ldr	r2, [pc, #376]	; (8001e20 <HAL_RCC_OscConfig+0x470>)
 8001ca8:	f043 0304 	orr.w	r3, r3, #4
 8001cac:	6713      	str	r3, [r2, #112]	; 0x70
 8001cae:	4b5c      	ldr	r3, [pc, #368]	; (8001e20 <HAL_RCC_OscConfig+0x470>)
 8001cb0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001cb2:	4a5b      	ldr	r2, [pc, #364]	; (8001e20 <HAL_RCC_OscConfig+0x470>)
 8001cb4:	f043 0301 	orr.w	r3, r3, #1
 8001cb8:	6713      	str	r3, [r2, #112]	; 0x70
 8001cba:	e00b      	b.n	8001cd4 <HAL_RCC_OscConfig+0x324>
 8001cbc:	4b58      	ldr	r3, [pc, #352]	; (8001e20 <HAL_RCC_OscConfig+0x470>)
 8001cbe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001cc0:	4a57      	ldr	r2, [pc, #348]	; (8001e20 <HAL_RCC_OscConfig+0x470>)
 8001cc2:	f023 0301 	bic.w	r3, r3, #1
 8001cc6:	6713      	str	r3, [r2, #112]	; 0x70
 8001cc8:	4b55      	ldr	r3, [pc, #340]	; (8001e20 <HAL_RCC_OscConfig+0x470>)
 8001cca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ccc:	4a54      	ldr	r2, [pc, #336]	; (8001e20 <HAL_RCC_OscConfig+0x470>)
 8001cce:	f023 0304 	bic.w	r3, r3, #4
 8001cd2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	689b      	ldr	r3, [r3, #8]
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d015      	beq.n	8001d08 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001cdc:	f7ff f832 	bl	8000d44 <HAL_GetTick>
 8001ce0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ce2:	e00a      	b.n	8001cfa <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001ce4:	f7ff f82e 	bl	8000d44 <HAL_GetTick>
 8001ce8:	4602      	mov	r2, r0
 8001cea:	693b      	ldr	r3, [r7, #16]
 8001cec:	1ad3      	subs	r3, r2, r3
 8001cee:	f241 3288 	movw	r2, #5000	; 0x1388
 8001cf2:	4293      	cmp	r3, r2
 8001cf4:	d901      	bls.n	8001cfa <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001cf6:	2303      	movs	r3, #3
 8001cf8:	e0cb      	b.n	8001e92 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001cfa:	4b49      	ldr	r3, [pc, #292]	; (8001e20 <HAL_RCC_OscConfig+0x470>)
 8001cfc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001cfe:	f003 0302 	and.w	r3, r3, #2
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d0ee      	beq.n	8001ce4 <HAL_RCC_OscConfig+0x334>
 8001d06:	e014      	b.n	8001d32 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d08:	f7ff f81c 	bl	8000d44 <HAL_GetTick>
 8001d0c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001d0e:	e00a      	b.n	8001d26 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001d10:	f7ff f818 	bl	8000d44 <HAL_GetTick>
 8001d14:	4602      	mov	r2, r0
 8001d16:	693b      	ldr	r3, [r7, #16]
 8001d18:	1ad3      	subs	r3, r2, r3
 8001d1a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d1e:	4293      	cmp	r3, r2
 8001d20:	d901      	bls.n	8001d26 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001d22:	2303      	movs	r3, #3
 8001d24:	e0b5      	b.n	8001e92 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001d26:	4b3e      	ldr	r3, [pc, #248]	; (8001e20 <HAL_RCC_OscConfig+0x470>)
 8001d28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d2a:	f003 0302 	and.w	r3, r3, #2
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d1ee      	bne.n	8001d10 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001d32:	7dfb      	ldrb	r3, [r7, #23]
 8001d34:	2b01      	cmp	r3, #1
 8001d36:	d105      	bne.n	8001d44 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001d38:	4b39      	ldr	r3, [pc, #228]	; (8001e20 <HAL_RCC_OscConfig+0x470>)
 8001d3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d3c:	4a38      	ldr	r2, [pc, #224]	; (8001e20 <HAL_RCC_OscConfig+0x470>)
 8001d3e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001d42:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	699b      	ldr	r3, [r3, #24]
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	f000 80a1 	beq.w	8001e90 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001d4e:	4b34      	ldr	r3, [pc, #208]	; (8001e20 <HAL_RCC_OscConfig+0x470>)
 8001d50:	689b      	ldr	r3, [r3, #8]
 8001d52:	f003 030c 	and.w	r3, r3, #12
 8001d56:	2b08      	cmp	r3, #8
 8001d58:	d05c      	beq.n	8001e14 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	699b      	ldr	r3, [r3, #24]
 8001d5e:	2b02      	cmp	r3, #2
 8001d60:	d141      	bne.n	8001de6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d62:	4b31      	ldr	r3, [pc, #196]	; (8001e28 <HAL_RCC_OscConfig+0x478>)
 8001d64:	2200      	movs	r2, #0
 8001d66:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d68:	f7fe ffec 	bl	8000d44 <HAL_GetTick>
 8001d6c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001d6e:	e008      	b.n	8001d82 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001d70:	f7fe ffe8 	bl	8000d44 <HAL_GetTick>
 8001d74:	4602      	mov	r2, r0
 8001d76:	693b      	ldr	r3, [r7, #16]
 8001d78:	1ad3      	subs	r3, r2, r3
 8001d7a:	2b02      	cmp	r3, #2
 8001d7c:	d901      	bls.n	8001d82 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001d7e:	2303      	movs	r3, #3
 8001d80:	e087      	b.n	8001e92 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001d82:	4b27      	ldr	r3, [pc, #156]	; (8001e20 <HAL_RCC_OscConfig+0x470>)
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d1f0      	bne.n	8001d70 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	69da      	ldr	r2, [r3, #28]
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	6a1b      	ldr	r3, [r3, #32]
 8001d96:	431a      	orrs	r2, r3
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d9c:	019b      	lsls	r3, r3, #6
 8001d9e:	431a      	orrs	r2, r3
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001da4:	085b      	lsrs	r3, r3, #1
 8001da6:	3b01      	subs	r3, #1
 8001da8:	041b      	lsls	r3, r3, #16
 8001daa:	431a      	orrs	r2, r3
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001db0:	061b      	lsls	r3, r3, #24
 8001db2:	491b      	ldr	r1, [pc, #108]	; (8001e20 <HAL_RCC_OscConfig+0x470>)
 8001db4:	4313      	orrs	r3, r2
 8001db6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001db8:	4b1b      	ldr	r3, [pc, #108]	; (8001e28 <HAL_RCC_OscConfig+0x478>)
 8001dba:	2201      	movs	r2, #1
 8001dbc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001dbe:	f7fe ffc1 	bl	8000d44 <HAL_GetTick>
 8001dc2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001dc4:	e008      	b.n	8001dd8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001dc6:	f7fe ffbd 	bl	8000d44 <HAL_GetTick>
 8001dca:	4602      	mov	r2, r0
 8001dcc:	693b      	ldr	r3, [r7, #16]
 8001dce:	1ad3      	subs	r3, r2, r3
 8001dd0:	2b02      	cmp	r3, #2
 8001dd2:	d901      	bls.n	8001dd8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001dd4:	2303      	movs	r3, #3
 8001dd6:	e05c      	b.n	8001e92 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001dd8:	4b11      	ldr	r3, [pc, #68]	; (8001e20 <HAL_RCC_OscConfig+0x470>)
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d0f0      	beq.n	8001dc6 <HAL_RCC_OscConfig+0x416>
 8001de4:	e054      	b.n	8001e90 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001de6:	4b10      	ldr	r3, [pc, #64]	; (8001e28 <HAL_RCC_OscConfig+0x478>)
 8001de8:	2200      	movs	r2, #0
 8001dea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001dec:	f7fe ffaa 	bl	8000d44 <HAL_GetTick>
 8001df0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001df2:	e008      	b.n	8001e06 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001df4:	f7fe ffa6 	bl	8000d44 <HAL_GetTick>
 8001df8:	4602      	mov	r2, r0
 8001dfa:	693b      	ldr	r3, [r7, #16]
 8001dfc:	1ad3      	subs	r3, r2, r3
 8001dfe:	2b02      	cmp	r3, #2
 8001e00:	d901      	bls.n	8001e06 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001e02:	2303      	movs	r3, #3
 8001e04:	e045      	b.n	8001e92 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001e06:	4b06      	ldr	r3, [pc, #24]	; (8001e20 <HAL_RCC_OscConfig+0x470>)
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d1f0      	bne.n	8001df4 <HAL_RCC_OscConfig+0x444>
 8001e12:	e03d      	b.n	8001e90 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	699b      	ldr	r3, [r3, #24]
 8001e18:	2b01      	cmp	r3, #1
 8001e1a:	d107      	bne.n	8001e2c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001e1c:	2301      	movs	r3, #1
 8001e1e:	e038      	b.n	8001e92 <HAL_RCC_OscConfig+0x4e2>
 8001e20:	40023800 	.word	0x40023800
 8001e24:	40007000 	.word	0x40007000
 8001e28:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001e2c:	4b1b      	ldr	r3, [pc, #108]	; (8001e9c <HAL_RCC_OscConfig+0x4ec>)
 8001e2e:	685b      	ldr	r3, [r3, #4]
 8001e30:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	699b      	ldr	r3, [r3, #24]
 8001e36:	2b01      	cmp	r3, #1
 8001e38:	d028      	beq.n	8001e8c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001e44:	429a      	cmp	r2, r3
 8001e46:	d121      	bne.n	8001e8c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e52:	429a      	cmp	r2, r3
 8001e54:	d11a      	bne.n	8001e8c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001e56:	68fa      	ldr	r2, [r7, #12]
 8001e58:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001e5c:	4013      	ands	r3, r2
 8001e5e:	687a      	ldr	r2, [r7, #4]
 8001e60:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001e62:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001e64:	4293      	cmp	r3, r2
 8001e66:	d111      	bne.n	8001e8c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e72:	085b      	lsrs	r3, r3, #1
 8001e74:	3b01      	subs	r3, #1
 8001e76:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001e78:	429a      	cmp	r2, r3
 8001e7a:	d107      	bne.n	8001e8c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e86:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001e88:	429a      	cmp	r2, r3
 8001e8a:	d001      	beq.n	8001e90 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001e8c:	2301      	movs	r3, #1
 8001e8e:	e000      	b.n	8001e92 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001e90:	2300      	movs	r3, #0
}
 8001e92:	4618      	mov	r0, r3
 8001e94:	3718      	adds	r7, #24
 8001e96:	46bd      	mov	sp, r7
 8001e98:	bd80      	pop	{r7, pc}
 8001e9a:	bf00      	nop
 8001e9c:	40023800 	.word	0x40023800

08001ea0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001ea0:	b580      	push	{r7, lr}
 8001ea2:	b084      	sub	sp, #16
 8001ea4:	af00      	add	r7, sp, #0
 8001ea6:	6078      	str	r0, [r7, #4]
 8001ea8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d101      	bne.n	8001eb4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001eb0:	2301      	movs	r3, #1
 8001eb2:	e0cc      	b.n	800204e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001eb4:	4b68      	ldr	r3, [pc, #416]	; (8002058 <HAL_RCC_ClockConfig+0x1b8>)
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	f003 0307 	and.w	r3, r3, #7
 8001ebc:	683a      	ldr	r2, [r7, #0]
 8001ebe:	429a      	cmp	r2, r3
 8001ec0:	d90c      	bls.n	8001edc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ec2:	4b65      	ldr	r3, [pc, #404]	; (8002058 <HAL_RCC_ClockConfig+0x1b8>)
 8001ec4:	683a      	ldr	r2, [r7, #0]
 8001ec6:	b2d2      	uxtb	r2, r2
 8001ec8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001eca:	4b63      	ldr	r3, [pc, #396]	; (8002058 <HAL_RCC_ClockConfig+0x1b8>)
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	f003 0307 	and.w	r3, r3, #7
 8001ed2:	683a      	ldr	r2, [r7, #0]
 8001ed4:	429a      	cmp	r2, r3
 8001ed6:	d001      	beq.n	8001edc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001ed8:	2301      	movs	r3, #1
 8001eda:	e0b8      	b.n	800204e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	f003 0302 	and.w	r3, r3, #2
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d020      	beq.n	8001f2a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	f003 0304 	and.w	r3, r3, #4
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d005      	beq.n	8001f00 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001ef4:	4b59      	ldr	r3, [pc, #356]	; (800205c <HAL_RCC_ClockConfig+0x1bc>)
 8001ef6:	689b      	ldr	r3, [r3, #8]
 8001ef8:	4a58      	ldr	r2, [pc, #352]	; (800205c <HAL_RCC_ClockConfig+0x1bc>)
 8001efa:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001efe:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	f003 0308 	and.w	r3, r3, #8
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d005      	beq.n	8001f18 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001f0c:	4b53      	ldr	r3, [pc, #332]	; (800205c <HAL_RCC_ClockConfig+0x1bc>)
 8001f0e:	689b      	ldr	r3, [r3, #8]
 8001f10:	4a52      	ldr	r2, [pc, #328]	; (800205c <HAL_RCC_ClockConfig+0x1bc>)
 8001f12:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001f16:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001f18:	4b50      	ldr	r3, [pc, #320]	; (800205c <HAL_RCC_ClockConfig+0x1bc>)
 8001f1a:	689b      	ldr	r3, [r3, #8]
 8001f1c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	689b      	ldr	r3, [r3, #8]
 8001f24:	494d      	ldr	r1, [pc, #308]	; (800205c <HAL_RCC_ClockConfig+0x1bc>)
 8001f26:	4313      	orrs	r3, r2
 8001f28:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	f003 0301 	and.w	r3, r3, #1
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d044      	beq.n	8001fc0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	685b      	ldr	r3, [r3, #4]
 8001f3a:	2b01      	cmp	r3, #1
 8001f3c:	d107      	bne.n	8001f4e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f3e:	4b47      	ldr	r3, [pc, #284]	; (800205c <HAL_RCC_ClockConfig+0x1bc>)
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d119      	bne.n	8001f7e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001f4a:	2301      	movs	r3, #1
 8001f4c:	e07f      	b.n	800204e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	685b      	ldr	r3, [r3, #4]
 8001f52:	2b02      	cmp	r3, #2
 8001f54:	d003      	beq.n	8001f5e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001f5a:	2b03      	cmp	r3, #3
 8001f5c:	d107      	bne.n	8001f6e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001f5e:	4b3f      	ldr	r3, [pc, #252]	; (800205c <HAL_RCC_ClockConfig+0x1bc>)
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d109      	bne.n	8001f7e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001f6a:	2301      	movs	r3, #1
 8001f6c:	e06f      	b.n	800204e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f6e:	4b3b      	ldr	r3, [pc, #236]	; (800205c <HAL_RCC_ClockConfig+0x1bc>)
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	f003 0302 	and.w	r3, r3, #2
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d101      	bne.n	8001f7e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001f7a:	2301      	movs	r3, #1
 8001f7c:	e067      	b.n	800204e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001f7e:	4b37      	ldr	r3, [pc, #220]	; (800205c <HAL_RCC_ClockConfig+0x1bc>)
 8001f80:	689b      	ldr	r3, [r3, #8]
 8001f82:	f023 0203 	bic.w	r2, r3, #3
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	685b      	ldr	r3, [r3, #4]
 8001f8a:	4934      	ldr	r1, [pc, #208]	; (800205c <HAL_RCC_ClockConfig+0x1bc>)
 8001f8c:	4313      	orrs	r3, r2
 8001f8e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001f90:	f7fe fed8 	bl	8000d44 <HAL_GetTick>
 8001f94:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f96:	e00a      	b.n	8001fae <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001f98:	f7fe fed4 	bl	8000d44 <HAL_GetTick>
 8001f9c:	4602      	mov	r2, r0
 8001f9e:	68fb      	ldr	r3, [r7, #12]
 8001fa0:	1ad3      	subs	r3, r2, r3
 8001fa2:	f241 3288 	movw	r2, #5000	; 0x1388
 8001fa6:	4293      	cmp	r3, r2
 8001fa8:	d901      	bls.n	8001fae <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001faa:	2303      	movs	r3, #3
 8001fac:	e04f      	b.n	800204e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001fae:	4b2b      	ldr	r3, [pc, #172]	; (800205c <HAL_RCC_ClockConfig+0x1bc>)
 8001fb0:	689b      	ldr	r3, [r3, #8]
 8001fb2:	f003 020c 	and.w	r2, r3, #12
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	685b      	ldr	r3, [r3, #4]
 8001fba:	009b      	lsls	r3, r3, #2
 8001fbc:	429a      	cmp	r2, r3
 8001fbe:	d1eb      	bne.n	8001f98 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001fc0:	4b25      	ldr	r3, [pc, #148]	; (8002058 <HAL_RCC_ClockConfig+0x1b8>)
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	f003 0307 	and.w	r3, r3, #7
 8001fc8:	683a      	ldr	r2, [r7, #0]
 8001fca:	429a      	cmp	r2, r3
 8001fcc:	d20c      	bcs.n	8001fe8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001fce:	4b22      	ldr	r3, [pc, #136]	; (8002058 <HAL_RCC_ClockConfig+0x1b8>)
 8001fd0:	683a      	ldr	r2, [r7, #0]
 8001fd2:	b2d2      	uxtb	r2, r2
 8001fd4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001fd6:	4b20      	ldr	r3, [pc, #128]	; (8002058 <HAL_RCC_ClockConfig+0x1b8>)
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	f003 0307 	and.w	r3, r3, #7
 8001fde:	683a      	ldr	r2, [r7, #0]
 8001fe0:	429a      	cmp	r2, r3
 8001fe2:	d001      	beq.n	8001fe8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001fe4:	2301      	movs	r3, #1
 8001fe6:	e032      	b.n	800204e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	f003 0304 	and.w	r3, r3, #4
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d008      	beq.n	8002006 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001ff4:	4b19      	ldr	r3, [pc, #100]	; (800205c <HAL_RCC_ClockConfig+0x1bc>)
 8001ff6:	689b      	ldr	r3, [r3, #8]
 8001ff8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	68db      	ldr	r3, [r3, #12]
 8002000:	4916      	ldr	r1, [pc, #88]	; (800205c <HAL_RCC_ClockConfig+0x1bc>)
 8002002:	4313      	orrs	r3, r2
 8002004:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	f003 0308 	and.w	r3, r3, #8
 800200e:	2b00      	cmp	r3, #0
 8002010:	d009      	beq.n	8002026 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002012:	4b12      	ldr	r3, [pc, #72]	; (800205c <HAL_RCC_ClockConfig+0x1bc>)
 8002014:	689b      	ldr	r3, [r3, #8]
 8002016:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	691b      	ldr	r3, [r3, #16]
 800201e:	00db      	lsls	r3, r3, #3
 8002020:	490e      	ldr	r1, [pc, #56]	; (800205c <HAL_RCC_ClockConfig+0x1bc>)
 8002022:	4313      	orrs	r3, r2
 8002024:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002026:	f000 f821 	bl	800206c <HAL_RCC_GetSysClockFreq>
 800202a:	4602      	mov	r2, r0
 800202c:	4b0b      	ldr	r3, [pc, #44]	; (800205c <HAL_RCC_ClockConfig+0x1bc>)
 800202e:	689b      	ldr	r3, [r3, #8]
 8002030:	091b      	lsrs	r3, r3, #4
 8002032:	f003 030f 	and.w	r3, r3, #15
 8002036:	490a      	ldr	r1, [pc, #40]	; (8002060 <HAL_RCC_ClockConfig+0x1c0>)
 8002038:	5ccb      	ldrb	r3, [r1, r3]
 800203a:	fa22 f303 	lsr.w	r3, r2, r3
 800203e:	4a09      	ldr	r2, [pc, #36]	; (8002064 <HAL_RCC_ClockConfig+0x1c4>)
 8002040:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002042:	4b09      	ldr	r3, [pc, #36]	; (8002068 <HAL_RCC_ClockConfig+0x1c8>)
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	4618      	mov	r0, r3
 8002048:	f7fe fe38 	bl	8000cbc <HAL_InitTick>

  return HAL_OK;
 800204c:	2300      	movs	r3, #0
}
 800204e:	4618      	mov	r0, r3
 8002050:	3710      	adds	r7, #16
 8002052:	46bd      	mov	sp, r7
 8002054:	bd80      	pop	{r7, pc}
 8002056:	bf00      	nop
 8002058:	40023c00 	.word	0x40023c00
 800205c:	40023800 	.word	0x40023800
 8002060:	08003b6c 	.word	0x08003b6c
 8002064:	20000014 	.word	0x20000014
 8002068:	20000018 	.word	0x20000018

0800206c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800206c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002070:	b090      	sub	sp, #64	; 0x40
 8002072:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002074:	2300      	movs	r3, #0
 8002076:	637b      	str	r3, [r7, #52]	; 0x34
 8002078:	2300      	movs	r3, #0
 800207a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800207c:	2300      	movs	r3, #0
 800207e:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8002080:	2300      	movs	r3, #0
 8002082:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002084:	4b59      	ldr	r3, [pc, #356]	; (80021ec <HAL_RCC_GetSysClockFreq+0x180>)
 8002086:	689b      	ldr	r3, [r3, #8]
 8002088:	f003 030c 	and.w	r3, r3, #12
 800208c:	2b08      	cmp	r3, #8
 800208e:	d00d      	beq.n	80020ac <HAL_RCC_GetSysClockFreq+0x40>
 8002090:	2b08      	cmp	r3, #8
 8002092:	f200 80a1 	bhi.w	80021d8 <HAL_RCC_GetSysClockFreq+0x16c>
 8002096:	2b00      	cmp	r3, #0
 8002098:	d002      	beq.n	80020a0 <HAL_RCC_GetSysClockFreq+0x34>
 800209a:	2b04      	cmp	r3, #4
 800209c:	d003      	beq.n	80020a6 <HAL_RCC_GetSysClockFreq+0x3a>
 800209e:	e09b      	b.n	80021d8 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80020a0:	4b53      	ldr	r3, [pc, #332]	; (80021f0 <HAL_RCC_GetSysClockFreq+0x184>)
 80020a2:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 80020a4:	e09b      	b.n	80021de <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80020a6:	4b53      	ldr	r3, [pc, #332]	; (80021f4 <HAL_RCC_GetSysClockFreq+0x188>)
 80020a8:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80020aa:	e098      	b.n	80021de <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80020ac:	4b4f      	ldr	r3, [pc, #316]	; (80021ec <HAL_RCC_GetSysClockFreq+0x180>)
 80020ae:	685b      	ldr	r3, [r3, #4]
 80020b0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80020b4:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80020b6:	4b4d      	ldr	r3, [pc, #308]	; (80021ec <HAL_RCC_GetSysClockFreq+0x180>)
 80020b8:	685b      	ldr	r3, [r3, #4]
 80020ba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d028      	beq.n	8002114 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80020c2:	4b4a      	ldr	r3, [pc, #296]	; (80021ec <HAL_RCC_GetSysClockFreq+0x180>)
 80020c4:	685b      	ldr	r3, [r3, #4]
 80020c6:	099b      	lsrs	r3, r3, #6
 80020c8:	2200      	movs	r2, #0
 80020ca:	623b      	str	r3, [r7, #32]
 80020cc:	627a      	str	r2, [r7, #36]	; 0x24
 80020ce:	6a3b      	ldr	r3, [r7, #32]
 80020d0:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80020d4:	2100      	movs	r1, #0
 80020d6:	4b47      	ldr	r3, [pc, #284]	; (80021f4 <HAL_RCC_GetSysClockFreq+0x188>)
 80020d8:	fb03 f201 	mul.w	r2, r3, r1
 80020dc:	2300      	movs	r3, #0
 80020de:	fb00 f303 	mul.w	r3, r0, r3
 80020e2:	4413      	add	r3, r2
 80020e4:	4a43      	ldr	r2, [pc, #268]	; (80021f4 <HAL_RCC_GetSysClockFreq+0x188>)
 80020e6:	fba0 1202 	umull	r1, r2, r0, r2
 80020ea:	62fa      	str	r2, [r7, #44]	; 0x2c
 80020ec:	460a      	mov	r2, r1
 80020ee:	62ba      	str	r2, [r7, #40]	; 0x28
 80020f0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80020f2:	4413      	add	r3, r2
 80020f4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80020f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80020f8:	2200      	movs	r2, #0
 80020fa:	61bb      	str	r3, [r7, #24]
 80020fc:	61fa      	str	r2, [r7, #28]
 80020fe:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002102:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002106:	f7fe f8b3 	bl	8000270 <__aeabi_uldivmod>
 800210a:	4602      	mov	r2, r0
 800210c:	460b      	mov	r3, r1
 800210e:	4613      	mov	r3, r2
 8002110:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002112:	e053      	b.n	80021bc <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002114:	4b35      	ldr	r3, [pc, #212]	; (80021ec <HAL_RCC_GetSysClockFreq+0x180>)
 8002116:	685b      	ldr	r3, [r3, #4]
 8002118:	099b      	lsrs	r3, r3, #6
 800211a:	2200      	movs	r2, #0
 800211c:	613b      	str	r3, [r7, #16]
 800211e:	617a      	str	r2, [r7, #20]
 8002120:	693b      	ldr	r3, [r7, #16]
 8002122:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8002126:	f04f 0b00 	mov.w	fp, #0
 800212a:	4652      	mov	r2, sl
 800212c:	465b      	mov	r3, fp
 800212e:	f04f 0000 	mov.w	r0, #0
 8002132:	f04f 0100 	mov.w	r1, #0
 8002136:	0159      	lsls	r1, r3, #5
 8002138:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800213c:	0150      	lsls	r0, r2, #5
 800213e:	4602      	mov	r2, r0
 8002140:	460b      	mov	r3, r1
 8002142:	ebb2 080a 	subs.w	r8, r2, sl
 8002146:	eb63 090b 	sbc.w	r9, r3, fp
 800214a:	f04f 0200 	mov.w	r2, #0
 800214e:	f04f 0300 	mov.w	r3, #0
 8002152:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8002156:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800215a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800215e:	ebb2 0408 	subs.w	r4, r2, r8
 8002162:	eb63 0509 	sbc.w	r5, r3, r9
 8002166:	f04f 0200 	mov.w	r2, #0
 800216a:	f04f 0300 	mov.w	r3, #0
 800216e:	00eb      	lsls	r3, r5, #3
 8002170:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002174:	00e2      	lsls	r2, r4, #3
 8002176:	4614      	mov	r4, r2
 8002178:	461d      	mov	r5, r3
 800217a:	eb14 030a 	adds.w	r3, r4, sl
 800217e:	603b      	str	r3, [r7, #0]
 8002180:	eb45 030b 	adc.w	r3, r5, fp
 8002184:	607b      	str	r3, [r7, #4]
 8002186:	f04f 0200 	mov.w	r2, #0
 800218a:	f04f 0300 	mov.w	r3, #0
 800218e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002192:	4629      	mov	r1, r5
 8002194:	028b      	lsls	r3, r1, #10
 8002196:	4621      	mov	r1, r4
 8002198:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800219c:	4621      	mov	r1, r4
 800219e:	028a      	lsls	r2, r1, #10
 80021a0:	4610      	mov	r0, r2
 80021a2:	4619      	mov	r1, r3
 80021a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80021a6:	2200      	movs	r2, #0
 80021a8:	60bb      	str	r3, [r7, #8]
 80021aa:	60fa      	str	r2, [r7, #12]
 80021ac:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80021b0:	f7fe f85e 	bl	8000270 <__aeabi_uldivmod>
 80021b4:	4602      	mov	r2, r0
 80021b6:	460b      	mov	r3, r1
 80021b8:	4613      	mov	r3, r2
 80021ba:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80021bc:	4b0b      	ldr	r3, [pc, #44]	; (80021ec <HAL_RCC_GetSysClockFreq+0x180>)
 80021be:	685b      	ldr	r3, [r3, #4]
 80021c0:	0c1b      	lsrs	r3, r3, #16
 80021c2:	f003 0303 	and.w	r3, r3, #3
 80021c6:	3301      	adds	r3, #1
 80021c8:	005b      	lsls	r3, r3, #1
 80021ca:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 80021cc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80021ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80021d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80021d4:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80021d6:	e002      	b.n	80021de <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80021d8:	4b05      	ldr	r3, [pc, #20]	; (80021f0 <HAL_RCC_GetSysClockFreq+0x184>)
 80021da:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80021dc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80021de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 80021e0:	4618      	mov	r0, r3
 80021e2:	3740      	adds	r7, #64	; 0x40
 80021e4:	46bd      	mov	sp, r7
 80021e6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80021ea:	bf00      	nop
 80021ec:	40023800 	.word	0x40023800
 80021f0:	00f42400 	.word	0x00f42400
 80021f4:	017d7840 	.word	0x017d7840

080021f8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80021f8:	b480      	push	{r7}
 80021fa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80021fc:	4b03      	ldr	r3, [pc, #12]	; (800220c <HAL_RCC_GetHCLKFreq+0x14>)
 80021fe:	681b      	ldr	r3, [r3, #0]
}
 8002200:	4618      	mov	r0, r3
 8002202:	46bd      	mov	sp, r7
 8002204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002208:	4770      	bx	lr
 800220a:	bf00      	nop
 800220c:	20000014 	.word	0x20000014

08002210 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002210:	b580      	push	{r7, lr}
 8002212:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002214:	f7ff fff0 	bl	80021f8 <HAL_RCC_GetHCLKFreq>
 8002218:	4602      	mov	r2, r0
 800221a:	4b05      	ldr	r3, [pc, #20]	; (8002230 <HAL_RCC_GetPCLK1Freq+0x20>)
 800221c:	689b      	ldr	r3, [r3, #8]
 800221e:	0a9b      	lsrs	r3, r3, #10
 8002220:	f003 0307 	and.w	r3, r3, #7
 8002224:	4903      	ldr	r1, [pc, #12]	; (8002234 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002226:	5ccb      	ldrb	r3, [r1, r3]
 8002228:	fa22 f303 	lsr.w	r3, r2, r3
}
 800222c:	4618      	mov	r0, r3
 800222e:	bd80      	pop	{r7, pc}
 8002230:	40023800 	.word	0x40023800
 8002234:	08003b7c 	.word	0x08003b7c

08002238 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002238:	b580      	push	{r7, lr}
 800223a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800223c:	f7ff ffdc 	bl	80021f8 <HAL_RCC_GetHCLKFreq>
 8002240:	4602      	mov	r2, r0
 8002242:	4b05      	ldr	r3, [pc, #20]	; (8002258 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002244:	689b      	ldr	r3, [r3, #8]
 8002246:	0b5b      	lsrs	r3, r3, #13
 8002248:	f003 0307 	and.w	r3, r3, #7
 800224c:	4903      	ldr	r1, [pc, #12]	; (800225c <HAL_RCC_GetPCLK2Freq+0x24>)
 800224e:	5ccb      	ldrb	r3, [r1, r3]
 8002250:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002254:	4618      	mov	r0, r3
 8002256:	bd80      	pop	{r7, pc}
 8002258:	40023800 	.word	0x40023800
 800225c:	08003b7c 	.word	0x08003b7c

08002260 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002260:	b580      	push	{r7, lr}
 8002262:	b082      	sub	sp, #8
 8002264:	af00      	add	r7, sp, #0
 8002266:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	2b00      	cmp	r3, #0
 800226c:	d101      	bne.n	8002272 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800226e:	2301      	movs	r3, #1
 8002270:	e03f      	b.n	80022f2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002278:	b2db      	uxtb	r3, r3
 800227a:	2b00      	cmp	r3, #0
 800227c:	d106      	bne.n	800228c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	2200      	movs	r2, #0
 8002282:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002286:	6878      	ldr	r0, [r7, #4]
 8002288:	f7fe fc14 	bl	8000ab4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	2224      	movs	r2, #36	; 0x24
 8002290:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	68da      	ldr	r2, [r3, #12]
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80022a2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80022a4:	6878      	ldr	r0, [r7, #4]
 80022a6:	f000 fd23 	bl	8002cf0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	691a      	ldr	r2, [r3, #16]
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80022b8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	695a      	ldr	r2, [r3, #20]
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80022c8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	68da      	ldr	r2, [r3, #12]
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80022d8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	2200      	movs	r2, #0
 80022de:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	2220      	movs	r2, #32
 80022e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	2220      	movs	r2, #32
 80022ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80022f0:	2300      	movs	r3, #0
}
 80022f2:	4618      	mov	r0, r3
 80022f4:	3708      	adds	r7, #8
 80022f6:	46bd      	mov	sp, r7
 80022f8:	bd80      	pop	{r7, pc}

080022fa <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 80022fa:	b480      	push	{r7}
 80022fc:	b085      	sub	sp, #20
 80022fe:	af00      	add	r7, sp, #0
 8002300:	60f8      	str	r0, [r7, #12]
 8002302:	60b9      	str	r1, [r7, #8]
 8002304:	4613      	mov	r3, r2
 8002306:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800230e:	b2db      	uxtb	r3, r3
 8002310:	2b20      	cmp	r3, #32
 8002312:	d130      	bne.n	8002376 <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 8002314:	68bb      	ldr	r3, [r7, #8]
 8002316:	2b00      	cmp	r3, #0
 8002318:	d002      	beq.n	8002320 <HAL_UART_Transmit_IT+0x26>
 800231a:	88fb      	ldrh	r3, [r7, #6]
 800231c:	2b00      	cmp	r3, #0
 800231e:	d101      	bne.n	8002324 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8002320:	2301      	movs	r3, #1
 8002322:	e029      	b.n	8002378 <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800232a:	2b01      	cmp	r3, #1
 800232c:	d101      	bne.n	8002332 <HAL_UART_Transmit_IT+0x38>
 800232e:	2302      	movs	r3, #2
 8002330:	e022      	b.n	8002378 <HAL_UART_Transmit_IT+0x7e>
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	2201      	movs	r2, #1
 8002336:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	68ba      	ldr	r2, [r7, #8]
 800233e:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	88fa      	ldrh	r2, [r7, #6]
 8002344:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	88fa      	ldrh	r2, [r7, #6]
 800234a:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	2200      	movs	r2, #0
 8002350:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	2221      	movs	r2, #33	; 0x21
 8002356:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	2200      	movs	r2, #0
 800235e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	68da      	ldr	r2, [r3, #12]
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002370:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8002372:	2300      	movs	r3, #0
 8002374:	e000      	b.n	8002378 <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 8002376:	2302      	movs	r3, #2
  }
}
 8002378:	4618      	mov	r0, r3
 800237a:	3714      	adds	r7, #20
 800237c:	46bd      	mov	sp, r7
 800237e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002382:	4770      	bx	lr

08002384 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002384:	b580      	push	{r7, lr}
 8002386:	b084      	sub	sp, #16
 8002388:	af00      	add	r7, sp, #0
 800238a:	60f8      	str	r0, [r7, #12]
 800238c:	60b9      	str	r1, [r7, #8]
 800238e:	4613      	mov	r3, r2
 8002390:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002398:	b2db      	uxtb	r3, r3
 800239a:	2b20      	cmp	r3, #32
 800239c:	d11d      	bne.n	80023da <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 800239e:	68bb      	ldr	r3, [r7, #8]
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d002      	beq.n	80023aa <HAL_UART_Receive_IT+0x26>
 80023a4:	88fb      	ldrh	r3, [r7, #6]
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d101      	bne.n	80023ae <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80023aa:	2301      	movs	r3, #1
 80023ac:	e016      	b.n	80023dc <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80023b4:	2b01      	cmp	r3, #1
 80023b6:	d101      	bne.n	80023bc <HAL_UART_Receive_IT+0x38>
 80023b8:	2302      	movs	r3, #2
 80023ba:	e00f      	b.n	80023dc <HAL_UART_Receive_IT+0x58>
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	2201      	movs	r2, #1
 80023c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	2200      	movs	r2, #0
 80023c8:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 80023ca:	88fb      	ldrh	r3, [r7, #6]
 80023cc:	461a      	mov	r2, r3
 80023ce:	68b9      	ldr	r1, [r7, #8]
 80023d0:	68f8      	ldr	r0, [r7, #12]
 80023d2:	f000 fab5 	bl	8002940 <UART_Start_Receive_IT>
 80023d6:	4603      	mov	r3, r0
 80023d8:	e000      	b.n	80023dc <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 80023da:	2302      	movs	r3, #2
  }
}
 80023dc:	4618      	mov	r0, r3
 80023de:	3710      	adds	r7, #16
 80023e0:	46bd      	mov	sp, r7
 80023e2:	bd80      	pop	{r7, pc}

080023e4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80023e4:	b580      	push	{r7, lr}
 80023e6:	b0ba      	sub	sp, #232	; 0xe8
 80023e8:	af00      	add	r7, sp, #0
 80023ea:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	68db      	ldr	r3, [r3, #12]
 80023fc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	695b      	ldr	r3, [r3, #20]
 8002406:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800240a:	2300      	movs	r3, #0
 800240c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8002410:	2300      	movs	r3, #0
 8002412:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8002416:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800241a:	f003 030f 	and.w	r3, r3, #15
 800241e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8002422:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002426:	2b00      	cmp	r3, #0
 8002428:	d10f      	bne.n	800244a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800242a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800242e:	f003 0320 	and.w	r3, r3, #32
 8002432:	2b00      	cmp	r3, #0
 8002434:	d009      	beq.n	800244a <HAL_UART_IRQHandler+0x66>
 8002436:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800243a:	f003 0320 	and.w	r3, r3, #32
 800243e:	2b00      	cmp	r3, #0
 8002440:	d003      	beq.n	800244a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8002442:	6878      	ldr	r0, [r7, #4]
 8002444:	f000 fb99 	bl	8002b7a <UART_Receive_IT>
      return;
 8002448:	e256      	b.n	80028f8 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800244a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800244e:	2b00      	cmp	r3, #0
 8002450:	f000 80de 	beq.w	8002610 <HAL_UART_IRQHandler+0x22c>
 8002454:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002458:	f003 0301 	and.w	r3, r3, #1
 800245c:	2b00      	cmp	r3, #0
 800245e:	d106      	bne.n	800246e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002460:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002464:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8002468:	2b00      	cmp	r3, #0
 800246a:	f000 80d1 	beq.w	8002610 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800246e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002472:	f003 0301 	and.w	r3, r3, #1
 8002476:	2b00      	cmp	r3, #0
 8002478:	d00b      	beq.n	8002492 <HAL_UART_IRQHandler+0xae>
 800247a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800247e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002482:	2b00      	cmp	r3, #0
 8002484:	d005      	beq.n	8002492 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800248a:	f043 0201 	orr.w	r2, r3, #1
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002492:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002496:	f003 0304 	and.w	r3, r3, #4
 800249a:	2b00      	cmp	r3, #0
 800249c:	d00b      	beq.n	80024b6 <HAL_UART_IRQHandler+0xd2>
 800249e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80024a2:	f003 0301 	and.w	r3, r3, #1
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d005      	beq.n	80024b6 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024ae:	f043 0202 	orr.w	r2, r3, #2
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80024b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80024ba:	f003 0302 	and.w	r3, r3, #2
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d00b      	beq.n	80024da <HAL_UART_IRQHandler+0xf6>
 80024c2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80024c6:	f003 0301 	and.w	r3, r3, #1
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d005      	beq.n	80024da <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024d2:	f043 0204 	orr.w	r2, r3, #4
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80024da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80024de:	f003 0308 	and.w	r3, r3, #8
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d011      	beq.n	800250a <HAL_UART_IRQHandler+0x126>
 80024e6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80024ea:	f003 0320 	and.w	r3, r3, #32
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d105      	bne.n	80024fe <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80024f2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80024f6:	f003 0301 	and.w	r3, r3, #1
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d005      	beq.n	800250a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002502:	f043 0208 	orr.w	r2, r3, #8
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800250e:	2b00      	cmp	r3, #0
 8002510:	f000 81ed 	beq.w	80028ee <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002514:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002518:	f003 0320 	and.w	r3, r3, #32
 800251c:	2b00      	cmp	r3, #0
 800251e:	d008      	beq.n	8002532 <HAL_UART_IRQHandler+0x14e>
 8002520:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002524:	f003 0320 	and.w	r3, r3, #32
 8002528:	2b00      	cmp	r3, #0
 800252a:	d002      	beq.n	8002532 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800252c:	6878      	ldr	r0, [r7, #4]
 800252e:	f000 fb24 	bl	8002b7a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	695b      	ldr	r3, [r3, #20]
 8002538:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800253c:	2b40      	cmp	r3, #64	; 0x40
 800253e:	bf0c      	ite	eq
 8002540:	2301      	moveq	r3, #1
 8002542:	2300      	movne	r3, #0
 8002544:	b2db      	uxtb	r3, r3
 8002546:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800254e:	f003 0308 	and.w	r3, r3, #8
 8002552:	2b00      	cmp	r3, #0
 8002554:	d103      	bne.n	800255e <HAL_UART_IRQHandler+0x17a>
 8002556:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800255a:	2b00      	cmp	r3, #0
 800255c:	d04f      	beq.n	80025fe <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800255e:	6878      	ldr	r0, [r7, #4]
 8002560:	f000 fa2c 	bl	80029bc <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	695b      	ldr	r3, [r3, #20]
 800256a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800256e:	2b40      	cmp	r3, #64	; 0x40
 8002570:	d141      	bne.n	80025f6 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	3314      	adds	r3, #20
 8002578:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800257c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002580:	e853 3f00 	ldrex	r3, [r3]
 8002584:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8002588:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800258c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002590:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	3314      	adds	r3, #20
 800259a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800259e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80025a2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80025a6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80025aa:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80025ae:	e841 2300 	strex	r3, r2, [r1]
 80025b2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80025b6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d1d9      	bne.n	8002572 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d013      	beq.n	80025ee <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025ca:	4a7d      	ldr	r2, [pc, #500]	; (80027c0 <HAL_UART_IRQHandler+0x3dc>)
 80025cc:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025d2:	4618      	mov	r0, r3
 80025d4:	f7fe fdf2 	bl	80011bc <HAL_DMA_Abort_IT>
 80025d8:	4603      	mov	r3, r0
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d016      	beq.n	800260c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025e2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80025e4:	687a      	ldr	r2, [r7, #4]
 80025e6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80025e8:	4610      	mov	r0, r2
 80025ea:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80025ec:	e00e      	b.n	800260c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80025ee:	6878      	ldr	r0, [r7, #4]
 80025f0:	f000 f990 	bl	8002914 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80025f4:	e00a      	b.n	800260c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80025f6:	6878      	ldr	r0, [r7, #4]
 80025f8:	f000 f98c 	bl	8002914 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80025fc:	e006      	b.n	800260c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80025fe:	6878      	ldr	r0, [r7, #4]
 8002600:	f000 f988 	bl	8002914 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	2200      	movs	r2, #0
 8002608:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800260a:	e170      	b.n	80028ee <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800260c:	bf00      	nop
    return;
 800260e:	e16e      	b.n	80028ee <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002614:	2b01      	cmp	r3, #1
 8002616:	f040 814a 	bne.w	80028ae <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800261a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800261e:	f003 0310 	and.w	r3, r3, #16
 8002622:	2b00      	cmp	r3, #0
 8002624:	f000 8143 	beq.w	80028ae <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8002628:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800262c:	f003 0310 	and.w	r3, r3, #16
 8002630:	2b00      	cmp	r3, #0
 8002632:	f000 813c 	beq.w	80028ae <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002636:	2300      	movs	r3, #0
 8002638:	60bb      	str	r3, [r7, #8]
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	60bb      	str	r3, [r7, #8]
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	685b      	ldr	r3, [r3, #4]
 8002648:	60bb      	str	r3, [r7, #8]
 800264a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	695b      	ldr	r3, [r3, #20]
 8002652:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002656:	2b40      	cmp	r3, #64	; 0x40
 8002658:	f040 80b4 	bne.w	80027c4 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	685b      	ldr	r3, [r3, #4]
 8002664:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8002668:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800266c:	2b00      	cmp	r3, #0
 800266e:	f000 8140 	beq.w	80028f2 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002676:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800267a:	429a      	cmp	r2, r3
 800267c:	f080 8139 	bcs.w	80028f2 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002686:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800268c:	69db      	ldr	r3, [r3, #28]
 800268e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002692:	f000 8088 	beq.w	80027a6 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	330c      	adds	r3, #12
 800269c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80026a0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80026a4:	e853 3f00 	ldrex	r3, [r3]
 80026a8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80026ac:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80026b0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80026b4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	330c      	adds	r3, #12
 80026be:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80026c2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80026c6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80026ca:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80026ce:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80026d2:	e841 2300 	strex	r3, r2, [r1]
 80026d6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80026da:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d1d9      	bne.n	8002696 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	3314      	adds	r3, #20
 80026e8:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80026ea:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80026ec:	e853 3f00 	ldrex	r3, [r3]
 80026f0:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80026f2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80026f4:	f023 0301 	bic.w	r3, r3, #1
 80026f8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	3314      	adds	r3, #20
 8002702:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002706:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800270a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800270c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800270e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8002712:	e841 2300 	strex	r3, r2, [r1]
 8002716:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8002718:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800271a:	2b00      	cmp	r3, #0
 800271c:	d1e1      	bne.n	80026e2 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	3314      	adds	r3, #20
 8002724:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002726:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002728:	e853 3f00 	ldrex	r3, [r3]
 800272c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800272e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002730:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002734:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	3314      	adds	r3, #20
 800273e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8002742:	66fa      	str	r2, [r7, #108]	; 0x6c
 8002744:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002746:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8002748:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800274a:	e841 2300 	strex	r3, r2, [r1]
 800274e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8002750:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002752:	2b00      	cmp	r3, #0
 8002754:	d1e3      	bne.n	800271e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	2220      	movs	r2, #32
 800275a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	2200      	movs	r2, #0
 8002762:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	330c      	adds	r3, #12
 800276a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800276c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800276e:	e853 3f00 	ldrex	r3, [r3]
 8002772:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8002774:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002776:	f023 0310 	bic.w	r3, r3, #16
 800277a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	330c      	adds	r3, #12
 8002784:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8002788:	65ba      	str	r2, [r7, #88]	; 0x58
 800278a:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800278c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800278e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002790:	e841 2300 	strex	r3, r2, [r1]
 8002794:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8002796:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002798:	2b00      	cmp	r3, #0
 800279a:	d1e3      	bne.n	8002764 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027a0:	4618      	mov	r0, r3
 80027a2:	f7fe fc9b 	bl	80010dc <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80027ae:	b29b      	uxth	r3, r3
 80027b0:	1ad3      	subs	r3, r2, r3
 80027b2:	b29b      	uxth	r3, r3
 80027b4:	4619      	mov	r1, r3
 80027b6:	6878      	ldr	r0, [r7, #4]
 80027b8:	f000 f8b6 	bl	8002928 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80027bc:	e099      	b.n	80028f2 <HAL_UART_IRQHandler+0x50e>
 80027be:	bf00      	nop
 80027c0:	08002a83 	.word	0x08002a83
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80027cc:	b29b      	uxth	r3, r3
 80027ce:	1ad3      	subs	r3, r2, r3
 80027d0:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80027d8:	b29b      	uxth	r3, r3
 80027da:	2b00      	cmp	r3, #0
 80027dc:	f000 808b 	beq.w	80028f6 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 80027e0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	f000 8086 	beq.w	80028f6 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	330c      	adds	r3, #12
 80027f0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80027f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80027f4:	e853 3f00 	ldrex	r3, [r3]
 80027f8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80027fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80027fc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002800:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	330c      	adds	r3, #12
 800280a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800280e:	647a      	str	r2, [r7, #68]	; 0x44
 8002810:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002812:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8002814:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002816:	e841 2300 	strex	r3, r2, [r1]
 800281a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800281c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800281e:	2b00      	cmp	r3, #0
 8002820:	d1e3      	bne.n	80027ea <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	3314      	adds	r3, #20
 8002828:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800282a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800282c:	e853 3f00 	ldrex	r3, [r3]
 8002830:	623b      	str	r3, [r7, #32]
   return(result);
 8002832:	6a3b      	ldr	r3, [r7, #32]
 8002834:	f023 0301 	bic.w	r3, r3, #1
 8002838:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	3314      	adds	r3, #20
 8002842:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8002846:	633a      	str	r2, [r7, #48]	; 0x30
 8002848:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800284a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800284c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800284e:	e841 2300 	strex	r3, r2, [r1]
 8002852:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8002854:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002856:	2b00      	cmp	r3, #0
 8002858:	d1e3      	bne.n	8002822 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	2220      	movs	r2, #32
 800285e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	2200      	movs	r2, #0
 8002866:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	330c      	adds	r3, #12
 800286e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002870:	693b      	ldr	r3, [r7, #16]
 8002872:	e853 3f00 	ldrex	r3, [r3]
 8002876:	60fb      	str	r3, [r7, #12]
   return(result);
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	f023 0310 	bic.w	r3, r3, #16
 800287e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	330c      	adds	r3, #12
 8002888:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800288c:	61fa      	str	r2, [r7, #28]
 800288e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002890:	69b9      	ldr	r1, [r7, #24]
 8002892:	69fa      	ldr	r2, [r7, #28]
 8002894:	e841 2300 	strex	r3, r2, [r1]
 8002898:	617b      	str	r3, [r7, #20]
   return(result);
 800289a:	697b      	ldr	r3, [r7, #20]
 800289c:	2b00      	cmp	r3, #0
 800289e:	d1e3      	bne.n	8002868 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80028a0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80028a4:	4619      	mov	r1, r3
 80028a6:	6878      	ldr	r0, [r7, #4]
 80028a8:	f000 f83e 	bl	8002928 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80028ac:	e023      	b.n	80028f6 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80028ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80028b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d009      	beq.n	80028ce <HAL_UART_IRQHandler+0x4ea>
 80028ba:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80028be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d003      	beq.n	80028ce <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 80028c6:	6878      	ldr	r0, [r7, #4]
 80028c8:	f000 f8ef 	bl	8002aaa <UART_Transmit_IT>
    return;
 80028cc:	e014      	b.n	80028f8 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80028ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80028d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d00e      	beq.n	80028f8 <HAL_UART_IRQHandler+0x514>
 80028da:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80028de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d008      	beq.n	80028f8 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 80028e6:	6878      	ldr	r0, [r7, #4]
 80028e8:	f000 f92f 	bl	8002b4a <UART_EndTransmit_IT>
    return;
 80028ec:	e004      	b.n	80028f8 <HAL_UART_IRQHandler+0x514>
    return;
 80028ee:	bf00      	nop
 80028f0:	e002      	b.n	80028f8 <HAL_UART_IRQHandler+0x514>
      return;
 80028f2:	bf00      	nop
 80028f4:	e000      	b.n	80028f8 <HAL_UART_IRQHandler+0x514>
      return;
 80028f6:	bf00      	nop
  }
}
 80028f8:	37e8      	adds	r7, #232	; 0xe8
 80028fa:	46bd      	mov	sp, r7
 80028fc:	bd80      	pop	{r7, pc}
 80028fe:	bf00      	nop

08002900 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002900:	b480      	push	{r7}
 8002902:	b083      	sub	sp, #12
 8002904:	af00      	add	r7, sp, #0
 8002906:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8002908:	bf00      	nop
 800290a:	370c      	adds	r7, #12
 800290c:	46bd      	mov	sp, r7
 800290e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002912:	4770      	bx	lr

08002914 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002914:	b480      	push	{r7}
 8002916:	b083      	sub	sp, #12
 8002918:	af00      	add	r7, sp, #0
 800291a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800291c:	bf00      	nop
 800291e:	370c      	adds	r7, #12
 8002920:	46bd      	mov	sp, r7
 8002922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002926:	4770      	bx	lr

08002928 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002928:	b480      	push	{r7}
 800292a:	b083      	sub	sp, #12
 800292c:	af00      	add	r7, sp, #0
 800292e:	6078      	str	r0, [r7, #4]
 8002930:	460b      	mov	r3, r1
 8002932:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002934:	bf00      	nop
 8002936:	370c      	adds	r7, #12
 8002938:	46bd      	mov	sp, r7
 800293a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800293e:	4770      	bx	lr

08002940 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002940:	b480      	push	{r7}
 8002942:	b085      	sub	sp, #20
 8002944:	af00      	add	r7, sp, #0
 8002946:	60f8      	str	r0, [r7, #12]
 8002948:	60b9      	str	r1, [r7, #8]
 800294a:	4613      	mov	r3, r2
 800294c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	68ba      	ldr	r2, [r7, #8]
 8002952:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	88fa      	ldrh	r2, [r7, #6]
 8002958:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	88fa      	ldrh	r2, [r7, #6]
 800295e:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	2200      	movs	r2, #0
 8002964:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	2222      	movs	r2, #34	; 0x22
 800296a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	2200      	movs	r2, #0
 8002972:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	691b      	ldr	r3, [r3, #16]
 800297a:	2b00      	cmp	r3, #0
 800297c:	d007      	beq.n	800298e <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	68da      	ldr	r2, [r3, #12]
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800298c:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	695a      	ldr	r2, [r3, #20]
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	f042 0201 	orr.w	r2, r2, #1
 800299c:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	68da      	ldr	r2, [r3, #12]
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	f042 0220 	orr.w	r2, r2, #32
 80029ac:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80029ae:	2300      	movs	r3, #0
}
 80029b0:	4618      	mov	r0, r3
 80029b2:	3714      	adds	r7, #20
 80029b4:	46bd      	mov	sp, r7
 80029b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ba:	4770      	bx	lr

080029bc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80029bc:	b480      	push	{r7}
 80029be:	b095      	sub	sp, #84	; 0x54
 80029c0:	af00      	add	r7, sp, #0
 80029c2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	330c      	adds	r3, #12
 80029ca:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80029cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80029ce:	e853 3f00 	ldrex	r3, [r3]
 80029d2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80029d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029d6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80029da:	64fb      	str	r3, [r7, #76]	; 0x4c
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	330c      	adds	r3, #12
 80029e2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80029e4:	643a      	str	r2, [r7, #64]	; 0x40
 80029e6:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80029e8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80029ea:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80029ec:	e841 2300 	strex	r3, r2, [r1]
 80029f0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80029f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d1e5      	bne.n	80029c4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	3314      	adds	r3, #20
 80029fe:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002a00:	6a3b      	ldr	r3, [r7, #32]
 8002a02:	e853 3f00 	ldrex	r3, [r3]
 8002a06:	61fb      	str	r3, [r7, #28]
   return(result);
 8002a08:	69fb      	ldr	r3, [r7, #28]
 8002a0a:	f023 0301 	bic.w	r3, r3, #1
 8002a0e:	64bb      	str	r3, [r7, #72]	; 0x48
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	3314      	adds	r3, #20
 8002a16:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002a18:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002a1a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002a1c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002a1e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002a20:	e841 2300 	strex	r3, r2, [r1]
 8002a24:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002a26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d1e5      	bne.n	80029f8 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a30:	2b01      	cmp	r3, #1
 8002a32:	d119      	bne.n	8002a68 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	330c      	adds	r3, #12
 8002a3a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	e853 3f00 	ldrex	r3, [r3]
 8002a42:	60bb      	str	r3, [r7, #8]
   return(result);
 8002a44:	68bb      	ldr	r3, [r7, #8]
 8002a46:	f023 0310 	bic.w	r3, r3, #16
 8002a4a:	647b      	str	r3, [r7, #68]	; 0x44
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	330c      	adds	r3, #12
 8002a52:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002a54:	61ba      	str	r2, [r7, #24]
 8002a56:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002a58:	6979      	ldr	r1, [r7, #20]
 8002a5a:	69ba      	ldr	r2, [r7, #24]
 8002a5c:	e841 2300 	strex	r3, r2, [r1]
 8002a60:	613b      	str	r3, [r7, #16]
   return(result);
 8002a62:	693b      	ldr	r3, [r7, #16]
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d1e5      	bne.n	8002a34 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	2220      	movs	r2, #32
 8002a6c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	2200      	movs	r2, #0
 8002a74:	631a      	str	r2, [r3, #48]	; 0x30
}
 8002a76:	bf00      	nop
 8002a78:	3754      	adds	r7, #84	; 0x54
 8002a7a:	46bd      	mov	sp, r7
 8002a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a80:	4770      	bx	lr

08002a82 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002a82:	b580      	push	{r7, lr}
 8002a84:	b084      	sub	sp, #16
 8002a86:	af00      	add	r7, sp, #0
 8002a88:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a8e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	2200      	movs	r2, #0
 8002a94:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	2200      	movs	r2, #0
 8002a9a:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002a9c:	68f8      	ldr	r0, [r7, #12]
 8002a9e:	f7ff ff39 	bl	8002914 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002aa2:	bf00      	nop
 8002aa4:	3710      	adds	r7, #16
 8002aa6:	46bd      	mov	sp, r7
 8002aa8:	bd80      	pop	{r7, pc}

08002aaa <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8002aaa:	b480      	push	{r7}
 8002aac:	b085      	sub	sp, #20
 8002aae:	af00      	add	r7, sp, #0
 8002ab0:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ab8:	b2db      	uxtb	r3, r3
 8002aba:	2b21      	cmp	r3, #33	; 0x21
 8002abc:	d13e      	bne.n	8002b3c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	689b      	ldr	r3, [r3, #8]
 8002ac2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002ac6:	d114      	bne.n	8002af2 <UART_Transmit_IT+0x48>
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	691b      	ldr	r3, [r3, #16]
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d110      	bne.n	8002af2 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	6a1b      	ldr	r3, [r3, #32]
 8002ad4:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	881b      	ldrh	r3, [r3, #0]
 8002ada:	461a      	mov	r2, r3
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002ae4:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	6a1b      	ldr	r3, [r3, #32]
 8002aea:	1c9a      	adds	r2, r3, #2
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	621a      	str	r2, [r3, #32]
 8002af0:	e008      	b.n	8002b04 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	6a1b      	ldr	r3, [r3, #32]
 8002af6:	1c59      	adds	r1, r3, #1
 8002af8:	687a      	ldr	r2, [r7, #4]
 8002afa:	6211      	str	r1, [r2, #32]
 8002afc:	781a      	ldrb	r2, [r3, #0]
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002b08:	b29b      	uxth	r3, r3
 8002b0a:	3b01      	subs	r3, #1
 8002b0c:	b29b      	uxth	r3, r3
 8002b0e:	687a      	ldr	r2, [r7, #4]
 8002b10:	4619      	mov	r1, r3
 8002b12:	84d1      	strh	r1, [r2, #38]	; 0x26
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d10f      	bne.n	8002b38 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	68da      	ldr	r2, [r3, #12]
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002b26:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	68da      	ldr	r2, [r3, #12]
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002b36:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8002b38:	2300      	movs	r3, #0
 8002b3a:	e000      	b.n	8002b3e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8002b3c:	2302      	movs	r3, #2
  }
}
 8002b3e:	4618      	mov	r0, r3
 8002b40:	3714      	adds	r7, #20
 8002b42:	46bd      	mov	sp, r7
 8002b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b48:	4770      	bx	lr

08002b4a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8002b4a:	b580      	push	{r7, lr}
 8002b4c:	b082      	sub	sp, #8
 8002b4e:	af00      	add	r7, sp, #0
 8002b50:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	68da      	ldr	r2, [r3, #12]
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002b60:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	2220      	movs	r2, #32
 8002b66:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8002b6a:	6878      	ldr	r0, [r7, #4]
 8002b6c:	f7ff fec8 	bl	8002900 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8002b70:	2300      	movs	r3, #0
}
 8002b72:	4618      	mov	r0, r3
 8002b74:	3708      	adds	r7, #8
 8002b76:	46bd      	mov	sp, r7
 8002b78:	bd80      	pop	{r7, pc}

08002b7a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8002b7a:	b580      	push	{r7, lr}
 8002b7c:	b08c      	sub	sp, #48	; 0x30
 8002b7e:	af00      	add	r7, sp, #0
 8002b80:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002b88:	b2db      	uxtb	r3, r3
 8002b8a:	2b22      	cmp	r3, #34	; 0x22
 8002b8c:	f040 80ab 	bne.w	8002ce6 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	689b      	ldr	r3, [r3, #8]
 8002b94:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002b98:	d117      	bne.n	8002bca <UART_Receive_IT+0x50>
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	691b      	ldr	r3, [r3, #16]
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d113      	bne.n	8002bca <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8002ba2:	2300      	movs	r3, #0
 8002ba4:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002baa:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	685b      	ldr	r3, [r3, #4]
 8002bb2:	b29b      	uxth	r3, r3
 8002bb4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002bb8:	b29a      	uxth	r2, r3
 8002bba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002bbc:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bc2:	1c9a      	adds	r2, r3, #2
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	629a      	str	r2, [r3, #40]	; 0x28
 8002bc8:	e026      	b.n	8002c18 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bce:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8002bd0:	2300      	movs	r3, #0
 8002bd2:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	689b      	ldr	r3, [r3, #8]
 8002bd8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002bdc:	d007      	beq.n	8002bee <UART_Receive_IT+0x74>
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	689b      	ldr	r3, [r3, #8]
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d10a      	bne.n	8002bfc <UART_Receive_IT+0x82>
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	691b      	ldr	r3, [r3, #16]
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d106      	bne.n	8002bfc <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	685b      	ldr	r3, [r3, #4]
 8002bf4:	b2da      	uxtb	r2, r3
 8002bf6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002bf8:	701a      	strb	r2, [r3, #0]
 8002bfa:	e008      	b.n	8002c0e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	685b      	ldr	r3, [r3, #4]
 8002c02:	b2db      	uxtb	r3, r3
 8002c04:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002c08:	b2da      	uxtb	r2, r3
 8002c0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c0c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c12:	1c5a      	adds	r2, r3, #1
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002c1c:	b29b      	uxth	r3, r3
 8002c1e:	3b01      	subs	r3, #1
 8002c20:	b29b      	uxth	r3, r3
 8002c22:	687a      	ldr	r2, [r7, #4]
 8002c24:	4619      	mov	r1, r3
 8002c26:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d15a      	bne.n	8002ce2 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	68da      	ldr	r2, [r3, #12]
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	f022 0220 	bic.w	r2, r2, #32
 8002c3a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	68da      	ldr	r2, [r3, #12]
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002c4a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	695a      	ldr	r2, [r3, #20]
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	f022 0201 	bic.w	r2, r2, #1
 8002c5a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	2220      	movs	r2, #32
 8002c60:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c68:	2b01      	cmp	r3, #1
 8002c6a:	d135      	bne.n	8002cd8 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	2200      	movs	r2, #0
 8002c70:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	330c      	adds	r3, #12
 8002c78:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c7a:	697b      	ldr	r3, [r7, #20]
 8002c7c:	e853 3f00 	ldrex	r3, [r3]
 8002c80:	613b      	str	r3, [r7, #16]
   return(result);
 8002c82:	693b      	ldr	r3, [r7, #16]
 8002c84:	f023 0310 	bic.w	r3, r3, #16
 8002c88:	627b      	str	r3, [r7, #36]	; 0x24
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	330c      	adds	r3, #12
 8002c90:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c92:	623a      	str	r2, [r7, #32]
 8002c94:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c96:	69f9      	ldr	r1, [r7, #28]
 8002c98:	6a3a      	ldr	r2, [r7, #32]
 8002c9a:	e841 2300 	strex	r3, r2, [r1]
 8002c9e:	61bb      	str	r3, [r7, #24]
   return(result);
 8002ca0:	69bb      	ldr	r3, [r7, #24]
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d1e5      	bne.n	8002c72 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	f003 0310 	and.w	r3, r3, #16
 8002cb0:	2b10      	cmp	r3, #16
 8002cb2:	d10a      	bne.n	8002cca <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002cb4:	2300      	movs	r3, #0
 8002cb6:	60fb      	str	r3, [r7, #12]
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	60fb      	str	r3, [r7, #12]
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	685b      	ldr	r3, [r3, #4]
 8002cc6:	60fb      	str	r3, [r7, #12]
 8002cc8:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002cce:	4619      	mov	r1, r3
 8002cd0:	6878      	ldr	r0, [r7, #4]
 8002cd2:	f7ff fe29 	bl	8002928 <HAL_UARTEx_RxEventCallback>
 8002cd6:	e002      	b.n	8002cde <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8002cd8:	6878      	ldr	r0, [r7, #4]
 8002cda:	f7fd fcbb 	bl	8000654 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8002cde:	2300      	movs	r3, #0
 8002ce0:	e002      	b.n	8002ce8 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8002ce2:	2300      	movs	r3, #0
 8002ce4:	e000      	b.n	8002ce8 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8002ce6:	2302      	movs	r3, #2
  }
}
 8002ce8:	4618      	mov	r0, r3
 8002cea:	3730      	adds	r7, #48	; 0x30
 8002cec:	46bd      	mov	sp, r7
 8002cee:	bd80      	pop	{r7, pc}

08002cf0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002cf0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002cf4:	b0c0      	sub	sp, #256	; 0x100
 8002cf6:	af00      	add	r7, sp, #0
 8002cf8:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002cfc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	691b      	ldr	r3, [r3, #16]
 8002d04:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8002d08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002d0c:	68d9      	ldr	r1, [r3, #12]
 8002d0e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002d12:	681a      	ldr	r2, [r3, #0]
 8002d14:	ea40 0301 	orr.w	r3, r0, r1
 8002d18:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002d1a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002d1e:	689a      	ldr	r2, [r3, #8]
 8002d20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002d24:	691b      	ldr	r3, [r3, #16]
 8002d26:	431a      	orrs	r2, r3
 8002d28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002d2c:	695b      	ldr	r3, [r3, #20]
 8002d2e:	431a      	orrs	r2, r3
 8002d30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002d34:	69db      	ldr	r3, [r3, #28]
 8002d36:	4313      	orrs	r3, r2
 8002d38:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002d3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	68db      	ldr	r3, [r3, #12]
 8002d44:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8002d48:	f021 010c 	bic.w	r1, r1, #12
 8002d4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002d50:	681a      	ldr	r2, [r3, #0]
 8002d52:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8002d56:	430b      	orrs	r3, r1
 8002d58:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002d5a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	695b      	ldr	r3, [r3, #20]
 8002d62:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8002d66:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002d6a:	6999      	ldr	r1, [r3, #24]
 8002d6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002d70:	681a      	ldr	r2, [r3, #0]
 8002d72:	ea40 0301 	orr.w	r3, r0, r1
 8002d76:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002d78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002d7c:	681a      	ldr	r2, [r3, #0]
 8002d7e:	4b8f      	ldr	r3, [pc, #572]	; (8002fbc <UART_SetConfig+0x2cc>)
 8002d80:	429a      	cmp	r2, r3
 8002d82:	d005      	beq.n	8002d90 <UART_SetConfig+0xa0>
 8002d84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002d88:	681a      	ldr	r2, [r3, #0]
 8002d8a:	4b8d      	ldr	r3, [pc, #564]	; (8002fc0 <UART_SetConfig+0x2d0>)
 8002d8c:	429a      	cmp	r2, r3
 8002d8e:	d104      	bne.n	8002d9a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002d90:	f7ff fa52 	bl	8002238 <HAL_RCC_GetPCLK2Freq>
 8002d94:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8002d98:	e003      	b.n	8002da2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002d9a:	f7ff fa39 	bl	8002210 <HAL_RCC_GetPCLK1Freq>
 8002d9e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002da2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002da6:	69db      	ldr	r3, [r3, #28]
 8002da8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002dac:	f040 810c 	bne.w	8002fc8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002db0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002db4:	2200      	movs	r2, #0
 8002db6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8002dba:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8002dbe:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8002dc2:	4622      	mov	r2, r4
 8002dc4:	462b      	mov	r3, r5
 8002dc6:	1891      	adds	r1, r2, r2
 8002dc8:	65b9      	str	r1, [r7, #88]	; 0x58
 8002dca:	415b      	adcs	r3, r3
 8002dcc:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002dce:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8002dd2:	4621      	mov	r1, r4
 8002dd4:	eb12 0801 	adds.w	r8, r2, r1
 8002dd8:	4629      	mov	r1, r5
 8002dda:	eb43 0901 	adc.w	r9, r3, r1
 8002dde:	f04f 0200 	mov.w	r2, #0
 8002de2:	f04f 0300 	mov.w	r3, #0
 8002de6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002dea:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002dee:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002df2:	4690      	mov	r8, r2
 8002df4:	4699      	mov	r9, r3
 8002df6:	4623      	mov	r3, r4
 8002df8:	eb18 0303 	adds.w	r3, r8, r3
 8002dfc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8002e00:	462b      	mov	r3, r5
 8002e02:	eb49 0303 	adc.w	r3, r9, r3
 8002e06:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8002e0a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e0e:	685b      	ldr	r3, [r3, #4]
 8002e10:	2200      	movs	r2, #0
 8002e12:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8002e16:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8002e1a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8002e1e:	460b      	mov	r3, r1
 8002e20:	18db      	adds	r3, r3, r3
 8002e22:	653b      	str	r3, [r7, #80]	; 0x50
 8002e24:	4613      	mov	r3, r2
 8002e26:	eb42 0303 	adc.w	r3, r2, r3
 8002e2a:	657b      	str	r3, [r7, #84]	; 0x54
 8002e2c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8002e30:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8002e34:	f7fd fa1c 	bl	8000270 <__aeabi_uldivmod>
 8002e38:	4602      	mov	r2, r0
 8002e3a:	460b      	mov	r3, r1
 8002e3c:	4b61      	ldr	r3, [pc, #388]	; (8002fc4 <UART_SetConfig+0x2d4>)
 8002e3e:	fba3 2302 	umull	r2, r3, r3, r2
 8002e42:	095b      	lsrs	r3, r3, #5
 8002e44:	011c      	lsls	r4, r3, #4
 8002e46:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002e4a:	2200      	movs	r2, #0
 8002e4c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002e50:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8002e54:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8002e58:	4642      	mov	r2, r8
 8002e5a:	464b      	mov	r3, r9
 8002e5c:	1891      	adds	r1, r2, r2
 8002e5e:	64b9      	str	r1, [r7, #72]	; 0x48
 8002e60:	415b      	adcs	r3, r3
 8002e62:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002e64:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8002e68:	4641      	mov	r1, r8
 8002e6a:	eb12 0a01 	adds.w	sl, r2, r1
 8002e6e:	4649      	mov	r1, r9
 8002e70:	eb43 0b01 	adc.w	fp, r3, r1
 8002e74:	f04f 0200 	mov.w	r2, #0
 8002e78:	f04f 0300 	mov.w	r3, #0
 8002e7c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002e80:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002e84:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002e88:	4692      	mov	sl, r2
 8002e8a:	469b      	mov	fp, r3
 8002e8c:	4643      	mov	r3, r8
 8002e8e:	eb1a 0303 	adds.w	r3, sl, r3
 8002e92:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002e96:	464b      	mov	r3, r9
 8002e98:	eb4b 0303 	adc.w	r3, fp, r3
 8002e9c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8002ea0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ea4:	685b      	ldr	r3, [r3, #4]
 8002ea6:	2200      	movs	r2, #0
 8002ea8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002eac:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8002eb0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8002eb4:	460b      	mov	r3, r1
 8002eb6:	18db      	adds	r3, r3, r3
 8002eb8:	643b      	str	r3, [r7, #64]	; 0x40
 8002eba:	4613      	mov	r3, r2
 8002ebc:	eb42 0303 	adc.w	r3, r2, r3
 8002ec0:	647b      	str	r3, [r7, #68]	; 0x44
 8002ec2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002ec6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8002eca:	f7fd f9d1 	bl	8000270 <__aeabi_uldivmod>
 8002ece:	4602      	mov	r2, r0
 8002ed0:	460b      	mov	r3, r1
 8002ed2:	4611      	mov	r1, r2
 8002ed4:	4b3b      	ldr	r3, [pc, #236]	; (8002fc4 <UART_SetConfig+0x2d4>)
 8002ed6:	fba3 2301 	umull	r2, r3, r3, r1
 8002eda:	095b      	lsrs	r3, r3, #5
 8002edc:	2264      	movs	r2, #100	; 0x64
 8002ede:	fb02 f303 	mul.w	r3, r2, r3
 8002ee2:	1acb      	subs	r3, r1, r3
 8002ee4:	00db      	lsls	r3, r3, #3
 8002ee6:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8002eea:	4b36      	ldr	r3, [pc, #216]	; (8002fc4 <UART_SetConfig+0x2d4>)
 8002eec:	fba3 2302 	umull	r2, r3, r3, r2
 8002ef0:	095b      	lsrs	r3, r3, #5
 8002ef2:	005b      	lsls	r3, r3, #1
 8002ef4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002ef8:	441c      	add	r4, r3
 8002efa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002efe:	2200      	movs	r2, #0
 8002f00:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002f04:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8002f08:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8002f0c:	4642      	mov	r2, r8
 8002f0e:	464b      	mov	r3, r9
 8002f10:	1891      	adds	r1, r2, r2
 8002f12:	63b9      	str	r1, [r7, #56]	; 0x38
 8002f14:	415b      	adcs	r3, r3
 8002f16:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002f18:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002f1c:	4641      	mov	r1, r8
 8002f1e:	1851      	adds	r1, r2, r1
 8002f20:	6339      	str	r1, [r7, #48]	; 0x30
 8002f22:	4649      	mov	r1, r9
 8002f24:	414b      	adcs	r3, r1
 8002f26:	637b      	str	r3, [r7, #52]	; 0x34
 8002f28:	f04f 0200 	mov.w	r2, #0
 8002f2c:	f04f 0300 	mov.w	r3, #0
 8002f30:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8002f34:	4659      	mov	r1, fp
 8002f36:	00cb      	lsls	r3, r1, #3
 8002f38:	4651      	mov	r1, sl
 8002f3a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002f3e:	4651      	mov	r1, sl
 8002f40:	00ca      	lsls	r2, r1, #3
 8002f42:	4610      	mov	r0, r2
 8002f44:	4619      	mov	r1, r3
 8002f46:	4603      	mov	r3, r0
 8002f48:	4642      	mov	r2, r8
 8002f4a:	189b      	adds	r3, r3, r2
 8002f4c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002f50:	464b      	mov	r3, r9
 8002f52:	460a      	mov	r2, r1
 8002f54:	eb42 0303 	adc.w	r3, r2, r3
 8002f58:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002f5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f60:	685b      	ldr	r3, [r3, #4]
 8002f62:	2200      	movs	r2, #0
 8002f64:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8002f68:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8002f6c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8002f70:	460b      	mov	r3, r1
 8002f72:	18db      	adds	r3, r3, r3
 8002f74:	62bb      	str	r3, [r7, #40]	; 0x28
 8002f76:	4613      	mov	r3, r2
 8002f78:	eb42 0303 	adc.w	r3, r2, r3
 8002f7c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002f7e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002f82:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8002f86:	f7fd f973 	bl	8000270 <__aeabi_uldivmod>
 8002f8a:	4602      	mov	r2, r0
 8002f8c:	460b      	mov	r3, r1
 8002f8e:	4b0d      	ldr	r3, [pc, #52]	; (8002fc4 <UART_SetConfig+0x2d4>)
 8002f90:	fba3 1302 	umull	r1, r3, r3, r2
 8002f94:	095b      	lsrs	r3, r3, #5
 8002f96:	2164      	movs	r1, #100	; 0x64
 8002f98:	fb01 f303 	mul.w	r3, r1, r3
 8002f9c:	1ad3      	subs	r3, r2, r3
 8002f9e:	00db      	lsls	r3, r3, #3
 8002fa0:	3332      	adds	r3, #50	; 0x32
 8002fa2:	4a08      	ldr	r2, [pc, #32]	; (8002fc4 <UART_SetConfig+0x2d4>)
 8002fa4:	fba2 2303 	umull	r2, r3, r2, r3
 8002fa8:	095b      	lsrs	r3, r3, #5
 8002faa:	f003 0207 	and.w	r2, r3, #7
 8002fae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	4422      	add	r2, r4
 8002fb6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002fb8:	e105      	b.n	80031c6 <UART_SetConfig+0x4d6>
 8002fba:	bf00      	nop
 8002fbc:	40011000 	.word	0x40011000
 8002fc0:	40011400 	.word	0x40011400
 8002fc4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002fc8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002fcc:	2200      	movs	r2, #0
 8002fce:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8002fd2:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8002fd6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8002fda:	4642      	mov	r2, r8
 8002fdc:	464b      	mov	r3, r9
 8002fde:	1891      	adds	r1, r2, r2
 8002fe0:	6239      	str	r1, [r7, #32]
 8002fe2:	415b      	adcs	r3, r3
 8002fe4:	627b      	str	r3, [r7, #36]	; 0x24
 8002fe6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002fea:	4641      	mov	r1, r8
 8002fec:	1854      	adds	r4, r2, r1
 8002fee:	4649      	mov	r1, r9
 8002ff0:	eb43 0501 	adc.w	r5, r3, r1
 8002ff4:	f04f 0200 	mov.w	r2, #0
 8002ff8:	f04f 0300 	mov.w	r3, #0
 8002ffc:	00eb      	lsls	r3, r5, #3
 8002ffe:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003002:	00e2      	lsls	r2, r4, #3
 8003004:	4614      	mov	r4, r2
 8003006:	461d      	mov	r5, r3
 8003008:	4643      	mov	r3, r8
 800300a:	18e3      	adds	r3, r4, r3
 800300c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003010:	464b      	mov	r3, r9
 8003012:	eb45 0303 	adc.w	r3, r5, r3
 8003016:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800301a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800301e:	685b      	ldr	r3, [r3, #4]
 8003020:	2200      	movs	r2, #0
 8003022:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003026:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800302a:	f04f 0200 	mov.w	r2, #0
 800302e:	f04f 0300 	mov.w	r3, #0
 8003032:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8003036:	4629      	mov	r1, r5
 8003038:	008b      	lsls	r3, r1, #2
 800303a:	4621      	mov	r1, r4
 800303c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003040:	4621      	mov	r1, r4
 8003042:	008a      	lsls	r2, r1, #2
 8003044:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8003048:	f7fd f912 	bl	8000270 <__aeabi_uldivmod>
 800304c:	4602      	mov	r2, r0
 800304e:	460b      	mov	r3, r1
 8003050:	4b60      	ldr	r3, [pc, #384]	; (80031d4 <UART_SetConfig+0x4e4>)
 8003052:	fba3 2302 	umull	r2, r3, r3, r2
 8003056:	095b      	lsrs	r3, r3, #5
 8003058:	011c      	lsls	r4, r3, #4
 800305a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800305e:	2200      	movs	r2, #0
 8003060:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003064:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003068:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800306c:	4642      	mov	r2, r8
 800306e:	464b      	mov	r3, r9
 8003070:	1891      	adds	r1, r2, r2
 8003072:	61b9      	str	r1, [r7, #24]
 8003074:	415b      	adcs	r3, r3
 8003076:	61fb      	str	r3, [r7, #28]
 8003078:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800307c:	4641      	mov	r1, r8
 800307e:	1851      	adds	r1, r2, r1
 8003080:	6139      	str	r1, [r7, #16]
 8003082:	4649      	mov	r1, r9
 8003084:	414b      	adcs	r3, r1
 8003086:	617b      	str	r3, [r7, #20]
 8003088:	f04f 0200 	mov.w	r2, #0
 800308c:	f04f 0300 	mov.w	r3, #0
 8003090:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003094:	4659      	mov	r1, fp
 8003096:	00cb      	lsls	r3, r1, #3
 8003098:	4651      	mov	r1, sl
 800309a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800309e:	4651      	mov	r1, sl
 80030a0:	00ca      	lsls	r2, r1, #3
 80030a2:	4610      	mov	r0, r2
 80030a4:	4619      	mov	r1, r3
 80030a6:	4603      	mov	r3, r0
 80030a8:	4642      	mov	r2, r8
 80030aa:	189b      	adds	r3, r3, r2
 80030ac:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80030b0:	464b      	mov	r3, r9
 80030b2:	460a      	mov	r2, r1
 80030b4:	eb42 0303 	adc.w	r3, r2, r3
 80030b8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80030bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80030c0:	685b      	ldr	r3, [r3, #4]
 80030c2:	2200      	movs	r2, #0
 80030c4:	67bb      	str	r3, [r7, #120]	; 0x78
 80030c6:	67fa      	str	r2, [r7, #124]	; 0x7c
 80030c8:	f04f 0200 	mov.w	r2, #0
 80030cc:	f04f 0300 	mov.w	r3, #0
 80030d0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80030d4:	4649      	mov	r1, r9
 80030d6:	008b      	lsls	r3, r1, #2
 80030d8:	4641      	mov	r1, r8
 80030da:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80030de:	4641      	mov	r1, r8
 80030e0:	008a      	lsls	r2, r1, #2
 80030e2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80030e6:	f7fd f8c3 	bl	8000270 <__aeabi_uldivmod>
 80030ea:	4602      	mov	r2, r0
 80030ec:	460b      	mov	r3, r1
 80030ee:	4b39      	ldr	r3, [pc, #228]	; (80031d4 <UART_SetConfig+0x4e4>)
 80030f0:	fba3 1302 	umull	r1, r3, r3, r2
 80030f4:	095b      	lsrs	r3, r3, #5
 80030f6:	2164      	movs	r1, #100	; 0x64
 80030f8:	fb01 f303 	mul.w	r3, r1, r3
 80030fc:	1ad3      	subs	r3, r2, r3
 80030fe:	011b      	lsls	r3, r3, #4
 8003100:	3332      	adds	r3, #50	; 0x32
 8003102:	4a34      	ldr	r2, [pc, #208]	; (80031d4 <UART_SetConfig+0x4e4>)
 8003104:	fba2 2303 	umull	r2, r3, r2, r3
 8003108:	095b      	lsrs	r3, r3, #5
 800310a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800310e:	441c      	add	r4, r3
 8003110:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003114:	2200      	movs	r2, #0
 8003116:	673b      	str	r3, [r7, #112]	; 0x70
 8003118:	677a      	str	r2, [r7, #116]	; 0x74
 800311a:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800311e:	4642      	mov	r2, r8
 8003120:	464b      	mov	r3, r9
 8003122:	1891      	adds	r1, r2, r2
 8003124:	60b9      	str	r1, [r7, #8]
 8003126:	415b      	adcs	r3, r3
 8003128:	60fb      	str	r3, [r7, #12]
 800312a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800312e:	4641      	mov	r1, r8
 8003130:	1851      	adds	r1, r2, r1
 8003132:	6039      	str	r1, [r7, #0]
 8003134:	4649      	mov	r1, r9
 8003136:	414b      	adcs	r3, r1
 8003138:	607b      	str	r3, [r7, #4]
 800313a:	f04f 0200 	mov.w	r2, #0
 800313e:	f04f 0300 	mov.w	r3, #0
 8003142:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003146:	4659      	mov	r1, fp
 8003148:	00cb      	lsls	r3, r1, #3
 800314a:	4651      	mov	r1, sl
 800314c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003150:	4651      	mov	r1, sl
 8003152:	00ca      	lsls	r2, r1, #3
 8003154:	4610      	mov	r0, r2
 8003156:	4619      	mov	r1, r3
 8003158:	4603      	mov	r3, r0
 800315a:	4642      	mov	r2, r8
 800315c:	189b      	adds	r3, r3, r2
 800315e:	66bb      	str	r3, [r7, #104]	; 0x68
 8003160:	464b      	mov	r3, r9
 8003162:	460a      	mov	r2, r1
 8003164:	eb42 0303 	adc.w	r3, r2, r3
 8003168:	66fb      	str	r3, [r7, #108]	; 0x6c
 800316a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800316e:	685b      	ldr	r3, [r3, #4]
 8003170:	2200      	movs	r2, #0
 8003172:	663b      	str	r3, [r7, #96]	; 0x60
 8003174:	667a      	str	r2, [r7, #100]	; 0x64
 8003176:	f04f 0200 	mov.w	r2, #0
 800317a:	f04f 0300 	mov.w	r3, #0
 800317e:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8003182:	4649      	mov	r1, r9
 8003184:	008b      	lsls	r3, r1, #2
 8003186:	4641      	mov	r1, r8
 8003188:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800318c:	4641      	mov	r1, r8
 800318e:	008a      	lsls	r2, r1, #2
 8003190:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8003194:	f7fd f86c 	bl	8000270 <__aeabi_uldivmod>
 8003198:	4602      	mov	r2, r0
 800319a:	460b      	mov	r3, r1
 800319c:	4b0d      	ldr	r3, [pc, #52]	; (80031d4 <UART_SetConfig+0x4e4>)
 800319e:	fba3 1302 	umull	r1, r3, r3, r2
 80031a2:	095b      	lsrs	r3, r3, #5
 80031a4:	2164      	movs	r1, #100	; 0x64
 80031a6:	fb01 f303 	mul.w	r3, r1, r3
 80031aa:	1ad3      	subs	r3, r2, r3
 80031ac:	011b      	lsls	r3, r3, #4
 80031ae:	3332      	adds	r3, #50	; 0x32
 80031b0:	4a08      	ldr	r2, [pc, #32]	; (80031d4 <UART_SetConfig+0x4e4>)
 80031b2:	fba2 2303 	umull	r2, r3, r2, r3
 80031b6:	095b      	lsrs	r3, r3, #5
 80031b8:	f003 020f 	and.w	r2, r3, #15
 80031bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	4422      	add	r2, r4
 80031c4:	609a      	str	r2, [r3, #8]
}
 80031c6:	bf00      	nop
 80031c8:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80031cc:	46bd      	mov	sp, r7
 80031ce:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80031d2:	bf00      	nop
 80031d4:	51eb851f 	.word	0x51eb851f

080031d8 <__errno>:
 80031d8:	4b01      	ldr	r3, [pc, #4]	; (80031e0 <__errno+0x8>)
 80031da:	6818      	ldr	r0, [r3, #0]
 80031dc:	4770      	bx	lr
 80031de:	bf00      	nop
 80031e0:	20000020 	.word	0x20000020

080031e4 <__libc_init_array>:
 80031e4:	b570      	push	{r4, r5, r6, lr}
 80031e6:	4d0d      	ldr	r5, [pc, #52]	; (800321c <__libc_init_array+0x38>)
 80031e8:	4c0d      	ldr	r4, [pc, #52]	; (8003220 <__libc_init_array+0x3c>)
 80031ea:	1b64      	subs	r4, r4, r5
 80031ec:	10a4      	asrs	r4, r4, #2
 80031ee:	2600      	movs	r6, #0
 80031f0:	42a6      	cmp	r6, r4
 80031f2:	d109      	bne.n	8003208 <__libc_init_array+0x24>
 80031f4:	4d0b      	ldr	r5, [pc, #44]	; (8003224 <__libc_init_array+0x40>)
 80031f6:	4c0c      	ldr	r4, [pc, #48]	; (8003228 <__libc_init_array+0x44>)
 80031f8:	f000 fc8e 	bl	8003b18 <_init>
 80031fc:	1b64      	subs	r4, r4, r5
 80031fe:	10a4      	asrs	r4, r4, #2
 8003200:	2600      	movs	r6, #0
 8003202:	42a6      	cmp	r6, r4
 8003204:	d105      	bne.n	8003212 <__libc_init_array+0x2e>
 8003206:	bd70      	pop	{r4, r5, r6, pc}
 8003208:	f855 3b04 	ldr.w	r3, [r5], #4
 800320c:	4798      	blx	r3
 800320e:	3601      	adds	r6, #1
 8003210:	e7ee      	b.n	80031f0 <__libc_init_array+0xc>
 8003212:	f855 3b04 	ldr.w	r3, [r5], #4
 8003216:	4798      	blx	r3
 8003218:	3601      	adds	r6, #1
 800321a:	e7f2      	b.n	8003202 <__libc_init_array+0x1e>
 800321c:	08003bc8 	.word	0x08003bc8
 8003220:	08003bc8 	.word	0x08003bc8
 8003224:	08003bc8 	.word	0x08003bc8
 8003228:	08003bcc 	.word	0x08003bcc

0800322c <memset>:
 800322c:	4402      	add	r2, r0
 800322e:	4603      	mov	r3, r0
 8003230:	4293      	cmp	r3, r2
 8003232:	d100      	bne.n	8003236 <memset+0xa>
 8003234:	4770      	bx	lr
 8003236:	f803 1b01 	strb.w	r1, [r3], #1
 800323a:	e7f9      	b.n	8003230 <memset+0x4>

0800323c <siprintf>:
 800323c:	b40e      	push	{r1, r2, r3}
 800323e:	b500      	push	{lr}
 8003240:	b09c      	sub	sp, #112	; 0x70
 8003242:	ab1d      	add	r3, sp, #116	; 0x74
 8003244:	9002      	str	r0, [sp, #8]
 8003246:	9006      	str	r0, [sp, #24]
 8003248:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800324c:	4809      	ldr	r0, [pc, #36]	; (8003274 <siprintf+0x38>)
 800324e:	9107      	str	r1, [sp, #28]
 8003250:	9104      	str	r1, [sp, #16]
 8003252:	4909      	ldr	r1, [pc, #36]	; (8003278 <siprintf+0x3c>)
 8003254:	f853 2b04 	ldr.w	r2, [r3], #4
 8003258:	9105      	str	r1, [sp, #20]
 800325a:	6800      	ldr	r0, [r0, #0]
 800325c:	9301      	str	r3, [sp, #4]
 800325e:	a902      	add	r1, sp, #8
 8003260:	f000 f868 	bl	8003334 <_svfiprintf_r>
 8003264:	9b02      	ldr	r3, [sp, #8]
 8003266:	2200      	movs	r2, #0
 8003268:	701a      	strb	r2, [r3, #0]
 800326a:	b01c      	add	sp, #112	; 0x70
 800326c:	f85d eb04 	ldr.w	lr, [sp], #4
 8003270:	b003      	add	sp, #12
 8003272:	4770      	bx	lr
 8003274:	20000020 	.word	0x20000020
 8003278:	ffff0208 	.word	0xffff0208

0800327c <__ssputs_r>:
 800327c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003280:	688e      	ldr	r6, [r1, #8]
 8003282:	429e      	cmp	r6, r3
 8003284:	4682      	mov	sl, r0
 8003286:	460c      	mov	r4, r1
 8003288:	4690      	mov	r8, r2
 800328a:	461f      	mov	r7, r3
 800328c:	d838      	bhi.n	8003300 <__ssputs_r+0x84>
 800328e:	898a      	ldrh	r2, [r1, #12]
 8003290:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8003294:	d032      	beq.n	80032fc <__ssputs_r+0x80>
 8003296:	6825      	ldr	r5, [r4, #0]
 8003298:	6909      	ldr	r1, [r1, #16]
 800329a:	eba5 0901 	sub.w	r9, r5, r1
 800329e:	6965      	ldr	r5, [r4, #20]
 80032a0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80032a4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80032a8:	3301      	adds	r3, #1
 80032aa:	444b      	add	r3, r9
 80032ac:	106d      	asrs	r5, r5, #1
 80032ae:	429d      	cmp	r5, r3
 80032b0:	bf38      	it	cc
 80032b2:	461d      	movcc	r5, r3
 80032b4:	0553      	lsls	r3, r2, #21
 80032b6:	d531      	bpl.n	800331c <__ssputs_r+0xa0>
 80032b8:	4629      	mov	r1, r5
 80032ba:	f000 fb63 	bl	8003984 <_malloc_r>
 80032be:	4606      	mov	r6, r0
 80032c0:	b950      	cbnz	r0, 80032d8 <__ssputs_r+0x5c>
 80032c2:	230c      	movs	r3, #12
 80032c4:	f8ca 3000 	str.w	r3, [sl]
 80032c8:	89a3      	ldrh	r3, [r4, #12]
 80032ca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80032ce:	81a3      	strh	r3, [r4, #12]
 80032d0:	f04f 30ff 	mov.w	r0, #4294967295
 80032d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80032d8:	6921      	ldr	r1, [r4, #16]
 80032da:	464a      	mov	r2, r9
 80032dc:	f000 fabe 	bl	800385c <memcpy>
 80032e0:	89a3      	ldrh	r3, [r4, #12]
 80032e2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80032e6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80032ea:	81a3      	strh	r3, [r4, #12]
 80032ec:	6126      	str	r6, [r4, #16]
 80032ee:	6165      	str	r5, [r4, #20]
 80032f0:	444e      	add	r6, r9
 80032f2:	eba5 0509 	sub.w	r5, r5, r9
 80032f6:	6026      	str	r6, [r4, #0]
 80032f8:	60a5      	str	r5, [r4, #8]
 80032fa:	463e      	mov	r6, r7
 80032fc:	42be      	cmp	r6, r7
 80032fe:	d900      	bls.n	8003302 <__ssputs_r+0x86>
 8003300:	463e      	mov	r6, r7
 8003302:	6820      	ldr	r0, [r4, #0]
 8003304:	4632      	mov	r2, r6
 8003306:	4641      	mov	r1, r8
 8003308:	f000 fab6 	bl	8003878 <memmove>
 800330c:	68a3      	ldr	r3, [r4, #8]
 800330e:	1b9b      	subs	r3, r3, r6
 8003310:	60a3      	str	r3, [r4, #8]
 8003312:	6823      	ldr	r3, [r4, #0]
 8003314:	4433      	add	r3, r6
 8003316:	6023      	str	r3, [r4, #0]
 8003318:	2000      	movs	r0, #0
 800331a:	e7db      	b.n	80032d4 <__ssputs_r+0x58>
 800331c:	462a      	mov	r2, r5
 800331e:	f000 fba5 	bl	8003a6c <_realloc_r>
 8003322:	4606      	mov	r6, r0
 8003324:	2800      	cmp	r0, #0
 8003326:	d1e1      	bne.n	80032ec <__ssputs_r+0x70>
 8003328:	6921      	ldr	r1, [r4, #16]
 800332a:	4650      	mov	r0, sl
 800332c:	f000 fabe 	bl	80038ac <_free_r>
 8003330:	e7c7      	b.n	80032c2 <__ssputs_r+0x46>
	...

08003334 <_svfiprintf_r>:
 8003334:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003338:	4698      	mov	r8, r3
 800333a:	898b      	ldrh	r3, [r1, #12]
 800333c:	061b      	lsls	r3, r3, #24
 800333e:	b09d      	sub	sp, #116	; 0x74
 8003340:	4607      	mov	r7, r0
 8003342:	460d      	mov	r5, r1
 8003344:	4614      	mov	r4, r2
 8003346:	d50e      	bpl.n	8003366 <_svfiprintf_r+0x32>
 8003348:	690b      	ldr	r3, [r1, #16]
 800334a:	b963      	cbnz	r3, 8003366 <_svfiprintf_r+0x32>
 800334c:	2140      	movs	r1, #64	; 0x40
 800334e:	f000 fb19 	bl	8003984 <_malloc_r>
 8003352:	6028      	str	r0, [r5, #0]
 8003354:	6128      	str	r0, [r5, #16]
 8003356:	b920      	cbnz	r0, 8003362 <_svfiprintf_r+0x2e>
 8003358:	230c      	movs	r3, #12
 800335a:	603b      	str	r3, [r7, #0]
 800335c:	f04f 30ff 	mov.w	r0, #4294967295
 8003360:	e0d1      	b.n	8003506 <_svfiprintf_r+0x1d2>
 8003362:	2340      	movs	r3, #64	; 0x40
 8003364:	616b      	str	r3, [r5, #20]
 8003366:	2300      	movs	r3, #0
 8003368:	9309      	str	r3, [sp, #36]	; 0x24
 800336a:	2320      	movs	r3, #32
 800336c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003370:	f8cd 800c 	str.w	r8, [sp, #12]
 8003374:	2330      	movs	r3, #48	; 0x30
 8003376:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8003520 <_svfiprintf_r+0x1ec>
 800337a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800337e:	f04f 0901 	mov.w	r9, #1
 8003382:	4623      	mov	r3, r4
 8003384:	469a      	mov	sl, r3
 8003386:	f813 2b01 	ldrb.w	r2, [r3], #1
 800338a:	b10a      	cbz	r2, 8003390 <_svfiprintf_r+0x5c>
 800338c:	2a25      	cmp	r2, #37	; 0x25
 800338e:	d1f9      	bne.n	8003384 <_svfiprintf_r+0x50>
 8003390:	ebba 0b04 	subs.w	fp, sl, r4
 8003394:	d00b      	beq.n	80033ae <_svfiprintf_r+0x7a>
 8003396:	465b      	mov	r3, fp
 8003398:	4622      	mov	r2, r4
 800339a:	4629      	mov	r1, r5
 800339c:	4638      	mov	r0, r7
 800339e:	f7ff ff6d 	bl	800327c <__ssputs_r>
 80033a2:	3001      	adds	r0, #1
 80033a4:	f000 80aa 	beq.w	80034fc <_svfiprintf_r+0x1c8>
 80033a8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80033aa:	445a      	add	r2, fp
 80033ac:	9209      	str	r2, [sp, #36]	; 0x24
 80033ae:	f89a 3000 	ldrb.w	r3, [sl]
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	f000 80a2 	beq.w	80034fc <_svfiprintf_r+0x1c8>
 80033b8:	2300      	movs	r3, #0
 80033ba:	f04f 32ff 	mov.w	r2, #4294967295
 80033be:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80033c2:	f10a 0a01 	add.w	sl, sl, #1
 80033c6:	9304      	str	r3, [sp, #16]
 80033c8:	9307      	str	r3, [sp, #28]
 80033ca:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80033ce:	931a      	str	r3, [sp, #104]	; 0x68
 80033d0:	4654      	mov	r4, sl
 80033d2:	2205      	movs	r2, #5
 80033d4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80033d8:	4851      	ldr	r0, [pc, #324]	; (8003520 <_svfiprintf_r+0x1ec>)
 80033da:	f7fc fef9 	bl	80001d0 <memchr>
 80033de:	9a04      	ldr	r2, [sp, #16]
 80033e0:	b9d8      	cbnz	r0, 800341a <_svfiprintf_r+0xe6>
 80033e2:	06d0      	lsls	r0, r2, #27
 80033e4:	bf44      	itt	mi
 80033e6:	2320      	movmi	r3, #32
 80033e8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80033ec:	0711      	lsls	r1, r2, #28
 80033ee:	bf44      	itt	mi
 80033f0:	232b      	movmi	r3, #43	; 0x2b
 80033f2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80033f6:	f89a 3000 	ldrb.w	r3, [sl]
 80033fa:	2b2a      	cmp	r3, #42	; 0x2a
 80033fc:	d015      	beq.n	800342a <_svfiprintf_r+0xf6>
 80033fe:	9a07      	ldr	r2, [sp, #28]
 8003400:	4654      	mov	r4, sl
 8003402:	2000      	movs	r0, #0
 8003404:	f04f 0c0a 	mov.w	ip, #10
 8003408:	4621      	mov	r1, r4
 800340a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800340e:	3b30      	subs	r3, #48	; 0x30
 8003410:	2b09      	cmp	r3, #9
 8003412:	d94e      	bls.n	80034b2 <_svfiprintf_r+0x17e>
 8003414:	b1b0      	cbz	r0, 8003444 <_svfiprintf_r+0x110>
 8003416:	9207      	str	r2, [sp, #28]
 8003418:	e014      	b.n	8003444 <_svfiprintf_r+0x110>
 800341a:	eba0 0308 	sub.w	r3, r0, r8
 800341e:	fa09 f303 	lsl.w	r3, r9, r3
 8003422:	4313      	orrs	r3, r2
 8003424:	9304      	str	r3, [sp, #16]
 8003426:	46a2      	mov	sl, r4
 8003428:	e7d2      	b.n	80033d0 <_svfiprintf_r+0x9c>
 800342a:	9b03      	ldr	r3, [sp, #12]
 800342c:	1d19      	adds	r1, r3, #4
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	9103      	str	r1, [sp, #12]
 8003432:	2b00      	cmp	r3, #0
 8003434:	bfbb      	ittet	lt
 8003436:	425b      	neglt	r3, r3
 8003438:	f042 0202 	orrlt.w	r2, r2, #2
 800343c:	9307      	strge	r3, [sp, #28]
 800343e:	9307      	strlt	r3, [sp, #28]
 8003440:	bfb8      	it	lt
 8003442:	9204      	strlt	r2, [sp, #16]
 8003444:	7823      	ldrb	r3, [r4, #0]
 8003446:	2b2e      	cmp	r3, #46	; 0x2e
 8003448:	d10c      	bne.n	8003464 <_svfiprintf_r+0x130>
 800344a:	7863      	ldrb	r3, [r4, #1]
 800344c:	2b2a      	cmp	r3, #42	; 0x2a
 800344e:	d135      	bne.n	80034bc <_svfiprintf_r+0x188>
 8003450:	9b03      	ldr	r3, [sp, #12]
 8003452:	1d1a      	adds	r2, r3, #4
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	9203      	str	r2, [sp, #12]
 8003458:	2b00      	cmp	r3, #0
 800345a:	bfb8      	it	lt
 800345c:	f04f 33ff 	movlt.w	r3, #4294967295
 8003460:	3402      	adds	r4, #2
 8003462:	9305      	str	r3, [sp, #20]
 8003464:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8003530 <_svfiprintf_r+0x1fc>
 8003468:	7821      	ldrb	r1, [r4, #0]
 800346a:	2203      	movs	r2, #3
 800346c:	4650      	mov	r0, sl
 800346e:	f7fc feaf 	bl	80001d0 <memchr>
 8003472:	b140      	cbz	r0, 8003486 <_svfiprintf_r+0x152>
 8003474:	2340      	movs	r3, #64	; 0x40
 8003476:	eba0 000a 	sub.w	r0, r0, sl
 800347a:	fa03 f000 	lsl.w	r0, r3, r0
 800347e:	9b04      	ldr	r3, [sp, #16]
 8003480:	4303      	orrs	r3, r0
 8003482:	3401      	adds	r4, #1
 8003484:	9304      	str	r3, [sp, #16]
 8003486:	f814 1b01 	ldrb.w	r1, [r4], #1
 800348a:	4826      	ldr	r0, [pc, #152]	; (8003524 <_svfiprintf_r+0x1f0>)
 800348c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003490:	2206      	movs	r2, #6
 8003492:	f7fc fe9d 	bl	80001d0 <memchr>
 8003496:	2800      	cmp	r0, #0
 8003498:	d038      	beq.n	800350c <_svfiprintf_r+0x1d8>
 800349a:	4b23      	ldr	r3, [pc, #140]	; (8003528 <_svfiprintf_r+0x1f4>)
 800349c:	bb1b      	cbnz	r3, 80034e6 <_svfiprintf_r+0x1b2>
 800349e:	9b03      	ldr	r3, [sp, #12]
 80034a0:	3307      	adds	r3, #7
 80034a2:	f023 0307 	bic.w	r3, r3, #7
 80034a6:	3308      	adds	r3, #8
 80034a8:	9303      	str	r3, [sp, #12]
 80034aa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80034ac:	4433      	add	r3, r6
 80034ae:	9309      	str	r3, [sp, #36]	; 0x24
 80034b0:	e767      	b.n	8003382 <_svfiprintf_r+0x4e>
 80034b2:	fb0c 3202 	mla	r2, ip, r2, r3
 80034b6:	460c      	mov	r4, r1
 80034b8:	2001      	movs	r0, #1
 80034ba:	e7a5      	b.n	8003408 <_svfiprintf_r+0xd4>
 80034bc:	2300      	movs	r3, #0
 80034be:	3401      	adds	r4, #1
 80034c0:	9305      	str	r3, [sp, #20]
 80034c2:	4619      	mov	r1, r3
 80034c4:	f04f 0c0a 	mov.w	ip, #10
 80034c8:	4620      	mov	r0, r4
 80034ca:	f810 2b01 	ldrb.w	r2, [r0], #1
 80034ce:	3a30      	subs	r2, #48	; 0x30
 80034d0:	2a09      	cmp	r2, #9
 80034d2:	d903      	bls.n	80034dc <_svfiprintf_r+0x1a8>
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d0c5      	beq.n	8003464 <_svfiprintf_r+0x130>
 80034d8:	9105      	str	r1, [sp, #20]
 80034da:	e7c3      	b.n	8003464 <_svfiprintf_r+0x130>
 80034dc:	fb0c 2101 	mla	r1, ip, r1, r2
 80034e0:	4604      	mov	r4, r0
 80034e2:	2301      	movs	r3, #1
 80034e4:	e7f0      	b.n	80034c8 <_svfiprintf_r+0x194>
 80034e6:	ab03      	add	r3, sp, #12
 80034e8:	9300      	str	r3, [sp, #0]
 80034ea:	462a      	mov	r2, r5
 80034ec:	4b0f      	ldr	r3, [pc, #60]	; (800352c <_svfiprintf_r+0x1f8>)
 80034ee:	a904      	add	r1, sp, #16
 80034f0:	4638      	mov	r0, r7
 80034f2:	f3af 8000 	nop.w
 80034f6:	1c42      	adds	r2, r0, #1
 80034f8:	4606      	mov	r6, r0
 80034fa:	d1d6      	bne.n	80034aa <_svfiprintf_r+0x176>
 80034fc:	89ab      	ldrh	r3, [r5, #12]
 80034fe:	065b      	lsls	r3, r3, #25
 8003500:	f53f af2c 	bmi.w	800335c <_svfiprintf_r+0x28>
 8003504:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003506:	b01d      	add	sp, #116	; 0x74
 8003508:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800350c:	ab03      	add	r3, sp, #12
 800350e:	9300      	str	r3, [sp, #0]
 8003510:	462a      	mov	r2, r5
 8003512:	4b06      	ldr	r3, [pc, #24]	; (800352c <_svfiprintf_r+0x1f8>)
 8003514:	a904      	add	r1, sp, #16
 8003516:	4638      	mov	r0, r7
 8003518:	f000 f87a 	bl	8003610 <_printf_i>
 800351c:	e7eb      	b.n	80034f6 <_svfiprintf_r+0x1c2>
 800351e:	bf00      	nop
 8003520:	08003b8c 	.word	0x08003b8c
 8003524:	08003b96 	.word	0x08003b96
 8003528:	00000000 	.word	0x00000000
 800352c:	0800327d 	.word	0x0800327d
 8003530:	08003b92 	.word	0x08003b92

08003534 <_printf_common>:
 8003534:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003538:	4616      	mov	r6, r2
 800353a:	4699      	mov	r9, r3
 800353c:	688a      	ldr	r2, [r1, #8]
 800353e:	690b      	ldr	r3, [r1, #16]
 8003540:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003544:	4293      	cmp	r3, r2
 8003546:	bfb8      	it	lt
 8003548:	4613      	movlt	r3, r2
 800354a:	6033      	str	r3, [r6, #0]
 800354c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003550:	4607      	mov	r7, r0
 8003552:	460c      	mov	r4, r1
 8003554:	b10a      	cbz	r2, 800355a <_printf_common+0x26>
 8003556:	3301      	adds	r3, #1
 8003558:	6033      	str	r3, [r6, #0]
 800355a:	6823      	ldr	r3, [r4, #0]
 800355c:	0699      	lsls	r1, r3, #26
 800355e:	bf42      	ittt	mi
 8003560:	6833      	ldrmi	r3, [r6, #0]
 8003562:	3302      	addmi	r3, #2
 8003564:	6033      	strmi	r3, [r6, #0]
 8003566:	6825      	ldr	r5, [r4, #0]
 8003568:	f015 0506 	ands.w	r5, r5, #6
 800356c:	d106      	bne.n	800357c <_printf_common+0x48>
 800356e:	f104 0a19 	add.w	sl, r4, #25
 8003572:	68e3      	ldr	r3, [r4, #12]
 8003574:	6832      	ldr	r2, [r6, #0]
 8003576:	1a9b      	subs	r3, r3, r2
 8003578:	42ab      	cmp	r3, r5
 800357a:	dc26      	bgt.n	80035ca <_printf_common+0x96>
 800357c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003580:	1e13      	subs	r3, r2, #0
 8003582:	6822      	ldr	r2, [r4, #0]
 8003584:	bf18      	it	ne
 8003586:	2301      	movne	r3, #1
 8003588:	0692      	lsls	r2, r2, #26
 800358a:	d42b      	bmi.n	80035e4 <_printf_common+0xb0>
 800358c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003590:	4649      	mov	r1, r9
 8003592:	4638      	mov	r0, r7
 8003594:	47c0      	blx	r8
 8003596:	3001      	adds	r0, #1
 8003598:	d01e      	beq.n	80035d8 <_printf_common+0xa4>
 800359a:	6823      	ldr	r3, [r4, #0]
 800359c:	68e5      	ldr	r5, [r4, #12]
 800359e:	6832      	ldr	r2, [r6, #0]
 80035a0:	f003 0306 	and.w	r3, r3, #6
 80035a4:	2b04      	cmp	r3, #4
 80035a6:	bf08      	it	eq
 80035a8:	1aad      	subeq	r5, r5, r2
 80035aa:	68a3      	ldr	r3, [r4, #8]
 80035ac:	6922      	ldr	r2, [r4, #16]
 80035ae:	bf0c      	ite	eq
 80035b0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80035b4:	2500      	movne	r5, #0
 80035b6:	4293      	cmp	r3, r2
 80035b8:	bfc4      	itt	gt
 80035ba:	1a9b      	subgt	r3, r3, r2
 80035bc:	18ed      	addgt	r5, r5, r3
 80035be:	2600      	movs	r6, #0
 80035c0:	341a      	adds	r4, #26
 80035c2:	42b5      	cmp	r5, r6
 80035c4:	d11a      	bne.n	80035fc <_printf_common+0xc8>
 80035c6:	2000      	movs	r0, #0
 80035c8:	e008      	b.n	80035dc <_printf_common+0xa8>
 80035ca:	2301      	movs	r3, #1
 80035cc:	4652      	mov	r2, sl
 80035ce:	4649      	mov	r1, r9
 80035d0:	4638      	mov	r0, r7
 80035d2:	47c0      	blx	r8
 80035d4:	3001      	adds	r0, #1
 80035d6:	d103      	bne.n	80035e0 <_printf_common+0xac>
 80035d8:	f04f 30ff 	mov.w	r0, #4294967295
 80035dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80035e0:	3501      	adds	r5, #1
 80035e2:	e7c6      	b.n	8003572 <_printf_common+0x3e>
 80035e4:	18e1      	adds	r1, r4, r3
 80035e6:	1c5a      	adds	r2, r3, #1
 80035e8:	2030      	movs	r0, #48	; 0x30
 80035ea:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80035ee:	4422      	add	r2, r4
 80035f0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80035f4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80035f8:	3302      	adds	r3, #2
 80035fa:	e7c7      	b.n	800358c <_printf_common+0x58>
 80035fc:	2301      	movs	r3, #1
 80035fe:	4622      	mov	r2, r4
 8003600:	4649      	mov	r1, r9
 8003602:	4638      	mov	r0, r7
 8003604:	47c0      	blx	r8
 8003606:	3001      	adds	r0, #1
 8003608:	d0e6      	beq.n	80035d8 <_printf_common+0xa4>
 800360a:	3601      	adds	r6, #1
 800360c:	e7d9      	b.n	80035c2 <_printf_common+0x8e>
	...

08003610 <_printf_i>:
 8003610:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003614:	7e0f      	ldrb	r7, [r1, #24]
 8003616:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8003618:	2f78      	cmp	r7, #120	; 0x78
 800361a:	4691      	mov	r9, r2
 800361c:	4680      	mov	r8, r0
 800361e:	460c      	mov	r4, r1
 8003620:	469a      	mov	sl, r3
 8003622:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8003626:	d807      	bhi.n	8003638 <_printf_i+0x28>
 8003628:	2f62      	cmp	r7, #98	; 0x62
 800362a:	d80a      	bhi.n	8003642 <_printf_i+0x32>
 800362c:	2f00      	cmp	r7, #0
 800362e:	f000 80d8 	beq.w	80037e2 <_printf_i+0x1d2>
 8003632:	2f58      	cmp	r7, #88	; 0x58
 8003634:	f000 80a3 	beq.w	800377e <_printf_i+0x16e>
 8003638:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800363c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003640:	e03a      	b.n	80036b8 <_printf_i+0xa8>
 8003642:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003646:	2b15      	cmp	r3, #21
 8003648:	d8f6      	bhi.n	8003638 <_printf_i+0x28>
 800364a:	a101      	add	r1, pc, #4	; (adr r1, 8003650 <_printf_i+0x40>)
 800364c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003650:	080036a9 	.word	0x080036a9
 8003654:	080036bd 	.word	0x080036bd
 8003658:	08003639 	.word	0x08003639
 800365c:	08003639 	.word	0x08003639
 8003660:	08003639 	.word	0x08003639
 8003664:	08003639 	.word	0x08003639
 8003668:	080036bd 	.word	0x080036bd
 800366c:	08003639 	.word	0x08003639
 8003670:	08003639 	.word	0x08003639
 8003674:	08003639 	.word	0x08003639
 8003678:	08003639 	.word	0x08003639
 800367c:	080037c9 	.word	0x080037c9
 8003680:	080036ed 	.word	0x080036ed
 8003684:	080037ab 	.word	0x080037ab
 8003688:	08003639 	.word	0x08003639
 800368c:	08003639 	.word	0x08003639
 8003690:	080037eb 	.word	0x080037eb
 8003694:	08003639 	.word	0x08003639
 8003698:	080036ed 	.word	0x080036ed
 800369c:	08003639 	.word	0x08003639
 80036a0:	08003639 	.word	0x08003639
 80036a4:	080037b3 	.word	0x080037b3
 80036a8:	682b      	ldr	r3, [r5, #0]
 80036aa:	1d1a      	adds	r2, r3, #4
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	602a      	str	r2, [r5, #0]
 80036b0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80036b4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80036b8:	2301      	movs	r3, #1
 80036ba:	e0a3      	b.n	8003804 <_printf_i+0x1f4>
 80036bc:	6820      	ldr	r0, [r4, #0]
 80036be:	6829      	ldr	r1, [r5, #0]
 80036c0:	0606      	lsls	r6, r0, #24
 80036c2:	f101 0304 	add.w	r3, r1, #4
 80036c6:	d50a      	bpl.n	80036de <_printf_i+0xce>
 80036c8:	680e      	ldr	r6, [r1, #0]
 80036ca:	602b      	str	r3, [r5, #0]
 80036cc:	2e00      	cmp	r6, #0
 80036ce:	da03      	bge.n	80036d8 <_printf_i+0xc8>
 80036d0:	232d      	movs	r3, #45	; 0x2d
 80036d2:	4276      	negs	r6, r6
 80036d4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80036d8:	485e      	ldr	r0, [pc, #376]	; (8003854 <_printf_i+0x244>)
 80036da:	230a      	movs	r3, #10
 80036dc:	e019      	b.n	8003712 <_printf_i+0x102>
 80036de:	680e      	ldr	r6, [r1, #0]
 80036e0:	602b      	str	r3, [r5, #0]
 80036e2:	f010 0f40 	tst.w	r0, #64	; 0x40
 80036e6:	bf18      	it	ne
 80036e8:	b236      	sxthne	r6, r6
 80036ea:	e7ef      	b.n	80036cc <_printf_i+0xbc>
 80036ec:	682b      	ldr	r3, [r5, #0]
 80036ee:	6820      	ldr	r0, [r4, #0]
 80036f0:	1d19      	adds	r1, r3, #4
 80036f2:	6029      	str	r1, [r5, #0]
 80036f4:	0601      	lsls	r1, r0, #24
 80036f6:	d501      	bpl.n	80036fc <_printf_i+0xec>
 80036f8:	681e      	ldr	r6, [r3, #0]
 80036fa:	e002      	b.n	8003702 <_printf_i+0xf2>
 80036fc:	0646      	lsls	r6, r0, #25
 80036fe:	d5fb      	bpl.n	80036f8 <_printf_i+0xe8>
 8003700:	881e      	ldrh	r6, [r3, #0]
 8003702:	4854      	ldr	r0, [pc, #336]	; (8003854 <_printf_i+0x244>)
 8003704:	2f6f      	cmp	r7, #111	; 0x6f
 8003706:	bf0c      	ite	eq
 8003708:	2308      	moveq	r3, #8
 800370a:	230a      	movne	r3, #10
 800370c:	2100      	movs	r1, #0
 800370e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003712:	6865      	ldr	r5, [r4, #4]
 8003714:	60a5      	str	r5, [r4, #8]
 8003716:	2d00      	cmp	r5, #0
 8003718:	bfa2      	ittt	ge
 800371a:	6821      	ldrge	r1, [r4, #0]
 800371c:	f021 0104 	bicge.w	r1, r1, #4
 8003720:	6021      	strge	r1, [r4, #0]
 8003722:	b90e      	cbnz	r6, 8003728 <_printf_i+0x118>
 8003724:	2d00      	cmp	r5, #0
 8003726:	d04d      	beq.n	80037c4 <_printf_i+0x1b4>
 8003728:	4615      	mov	r5, r2
 800372a:	fbb6 f1f3 	udiv	r1, r6, r3
 800372e:	fb03 6711 	mls	r7, r3, r1, r6
 8003732:	5dc7      	ldrb	r7, [r0, r7]
 8003734:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8003738:	4637      	mov	r7, r6
 800373a:	42bb      	cmp	r3, r7
 800373c:	460e      	mov	r6, r1
 800373e:	d9f4      	bls.n	800372a <_printf_i+0x11a>
 8003740:	2b08      	cmp	r3, #8
 8003742:	d10b      	bne.n	800375c <_printf_i+0x14c>
 8003744:	6823      	ldr	r3, [r4, #0]
 8003746:	07de      	lsls	r6, r3, #31
 8003748:	d508      	bpl.n	800375c <_printf_i+0x14c>
 800374a:	6923      	ldr	r3, [r4, #16]
 800374c:	6861      	ldr	r1, [r4, #4]
 800374e:	4299      	cmp	r1, r3
 8003750:	bfde      	ittt	le
 8003752:	2330      	movle	r3, #48	; 0x30
 8003754:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003758:	f105 35ff 	addle.w	r5, r5, #4294967295
 800375c:	1b52      	subs	r2, r2, r5
 800375e:	6122      	str	r2, [r4, #16]
 8003760:	f8cd a000 	str.w	sl, [sp]
 8003764:	464b      	mov	r3, r9
 8003766:	aa03      	add	r2, sp, #12
 8003768:	4621      	mov	r1, r4
 800376a:	4640      	mov	r0, r8
 800376c:	f7ff fee2 	bl	8003534 <_printf_common>
 8003770:	3001      	adds	r0, #1
 8003772:	d14c      	bne.n	800380e <_printf_i+0x1fe>
 8003774:	f04f 30ff 	mov.w	r0, #4294967295
 8003778:	b004      	add	sp, #16
 800377a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800377e:	4835      	ldr	r0, [pc, #212]	; (8003854 <_printf_i+0x244>)
 8003780:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8003784:	6829      	ldr	r1, [r5, #0]
 8003786:	6823      	ldr	r3, [r4, #0]
 8003788:	f851 6b04 	ldr.w	r6, [r1], #4
 800378c:	6029      	str	r1, [r5, #0]
 800378e:	061d      	lsls	r5, r3, #24
 8003790:	d514      	bpl.n	80037bc <_printf_i+0x1ac>
 8003792:	07df      	lsls	r7, r3, #31
 8003794:	bf44      	itt	mi
 8003796:	f043 0320 	orrmi.w	r3, r3, #32
 800379a:	6023      	strmi	r3, [r4, #0]
 800379c:	b91e      	cbnz	r6, 80037a6 <_printf_i+0x196>
 800379e:	6823      	ldr	r3, [r4, #0]
 80037a0:	f023 0320 	bic.w	r3, r3, #32
 80037a4:	6023      	str	r3, [r4, #0]
 80037a6:	2310      	movs	r3, #16
 80037a8:	e7b0      	b.n	800370c <_printf_i+0xfc>
 80037aa:	6823      	ldr	r3, [r4, #0]
 80037ac:	f043 0320 	orr.w	r3, r3, #32
 80037b0:	6023      	str	r3, [r4, #0]
 80037b2:	2378      	movs	r3, #120	; 0x78
 80037b4:	4828      	ldr	r0, [pc, #160]	; (8003858 <_printf_i+0x248>)
 80037b6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80037ba:	e7e3      	b.n	8003784 <_printf_i+0x174>
 80037bc:	0659      	lsls	r1, r3, #25
 80037be:	bf48      	it	mi
 80037c0:	b2b6      	uxthmi	r6, r6
 80037c2:	e7e6      	b.n	8003792 <_printf_i+0x182>
 80037c4:	4615      	mov	r5, r2
 80037c6:	e7bb      	b.n	8003740 <_printf_i+0x130>
 80037c8:	682b      	ldr	r3, [r5, #0]
 80037ca:	6826      	ldr	r6, [r4, #0]
 80037cc:	6961      	ldr	r1, [r4, #20]
 80037ce:	1d18      	adds	r0, r3, #4
 80037d0:	6028      	str	r0, [r5, #0]
 80037d2:	0635      	lsls	r5, r6, #24
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	d501      	bpl.n	80037dc <_printf_i+0x1cc>
 80037d8:	6019      	str	r1, [r3, #0]
 80037da:	e002      	b.n	80037e2 <_printf_i+0x1d2>
 80037dc:	0670      	lsls	r0, r6, #25
 80037de:	d5fb      	bpl.n	80037d8 <_printf_i+0x1c8>
 80037e0:	8019      	strh	r1, [r3, #0]
 80037e2:	2300      	movs	r3, #0
 80037e4:	6123      	str	r3, [r4, #16]
 80037e6:	4615      	mov	r5, r2
 80037e8:	e7ba      	b.n	8003760 <_printf_i+0x150>
 80037ea:	682b      	ldr	r3, [r5, #0]
 80037ec:	1d1a      	adds	r2, r3, #4
 80037ee:	602a      	str	r2, [r5, #0]
 80037f0:	681d      	ldr	r5, [r3, #0]
 80037f2:	6862      	ldr	r2, [r4, #4]
 80037f4:	2100      	movs	r1, #0
 80037f6:	4628      	mov	r0, r5
 80037f8:	f7fc fcea 	bl	80001d0 <memchr>
 80037fc:	b108      	cbz	r0, 8003802 <_printf_i+0x1f2>
 80037fe:	1b40      	subs	r0, r0, r5
 8003800:	6060      	str	r0, [r4, #4]
 8003802:	6863      	ldr	r3, [r4, #4]
 8003804:	6123      	str	r3, [r4, #16]
 8003806:	2300      	movs	r3, #0
 8003808:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800380c:	e7a8      	b.n	8003760 <_printf_i+0x150>
 800380e:	6923      	ldr	r3, [r4, #16]
 8003810:	462a      	mov	r2, r5
 8003812:	4649      	mov	r1, r9
 8003814:	4640      	mov	r0, r8
 8003816:	47d0      	blx	sl
 8003818:	3001      	adds	r0, #1
 800381a:	d0ab      	beq.n	8003774 <_printf_i+0x164>
 800381c:	6823      	ldr	r3, [r4, #0]
 800381e:	079b      	lsls	r3, r3, #30
 8003820:	d413      	bmi.n	800384a <_printf_i+0x23a>
 8003822:	68e0      	ldr	r0, [r4, #12]
 8003824:	9b03      	ldr	r3, [sp, #12]
 8003826:	4298      	cmp	r0, r3
 8003828:	bfb8      	it	lt
 800382a:	4618      	movlt	r0, r3
 800382c:	e7a4      	b.n	8003778 <_printf_i+0x168>
 800382e:	2301      	movs	r3, #1
 8003830:	4632      	mov	r2, r6
 8003832:	4649      	mov	r1, r9
 8003834:	4640      	mov	r0, r8
 8003836:	47d0      	blx	sl
 8003838:	3001      	adds	r0, #1
 800383a:	d09b      	beq.n	8003774 <_printf_i+0x164>
 800383c:	3501      	adds	r5, #1
 800383e:	68e3      	ldr	r3, [r4, #12]
 8003840:	9903      	ldr	r1, [sp, #12]
 8003842:	1a5b      	subs	r3, r3, r1
 8003844:	42ab      	cmp	r3, r5
 8003846:	dcf2      	bgt.n	800382e <_printf_i+0x21e>
 8003848:	e7eb      	b.n	8003822 <_printf_i+0x212>
 800384a:	2500      	movs	r5, #0
 800384c:	f104 0619 	add.w	r6, r4, #25
 8003850:	e7f5      	b.n	800383e <_printf_i+0x22e>
 8003852:	bf00      	nop
 8003854:	08003b9d 	.word	0x08003b9d
 8003858:	08003bae 	.word	0x08003bae

0800385c <memcpy>:
 800385c:	440a      	add	r2, r1
 800385e:	4291      	cmp	r1, r2
 8003860:	f100 33ff 	add.w	r3, r0, #4294967295
 8003864:	d100      	bne.n	8003868 <memcpy+0xc>
 8003866:	4770      	bx	lr
 8003868:	b510      	push	{r4, lr}
 800386a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800386e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003872:	4291      	cmp	r1, r2
 8003874:	d1f9      	bne.n	800386a <memcpy+0xe>
 8003876:	bd10      	pop	{r4, pc}

08003878 <memmove>:
 8003878:	4288      	cmp	r0, r1
 800387a:	b510      	push	{r4, lr}
 800387c:	eb01 0402 	add.w	r4, r1, r2
 8003880:	d902      	bls.n	8003888 <memmove+0x10>
 8003882:	4284      	cmp	r4, r0
 8003884:	4623      	mov	r3, r4
 8003886:	d807      	bhi.n	8003898 <memmove+0x20>
 8003888:	1e43      	subs	r3, r0, #1
 800388a:	42a1      	cmp	r1, r4
 800388c:	d008      	beq.n	80038a0 <memmove+0x28>
 800388e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003892:	f803 2f01 	strb.w	r2, [r3, #1]!
 8003896:	e7f8      	b.n	800388a <memmove+0x12>
 8003898:	4402      	add	r2, r0
 800389a:	4601      	mov	r1, r0
 800389c:	428a      	cmp	r2, r1
 800389e:	d100      	bne.n	80038a2 <memmove+0x2a>
 80038a0:	bd10      	pop	{r4, pc}
 80038a2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80038a6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80038aa:	e7f7      	b.n	800389c <memmove+0x24>

080038ac <_free_r>:
 80038ac:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80038ae:	2900      	cmp	r1, #0
 80038b0:	d044      	beq.n	800393c <_free_r+0x90>
 80038b2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80038b6:	9001      	str	r0, [sp, #4]
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	f1a1 0404 	sub.w	r4, r1, #4
 80038be:	bfb8      	it	lt
 80038c0:	18e4      	addlt	r4, r4, r3
 80038c2:	f000 f913 	bl	8003aec <__malloc_lock>
 80038c6:	4a1e      	ldr	r2, [pc, #120]	; (8003940 <_free_r+0x94>)
 80038c8:	9801      	ldr	r0, [sp, #4]
 80038ca:	6813      	ldr	r3, [r2, #0]
 80038cc:	b933      	cbnz	r3, 80038dc <_free_r+0x30>
 80038ce:	6063      	str	r3, [r4, #4]
 80038d0:	6014      	str	r4, [r2, #0]
 80038d2:	b003      	add	sp, #12
 80038d4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80038d8:	f000 b90e 	b.w	8003af8 <__malloc_unlock>
 80038dc:	42a3      	cmp	r3, r4
 80038de:	d908      	bls.n	80038f2 <_free_r+0x46>
 80038e0:	6825      	ldr	r5, [r4, #0]
 80038e2:	1961      	adds	r1, r4, r5
 80038e4:	428b      	cmp	r3, r1
 80038e6:	bf01      	itttt	eq
 80038e8:	6819      	ldreq	r1, [r3, #0]
 80038ea:	685b      	ldreq	r3, [r3, #4]
 80038ec:	1949      	addeq	r1, r1, r5
 80038ee:	6021      	streq	r1, [r4, #0]
 80038f0:	e7ed      	b.n	80038ce <_free_r+0x22>
 80038f2:	461a      	mov	r2, r3
 80038f4:	685b      	ldr	r3, [r3, #4]
 80038f6:	b10b      	cbz	r3, 80038fc <_free_r+0x50>
 80038f8:	42a3      	cmp	r3, r4
 80038fa:	d9fa      	bls.n	80038f2 <_free_r+0x46>
 80038fc:	6811      	ldr	r1, [r2, #0]
 80038fe:	1855      	adds	r5, r2, r1
 8003900:	42a5      	cmp	r5, r4
 8003902:	d10b      	bne.n	800391c <_free_r+0x70>
 8003904:	6824      	ldr	r4, [r4, #0]
 8003906:	4421      	add	r1, r4
 8003908:	1854      	adds	r4, r2, r1
 800390a:	42a3      	cmp	r3, r4
 800390c:	6011      	str	r1, [r2, #0]
 800390e:	d1e0      	bne.n	80038d2 <_free_r+0x26>
 8003910:	681c      	ldr	r4, [r3, #0]
 8003912:	685b      	ldr	r3, [r3, #4]
 8003914:	6053      	str	r3, [r2, #4]
 8003916:	4421      	add	r1, r4
 8003918:	6011      	str	r1, [r2, #0]
 800391a:	e7da      	b.n	80038d2 <_free_r+0x26>
 800391c:	d902      	bls.n	8003924 <_free_r+0x78>
 800391e:	230c      	movs	r3, #12
 8003920:	6003      	str	r3, [r0, #0]
 8003922:	e7d6      	b.n	80038d2 <_free_r+0x26>
 8003924:	6825      	ldr	r5, [r4, #0]
 8003926:	1961      	adds	r1, r4, r5
 8003928:	428b      	cmp	r3, r1
 800392a:	bf04      	itt	eq
 800392c:	6819      	ldreq	r1, [r3, #0]
 800392e:	685b      	ldreq	r3, [r3, #4]
 8003930:	6063      	str	r3, [r4, #4]
 8003932:	bf04      	itt	eq
 8003934:	1949      	addeq	r1, r1, r5
 8003936:	6021      	streq	r1, [r4, #0]
 8003938:	6054      	str	r4, [r2, #4]
 800393a:	e7ca      	b.n	80038d2 <_free_r+0x26>
 800393c:	b003      	add	sp, #12
 800393e:	bd30      	pop	{r4, r5, pc}
 8003940:	200002b4 	.word	0x200002b4

08003944 <sbrk_aligned>:
 8003944:	b570      	push	{r4, r5, r6, lr}
 8003946:	4e0e      	ldr	r6, [pc, #56]	; (8003980 <sbrk_aligned+0x3c>)
 8003948:	460c      	mov	r4, r1
 800394a:	6831      	ldr	r1, [r6, #0]
 800394c:	4605      	mov	r5, r0
 800394e:	b911      	cbnz	r1, 8003956 <sbrk_aligned+0x12>
 8003950:	f000 f8bc 	bl	8003acc <_sbrk_r>
 8003954:	6030      	str	r0, [r6, #0]
 8003956:	4621      	mov	r1, r4
 8003958:	4628      	mov	r0, r5
 800395a:	f000 f8b7 	bl	8003acc <_sbrk_r>
 800395e:	1c43      	adds	r3, r0, #1
 8003960:	d00a      	beq.n	8003978 <sbrk_aligned+0x34>
 8003962:	1cc4      	adds	r4, r0, #3
 8003964:	f024 0403 	bic.w	r4, r4, #3
 8003968:	42a0      	cmp	r0, r4
 800396a:	d007      	beq.n	800397c <sbrk_aligned+0x38>
 800396c:	1a21      	subs	r1, r4, r0
 800396e:	4628      	mov	r0, r5
 8003970:	f000 f8ac 	bl	8003acc <_sbrk_r>
 8003974:	3001      	adds	r0, #1
 8003976:	d101      	bne.n	800397c <sbrk_aligned+0x38>
 8003978:	f04f 34ff 	mov.w	r4, #4294967295
 800397c:	4620      	mov	r0, r4
 800397e:	bd70      	pop	{r4, r5, r6, pc}
 8003980:	200002b8 	.word	0x200002b8

08003984 <_malloc_r>:
 8003984:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003988:	1ccd      	adds	r5, r1, #3
 800398a:	f025 0503 	bic.w	r5, r5, #3
 800398e:	3508      	adds	r5, #8
 8003990:	2d0c      	cmp	r5, #12
 8003992:	bf38      	it	cc
 8003994:	250c      	movcc	r5, #12
 8003996:	2d00      	cmp	r5, #0
 8003998:	4607      	mov	r7, r0
 800399a:	db01      	blt.n	80039a0 <_malloc_r+0x1c>
 800399c:	42a9      	cmp	r1, r5
 800399e:	d905      	bls.n	80039ac <_malloc_r+0x28>
 80039a0:	230c      	movs	r3, #12
 80039a2:	603b      	str	r3, [r7, #0]
 80039a4:	2600      	movs	r6, #0
 80039a6:	4630      	mov	r0, r6
 80039a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80039ac:	4e2e      	ldr	r6, [pc, #184]	; (8003a68 <_malloc_r+0xe4>)
 80039ae:	f000 f89d 	bl	8003aec <__malloc_lock>
 80039b2:	6833      	ldr	r3, [r6, #0]
 80039b4:	461c      	mov	r4, r3
 80039b6:	bb34      	cbnz	r4, 8003a06 <_malloc_r+0x82>
 80039b8:	4629      	mov	r1, r5
 80039ba:	4638      	mov	r0, r7
 80039bc:	f7ff ffc2 	bl	8003944 <sbrk_aligned>
 80039c0:	1c43      	adds	r3, r0, #1
 80039c2:	4604      	mov	r4, r0
 80039c4:	d14d      	bne.n	8003a62 <_malloc_r+0xde>
 80039c6:	6834      	ldr	r4, [r6, #0]
 80039c8:	4626      	mov	r6, r4
 80039ca:	2e00      	cmp	r6, #0
 80039cc:	d140      	bne.n	8003a50 <_malloc_r+0xcc>
 80039ce:	6823      	ldr	r3, [r4, #0]
 80039d0:	4631      	mov	r1, r6
 80039d2:	4638      	mov	r0, r7
 80039d4:	eb04 0803 	add.w	r8, r4, r3
 80039d8:	f000 f878 	bl	8003acc <_sbrk_r>
 80039dc:	4580      	cmp	r8, r0
 80039de:	d13a      	bne.n	8003a56 <_malloc_r+0xd2>
 80039e0:	6821      	ldr	r1, [r4, #0]
 80039e2:	3503      	adds	r5, #3
 80039e4:	1a6d      	subs	r5, r5, r1
 80039e6:	f025 0503 	bic.w	r5, r5, #3
 80039ea:	3508      	adds	r5, #8
 80039ec:	2d0c      	cmp	r5, #12
 80039ee:	bf38      	it	cc
 80039f0:	250c      	movcc	r5, #12
 80039f2:	4629      	mov	r1, r5
 80039f4:	4638      	mov	r0, r7
 80039f6:	f7ff ffa5 	bl	8003944 <sbrk_aligned>
 80039fa:	3001      	adds	r0, #1
 80039fc:	d02b      	beq.n	8003a56 <_malloc_r+0xd2>
 80039fe:	6823      	ldr	r3, [r4, #0]
 8003a00:	442b      	add	r3, r5
 8003a02:	6023      	str	r3, [r4, #0]
 8003a04:	e00e      	b.n	8003a24 <_malloc_r+0xa0>
 8003a06:	6822      	ldr	r2, [r4, #0]
 8003a08:	1b52      	subs	r2, r2, r5
 8003a0a:	d41e      	bmi.n	8003a4a <_malloc_r+0xc6>
 8003a0c:	2a0b      	cmp	r2, #11
 8003a0e:	d916      	bls.n	8003a3e <_malloc_r+0xba>
 8003a10:	1961      	adds	r1, r4, r5
 8003a12:	42a3      	cmp	r3, r4
 8003a14:	6025      	str	r5, [r4, #0]
 8003a16:	bf18      	it	ne
 8003a18:	6059      	strne	r1, [r3, #4]
 8003a1a:	6863      	ldr	r3, [r4, #4]
 8003a1c:	bf08      	it	eq
 8003a1e:	6031      	streq	r1, [r6, #0]
 8003a20:	5162      	str	r2, [r4, r5]
 8003a22:	604b      	str	r3, [r1, #4]
 8003a24:	4638      	mov	r0, r7
 8003a26:	f104 060b 	add.w	r6, r4, #11
 8003a2a:	f000 f865 	bl	8003af8 <__malloc_unlock>
 8003a2e:	f026 0607 	bic.w	r6, r6, #7
 8003a32:	1d23      	adds	r3, r4, #4
 8003a34:	1af2      	subs	r2, r6, r3
 8003a36:	d0b6      	beq.n	80039a6 <_malloc_r+0x22>
 8003a38:	1b9b      	subs	r3, r3, r6
 8003a3a:	50a3      	str	r3, [r4, r2]
 8003a3c:	e7b3      	b.n	80039a6 <_malloc_r+0x22>
 8003a3e:	6862      	ldr	r2, [r4, #4]
 8003a40:	42a3      	cmp	r3, r4
 8003a42:	bf0c      	ite	eq
 8003a44:	6032      	streq	r2, [r6, #0]
 8003a46:	605a      	strne	r2, [r3, #4]
 8003a48:	e7ec      	b.n	8003a24 <_malloc_r+0xa0>
 8003a4a:	4623      	mov	r3, r4
 8003a4c:	6864      	ldr	r4, [r4, #4]
 8003a4e:	e7b2      	b.n	80039b6 <_malloc_r+0x32>
 8003a50:	4634      	mov	r4, r6
 8003a52:	6876      	ldr	r6, [r6, #4]
 8003a54:	e7b9      	b.n	80039ca <_malloc_r+0x46>
 8003a56:	230c      	movs	r3, #12
 8003a58:	603b      	str	r3, [r7, #0]
 8003a5a:	4638      	mov	r0, r7
 8003a5c:	f000 f84c 	bl	8003af8 <__malloc_unlock>
 8003a60:	e7a1      	b.n	80039a6 <_malloc_r+0x22>
 8003a62:	6025      	str	r5, [r4, #0]
 8003a64:	e7de      	b.n	8003a24 <_malloc_r+0xa0>
 8003a66:	bf00      	nop
 8003a68:	200002b4 	.word	0x200002b4

08003a6c <_realloc_r>:
 8003a6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003a70:	4680      	mov	r8, r0
 8003a72:	4614      	mov	r4, r2
 8003a74:	460e      	mov	r6, r1
 8003a76:	b921      	cbnz	r1, 8003a82 <_realloc_r+0x16>
 8003a78:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003a7c:	4611      	mov	r1, r2
 8003a7e:	f7ff bf81 	b.w	8003984 <_malloc_r>
 8003a82:	b92a      	cbnz	r2, 8003a90 <_realloc_r+0x24>
 8003a84:	f7ff ff12 	bl	80038ac <_free_r>
 8003a88:	4625      	mov	r5, r4
 8003a8a:	4628      	mov	r0, r5
 8003a8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003a90:	f000 f838 	bl	8003b04 <_malloc_usable_size_r>
 8003a94:	4284      	cmp	r4, r0
 8003a96:	4607      	mov	r7, r0
 8003a98:	d802      	bhi.n	8003aa0 <_realloc_r+0x34>
 8003a9a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8003a9e:	d812      	bhi.n	8003ac6 <_realloc_r+0x5a>
 8003aa0:	4621      	mov	r1, r4
 8003aa2:	4640      	mov	r0, r8
 8003aa4:	f7ff ff6e 	bl	8003984 <_malloc_r>
 8003aa8:	4605      	mov	r5, r0
 8003aaa:	2800      	cmp	r0, #0
 8003aac:	d0ed      	beq.n	8003a8a <_realloc_r+0x1e>
 8003aae:	42bc      	cmp	r4, r7
 8003ab0:	4622      	mov	r2, r4
 8003ab2:	4631      	mov	r1, r6
 8003ab4:	bf28      	it	cs
 8003ab6:	463a      	movcs	r2, r7
 8003ab8:	f7ff fed0 	bl	800385c <memcpy>
 8003abc:	4631      	mov	r1, r6
 8003abe:	4640      	mov	r0, r8
 8003ac0:	f7ff fef4 	bl	80038ac <_free_r>
 8003ac4:	e7e1      	b.n	8003a8a <_realloc_r+0x1e>
 8003ac6:	4635      	mov	r5, r6
 8003ac8:	e7df      	b.n	8003a8a <_realloc_r+0x1e>
	...

08003acc <_sbrk_r>:
 8003acc:	b538      	push	{r3, r4, r5, lr}
 8003ace:	4d06      	ldr	r5, [pc, #24]	; (8003ae8 <_sbrk_r+0x1c>)
 8003ad0:	2300      	movs	r3, #0
 8003ad2:	4604      	mov	r4, r0
 8003ad4:	4608      	mov	r0, r1
 8003ad6:	602b      	str	r3, [r5, #0]
 8003ad8:	f7fc ff3e 	bl	8000958 <_sbrk>
 8003adc:	1c43      	adds	r3, r0, #1
 8003ade:	d102      	bne.n	8003ae6 <_sbrk_r+0x1a>
 8003ae0:	682b      	ldr	r3, [r5, #0]
 8003ae2:	b103      	cbz	r3, 8003ae6 <_sbrk_r+0x1a>
 8003ae4:	6023      	str	r3, [r4, #0]
 8003ae6:	bd38      	pop	{r3, r4, r5, pc}
 8003ae8:	200002bc 	.word	0x200002bc

08003aec <__malloc_lock>:
 8003aec:	4801      	ldr	r0, [pc, #4]	; (8003af4 <__malloc_lock+0x8>)
 8003aee:	f000 b811 	b.w	8003b14 <__retarget_lock_acquire_recursive>
 8003af2:	bf00      	nop
 8003af4:	200002c0 	.word	0x200002c0

08003af8 <__malloc_unlock>:
 8003af8:	4801      	ldr	r0, [pc, #4]	; (8003b00 <__malloc_unlock+0x8>)
 8003afa:	f000 b80c 	b.w	8003b16 <__retarget_lock_release_recursive>
 8003afe:	bf00      	nop
 8003b00:	200002c0 	.word	0x200002c0

08003b04 <_malloc_usable_size_r>:
 8003b04:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003b08:	1f18      	subs	r0, r3, #4
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	bfbc      	itt	lt
 8003b0e:	580b      	ldrlt	r3, [r1, r0]
 8003b10:	18c0      	addlt	r0, r0, r3
 8003b12:	4770      	bx	lr

08003b14 <__retarget_lock_acquire_recursive>:
 8003b14:	4770      	bx	lr

08003b16 <__retarget_lock_release_recursive>:
 8003b16:	4770      	bx	lr

08003b18 <_init>:
 8003b18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b1a:	bf00      	nop
 8003b1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003b1e:	bc08      	pop	{r3}
 8003b20:	469e      	mov	lr, r3
 8003b22:	4770      	bx	lr

08003b24 <_fini>:
 8003b24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b26:	bf00      	nop
 8003b28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003b2a:	bc08      	pop	{r3}
 8003b2c:	469e      	mov	lr, r3
 8003b2e:	4770      	bx	lr
