
Signal_Impact.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ac48  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00003440  0800add8  0800add8  0000bdd8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e218  0800e218  000101d8  2**0
                  CONTENTS
  4 .ARM          00000008  0800e218  0800e218  0000f218  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800e220  0800e220  000101d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e220  0800e220  0000f220  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800e224  0800e224  0000f224  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d8  20000000  0800e228  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000101d8  2**0
                  CONTENTS
 10 .bss          0001d16c  200001d8  200001d8  000101d8  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2001d344  2001d344  000101d8  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000101d8  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001014e  00000000  00000000  00010208  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002e08  00000000  00000000  00020356  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000ea0  00000000  00000000  00023160  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000a6f  00000000  00000000  00024000  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00023fcd  00000000  00000000  00024a6f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00012e9d  00000000  00000000  00048a3c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ddae0  00000000  00000000  0005b8d9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      000000b1  00000000  00000000  001393b9  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000050c8  00000000  00000000  0013946c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000069  00000000  00000000  0013e534  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_loc    00002178  00000000  00000000  0013e59d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 24 .debug_ranges 00000110  00000000  00000000  00140715  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001d8 	.word	0x200001d8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800adc0 	.word	0x0800adc0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001dc 	.word	0x200001dc
 80001cc:	0800adc0 	.word	0x0800adc0

080001d0 <arm_bitreversal_32>:
 80001d0:	1c4b      	adds	r3, r1, #1
 80001d2:	2b01      	cmp	r3, #1
 80001d4:	bf98      	it	ls
 80001d6:	4770      	bxls	lr
 80001d8:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
 80001dc:	1c91      	adds	r1, r2, #2
 80001de:	089b      	lsrs	r3, r3, #2

080001e0 <arm_bitreversal_32_0>:
 80001e0:	f8b1 8004 	ldrh.w	r8, [r1, #4]
 80001e4:	f8b1 9002 	ldrh.w	r9, [r1, #2]
 80001e8:	880a      	ldrh	r2, [r1, #0]
 80001ea:	f831 cc02 	ldrh.w	ip, [r1, #-2]
 80001ee:	4480      	add	r8, r0
 80001f0:	4481      	add	r9, r0
 80001f2:	4402      	add	r2, r0
 80001f4:	4484      	add	ip, r0
 80001f6:	f8d9 7000 	ldr.w	r7, [r9]
 80001fa:	f8d8 6000 	ldr.w	r6, [r8]
 80001fe:	6815      	ldr	r5, [r2, #0]
 8000200:	f8dc 4000 	ldr.w	r4, [ip]
 8000204:	f8c9 6000 	str.w	r6, [r9]
 8000208:	f8c8 7000 	str.w	r7, [r8]
 800020c:	f8cc 5000 	str.w	r5, [ip]
 8000210:	6014      	str	r4, [r2, #0]
 8000212:	f8d9 7004 	ldr.w	r7, [r9, #4]
 8000216:	f8d8 6004 	ldr.w	r6, [r8, #4]
 800021a:	6855      	ldr	r5, [r2, #4]
 800021c:	f8dc 4004 	ldr.w	r4, [ip, #4]
 8000220:	f8c9 6004 	str.w	r6, [r9, #4]
 8000224:	f8c8 7004 	str.w	r7, [r8, #4]
 8000228:	f8cc 5004 	str.w	r5, [ip, #4]
 800022c:	6054      	str	r4, [r2, #4]
 800022e:	3108      	adds	r1, #8
 8000230:	3b01      	subs	r3, #1
 8000232:	d1d5      	bne.n	80001e0 <arm_bitreversal_32_0>
 8000234:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
 8000238:	4770      	bx	lr

0800023a <arm_bitreversal_16>:
 800023a:	1c4b      	adds	r3, r1, #1
 800023c:	2b01      	cmp	r3, #1
 800023e:	bf98      	it	ls
 8000240:	4770      	bxls	lr
 8000242:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
 8000246:	1c91      	adds	r1, r2, #2
 8000248:	089b      	lsrs	r3, r3, #2

0800024a <arm_bitreversal_16_0>:
 800024a:	f8b1 8004 	ldrh.w	r8, [r1, #4]
 800024e:	f8b1 9002 	ldrh.w	r9, [r1, #2]
 8000252:	880a      	ldrh	r2, [r1, #0]
 8000254:	f831 cc02 	ldrh.w	ip, [r1, #-2]
 8000258:	eb00 0858 	add.w	r8, r0, r8, lsr #1
 800025c:	eb00 0959 	add.w	r9, r0, r9, lsr #1
 8000260:	eb00 0252 	add.w	r2, r0, r2, lsr #1
 8000264:	eb00 0c5c 	add.w	ip, r0, ip, lsr #1
 8000268:	f8d9 7000 	ldr.w	r7, [r9]
 800026c:	f8d8 6000 	ldr.w	r6, [r8]
 8000270:	6815      	ldr	r5, [r2, #0]
 8000272:	f8dc 4000 	ldr.w	r4, [ip]
 8000276:	f8c9 6000 	str.w	r6, [r9]
 800027a:	f8c8 7000 	str.w	r7, [r8]
 800027e:	f8cc 5000 	str.w	r5, [ip]
 8000282:	6014      	str	r4, [r2, #0]
 8000284:	3108      	adds	r1, #8
 8000286:	3b01      	subs	r3, #1
 8000288:	d1df      	bne.n	800024a <arm_bitreversal_16_0>
 800028a:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
 800028e:	4770      	bx	lr

08000290 <memchr>:
 8000290:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000294:	2a10      	cmp	r2, #16
 8000296:	db2b      	blt.n	80002f0 <memchr+0x60>
 8000298:	f010 0f07 	tst.w	r0, #7
 800029c:	d008      	beq.n	80002b0 <memchr+0x20>
 800029e:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a2:	3a01      	subs	r2, #1
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d02d      	beq.n	8000304 <memchr+0x74>
 80002a8:	f010 0f07 	tst.w	r0, #7
 80002ac:	b342      	cbz	r2, 8000300 <memchr+0x70>
 80002ae:	d1f6      	bne.n	800029e <memchr+0xe>
 80002b0:	b4f0      	push	{r4, r5, r6, r7}
 80002b2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80002b6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80002ba:	f022 0407 	bic.w	r4, r2, #7
 80002be:	f07f 0700 	mvns.w	r7, #0
 80002c2:	2300      	movs	r3, #0
 80002c4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80002c8:	3c08      	subs	r4, #8
 80002ca:	ea85 0501 	eor.w	r5, r5, r1
 80002ce:	ea86 0601 	eor.w	r6, r6, r1
 80002d2:	fa85 f547 	uadd8	r5, r5, r7
 80002d6:	faa3 f587 	sel	r5, r3, r7
 80002da:	fa86 f647 	uadd8	r6, r6, r7
 80002de:	faa5 f687 	sel	r6, r5, r7
 80002e2:	b98e      	cbnz	r6, 8000308 <memchr+0x78>
 80002e4:	d1ee      	bne.n	80002c4 <memchr+0x34>
 80002e6:	bcf0      	pop	{r4, r5, r6, r7}
 80002e8:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002ec:	f002 0207 	and.w	r2, r2, #7
 80002f0:	b132      	cbz	r2, 8000300 <memchr+0x70>
 80002f2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f6:	3a01      	subs	r2, #1
 80002f8:	ea83 0301 	eor.w	r3, r3, r1
 80002fc:	b113      	cbz	r3, 8000304 <memchr+0x74>
 80002fe:	d1f8      	bne.n	80002f2 <memchr+0x62>
 8000300:	2000      	movs	r0, #0
 8000302:	4770      	bx	lr
 8000304:	3801      	subs	r0, #1
 8000306:	4770      	bx	lr
 8000308:	2d00      	cmp	r5, #0
 800030a:	bf06      	itte	eq
 800030c:	4635      	moveq	r5, r6
 800030e:	3803      	subeq	r0, #3
 8000310:	3807      	subne	r0, #7
 8000312:	f015 0f01 	tst.w	r5, #1
 8000316:	d107      	bne.n	8000328 <memchr+0x98>
 8000318:	3001      	adds	r0, #1
 800031a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800031e:	bf02      	ittt	eq
 8000320:	3001      	addeq	r0, #1
 8000322:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000326:	3001      	addeq	r0, #1
 8000328:	bcf0      	pop	{r4, r5, r6, r7}
 800032a:	3801      	subs	r0, #1
 800032c:	4770      	bx	lr
 800032e:	bf00      	nop

08000330 <strlen>:
 8000330:	4603      	mov	r3, r0
 8000332:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000336:	2a00      	cmp	r2, #0
 8000338:	d1fb      	bne.n	8000332 <strlen+0x2>
 800033a:	1a18      	subs	r0, r3, r0
 800033c:	3801      	subs	r0, #1
 800033e:	4770      	bx	lr

08000340 <__aeabi_drsub>:
 8000340:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000344:	e002      	b.n	800034c <__adddf3>
 8000346:	bf00      	nop

08000348 <__aeabi_dsub>:
 8000348:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800034c <__adddf3>:
 800034c:	b530      	push	{r4, r5, lr}
 800034e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000352:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000356:	ea94 0f05 	teq	r4, r5
 800035a:	bf08      	it	eq
 800035c:	ea90 0f02 	teqeq	r0, r2
 8000360:	bf1f      	itttt	ne
 8000362:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000366:	ea55 0c02 	orrsne.w	ip, r5, r2
 800036a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800036e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000372:	f000 80e2 	beq.w	800053a <__adddf3+0x1ee>
 8000376:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800037a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800037e:	bfb8      	it	lt
 8000380:	426d      	neglt	r5, r5
 8000382:	dd0c      	ble.n	800039e <__adddf3+0x52>
 8000384:	442c      	add	r4, r5
 8000386:	ea80 0202 	eor.w	r2, r0, r2
 800038a:	ea81 0303 	eor.w	r3, r1, r3
 800038e:	ea82 0000 	eor.w	r0, r2, r0
 8000392:	ea83 0101 	eor.w	r1, r3, r1
 8000396:	ea80 0202 	eor.w	r2, r0, r2
 800039a:	ea81 0303 	eor.w	r3, r1, r3
 800039e:	2d36      	cmp	r5, #54	@ 0x36
 80003a0:	bf88      	it	hi
 80003a2:	bd30      	pophi	{r4, r5, pc}
 80003a4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80003a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80003ac:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80003b0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80003b4:	d002      	beq.n	80003bc <__adddf3+0x70>
 80003b6:	4240      	negs	r0, r0
 80003b8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80003bc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80003c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80003c4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80003c8:	d002      	beq.n	80003d0 <__adddf3+0x84>
 80003ca:	4252      	negs	r2, r2
 80003cc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80003d0:	ea94 0f05 	teq	r4, r5
 80003d4:	f000 80a7 	beq.w	8000526 <__adddf3+0x1da>
 80003d8:	f1a4 0401 	sub.w	r4, r4, #1
 80003dc:	f1d5 0e20 	rsbs	lr, r5, #32
 80003e0:	db0d      	blt.n	80003fe <__adddf3+0xb2>
 80003e2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80003e6:	fa22 f205 	lsr.w	r2, r2, r5
 80003ea:	1880      	adds	r0, r0, r2
 80003ec:	f141 0100 	adc.w	r1, r1, #0
 80003f0:	fa03 f20e 	lsl.w	r2, r3, lr
 80003f4:	1880      	adds	r0, r0, r2
 80003f6:	fa43 f305 	asr.w	r3, r3, r5
 80003fa:	4159      	adcs	r1, r3
 80003fc:	e00e      	b.n	800041c <__adddf3+0xd0>
 80003fe:	f1a5 0520 	sub.w	r5, r5, #32
 8000402:	f10e 0e20 	add.w	lr, lr, #32
 8000406:	2a01      	cmp	r2, #1
 8000408:	fa03 fc0e 	lsl.w	ip, r3, lr
 800040c:	bf28      	it	cs
 800040e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000412:	fa43 f305 	asr.w	r3, r3, r5
 8000416:	18c0      	adds	r0, r0, r3
 8000418:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800041c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000420:	d507      	bpl.n	8000432 <__adddf3+0xe6>
 8000422:	f04f 0e00 	mov.w	lr, #0
 8000426:	f1dc 0c00 	rsbs	ip, ip, #0
 800042a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800042e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000432:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000436:	d31b      	bcc.n	8000470 <__adddf3+0x124>
 8000438:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800043c:	d30c      	bcc.n	8000458 <__adddf3+0x10c>
 800043e:	0849      	lsrs	r1, r1, #1
 8000440:	ea5f 0030 	movs.w	r0, r0, rrx
 8000444:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000448:	f104 0401 	add.w	r4, r4, #1
 800044c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000450:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000454:	f080 809a 	bcs.w	800058c <__adddf3+0x240>
 8000458:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800045c:	bf08      	it	eq
 800045e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000462:	f150 0000 	adcs.w	r0, r0, #0
 8000466:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800046a:	ea41 0105 	orr.w	r1, r1, r5
 800046e:	bd30      	pop	{r4, r5, pc}
 8000470:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000474:	4140      	adcs	r0, r0
 8000476:	eb41 0101 	adc.w	r1, r1, r1
 800047a:	3c01      	subs	r4, #1
 800047c:	bf28      	it	cs
 800047e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000482:	d2e9      	bcs.n	8000458 <__adddf3+0x10c>
 8000484:	f091 0f00 	teq	r1, #0
 8000488:	bf04      	itt	eq
 800048a:	4601      	moveq	r1, r0
 800048c:	2000      	moveq	r0, #0
 800048e:	fab1 f381 	clz	r3, r1
 8000492:	bf08      	it	eq
 8000494:	3320      	addeq	r3, #32
 8000496:	f1a3 030b 	sub.w	r3, r3, #11
 800049a:	f1b3 0220 	subs.w	r2, r3, #32
 800049e:	da0c      	bge.n	80004ba <__adddf3+0x16e>
 80004a0:	320c      	adds	r2, #12
 80004a2:	dd08      	ble.n	80004b6 <__adddf3+0x16a>
 80004a4:	f102 0c14 	add.w	ip, r2, #20
 80004a8:	f1c2 020c 	rsb	r2, r2, #12
 80004ac:	fa01 f00c 	lsl.w	r0, r1, ip
 80004b0:	fa21 f102 	lsr.w	r1, r1, r2
 80004b4:	e00c      	b.n	80004d0 <__adddf3+0x184>
 80004b6:	f102 0214 	add.w	r2, r2, #20
 80004ba:	bfd8      	it	le
 80004bc:	f1c2 0c20 	rsble	ip, r2, #32
 80004c0:	fa01 f102 	lsl.w	r1, r1, r2
 80004c4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80004c8:	bfdc      	itt	le
 80004ca:	ea41 010c 	orrle.w	r1, r1, ip
 80004ce:	4090      	lslle	r0, r2
 80004d0:	1ae4      	subs	r4, r4, r3
 80004d2:	bfa2      	ittt	ge
 80004d4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80004d8:	4329      	orrge	r1, r5
 80004da:	bd30      	popge	{r4, r5, pc}
 80004dc:	ea6f 0404 	mvn.w	r4, r4
 80004e0:	3c1f      	subs	r4, #31
 80004e2:	da1c      	bge.n	800051e <__adddf3+0x1d2>
 80004e4:	340c      	adds	r4, #12
 80004e6:	dc0e      	bgt.n	8000506 <__adddf3+0x1ba>
 80004e8:	f104 0414 	add.w	r4, r4, #20
 80004ec:	f1c4 0220 	rsb	r2, r4, #32
 80004f0:	fa20 f004 	lsr.w	r0, r0, r4
 80004f4:	fa01 f302 	lsl.w	r3, r1, r2
 80004f8:	ea40 0003 	orr.w	r0, r0, r3
 80004fc:	fa21 f304 	lsr.w	r3, r1, r4
 8000500:	ea45 0103 	orr.w	r1, r5, r3
 8000504:	bd30      	pop	{r4, r5, pc}
 8000506:	f1c4 040c 	rsb	r4, r4, #12
 800050a:	f1c4 0220 	rsb	r2, r4, #32
 800050e:	fa20 f002 	lsr.w	r0, r0, r2
 8000512:	fa01 f304 	lsl.w	r3, r1, r4
 8000516:	ea40 0003 	orr.w	r0, r0, r3
 800051a:	4629      	mov	r1, r5
 800051c:	bd30      	pop	{r4, r5, pc}
 800051e:	fa21 f004 	lsr.w	r0, r1, r4
 8000522:	4629      	mov	r1, r5
 8000524:	bd30      	pop	{r4, r5, pc}
 8000526:	f094 0f00 	teq	r4, #0
 800052a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800052e:	bf06      	itte	eq
 8000530:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000534:	3401      	addeq	r4, #1
 8000536:	3d01      	subne	r5, #1
 8000538:	e74e      	b.n	80003d8 <__adddf3+0x8c>
 800053a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800053e:	bf18      	it	ne
 8000540:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000544:	d029      	beq.n	800059a <__adddf3+0x24e>
 8000546:	ea94 0f05 	teq	r4, r5
 800054a:	bf08      	it	eq
 800054c:	ea90 0f02 	teqeq	r0, r2
 8000550:	d005      	beq.n	800055e <__adddf3+0x212>
 8000552:	ea54 0c00 	orrs.w	ip, r4, r0
 8000556:	bf04      	itt	eq
 8000558:	4619      	moveq	r1, r3
 800055a:	4610      	moveq	r0, r2
 800055c:	bd30      	pop	{r4, r5, pc}
 800055e:	ea91 0f03 	teq	r1, r3
 8000562:	bf1e      	ittt	ne
 8000564:	2100      	movne	r1, #0
 8000566:	2000      	movne	r0, #0
 8000568:	bd30      	popne	{r4, r5, pc}
 800056a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800056e:	d105      	bne.n	800057c <__adddf3+0x230>
 8000570:	0040      	lsls	r0, r0, #1
 8000572:	4149      	adcs	r1, r1
 8000574:	bf28      	it	cs
 8000576:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800057a:	bd30      	pop	{r4, r5, pc}
 800057c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000580:	bf3c      	itt	cc
 8000582:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000586:	bd30      	popcc	{r4, r5, pc}
 8000588:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800058c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000590:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000594:	f04f 0000 	mov.w	r0, #0
 8000598:	bd30      	pop	{r4, r5, pc}
 800059a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800059e:	bf1a      	itte	ne
 80005a0:	4619      	movne	r1, r3
 80005a2:	4610      	movne	r0, r2
 80005a4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80005a8:	bf1c      	itt	ne
 80005aa:	460b      	movne	r3, r1
 80005ac:	4602      	movne	r2, r0
 80005ae:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80005b2:	bf06      	itte	eq
 80005b4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80005b8:	ea91 0f03 	teqeq	r1, r3
 80005bc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80005c0:	bd30      	pop	{r4, r5, pc}
 80005c2:	bf00      	nop

080005c4 <__aeabi_ui2d>:
 80005c4:	f090 0f00 	teq	r0, #0
 80005c8:	bf04      	itt	eq
 80005ca:	2100      	moveq	r1, #0
 80005cc:	4770      	bxeq	lr
 80005ce:	b530      	push	{r4, r5, lr}
 80005d0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005d4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005d8:	f04f 0500 	mov.w	r5, #0
 80005dc:	f04f 0100 	mov.w	r1, #0
 80005e0:	e750      	b.n	8000484 <__adddf3+0x138>
 80005e2:	bf00      	nop

080005e4 <__aeabi_i2d>:
 80005e4:	f090 0f00 	teq	r0, #0
 80005e8:	bf04      	itt	eq
 80005ea:	2100      	moveq	r1, #0
 80005ec:	4770      	bxeq	lr
 80005ee:	b530      	push	{r4, r5, lr}
 80005f0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005f4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005f8:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80005fc:	bf48      	it	mi
 80005fe:	4240      	negmi	r0, r0
 8000600:	f04f 0100 	mov.w	r1, #0
 8000604:	e73e      	b.n	8000484 <__adddf3+0x138>
 8000606:	bf00      	nop

08000608 <__aeabi_f2d>:
 8000608:	0042      	lsls	r2, r0, #1
 800060a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800060e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000612:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000616:	bf1f      	itttt	ne
 8000618:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800061c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000620:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000624:	4770      	bxne	lr
 8000626:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800062a:	bf08      	it	eq
 800062c:	4770      	bxeq	lr
 800062e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000632:	bf04      	itt	eq
 8000634:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000638:	4770      	bxeq	lr
 800063a:	b530      	push	{r4, r5, lr}
 800063c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000640:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000644:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000648:	e71c      	b.n	8000484 <__adddf3+0x138>
 800064a:	bf00      	nop

0800064c <__aeabi_ul2d>:
 800064c:	ea50 0201 	orrs.w	r2, r0, r1
 8000650:	bf08      	it	eq
 8000652:	4770      	bxeq	lr
 8000654:	b530      	push	{r4, r5, lr}
 8000656:	f04f 0500 	mov.w	r5, #0
 800065a:	e00a      	b.n	8000672 <__aeabi_l2d+0x16>

0800065c <__aeabi_l2d>:
 800065c:	ea50 0201 	orrs.w	r2, r0, r1
 8000660:	bf08      	it	eq
 8000662:	4770      	bxeq	lr
 8000664:	b530      	push	{r4, r5, lr}
 8000666:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800066a:	d502      	bpl.n	8000672 <__aeabi_l2d+0x16>
 800066c:	4240      	negs	r0, r0
 800066e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000672:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000676:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800067a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800067e:	f43f aed8 	beq.w	8000432 <__adddf3+0xe6>
 8000682:	f04f 0203 	mov.w	r2, #3
 8000686:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800068a:	bf18      	it	ne
 800068c:	3203      	addne	r2, #3
 800068e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000692:	bf18      	it	ne
 8000694:	3203      	addne	r2, #3
 8000696:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800069a:	f1c2 0320 	rsb	r3, r2, #32
 800069e:	fa00 fc03 	lsl.w	ip, r0, r3
 80006a2:	fa20 f002 	lsr.w	r0, r0, r2
 80006a6:	fa01 fe03 	lsl.w	lr, r1, r3
 80006aa:	ea40 000e 	orr.w	r0, r0, lr
 80006ae:	fa21 f102 	lsr.w	r1, r1, r2
 80006b2:	4414      	add	r4, r2
 80006b4:	e6bd      	b.n	8000432 <__adddf3+0xe6>
 80006b6:	bf00      	nop

080006b8 <__aeabi_dmul>:
 80006b8:	b570      	push	{r4, r5, r6, lr}
 80006ba:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80006be:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80006c2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80006c6:	bf1d      	ittte	ne
 80006c8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80006cc:	ea94 0f0c 	teqne	r4, ip
 80006d0:	ea95 0f0c 	teqne	r5, ip
 80006d4:	f000 f8de 	bleq	8000894 <__aeabi_dmul+0x1dc>
 80006d8:	442c      	add	r4, r5
 80006da:	ea81 0603 	eor.w	r6, r1, r3
 80006de:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80006e2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80006e6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80006ea:	bf18      	it	ne
 80006ec:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80006f0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006f4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80006f8:	d038      	beq.n	800076c <__aeabi_dmul+0xb4>
 80006fa:	fba0 ce02 	umull	ip, lr, r0, r2
 80006fe:	f04f 0500 	mov.w	r5, #0
 8000702:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000706:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800070a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800070e:	f04f 0600 	mov.w	r6, #0
 8000712:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000716:	f09c 0f00 	teq	ip, #0
 800071a:	bf18      	it	ne
 800071c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000720:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000724:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000728:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800072c:	d204      	bcs.n	8000738 <__aeabi_dmul+0x80>
 800072e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000732:	416d      	adcs	r5, r5
 8000734:	eb46 0606 	adc.w	r6, r6, r6
 8000738:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800073c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000740:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000744:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000748:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800074c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000750:	bf88      	it	hi
 8000752:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000756:	d81e      	bhi.n	8000796 <__aeabi_dmul+0xde>
 8000758:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800075c:	bf08      	it	eq
 800075e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000762:	f150 0000 	adcs.w	r0, r0, #0
 8000766:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000770:	ea46 0101 	orr.w	r1, r6, r1
 8000774:	ea40 0002 	orr.w	r0, r0, r2
 8000778:	ea81 0103 	eor.w	r1, r1, r3
 800077c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000780:	bfc2      	ittt	gt
 8000782:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000786:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800078a:	bd70      	popgt	{r4, r5, r6, pc}
 800078c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000790:	f04f 0e00 	mov.w	lr, #0
 8000794:	3c01      	subs	r4, #1
 8000796:	f300 80ab 	bgt.w	80008f0 <__aeabi_dmul+0x238>
 800079a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800079e:	bfde      	ittt	le
 80007a0:	2000      	movle	r0, #0
 80007a2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80007a6:	bd70      	pople	{r4, r5, r6, pc}
 80007a8:	f1c4 0400 	rsb	r4, r4, #0
 80007ac:	3c20      	subs	r4, #32
 80007ae:	da35      	bge.n	800081c <__aeabi_dmul+0x164>
 80007b0:	340c      	adds	r4, #12
 80007b2:	dc1b      	bgt.n	80007ec <__aeabi_dmul+0x134>
 80007b4:	f104 0414 	add.w	r4, r4, #20
 80007b8:	f1c4 0520 	rsb	r5, r4, #32
 80007bc:	fa00 f305 	lsl.w	r3, r0, r5
 80007c0:	fa20 f004 	lsr.w	r0, r0, r4
 80007c4:	fa01 f205 	lsl.w	r2, r1, r5
 80007c8:	ea40 0002 	orr.w	r0, r0, r2
 80007cc:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80007d0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80007d4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80007d8:	fa21 f604 	lsr.w	r6, r1, r4
 80007dc:	eb42 0106 	adc.w	r1, r2, r6
 80007e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007e4:	bf08      	it	eq
 80007e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007ea:	bd70      	pop	{r4, r5, r6, pc}
 80007ec:	f1c4 040c 	rsb	r4, r4, #12
 80007f0:	f1c4 0520 	rsb	r5, r4, #32
 80007f4:	fa00 f304 	lsl.w	r3, r0, r4
 80007f8:	fa20 f005 	lsr.w	r0, r0, r5
 80007fc:	fa01 f204 	lsl.w	r2, r1, r4
 8000800:	ea40 0002 	orr.w	r0, r0, r2
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000808:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800080c:	f141 0100 	adc.w	r1, r1, #0
 8000810:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000814:	bf08      	it	eq
 8000816:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800081a:	bd70      	pop	{r4, r5, r6, pc}
 800081c:	f1c4 0520 	rsb	r5, r4, #32
 8000820:	fa00 f205 	lsl.w	r2, r0, r5
 8000824:	ea4e 0e02 	orr.w	lr, lr, r2
 8000828:	fa20 f304 	lsr.w	r3, r0, r4
 800082c:	fa01 f205 	lsl.w	r2, r1, r5
 8000830:	ea43 0302 	orr.w	r3, r3, r2
 8000834:	fa21 f004 	lsr.w	r0, r1, r4
 8000838:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800083c:	fa21 f204 	lsr.w	r2, r1, r4
 8000840:	ea20 0002 	bic.w	r0, r0, r2
 8000844:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000848:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800084c:	bf08      	it	eq
 800084e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000852:	bd70      	pop	{r4, r5, r6, pc}
 8000854:	f094 0f00 	teq	r4, #0
 8000858:	d10f      	bne.n	800087a <__aeabi_dmul+0x1c2>
 800085a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800085e:	0040      	lsls	r0, r0, #1
 8000860:	eb41 0101 	adc.w	r1, r1, r1
 8000864:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000868:	bf08      	it	eq
 800086a:	3c01      	subeq	r4, #1
 800086c:	d0f7      	beq.n	800085e <__aeabi_dmul+0x1a6>
 800086e:	ea41 0106 	orr.w	r1, r1, r6
 8000872:	f095 0f00 	teq	r5, #0
 8000876:	bf18      	it	ne
 8000878:	4770      	bxne	lr
 800087a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800087e:	0052      	lsls	r2, r2, #1
 8000880:	eb43 0303 	adc.w	r3, r3, r3
 8000884:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000888:	bf08      	it	eq
 800088a:	3d01      	subeq	r5, #1
 800088c:	d0f7      	beq.n	800087e <__aeabi_dmul+0x1c6>
 800088e:	ea43 0306 	orr.w	r3, r3, r6
 8000892:	4770      	bx	lr
 8000894:	ea94 0f0c 	teq	r4, ip
 8000898:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089c:	bf18      	it	ne
 800089e:	ea95 0f0c 	teqne	r5, ip
 80008a2:	d00c      	beq.n	80008be <__aeabi_dmul+0x206>
 80008a4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008a8:	bf18      	it	ne
 80008aa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008ae:	d1d1      	bne.n	8000854 <__aeabi_dmul+0x19c>
 80008b0:	ea81 0103 	eor.w	r1, r1, r3
 80008b4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80008b8:	f04f 0000 	mov.w	r0, #0
 80008bc:	bd70      	pop	{r4, r5, r6, pc}
 80008be:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008c2:	bf06      	itte	eq
 80008c4:	4610      	moveq	r0, r2
 80008c6:	4619      	moveq	r1, r3
 80008c8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008cc:	d019      	beq.n	8000902 <__aeabi_dmul+0x24a>
 80008ce:	ea94 0f0c 	teq	r4, ip
 80008d2:	d102      	bne.n	80008da <__aeabi_dmul+0x222>
 80008d4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80008d8:	d113      	bne.n	8000902 <__aeabi_dmul+0x24a>
 80008da:	ea95 0f0c 	teq	r5, ip
 80008de:	d105      	bne.n	80008ec <__aeabi_dmul+0x234>
 80008e0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80008e4:	bf1c      	itt	ne
 80008e6:	4610      	movne	r0, r2
 80008e8:	4619      	movne	r1, r3
 80008ea:	d10a      	bne.n	8000902 <__aeabi_dmul+0x24a>
 80008ec:	ea81 0103 	eor.w	r1, r1, r3
 80008f0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80008f4:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80008f8:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80008fc:	f04f 0000 	mov.w	r0, #0
 8000900:	bd70      	pop	{r4, r5, r6, pc}
 8000902:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000906:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800090a:	bd70      	pop	{r4, r5, r6, pc}

0800090c <__aeabi_ddiv>:
 800090c:	b570      	push	{r4, r5, r6, lr}
 800090e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000912:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000916:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800091a:	bf1d      	ittte	ne
 800091c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000920:	ea94 0f0c 	teqne	r4, ip
 8000924:	ea95 0f0c 	teqne	r5, ip
 8000928:	f000 f8a7 	bleq	8000a7a <__aeabi_ddiv+0x16e>
 800092c:	eba4 0405 	sub.w	r4, r4, r5
 8000930:	ea81 0e03 	eor.w	lr, r1, r3
 8000934:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000938:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800093c:	f000 8088 	beq.w	8000a50 <__aeabi_ddiv+0x144>
 8000940:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000944:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000948:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800094c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000950:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000954:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000958:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800095c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000960:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000964:	429d      	cmp	r5, r3
 8000966:	bf08      	it	eq
 8000968:	4296      	cmpeq	r6, r2
 800096a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800096e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000972:	d202      	bcs.n	800097a <__aeabi_ddiv+0x6e>
 8000974:	085b      	lsrs	r3, r3, #1
 8000976:	ea4f 0232 	mov.w	r2, r2, rrx
 800097a:	1ab6      	subs	r6, r6, r2
 800097c:	eb65 0503 	sbc.w	r5, r5, r3
 8000980:	085b      	lsrs	r3, r3, #1
 8000982:	ea4f 0232 	mov.w	r2, r2, rrx
 8000986:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800098a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800098e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000992:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000996:	bf22      	ittt	cs
 8000998:	1ab6      	subcs	r6, r6, r2
 800099a:	4675      	movcs	r5, lr
 800099c:	ea40 000c 	orrcs.w	r0, r0, ip
 80009a0:	085b      	lsrs	r3, r3, #1
 80009a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80009a6:	ebb6 0e02 	subs.w	lr, r6, r2
 80009aa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80009ae:	bf22      	ittt	cs
 80009b0:	1ab6      	subcs	r6, r6, r2
 80009b2:	4675      	movcs	r5, lr
 80009b4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80009b8:	085b      	lsrs	r3, r3, #1
 80009ba:	ea4f 0232 	mov.w	r2, r2, rrx
 80009be:	ebb6 0e02 	subs.w	lr, r6, r2
 80009c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80009c6:	bf22      	ittt	cs
 80009c8:	1ab6      	subcs	r6, r6, r2
 80009ca:	4675      	movcs	r5, lr
 80009cc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80009d0:	085b      	lsrs	r3, r3, #1
 80009d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80009d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80009da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80009de:	bf22      	ittt	cs
 80009e0:	1ab6      	subcs	r6, r6, r2
 80009e2:	4675      	movcs	r5, lr
 80009e4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80009e8:	ea55 0e06 	orrs.w	lr, r5, r6
 80009ec:	d018      	beq.n	8000a20 <__aeabi_ddiv+0x114>
 80009ee:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80009f2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80009f6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80009fa:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80009fe:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000a02:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000a06:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000a0a:	d1c0      	bne.n	800098e <__aeabi_ddiv+0x82>
 8000a0c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000a10:	d10b      	bne.n	8000a2a <__aeabi_ddiv+0x11e>
 8000a12:	ea41 0100 	orr.w	r1, r1, r0
 8000a16:	f04f 0000 	mov.w	r0, #0
 8000a1a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 8000a1e:	e7b6      	b.n	800098e <__aeabi_ddiv+0x82>
 8000a20:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000a24:	bf04      	itt	eq
 8000a26:	4301      	orreq	r1, r0
 8000a28:	2000      	moveq	r0, #0
 8000a2a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000a2e:	bf88      	it	hi
 8000a30:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000a34:	f63f aeaf 	bhi.w	8000796 <__aeabi_dmul+0xde>
 8000a38:	ebb5 0c03 	subs.w	ip, r5, r3
 8000a3c:	bf04      	itt	eq
 8000a3e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000a42:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000a46:	f150 0000 	adcs.w	r0, r0, #0
 8000a4a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000a4e:	bd70      	pop	{r4, r5, r6, pc}
 8000a50:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000a54:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000a58:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000a5c:	bfc2      	ittt	gt
 8000a5e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000a62:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000a66:	bd70      	popgt	{r4, r5, r6, pc}
 8000a68:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000a6c:	f04f 0e00 	mov.w	lr, #0
 8000a70:	3c01      	subs	r4, #1
 8000a72:	e690      	b.n	8000796 <__aeabi_dmul+0xde>
 8000a74:	ea45 0e06 	orr.w	lr, r5, r6
 8000a78:	e68d      	b.n	8000796 <__aeabi_dmul+0xde>
 8000a7a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a7e:	ea94 0f0c 	teq	r4, ip
 8000a82:	bf08      	it	eq
 8000a84:	ea95 0f0c 	teqeq	r5, ip
 8000a88:	f43f af3b 	beq.w	8000902 <__aeabi_dmul+0x24a>
 8000a8c:	ea94 0f0c 	teq	r4, ip
 8000a90:	d10a      	bne.n	8000aa8 <__aeabi_ddiv+0x19c>
 8000a92:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a96:	f47f af34 	bne.w	8000902 <__aeabi_dmul+0x24a>
 8000a9a:	ea95 0f0c 	teq	r5, ip
 8000a9e:	f47f af25 	bne.w	80008ec <__aeabi_dmul+0x234>
 8000aa2:	4610      	mov	r0, r2
 8000aa4:	4619      	mov	r1, r3
 8000aa6:	e72c      	b.n	8000902 <__aeabi_dmul+0x24a>
 8000aa8:	ea95 0f0c 	teq	r5, ip
 8000aac:	d106      	bne.n	8000abc <__aeabi_ddiv+0x1b0>
 8000aae:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000ab2:	f43f aefd 	beq.w	80008b0 <__aeabi_dmul+0x1f8>
 8000ab6:	4610      	mov	r0, r2
 8000ab8:	4619      	mov	r1, r3
 8000aba:	e722      	b.n	8000902 <__aeabi_dmul+0x24a>
 8000abc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000ac0:	bf18      	it	ne
 8000ac2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000ac6:	f47f aec5 	bne.w	8000854 <__aeabi_dmul+0x19c>
 8000aca:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000ace:	f47f af0d 	bne.w	80008ec <__aeabi_dmul+0x234>
 8000ad2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000ad6:	f47f aeeb 	bne.w	80008b0 <__aeabi_dmul+0x1f8>
 8000ada:	e712      	b.n	8000902 <__aeabi_dmul+0x24a>

08000adc <__gedf2>:
 8000adc:	f04f 3cff 	mov.w	ip, #4294967295
 8000ae0:	e006      	b.n	8000af0 <__cmpdf2+0x4>
 8000ae2:	bf00      	nop

08000ae4 <__ledf2>:
 8000ae4:	f04f 0c01 	mov.w	ip, #1
 8000ae8:	e002      	b.n	8000af0 <__cmpdf2+0x4>
 8000aea:	bf00      	nop

08000aec <__cmpdf2>:
 8000aec:	f04f 0c01 	mov.w	ip, #1
 8000af0:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000af4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000af8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000afc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b00:	bf18      	it	ne
 8000b02:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000b06:	d01b      	beq.n	8000b40 <__cmpdf2+0x54>
 8000b08:	b001      	add	sp, #4
 8000b0a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000b0e:	bf0c      	ite	eq
 8000b10:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000b14:	ea91 0f03 	teqne	r1, r3
 8000b18:	bf02      	ittt	eq
 8000b1a:	ea90 0f02 	teqeq	r0, r2
 8000b1e:	2000      	moveq	r0, #0
 8000b20:	4770      	bxeq	lr
 8000b22:	f110 0f00 	cmn.w	r0, #0
 8000b26:	ea91 0f03 	teq	r1, r3
 8000b2a:	bf58      	it	pl
 8000b2c:	4299      	cmppl	r1, r3
 8000b2e:	bf08      	it	eq
 8000b30:	4290      	cmpeq	r0, r2
 8000b32:	bf2c      	ite	cs
 8000b34:	17d8      	asrcs	r0, r3, #31
 8000b36:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000b3a:	f040 0001 	orr.w	r0, r0, #1
 8000b3e:	4770      	bx	lr
 8000b40:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b44:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b48:	d102      	bne.n	8000b50 <__cmpdf2+0x64>
 8000b4a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4e:	d107      	bne.n	8000b60 <__cmpdf2+0x74>
 8000b50:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b54:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b58:	d1d6      	bne.n	8000b08 <__cmpdf2+0x1c>
 8000b5a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5e:	d0d3      	beq.n	8000b08 <__cmpdf2+0x1c>
 8000b60:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop

08000b68 <__aeabi_cdrcmple>:
 8000b68:	4684      	mov	ip, r0
 8000b6a:	4610      	mov	r0, r2
 8000b6c:	4662      	mov	r2, ip
 8000b6e:	468c      	mov	ip, r1
 8000b70:	4619      	mov	r1, r3
 8000b72:	4663      	mov	r3, ip
 8000b74:	e000      	b.n	8000b78 <__aeabi_cdcmpeq>
 8000b76:	bf00      	nop

08000b78 <__aeabi_cdcmpeq>:
 8000b78:	b501      	push	{r0, lr}
 8000b7a:	f7ff ffb7 	bl	8000aec <__cmpdf2>
 8000b7e:	2800      	cmp	r0, #0
 8000b80:	bf48      	it	mi
 8000b82:	f110 0f00 	cmnmi.w	r0, #0
 8000b86:	bd01      	pop	{r0, pc}

08000b88 <__aeabi_dcmpeq>:
 8000b88:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b8c:	f7ff fff4 	bl	8000b78 <__aeabi_cdcmpeq>
 8000b90:	bf0c      	ite	eq
 8000b92:	2001      	moveq	r0, #1
 8000b94:	2000      	movne	r0, #0
 8000b96:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b9a:	bf00      	nop

08000b9c <__aeabi_dcmplt>:
 8000b9c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ba0:	f7ff ffea 	bl	8000b78 <__aeabi_cdcmpeq>
 8000ba4:	bf34      	ite	cc
 8000ba6:	2001      	movcc	r0, #1
 8000ba8:	2000      	movcs	r0, #0
 8000baa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000bae:	bf00      	nop

08000bb0 <__aeabi_dcmple>:
 8000bb0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000bb4:	f7ff ffe0 	bl	8000b78 <__aeabi_cdcmpeq>
 8000bb8:	bf94      	ite	ls
 8000bba:	2001      	movls	r0, #1
 8000bbc:	2000      	movhi	r0, #0
 8000bbe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000bc2:	bf00      	nop

08000bc4 <__aeabi_dcmpge>:
 8000bc4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000bc8:	f7ff ffce 	bl	8000b68 <__aeabi_cdrcmple>
 8000bcc:	bf94      	ite	ls
 8000bce:	2001      	movls	r0, #1
 8000bd0:	2000      	movhi	r0, #0
 8000bd2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_dcmpgt>:
 8000bd8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000bdc:	f7ff ffc4 	bl	8000b68 <__aeabi_cdrcmple>
 8000be0:	bf34      	ite	cc
 8000be2:	2001      	movcc	r0, #1
 8000be4:	2000      	movcs	r0, #0
 8000be6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000bea:	bf00      	nop

08000bec <__aeabi_dcmpun>:
 8000bec:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000bf0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000bf4:	d102      	bne.n	8000bfc <__aeabi_dcmpun+0x10>
 8000bf6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000bfa:	d10a      	bne.n	8000c12 <__aeabi_dcmpun+0x26>
 8000bfc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000c00:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000c04:	d102      	bne.n	8000c0c <__aeabi_dcmpun+0x20>
 8000c06:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000c0a:	d102      	bne.n	8000c12 <__aeabi_dcmpun+0x26>
 8000c0c:	f04f 0000 	mov.w	r0, #0
 8000c10:	4770      	bx	lr
 8000c12:	f04f 0001 	mov.w	r0, #1
 8000c16:	4770      	bx	lr

08000c18 <__aeabi_d2iz>:
 8000c18:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c1c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000c20:	d215      	bcs.n	8000c4e <__aeabi_d2iz+0x36>
 8000c22:	d511      	bpl.n	8000c48 <__aeabi_d2iz+0x30>
 8000c24:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000c28:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c2c:	d912      	bls.n	8000c54 <__aeabi_d2iz+0x3c>
 8000c2e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c32:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000c36:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c3a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000c3e:	fa23 f002 	lsr.w	r0, r3, r2
 8000c42:	bf18      	it	ne
 8000c44:	4240      	negne	r0, r0
 8000c46:	4770      	bx	lr
 8000c48:	f04f 0000 	mov.w	r0, #0
 8000c4c:	4770      	bx	lr
 8000c4e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c52:	d105      	bne.n	8000c60 <__aeabi_d2iz+0x48>
 8000c54:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000c58:	bf08      	it	eq
 8000c5a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000c5e:	4770      	bx	lr
 8000c60:	f04f 0000 	mov.w	r0, #0
 8000c64:	4770      	bx	lr
 8000c66:	bf00      	nop

08000c68 <__aeabi_d2uiz>:
 8000c68:	004a      	lsls	r2, r1, #1
 8000c6a:	d211      	bcs.n	8000c90 <__aeabi_d2uiz+0x28>
 8000c6c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000c70:	d211      	bcs.n	8000c96 <__aeabi_d2uiz+0x2e>
 8000c72:	d50d      	bpl.n	8000c90 <__aeabi_d2uiz+0x28>
 8000c74:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000c78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c7c:	d40e      	bmi.n	8000c9c <__aeabi_d2uiz+0x34>
 8000c7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c82:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000c86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c8a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c8e:	4770      	bx	lr
 8000c90:	f04f 0000 	mov.w	r0, #0
 8000c94:	4770      	bx	lr
 8000c96:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c9a:	d102      	bne.n	8000ca2 <__aeabi_d2uiz+0x3a>
 8000c9c:	f04f 30ff 	mov.w	r0, #4294967295
 8000ca0:	4770      	bx	lr
 8000ca2:	f04f 0000 	mov.w	r0, #0
 8000ca6:	4770      	bx	lr

08000ca8 <__aeabi_d2f>:
 8000ca8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000cac:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000cb0:	bf24      	itt	cs
 8000cb2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000cb6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000cba:	d90d      	bls.n	8000cd8 <__aeabi_d2f+0x30>
 8000cbc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000cc0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000cc4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000cc8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000ccc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000cd0:	bf08      	it	eq
 8000cd2:	f020 0001 	biceq.w	r0, r0, #1
 8000cd6:	4770      	bx	lr
 8000cd8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000cdc:	d121      	bne.n	8000d22 <__aeabi_d2f+0x7a>
 8000cde:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000ce2:	bfbc      	itt	lt
 8000ce4:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000ce8:	4770      	bxlt	lr
 8000cea:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000cee:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000cf2:	f1c2 0218 	rsb	r2, r2, #24
 8000cf6:	f1c2 0c20 	rsb	ip, r2, #32
 8000cfa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000cfe:	fa20 f002 	lsr.w	r0, r0, r2
 8000d02:	bf18      	it	ne
 8000d04:	f040 0001 	orrne.w	r0, r0, #1
 8000d08:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000d0c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000d10:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000d14:	ea40 000c 	orr.w	r0, r0, ip
 8000d18:	fa23 f302 	lsr.w	r3, r3, r2
 8000d1c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000d20:	e7cc      	b.n	8000cbc <__aeabi_d2f+0x14>
 8000d22:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000d26:	d107      	bne.n	8000d38 <__aeabi_d2f+0x90>
 8000d28:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000d2c:	bf1e      	ittt	ne
 8000d2e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000d32:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000d36:	4770      	bxne	lr
 8000d38:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000d3c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000d40:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000d44:	4770      	bx	lr
 8000d46:	bf00      	nop

08000d48 <__aeabi_uldivmod>:
 8000d48:	b953      	cbnz	r3, 8000d60 <__aeabi_uldivmod+0x18>
 8000d4a:	b94a      	cbnz	r2, 8000d60 <__aeabi_uldivmod+0x18>
 8000d4c:	2900      	cmp	r1, #0
 8000d4e:	bf08      	it	eq
 8000d50:	2800      	cmpeq	r0, #0
 8000d52:	bf1c      	itt	ne
 8000d54:	f04f 31ff 	movne.w	r1, #4294967295
 8000d58:	f04f 30ff 	movne.w	r0, #4294967295
 8000d5c:	f000 b9be 	b.w	80010dc <__aeabi_idiv0>
 8000d60:	f1ad 0c08 	sub.w	ip, sp, #8
 8000d64:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000d68:	f000 f83c 	bl	8000de4 <__udivmoddi4>
 8000d6c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d70:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d74:	b004      	add	sp, #16
 8000d76:	4770      	bx	lr

08000d78 <__aeabi_d2lz>:
 8000d78:	b538      	push	{r3, r4, r5, lr}
 8000d7a:	2200      	movs	r2, #0
 8000d7c:	2300      	movs	r3, #0
 8000d7e:	4604      	mov	r4, r0
 8000d80:	460d      	mov	r5, r1
 8000d82:	f7ff ff0b 	bl	8000b9c <__aeabi_dcmplt>
 8000d86:	b928      	cbnz	r0, 8000d94 <__aeabi_d2lz+0x1c>
 8000d88:	4620      	mov	r0, r4
 8000d8a:	4629      	mov	r1, r5
 8000d8c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d90:	f000 b80a 	b.w	8000da8 <__aeabi_d2ulz>
 8000d94:	4620      	mov	r0, r4
 8000d96:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000d9a:	f000 f805 	bl	8000da8 <__aeabi_d2ulz>
 8000d9e:	4240      	negs	r0, r0
 8000da0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000da4:	bd38      	pop	{r3, r4, r5, pc}
 8000da6:	bf00      	nop

08000da8 <__aeabi_d2ulz>:
 8000da8:	b5d0      	push	{r4, r6, r7, lr}
 8000daa:	4b0c      	ldr	r3, [pc, #48]	@ (8000ddc <__aeabi_d2ulz+0x34>)
 8000dac:	2200      	movs	r2, #0
 8000dae:	4606      	mov	r6, r0
 8000db0:	460f      	mov	r7, r1
 8000db2:	f7ff fc81 	bl	80006b8 <__aeabi_dmul>
 8000db6:	f7ff ff57 	bl	8000c68 <__aeabi_d2uiz>
 8000dba:	4604      	mov	r4, r0
 8000dbc:	f7ff fc02 	bl	80005c4 <__aeabi_ui2d>
 8000dc0:	4b07      	ldr	r3, [pc, #28]	@ (8000de0 <__aeabi_d2ulz+0x38>)
 8000dc2:	2200      	movs	r2, #0
 8000dc4:	f7ff fc78 	bl	80006b8 <__aeabi_dmul>
 8000dc8:	4602      	mov	r2, r0
 8000dca:	460b      	mov	r3, r1
 8000dcc:	4630      	mov	r0, r6
 8000dce:	4639      	mov	r1, r7
 8000dd0:	f7ff faba 	bl	8000348 <__aeabi_dsub>
 8000dd4:	f7ff ff48 	bl	8000c68 <__aeabi_d2uiz>
 8000dd8:	4621      	mov	r1, r4
 8000dda:	bdd0      	pop	{r4, r6, r7, pc}
 8000ddc:	3df00000 	.word	0x3df00000
 8000de0:	41f00000 	.word	0x41f00000

08000de4 <__udivmoddi4>:
 8000de4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000de8:	9d08      	ldr	r5, [sp, #32]
 8000dea:	468e      	mov	lr, r1
 8000dec:	4604      	mov	r4, r0
 8000dee:	4688      	mov	r8, r1
 8000df0:	2b00      	cmp	r3, #0
 8000df2:	d14a      	bne.n	8000e8a <__udivmoddi4+0xa6>
 8000df4:	428a      	cmp	r2, r1
 8000df6:	4617      	mov	r7, r2
 8000df8:	d962      	bls.n	8000ec0 <__udivmoddi4+0xdc>
 8000dfa:	fab2 f682 	clz	r6, r2
 8000dfe:	b14e      	cbz	r6, 8000e14 <__udivmoddi4+0x30>
 8000e00:	f1c6 0320 	rsb	r3, r6, #32
 8000e04:	fa01 f806 	lsl.w	r8, r1, r6
 8000e08:	fa20 f303 	lsr.w	r3, r0, r3
 8000e0c:	40b7      	lsls	r7, r6
 8000e0e:	ea43 0808 	orr.w	r8, r3, r8
 8000e12:	40b4      	lsls	r4, r6
 8000e14:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e18:	fa1f fc87 	uxth.w	ip, r7
 8000e1c:	fbb8 f1fe 	udiv	r1, r8, lr
 8000e20:	0c23      	lsrs	r3, r4, #16
 8000e22:	fb0e 8811 	mls	r8, lr, r1, r8
 8000e26:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000e2a:	fb01 f20c 	mul.w	r2, r1, ip
 8000e2e:	429a      	cmp	r2, r3
 8000e30:	d909      	bls.n	8000e46 <__udivmoddi4+0x62>
 8000e32:	18fb      	adds	r3, r7, r3
 8000e34:	f101 30ff 	add.w	r0, r1, #4294967295
 8000e38:	f080 80ea 	bcs.w	8001010 <__udivmoddi4+0x22c>
 8000e3c:	429a      	cmp	r2, r3
 8000e3e:	f240 80e7 	bls.w	8001010 <__udivmoddi4+0x22c>
 8000e42:	3902      	subs	r1, #2
 8000e44:	443b      	add	r3, r7
 8000e46:	1a9a      	subs	r2, r3, r2
 8000e48:	b2a3      	uxth	r3, r4
 8000e4a:	fbb2 f0fe 	udiv	r0, r2, lr
 8000e4e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000e52:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000e56:	fb00 fc0c 	mul.w	ip, r0, ip
 8000e5a:	459c      	cmp	ip, r3
 8000e5c:	d909      	bls.n	8000e72 <__udivmoddi4+0x8e>
 8000e5e:	18fb      	adds	r3, r7, r3
 8000e60:	f100 32ff 	add.w	r2, r0, #4294967295
 8000e64:	f080 80d6 	bcs.w	8001014 <__udivmoddi4+0x230>
 8000e68:	459c      	cmp	ip, r3
 8000e6a:	f240 80d3 	bls.w	8001014 <__udivmoddi4+0x230>
 8000e6e:	443b      	add	r3, r7
 8000e70:	3802      	subs	r0, #2
 8000e72:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000e76:	eba3 030c 	sub.w	r3, r3, ip
 8000e7a:	2100      	movs	r1, #0
 8000e7c:	b11d      	cbz	r5, 8000e86 <__udivmoddi4+0xa2>
 8000e7e:	40f3      	lsrs	r3, r6
 8000e80:	2200      	movs	r2, #0
 8000e82:	e9c5 3200 	strd	r3, r2, [r5]
 8000e86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e8a:	428b      	cmp	r3, r1
 8000e8c:	d905      	bls.n	8000e9a <__udivmoddi4+0xb6>
 8000e8e:	b10d      	cbz	r5, 8000e94 <__udivmoddi4+0xb0>
 8000e90:	e9c5 0100 	strd	r0, r1, [r5]
 8000e94:	2100      	movs	r1, #0
 8000e96:	4608      	mov	r0, r1
 8000e98:	e7f5      	b.n	8000e86 <__udivmoddi4+0xa2>
 8000e9a:	fab3 f183 	clz	r1, r3
 8000e9e:	2900      	cmp	r1, #0
 8000ea0:	d146      	bne.n	8000f30 <__udivmoddi4+0x14c>
 8000ea2:	4573      	cmp	r3, lr
 8000ea4:	d302      	bcc.n	8000eac <__udivmoddi4+0xc8>
 8000ea6:	4282      	cmp	r2, r0
 8000ea8:	f200 8105 	bhi.w	80010b6 <__udivmoddi4+0x2d2>
 8000eac:	1a84      	subs	r4, r0, r2
 8000eae:	eb6e 0203 	sbc.w	r2, lr, r3
 8000eb2:	2001      	movs	r0, #1
 8000eb4:	4690      	mov	r8, r2
 8000eb6:	2d00      	cmp	r5, #0
 8000eb8:	d0e5      	beq.n	8000e86 <__udivmoddi4+0xa2>
 8000eba:	e9c5 4800 	strd	r4, r8, [r5]
 8000ebe:	e7e2      	b.n	8000e86 <__udivmoddi4+0xa2>
 8000ec0:	2a00      	cmp	r2, #0
 8000ec2:	f000 8090 	beq.w	8000fe6 <__udivmoddi4+0x202>
 8000ec6:	fab2 f682 	clz	r6, r2
 8000eca:	2e00      	cmp	r6, #0
 8000ecc:	f040 80a4 	bne.w	8001018 <__udivmoddi4+0x234>
 8000ed0:	1a8a      	subs	r2, r1, r2
 8000ed2:	0c03      	lsrs	r3, r0, #16
 8000ed4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ed8:	b280      	uxth	r0, r0
 8000eda:	b2bc      	uxth	r4, r7
 8000edc:	2101      	movs	r1, #1
 8000ede:	fbb2 fcfe 	udiv	ip, r2, lr
 8000ee2:	fb0e 221c 	mls	r2, lr, ip, r2
 8000ee6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000eea:	fb04 f20c 	mul.w	r2, r4, ip
 8000eee:	429a      	cmp	r2, r3
 8000ef0:	d907      	bls.n	8000f02 <__udivmoddi4+0x11e>
 8000ef2:	18fb      	adds	r3, r7, r3
 8000ef4:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000ef8:	d202      	bcs.n	8000f00 <__udivmoddi4+0x11c>
 8000efa:	429a      	cmp	r2, r3
 8000efc:	f200 80e0 	bhi.w	80010c0 <__udivmoddi4+0x2dc>
 8000f00:	46c4      	mov	ip, r8
 8000f02:	1a9b      	subs	r3, r3, r2
 8000f04:	fbb3 f2fe 	udiv	r2, r3, lr
 8000f08:	fb0e 3312 	mls	r3, lr, r2, r3
 8000f0c:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000f10:	fb02 f404 	mul.w	r4, r2, r4
 8000f14:	429c      	cmp	r4, r3
 8000f16:	d907      	bls.n	8000f28 <__udivmoddi4+0x144>
 8000f18:	18fb      	adds	r3, r7, r3
 8000f1a:	f102 30ff 	add.w	r0, r2, #4294967295
 8000f1e:	d202      	bcs.n	8000f26 <__udivmoddi4+0x142>
 8000f20:	429c      	cmp	r4, r3
 8000f22:	f200 80ca 	bhi.w	80010ba <__udivmoddi4+0x2d6>
 8000f26:	4602      	mov	r2, r0
 8000f28:	1b1b      	subs	r3, r3, r4
 8000f2a:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000f2e:	e7a5      	b.n	8000e7c <__udivmoddi4+0x98>
 8000f30:	f1c1 0620 	rsb	r6, r1, #32
 8000f34:	408b      	lsls	r3, r1
 8000f36:	fa22 f706 	lsr.w	r7, r2, r6
 8000f3a:	431f      	orrs	r7, r3
 8000f3c:	fa0e f401 	lsl.w	r4, lr, r1
 8000f40:	fa20 f306 	lsr.w	r3, r0, r6
 8000f44:	fa2e fe06 	lsr.w	lr, lr, r6
 8000f48:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000f4c:	4323      	orrs	r3, r4
 8000f4e:	fa00 f801 	lsl.w	r8, r0, r1
 8000f52:	fa1f fc87 	uxth.w	ip, r7
 8000f56:	fbbe f0f9 	udiv	r0, lr, r9
 8000f5a:	0c1c      	lsrs	r4, r3, #16
 8000f5c:	fb09 ee10 	mls	lr, r9, r0, lr
 8000f60:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000f64:	fb00 fe0c 	mul.w	lr, r0, ip
 8000f68:	45a6      	cmp	lr, r4
 8000f6a:	fa02 f201 	lsl.w	r2, r2, r1
 8000f6e:	d909      	bls.n	8000f84 <__udivmoddi4+0x1a0>
 8000f70:	193c      	adds	r4, r7, r4
 8000f72:	f100 3aff 	add.w	sl, r0, #4294967295
 8000f76:	f080 809c 	bcs.w	80010b2 <__udivmoddi4+0x2ce>
 8000f7a:	45a6      	cmp	lr, r4
 8000f7c:	f240 8099 	bls.w	80010b2 <__udivmoddi4+0x2ce>
 8000f80:	3802      	subs	r0, #2
 8000f82:	443c      	add	r4, r7
 8000f84:	eba4 040e 	sub.w	r4, r4, lr
 8000f88:	fa1f fe83 	uxth.w	lr, r3
 8000f8c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000f90:	fb09 4413 	mls	r4, r9, r3, r4
 8000f94:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000f98:	fb03 fc0c 	mul.w	ip, r3, ip
 8000f9c:	45a4      	cmp	ip, r4
 8000f9e:	d908      	bls.n	8000fb2 <__udivmoddi4+0x1ce>
 8000fa0:	193c      	adds	r4, r7, r4
 8000fa2:	f103 3eff 	add.w	lr, r3, #4294967295
 8000fa6:	f080 8082 	bcs.w	80010ae <__udivmoddi4+0x2ca>
 8000faa:	45a4      	cmp	ip, r4
 8000fac:	d97f      	bls.n	80010ae <__udivmoddi4+0x2ca>
 8000fae:	3b02      	subs	r3, #2
 8000fb0:	443c      	add	r4, r7
 8000fb2:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000fb6:	eba4 040c 	sub.w	r4, r4, ip
 8000fba:	fba0 ec02 	umull	lr, ip, r0, r2
 8000fbe:	4564      	cmp	r4, ip
 8000fc0:	4673      	mov	r3, lr
 8000fc2:	46e1      	mov	r9, ip
 8000fc4:	d362      	bcc.n	800108c <__udivmoddi4+0x2a8>
 8000fc6:	d05f      	beq.n	8001088 <__udivmoddi4+0x2a4>
 8000fc8:	b15d      	cbz	r5, 8000fe2 <__udivmoddi4+0x1fe>
 8000fca:	ebb8 0203 	subs.w	r2, r8, r3
 8000fce:	eb64 0409 	sbc.w	r4, r4, r9
 8000fd2:	fa04 f606 	lsl.w	r6, r4, r6
 8000fd6:	fa22 f301 	lsr.w	r3, r2, r1
 8000fda:	431e      	orrs	r6, r3
 8000fdc:	40cc      	lsrs	r4, r1
 8000fde:	e9c5 6400 	strd	r6, r4, [r5]
 8000fe2:	2100      	movs	r1, #0
 8000fe4:	e74f      	b.n	8000e86 <__udivmoddi4+0xa2>
 8000fe6:	fbb1 fcf2 	udiv	ip, r1, r2
 8000fea:	0c01      	lsrs	r1, r0, #16
 8000fec:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000ff0:	b280      	uxth	r0, r0
 8000ff2:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000ff6:	463b      	mov	r3, r7
 8000ff8:	4638      	mov	r0, r7
 8000ffa:	463c      	mov	r4, r7
 8000ffc:	46b8      	mov	r8, r7
 8000ffe:	46be      	mov	lr, r7
 8001000:	2620      	movs	r6, #32
 8001002:	fbb1 f1f7 	udiv	r1, r1, r7
 8001006:	eba2 0208 	sub.w	r2, r2, r8
 800100a:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800100e:	e766      	b.n	8000ede <__udivmoddi4+0xfa>
 8001010:	4601      	mov	r1, r0
 8001012:	e718      	b.n	8000e46 <__udivmoddi4+0x62>
 8001014:	4610      	mov	r0, r2
 8001016:	e72c      	b.n	8000e72 <__udivmoddi4+0x8e>
 8001018:	f1c6 0220 	rsb	r2, r6, #32
 800101c:	fa2e f302 	lsr.w	r3, lr, r2
 8001020:	40b7      	lsls	r7, r6
 8001022:	40b1      	lsls	r1, r6
 8001024:	fa20 f202 	lsr.w	r2, r0, r2
 8001028:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800102c:	430a      	orrs	r2, r1
 800102e:	fbb3 f8fe 	udiv	r8, r3, lr
 8001032:	b2bc      	uxth	r4, r7
 8001034:	fb0e 3318 	mls	r3, lr, r8, r3
 8001038:	0c11      	lsrs	r1, r2, #16
 800103a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800103e:	fb08 f904 	mul.w	r9, r8, r4
 8001042:	40b0      	lsls	r0, r6
 8001044:	4589      	cmp	r9, r1
 8001046:	ea4f 4310 	mov.w	r3, r0, lsr #16
 800104a:	b280      	uxth	r0, r0
 800104c:	d93e      	bls.n	80010cc <__udivmoddi4+0x2e8>
 800104e:	1879      	adds	r1, r7, r1
 8001050:	f108 3cff 	add.w	ip, r8, #4294967295
 8001054:	d201      	bcs.n	800105a <__udivmoddi4+0x276>
 8001056:	4589      	cmp	r9, r1
 8001058:	d81f      	bhi.n	800109a <__udivmoddi4+0x2b6>
 800105a:	eba1 0109 	sub.w	r1, r1, r9
 800105e:	fbb1 f9fe 	udiv	r9, r1, lr
 8001062:	fb09 f804 	mul.w	r8, r9, r4
 8001066:	fb0e 1119 	mls	r1, lr, r9, r1
 800106a:	b292      	uxth	r2, r2
 800106c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8001070:	4542      	cmp	r2, r8
 8001072:	d229      	bcs.n	80010c8 <__udivmoddi4+0x2e4>
 8001074:	18ba      	adds	r2, r7, r2
 8001076:	f109 31ff 	add.w	r1, r9, #4294967295
 800107a:	d2c4      	bcs.n	8001006 <__udivmoddi4+0x222>
 800107c:	4542      	cmp	r2, r8
 800107e:	d2c2      	bcs.n	8001006 <__udivmoddi4+0x222>
 8001080:	f1a9 0102 	sub.w	r1, r9, #2
 8001084:	443a      	add	r2, r7
 8001086:	e7be      	b.n	8001006 <__udivmoddi4+0x222>
 8001088:	45f0      	cmp	r8, lr
 800108a:	d29d      	bcs.n	8000fc8 <__udivmoddi4+0x1e4>
 800108c:	ebbe 0302 	subs.w	r3, lr, r2
 8001090:	eb6c 0c07 	sbc.w	ip, ip, r7
 8001094:	3801      	subs	r0, #1
 8001096:	46e1      	mov	r9, ip
 8001098:	e796      	b.n	8000fc8 <__udivmoddi4+0x1e4>
 800109a:	eba7 0909 	sub.w	r9, r7, r9
 800109e:	4449      	add	r1, r9
 80010a0:	f1a8 0c02 	sub.w	ip, r8, #2
 80010a4:	fbb1 f9fe 	udiv	r9, r1, lr
 80010a8:	fb09 f804 	mul.w	r8, r9, r4
 80010ac:	e7db      	b.n	8001066 <__udivmoddi4+0x282>
 80010ae:	4673      	mov	r3, lr
 80010b0:	e77f      	b.n	8000fb2 <__udivmoddi4+0x1ce>
 80010b2:	4650      	mov	r0, sl
 80010b4:	e766      	b.n	8000f84 <__udivmoddi4+0x1a0>
 80010b6:	4608      	mov	r0, r1
 80010b8:	e6fd      	b.n	8000eb6 <__udivmoddi4+0xd2>
 80010ba:	443b      	add	r3, r7
 80010bc:	3a02      	subs	r2, #2
 80010be:	e733      	b.n	8000f28 <__udivmoddi4+0x144>
 80010c0:	f1ac 0c02 	sub.w	ip, ip, #2
 80010c4:	443b      	add	r3, r7
 80010c6:	e71c      	b.n	8000f02 <__udivmoddi4+0x11e>
 80010c8:	4649      	mov	r1, r9
 80010ca:	e79c      	b.n	8001006 <__udivmoddi4+0x222>
 80010cc:	eba1 0109 	sub.w	r1, r1, r9
 80010d0:	46c4      	mov	ip, r8
 80010d2:	fbb1 f9fe 	udiv	r9, r1, lr
 80010d6:	fb09 f804 	mul.w	r8, r9, r4
 80010da:	e7c4      	b.n	8001066 <__udivmoddi4+0x282>

080010dc <__aeabi_idiv0>:
 80010dc:	4770      	bx	lr
 80010de:	bf00      	nop

080010e0 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void) {
 80010e0:	b580      	push	{r7, lr}
 80010e2:	b084      	sub	sp, #16
 80010e4:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN ADC1_Init 0 */

	/* USER CODE END ADC1_Init 0 */

	ADC_ChannelConfTypeDef sConfig = { 0 };
 80010e6:	463b      	mov	r3, r7
 80010e8:	2200      	movs	r2, #0
 80010ea:	601a      	str	r2, [r3, #0]
 80010ec:	605a      	str	r2, [r3, #4]
 80010ee:	609a      	str	r2, [r3, #8]
 80010f0:	60da      	str	r2, [r3, #12]

	/* USER CODE END ADC1_Init 1 */

	/** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
	 */
	hadc1.Instance = ADC1;
 80010f2:	4b22      	ldr	r3, [pc, #136]	@ (800117c <MX_ADC1_Init+0x9c>)
 80010f4:	4a22      	ldr	r2, [pc, #136]	@ (8001180 <MX_ADC1_Init+0xa0>)
 80010f6:	601a      	str	r2, [r3, #0]
	hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80010f8:	4b20      	ldr	r3, [pc, #128]	@ (800117c <MX_ADC1_Init+0x9c>)
 80010fa:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80010fe:	605a      	str	r2, [r3, #4]
	hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001100:	4b1e      	ldr	r3, [pc, #120]	@ (800117c <MX_ADC1_Init+0x9c>)
 8001102:	2200      	movs	r2, #0
 8001104:	609a      	str	r2, [r3, #8]
	hadc1.Init.ScanConvMode = DISABLE;
 8001106:	4b1d      	ldr	r3, [pc, #116]	@ (800117c <MX_ADC1_Init+0x9c>)
 8001108:	2200      	movs	r2, #0
 800110a:	611a      	str	r2, [r3, #16]
	hadc1.Init.ContinuousConvMode = ENABLE;
 800110c:	4b1b      	ldr	r3, [pc, #108]	@ (800117c <MX_ADC1_Init+0x9c>)
 800110e:	2201      	movs	r2, #1
 8001110:	761a      	strb	r2, [r3, #24]
	hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001112:	4b1a      	ldr	r3, [pc, #104]	@ (800117c <MX_ADC1_Init+0x9c>)
 8001114:	2200      	movs	r2, #0
 8001116:	f883 2020 	strb.w	r2, [r3, #32]
	hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 800111a:	4b18      	ldr	r3, [pc, #96]	@ (800117c <MX_ADC1_Init+0x9c>)
 800111c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8001120:	62da      	str	r2, [r3, #44]	@ 0x2c
	hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T3_TRGO;
 8001122:	4b16      	ldr	r3, [pc, #88]	@ (800117c <MX_ADC1_Init+0x9c>)
 8001124:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8001128:	629a      	str	r2, [r3, #40]	@ 0x28
	hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800112a:	4b14      	ldr	r3, [pc, #80]	@ (800117c <MX_ADC1_Init+0x9c>)
 800112c:	2200      	movs	r2, #0
 800112e:	60da      	str	r2, [r3, #12]
	hadc1.Init.NbrOfConversion = 1;
 8001130:	4b12      	ldr	r3, [pc, #72]	@ (800117c <MX_ADC1_Init+0x9c>)
 8001132:	2201      	movs	r2, #1
 8001134:	61da      	str	r2, [r3, #28]
	hadc1.Init.DMAContinuousRequests = DISABLE;
 8001136:	4b11      	ldr	r3, [pc, #68]	@ (800117c <MX_ADC1_Init+0x9c>)
 8001138:	2200      	movs	r2, #0
 800113a:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
	hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800113e:	4b0f      	ldr	r3, [pc, #60]	@ (800117c <MX_ADC1_Init+0x9c>)
 8001140:	2201      	movs	r2, #1
 8001142:	615a      	str	r2, [r3, #20]
	if (HAL_ADC_Init(&hadc1) != HAL_OK) {
 8001144:	480d      	ldr	r0, [pc, #52]	@ (800117c <MX_ADC1_Init+0x9c>)
 8001146:	f000 fefb 	bl	8001f40 <HAL_ADC_Init>
 800114a:	4603      	mov	r3, r0
 800114c:	2b00      	cmp	r3, #0
 800114e:	d001      	beq.n	8001154 <MX_ADC1_Init+0x74>
		Error_Handler();
 8001150:	f000 f95a 	bl	8001408 <Error_Handler>
	}

	/** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	 */
	sConfig.Channel = ADC_CHANNEL_5;
 8001154:	2305      	movs	r3, #5
 8001156:	603b      	str	r3, [r7, #0]
	sConfig.Rank = 1;
 8001158:	2301      	movs	r3, #1
 800115a:	607b      	str	r3, [r7, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800115c:	2300      	movs	r3, #0
 800115e:	60bb      	str	r3, [r7, #8]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 8001160:	463b      	mov	r3, r7
 8001162:	4619      	mov	r1, r3
 8001164:	4805      	ldr	r0, [pc, #20]	@ (800117c <MX_ADC1_Init+0x9c>)
 8001166:	f001 f853 	bl	8002210 <HAL_ADC_ConfigChannel>
 800116a:	4603      	mov	r3, r0
 800116c:	2b00      	cmp	r3, #0
 800116e:	d001      	beq.n	8001174 <MX_ADC1_Init+0x94>
		Error_Handler();
 8001170:	f000 f94a 	bl	8001408 <Error_Handler>
	}
	/* USER CODE BEGIN ADC1_Init 2 */

	/* USER CODE END ADC1_Init 2 */
}
 8001174:	bf00      	nop
 8001176:	3710      	adds	r7, #16
 8001178:	46bd      	mov	sp, r7
 800117a:	bd80      	pop	{r7, pc}
 800117c:	200001f4 	.word	0x200001f4
 8001180:	40012000 	.word	0x40012000

08001184 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef *adcHandle) {
 8001184:	b580      	push	{r7, lr}
 8001186:	b08a      	sub	sp, #40	@ 0x28
 8001188:	af00      	add	r7, sp, #0
 800118a:	6078      	str	r0, [r7, #4]

	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 800118c:	f107 0314 	add.w	r3, r7, #20
 8001190:	2200      	movs	r2, #0
 8001192:	601a      	str	r2, [r3, #0]
 8001194:	605a      	str	r2, [r3, #4]
 8001196:	609a      	str	r2, [r3, #8]
 8001198:	60da      	str	r2, [r3, #12]
 800119a:	611a      	str	r2, [r3, #16]
	if (adcHandle->Instance == ADC1) {
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	4a33      	ldr	r2, [pc, #204]	@ (8001270 <HAL_ADC_MspInit+0xec>)
 80011a2:	4293      	cmp	r3, r2
 80011a4:	d15f      	bne.n	8001266 <HAL_ADC_MspInit+0xe2>
		/* USER CODE BEGIN ADC1_MspInit 0 */

		/* USER CODE END ADC1_MspInit 0 */
		/* ADC1 clock enable */
		__HAL_RCC_ADC1_CLK_ENABLE();
 80011a6:	2300      	movs	r3, #0
 80011a8:	613b      	str	r3, [r7, #16]
 80011aa:	4b32      	ldr	r3, [pc, #200]	@ (8001274 <HAL_ADC_MspInit+0xf0>)
 80011ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80011ae:	4a31      	ldr	r2, [pc, #196]	@ (8001274 <HAL_ADC_MspInit+0xf0>)
 80011b0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80011b4:	6453      	str	r3, [r2, #68]	@ 0x44
 80011b6:	4b2f      	ldr	r3, [pc, #188]	@ (8001274 <HAL_ADC_MspInit+0xf0>)
 80011b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80011ba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80011be:	613b      	str	r3, [r7, #16]
 80011c0:	693b      	ldr	r3, [r7, #16]

		__HAL_RCC_GPIOA_CLK_ENABLE();
 80011c2:	2300      	movs	r3, #0
 80011c4:	60fb      	str	r3, [r7, #12]
 80011c6:	4b2b      	ldr	r3, [pc, #172]	@ (8001274 <HAL_ADC_MspInit+0xf0>)
 80011c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011ca:	4a2a      	ldr	r2, [pc, #168]	@ (8001274 <HAL_ADC_MspInit+0xf0>)
 80011cc:	f043 0301 	orr.w	r3, r3, #1
 80011d0:	6313      	str	r3, [r2, #48]	@ 0x30
 80011d2:	4b28      	ldr	r3, [pc, #160]	@ (8001274 <HAL_ADC_MspInit+0xf0>)
 80011d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011d6:	f003 0301 	and.w	r3, r3, #1
 80011da:	60fb      	str	r3, [r7, #12]
 80011dc:	68fb      	ldr	r3, [r7, #12]
		/**ADC1 GPIO Configuration
		 PA5         ------> ADC1_IN5
		 */
		GPIO_InitStruct.Pin = GPIO_PIN_5;
 80011de:	2320      	movs	r3, #32
 80011e0:	617b      	str	r3, [r7, #20]
		GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80011e2:	2303      	movs	r3, #3
 80011e4:	61bb      	str	r3, [r7, #24]
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011e6:	2300      	movs	r3, #0
 80011e8:	61fb      	str	r3, [r7, #28]
		HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011ea:	f107 0314 	add.w	r3, r7, #20
 80011ee:	4619      	mov	r1, r3
 80011f0:	4821      	ldr	r0, [pc, #132]	@ (8001278 <HAL_ADC_MspInit+0xf4>)
 80011f2:	f002 f917 	bl	8003424 <HAL_GPIO_Init>

		/* ADC1 DMA Init */
		/* ADC1 Init */
		hdma_adc1.Instance = DMA2_Stream0;
 80011f6:	4b21      	ldr	r3, [pc, #132]	@ (800127c <HAL_ADC_MspInit+0xf8>)
 80011f8:	4a21      	ldr	r2, [pc, #132]	@ (8001280 <HAL_ADC_MspInit+0xfc>)
 80011fa:	601a      	str	r2, [r3, #0]
		hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 80011fc:	4b1f      	ldr	r3, [pc, #124]	@ (800127c <HAL_ADC_MspInit+0xf8>)
 80011fe:	2200      	movs	r2, #0
 8001200:	605a      	str	r2, [r3, #4]
		hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001202:	4b1e      	ldr	r3, [pc, #120]	@ (800127c <HAL_ADC_MspInit+0xf8>)
 8001204:	2200      	movs	r2, #0
 8001206:	609a      	str	r2, [r3, #8]
		hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001208:	4b1c      	ldr	r3, [pc, #112]	@ (800127c <HAL_ADC_MspInit+0xf8>)
 800120a:	2200      	movs	r2, #0
 800120c:	60da      	str	r2, [r3, #12]
		hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800120e:	4b1b      	ldr	r3, [pc, #108]	@ (800127c <HAL_ADC_MspInit+0xf8>)
 8001210:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001214:	611a      	str	r2, [r3, #16]
		hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001216:	4b19      	ldr	r3, [pc, #100]	@ (800127c <HAL_ADC_MspInit+0xf8>)
 8001218:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800121c:	615a      	str	r2, [r3, #20]
		hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800121e:	4b17      	ldr	r3, [pc, #92]	@ (800127c <HAL_ADC_MspInit+0xf8>)
 8001220:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001224:	619a      	str	r2, [r3, #24]
		hdma_adc1.Init.Mode = DMA_NORMAL;
 8001226:	4b15      	ldr	r3, [pc, #84]	@ (800127c <HAL_ADC_MspInit+0xf8>)
 8001228:	2200      	movs	r2, #0
 800122a:	61da      	str	r2, [r3, #28]
		hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800122c:	4b13      	ldr	r3, [pc, #76]	@ (800127c <HAL_ADC_MspInit+0xf8>)
 800122e:	2200      	movs	r2, #0
 8001230:	621a      	str	r2, [r3, #32]
		hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8001232:	4b12      	ldr	r3, [pc, #72]	@ (800127c <HAL_ADC_MspInit+0xf8>)
 8001234:	2204      	movs	r2, #4
 8001236:	625a      	str	r2, [r3, #36]	@ 0x24
		hdma_adc1.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8001238:	4b10      	ldr	r3, [pc, #64]	@ (800127c <HAL_ADC_MspInit+0xf8>)
 800123a:	2203      	movs	r2, #3
 800123c:	629a      	str	r2, [r3, #40]	@ 0x28
		hdma_adc1.Init.MemBurst = DMA_MBURST_SINGLE;
 800123e:	4b0f      	ldr	r3, [pc, #60]	@ (800127c <HAL_ADC_MspInit+0xf8>)
 8001240:	2200      	movs	r2, #0
 8001242:	62da      	str	r2, [r3, #44]	@ 0x2c
		hdma_adc1.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8001244:	4b0d      	ldr	r3, [pc, #52]	@ (800127c <HAL_ADC_MspInit+0xf8>)
 8001246:	2200      	movs	r2, #0
 8001248:	631a      	str	r2, [r3, #48]	@ 0x30
		if (HAL_DMA_Init(&hdma_adc1) != HAL_OK) {
 800124a:	480c      	ldr	r0, [pc, #48]	@ (800127c <HAL_ADC_MspInit+0xf8>)
 800124c:	f001 fd7a 	bl	8002d44 <HAL_DMA_Init>
 8001250:	4603      	mov	r3, r0
 8001252:	2b00      	cmp	r3, #0
 8001254:	d001      	beq.n	800125a <HAL_ADC_MspInit+0xd6>
			Error_Handler();
 8001256:	f000 f8d7 	bl	8001408 <Error_Handler>
		}

		__HAL_LINKDMA(adcHandle, DMA_Handle, hdma_adc1);
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	4a07      	ldr	r2, [pc, #28]	@ (800127c <HAL_ADC_MspInit+0xf8>)
 800125e:	639a      	str	r2, [r3, #56]	@ 0x38
 8001260:	4a06      	ldr	r2, [pc, #24]	@ (800127c <HAL_ADC_MspInit+0xf8>)
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	6393      	str	r3, [r2, #56]	@ 0x38

		/* USER CODE BEGIN ADC1_MspInit 1 */

		/* USER CODE END ADC1_MspInit 1 */
	}
}
 8001266:	bf00      	nop
 8001268:	3728      	adds	r7, #40	@ 0x28
 800126a:	46bd      	mov	sp, r7
 800126c:	bd80      	pop	{r7, pc}
 800126e:	bf00      	nop
 8001270:	40012000 	.word	0x40012000
 8001274:	40023800 	.word	0x40023800
 8001278:	40020000 	.word	0x40020000
 800127c:	2000023c 	.word	0x2000023c
 8001280:	40026410 	.word	0x40026410

08001284 <HAL_ADC_ConvCpltCallback>:
extern uint8_t Sign_samplingOver;
extern uint16_t adc_cache[adc_cache_size];
// ADC_DMA锟截碉拷锟斤拷锟斤拷锟捷憋拷志位锟叫讹拷cpu锟斤拷前状态锟斤拷执锟叫ｏ拷锟斤拷锟斤拷锟斤拷锟斤拷ADC锟斤拷锟斤拷 or 停止锟斤拷锟斤拷锟斤拷锟饺达拷cpu锟斤拷图锟斤拷
// ADC_DMAConvCplt
// HAL_ADC_ConvCpltCallback
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc) {
 8001284:	b580      	push	{r7, lr}
 8001286:	b082      	sub	sp, #8
 8001288:	af00      	add	r7, sp, #0
 800128a:	6078      	str	r0, [r7, #4]
	// 锟斤拷锟斤拷DMA锟斤拷锟捷达拷锟斤拷锟斤拷希锟斤拷锟街疚伙拷锟�1
	Sign_samplingOver = 1;
 800128c:	4b09      	ldr	r3, [pc, #36]	@ (80012b4 <HAL_ADC_ConvCpltCallback+0x30>)
 800128e:	2201      	movs	r2, #1
 8001290:	701a      	strb	r2, [r3, #0]
	// 锟斤拷锟斤拷卸媳锟街疚�
	//__HAL_DMA_CLEAR_FLAG(&hdma_adc1, DMA_FLAG_TCIF0_4);
	// 锟叫讹拷cpu状态
	if (Sign_samplingOver == 1) {
 8001292:	4b08      	ldr	r3, [pc, #32]	@ (80012b4 <HAL_ADC_ConvCpltCallback+0x30>)
 8001294:	781b      	ldrb	r3, [r3, #0]
 8001296:	2b01      	cmp	r3, #1
 8001298:	d008      	beq.n	80012ac <HAL_ADC_ConvCpltCallback+0x28>
		// DMA选锟斤拷normal模式锟斤拷锟斤拷锟劫匡拷锟斤拷锟斤拷锟截憋拷
		;
	} else {
		// cpu未准锟斤拷锟矫伙拷图锟斤拷DMA锟斤拷锟斤拷锟斤拷锟斤拷锟斤拷锟斤拷
		// 锟斤拷志位锟斤拷0锟斤拷锟斤拷始锟斤拷锟斤拷锟斤拷锟斤拷锟斤拷锟斤拷
		Sign_samplingOver = 0;
 800129a:	4b06      	ldr	r3, [pc, #24]	@ (80012b4 <HAL_ADC_ConvCpltCallback+0x30>)
 800129c:	2200      	movs	r2, #0
 800129e:	701a      	strb	r2, [r3, #0]
		HAL_ADC_Start_DMA(&hadc1, (uint32_t*) adc_cache, adc_cache_size);
 80012a0:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80012a4:	4904      	ldr	r1, [pc, #16]	@ (80012b8 <HAL_ADC_ConvCpltCallback+0x34>)
 80012a6:	4805      	ldr	r0, [pc, #20]	@ (80012bc <HAL_ADC_ConvCpltCallback+0x38>)
 80012a8:	f000 fe8e 	bl	8001fc8 <HAL_ADC_Start_DMA>
	}
}
 80012ac:	bf00      	nop
 80012ae:	3708      	adds	r7, #8
 80012b0:	46bd      	mov	sp, r7
 80012b2:	bd80      	pop	{r7, pc}
 80012b4:	20000310 	.word	0x20000310
 80012b8:	20000314 	.word	0x20000314
 80012bc:	200001f4 	.word	0x200001f4

080012c0 <MX_DAC_Init>:
DAC_HandleTypeDef hdac;
DMA_HandleTypeDef hdma_dac1;

/* DAC init function */
void MX_DAC_Init(void)
{
 80012c0:	b580      	push	{r7, lr}
 80012c2:	b082      	sub	sp, #8
 80012c4:	af00      	add	r7, sp, #0

    /* USER CODE BEGIN DAC_Init 0 */

    /* USER CODE END DAC_Init 0 */

    DAC_ChannelConfTypeDef sConfig = {0};
 80012c6:	463b      	mov	r3, r7
 80012c8:	2200      	movs	r2, #0
 80012ca:	601a      	str	r2, [r3, #0]
 80012cc:	605a      	str	r2, [r3, #4]

    /* USER CODE END DAC_Init 1 */

    /** DAC Initialization
     */
    hdac.Instance = DAC;
 80012ce:	4b0f      	ldr	r3, [pc, #60]	@ (800130c <MX_DAC_Init+0x4c>)
 80012d0:	4a0f      	ldr	r2, [pc, #60]	@ (8001310 <MX_DAC_Init+0x50>)
 80012d2:	601a      	str	r2, [r3, #0]
    if (HAL_DAC_Init(&hdac) != HAL_OK)
 80012d4:	480d      	ldr	r0, [pc, #52]	@ (800130c <MX_DAC_Init+0x4c>)
 80012d6:	f001 fb4c 	bl	8002972 <HAL_DAC_Init>
 80012da:	4603      	mov	r3, r0
 80012dc:	2b00      	cmp	r3, #0
 80012de:	d001      	beq.n	80012e4 <MX_DAC_Init+0x24>
    {
        Error_Handler();
 80012e0:	f000 f892 	bl	8001408 <Error_Handler>
    }

    /** DAC channel OUT1 config
     */
    sConfig.DAC_Trigger = DAC_TRIGGER_T2_TRGO;
 80012e4:	2324      	movs	r3, #36	@ 0x24
 80012e6:	603b      	str	r3, [r7, #0]
    sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_DISABLE;
 80012e8:	2302      	movs	r3, #2
 80012ea:	607b      	str	r3, [r7, #4]
    if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 80012ec:	463b      	mov	r3, r7
 80012ee:	2200      	movs	r2, #0
 80012f0:	4619      	mov	r1, r3
 80012f2:	4806      	ldr	r0, [pc, #24]	@ (800130c <MX_DAC_Init+0x4c>)
 80012f4:	f001 fc4c 	bl	8002b90 <HAL_DAC_ConfigChannel>
 80012f8:	4603      	mov	r3, r0
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d001      	beq.n	8001302 <MX_DAC_Init+0x42>
    {
        Error_Handler();
 80012fe:	f000 f883 	bl	8001408 <Error_Handler>
    }
    /* USER CODE BEGIN DAC_Init 2 */

    /* USER CODE END DAC_Init 2 */
}
 8001302:	bf00      	nop
 8001304:	3708      	adds	r7, #8
 8001306:	46bd      	mov	sp, r7
 8001308:	bd80      	pop	{r7, pc}
 800130a:	bf00      	nop
 800130c:	2000029c 	.word	0x2000029c
 8001310:	40007400 	.word	0x40007400

08001314 <HAL_DAC_MspInit>:

void HAL_DAC_MspInit(DAC_HandleTypeDef *dacHandle)
{
 8001314:	b580      	push	{r7, lr}
 8001316:	b08a      	sub	sp, #40	@ 0x28
 8001318:	af00      	add	r7, sp, #0
 800131a:	6078      	str	r0, [r7, #4]

    GPIO_InitTypeDef GPIO_InitStruct = {0};
 800131c:	f107 0314 	add.w	r3, r7, #20
 8001320:	2200      	movs	r2, #0
 8001322:	601a      	str	r2, [r3, #0]
 8001324:	605a      	str	r2, [r3, #4]
 8001326:	609a      	str	r2, [r3, #8]
 8001328:	60da      	str	r2, [r3, #12]
 800132a:	611a      	str	r2, [r3, #16]
    if (dacHandle->Instance == DAC)
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	4a30      	ldr	r2, [pc, #192]	@ (80013f4 <HAL_DAC_MspInit+0xe0>)
 8001332:	4293      	cmp	r3, r2
 8001334:	d159      	bne.n	80013ea <HAL_DAC_MspInit+0xd6>
    {
        /* USER CODE BEGIN DAC_MspInit 0 */

        /* USER CODE END DAC_MspInit 0 */
        /* DAC clock enable */
        __HAL_RCC_DAC_CLK_ENABLE();
 8001336:	2300      	movs	r3, #0
 8001338:	613b      	str	r3, [r7, #16]
 800133a:	4b2f      	ldr	r3, [pc, #188]	@ (80013f8 <HAL_DAC_MspInit+0xe4>)
 800133c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800133e:	4a2e      	ldr	r2, [pc, #184]	@ (80013f8 <HAL_DAC_MspInit+0xe4>)
 8001340:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8001344:	6413      	str	r3, [r2, #64]	@ 0x40
 8001346:	4b2c      	ldr	r3, [pc, #176]	@ (80013f8 <HAL_DAC_MspInit+0xe4>)
 8001348:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800134a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800134e:	613b      	str	r3, [r7, #16]
 8001350:	693b      	ldr	r3, [r7, #16]

        __HAL_RCC_GPIOA_CLK_ENABLE();
 8001352:	2300      	movs	r3, #0
 8001354:	60fb      	str	r3, [r7, #12]
 8001356:	4b28      	ldr	r3, [pc, #160]	@ (80013f8 <HAL_DAC_MspInit+0xe4>)
 8001358:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800135a:	4a27      	ldr	r2, [pc, #156]	@ (80013f8 <HAL_DAC_MspInit+0xe4>)
 800135c:	f043 0301 	orr.w	r3, r3, #1
 8001360:	6313      	str	r3, [r2, #48]	@ 0x30
 8001362:	4b25      	ldr	r3, [pc, #148]	@ (80013f8 <HAL_DAC_MspInit+0xe4>)
 8001364:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001366:	f003 0301 	and.w	r3, r3, #1
 800136a:	60fb      	str	r3, [r7, #12]
 800136c:	68fb      	ldr	r3, [r7, #12]
        /**DAC GPIO Configuration
        PA4         ------> DAC_OUT1
        */
        GPIO_InitStruct.Pin = GPIO_PIN_4;
 800136e:	2310      	movs	r3, #16
 8001370:	617b      	str	r3, [r7, #20]
        GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001372:	2303      	movs	r3, #3
 8001374:	61bb      	str	r3, [r7, #24]
        GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001376:	2300      	movs	r3, #0
 8001378:	61fb      	str	r3, [r7, #28]
        HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800137a:	f107 0314 	add.w	r3, r7, #20
 800137e:	4619      	mov	r1, r3
 8001380:	481e      	ldr	r0, [pc, #120]	@ (80013fc <HAL_DAC_MspInit+0xe8>)
 8001382:	f002 f84f 	bl	8003424 <HAL_GPIO_Init>

        /* DAC DMA Init */
        /* DAC1 Init */
        hdma_dac1.Instance = DMA1_Stream5;
 8001386:	4b1e      	ldr	r3, [pc, #120]	@ (8001400 <HAL_DAC_MspInit+0xec>)
 8001388:	4a1e      	ldr	r2, [pc, #120]	@ (8001404 <HAL_DAC_MspInit+0xf0>)
 800138a:	601a      	str	r2, [r3, #0]
        hdma_dac1.Init.Channel = DMA_CHANNEL_7;
 800138c:	4b1c      	ldr	r3, [pc, #112]	@ (8001400 <HAL_DAC_MspInit+0xec>)
 800138e:	f04f 6260 	mov.w	r2, #234881024	@ 0xe000000
 8001392:	605a      	str	r2, [r3, #4]
        hdma_dac1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001394:	4b1a      	ldr	r3, [pc, #104]	@ (8001400 <HAL_DAC_MspInit+0xec>)
 8001396:	2240      	movs	r2, #64	@ 0x40
 8001398:	609a      	str	r2, [r3, #8]
        hdma_dac1.Init.PeriphInc = DMA_PINC_DISABLE;
 800139a:	4b19      	ldr	r3, [pc, #100]	@ (8001400 <HAL_DAC_MspInit+0xec>)
 800139c:	2200      	movs	r2, #0
 800139e:	60da      	str	r2, [r3, #12]
        hdma_dac1.Init.MemInc = DMA_MINC_ENABLE;
 80013a0:	4b17      	ldr	r3, [pc, #92]	@ (8001400 <HAL_DAC_MspInit+0xec>)
 80013a2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80013a6:	611a      	str	r2, [r3, #16]
        hdma_dac1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80013a8:	4b15      	ldr	r3, [pc, #84]	@ (8001400 <HAL_DAC_MspInit+0xec>)
 80013aa:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80013ae:	615a      	str	r2, [r3, #20]
        hdma_dac1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80013b0:	4b13      	ldr	r3, [pc, #76]	@ (8001400 <HAL_DAC_MspInit+0xec>)
 80013b2:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80013b6:	619a      	str	r2, [r3, #24]
        hdma_dac1.Init.Mode = DMA_CIRCULAR;
 80013b8:	4b11      	ldr	r3, [pc, #68]	@ (8001400 <HAL_DAC_MspInit+0xec>)
 80013ba:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80013be:	61da      	str	r2, [r3, #28]
        hdma_dac1.Init.Priority = DMA_PRIORITY_HIGH;
 80013c0:	4b0f      	ldr	r3, [pc, #60]	@ (8001400 <HAL_DAC_MspInit+0xec>)
 80013c2:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80013c6:	621a      	str	r2, [r3, #32]
        hdma_dac1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80013c8:	4b0d      	ldr	r3, [pc, #52]	@ (8001400 <HAL_DAC_MspInit+0xec>)
 80013ca:	2200      	movs	r2, #0
 80013cc:	625a      	str	r2, [r3, #36]	@ 0x24
        if (HAL_DMA_Init(&hdma_dac1) != HAL_OK)
 80013ce:	480c      	ldr	r0, [pc, #48]	@ (8001400 <HAL_DAC_MspInit+0xec>)
 80013d0:	f001 fcb8 	bl	8002d44 <HAL_DMA_Init>
 80013d4:	4603      	mov	r3, r0
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d001      	beq.n	80013de <HAL_DAC_MspInit+0xca>
        {
            Error_Handler();
 80013da:	f000 f815 	bl	8001408 <Error_Handler>
        }

        __HAL_LINKDMA(dacHandle, DMA_Handle1, hdma_dac1);
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	4a07      	ldr	r2, [pc, #28]	@ (8001400 <HAL_DAC_MspInit+0xec>)
 80013e2:	609a      	str	r2, [r3, #8]
 80013e4:	4a06      	ldr	r2, [pc, #24]	@ (8001400 <HAL_DAC_MspInit+0xec>)
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	6393      	str	r3, [r2, #56]	@ 0x38

        /* USER CODE BEGIN DAC_MspInit 1 */

        /* USER CODE END DAC_MspInit 1 */
    }
}
 80013ea:	bf00      	nop
 80013ec:	3728      	adds	r7, #40	@ 0x28
 80013ee:	46bd      	mov	sp, r7
 80013f0:	bd80      	pop	{r7, pc}
 80013f2:	bf00      	nop
 80013f4:	40007400 	.word	0x40007400
 80013f8:	40023800 	.word	0x40023800
 80013fc:	40020000 	.word	0x40020000
 8001400:	200002b0 	.word	0x200002b0
 8001404:	40026088 	.word	0x40026088

08001408 <Error_Handler>:
    }
}

/* USER CODE BEGIN 1 */
void Error_Handler(void)
{
 8001408:	b480      	push	{r7}
 800140a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800140c:	b672      	cpsid	i
}
 800140e:	bf00      	nop
    /* USER CODE BEGIN Error_Handler_Debug */
    /* User can add his own implementation to report the HAL error return state */
    __disable_irq();
    while (1)
 8001410:	bf00      	nop
 8001412:	e7fd      	b.n	8001410 <Error_Handler+0x8>

08001414 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001414:	b580      	push	{r7, lr}
 8001416:	b082      	sub	sp, #8
 8001418:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800141a:	2300      	movs	r3, #0
 800141c:	607b      	str	r3, [r7, #4]
 800141e:	4b17      	ldr	r3, [pc, #92]	@ (800147c <MX_DMA_Init+0x68>)
 8001420:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001422:	4a16      	ldr	r2, [pc, #88]	@ (800147c <MX_DMA_Init+0x68>)
 8001424:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001428:	6313      	str	r3, [r2, #48]	@ 0x30
 800142a:	4b14      	ldr	r3, [pc, #80]	@ (800147c <MX_DMA_Init+0x68>)
 800142c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800142e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001432:	607b      	str	r3, [r7, #4]
 8001434:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001436:	2300      	movs	r3, #0
 8001438:	603b      	str	r3, [r7, #0]
 800143a:	4b10      	ldr	r3, [pc, #64]	@ (800147c <MX_DMA_Init+0x68>)
 800143c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800143e:	4a0f      	ldr	r2, [pc, #60]	@ (800147c <MX_DMA_Init+0x68>)
 8001440:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001444:	6313      	str	r3, [r2, #48]	@ 0x30
 8001446:	4b0d      	ldr	r3, [pc, #52]	@ (800147c <MX_DMA_Init+0x68>)
 8001448:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800144a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800144e:	603b      	str	r3, [r7, #0]
 8001450:	683b      	ldr	r3, [r7, #0]

    /* DMA interrupt init */
    /* DMA1_Stream5_IRQn interrupt configuration */
    HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8001452:	2200      	movs	r2, #0
 8001454:	2100      	movs	r1, #0
 8001456:	2010      	movs	r0, #16
 8001458:	f001 fa55 	bl	8002906 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 800145c:	2010      	movs	r0, #16
 800145e:	f001 fa6e 	bl	800293e <HAL_NVIC_EnableIRQ>
    /* DMA2_Stream0_IRQn interrupt configuration */
    HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8001462:	2200      	movs	r2, #0
 8001464:	2100      	movs	r1, #0
 8001466:	2038      	movs	r0, #56	@ 0x38
 8001468:	f001 fa4d 	bl	8002906 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 800146c:	2038      	movs	r0, #56	@ 0x38
 800146e:	f001 fa66 	bl	800293e <HAL_NVIC_EnableIRQ>

}
 8001472:	bf00      	nop
 8001474:	3708      	adds	r7, #8
 8001476:	46bd      	mov	sp, r7
 8001478:	bd80      	pop	{r7, pc}
 800147a:	bf00      	nop
 800147c:	40023800 	.word	0x40023800

08001480 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
 */
void MX_GPIO_Init(void)
{
 8001480:	b580      	push	{r7, lr}
 8001482:	b08c      	sub	sp, #48	@ 0x30
 8001484:	af00      	add	r7, sp, #0

	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001486:	f107 031c 	add.w	r3, r7, #28
 800148a:	2200      	movs	r2, #0
 800148c:	601a      	str	r2, [r3, #0]
 800148e:	605a      	str	r2, [r3, #4]
 8001490:	609a      	str	r2, [r3, #8]
 8001492:	60da      	str	r2, [r3, #12]
 8001494:	611a      	str	r2, [r3, #16]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOE_CLK_ENABLE();
 8001496:	2300      	movs	r3, #0
 8001498:	61bb      	str	r3, [r7, #24]
 800149a:	4b52      	ldr	r3, [pc, #328]	@ (80015e4 <MX_GPIO_Init+0x164>)
 800149c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800149e:	4a51      	ldr	r2, [pc, #324]	@ (80015e4 <MX_GPIO_Init+0x164>)
 80014a0:	f043 0310 	orr.w	r3, r3, #16
 80014a4:	6313      	str	r3, [r2, #48]	@ 0x30
 80014a6:	4b4f      	ldr	r3, [pc, #316]	@ (80015e4 <MX_GPIO_Init+0x164>)
 80014a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014aa:	f003 0310 	and.w	r3, r3, #16
 80014ae:	61bb      	str	r3, [r7, #24]
 80014b0:	69bb      	ldr	r3, [r7, #24]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80014b2:	2300      	movs	r3, #0
 80014b4:	617b      	str	r3, [r7, #20]
 80014b6:	4b4b      	ldr	r3, [pc, #300]	@ (80015e4 <MX_GPIO_Init+0x164>)
 80014b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014ba:	4a4a      	ldr	r2, [pc, #296]	@ (80015e4 <MX_GPIO_Init+0x164>)
 80014bc:	f043 0301 	orr.w	r3, r3, #1
 80014c0:	6313      	str	r3, [r2, #48]	@ 0x30
 80014c2:	4b48      	ldr	r3, [pc, #288]	@ (80015e4 <MX_GPIO_Init+0x164>)
 80014c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014c6:	f003 0301 	and.w	r3, r3, #1
 80014ca:	617b      	str	r3, [r7, #20]
 80014cc:	697b      	ldr	r3, [r7, #20]
	__HAL_RCC_GPIOF_CLK_ENABLE();
 80014ce:	2300      	movs	r3, #0
 80014d0:	613b      	str	r3, [r7, #16]
 80014d2:	4b44      	ldr	r3, [pc, #272]	@ (80015e4 <MX_GPIO_Init+0x164>)
 80014d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014d6:	4a43      	ldr	r2, [pc, #268]	@ (80015e4 <MX_GPIO_Init+0x164>)
 80014d8:	f043 0320 	orr.w	r3, r3, #32
 80014dc:	6313      	str	r3, [r2, #48]	@ 0x30
 80014de:	4b41      	ldr	r3, [pc, #260]	@ (80015e4 <MX_GPIO_Init+0x164>)
 80014e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014e2:	f003 0320 	and.w	r3, r3, #32
 80014e6:	613b      	str	r3, [r7, #16]
 80014e8:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 80014ea:	2300      	movs	r3, #0
 80014ec:	60fb      	str	r3, [r7, #12]
 80014ee:	4b3d      	ldr	r3, [pc, #244]	@ (80015e4 <MX_GPIO_Init+0x164>)
 80014f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014f2:	4a3c      	ldr	r2, [pc, #240]	@ (80015e4 <MX_GPIO_Init+0x164>)
 80014f4:	f043 0302 	orr.w	r3, r3, #2
 80014f8:	6313      	str	r3, [r2, #48]	@ 0x30
 80014fa:	4b3a      	ldr	r3, [pc, #232]	@ (80015e4 <MX_GPIO_Init+0x164>)
 80014fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014fe:	f003 0302 	and.w	r3, r3, #2
 8001502:	60fb      	str	r3, [r7, #12]
 8001504:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8001506:	2300      	movs	r3, #0
 8001508:	60bb      	str	r3, [r7, #8]
 800150a:	4b36      	ldr	r3, [pc, #216]	@ (80015e4 <MX_GPIO_Init+0x164>)
 800150c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800150e:	4a35      	ldr	r2, [pc, #212]	@ (80015e4 <MX_GPIO_Init+0x164>)
 8001510:	f043 0308 	orr.w	r3, r3, #8
 8001514:	6313      	str	r3, [r2, #48]	@ 0x30
 8001516:	4b33      	ldr	r3, [pc, #204]	@ (80015e4 <MX_GPIO_Init+0x164>)
 8001518:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800151a:	f003 0308 	and.w	r3, r3, #8
 800151e:	60bb      	str	r3, [r7, #8]
 8001520:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOG_CLK_ENABLE();
 8001522:	2300      	movs	r3, #0
 8001524:	607b      	str	r3, [r7, #4]
 8001526:	4b2f      	ldr	r3, [pc, #188]	@ (80015e4 <MX_GPIO_Init+0x164>)
 8001528:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800152a:	4a2e      	ldr	r2, [pc, #184]	@ (80015e4 <MX_GPIO_Init+0x164>)
 800152c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001530:	6313      	str	r3, [r2, #48]	@ 0x30
 8001532:	4b2c      	ldr	r3, [pc, #176]	@ (80015e4 <MX_GPIO_Init+0x164>)
 8001534:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001536:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800153a:	607b      	str	r3, [r7, #4]
 800153c:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(LCD_BL_GPIO_Port, LCD_BL_Pin, GPIO_PIN_SET);
 800153e:	2201      	movs	r2, #1
 8001540:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001544:	4828      	ldr	r0, [pc, #160]	@ (80015e8 <MX_GPIO_Init+0x168>)
 8001546:	f002 f909 	bl	800375c <HAL_GPIO_WritePin>

	/*Configure GPIO pins : PEPin PEPin PEPin */
	GPIO_InitStruct.Pin = KEY2_toggleRoom_Pin | KEY1_ToggleSelect_Pin | KEY0_stopDrawUpdate_Pin;
 800154a:	231c      	movs	r3, #28
 800154c:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800154e:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8001552:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001554:	2301      	movs	r3, #1
 8001556:	627b      	str	r3, [r7, #36]	@ 0x24
	HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001558:	f107 031c 	add.w	r3, r7, #28
 800155c:	4619      	mov	r1, r3
 800155e:	4823      	ldr	r0, [pc, #140]	@ (80015ec <MX_GPIO_Init+0x16c>)
 8001560:	f001 ff60 	bl	8003424 <HAL_GPIO_Init>

	/*Configure GPIO pin : PtPin */
	GPIO_InitStruct.Pin = KEY_ToggleWaveTable_Pin;
 8001564:	2301      	movs	r3, #1
 8001566:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001568:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800156c:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800156e:	2302      	movs	r3, #2
 8001570:	627b      	str	r3, [r7, #36]	@ 0x24
	HAL_GPIO_Init(KEY_ToggleWaveTable_GPIO_Port, &GPIO_InitStruct);
 8001572:	f107 031c 	add.w	r3, r7, #28
 8001576:	4619      	mov	r1, r3
 8001578:	481d      	ldr	r0, [pc, #116]	@ (80015f0 <MX_GPIO_Init+0x170>)
 800157a:	f001 ff53 	bl	8003424 <HAL_GPIO_Init>

	/*Configure GPIO pin : PtPin */
	GPIO_InitStruct.Pin = LCD_BL_Pin;
 800157e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001582:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001584:	2301      	movs	r3, #1
 8001586:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001588:	2301      	movs	r3, #1
 800158a:	627b      	str	r3, [r7, #36]	@ 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800158c:	2302      	movs	r3, #2
 800158e:	62bb      	str	r3, [r7, #40]	@ 0x28
	HAL_GPIO_Init(LCD_BL_GPIO_Port, &GPIO_InitStruct);
 8001590:	f107 031c 	add.w	r3, r7, #28
 8001594:	4619      	mov	r1, r3
 8001596:	4814      	ldr	r0, [pc, #80]	@ (80015e8 <MX_GPIO_Init+0x168>)
 8001598:	f001 ff44 	bl	8003424 <HAL_GPIO_Init>

	/* EXTI interrupt init*/
	HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 800159c:	2200      	movs	r2, #0
 800159e:	2100      	movs	r1, #0
 80015a0:	2006      	movs	r0, #6
 80015a2:	f001 f9b0 	bl	8002906 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80015a6:	2006      	movs	r0, #6
 80015a8:	f001 f9c9 	bl	800293e <HAL_NVIC_EnableIRQ>

	HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 80015ac:	2200      	movs	r2, #0
 80015ae:	2100      	movs	r1, #0
 80015b0:	2008      	movs	r0, #8
 80015b2:	f001 f9a8 	bl	8002906 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 80015b6:	2008      	movs	r0, #8
 80015b8:	f001 f9c1 	bl	800293e <HAL_NVIC_EnableIRQ>

	HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 80015bc:	2200      	movs	r2, #0
 80015be:	2100      	movs	r1, #0
 80015c0:	2009      	movs	r0, #9
 80015c2:	f001 f9a0 	bl	8002906 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 80015c6:	2009      	movs	r0, #9
 80015c8:	f001 f9b9 	bl	800293e <HAL_NVIC_EnableIRQ>

	HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 80015cc:	2200      	movs	r2, #0
 80015ce:	2100      	movs	r1, #0
 80015d0:	200a      	movs	r0, #10
 80015d2:	f001 f998 	bl	8002906 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 80015d6:	200a      	movs	r0, #10
 80015d8:	f001 f9b1 	bl	800293e <HAL_NVIC_EnableIRQ>
}
 80015dc:	bf00      	nop
 80015de:	3730      	adds	r7, #48	@ 0x30
 80015e0:	46bd      	mov	sp, r7
 80015e2:	bd80      	pop	{r7, pc}
 80015e4:	40023800 	.word	0x40023800
 80015e8:	40020400 	.word	0x40020400
 80015ec:	40021000 	.word	0x40021000
 80015f0:	40020000 	.word	0x40020000
 80015f4:	00000000 	.word	0x00000000

080015f8 <generatePWMArray>:
uint32_t pwm[1000];
const uint16_t sampleRate = 50000; // 假设采样率为10kHz
uint16_t spwm[50000] = {0};

void generatePWMArray(uint32_t *pwm, uint16_t size)
{
 80015f8:	b5b0      	push	{r4, r5, r7, lr}
 80015fa:	b084      	sub	sp, #16
 80015fc:	af00      	add	r7, sp, #0
 80015fe:	6078      	str	r0, [r7, #4]
 8001600:	460b      	mov	r3, r1
 8001602:	807b      	strh	r3, [r7, #2]
    for (uint16_t i = 0; i < size; ++i)
 8001604:	2300      	movs	r3, #0
 8001606:	81fb      	strh	r3, [r7, #14]
 8001608:	e046      	b.n	8001698 <generatePWMArray+0xa0>
    {
        pwm[i] = (uint32_t)(50 + 45 * sin(2 * M_PI * i / size)) * 100 / 100;
 800160a:	89fb      	ldrh	r3, [r7, #14]
 800160c:	4618      	mov	r0, r3
 800160e:	f7fe ffe9 	bl	80005e4 <__aeabi_i2d>
 8001612:	a32a      	add	r3, pc, #168	@ (adr r3, 80016bc <generatePWMArray+0xc4>)
 8001614:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001618:	f7ff f84e 	bl	80006b8 <__aeabi_dmul>
 800161c:	4602      	mov	r2, r0
 800161e:	460b      	mov	r3, r1
 8001620:	4614      	mov	r4, r2
 8001622:	461d      	mov	r5, r3
 8001624:	887b      	ldrh	r3, [r7, #2]
 8001626:	4618      	mov	r0, r3
 8001628:	f7fe ffdc 	bl	80005e4 <__aeabi_i2d>
 800162c:	4602      	mov	r2, r0
 800162e:	460b      	mov	r3, r1
 8001630:	4620      	mov	r0, r4
 8001632:	4629      	mov	r1, r5
 8001634:	f7ff f96a 	bl	800090c <__aeabi_ddiv>
 8001638:	4602      	mov	r2, r0
 800163a:	460b      	mov	r3, r1
 800163c:	ec43 2b17 	vmov	d7, r2, r3
 8001640:	eeb0 0a47 	vmov.f32	s0, s14
 8001644:	eef0 0a67 	vmov.f32	s1, s15
 8001648:	f008 fb72 	bl	8009d30 <sin>
 800164c:	ec51 0b10 	vmov	r0, r1, d0
 8001650:	f04f 0200 	mov.w	r2, #0
 8001654:	4b16      	ldr	r3, [pc, #88]	@ (80016b0 <generatePWMArray+0xb8>)
 8001656:	f7ff f82f 	bl	80006b8 <__aeabi_dmul>
 800165a:	4602      	mov	r2, r0
 800165c:	460b      	mov	r3, r1
 800165e:	4610      	mov	r0, r2
 8001660:	4619      	mov	r1, r3
 8001662:	f04f 0200 	mov.w	r2, #0
 8001666:	4b13      	ldr	r3, [pc, #76]	@ (80016b4 <generatePWMArray+0xbc>)
 8001668:	f7fe fe70 	bl	800034c <__adddf3>
 800166c:	4602      	mov	r2, r0
 800166e:	460b      	mov	r3, r1
 8001670:	4610      	mov	r0, r2
 8001672:	4619      	mov	r1, r3
 8001674:	f7ff faf8 	bl	8000c68 <__aeabi_d2uiz>
 8001678:	4603      	mov	r3, r0
 800167a:	2264      	movs	r2, #100	@ 0x64
 800167c:	fb03 f202 	mul.w	r2, r3, r2
 8001680:	89fb      	ldrh	r3, [r7, #14]
 8001682:	009b      	lsls	r3, r3, #2
 8001684:	6879      	ldr	r1, [r7, #4]
 8001686:	440b      	add	r3, r1
 8001688:	490b      	ldr	r1, [pc, #44]	@ (80016b8 <generatePWMArray+0xc0>)
 800168a:	fba1 1202 	umull	r1, r2, r1, r2
 800168e:	0952      	lsrs	r2, r2, #5
 8001690:	601a      	str	r2, [r3, #0]
    for (uint16_t i = 0; i < size; ++i)
 8001692:	89fb      	ldrh	r3, [r7, #14]
 8001694:	3301      	adds	r3, #1
 8001696:	81fb      	strh	r3, [r7, #14]
 8001698:	89fa      	ldrh	r2, [r7, #14]
 800169a:	887b      	ldrh	r3, [r7, #2]
 800169c:	429a      	cmp	r2, r3
 800169e:	d3b4      	bcc.n	800160a <generatePWMArray+0x12>
    }
}
 80016a0:	bf00      	nop
 80016a2:	bf00      	nop
 80016a4:	3710      	adds	r7, #16
 80016a6:	46bd      	mov	sp, r7
 80016a8:	bdb0      	pop	{r4, r5, r7, pc}
 80016aa:	bf00      	nop
 80016ac:	f3af 8000 	nop.w
 80016b0:	40468000 	.word	0x40468000
 80016b4:	40490000 	.word	0x40490000
 80016b8:	51eb851f 	.word	0x51eb851f
 80016bc:	54442d18 	.word	0x54442d18
 80016c0:	401921fb 	.word	0x401921fb

080016c4 <generateWave>:
void generateWave(uint16_t freq)
{
 80016c4:	b580      	push	{r7, lr}
 80016c6:	b084      	sub	sp, #16
 80016c8:	af00      	add	r7, sp, #0
 80016ca:	4603      	mov	r3, r0
 80016cc:	80fb      	strh	r3, [r7, #6]
    const uint16_t period = sampleRate / freq;
 80016ce:	f24c 3250 	movw	r2, #50000	@ 0xc350
 80016d2:	88fb      	ldrh	r3, [r7, #6]
 80016d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80016d8:	81bb      	strh	r3, [r7, #12]
    uint16_t size = 1000;
 80016da:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80016de:	817b      	strh	r3, [r7, #10]
    if (period == 0)
 80016e0:	89bb      	ldrh	r3, [r7, #12]
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d101      	bne.n	80016ea <generateWave+0x26>
        Error_Handler(); // 防止除零错误
 80016e6:	f7ff fe8f 	bl	8001408 <Error_Handler>
    generatePWMArray(pwm, size);
 80016ea:	897b      	ldrh	r3, [r7, #10]
 80016ec:	4619      	mov	r1, r3
 80016ee:	481a      	ldr	r0, [pc, #104]	@ (8001758 <generateWave+0x94>)
 80016f0:	f7ff ff82 	bl	80015f8 <generatePWMArray>
    uint16_t i;
    for (i = 0; i < sampleRate; ++i)
 80016f4:	2300      	movs	r3, #0
 80016f6:	81fb      	strh	r3, [r7, #14]
 80016f8:	e023      	b.n	8001742 <generateWave+0x7e>
    {
        uint16_t pwmIndex = (i % period) * (size - 1) / period;
 80016fa:	89fb      	ldrh	r3, [r7, #14]
 80016fc:	89ba      	ldrh	r2, [r7, #12]
 80016fe:	fbb3 f1f2 	udiv	r1, r3, r2
 8001702:	fb01 f202 	mul.w	r2, r1, r2
 8001706:	1a9b      	subs	r3, r3, r2
 8001708:	b29b      	uxth	r3, r3
 800170a:	461a      	mov	r2, r3
 800170c:	897b      	ldrh	r3, [r7, #10]
 800170e:	3b01      	subs	r3, #1
 8001710:	fb03 f202 	mul.w	r2, r3, r2
 8001714:	89bb      	ldrh	r3, [r7, #12]
 8001716:	fb92 f3f3 	sdiv	r3, r2, r3
 800171a:	813b      	strh	r3, [r7, #8]
        spwm[i] = pwm[pwmIndex] * 4095 / 100;
 800171c:	893b      	ldrh	r3, [r7, #8]
 800171e:	4a0e      	ldr	r2, [pc, #56]	@ (8001758 <generateWave+0x94>)
 8001720:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001724:	4613      	mov	r3, r2
 8001726:	031b      	lsls	r3, r3, #12
 8001728:	1a9b      	subs	r3, r3, r2
 800172a:	4a0c      	ldr	r2, [pc, #48]	@ (800175c <generateWave+0x98>)
 800172c:	fba2 2303 	umull	r2, r3, r2, r3
 8001730:	095a      	lsrs	r2, r3, #5
 8001732:	89fb      	ldrh	r3, [r7, #14]
 8001734:	b291      	uxth	r1, r2
 8001736:	4a0a      	ldr	r2, [pc, #40]	@ (8001760 <generateWave+0x9c>)
 8001738:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    for (i = 0; i < sampleRate; ++i)
 800173c:	89fb      	ldrh	r3, [r7, #14]
 800173e:	3301      	adds	r3, #1
 8001740:	81fb      	strh	r3, [r7, #14]
 8001742:	f24c 3250 	movw	r2, #50000	@ 0xc350
 8001746:	89fb      	ldrh	r3, [r7, #14]
 8001748:	4293      	cmp	r3, r2
 800174a:	d3d6      	bcc.n	80016fa <generateWave+0x36>
    }
    // 算一个周期的采样点数
}
 800174c:	bf00      	nop
 800174e:	bf00      	nop
 8001750:	3710      	adds	r7, #16
 8001752:	46bd      	mov	sp, r7
 8001754:	bd80      	pop	{r7, pc}
 8001756:	bf00      	nop
 8001758:	20003b20 	.word	0x20003b20
 800175c:	51eb851f 	.word	0x51eb851f
 8001760:	20004ac0 	.word	0x20004ac0

08001764 <SystemClock_Config>:
void SystemClock_Config(void)
{
 8001764:	b580      	push	{r7, lr}
 8001766:	b094      	sub	sp, #80	@ 0x50
 8001768:	af00      	add	r7, sp, #0
    RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800176a:	f107 0320 	add.w	r3, r7, #32
 800176e:	2230      	movs	r2, #48	@ 0x30
 8001770:	2100      	movs	r1, #0
 8001772:	4618      	mov	r0, r3
 8001774:	f004 feff 	bl	8006576 <memset>
    RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001778:	f107 030c 	add.w	r3, r7, #12
 800177c:	2200      	movs	r2, #0
 800177e:	601a      	str	r2, [r3, #0]
 8001780:	605a      	str	r2, [r3, #4]
 8001782:	609a      	str	r2, [r3, #8]
 8001784:	60da      	str	r2, [r3, #12]
 8001786:	611a      	str	r2, [r3, #16]

    /** Configure the main internal regulator output voltage
     */
    __HAL_RCC_PWR_CLK_ENABLE();
 8001788:	2300      	movs	r3, #0
 800178a:	60bb      	str	r3, [r7, #8]
 800178c:	4b28      	ldr	r3, [pc, #160]	@ (8001830 <SystemClock_Config+0xcc>)
 800178e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001790:	4a27      	ldr	r2, [pc, #156]	@ (8001830 <SystemClock_Config+0xcc>)
 8001792:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001796:	6413      	str	r3, [r2, #64]	@ 0x40
 8001798:	4b25      	ldr	r3, [pc, #148]	@ (8001830 <SystemClock_Config+0xcc>)
 800179a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800179c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80017a0:	60bb      	str	r3, [r7, #8]
 80017a2:	68bb      	ldr	r3, [r7, #8]
    __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80017a4:	2300      	movs	r3, #0
 80017a6:	607b      	str	r3, [r7, #4]
 80017a8:	4b22      	ldr	r3, [pc, #136]	@ (8001834 <SystemClock_Config+0xd0>)
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	4a21      	ldr	r2, [pc, #132]	@ (8001834 <SystemClock_Config+0xd0>)
 80017ae:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80017b2:	6013      	str	r3, [r2, #0]
 80017b4:	4b1f      	ldr	r3, [pc, #124]	@ (8001834 <SystemClock_Config+0xd0>)
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80017bc:	607b      	str	r3, [r7, #4]
 80017be:	687b      	ldr	r3, [r7, #4]

    /** Initializes the RCC Oscillators according to the specified parameters
     * in the RCC_OscInitTypeDef structure.
     */
    RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80017c0:	2302      	movs	r3, #2
 80017c2:	623b      	str	r3, [r7, #32]
    RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80017c4:	2301      	movs	r3, #1
 80017c6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80017c8:	2310      	movs	r3, #16
 80017ca:	633b      	str	r3, [r7, #48]	@ 0x30
    RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80017cc:	2302      	movs	r3, #2
 80017ce:	63bb      	str	r3, [r7, #56]	@ 0x38
    RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80017d0:	2300      	movs	r3, #0
 80017d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
    RCC_OscInitStruct.PLL.PLLM = 8;
 80017d4:	2308      	movs	r3, #8
 80017d6:	643b      	str	r3, [r7, #64]	@ 0x40
    RCC_OscInitStruct.PLL.PLLN = 168;
 80017d8:	23a8      	movs	r3, #168	@ 0xa8
 80017da:	647b      	str	r3, [r7, #68]	@ 0x44
    RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80017dc:	2302      	movs	r3, #2
 80017de:	64bb      	str	r3, [r7, #72]	@ 0x48
    RCC_OscInitStruct.PLL.PLLQ = 4;
 80017e0:	2304      	movs	r3, #4
 80017e2:	64fb      	str	r3, [r7, #76]	@ 0x4c
    if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80017e4:	f107 0320 	add.w	r3, r7, #32
 80017e8:	4618      	mov	r0, r3
 80017ea:	f001 fff5 	bl	80037d8 <HAL_RCC_OscConfig>
 80017ee:	4603      	mov	r3, r0
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d001      	beq.n	80017f8 <SystemClock_Config+0x94>
    {
        Error_Handler();
 80017f4:	f7ff fe08 	bl	8001408 <Error_Handler>
    }

    /** Initializes the CPU, AHB and APB buses clocks
     */
    RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80017f8:	230f      	movs	r3, #15
 80017fa:	60fb      	str	r3, [r7, #12]
    RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80017fc:	2302      	movs	r3, #2
 80017fe:	613b      	str	r3, [r7, #16]
    RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001800:	2300      	movs	r3, #0
 8001802:	617b      	str	r3, [r7, #20]
    RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001804:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8001808:	61bb      	str	r3, [r7, #24]
    RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800180a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800180e:	61fb      	str	r3, [r7, #28]

    if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001810:	f107 030c 	add.w	r3, r7, #12
 8001814:	2105      	movs	r1, #5
 8001816:	4618      	mov	r0, r3
 8001818:	f002 fa56 	bl	8003cc8 <HAL_RCC_ClockConfig>
 800181c:	4603      	mov	r3, r0
 800181e:	2b00      	cmp	r3, #0
 8001820:	d001      	beq.n	8001826 <SystemClock_Config+0xc2>
    {
        Error_Handler();
 8001822:	f7ff fdf1 	bl	8001408 <Error_Handler>
    }
}
 8001826:	bf00      	nop
 8001828:	3750      	adds	r7, #80	@ 0x50
 800182a:	46bd      	mov	sp, r7
 800182c:	bd80      	pop	{r7, pc}
 800182e:	bf00      	nop
 8001830:	40023800 	.word	0x40023800
 8001834:	40007000 	.word	0x40007000

08001838 <main>:

int main(void)
{
 8001838:	b590      	push	{r4, r7, lr}
 800183a:	b085      	sub	sp, #20
 800183c:	af02      	add	r7, sp, #8
    HAL_Init();
 800183e:	f000 fb0d 	bl	8001e5c <HAL_Init>
    SystemClock_Config();
 8001842:	f7ff ff8f 	bl	8001764 <SystemClock_Config>
    MX_GPIO_Init();
 8001846:	f7ff fe1b 	bl	8001480 <MX_GPIO_Init>
    MX_DMA_Init();
 800184a:	f7ff fde3 	bl	8001414 <MX_DMA_Init>
    MX_ADC1_Init();
 800184e:	f7ff fc47 	bl	80010e0 <MX_ADC1_Init>
    MX_DAC_Init();
 8001852:	f7ff fd35 	bl	80012c0 <MX_DAC_Init>
    MX_TIM2_Init();
 8001856:	f000 fa07 	bl	8001c68 <MX_TIM2_Init>
    MX_TIM3_Init();
 800185a:	f000 fa51 	bl	8001d00 <MX_TIM3_Init>

    HAL_TIM_Base_Start(&htim2);
 800185e:	4842      	ldr	r0, [pc, #264]	@ (8001968 <main+0x130>)
 8001860:	f002 fc2e 	bl	80040c0 <HAL_TIM_Base_Start>
    HAL_TIM_Base_Start(&htim3);
 8001864:	4841      	ldr	r0, [pc, #260]	@ (800196c <main+0x134>)
 8001866:	f002 fc2b 	bl	80040c0 <HAL_TIM_Base_Start>
    htim3.Instance->ARR = 84e6 / adc_fs - 1;
 800186a:	4b41      	ldr	r3, [pc, #260]	@ (8001970 <main+0x138>)
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	4618      	mov	r0, r3
 8001870:	f7fe fea8 	bl	80005c4 <__aeabi_ui2d>
 8001874:	4602      	mov	r2, r0
 8001876:	460b      	mov	r3, r1
 8001878:	a139      	add	r1, pc, #228	@ (adr r1, 8001960 <main+0x128>)
 800187a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800187e:	f7ff f845 	bl	800090c <__aeabi_ddiv>
 8001882:	4602      	mov	r2, r0
 8001884:	460b      	mov	r3, r1
 8001886:	4610      	mov	r0, r2
 8001888:	4619      	mov	r1, r3
 800188a:	f04f 0200 	mov.w	r2, #0
 800188e:	4b39      	ldr	r3, [pc, #228]	@ (8001974 <main+0x13c>)
 8001890:	f7fe fd5a 	bl	8000348 <__aeabi_dsub>
 8001894:	4602      	mov	r2, r0
 8001896:	460b      	mov	r3, r1
 8001898:	4934      	ldr	r1, [pc, #208]	@ (800196c <main+0x134>)
 800189a:	680c      	ldr	r4, [r1, #0]
 800189c:	4610      	mov	r0, r2
 800189e:	4619      	mov	r1, r3
 80018a0:	f7ff f9e2 	bl	8000c68 <__aeabi_d2uiz>
 80018a4:	4603      	mov	r3, r0
 80018a6:	62e3      	str	r3, [r4, #44]	@ 0x2c
    Sign_samplingOver = 0;
 80018a8:	4b33      	ldr	r3, [pc, #204]	@ (8001978 <main+0x140>)
 80018aa:	2200      	movs	r2, #0
 80018ac:	701a      	strb	r2, [r3, #0]

    generateWave(200);
 80018ae:	20c8      	movs	r0, #200	@ 0xc8
 80018b0:	f7ff ff08 	bl	80016c4 <generateWave>
    HAL_DAC_Start_DMA(&hdac, DAC1_CHANNEL_1, (uint32_t *)spwm, 1000,
 80018b4:	2300      	movs	r3, #0
 80018b6:	9300      	str	r3, [sp, #0]
 80018b8:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80018bc:	4a2f      	ldr	r2, [pc, #188]	@ (800197c <main+0x144>)
 80018be:	2100      	movs	r1, #0
 80018c0:	482f      	ldr	r0, [pc, #188]	@ (8001980 <main+0x148>)
 80018c2:	f001 f879 	bl	80029b8 <HAL_DAC_Start_DMA>
                      DAC_ALIGN_12B_R);

    while (1)
    {
        Sign_wave_exist = 0;
 80018c6:	4b2f      	ldr	r3, [pc, #188]	@ (8001984 <main+0x14c>)
 80018c8:	2200      	movs	r2, #0
 80018ca:	701a      	strb	r2, [r3, #0]
        while (!Sign_samplingOver)
 80018cc:	bf00      	nop
 80018ce:	4b2a      	ldr	r3, [pc, #168]	@ (8001978 <main+0x140>)
 80018d0:	781b      	ldrb	r3, [r3, #0]
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d0fb      	beq.n	80018ce <main+0x96>
            ;
        i_trigger = adc_trigger_size;
 80018d6:	4b2c      	ldr	r3, [pc, #176]	@ (8001988 <main+0x150>)
 80018d8:	f44f 7208 	mov.w	r2, #544	@ 0x220
 80018dc:	801a      	strh	r2, [r3, #0]
        uint8_t i;
        for (i = 0; i < adc_trigger_size; i++)
 80018de:	2300      	movs	r3, #0
 80018e0:	71fb      	strb	r3, [r7, #7]
        {
            if (adc_cache[i] < 50 && adc_cache[i + 1] > 50)
 80018e2:	79fb      	ldrb	r3, [r7, #7]
 80018e4:	4a29      	ldr	r2, [pc, #164]	@ (800198c <main+0x154>)
 80018e6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80018ea:	2b31      	cmp	r3, #49	@ 0x31
 80018ec:	d813      	bhi.n	8001916 <main+0xde>
 80018ee:	79fb      	ldrb	r3, [r7, #7]
 80018f0:	3301      	adds	r3, #1
 80018f2:	4a26      	ldr	r2, [pc, #152]	@ (800198c <main+0x154>)
 80018f4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80018f8:	2b32      	cmp	r3, #50	@ 0x32
 80018fa:	d90c      	bls.n	8001916 <main+0xde>
            {
                i_trigger = i;
 80018fc:	79fb      	ldrb	r3, [r7, #7]
 80018fe:	b29a      	uxth	r2, r3
 8001900:	4b21      	ldr	r3, [pc, #132]	@ (8001988 <main+0x150>)
 8001902:	801a      	strh	r2, [r3, #0]
                Sign_wave_exist = 1;
 8001904:	4b1f      	ldr	r3, [pc, #124]	@ (8001984 <main+0x14c>)
 8001906:	2201      	movs	r2, #1
 8001908:	701a      	strb	r2, [r3, #0]
                break;
 800190a:	bf00      	nop
            }
        }
        if (!Sign_wave_exist)
 800190c:	4b1d      	ldr	r3, [pc, #116]	@ (8001984 <main+0x14c>)
 800190e:	781b      	ldrb	r3, [r3, #0]
 8001910:	2b00      	cmp	r3, #0
 8001912:	d10e      	bne.n	8001932 <main+0xfa>
 8001914:	e003      	b.n	800191e <main+0xe6>
        for (i = 0; i < adc_trigger_size; i++)
 8001916:	79fb      	ldrb	r3, [r7, #7]
 8001918:	3301      	adds	r3, #1
 800191a:	71fb      	strb	r3, [r7, #7]
            if (adc_cache[i] < 50 && adc_cache[i + 1] > 50)
 800191c:	e7e1      	b.n	80018e2 <main+0xaa>
        {
            Sign_samplingOver = 0;
 800191e:	4b16      	ldr	r3, [pc, #88]	@ (8001978 <main+0x140>)
 8001920:	2200      	movs	r2, #0
 8001922:	701a      	strb	r2, [r3, #0]
            HAL_ADC_Start_DMA(&hadc1, (uint32_t *)adc_cache, adc_cache_size);
 8001924:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001928:	4918      	ldr	r1, [pc, #96]	@ (800198c <main+0x154>)
 800192a:	4819      	ldr	r0, [pc, #100]	@ (8001990 <main+0x158>)
 800192c:	f000 fb4c 	bl	8001fc8 <HAL_ADC_Start_DMA>
            continue;
 8001930:	e012      	b.n	8001958 <main+0x120>
        }
        arm_cfft_f32(&arm_cfft_sR_f32_len1024, FFT_INPUT, 0, 1);
 8001932:	2301      	movs	r3, #1
 8001934:	2200      	movs	r2, #0
 8001936:	4917      	ldr	r1, [pc, #92]	@ (8001994 <main+0x15c>)
 8001938:	4817      	ldr	r0, [pc, #92]	@ (8001998 <main+0x160>)
 800193a:	f003 fa3d 	bl	8004db8 <arm_cfft_f32>
        arm_cmplx_mag_f32(FFT_INPUT, FFT_OUTPUT, adc_cache_size);
 800193e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001942:	4916      	ldr	r1, [pc, #88]	@ (800199c <main+0x164>)
 8001944:	4813      	ldr	r0, [pc, #76]	@ (8001994 <main+0x15c>)
 8001946:	f003 fab1 	bl	8004eac <arm_cmplx_mag_f32>
        arm_max_f32(FFT_OUTPUT, adc_cache_size, &FFT_OUTPUT_MAX,
 800194a:	4b15      	ldr	r3, [pc, #84]	@ (80019a0 <main+0x168>)
 800194c:	4a15      	ldr	r2, [pc, #84]	@ (80019a4 <main+0x16c>)
 800194e:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001952:	4812      	ldr	r0, [pc, #72]	@ (800199c <main+0x164>)
 8001954:	f002 fe9a 	bl	800468c <arm_max_f32>
    {
 8001958:	e7b5      	b.n	80018c6 <main+0x8e>
 800195a:	bf00      	nop
 800195c:	f3af 8000 	nop.w
 8001960:	00000000 	.word	0x00000000
 8001964:	419406f4 	.word	0x419406f4
 8001968:	2001d164 	.word	0x2001d164
 800196c:	2001d1ac 	.word	0x2001d1ac
 8001970:	20000000 	.word	0x20000000
 8001974:	3ff00000 	.word	0x3ff00000
 8001978:	20000310 	.word	0x20000310
 800197c:	20004ac0 	.word	0x20004ac0
 8001980:	2000029c 	.word	0x2000029c
 8001984:	20000311 	.word	0x20000311
 8001988:	20000b14 	.word	0x20000b14
 800198c:	20000314 	.word	0x20000314
 8001990:	200001f4 	.word	0x200001f4
 8001994:	20000b18 	.word	0x20000b18
 8001998:	0800adf0 	.word	0x0800adf0
 800199c:	20002b18 	.word	0x20002b18
 80019a0:	20003b1c 	.word	0x20003b1c
 80019a4:	20003b18 	.word	0x20003b18

080019a8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
    * Initializes the Global MSP.
    */
void HAL_MspInit(void)
{
 80019a8:	b480      	push	{r7}
 80019aa:	b083      	sub	sp, #12
 80019ac:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN MspInit 0 */

    /* USER CODE END MspInit 0 */

    __HAL_RCC_SYSCFG_CLK_ENABLE();
 80019ae:	2300      	movs	r3, #0
 80019b0:	607b      	str	r3, [r7, #4]
 80019b2:	4b10      	ldr	r3, [pc, #64]	@ (80019f4 <HAL_MspInit+0x4c>)
 80019b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80019b6:	4a0f      	ldr	r2, [pc, #60]	@ (80019f4 <HAL_MspInit+0x4c>)
 80019b8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80019bc:	6453      	str	r3, [r2, #68]	@ 0x44
 80019be:	4b0d      	ldr	r3, [pc, #52]	@ (80019f4 <HAL_MspInit+0x4c>)
 80019c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80019c2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80019c6:	607b      	str	r3, [r7, #4]
 80019c8:	687b      	ldr	r3, [r7, #4]
    __HAL_RCC_PWR_CLK_ENABLE();
 80019ca:	2300      	movs	r3, #0
 80019cc:	603b      	str	r3, [r7, #0]
 80019ce:	4b09      	ldr	r3, [pc, #36]	@ (80019f4 <HAL_MspInit+0x4c>)
 80019d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019d2:	4a08      	ldr	r2, [pc, #32]	@ (80019f4 <HAL_MspInit+0x4c>)
 80019d4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80019d8:	6413      	str	r3, [r2, #64]	@ 0x40
 80019da:	4b06      	ldr	r3, [pc, #24]	@ (80019f4 <HAL_MspInit+0x4c>)
 80019dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019de:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80019e2:	603b      	str	r3, [r7, #0]
 80019e4:	683b      	ldr	r3, [r7, #0]
    /* System interrupt init*/

    /* USER CODE BEGIN MspInit 1 */

    /* USER CODE END MspInit 1 */
}
 80019e6:	bf00      	nop
 80019e8:	370c      	adds	r7, #12
 80019ea:	46bd      	mov	sp, r7
 80019ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f0:	4770      	bx	lr
 80019f2:	bf00      	nop
 80019f4:	40023800 	.word	0x40023800

080019f8 <NMI_Handler>:
/******************************************************************************/
/**
    * @brief This function handles Non maskable interrupt.
    */
void NMI_Handler(void)
{
 80019f8:	b480      	push	{r7}
 80019fa:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

    /* USER CODE END NonMaskableInt_IRQn 0 */
    /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
    while (1)
 80019fc:	bf00      	nop
 80019fe:	e7fd      	b.n	80019fc <NMI_Handler+0x4>

08001a00 <HardFault_Handler>:

/**
    * @brief This function handles Hard fault interrupt.
    */
void HardFault_Handler(void)
{
 8001a00:	b480      	push	{r7}
 8001a02:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN HardFault_IRQn 0 */

    /* USER CODE END HardFault_IRQn 0 */
    while (1)
 8001a04:	bf00      	nop
 8001a06:	e7fd      	b.n	8001a04 <HardFault_Handler+0x4>

08001a08 <MemManage_Handler>:

/**
    * @brief This function handles Memory management fault.
    */
void MemManage_Handler(void)
{
 8001a08:	b480      	push	{r7}
 8001a0a:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN MemoryManagement_IRQn 0 */

    /* USER CODE END MemoryManagement_IRQn 0 */
    while (1)
 8001a0c:	bf00      	nop
 8001a0e:	e7fd      	b.n	8001a0c <MemManage_Handler+0x4>

08001a10 <BusFault_Handler>:

/**
    * @brief This function handles Pre-fetch fault, memory access fault.
    */
void BusFault_Handler(void)
{
 8001a10:	b480      	push	{r7}
 8001a12:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN BusFault_IRQn 0 */

    /* USER CODE END BusFault_IRQn 0 */
    while (1)
 8001a14:	bf00      	nop
 8001a16:	e7fd      	b.n	8001a14 <BusFault_Handler+0x4>

08001a18 <UsageFault_Handler>:

/**
    * @brief This function handles Undefined instruction or illegal state.
    */
void UsageFault_Handler(void)
{
 8001a18:	b480      	push	{r7}
 8001a1a:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN UsageFault_IRQn 0 */

    /* USER CODE END UsageFault_IRQn 0 */
    while (1)
 8001a1c:	bf00      	nop
 8001a1e:	e7fd      	b.n	8001a1c <UsageFault_Handler+0x4>

08001a20 <SVC_Handler>:

/**
    * @brief This function handles System service call via SWI instruction.
    */
void SVC_Handler(void)
{
 8001a20:	b480      	push	{r7}
 8001a22:	af00      	add	r7, sp, #0

    /* USER CODE END SVCall_IRQn 0 */
    /* USER CODE BEGIN SVCall_IRQn 1 */

    /* USER CODE END SVCall_IRQn 1 */
}
 8001a24:	bf00      	nop
 8001a26:	46bd      	mov	sp, r7
 8001a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a2c:	4770      	bx	lr

08001a2e <DebugMon_Handler>:

/**
    * @brief This function handles Debug monitor.
    */
void DebugMon_Handler(void)
{
 8001a2e:	b480      	push	{r7}
 8001a30:	af00      	add	r7, sp, #0

    /* USER CODE END DebugMonitor_IRQn 0 */
    /* USER CODE BEGIN DebugMonitor_IRQn 1 */

    /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001a32:	bf00      	nop
 8001a34:	46bd      	mov	sp, r7
 8001a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a3a:	4770      	bx	lr

08001a3c <PendSV_Handler>:

/**
    * @brief This function handles Pendable request for system service.
    */
void PendSV_Handler(void)
{
 8001a3c:	b480      	push	{r7}
 8001a3e:	af00      	add	r7, sp, #0

    /* USER CODE END PendSV_IRQn 0 */
    /* USER CODE BEGIN PendSV_IRQn 1 */

    /* USER CODE END PendSV_IRQn 1 */
}
 8001a40:	bf00      	nop
 8001a42:	46bd      	mov	sp, r7
 8001a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a48:	4770      	bx	lr

08001a4a <SysTick_Handler>:

/**
    * @brief This function handles System tick timer.
    */
void SysTick_Handler(void)
{
 8001a4a:	b580      	push	{r7, lr}
 8001a4c:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN SysTick_IRQn 0 */

    /* USER CODE END SysTick_IRQn 0 */
    HAL_IncTick();
 8001a4e:	f000 fa57 	bl	8001f00 <HAL_IncTick>
    /* USER CODE BEGIN SysTick_IRQn 1 */

    /* USER CODE END SysTick_IRQn 1 */
}
 8001a52:	bf00      	nop
 8001a54:	bd80      	pop	{r7, pc}

08001a56 <EXTI0_IRQHandler>:

/**
    * @brief This function handles EXTI line0 interrupt.
    */
void EXTI0_IRQHandler(void)
{
 8001a56:	b580      	push	{r7, lr}
 8001a58:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN EXTI0_IRQn 0 */

    /* USER CODE END EXTI0_IRQn 0 */
    HAL_GPIO_EXTI_IRQHandler(KEY_ToggleWaveTable_Pin);
 8001a5a:	2001      	movs	r0, #1
 8001a5c:	f001 fe98 	bl	8003790 <HAL_GPIO_EXTI_IRQHandler>
    /* USER CODE BEGIN EXTI0_IRQn 1 */

    /* USER CODE END EXTI0_IRQn 1 */
}
 8001a60:	bf00      	nop
 8001a62:	bd80      	pop	{r7, pc}

08001a64 <EXTI2_IRQHandler>:

/**
    * @brief This function handles EXTI line2 interrupt.
    */
void EXTI2_IRQHandler(void)
{
 8001a64:	b580      	push	{r7, lr}
 8001a66:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN EXTI2_IRQn 0 */

    /* USER CODE END EXTI2_IRQn 0 */
    HAL_GPIO_EXTI_IRQHandler(KEY2_toggleRoom_Pin);
 8001a68:	2004      	movs	r0, #4
 8001a6a:	f001 fe91 	bl	8003790 <HAL_GPIO_EXTI_IRQHandler>
    /* USER CODE BEGIN EXTI2_IRQn 1 */

    /* USER CODE END EXTI2_IRQn 1 */
}
 8001a6e:	bf00      	nop
 8001a70:	bd80      	pop	{r7, pc}

08001a72 <EXTI3_IRQHandler>:

/**
    * @brief This function handles EXTI line3 interrupt.
    */
void EXTI3_IRQHandler(void)
{
 8001a72:	b580      	push	{r7, lr}
 8001a74:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN EXTI3_IRQn 0 */

    /* USER CODE END EXTI3_IRQn 0 */
    HAL_GPIO_EXTI_IRQHandler(KEY1_ToggleSelect_Pin);
 8001a76:	2008      	movs	r0, #8
 8001a78:	f001 fe8a 	bl	8003790 <HAL_GPIO_EXTI_IRQHandler>
    /* USER CODE BEGIN EXTI3_IRQn 1 */

    /* USER CODE END EXTI3_IRQn 1 */
}
 8001a7c:	bf00      	nop
 8001a7e:	bd80      	pop	{r7, pc}

08001a80 <EXTI4_IRQHandler>:

/**
    * @brief This function handles EXTI line4 interrupt.
    */
void EXTI4_IRQHandler(void)
{
 8001a80:	b580      	push	{r7, lr}
 8001a82:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN EXTI4_IRQn 0 */

    /* USER CODE END EXTI4_IRQn 0 */
    HAL_GPIO_EXTI_IRQHandler(KEY0_stopDrawUpdate_Pin);
 8001a84:	2010      	movs	r0, #16
 8001a86:	f001 fe83 	bl	8003790 <HAL_GPIO_EXTI_IRQHandler>
    /* USER CODE BEGIN EXTI4_IRQn 1 */

    /* USER CODE END EXTI4_IRQn 1 */
}
 8001a8a:	bf00      	nop
 8001a8c:	bd80      	pop	{r7, pc}
	...

08001a90 <DMA1_Stream5_IRQHandler>:

/**
    * @brief This function handles DMA1 stream5 global interrupt.
    */
void DMA1_Stream5_IRQHandler(void)
{
 8001a90:	b580      	push	{r7, lr}
 8001a92:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

    /* USER CODE END DMA1_Stream5_IRQn 0 */
    HAL_DMA_IRQHandler(&hdma_dac1);
 8001a94:	4802      	ldr	r0, [pc, #8]	@ (8001aa0 <DMA1_Stream5_IRQHandler+0x10>)
 8001a96:	f001 fa5b 	bl	8002f50 <HAL_DMA_IRQHandler>
    /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

    /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8001a9a:	bf00      	nop
 8001a9c:	bd80      	pop	{r7, pc}
 8001a9e:	bf00      	nop
 8001aa0:	200002b0 	.word	0x200002b0

08001aa4 <DMA2_Stream0_IRQHandler>:

/**
    * @brief This function handles DMA2 stream0 global interrupt.
    */
void DMA2_Stream0_IRQHandler(void)
{
 8001aa4:	b580      	push	{r7, lr}
 8001aa6:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

    /* USER CODE END DMA2_Stream0_IRQn 0 */
    HAL_DMA_IRQHandler(&hdma_adc1);
 8001aa8:	4802      	ldr	r0, [pc, #8]	@ (8001ab4 <DMA2_Stream0_IRQHandler+0x10>)
 8001aaa:	f001 fa51 	bl	8002f50 <HAL_DMA_IRQHandler>
    /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

    /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8001aae:	bf00      	nop
 8001ab0:	bd80      	pop	{r7, pc}
 8001ab2:	bf00      	nop
 8001ab4:	2000023c 	.word	0x2000023c

08001ab8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001ab8:	b480      	push	{r7}
 8001aba:	af00      	add	r7, sp, #0
  return 1;
 8001abc:	2301      	movs	r3, #1
}
 8001abe:	4618      	mov	r0, r3
 8001ac0:	46bd      	mov	sp, r7
 8001ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac6:	4770      	bx	lr

08001ac8 <_kill>:

int _kill(int pid, int sig)
{
 8001ac8:	b580      	push	{r7, lr}
 8001aca:	b082      	sub	sp, #8
 8001acc:	af00      	add	r7, sp, #0
 8001ace:	6078      	str	r0, [r7, #4]
 8001ad0:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001ad2:	f004 fda3 	bl	800661c <__errno>
 8001ad6:	4603      	mov	r3, r0
 8001ad8:	2216      	movs	r2, #22
 8001ada:	601a      	str	r2, [r3, #0]
  return -1;
 8001adc:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001ae0:	4618      	mov	r0, r3
 8001ae2:	3708      	adds	r7, #8
 8001ae4:	46bd      	mov	sp, r7
 8001ae6:	bd80      	pop	{r7, pc}

08001ae8 <_exit>:

void _exit (int status)
{
 8001ae8:	b580      	push	{r7, lr}
 8001aea:	b082      	sub	sp, #8
 8001aec:	af00      	add	r7, sp, #0
 8001aee:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001af0:	f04f 31ff 	mov.w	r1, #4294967295
 8001af4:	6878      	ldr	r0, [r7, #4]
 8001af6:	f7ff ffe7 	bl	8001ac8 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001afa:	bf00      	nop
 8001afc:	e7fd      	b.n	8001afa <_exit+0x12>

08001afe <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001afe:	b580      	push	{r7, lr}
 8001b00:	b086      	sub	sp, #24
 8001b02:	af00      	add	r7, sp, #0
 8001b04:	60f8      	str	r0, [r7, #12]
 8001b06:	60b9      	str	r1, [r7, #8]
 8001b08:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b0a:	2300      	movs	r3, #0
 8001b0c:	617b      	str	r3, [r7, #20]
 8001b0e:	e00a      	b.n	8001b26 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001b10:	f3af 8000 	nop.w
 8001b14:	4601      	mov	r1, r0
 8001b16:	68bb      	ldr	r3, [r7, #8]
 8001b18:	1c5a      	adds	r2, r3, #1
 8001b1a:	60ba      	str	r2, [r7, #8]
 8001b1c:	b2ca      	uxtb	r2, r1
 8001b1e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b20:	697b      	ldr	r3, [r7, #20]
 8001b22:	3301      	adds	r3, #1
 8001b24:	617b      	str	r3, [r7, #20]
 8001b26:	697a      	ldr	r2, [r7, #20]
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	429a      	cmp	r2, r3
 8001b2c:	dbf0      	blt.n	8001b10 <_read+0x12>
  }

  return len;
 8001b2e:	687b      	ldr	r3, [r7, #4]
}
 8001b30:	4618      	mov	r0, r3
 8001b32:	3718      	adds	r7, #24
 8001b34:	46bd      	mov	sp, r7
 8001b36:	bd80      	pop	{r7, pc}

08001b38 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001b38:	b580      	push	{r7, lr}
 8001b3a:	b086      	sub	sp, #24
 8001b3c:	af00      	add	r7, sp, #0
 8001b3e:	60f8      	str	r0, [r7, #12]
 8001b40:	60b9      	str	r1, [r7, #8]
 8001b42:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b44:	2300      	movs	r3, #0
 8001b46:	617b      	str	r3, [r7, #20]
 8001b48:	e009      	b.n	8001b5e <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001b4a:	68bb      	ldr	r3, [r7, #8]
 8001b4c:	1c5a      	adds	r2, r3, #1
 8001b4e:	60ba      	str	r2, [r7, #8]
 8001b50:	781b      	ldrb	r3, [r3, #0]
 8001b52:	4618      	mov	r0, r3
 8001b54:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b58:	697b      	ldr	r3, [r7, #20]
 8001b5a:	3301      	adds	r3, #1
 8001b5c:	617b      	str	r3, [r7, #20]
 8001b5e:	697a      	ldr	r2, [r7, #20]
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	429a      	cmp	r2, r3
 8001b64:	dbf1      	blt.n	8001b4a <_write+0x12>
  }
  return len;
 8001b66:	687b      	ldr	r3, [r7, #4]
}
 8001b68:	4618      	mov	r0, r3
 8001b6a:	3718      	adds	r7, #24
 8001b6c:	46bd      	mov	sp, r7
 8001b6e:	bd80      	pop	{r7, pc}

08001b70 <_close>:

int _close(int file)
{
 8001b70:	b480      	push	{r7}
 8001b72:	b083      	sub	sp, #12
 8001b74:	af00      	add	r7, sp, #0
 8001b76:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001b78:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001b7c:	4618      	mov	r0, r3
 8001b7e:	370c      	adds	r7, #12
 8001b80:	46bd      	mov	sp, r7
 8001b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b86:	4770      	bx	lr

08001b88 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001b88:	b480      	push	{r7}
 8001b8a:	b083      	sub	sp, #12
 8001b8c:	af00      	add	r7, sp, #0
 8001b8e:	6078      	str	r0, [r7, #4]
 8001b90:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001b92:	683b      	ldr	r3, [r7, #0]
 8001b94:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001b98:	605a      	str	r2, [r3, #4]
  return 0;
 8001b9a:	2300      	movs	r3, #0
}
 8001b9c:	4618      	mov	r0, r3
 8001b9e:	370c      	adds	r7, #12
 8001ba0:	46bd      	mov	sp, r7
 8001ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba6:	4770      	bx	lr

08001ba8 <_isatty>:

int _isatty(int file)
{
 8001ba8:	b480      	push	{r7}
 8001baa:	b083      	sub	sp, #12
 8001bac:	af00      	add	r7, sp, #0
 8001bae:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001bb0:	2301      	movs	r3, #1
}
 8001bb2:	4618      	mov	r0, r3
 8001bb4:	370c      	adds	r7, #12
 8001bb6:	46bd      	mov	sp, r7
 8001bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bbc:	4770      	bx	lr

08001bbe <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001bbe:	b480      	push	{r7}
 8001bc0:	b085      	sub	sp, #20
 8001bc2:	af00      	add	r7, sp, #0
 8001bc4:	60f8      	str	r0, [r7, #12]
 8001bc6:	60b9      	str	r1, [r7, #8]
 8001bc8:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001bca:	2300      	movs	r3, #0
}
 8001bcc:	4618      	mov	r0, r3
 8001bce:	3714      	adds	r7, #20
 8001bd0:	46bd      	mov	sp, r7
 8001bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd6:	4770      	bx	lr

08001bd8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001bd8:	b580      	push	{r7, lr}
 8001bda:	b086      	sub	sp, #24
 8001bdc:	af00      	add	r7, sp, #0
 8001bde:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001be0:	4a14      	ldr	r2, [pc, #80]	@ (8001c34 <_sbrk+0x5c>)
 8001be2:	4b15      	ldr	r3, [pc, #84]	@ (8001c38 <_sbrk+0x60>)
 8001be4:	1ad3      	subs	r3, r2, r3
 8001be6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001be8:	697b      	ldr	r3, [r7, #20]
 8001bea:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001bec:	4b13      	ldr	r3, [pc, #76]	@ (8001c3c <_sbrk+0x64>)
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d102      	bne.n	8001bfa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001bf4:	4b11      	ldr	r3, [pc, #68]	@ (8001c3c <_sbrk+0x64>)
 8001bf6:	4a12      	ldr	r2, [pc, #72]	@ (8001c40 <_sbrk+0x68>)
 8001bf8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001bfa:	4b10      	ldr	r3, [pc, #64]	@ (8001c3c <_sbrk+0x64>)
 8001bfc:	681a      	ldr	r2, [r3, #0]
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	4413      	add	r3, r2
 8001c02:	693a      	ldr	r2, [r7, #16]
 8001c04:	429a      	cmp	r2, r3
 8001c06:	d207      	bcs.n	8001c18 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001c08:	f004 fd08 	bl	800661c <__errno>
 8001c0c:	4603      	mov	r3, r0
 8001c0e:	220c      	movs	r2, #12
 8001c10:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001c12:	f04f 33ff 	mov.w	r3, #4294967295
 8001c16:	e009      	b.n	8001c2c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001c18:	4b08      	ldr	r3, [pc, #32]	@ (8001c3c <_sbrk+0x64>)
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001c1e:	4b07      	ldr	r3, [pc, #28]	@ (8001c3c <_sbrk+0x64>)
 8001c20:	681a      	ldr	r2, [r3, #0]
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	4413      	add	r3, r2
 8001c26:	4a05      	ldr	r2, [pc, #20]	@ (8001c3c <_sbrk+0x64>)
 8001c28:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001c2a:	68fb      	ldr	r3, [r7, #12]
}
 8001c2c:	4618      	mov	r0, r3
 8001c2e:	3718      	adds	r7, #24
 8001c30:	46bd      	mov	sp, r7
 8001c32:	bd80      	pop	{r7, pc}
 8001c34:	20020000 	.word	0x20020000
 8001c38:	00000400 	.word	0x00000400
 8001c3c:	2001d160 	.word	0x2001d160
 8001c40:	2001d348 	.word	0x2001d348

08001c44 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001c44:	b480      	push	{r7}
 8001c46:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001c48:	4b06      	ldr	r3, [pc, #24]	@ (8001c64 <SystemInit+0x20>)
 8001c4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001c4e:	4a05      	ldr	r2, [pc, #20]	@ (8001c64 <SystemInit+0x20>)
 8001c50:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001c54:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001c58:	bf00      	nop
 8001c5a:	46bd      	mov	sp, r7
 8001c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c60:	4770      	bx	lr
 8001c62:	bf00      	nop
 8001c64:	e000ed00 	.word	0xe000ed00

08001c68 <MX_TIM2_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim3;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001c68:	b580      	push	{r7, lr}
 8001c6a:	b086      	sub	sp, #24
 8001c6c:	af00      	add	r7, sp, #0

    /* USER CODE BEGIN TIM2_Init 0 */

    /* USER CODE END TIM2_Init 0 */

    TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001c6e:	f107 0308 	add.w	r3, r7, #8
 8001c72:	2200      	movs	r2, #0
 8001c74:	601a      	str	r2, [r3, #0]
 8001c76:	605a      	str	r2, [r3, #4]
 8001c78:	609a      	str	r2, [r3, #8]
 8001c7a:	60da      	str	r2, [r3, #12]
    TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001c7c:	463b      	mov	r3, r7
 8001c7e:	2200      	movs	r2, #0
 8001c80:	601a      	str	r2, [r3, #0]
 8001c82:	605a      	str	r2, [r3, #4]

    /* USER CODE BEGIN TIM2_Init 1 */

    /* USER CODE END TIM2_Init 1 */
    htim2.Instance = TIM2;
 8001c84:	4b1d      	ldr	r3, [pc, #116]	@ (8001cfc <MX_TIM2_Init+0x94>)
 8001c86:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001c8a:	601a      	str	r2, [r3, #0]
    htim2.Init.Prescaler = 0;
 8001c8c:	4b1b      	ldr	r3, [pc, #108]	@ (8001cfc <MX_TIM2_Init+0x94>)
 8001c8e:	2200      	movs	r2, #0
 8001c90:	605a      	str	r2, [r3, #4]
    htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c92:	4b1a      	ldr	r3, [pc, #104]	@ (8001cfc <MX_TIM2_Init+0x94>)
 8001c94:	2200      	movs	r2, #0
 8001c96:	609a      	str	r2, [r3, #8]
    htim2.Init.Period = 840-1;
 8001c98:	4b18      	ldr	r3, [pc, #96]	@ (8001cfc <MX_TIM2_Init+0x94>)
 8001c9a:	f240 3247 	movw	r2, #839	@ 0x347
 8001c9e:	60da      	str	r2, [r3, #12]
    htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001ca0:	4b16      	ldr	r3, [pc, #88]	@ (8001cfc <MX_TIM2_Init+0x94>)
 8001ca2:	2200      	movs	r2, #0
 8001ca4:	611a      	str	r2, [r3, #16]
    htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001ca6:	4b15      	ldr	r3, [pc, #84]	@ (8001cfc <MX_TIM2_Init+0x94>)
 8001ca8:	2280      	movs	r2, #128	@ 0x80
 8001caa:	619a      	str	r2, [r3, #24]
    if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001cac:	4813      	ldr	r0, [pc, #76]	@ (8001cfc <MX_TIM2_Init+0x94>)
 8001cae:	f002 f9b7 	bl	8004020 <HAL_TIM_Base_Init>
 8001cb2:	4603      	mov	r3, r0
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d001      	beq.n	8001cbc <MX_TIM2_Init+0x54>
    {
        Error_Handler();
 8001cb8:	f7ff fba6 	bl	8001408 <Error_Handler>
    }
    sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001cbc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001cc0:	60bb      	str	r3, [r7, #8]
    if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001cc2:	f107 0308 	add.w	r3, r7, #8
 8001cc6:	4619      	mov	r1, r3
 8001cc8:	480c      	ldr	r0, [pc, #48]	@ (8001cfc <MX_TIM2_Init+0x94>)
 8001cca:	f002 fa61 	bl	8004190 <HAL_TIM_ConfigClockSource>
 8001cce:	4603      	mov	r3, r0
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d001      	beq.n	8001cd8 <MX_TIM2_Init+0x70>
    {
        Error_Handler();
 8001cd4:	f7ff fb98 	bl	8001408 <Error_Handler>
    }
    sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001cd8:	2320      	movs	r3, #32
 8001cda:	603b      	str	r3, [r7, #0]
    sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001cdc:	2300      	movs	r3, #0
 8001cde:	607b      	str	r3, [r7, #4]
    if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001ce0:	463b      	mov	r3, r7
 8001ce2:	4619      	mov	r1, r3
 8001ce4:	4805      	ldr	r0, [pc, #20]	@ (8001cfc <MX_TIM2_Init+0x94>)
 8001ce6:	f002 fc55 	bl	8004594 <HAL_TIMEx_MasterConfigSynchronization>
 8001cea:	4603      	mov	r3, r0
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d001      	beq.n	8001cf4 <MX_TIM2_Init+0x8c>
    {
        Error_Handler();
 8001cf0:	f7ff fb8a 	bl	8001408 <Error_Handler>
    }
    /* USER CODE BEGIN TIM2_Init 2 */

    /* USER CODE END TIM2_Init 2 */

}
 8001cf4:	bf00      	nop
 8001cf6:	3718      	adds	r7, #24
 8001cf8:	46bd      	mov	sp, r7
 8001cfa:	bd80      	pop	{r7, pc}
 8001cfc:	2001d164 	.word	0x2001d164

08001d00 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001d00:	b580      	push	{r7, lr}
 8001d02:	b086      	sub	sp, #24
 8001d04:	af00      	add	r7, sp, #0

    /* USER CODE BEGIN TIM3_Init 0 */

    /* USER CODE END TIM3_Init 0 */

    TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001d06:	f107 0308 	add.w	r3, r7, #8
 8001d0a:	2200      	movs	r2, #0
 8001d0c:	601a      	str	r2, [r3, #0]
 8001d0e:	605a      	str	r2, [r3, #4]
 8001d10:	609a      	str	r2, [r3, #8]
 8001d12:	60da      	str	r2, [r3, #12]
    TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001d14:	463b      	mov	r3, r7
 8001d16:	2200      	movs	r2, #0
 8001d18:	601a      	str	r2, [r3, #0]
 8001d1a:	605a      	str	r2, [r3, #4]

    /* USER CODE BEGIN TIM3_Init 1 */

    /* USER CODE END TIM3_Init 1 */
    htim3.Instance = TIM3;
 8001d1c:	4b1d      	ldr	r3, [pc, #116]	@ (8001d94 <MX_TIM3_Init+0x94>)
 8001d1e:	4a1e      	ldr	r2, [pc, #120]	@ (8001d98 <MX_TIM3_Init+0x98>)
 8001d20:	601a      	str	r2, [r3, #0]
    htim3.Init.Prescaler = 0;
 8001d22:	4b1c      	ldr	r3, [pc, #112]	@ (8001d94 <MX_TIM3_Init+0x94>)
 8001d24:	2200      	movs	r2, #0
 8001d26:	605a      	str	r2, [r3, #4]
    htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d28:	4b1a      	ldr	r3, [pc, #104]	@ (8001d94 <MX_TIM3_Init+0x94>)
 8001d2a:	2200      	movs	r2, #0
 8001d2c:	609a      	str	r2, [r3, #8]
    htim3.Init.Period = 2100-1;
 8001d2e:	4b19      	ldr	r3, [pc, #100]	@ (8001d94 <MX_TIM3_Init+0x94>)
 8001d30:	f640 0233 	movw	r2, #2099	@ 0x833
 8001d34:	60da      	str	r2, [r3, #12]
    htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001d36:	4b17      	ldr	r3, [pc, #92]	@ (8001d94 <MX_TIM3_Init+0x94>)
 8001d38:	2200      	movs	r2, #0
 8001d3a:	611a      	str	r2, [r3, #16]
    htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001d3c:	4b15      	ldr	r3, [pc, #84]	@ (8001d94 <MX_TIM3_Init+0x94>)
 8001d3e:	2280      	movs	r2, #128	@ 0x80
 8001d40:	619a      	str	r2, [r3, #24]
    if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001d42:	4814      	ldr	r0, [pc, #80]	@ (8001d94 <MX_TIM3_Init+0x94>)
 8001d44:	f002 f96c 	bl	8004020 <HAL_TIM_Base_Init>
 8001d48:	4603      	mov	r3, r0
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d001      	beq.n	8001d52 <MX_TIM3_Init+0x52>
    {
        Error_Handler();
 8001d4e:	f7ff fb5b 	bl	8001408 <Error_Handler>
    }
    sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001d52:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001d56:	60bb      	str	r3, [r7, #8]
    if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001d58:	f107 0308 	add.w	r3, r7, #8
 8001d5c:	4619      	mov	r1, r3
 8001d5e:	480d      	ldr	r0, [pc, #52]	@ (8001d94 <MX_TIM3_Init+0x94>)
 8001d60:	f002 fa16 	bl	8004190 <HAL_TIM_ConfigClockSource>
 8001d64:	4603      	mov	r3, r0
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d001      	beq.n	8001d6e <MX_TIM3_Init+0x6e>
    {
        Error_Handler();
 8001d6a:	f7ff fb4d 	bl	8001408 <Error_Handler>
    }
    sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001d6e:	2320      	movs	r3, #32
 8001d70:	603b      	str	r3, [r7, #0]
    sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001d72:	2300      	movs	r3, #0
 8001d74:	607b      	str	r3, [r7, #4]
    if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001d76:	463b      	mov	r3, r7
 8001d78:	4619      	mov	r1, r3
 8001d7a:	4806      	ldr	r0, [pc, #24]	@ (8001d94 <MX_TIM3_Init+0x94>)
 8001d7c:	f002 fc0a 	bl	8004594 <HAL_TIMEx_MasterConfigSynchronization>
 8001d80:	4603      	mov	r3, r0
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d001      	beq.n	8001d8a <MX_TIM3_Init+0x8a>
    {
        Error_Handler();
 8001d86:	f7ff fb3f 	bl	8001408 <Error_Handler>
    }
    /* USER CODE BEGIN TIM3_Init 2 */

    /* USER CODE END TIM3_Init 2 */

}
 8001d8a:	bf00      	nop
 8001d8c:	3718      	adds	r7, #24
 8001d8e:	46bd      	mov	sp, r7
 8001d90:	bd80      	pop	{r7, pc}
 8001d92:	bf00      	nop
 8001d94:	2001d1ac 	.word	0x2001d1ac
 8001d98:	40000400 	.word	0x40000400

08001d9c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001d9c:	b480      	push	{r7}
 8001d9e:	b085      	sub	sp, #20
 8001da0:	af00      	add	r7, sp, #0
 8001da2:	6078      	str	r0, [r7, #4]

    if(tim_baseHandle->Instance==TIM2)
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001dac:	d10e      	bne.n	8001dcc <HAL_TIM_Base_MspInit+0x30>
    {
    /* USER CODE BEGIN TIM2_MspInit 0 */

    /* USER CODE END TIM2_MspInit 0 */
        /* TIM2 clock enable */
        __HAL_RCC_TIM2_CLK_ENABLE();
 8001dae:	2300      	movs	r3, #0
 8001db0:	60fb      	str	r3, [r7, #12]
 8001db2:	4b13      	ldr	r3, [pc, #76]	@ (8001e00 <HAL_TIM_Base_MspInit+0x64>)
 8001db4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001db6:	4a12      	ldr	r2, [pc, #72]	@ (8001e00 <HAL_TIM_Base_MspInit+0x64>)
 8001db8:	f043 0301 	orr.w	r3, r3, #1
 8001dbc:	6413      	str	r3, [r2, #64]	@ 0x40
 8001dbe:	4b10      	ldr	r3, [pc, #64]	@ (8001e00 <HAL_TIM_Base_MspInit+0x64>)
 8001dc0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001dc2:	f003 0301 	and.w	r3, r3, #1
 8001dc6:	60fb      	str	r3, [r7, #12]
 8001dc8:	68fb      	ldr	r3, [r7, #12]
        __HAL_RCC_TIM3_CLK_ENABLE();
    /* USER CODE BEGIN TIM3_MspInit 1 */

    /* USER CODE END TIM3_MspInit 1 */
    }
}
 8001dca:	e012      	b.n	8001df2 <HAL_TIM_Base_MspInit+0x56>
    else if(tim_baseHandle->Instance==TIM3)
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	4a0c      	ldr	r2, [pc, #48]	@ (8001e04 <HAL_TIM_Base_MspInit+0x68>)
 8001dd2:	4293      	cmp	r3, r2
 8001dd4:	d10d      	bne.n	8001df2 <HAL_TIM_Base_MspInit+0x56>
        __HAL_RCC_TIM3_CLK_ENABLE();
 8001dd6:	2300      	movs	r3, #0
 8001dd8:	60bb      	str	r3, [r7, #8]
 8001dda:	4b09      	ldr	r3, [pc, #36]	@ (8001e00 <HAL_TIM_Base_MspInit+0x64>)
 8001ddc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001dde:	4a08      	ldr	r2, [pc, #32]	@ (8001e00 <HAL_TIM_Base_MspInit+0x64>)
 8001de0:	f043 0302 	orr.w	r3, r3, #2
 8001de4:	6413      	str	r3, [r2, #64]	@ 0x40
 8001de6:	4b06      	ldr	r3, [pc, #24]	@ (8001e00 <HAL_TIM_Base_MspInit+0x64>)
 8001de8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001dea:	f003 0302 	and.w	r3, r3, #2
 8001dee:	60bb      	str	r3, [r7, #8]
 8001df0:	68bb      	ldr	r3, [r7, #8]
}
 8001df2:	bf00      	nop
 8001df4:	3714      	adds	r7, #20
 8001df6:	46bd      	mov	sp, r7
 8001df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dfc:	4770      	bx	lr
 8001dfe:	bf00      	nop
 8001e00:	40023800 	.word	0x40023800
 8001e04:	40000400 	.word	0x40000400

08001e08 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001e08:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001e40 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001e0c:	480d      	ldr	r0, [pc, #52]	@ (8001e44 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001e0e:	490e      	ldr	r1, [pc, #56]	@ (8001e48 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001e10:	4a0e      	ldr	r2, [pc, #56]	@ (8001e4c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001e12:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001e14:	e002      	b.n	8001e1c <LoopCopyDataInit>

08001e16 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001e16:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001e18:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001e1a:	3304      	adds	r3, #4

08001e1c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001e1c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001e1e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001e20:	d3f9      	bcc.n	8001e16 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001e22:	4a0b      	ldr	r2, [pc, #44]	@ (8001e50 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001e24:	4c0b      	ldr	r4, [pc, #44]	@ (8001e54 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001e26:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001e28:	e001      	b.n	8001e2e <LoopFillZerobss>

08001e2a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001e2a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001e2c:	3204      	adds	r2, #4

08001e2e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001e2e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001e30:	d3fb      	bcc.n	8001e2a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001e32:	f7ff ff07 	bl	8001c44 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001e36:	f004 fbf7 	bl	8006628 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001e3a:	f7ff fcfd 	bl	8001838 <main>
  bx  lr    
 8001e3e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001e40:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001e44:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001e48:	200001d8 	.word	0x200001d8
  ldr r2, =_sidata
 8001e4c:	0800e228 	.word	0x0800e228
  ldr r2, =_sbss
 8001e50:	200001d8 	.word	0x200001d8
  ldr r4, =_ebss
 8001e54:	2001d344 	.word	0x2001d344

08001e58 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001e58:	e7fe      	b.n	8001e58 <ADC_IRQHandler>
	...

08001e5c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001e5c:	b580      	push	{r7, lr}
 8001e5e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001e60:	4b0e      	ldr	r3, [pc, #56]	@ (8001e9c <HAL_Init+0x40>)
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	4a0d      	ldr	r2, [pc, #52]	@ (8001e9c <HAL_Init+0x40>)
 8001e66:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001e6a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001e6c:	4b0b      	ldr	r3, [pc, #44]	@ (8001e9c <HAL_Init+0x40>)
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	4a0a      	ldr	r2, [pc, #40]	@ (8001e9c <HAL_Init+0x40>)
 8001e72:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001e76:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001e78:	4b08      	ldr	r3, [pc, #32]	@ (8001e9c <HAL_Init+0x40>)
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	4a07      	ldr	r2, [pc, #28]	@ (8001e9c <HAL_Init+0x40>)
 8001e7e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001e82:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001e84:	2003      	movs	r0, #3
 8001e86:	f000 fd33 	bl	80028f0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001e8a:	200f      	movs	r0, #15
 8001e8c:	f000 f808 	bl	8001ea0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001e90:	f7ff fd8a 	bl	80019a8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001e94:	2300      	movs	r3, #0
}
 8001e96:	4618      	mov	r0, r3
 8001e98:	bd80      	pop	{r7, pc}
 8001e9a:	bf00      	nop
 8001e9c:	40023c00 	.word	0x40023c00

08001ea0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001ea0:	b580      	push	{r7, lr}
 8001ea2:	b082      	sub	sp, #8
 8001ea4:	af00      	add	r7, sp, #0
 8001ea6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001ea8:	4b12      	ldr	r3, [pc, #72]	@ (8001ef4 <HAL_InitTick+0x54>)
 8001eaa:	681a      	ldr	r2, [r3, #0]
 8001eac:	4b12      	ldr	r3, [pc, #72]	@ (8001ef8 <HAL_InitTick+0x58>)
 8001eae:	781b      	ldrb	r3, [r3, #0]
 8001eb0:	4619      	mov	r1, r3
 8001eb2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001eb6:	fbb3 f3f1 	udiv	r3, r3, r1
 8001eba:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ebe:	4618      	mov	r0, r3
 8001ec0:	f000 fd4b 	bl	800295a <HAL_SYSTICK_Config>
 8001ec4:	4603      	mov	r3, r0
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d001      	beq.n	8001ece <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001eca:	2301      	movs	r3, #1
 8001ecc:	e00e      	b.n	8001eec <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	2b0f      	cmp	r3, #15
 8001ed2:	d80a      	bhi.n	8001eea <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001ed4:	2200      	movs	r2, #0
 8001ed6:	6879      	ldr	r1, [r7, #4]
 8001ed8:	f04f 30ff 	mov.w	r0, #4294967295
 8001edc:	f000 fd13 	bl	8002906 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001ee0:	4a06      	ldr	r2, [pc, #24]	@ (8001efc <HAL_InitTick+0x5c>)
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001ee6:	2300      	movs	r3, #0
 8001ee8:	e000      	b.n	8001eec <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001eea:	2301      	movs	r3, #1
}
 8001eec:	4618      	mov	r0, r3
 8001eee:	3708      	adds	r7, #8
 8001ef0:	46bd      	mov	sp, r7
 8001ef2:	bd80      	pop	{r7, pc}
 8001ef4:	20000004 	.word	0x20000004
 8001ef8:	2000000c 	.word	0x2000000c
 8001efc:	20000008 	.word	0x20000008

08001f00 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001f00:	b480      	push	{r7}
 8001f02:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001f04:	4b06      	ldr	r3, [pc, #24]	@ (8001f20 <HAL_IncTick+0x20>)
 8001f06:	781b      	ldrb	r3, [r3, #0]
 8001f08:	461a      	mov	r2, r3
 8001f0a:	4b06      	ldr	r3, [pc, #24]	@ (8001f24 <HAL_IncTick+0x24>)
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	4413      	add	r3, r2
 8001f10:	4a04      	ldr	r2, [pc, #16]	@ (8001f24 <HAL_IncTick+0x24>)
 8001f12:	6013      	str	r3, [r2, #0]
}
 8001f14:	bf00      	nop
 8001f16:	46bd      	mov	sp, r7
 8001f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f1c:	4770      	bx	lr
 8001f1e:	bf00      	nop
 8001f20:	2000000c 	.word	0x2000000c
 8001f24:	2001d1f4 	.word	0x2001d1f4

08001f28 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001f28:	b480      	push	{r7}
 8001f2a:	af00      	add	r7, sp, #0
  return uwTick;
 8001f2c:	4b03      	ldr	r3, [pc, #12]	@ (8001f3c <HAL_GetTick+0x14>)
 8001f2e:	681b      	ldr	r3, [r3, #0]
}
 8001f30:	4618      	mov	r0, r3
 8001f32:	46bd      	mov	sp, r7
 8001f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f38:	4770      	bx	lr
 8001f3a:	bf00      	nop
 8001f3c:	2001d1f4 	.word	0x2001d1f4

08001f40 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001f40:	b580      	push	{r7, lr}
 8001f42:	b084      	sub	sp, #16
 8001f44:	af00      	add	r7, sp, #0
 8001f46:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001f48:	2300      	movs	r3, #0
 8001f4a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d101      	bne.n	8001f56 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001f52:	2301      	movs	r3, #1
 8001f54:	e033      	b.n	8001fbe <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d109      	bne.n	8001f72 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001f5e:	6878      	ldr	r0, [r7, #4]
 8001f60:	f7ff f910 	bl	8001184 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	2200      	movs	r2, #0
 8001f68:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	2200      	movs	r2, #0
 8001f6e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f76:	f003 0310 	and.w	r3, r3, #16
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d118      	bne.n	8001fb0 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f82:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8001f86:	f023 0302 	bic.w	r3, r3, #2
 8001f8a:	f043 0202 	orr.w	r2, r3, #2
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001f92:	6878      	ldr	r0, [r7, #4]
 8001f94:	f000 fa5e 	bl	8002454 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	2200      	movs	r2, #0
 8001f9c:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fa2:	f023 0303 	bic.w	r3, r3, #3
 8001fa6:	f043 0201 	orr.w	r2, r3, #1
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	641a      	str	r2, [r3, #64]	@ 0x40
 8001fae:	e001      	b.n	8001fb4 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001fb0:	2301      	movs	r3, #1
 8001fb2:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	2200      	movs	r2, #0
 8001fb8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001fbc:	7bfb      	ldrb	r3, [r7, #15]
}
 8001fbe:	4618      	mov	r0, r3
 8001fc0:	3710      	adds	r7, #16
 8001fc2:	46bd      	mov	sp, r7
 8001fc4:	bd80      	pop	{r7, pc}
	...

08001fc8 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8001fc8:	b580      	push	{r7, lr}
 8001fca:	b086      	sub	sp, #24
 8001fcc:	af00      	add	r7, sp, #0
 8001fce:	60f8      	str	r0, [r7, #12]
 8001fd0:	60b9      	str	r1, [r7, #8]
 8001fd2:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8001fd4:	2300      	movs	r3, #0
 8001fd6:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001fde:	2b01      	cmp	r3, #1
 8001fe0:	d101      	bne.n	8001fe6 <HAL_ADC_Start_DMA+0x1e>
 8001fe2:	2302      	movs	r3, #2
 8001fe4:	e0e9      	b.n	80021ba <HAL_ADC_Start_DMA+0x1f2>
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	2201      	movs	r2, #1
 8001fea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	689b      	ldr	r3, [r3, #8]
 8001ff4:	f003 0301 	and.w	r3, r3, #1
 8001ff8:	2b01      	cmp	r3, #1
 8001ffa:	d018      	beq.n	800202e <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	689a      	ldr	r2, [r3, #8]
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	f042 0201 	orr.w	r2, r2, #1
 800200a:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800200c:	4b6d      	ldr	r3, [pc, #436]	@ (80021c4 <HAL_ADC_Start_DMA+0x1fc>)
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	4a6d      	ldr	r2, [pc, #436]	@ (80021c8 <HAL_ADC_Start_DMA+0x200>)
 8002012:	fba2 2303 	umull	r2, r3, r2, r3
 8002016:	0c9a      	lsrs	r2, r3, #18
 8002018:	4613      	mov	r3, r2
 800201a:	005b      	lsls	r3, r3, #1
 800201c:	4413      	add	r3, r2
 800201e:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8002020:	e002      	b.n	8002028 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8002022:	693b      	ldr	r3, [r7, #16]
 8002024:	3b01      	subs	r3, #1
 8002026:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8002028:	693b      	ldr	r3, [r7, #16]
 800202a:	2b00      	cmp	r3, #0
 800202c:	d1f9      	bne.n	8002022 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	689b      	ldr	r3, [r3, #8]
 8002034:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002038:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800203c:	d107      	bne.n	800204e <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	689a      	ldr	r2, [r3, #8]
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800204c:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	689b      	ldr	r3, [r3, #8]
 8002054:	f003 0301 	and.w	r3, r3, #1
 8002058:	2b01      	cmp	r3, #1
 800205a:	f040 80a1 	bne.w	80021a0 <HAL_ADC_Start_DMA+0x1d8>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002062:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8002066:	f023 0301 	bic.w	r3, r3, #1
 800206a:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	685b      	ldr	r3, [r3, #4]
 8002078:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800207c:	2b00      	cmp	r3, #0
 800207e:	d007      	beq.n	8002090 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002084:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8002088:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002094:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002098:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800209c:	d106      	bne.n	80020ac <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80020a2:	f023 0206 	bic.w	r2, r3, #6
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	645a      	str	r2, [r3, #68]	@ 0x44
 80020aa:	e002      	b.n	80020b2 <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	2200      	movs	r2, #0
 80020b0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	2200      	movs	r2, #0
 80020b6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80020ba:	4b44      	ldr	r3, [pc, #272]	@ (80021cc <HAL_ADC_Start_DMA+0x204>)
 80020bc:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80020c2:	4a43      	ldr	r2, [pc, #268]	@ (80021d0 <HAL_ADC_Start_DMA+0x208>)
 80020c4:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80020ca:	4a42      	ldr	r2, [pc, #264]	@ (80021d4 <HAL_ADC_Start_DMA+0x20c>)
 80020cc:	641a      	str	r2, [r3, #64]	@ 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80020d2:	4a41      	ldr	r2, [pc, #260]	@ (80021d8 <HAL_ADC_Start_DMA+0x210>)
 80020d4:	64da      	str	r2, [r3, #76]	@ 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 80020de:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	685a      	ldr	r2, [r3, #4]
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 80020ee:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	689a      	ldr	r2, [r3, #8]
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80020fe:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	334c      	adds	r3, #76	@ 0x4c
 800210a:	4619      	mov	r1, r3
 800210c:	68ba      	ldr	r2, [r7, #8]
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	f000 fec6 	bl	8002ea0 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8002114:	697b      	ldr	r3, [r7, #20]
 8002116:	685b      	ldr	r3, [r3, #4]
 8002118:	f003 031f 	and.w	r3, r3, #31
 800211c:	2b00      	cmp	r3, #0
 800211e:	d12a      	bne.n	8002176 <HAL_ADC_Start_DMA+0x1ae>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	4a2d      	ldr	r2, [pc, #180]	@ (80021dc <HAL_ADC_Start_DMA+0x214>)
 8002126:	4293      	cmp	r3, r2
 8002128:	d015      	beq.n	8002156 <HAL_ADC_Start_DMA+0x18e>
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	4a2c      	ldr	r2, [pc, #176]	@ (80021e0 <HAL_ADC_Start_DMA+0x218>)
 8002130:	4293      	cmp	r3, r2
 8002132:	d105      	bne.n	8002140 <HAL_ADC_Start_DMA+0x178>
 8002134:	4b25      	ldr	r3, [pc, #148]	@ (80021cc <HAL_ADC_Start_DMA+0x204>)
 8002136:	685b      	ldr	r3, [r3, #4]
 8002138:	f003 031f 	and.w	r3, r3, #31
 800213c:	2b00      	cmp	r3, #0
 800213e:	d00a      	beq.n	8002156 <HAL_ADC_Start_DMA+0x18e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	4a27      	ldr	r2, [pc, #156]	@ (80021e4 <HAL_ADC_Start_DMA+0x21c>)
 8002146:	4293      	cmp	r3, r2
 8002148:	d136      	bne.n	80021b8 <HAL_ADC_Start_DMA+0x1f0>
 800214a:	4b20      	ldr	r3, [pc, #128]	@ (80021cc <HAL_ADC_Start_DMA+0x204>)
 800214c:	685b      	ldr	r3, [r3, #4]
 800214e:	f003 0310 	and.w	r3, r3, #16
 8002152:	2b00      	cmp	r3, #0
 8002154:	d130      	bne.n	80021b8 <HAL_ADC_Start_DMA+0x1f0>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	689b      	ldr	r3, [r3, #8]
 800215c:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002160:	2b00      	cmp	r3, #0
 8002162:	d129      	bne.n	80021b8 <HAL_ADC_Start_DMA+0x1f0>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	689a      	ldr	r2, [r3, #8]
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8002172:	609a      	str	r2, [r3, #8]
 8002174:	e020      	b.n	80021b8 <HAL_ADC_Start_DMA+0x1f0>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	4a18      	ldr	r2, [pc, #96]	@ (80021dc <HAL_ADC_Start_DMA+0x214>)
 800217c:	4293      	cmp	r3, r2
 800217e:	d11b      	bne.n	80021b8 <HAL_ADC_Start_DMA+0x1f0>
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	689b      	ldr	r3, [r3, #8]
 8002186:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800218a:	2b00      	cmp	r3, #0
 800218c:	d114      	bne.n	80021b8 <HAL_ADC_Start_DMA+0x1f0>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	689a      	ldr	r2, [r3, #8]
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 800219c:	609a      	str	r2, [r3, #8]
 800219e:	e00b      	b.n	80021b8 <HAL_ADC_Start_DMA+0x1f0>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021a4:	f043 0210 	orr.w	r2, r3, #16
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80021b0:	f043 0201 	orr.w	r2, r3, #1
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	645a      	str	r2, [r3, #68]	@ 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 80021b8:	2300      	movs	r3, #0
}
 80021ba:	4618      	mov	r0, r3
 80021bc:	3718      	adds	r7, #24
 80021be:	46bd      	mov	sp, r7
 80021c0:	bd80      	pop	{r7, pc}
 80021c2:	bf00      	nop
 80021c4:	20000004 	.word	0x20000004
 80021c8:	431bde83 	.word	0x431bde83
 80021cc:	40012300 	.word	0x40012300
 80021d0:	0800264d 	.word	0x0800264d
 80021d4:	08002707 	.word	0x08002707
 80021d8:	08002723 	.word	0x08002723
 80021dc:	40012000 	.word	0x40012000
 80021e0:	40012100 	.word	0x40012100
 80021e4:	40012200 	.word	0x40012200

080021e8 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 80021e8:	b480      	push	{r7}
 80021ea:	b083      	sub	sp, #12
 80021ec:	af00      	add	r7, sp, #0
 80021ee:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 80021f0:	bf00      	nop
 80021f2:	370c      	adds	r7, #12
 80021f4:	46bd      	mov	sp, r7
 80021f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021fa:	4770      	bx	lr

080021fc <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80021fc:	b480      	push	{r7}
 80021fe:	b083      	sub	sp, #12
 8002200:	af00      	add	r7, sp, #0
 8002202:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8002204:	bf00      	nop
 8002206:	370c      	adds	r7, #12
 8002208:	46bd      	mov	sp, r7
 800220a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800220e:	4770      	bx	lr

08002210 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002210:	b480      	push	{r7}
 8002212:	b085      	sub	sp, #20
 8002214:	af00      	add	r7, sp, #0
 8002216:	6078      	str	r0, [r7, #4]
 8002218:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800221a:	2300      	movs	r3, #0
 800221c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002224:	2b01      	cmp	r3, #1
 8002226:	d101      	bne.n	800222c <HAL_ADC_ConfigChannel+0x1c>
 8002228:	2302      	movs	r3, #2
 800222a:	e105      	b.n	8002438 <HAL_ADC_ConfigChannel+0x228>
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	2201      	movs	r2, #1
 8002230:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002234:	683b      	ldr	r3, [r7, #0]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	2b09      	cmp	r3, #9
 800223a:	d925      	bls.n	8002288 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	68d9      	ldr	r1, [r3, #12]
 8002242:	683b      	ldr	r3, [r7, #0]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	b29b      	uxth	r3, r3
 8002248:	461a      	mov	r2, r3
 800224a:	4613      	mov	r3, r2
 800224c:	005b      	lsls	r3, r3, #1
 800224e:	4413      	add	r3, r2
 8002250:	3b1e      	subs	r3, #30
 8002252:	2207      	movs	r2, #7
 8002254:	fa02 f303 	lsl.w	r3, r2, r3
 8002258:	43da      	mvns	r2, r3
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	400a      	ands	r2, r1
 8002260:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	68d9      	ldr	r1, [r3, #12]
 8002268:	683b      	ldr	r3, [r7, #0]
 800226a:	689a      	ldr	r2, [r3, #8]
 800226c:	683b      	ldr	r3, [r7, #0]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	b29b      	uxth	r3, r3
 8002272:	4618      	mov	r0, r3
 8002274:	4603      	mov	r3, r0
 8002276:	005b      	lsls	r3, r3, #1
 8002278:	4403      	add	r3, r0
 800227a:	3b1e      	subs	r3, #30
 800227c:	409a      	lsls	r2, r3
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	430a      	orrs	r2, r1
 8002284:	60da      	str	r2, [r3, #12]
 8002286:	e022      	b.n	80022ce <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	6919      	ldr	r1, [r3, #16]
 800228e:	683b      	ldr	r3, [r7, #0]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	b29b      	uxth	r3, r3
 8002294:	461a      	mov	r2, r3
 8002296:	4613      	mov	r3, r2
 8002298:	005b      	lsls	r3, r3, #1
 800229a:	4413      	add	r3, r2
 800229c:	2207      	movs	r2, #7
 800229e:	fa02 f303 	lsl.w	r3, r2, r3
 80022a2:	43da      	mvns	r2, r3
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	400a      	ands	r2, r1
 80022aa:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	6919      	ldr	r1, [r3, #16]
 80022b2:	683b      	ldr	r3, [r7, #0]
 80022b4:	689a      	ldr	r2, [r3, #8]
 80022b6:	683b      	ldr	r3, [r7, #0]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	b29b      	uxth	r3, r3
 80022bc:	4618      	mov	r0, r3
 80022be:	4603      	mov	r3, r0
 80022c0:	005b      	lsls	r3, r3, #1
 80022c2:	4403      	add	r3, r0
 80022c4:	409a      	lsls	r2, r3
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	430a      	orrs	r2, r1
 80022cc:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80022ce:	683b      	ldr	r3, [r7, #0]
 80022d0:	685b      	ldr	r3, [r3, #4]
 80022d2:	2b06      	cmp	r3, #6
 80022d4:	d824      	bhi.n	8002320 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80022dc:	683b      	ldr	r3, [r7, #0]
 80022de:	685a      	ldr	r2, [r3, #4]
 80022e0:	4613      	mov	r3, r2
 80022e2:	009b      	lsls	r3, r3, #2
 80022e4:	4413      	add	r3, r2
 80022e6:	3b05      	subs	r3, #5
 80022e8:	221f      	movs	r2, #31
 80022ea:	fa02 f303 	lsl.w	r3, r2, r3
 80022ee:	43da      	mvns	r2, r3
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	400a      	ands	r2, r1
 80022f6:	635a      	str	r2, [r3, #52]	@ 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80022fe:	683b      	ldr	r3, [r7, #0]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	b29b      	uxth	r3, r3
 8002304:	4618      	mov	r0, r3
 8002306:	683b      	ldr	r3, [r7, #0]
 8002308:	685a      	ldr	r2, [r3, #4]
 800230a:	4613      	mov	r3, r2
 800230c:	009b      	lsls	r3, r3, #2
 800230e:	4413      	add	r3, r2
 8002310:	3b05      	subs	r3, #5
 8002312:	fa00 f203 	lsl.w	r2, r0, r3
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	430a      	orrs	r2, r1
 800231c:	635a      	str	r2, [r3, #52]	@ 0x34
 800231e:	e04c      	b.n	80023ba <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002320:	683b      	ldr	r3, [r7, #0]
 8002322:	685b      	ldr	r3, [r3, #4]
 8002324:	2b0c      	cmp	r3, #12
 8002326:	d824      	bhi.n	8002372 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800232e:	683b      	ldr	r3, [r7, #0]
 8002330:	685a      	ldr	r2, [r3, #4]
 8002332:	4613      	mov	r3, r2
 8002334:	009b      	lsls	r3, r3, #2
 8002336:	4413      	add	r3, r2
 8002338:	3b23      	subs	r3, #35	@ 0x23
 800233a:	221f      	movs	r2, #31
 800233c:	fa02 f303 	lsl.w	r3, r2, r3
 8002340:	43da      	mvns	r2, r3
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	400a      	ands	r2, r1
 8002348:	631a      	str	r2, [r3, #48]	@ 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002350:	683b      	ldr	r3, [r7, #0]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	b29b      	uxth	r3, r3
 8002356:	4618      	mov	r0, r3
 8002358:	683b      	ldr	r3, [r7, #0]
 800235a:	685a      	ldr	r2, [r3, #4]
 800235c:	4613      	mov	r3, r2
 800235e:	009b      	lsls	r3, r3, #2
 8002360:	4413      	add	r3, r2
 8002362:	3b23      	subs	r3, #35	@ 0x23
 8002364:	fa00 f203 	lsl.w	r2, r0, r3
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	430a      	orrs	r2, r1
 800236e:	631a      	str	r2, [r3, #48]	@ 0x30
 8002370:	e023      	b.n	80023ba <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002378:	683b      	ldr	r3, [r7, #0]
 800237a:	685a      	ldr	r2, [r3, #4]
 800237c:	4613      	mov	r3, r2
 800237e:	009b      	lsls	r3, r3, #2
 8002380:	4413      	add	r3, r2
 8002382:	3b41      	subs	r3, #65	@ 0x41
 8002384:	221f      	movs	r2, #31
 8002386:	fa02 f303 	lsl.w	r3, r2, r3
 800238a:	43da      	mvns	r2, r3
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	400a      	ands	r2, r1
 8002392:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800239a:	683b      	ldr	r3, [r7, #0]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	b29b      	uxth	r3, r3
 80023a0:	4618      	mov	r0, r3
 80023a2:	683b      	ldr	r3, [r7, #0]
 80023a4:	685a      	ldr	r2, [r3, #4]
 80023a6:	4613      	mov	r3, r2
 80023a8:	009b      	lsls	r3, r3, #2
 80023aa:	4413      	add	r3, r2
 80023ac:	3b41      	subs	r3, #65	@ 0x41
 80023ae:	fa00 f203 	lsl.w	r2, r0, r3
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	430a      	orrs	r2, r1
 80023b8:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80023ba:	4b22      	ldr	r3, [pc, #136]	@ (8002444 <HAL_ADC_ConfigChannel+0x234>)
 80023bc:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	4a21      	ldr	r2, [pc, #132]	@ (8002448 <HAL_ADC_ConfigChannel+0x238>)
 80023c4:	4293      	cmp	r3, r2
 80023c6:	d109      	bne.n	80023dc <HAL_ADC_ConfigChannel+0x1cc>
 80023c8:	683b      	ldr	r3, [r7, #0]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	2b12      	cmp	r3, #18
 80023ce:	d105      	bne.n	80023dc <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	685b      	ldr	r3, [r3, #4]
 80023d4:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	4a19      	ldr	r2, [pc, #100]	@ (8002448 <HAL_ADC_ConfigChannel+0x238>)
 80023e2:	4293      	cmp	r3, r2
 80023e4:	d123      	bne.n	800242e <HAL_ADC_ConfigChannel+0x21e>
 80023e6:	683b      	ldr	r3, [r7, #0]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	2b10      	cmp	r3, #16
 80023ec:	d003      	beq.n	80023f6 <HAL_ADC_ConfigChannel+0x1e6>
 80023ee:	683b      	ldr	r3, [r7, #0]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	2b11      	cmp	r3, #17
 80023f4:	d11b      	bne.n	800242e <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	685b      	ldr	r3, [r3, #4]
 80023fa:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002402:	683b      	ldr	r3, [r7, #0]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	2b10      	cmp	r3, #16
 8002408:	d111      	bne.n	800242e <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800240a:	4b10      	ldr	r3, [pc, #64]	@ (800244c <HAL_ADC_ConfigChannel+0x23c>)
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	4a10      	ldr	r2, [pc, #64]	@ (8002450 <HAL_ADC_ConfigChannel+0x240>)
 8002410:	fba2 2303 	umull	r2, r3, r2, r3
 8002414:	0c9a      	lsrs	r2, r3, #18
 8002416:	4613      	mov	r3, r2
 8002418:	009b      	lsls	r3, r3, #2
 800241a:	4413      	add	r3, r2
 800241c:	005b      	lsls	r3, r3, #1
 800241e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002420:	e002      	b.n	8002428 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8002422:	68bb      	ldr	r3, [r7, #8]
 8002424:	3b01      	subs	r3, #1
 8002426:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002428:	68bb      	ldr	r3, [r7, #8]
 800242a:	2b00      	cmp	r3, #0
 800242c:	d1f9      	bne.n	8002422 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	2200      	movs	r2, #0
 8002432:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002436:	2300      	movs	r3, #0
}
 8002438:	4618      	mov	r0, r3
 800243a:	3714      	adds	r7, #20
 800243c:	46bd      	mov	sp, r7
 800243e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002442:	4770      	bx	lr
 8002444:	40012300 	.word	0x40012300
 8002448:	40012000 	.word	0x40012000
 800244c:	20000004 	.word	0x20000004
 8002450:	431bde83 	.word	0x431bde83

08002454 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002454:	b480      	push	{r7}
 8002456:	b085      	sub	sp, #20
 8002458:	af00      	add	r7, sp, #0
 800245a:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800245c:	4b79      	ldr	r3, [pc, #484]	@ (8002644 <ADC_Init+0x1f0>)
 800245e:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	685b      	ldr	r3, [r3, #4]
 8002464:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	685a      	ldr	r2, [r3, #4]
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	685b      	ldr	r3, [r3, #4]
 8002474:	431a      	orrs	r2, r3
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	685a      	ldr	r2, [r3, #4]
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002488:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	6859      	ldr	r1, [r3, #4]
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	691b      	ldr	r3, [r3, #16]
 8002494:	021a      	lsls	r2, r3, #8
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	430a      	orrs	r2, r1
 800249c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	685a      	ldr	r2, [r3, #4]
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 80024ac:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	6859      	ldr	r1, [r3, #4]
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	689a      	ldr	r2, [r3, #8]
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	430a      	orrs	r2, r1
 80024be:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	689a      	ldr	r2, [r3, #8]
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80024ce:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	6899      	ldr	r1, [r3, #8]
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	68da      	ldr	r2, [r3, #12]
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	430a      	orrs	r2, r1
 80024e0:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80024e6:	4a58      	ldr	r2, [pc, #352]	@ (8002648 <ADC_Init+0x1f4>)
 80024e8:	4293      	cmp	r3, r2
 80024ea:	d022      	beq.n	8002532 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	689a      	ldr	r2, [r3, #8]
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80024fa:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	6899      	ldr	r1, [r3, #8]
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	430a      	orrs	r2, r1
 800250c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	689a      	ldr	r2, [r3, #8]
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 800251c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	6899      	ldr	r1, [r3, #8]
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	430a      	orrs	r2, r1
 800252e:	609a      	str	r2, [r3, #8]
 8002530:	e00f      	b.n	8002552 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	689a      	ldr	r2, [r3, #8]
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002540:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	689a      	ldr	r2, [r3, #8]
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8002550:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	689a      	ldr	r2, [r3, #8]
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	f022 0202 	bic.w	r2, r2, #2
 8002560:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	6899      	ldr	r1, [r3, #8]
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	7e1b      	ldrb	r3, [r3, #24]
 800256c:	005a      	lsls	r2, r3, #1
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	430a      	orrs	r2, r1
 8002574:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	f893 3020 	ldrb.w	r3, [r3, #32]
 800257c:	2b00      	cmp	r3, #0
 800257e:	d01b      	beq.n	80025b8 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	685a      	ldr	r2, [r3, #4]
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800258e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	685a      	ldr	r2, [r3, #4]
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 800259e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	6859      	ldr	r1, [r3, #4]
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025aa:	3b01      	subs	r3, #1
 80025ac:	035a      	lsls	r2, r3, #13
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	430a      	orrs	r2, r1
 80025b4:	605a      	str	r2, [r3, #4]
 80025b6:	e007      	b.n	80025c8 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	685a      	ldr	r2, [r3, #4]
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80025c6:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 80025d6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	69db      	ldr	r3, [r3, #28]
 80025e2:	3b01      	subs	r3, #1
 80025e4:	051a      	lsls	r2, r3, #20
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	430a      	orrs	r2, r1
 80025ec:	62da      	str	r2, [r3, #44]	@ 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	689a      	ldr	r2, [r3, #8]
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 80025fc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	6899      	ldr	r1, [r3, #8]
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800260a:	025a      	lsls	r2, r3, #9
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	430a      	orrs	r2, r1
 8002612:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	689a      	ldr	r2, [r3, #8]
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002622:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	6899      	ldr	r1, [r3, #8]
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	695b      	ldr	r3, [r3, #20]
 800262e:	029a      	lsls	r2, r3, #10
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	430a      	orrs	r2, r1
 8002636:	609a      	str	r2, [r3, #8]
}
 8002638:	bf00      	nop
 800263a:	3714      	adds	r7, #20
 800263c:	46bd      	mov	sp, r7
 800263e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002642:	4770      	bx	lr
 8002644:	40012300 	.word	0x40012300
 8002648:	0f000001 	.word	0x0f000001

0800264c <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 800264c:	b580      	push	{r7, lr}
 800264e:	b084      	sub	sp, #16
 8002650:	af00      	add	r7, sp, #0
 8002652:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002658:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800265e:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8002662:	2b00      	cmp	r3, #0
 8002664:	d13c      	bne.n	80026e0 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800266a:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	689b      	ldr	r3, [r3, #8]
 8002678:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800267c:	2b00      	cmp	r3, #0
 800267e:	d12b      	bne.n	80026d8 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002684:	2b00      	cmp	r3, #0
 8002686:	d127      	bne.n	80026d8 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800268e:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002692:	2b00      	cmp	r3, #0
 8002694:	d006      	beq.n	80026a4 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	689b      	ldr	r3, [r3, #8]
 800269c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d119      	bne.n	80026d8 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	685a      	ldr	r2, [r3, #4]
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	f022 0220 	bic.w	r2, r2, #32
 80026b2:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026b8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	641a      	str	r2, [r3, #64]	@ 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026c4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d105      	bne.n	80026d8 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026d0:	f043 0201 	orr.w	r2, r3, #1
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	641a      	str	r2, [r3, #64]	@ 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80026d8:	68f8      	ldr	r0, [r7, #12]
 80026da:	f7fe fdd3 	bl	8001284 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80026de:	e00e      	b.n	80026fe <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026e4:	f003 0310 	and.w	r3, r3, #16
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d003      	beq.n	80026f4 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 80026ec:	68f8      	ldr	r0, [r7, #12]
 80026ee:	f7ff fd85 	bl	80021fc <HAL_ADC_ErrorCallback>
}
 80026f2:	e004      	b.n	80026fe <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80026f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80026fa:	6878      	ldr	r0, [r7, #4]
 80026fc:	4798      	blx	r3
}
 80026fe:	bf00      	nop
 8002700:	3710      	adds	r7, #16
 8002702:	46bd      	mov	sp, r7
 8002704:	bd80      	pop	{r7, pc}

08002706 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8002706:	b580      	push	{r7, lr}
 8002708:	b084      	sub	sp, #16
 800270a:	af00      	add	r7, sp, #0
 800270c:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002712:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002714:	68f8      	ldr	r0, [r7, #12]
 8002716:	f7ff fd67 	bl	80021e8 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800271a:	bf00      	nop
 800271c:	3710      	adds	r7, #16
 800271e:	46bd      	mov	sp, r7
 8002720:	bd80      	pop	{r7, pc}

08002722 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8002722:	b580      	push	{r7, lr}
 8002724:	b084      	sub	sp, #16
 8002726:	af00      	add	r7, sp, #0
 8002728:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800272e:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	2240      	movs	r2, #64	@ 0x40
 8002734:	641a      	str	r2, [r3, #64]	@ 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800273a:	f043 0204 	orr.w	r2, r3, #4
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	645a      	str	r2, [r3, #68]	@ 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002742:	68f8      	ldr	r0, [r7, #12]
 8002744:	f7ff fd5a 	bl	80021fc <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002748:	bf00      	nop
 800274a:	3710      	adds	r7, #16
 800274c:	46bd      	mov	sp, r7
 800274e:	bd80      	pop	{r7, pc}

08002750 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002750:	b480      	push	{r7}
 8002752:	b085      	sub	sp, #20
 8002754:	af00      	add	r7, sp, #0
 8002756:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	f003 0307 	and.w	r3, r3, #7
 800275e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002760:	4b0c      	ldr	r3, [pc, #48]	@ (8002794 <__NVIC_SetPriorityGrouping+0x44>)
 8002762:	68db      	ldr	r3, [r3, #12]
 8002764:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002766:	68ba      	ldr	r2, [r7, #8]
 8002768:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800276c:	4013      	ands	r3, r2
 800276e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002774:	68bb      	ldr	r3, [r7, #8]
 8002776:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002778:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800277c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002780:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002782:	4a04      	ldr	r2, [pc, #16]	@ (8002794 <__NVIC_SetPriorityGrouping+0x44>)
 8002784:	68bb      	ldr	r3, [r7, #8]
 8002786:	60d3      	str	r3, [r2, #12]
}
 8002788:	bf00      	nop
 800278a:	3714      	adds	r7, #20
 800278c:	46bd      	mov	sp, r7
 800278e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002792:	4770      	bx	lr
 8002794:	e000ed00 	.word	0xe000ed00

08002798 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002798:	b480      	push	{r7}
 800279a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800279c:	4b04      	ldr	r3, [pc, #16]	@ (80027b0 <__NVIC_GetPriorityGrouping+0x18>)
 800279e:	68db      	ldr	r3, [r3, #12]
 80027a0:	0a1b      	lsrs	r3, r3, #8
 80027a2:	f003 0307 	and.w	r3, r3, #7
}
 80027a6:	4618      	mov	r0, r3
 80027a8:	46bd      	mov	sp, r7
 80027aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ae:	4770      	bx	lr
 80027b0:	e000ed00 	.word	0xe000ed00

080027b4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80027b4:	b480      	push	{r7}
 80027b6:	b083      	sub	sp, #12
 80027b8:	af00      	add	r7, sp, #0
 80027ba:	4603      	mov	r3, r0
 80027bc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80027be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	db0b      	blt.n	80027de <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80027c6:	79fb      	ldrb	r3, [r7, #7]
 80027c8:	f003 021f 	and.w	r2, r3, #31
 80027cc:	4907      	ldr	r1, [pc, #28]	@ (80027ec <__NVIC_EnableIRQ+0x38>)
 80027ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027d2:	095b      	lsrs	r3, r3, #5
 80027d4:	2001      	movs	r0, #1
 80027d6:	fa00 f202 	lsl.w	r2, r0, r2
 80027da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80027de:	bf00      	nop
 80027e0:	370c      	adds	r7, #12
 80027e2:	46bd      	mov	sp, r7
 80027e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e8:	4770      	bx	lr
 80027ea:	bf00      	nop
 80027ec:	e000e100 	.word	0xe000e100

080027f0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80027f0:	b480      	push	{r7}
 80027f2:	b083      	sub	sp, #12
 80027f4:	af00      	add	r7, sp, #0
 80027f6:	4603      	mov	r3, r0
 80027f8:	6039      	str	r1, [r7, #0]
 80027fa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80027fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002800:	2b00      	cmp	r3, #0
 8002802:	db0a      	blt.n	800281a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002804:	683b      	ldr	r3, [r7, #0]
 8002806:	b2da      	uxtb	r2, r3
 8002808:	490c      	ldr	r1, [pc, #48]	@ (800283c <__NVIC_SetPriority+0x4c>)
 800280a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800280e:	0112      	lsls	r2, r2, #4
 8002810:	b2d2      	uxtb	r2, r2
 8002812:	440b      	add	r3, r1
 8002814:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002818:	e00a      	b.n	8002830 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800281a:	683b      	ldr	r3, [r7, #0]
 800281c:	b2da      	uxtb	r2, r3
 800281e:	4908      	ldr	r1, [pc, #32]	@ (8002840 <__NVIC_SetPriority+0x50>)
 8002820:	79fb      	ldrb	r3, [r7, #7]
 8002822:	f003 030f 	and.w	r3, r3, #15
 8002826:	3b04      	subs	r3, #4
 8002828:	0112      	lsls	r2, r2, #4
 800282a:	b2d2      	uxtb	r2, r2
 800282c:	440b      	add	r3, r1
 800282e:	761a      	strb	r2, [r3, #24]
}
 8002830:	bf00      	nop
 8002832:	370c      	adds	r7, #12
 8002834:	46bd      	mov	sp, r7
 8002836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800283a:	4770      	bx	lr
 800283c:	e000e100 	.word	0xe000e100
 8002840:	e000ed00 	.word	0xe000ed00

08002844 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002844:	b480      	push	{r7}
 8002846:	b089      	sub	sp, #36	@ 0x24
 8002848:	af00      	add	r7, sp, #0
 800284a:	60f8      	str	r0, [r7, #12]
 800284c:	60b9      	str	r1, [r7, #8]
 800284e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	f003 0307 	and.w	r3, r3, #7
 8002856:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002858:	69fb      	ldr	r3, [r7, #28]
 800285a:	f1c3 0307 	rsb	r3, r3, #7
 800285e:	2b04      	cmp	r3, #4
 8002860:	bf28      	it	cs
 8002862:	2304      	movcs	r3, #4
 8002864:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002866:	69fb      	ldr	r3, [r7, #28]
 8002868:	3304      	adds	r3, #4
 800286a:	2b06      	cmp	r3, #6
 800286c:	d902      	bls.n	8002874 <NVIC_EncodePriority+0x30>
 800286e:	69fb      	ldr	r3, [r7, #28]
 8002870:	3b03      	subs	r3, #3
 8002872:	e000      	b.n	8002876 <NVIC_EncodePriority+0x32>
 8002874:	2300      	movs	r3, #0
 8002876:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002878:	f04f 32ff 	mov.w	r2, #4294967295
 800287c:	69bb      	ldr	r3, [r7, #24]
 800287e:	fa02 f303 	lsl.w	r3, r2, r3
 8002882:	43da      	mvns	r2, r3
 8002884:	68bb      	ldr	r3, [r7, #8]
 8002886:	401a      	ands	r2, r3
 8002888:	697b      	ldr	r3, [r7, #20]
 800288a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800288c:	f04f 31ff 	mov.w	r1, #4294967295
 8002890:	697b      	ldr	r3, [r7, #20]
 8002892:	fa01 f303 	lsl.w	r3, r1, r3
 8002896:	43d9      	mvns	r1, r3
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800289c:	4313      	orrs	r3, r2
         );
}
 800289e:	4618      	mov	r0, r3
 80028a0:	3724      	adds	r7, #36	@ 0x24
 80028a2:	46bd      	mov	sp, r7
 80028a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a8:	4770      	bx	lr
	...

080028ac <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80028ac:	b580      	push	{r7, lr}
 80028ae:	b082      	sub	sp, #8
 80028b0:	af00      	add	r7, sp, #0
 80028b2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	3b01      	subs	r3, #1
 80028b8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80028bc:	d301      	bcc.n	80028c2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80028be:	2301      	movs	r3, #1
 80028c0:	e00f      	b.n	80028e2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80028c2:	4a0a      	ldr	r2, [pc, #40]	@ (80028ec <SysTick_Config+0x40>)
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	3b01      	subs	r3, #1
 80028c8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80028ca:	210f      	movs	r1, #15
 80028cc:	f04f 30ff 	mov.w	r0, #4294967295
 80028d0:	f7ff ff8e 	bl	80027f0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80028d4:	4b05      	ldr	r3, [pc, #20]	@ (80028ec <SysTick_Config+0x40>)
 80028d6:	2200      	movs	r2, #0
 80028d8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80028da:	4b04      	ldr	r3, [pc, #16]	@ (80028ec <SysTick_Config+0x40>)
 80028dc:	2207      	movs	r2, #7
 80028de:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80028e0:	2300      	movs	r3, #0
}
 80028e2:	4618      	mov	r0, r3
 80028e4:	3708      	adds	r7, #8
 80028e6:	46bd      	mov	sp, r7
 80028e8:	bd80      	pop	{r7, pc}
 80028ea:	bf00      	nop
 80028ec:	e000e010 	.word	0xe000e010

080028f0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80028f0:	b580      	push	{r7, lr}
 80028f2:	b082      	sub	sp, #8
 80028f4:	af00      	add	r7, sp, #0
 80028f6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80028f8:	6878      	ldr	r0, [r7, #4]
 80028fa:	f7ff ff29 	bl	8002750 <__NVIC_SetPriorityGrouping>
}
 80028fe:	bf00      	nop
 8002900:	3708      	adds	r7, #8
 8002902:	46bd      	mov	sp, r7
 8002904:	bd80      	pop	{r7, pc}

08002906 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002906:	b580      	push	{r7, lr}
 8002908:	b086      	sub	sp, #24
 800290a:	af00      	add	r7, sp, #0
 800290c:	4603      	mov	r3, r0
 800290e:	60b9      	str	r1, [r7, #8]
 8002910:	607a      	str	r2, [r7, #4]
 8002912:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002914:	2300      	movs	r3, #0
 8002916:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002918:	f7ff ff3e 	bl	8002798 <__NVIC_GetPriorityGrouping>
 800291c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800291e:	687a      	ldr	r2, [r7, #4]
 8002920:	68b9      	ldr	r1, [r7, #8]
 8002922:	6978      	ldr	r0, [r7, #20]
 8002924:	f7ff ff8e 	bl	8002844 <NVIC_EncodePriority>
 8002928:	4602      	mov	r2, r0
 800292a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800292e:	4611      	mov	r1, r2
 8002930:	4618      	mov	r0, r3
 8002932:	f7ff ff5d 	bl	80027f0 <__NVIC_SetPriority>
}
 8002936:	bf00      	nop
 8002938:	3718      	adds	r7, #24
 800293a:	46bd      	mov	sp, r7
 800293c:	bd80      	pop	{r7, pc}

0800293e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800293e:	b580      	push	{r7, lr}
 8002940:	b082      	sub	sp, #8
 8002942:	af00      	add	r7, sp, #0
 8002944:	4603      	mov	r3, r0
 8002946:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002948:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800294c:	4618      	mov	r0, r3
 800294e:	f7ff ff31 	bl	80027b4 <__NVIC_EnableIRQ>
}
 8002952:	bf00      	nop
 8002954:	3708      	adds	r7, #8
 8002956:	46bd      	mov	sp, r7
 8002958:	bd80      	pop	{r7, pc}

0800295a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800295a:	b580      	push	{r7, lr}
 800295c:	b082      	sub	sp, #8
 800295e:	af00      	add	r7, sp, #0
 8002960:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002962:	6878      	ldr	r0, [r7, #4]
 8002964:	f7ff ffa2 	bl	80028ac <SysTick_Config>
 8002968:	4603      	mov	r3, r0
}
 800296a:	4618      	mov	r0, r3
 800296c:	3708      	adds	r7, #8
 800296e:	46bd      	mov	sp, r7
 8002970:	bd80      	pop	{r7, pc}

08002972 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8002972:	b580      	push	{r7, lr}
 8002974:	b082      	sub	sp, #8
 8002976:	af00      	add	r7, sp, #0
 8002978:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	2b00      	cmp	r3, #0
 800297e:	d101      	bne.n	8002984 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8002980:	2301      	movs	r3, #1
 8002982:	e014      	b.n	80029ae <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	791b      	ldrb	r3, [r3, #4]
 8002988:	b2db      	uxtb	r3, r3
 800298a:	2b00      	cmp	r3, #0
 800298c:	d105      	bne.n	800299a <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	2200      	movs	r2, #0
 8002992:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8002994:	6878      	ldr	r0, [r7, #4]
 8002996:	f7fe fcbd 	bl	8001314 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	2202      	movs	r2, #2
 800299e:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	2200      	movs	r2, #0
 80029a4:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	2201      	movs	r2, #1
 80029aa:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 80029ac:	2300      	movs	r3, #0
}
 80029ae:	4618      	mov	r0, r3
 80029b0:	3708      	adds	r7, #8
 80029b2:	46bd      	mov	sp, r7
 80029b4:	bd80      	pop	{r7, pc}
	...

080029b8 <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t *pData, uint32_t Length,
                                    uint32_t Alignment)
{
 80029b8:	b580      	push	{r7, lr}
 80029ba:	b086      	sub	sp, #24
 80029bc:	af00      	add	r7, sp, #0
 80029be:	60f8      	str	r0, [r7, #12]
 80029c0:	60b9      	str	r1, [r7, #8]
 80029c2:	607a      	str	r2, [r7, #4]
 80029c4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80029c6:	2300      	movs	r3, #0
 80029c8:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpreg = 0U;
 80029ca:	2300      	movs	r3, #0
 80029cc:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));

  /* Process locked */
  __HAL_LOCK(hdac);
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	795b      	ldrb	r3, [r3, #5]
 80029d2:	2b01      	cmp	r3, #1
 80029d4:	d101      	bne.n	80029da <HAL_DAC_Start_DMA+0x22>
 80029d6:	2302      	movs	r3, #2
 80029d8:	e0ab      	b.n	8002b32 <HAL_DAC_Start_DMA+0x17a>
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	2201      	movs	r2, #1
 80029de:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	2202      	movs	r2, #2
 80029e4:	711a      	strb	r2, [r3, #4]

  if (Channel == DAC_CHANNEL_1)
 80029e6:	68bb      	ldr	r3, [r7, #8]
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d12f      	bne.n	8002a4c <HAL_DAC_Start_DMA+0x94>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	689b      	ldr	r3, [r3, #8]
 80029f0:	4a52      	ldr	r2, [pc, #328]	@ (8002b3c <HAL_DAC_Start_DMA+0x184>)
 80029f2:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	689b      	ldr	r3, [r3, #8]
 80029f8:	4a51      	ldr	r2, [pc, #324]	@ (8002b40 <HAL_DAC_Start_DMA+0x188>)
 80029fa:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	689b      	ldr	r3, [r3, #8]
 8002a00:	4a50      	ldr	r2, [pc, #320]	@ (8002b44 <HAL_DAC_Start_DMA+0x18c>)
 8002a02:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	681a      	ldr	r2, [r3, #0]
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8002a12:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 1 */
    switch (Alignment)
 8002a14:	6a3b      	ldr	r3, [r7, #32]
 8002a16:	2b08      	cmp	r3, #8
 8002a18:	d013      	beq.n	8002a42 <HAL_DAC_Start_DMA+0x8a>
 8002a1a:	6a3b      	ldr	r3, [r7, #32]
 8002a1c:	2b08      	cmp	r3, #8
 8002a1e:	d845      	bhi.n	8002aac <HAL_DAC_Start_DMA+0xf4>
 8002a20:	6a3b      	ldr	r3, [r7, #32]
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d003      	beq.n	8002a2e <HAL_DAC_Start_DMA+0x76>
 8002a26:	6a3b      	ldr	r3, [r7, #32]
 8002a28:	2b04      	cmp	r3, #4
 8002a2a:	d005      	beq.n	8002a38 <HAL_DAC_Start_DMA+0x80>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
        break;
      default:
        break;
 8002a2c:	e03e      	b.n	8002aac <HAL_DAC_Start_DMA+0xf4>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	3308      	adds	r3, #8
 8002a34:	613b      	str	r3, [r7, #16]
        break;
 8002a36:	e03c      	b.n	8002ab2 <HAL_DAC_Start_DMA+0xfa>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	330c      	adds	r3, #12
 8002a3e:	613b      	str	r3, [r7, #16]
        break;
 8002a40:	e037      	b.n	8002ab2 <HAL_DAC_Start_DMA+0xfa>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	3310      	adds	r3, #16
 8002a48:	613b      	str	r3, [r7, #16]
        break;
 8002a4a:	e032      	b.n	8002ab2 <HAL_DAC_Start_DMA+0xfa>
  }
#if defined(DAC_CHANNEL2_SUPPORT)
  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	68db      	ldr	r3, [r3, #12]
 8002a50:	4a3d      	ldr	r2, [pc, #244]	@ (8002b48 <HAL_DAC_Start_DMA+0x190>)
 8002a52:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	68db      	ldr	r3, [r3, #12]
 8002a58:	4a3c      	ldr	r2, [pc, #240]	@ (8002b4c <HAL_DAC_Start_DMA+0x194>)
 8002a5a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	68db      	ldr	r3, [r3, #12]
 8002a60:	4a3b      	ldr	r2, [pc, #236]	@ (8002b50 <HAL_DAC_Start_DMA+0x198>)
 8002a62:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Enable the selected DAC channel2 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	681a      	ldr	r2, [r3, #0]
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8002a72:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 2 */
    switch (Alignment)
 8002a74:	6a3b      	ldr	r3, [r7, #32]
 8002a76:	2b08      	cmp	r3, #8
 8002a78:	d013      	beq.n	8002aa2 <HAL_DAC_Start_DMA+0xea>
 8002a7a:	6a3b      	ldr	r3, [r7, #32]
 8002a7c:	2b08      	cmp	r3, #8
 8002a7e:	d817      	bhi.n	8002ab0 <HAL_DAC_Start_DMA+0xf8>
 8002a80:	6a3b      	ldr	r3, [r7, #32]
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d003      	beq.n	8002a8e <HAL_DAC_Start_DMA+0xd6>
 8002a86:	6a3b      	ldr	r3, [r7, #32]
 8002a88:	2b04      	cmp	r3, #4
 8002a8a:	d005      	beq.n	8002a98 <HAL_DAC_Start_DMA+0xe0>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
        break;
      default:
        break;
 8002a8c:	e010      	b.n	8002ab0 <HAL_DAC_Start_DMA+0xf8>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	3314      	adds	r3, #20
 8002a94:	613b      	str	r3, [r7, #16]
        break;
 8002a96:	e00c      	b.n	8002ab2 <HAL_DAC_Start_DMA+0xfa>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	3318      	adds	r3, #24
 8002a9e:	613b      	str	r3, [r7, #16]
        break;
 8002aa0:	e007      	b.n	8002ab2 <HAL_DAC_Start_DMA+0xfa>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	331c      	adds	r3, #28
 8002aa8:	613b      	str	r3, [r7, #16]
        break;
 8002aaa:	e002      	b.n	8002ab2 <HAL_DAC_Start_DMA+0xfa>
        break;
 8002aac:	bf00      	nop
 8002aae:	e000      	b.n	8002ab2 <HAL_DAC_Start_DMA+0xfa>
        break;
 8002ab0:	bf00      	nop
    }
  }
#endif /* DAC_CHANNEL2_SUPPORT */

  /* Enable the DMA Stream */
  if (Channel == DAC_CHANNEL_1)
 8002ab2:	68bb      	ldr	r3, [r7, #8]
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d111      	bne.n	8002adc <HAL_DAC_Start_DMA+0x124>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	681a      	ldr	r2, [r3, #0]
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002ac6:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Stream */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	6898      	ldr	r0, [r3, #8]
 8002acc:	6879      	ldr	r1, [r7, #4]
 8002ace:	683b      	ldr	r3, [r7, #0]
 8002ad0:	693a      	ldr	r2, [r7, #16]
 8002ad2:	f000 f9e5 	bl	8002ea0 <HAL_DMA_Start_IT>
 8002ad6:	4603      	mov	r3, r0
 8002ad8:	75fb      	strb	r3, [r7, #23]
 8002ada:	e010      	b.n	8002afe <HAL_DAC_Start_DMA+0x146>
  }
#if defined(DAC_CHANNEL2_SUPPORT)
  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	681a      	ldr	r2, [r3, #0]
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	f042 5200 	orr.w	r2, r2, #536870912	@ 0x20000000
 8002aea:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Stream */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	68d8      	ldr	r0, [r3, #12]
 8002af0:	6879      	ldr	r1, [r7, #4]
 8002af2:	683b      	ldr	r3, [r7, #0]
 8002af4:	693a      	ldr	r2, [r7, #16]
 8002af6:	f000 f9d3 	bl	8002ea0 <HAL_DMA_Start_IT>
 8002afa:	4603      	mov	r3, r0
 8002afc:	75fb      	strb	r3, [r7, #23]
  }
#endif /* DAC_CHANNEL2_SUPPORT */

  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	2200      	movs	r2, #0
 8002b02:	715a      	strb	r2, [r3, #5]

  if (status == HAL_OK)
 8002b04:	7dfb      	ldrb	r3, [r7, #23]
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d10c      	bne.n	8002b24 <HAL_DAC_Start_DMA+0x16c>
  {
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, Channel);
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	6819      	ldr	r1, [r3, #0]
 8002b10:	68bb      	ldr	r3, [r7, #8]
 8002b12:	f003 0310 	and.w	r3, r3, #16
 8002b16:	2201      	movs	r2, #1
 8002b18:	409a      	lsls	r2, r3
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	430a      	orrs	r2, r1
 8002b20:	601a      	str	r2, [r3, #0]
 8002b22:	e005      	b.n	8002b30 <HAL_DAC_Start_DMA+0x178>
  }
  else
  {
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	691b      	ldr	r3, [r3, #16]
 8002b28:	f043 0204 	orr.w	r2, r3, #4
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	611a      	str	r2, [r3, #16]
  }

  /* Return function status */
  return status;
 8002b30:	7dfb      	ldrb	r3, [r7, #23]
}
 8002b32:	4618      	mov	r0, r3
 8002b34:	3718      	adds	r7, #24
 8002b36:	46bd      	mov	sp, r7
 8002b38:	bd80      	pop	{r7, pc}
 8002b3a:	bf00      	nop
 8002b3c:	08002c2f 	.word	0x08002c2f
 8002b40:	08002c51 	.word	0x08002c51
 8002b44:	08002c6d 	.word	0x08002c6d
 8002b48:	08002cd7 	.word	0x08002cd7
 8002b4c:	08002cf9 	.word	0x08002cf9
 8002b50:	08002d15 	.word	0x08002d15

08002b54 <HAL_DAC_ConvCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8002b54:	b480      	push	{r7}
 8002b56:	b083      	sub	sp, #12
 8002b58:	af00      	add	r7, sp, #0
 8002b5a:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvCpltCallbackCh1 could be implemented in the user file
   */
}
 8002b5c:	bf00      	nop
 8002b5e:	370c      	adds	r7, #12
 8002b60:	46bd      	mov	sp, r7
 8002b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b66:	4770      	bx	lr

08002b68 <HAL_DAC_ConvHalfCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8002b68:	b480      	push	{r7}
 8002b6a:	b083      	sub	sp, #12
 8002b6c:	af00      	add	r7, sp, #0
 8002b6e:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh1 could be implemented in the user file
   */
}
 8002b70:	bf00      	nop
 8002b72:	370c      	adds	r7, #12
 8002b74:	46bd      	mov	sp, r7
 8002b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b7a:	4770      	bx	lr

08002b7c <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8002b7c:	b480      	push	{r7}
 8002b7e:	b083      	sub	sp, #12
 8002b80:	af00      	add	r7, sp, #0
 8002b82:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallbackCh1 could be implemented in the user file
   */
}
 8002b84:	bf00      	nop
 8002b86:	370c      	adds	r7, #12
 8002b88:	46bd      	mov	sp, r7
 8002b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b8e:	4770      	bx	lr

08002b90 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8002b90:	b480      	push	{r7}
 8002b92:	b087      	sub	sp, #28
 8002b94:	af00      	add	r7, sp, #0
 8002b96:	60f8      	str	r0, [r7, #12]
 8002b98:	60b9      	str	r1, [r7, #8]
 8002b9a:	607a      	str	r2, [r7, #4]
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	795b      	ldrb	r3, [r3, #5]
 8002ba0:	2b01      	cmp	r3, #1
 8002ba2:	d101      	bne.n	8002ba8 <HAL_DAC_ConfigChannel+0x18>
 8002ba4:	2302      	movs	r3, #2
 8002ba6:	e03c      	b.n	8002c22 <HAL_DAC_ConfigChannel+0x92>
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	2201      	movs	r2, #1
 8002bac:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	2202      	movs	r2, #2
 8002bb2:	711a      	strb	r2, [r3, #4]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << (Channel & 0x10UL));
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	f003 0310 	and.w	r3, r3, #16
 8002bc2:	f640 72fe 	movw	r2, #4094	@ 0xffe
 8002bc6:	fa02 f303 	lsl.w	r3, r2, r3
 8002bca:	43db      	mvns	r3, r3
 8002bcc:	697a      	ldr	r2, [r7, #20]
 8002bce:	4013      	ands	r3, r2
 8002bd0:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8002bd2:	68bb      	ldr	r3, [r7, #8]
 8002bd4:	681a      	ldr	r2, [r3, #0]
 8002bd6:	68bb      	ldr	r3, [r7, #8]
 8002bd8:	685b      	ldr	r3, [r3, #4]
 8002bda:	4313      	orrs	r3, r2
 8002bdc:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	f003 0310 	and.w	r3, r3, #16
 8002be4:	693a      	ldr	r2, [r7, #16]
 8002be6:	fa02 f303 	lsl.w	r3, r2, r3
 8002bea:	697a      	ldr	r2, [r7, #20]
 8002bec:	4313      	orrs	r3, r2
 8002bee:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	697a      	ldr	r2, [r7, #20]
 8002bf6:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	6819      	ldr	r1, [r3, #0]
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	f003 0310 	and.w	r3, r3, #16
 8002c04:	22c0      	movs	r2, #192	@ 0xc0
 8002c06:	fa02 f303 	lsl.w	r3, r2, r3
 8002c0a:	43da      	mvns	r2, r3
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	400a      	ands	r2, r1
 8002c12:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	2201      	movs	r2, #1
 8002c18:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	2200      	movs	r2, #0
 8002c1e:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8002c20:	2300      	movs	r3, #0
}
 8002c22:	4618      	mov	r0, r3
 8002c24:	371c      	adds	r7, #28
 8002c26:	46bd      	mov	sp, r7
 8002c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c2c:	4770      	bx	lr

08002c2e <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8002c2e:	b580      	push	{r7, lr}
 8002c30:	b084      	sub	sp, #16
 8002c32:	af00      	add	r7, sp, #0
 8002c34:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002c3a:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac);
 8002c3c:	68f8      	ldr	r0, [r7, #12]
 8002c3e:	f7ff ff89 	bl	8002b54 <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	2201      	movs	r2, #1
 8002c46:	711a      	strb	r2, [r3, #4]
}
 8002c48:	bf00      	nop
 8002c4a:	3710      	adds	r7, #16
 8002c4c:	46bd      	mov	sp, r7
 8002c4e:	bd80      	pop	{r7, pc}

08002c50 <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8002c50:	b580      	push	{r7, lr}
 8002c52:	b084      	sub	sp, #16
 8002c54:	af00      	add	r7, sp, #0
 8002c56:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002c5c:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 8002c5e:	68f8      	ldr	r0, [r7, #12]
 8002c60:	f7ff ff82 	bl	8002b68 <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8002c64:	bf00      	nop
 8002c66:	3710      	adds	r7, #16
 8002c68:	46bd      	mov	sp, r7
 8002c6a:	bd80      	pop	{r7, pc}

08002c6c <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 8002c6c:	b580      	push	{r7, lr}
 8002c6e:	b084      	sub	sp, #16
 8002c70:	af00      	add	r7, sp, #0
 8002c72:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002c78:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	691b      	ldr	r3, [r3, #16]
 8002c7e:	f043 0204 	orr.w	r2, r3, #4
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
 8002c86:	68f8      	ldr	r0, [r7, #12]
 8002c88:	f7ff ff78 	bl	8002b7c <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	2201      	movs	r2, #1
 8002c90:	711a      	strb	r2, [r3, #4]
}
 8002c92:	bf00      	nop
 8002c94:	3710      	adds	r7, #16
 8002c96:	46bd      	mov	sp, r7
 8002c98:	bd80      	pop	{r7, pc}

08002c9a <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8002c9a:	b480      	push	{r7}
 8002c9c:	b083      	sub	sp, #12
 8002c9e:	af00      	add	r7, sp, #0
 8002ca0:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 8002ca2:	bf00      	nop
 8002ca4:	370c      	adds	r7, #12
 8002ca6:	46bd      	mov	sp, r7
 8002ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cac:	4770      	bx	lr

08002cae <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8002cae:	b480      	push	{r7}
 8002cb0:	b083      	sub	sp, #12
 8002cb2:	af00      	add	r7, sp, #0
 8002cb4:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 8002cb6:	bf00      	nop
 8002cb8:	370c      	adds	r7, #12
 8002cba:	46bd      	mov	sp, r7
 8002cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc0:	4770      	bx	lr

08002cc2 <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8002cc2:	b480      	push	{r7}
 8002cc4:	b083      	sub	sp, #12
 8002cc6:	af00      	add	r7, sp, #0
 8002cc8:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ErrorCallbackCh2 could be implemented in the user file
   */
}
 8002cca:	bf00      	nop
 8002ccc:	370c      	adds	r7, #12
 8002cce:	46bd      	mov	sp, r7
 8002cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd4:	4770      	bx	lr

08002cd6 <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8002cd6:	b580      	push	{r7, lr}
 8002cd8:	b084      	sub	sp, #16
 8002cda:	af00      	add	r7, sp, #0
 8002cdc:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002ce2:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
 8002ce4:	68f8      	ldr	r0, [r7, #12]
 8002ce6:	f7ff ffd8 	bl	8002c9a <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	2201      	movs	r2, #1
 8002cee:	711a      	strb	r2, [r3, #4]
}
 8002cf0:	bf00      	nop
 8002cf2:	3710      	adds	r7, #16
 8002cf4:	46bd      	mov	sp, r7
 8002cf6:	bd80      	pop	{r7, pc}

08002cf8 <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8002cf8:	b580      	push	{r7, lr}
 8002cfa:	b084      	sub	sp, #16
 8002cfc:	af00      	add	r7, sp, #0
 8002cfe:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002d04:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 8002d06:	68f8      	ldr	r0, [r7, #12]
 8002d08:	f7ff ffd1 	bl	8002cae <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8002d0c:	bf00      	nop
 8002d0e:	3710      	adds	r7, #16
 8002d10:	46bd      	mov	sp, r7
 8002d12:	bd80      	pop	{r7, pc}

08002d14 <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)
{
 8002d14:	b580      	push	{r7, lr}
 8002d16:	b084      	sub	sp, #16
 8002d18:	af00      	add	r7, sp, #0
 8002d1a:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002d20:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	691b      	ldr	r3, [r3, #16]
 8002d26:	f043 0204 	orr.w	r2, r3, #4
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac);
 8002d2e:	68f8      	ldr	r0, [r7, #12]
 8002d30:	f7ff ffc7 	bl	8002cc2 <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	2201      	movs	r2, #1
 8002d38:	711a      	strb	r2, [r3, #4]
}
 8002d3a:	bf00      	nop
 8002d3c:	3710      	adds	r7, #16
 8002d3e:	46bd      	mov	sp, r7
 8002d40:	bd80      	pop	{r7, pc}
	...

08002d44 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002d44:	b580      	push	{r7, lr}
 8002d46:	b086      	sub	sp, #24
 8002d48:	af00      	add	r7, sp, #0
 8002d4a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002d4c:	2300      	movs	r3, #0
 8002d4e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002d50:	f7ff f8ea 	bl	8001f28 <HAL_GetTick>
 8002d54:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d101      	bne.n	8002d60 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002d5c:	2301      	movs	r3, #1
 8002d5e:	e099      	b.n	8002e94 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	2202      	movs	r2, #2
 8002d64:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	2200      	movs	r2, #0
 8002d6c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	681a      	ldr	r2, [r3, #0]
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	f022 0201 	bic.w	r2, r2, #1
 8002d7e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002d80:	e00f      	b.n	8002da2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002d82:	f7ff f8d1 	bl	8001f28 <HAL_GetTick>
 8002d86:	4602      	mov	r2, r0
 8002d88:	693b      	ldr	r3, [r7, #16]
 8002d8a:	1ad3      	subs	r3, r2, r3
 8002d8c:	2b05      	cmp	r3, #5
 8002d8e:	d908      	bls.n	8002da2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	2220      	movs	r2, #32
 8002d94:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	2203      	movs	r2, #3
 8002d9a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8002d9e:	2303      	movs	r3, #3
 8002da0:	e078      	b.n	8002e94 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	f003 0301 	and.w	r3, r3, #1
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d1e8      	bne.n	8002d82 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002db8:	697a      	ldr	r2, [r7, #20]
 8002dba:	4b38      	ldr	r3, [pc, #224]	@ (8002e9c <HAL_DMA_Init+0x158>)
 8002dbc:	4013      	ands	r3, r2
 8002dbe:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	685a      	ldr	r2, [r3, #4]
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	689b      	ldr	r3, [r3, #8]
 8002dc8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002dce:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	691b      	ldr	r3, [r3, #16]
 8002dd4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002dda:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	699b      	ldr	r3, [r3, #24]
 8002de0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002de6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	6a1b      	ldr	r3, [r3, #32]
 8002dec:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002dee:	697a      	ldr	r2, [r7, #20]
 8002df0:	4313      	orrs	r3, r2
 8002df2:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002df8:	2b04      	cmp	r3, #4
 8002dfa:	d107      	bne.n	8002e0c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e04:	4313      	orrs	r3, r2
 8002e06:	697a      	ldr	r2, [r7, #20]
 8002e08:	4313      	orrs	r3, r2
 8002e0a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	697a      	ldr	r2, [r7, #20]
 8002e12:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	695b      	ldr	r3, [r3, #20]
 8002e1a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002e1c:	697b      	ldr	r3, [r7, #20]
 8002e1e:	f023 0307 	bic.w	r3, r3, #7
 8002e22:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e28:	697a      	ldr	r2, [r7, #20]
 8002e2a:	4313      	orrs	r3, r2
 8002e2c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e32:	2b04      	cmp	r3, #4
 8002e34:	d117      	bne.n	8002e66 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e3a:	697a      	ldr	r2, [r7, #20]
 8002e3c:	4313      	orrs	r3, r2
 8002e3e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d00e      	beq.n	8002e66 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002e48:	6878      	ldr	r0, [r7, #4]
 8002e4a:	f000 fa6f 	bl	800332c <DMA_CheckFifoParam>
 8002e4e:	4603      	mov	r3, r0
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d008      	beq.n	8002e66 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	2240      	movs	r2, #64	@ 0x40
 8002e58:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	2201      	movs	r2, #1
 8002e5e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8002e62:	2301      	movs	r3, #1
 8002e64:	e016      	b.n	8002e94 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	697a      	ldr	r2, [r7, #20]
 8002e6c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002e6e:	6878      	ldr	r0, [r7, #4]
 8002e70:	f000 fa26 	bl	80032c0 <DMA_CalcBaseAndBitshift>
 8002e74:	4603      	mov	r3, r0
 8002e76:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002e7c:	223f      	movs	r2, #63	@ 0x3f
 8002e7e:	409a      	lsls	r2, r3
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	2200      	movs	r2, #0
 8002e88:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	2201      	movs	r2, #1
 8002e8e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8002e92:	2300      	movs	r3, #0
}
 8002e94:	4618      	mov	r0, r3
 8002e96:	3718      	adds	r7, #24
 8002e98:	46bd      	mov	sp, r7
 8002e9a:	bd80      	pop	{r7, pc}
 8002e9c:	f010803f 	.word	0xf010803f

08002ea0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002ea0:	b580      	push	{r7, lr}
 8002ea2:	b086      	sub	sp, #24
 8002ea4:	af00      	add	r7, sp, #0
 8002ea6:	60f8      	str	r0, [r7, #12]
 8002ea8:	60b9      	str	r1, [r7, #8]
 8002eaa:	607a      	str	r2, [r7, #4]
 8002eac:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002eae:	2300      	movs	r3, #0
 8002eb0:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002eb6:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8002ebe:	2b01      	cmp	r3, #1
 8002ec0:	d101      	bne.n	8002ec6 <HAL_DMA_Start_IT+0x26>
 8002ec2:	2302      	movs	r3, #2
 8002ec4:	e040      	b.n	8002f48 <HAL_DMA_Start_IT+0xa8>
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	2201      	movs	r2, #1
 8002eca:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002ed4:	b2db      	uxtb	r3, r3
 8002ed6:	2b01      	cmp	r3, #1
 8002ed8:	d12f      	bne.n	8002f3a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	2202      	movs	r2, #2
 8002ede:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	2200      	movs	r2, #0
 8002ee6:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002ee8:	683b      	ldr	r3, [r7, #0]
 8002eea:	687a      	ldr	r2, [r7, #4]
 8002eec:	68b9      	ldr	r1, [r7, #8]
 8002eee:	68f8      	ldr	r0, [r7, #12]
 8002ef0:	f000 f9b8 	bl	8003264 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002ef8:	223f      	movs	r2, #63	@ 0x3f
 8002efa:	409a      	lsls	r2, r3
 8002efc:	693b      	ldr	r3, [r7, #16]
 8002efe:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	681a      	ldr	r2, [r3, #0]
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	f042 0216 	orr.w	r2, r2, #22
 8002f0e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d007      	beq.n	8002f28 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	681a      	ldr	r2, [r3, #0]
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	f042 0208 	orr.w	r2, r2, #8
 8002f26:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	681a      	ldr	r2, [r3, #0]
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	f042 0201 	orr.w	r2, r2, #1
 8002f36:	601a      	str	r2, [r3, #0]
 8002f38:	e005      	b.n	8002f46 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	2200      	movs	r2, #0
 8002f3e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002f42:	2302      	movs	r3, #2
 8002f44:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002f46:	7dfb      	ldrb	r3, [r7, #23]
}
 8002f48:	4618      	mov	r0, r3
 8002f4a:	3718      	adds	r7, #24
 8002f4c:	46bd      	mov	sp, r7
 8002f4e:	bd80      	pop	{r7, pc}

08002f50 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002f50:	b580      	push	{r7, lr}
 8002f52:	b086      	sub	sp, #24
 8002f54:	af00      	add	r7, sp, #0
 8002f56:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002f58:	2300      	movs	r3, #0
 8002f5a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002f5c:	4b8e      	ldr	r3, [pc, #568]	@ (8003198 <HAL_DMA_IRQHandler+0x248>)
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	4a8e      	ldr	r2, [pc, #568]	@ (800319c <HAL_DMA_IRQHandler+0x24c>)
 8002f62:	fba2 2303 	umull	r2, r3, r2, r3
 8002f66:	0a9b      	lsrs	r3, r3, #10
 8002f68:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f6e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002f70:	693b      	ldr	r3, [r7, #16]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002f7a:	2208      	movs	r2, #8
 8002f7c:	409a      	lsls	r2, r3
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	4013      	ands	r3, r2
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d01a      	beq.n	8002fbc <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	f003 0304 	and.w	r3, r3, #4
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d013      	beq.n	8002fbc <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	681a      	ldr	r2, [r3, #0]
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	f022 0204 	bic.w	r2, r2, #4
 8002fa2:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002fa8:	2208      	movs	r2, #8
 8002faa:	409a      	lsls	r2, r3
 8002fac:	693b      	ldr	r3, [r7, #16]
 8002fae:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002fb4:	f043 0201 	orr.w	r2, r3, #1
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002fc0:	2201      	movs	r2, #1
 8002fc2:	409a      	lsls	r2, r3
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	4013      	ands	r3, r2
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d012      	beq.n	8002ff2 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	695b      	ldr	r3, [r3, #20]
 8002fd2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d00b      	beq.n	8002ff2 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002fde:	2201      	movs	r2, #1
 8002fe0:	409a      	lsls	r2, r3
 8002fe2:	693b      	ldr	r3, [r7, #16]
 8002fe4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002fea:	f043 0202 	orr.w	r2, r3, #2
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002ff6:	2204      	movs	r2, #4
 8002ff8:	409a      	lsls	r2, r3
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	4013      	ands	r3, r2
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d012      	beq.n	8003028 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	f003 0302 	and.w	r3, r3, #2
 800300c:	2b00      	cmp	r3, #0
 800300e:	d00b      	beq.n	8003028 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003014:	2204      	movs	r2, #4
 8003016:	409a      	lsls	r2, r3
 8003018:	693b      	ldr	r3, [r7, #16]
 800301a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003020:	f043 0204 	orr.w	r2, r3, #4
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800302c:	2210      	movs	r2, #16
 800302e:	409a      	lsls	r2, r3
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	4013      	ands	r3, r2
 8003034:	2b00      	cmp	r3, #0
 8003036:	d043      	beq.n	80030c0 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	f003 0308 	and.w	r3, r3, #8
 8003042:	2b00      	cmp	r3, #0
 8003044:	d03c      	beq.n	80030c0 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800304a:	2210      	movs	r2, #16
 800304c:	409a      	lsls	r2, r3
 800304e:	693b      	ldr	r3, [r7, #16]
 8003050:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800305c:	2b00      	cmp	r3, #0
 800305e:	d018      	beq.n	8003092 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800306a:	2b00      	cmp	r3, #0
 800306c:	d108      	bne.n	8003080 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003072:	2b00      	cmp	r3, #0
 8003074:	d024      	beq.n	80030c0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800307a:	6878      	ldr	r0, [r7, #4]
 800307c:	4798      	blx	r3
 800307e:	e01f      	b.n	80030c0 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003084:	2b00      	cmp	r3, #0
 8003086:	d01b      	beq.n	80030c0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800308c:	6878      	ldr	r0, [r7, #4]
 800308e:	4798      	blx	r3
 8003090:	e016      	b.n	80030c0 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800309c:	2b00      	cmp	r3, #0
 800309e:	d107      	bne.n	80030b0 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	681a      	ldr	r2, [r3, #0]
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	f022 0208 	bic.w	r2, r2, #8
 80030ae:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d003      	beq.n	80030c0 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030bc:	6878      	ldr	r0, [r7, #4]
 80030be:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80030c4:	2220      	movs	r2, #32
 80030c6:	409a      	lsls	r2, r3
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	4013      	ands	r3, r2
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	f000 808f 	beq.w	80031f0 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	f003 0310 	and.w	r3, r3, #16
 80030dc:	2b00      	cmp	r3, #0
 80030de:	f000 8087 	beq.w	80031f0 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80030e6:	2220      	movs	r2, #32
 80030e8:	409a      	lsls	r2, r3
 80030ea:	693b      	ldr	r3, [r7, #16]
 80030ec:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80030f4:	b2db      	uxtb	r3, r3
 80030f6:	2b05      	cmp	r3, #5
 80030f8:	d136      	bne.n	8003168 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	681a      	ldr	r2, [r3, #0]
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	f022 0216 	bic.w	r2, r2, #22
 8003108:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	695a      	ldr	r2, [r3, #20]
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003118:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800311e:	2b00      	cmp	r3, #0
 8003120:	d103      	bne.n	800312a <HAL_DMA_IRQHandler+0x1da>
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003126:	2b00      	cmp	r3, #0
 8003128:	d007      	beq.n	800313a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	681a      	ldr	r2, [r3, #0]
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	f022 0208 	bic.w	r2, r2, #8
 8003138:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800313e:	223f      	movs	r2, #63	@ 0x3f
 8003140:	409a      	lsls	r2, r3
 8003142:	693b      	ldr	r3, [r7, #16]
 8003144:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	2201      	movs	r2, #1
 800314a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	2200      	movs	r2, #0
 8003152:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800315a:	2b00      	cmp	r3, #0
 800315c:	d07e      	beq.n	800325c <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003162:	6878      	ldr	r0, [r7, #4]
 8003164:	4798      	blx	r3
        }
        return;
 8003166:	e079      	b.n	800325c <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003172:	2b00      	cmp	r3, #0
 8003174:	d01d      	beq.n	80031b2 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003180:	2b00      	cmp	r3, #0
 8003182:	d10d      	bne.n	80031a0 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003188:	2b00      	cmp	r3, #0
 800318a:	d031      	beq.n	80031f0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003190:	6878      	ldr	r0, [r7, #4]
 8003192:	4798      	blx	r3
 8003194:	e02c      	b.n	80031f0 <HAL_DMA_IRQHandler+0x2a0>
 8003196:	bf00      	nop
 8003198:	20000004 	.word	0x20000004
 800319c:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d023      	beq.n	80031f0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80031ac:	6878      	ldr	r0, [r7, #4]
 80031ae:	4798      	blx	r3
 80031b0:	e01e      	b.n	80031f0 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d10f      	bne.n	80031e0 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	681a      	ldr	r2, [r3, #0]
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	f022 0210 	bic.w	r2, r2, #16
 80031ce:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	2201      	movs	r2, #1
 80031d4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	2200      	movs	r2, #0
 80031dc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d003      	beq.n	80031f0 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80031ec:	6878      	ldr	r0, [r7, #4]
 80031ee:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d032      	beq.n	800325e <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80031fc:	f003 0301 	and.w	r3, r3, #1
 8003200:	2b00      	cmp	r3, #0
 8003202:	d022      	beq.n	800324a <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	2205      	movs	r2, #5
 8003208:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	681a      	ldr	r2, [r3, #0]
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	f022 0201 	bic.w	r2, r2, #1
 800321a:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800321c:	68bb      	ldr	r3, [r7, #8]
 800321e:	3301      	adds	r3, #1
 8003220:	60bb      	str	r3, [r7, #8]
 8003222:	697a      	ldr	r2, [r7, #20]
 8003224:	429a      	cmp	r2, r3
 8003226:	d307      	bcc.n	8003238 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	f003 0301 	and.w	r3, r3, #1
 8003232:	2b00      	cmp	r3, #0
 8003234:	d1f2      	bne.n	800321c <HAL_DMA_IRQHandler+0x2cc>
 8003236:	e000      	b.n	800323a <HAL_DMA_IRQHandler+0x2ea>
          break;
 8003238:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	2201      	movs	r2, #1
 800323e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	2200      	movs	r2, #0
 8003246:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800324e:	2b00      	cmp	r3, #0
 8003250:	d005      	beq.n	800325e <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003256:	6878      	ldr	r0, [r7, #4]
 8003258:	4798      	blx	r3
 800325a:	e000      	b.n	800325e <HAL_DMA_IRQHandler+0x30e>
        return;
 800325c:	bf00      	nop
    }
  }
}
 800325e:	3718      	adds	r7, #24
 8003260:	46bd      	mov	sp, r7
 8003262:	bd80      	pop	{r7, pc}

08003264 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003264:	b480      	push	{r7}
 8003266:	b085      	sub	sp, #20
 8003268:	af00      	add	r7, sp, #0
 800326a:	60f8      	str	r0, [r7, #12]
 800326c:	60b9      	str	r1, [r7, #8]
 800326e:	607a      	str	r2, [r7, #4]
 8003270:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	681a      	ldr	r2, [r3, #0]
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8003280:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	683a      	ldr	r2, [r7, #0]
 8003288:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	689b      	ldr	r3, [r3, #8]
 800328e:	2b40      	cmp	r3, #64	@ 0x40
 8003290:	d108      	bne.n	80032a4 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	687a      	ldr	r2, [r7, #4]
 8003298:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	68ba      	ldr	r2, [r7, #8]
 80032a0:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80032a2:	e007      	b.n	80032b4 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	68ba      	ldr	r2, [r7, #8]
 80032aa:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	687a      	ldr	r2, [r7, #4]
 80032b2:	60da      	str	r2, [r3, #12]
}
 80032b4:	bf00      	nop
 80032b6:	3714      	adds	r7, #20
 80032b8:	46bd      	mov	sp, r7
 80032ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032be:	4770      	bx	lr

080032c0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80032c0:	b480      	push	{r7}
 80032c2:	b085      	sub	sp, #20
 80032c4:	af00      	add	r7, sp, #0
 80032c6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	b2db      	uxtb	r3, r3
 80032ce:	3b10      	subs	r3, #16
 80032d0:	4a14      	ldr	r2, [pc, #80]	@ (8003324 <DMA_CalcBaseAndBitshift+0x64>)
 80032d2:	fba2 2303 	umull	r2, r3, r2, r3
 80032d6:	091b      	lsrs	r3, r3, #4
 80032d8:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80032da:	4a13      	ldr	r2, [pc, #76]	@ (8003328 <DMA_CalcBaseAndBitshift+0x68>)
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	4413      	add	r3, r2
 80032e0:	781b      	ldrb	r3, [r3, #0]
 80032e2:	461a      	mov	r2, r3
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	2b03      	cmp	r3, #3
 80032ec:	d909      	bls.n	8003302 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80032f6:	f023 0303 	bic.w	r3, r3, #3
 80032fa:	1d1a      	adds	r2, r3, #4
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	659a      	str	r2, [r3, #88]	@ 0x58
 8003300:	e007      	b.n	8003312 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800330a:	f023 0303 	bic.w	r3, r3, #3
 800330e:	687a      	ldr	r2, [r7, #4]
 8003310:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8003316:	4618      	mov	r0, r3
 8003318:	3714      	adds	r7, #20
 800331a:	46bd      	mov	sp, r7
 800331c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003320:	4770      	bx	lr
 8003322:	bf00      	nop
 8003324:	aaaaaaab 	.word	0xaaaaaaab
 8003328:	0800ade8 	.word	0x0800ade8

0800332c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800332c:	b480      	push	{r7}
 800332e:	b085      	sub	sp, #20
 8003330:	af00      	add	r7, sp, #0
 8003332:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003334:	2300      	movs	r3, #0
 8003336:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800333c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	699b      	ldr	r3, [r3, #24]
 8003342:	2b00      	cmp	r3, #0
 8003344:	d11f      	bne.n	8003386 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003346:	68bb      	ldr	r3, [r7, #8]
 8003348:	2b03      	cmp	r3, #3
 800334a:	d856      	bhi.n	80033fa <DMA_CheckFifoParam+0xce>
 800334c:	a201      	add	r2, pc, #4	@ (adr r2, 8003354 <DMA_CheckFifoParam+0x28>)
 800334e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003352:	bf00      	nop
 8003354:	08003365 	.word	0x08003365
 8003358:	08003377 	.word	0x08003377
 800335c:	08003365 	.word	0x08003365
 8003360:	080033fb 	.word	0x080033fb
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003368:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800336c:	2b00      	cmp	r3, #0
 800336e:	d046      	beq.n	80033fe <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003370:	2301      	movs	r3, #1
 8003372:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003374:	e043      	b.n	80033fe <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800337a:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800337e:	d140      	bne.n	8003402 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003380:	2301      	movs	r3, #1
 8003382:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003384:	e03d      	b.n	8003402 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	699b      	ldr	r3, [r3, #24]
 800338a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800338e:	d121      	bne.n	80033d4 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003390:	68bb      	ldr	r3, [r7, #8]
 8003392:	2b03      	cmp	r3, #3
 8003394:	d837      	bhi.n	8003406 <DMA_CheckFifoParam+0xda>
 8003396:	a201      	add	r2, pc, #4	@ (adr r2, 800339c <DMA_CheckFifoParam+0x70>)
 8003398:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800339c:	080033ad 	.word	0x080033ad
 80033a0:	080033b3 	.word	0x080033b3
 80033a4:	080033ad 	.word	0x080033ad
 80033a8:	080033c5 	.word	0x080033c5
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80033ac:	2301      	movs	r3, #1
 80033ae:	73fb      	strb	r3, [r7, #15]
      break;
 80033b0:	e030      	b.n	8003414 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80033b6:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d025      	beq.n	800340a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80033be:	2301      	movs	r3, #1
 80033c0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80033c2:	e022      	b.n	800340a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80033c8:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80033cc:	d11f      	bne.n	800340e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80033ce:	2301      	movs	r3, #1
 80033d0:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80033d2:	e01c      	b.n	800340e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80033d4:	68bb      	ldr	r3, [r7, #8]
 80033d6:	2b02      	cmp	r3, #2
 80033d8:	d903      	bls.n	80033e2 <DMA_CheckFifoParam+0xb6>
 80033da:	68bb      	ldr	r3, [r7, #8]
 80033dc:	2b03      	cmp	r3, #3
 80033de:	d003      	beq.n	80033e8 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80033e0:	e018      	b.n	8003414 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80033e2:	2301      	movs	r3, #1
 80033e4:	73fb      	strb	r3, [r7, #15]
      break;
 80033e6:	e015      	b.n	8003414 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80033ec:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d00e      	beq.n	8003412 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80033f4:	2301      	movs	r3, #1
 80033f6:	73fb      	strb	r3, [r7, #15]
      break;
 80033f8:	e00b      	b.n	8003412 <DMA_CheckFifoParam+0xe6>
      break;
 80033fa:	bf00      	nop
 80033fc:	e00a      	b.n	8003414 <DMA_CheckFifoParam+0xe8>
      break;
 80033fe:	bf00      	nop
 8003400:	e008      	b.n	8003414 <DMA_CheckFifoParam+0xe8>
      break;
 8003402:	bf00      	nop
 8003404:	e006      	b.n	8003414 <DMA_CheckFifoParam+0xe8>
      break;
 8003406:	bf00      	nop
 8003408:	e004      	b.n	8003414 <DMA_CheckFifoParam+0xe8>
      break;
 800340a:	bf00      	nop
 800340c:	e002      	b.n	8003414 <DMA_CheckFifoParam+0xe8>
      break;   
 800340e:	bf00      	nop
 8003410:	e000      	b.n	8003414 <DMA_CheckFifoParam+0xe8>
      break;
 8003412:	bf00      	nop
    }
  } 
  
  return status; 
 8003414:	7bfb      	ldrb	r3, [r7, #15]
}
 8003416:	4618      	mov	r0, r3
 8003418:	3714      	adds	r7, #20
 800341a:	46bd      	mov	sp, r7
 800341c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003420:	4770      	bx	lr
 8003422:	bf00      	nop

08003424 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003424:	b480      	push	{r7}
 8003426:	b089      	sub	sp, #36	@ 0x24
 8003428:	af00      	add	r7, sp, #0
 800342a:	6078      	str	r0, [r7, #4]
 800342c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800342e:	2300      	movs	r3, #0
 8003430:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003432:	2300      	movs	r3, #0
 8003434:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003436:	2300      	movs	r3, #0
 8003438:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800343a:	2300      	movs	r3, #0
 800343c:	61fb      	str	r3, [r7, #28]
 800343e:	e16b      	b.n	8003718 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003440:	2201      	movs	r2, #1
 8003442:	69fb      	ldr	r3, [r7, #28]
 8003444:	fa02 f303 	lsl.w	r3, r2, r3
 8003448:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800344a:	683b      	ldr	r3, [r7, #0]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	697a      	ldr	r2, [r7, #20]
 8003450:	4013      	ands	r3, r2
 8003452:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003454:	693a      	ldr	r2, [r7, #16]
 8003456:	697b      	ldr	r3, [r7, #20]
 8003458:	429a      	cmp	r2, r3
 800345a:	f040 815a 	bne.w	8003712 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800345e:	683b      	ldr	r3, [r7, #0]
 8003460:	685b      	ldr	r3, [r3, #4]
 8003462:	f003 0303 	and.w	r3, r3, #3
 8003466:	2b01      	cmp	r3, #1
 8003468:	d005      	beq.n	8003476 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800346a:	683b      	ldr	r3, [r7, #0]
 800346c:	685b      	ldr	r3, [r3, #4]
 800346e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003472:	2b02      	cmp	r3, #2
 8003474:	d130      	bne.n	80034d8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	689b      	ldr	r3, [r3, #8]
 800347a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800347c:	69fb      	ldr	r3, [r7, #28]
 800347e:	005b      	lsls	r3, r3, #1
 8003480:	2203      	movs	r2, #3
 8003482:	fa02 f303 	lsl.w	r3, r2, r3
 8003486:	43db      	mvns	r3, r3
 8003488:	69ba      	ldr	r2, [r7, #24]
 800348a:	4013      	ands	r3, r2
 800348c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800348e:	683b      	ldr	r3, [r7, #0]
 8003490:	68da      	ldr	r2, [r3, #12]
 8003492:	69fb      	ldr	r3, [r7, #28]
 8003494:	005b      	lsls	r3, r3, #1
 8003496:	fa02 f303 	lsl.w	r3, r2, r3
 800349a:	69ba      	ldr	r2, [r7, #24]
 800349c:	4313      	orrs	r3, r2
 800349e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	69ba      	ldr	r2, [r7, #24]
 80034a4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	685b      	ldr	r3, [r3, #4]
 80034aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80034ac:	2201      	movs	r2, #1
 80034ae:	69fb      	ldr	r3, [r7, #28]
 80034b0:	fa02 f303 	lsl.w	r3, r2, r3
 80034b4:	43db      	mvns	r3, r3
 80034b6:	69ba      	ldr	r2, [r7, #24]
 80034b8:	4013      	ands	r3, r2
 80034ba:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80034bc:	683b      	ldr	r3, [r7, #0]
 80034be:	685b      	ldr	r3, [r3, #4]
 80034c0:	091b      	lsrs	r3, r3, #4
 80034c2:	f003 0201 	and.w	r2, r3, #1
 80034c6:	69fb      	ldr	r3, [r7, #28]
 80034c8:	fa02 f303 	lsl.w	r3, r2, r3
 80034cc:	69ba      	ldr	r2, [r7, #24]
 80034ce:	4313      	orrs	r3, r2
 80034d0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	69ba      	ldr	r2, [r7, #24]
 80034d6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80034d8:	683b      	ldr	r3, [r7, #0]
 80034da:	685b      	ldr	r3, [r3, #4]
 80034dc:	f003 0303 	and.w	r3, r3, #3
 80034e0:	2b03      	cmp	r3, #3
 80034e2:	d017      	beq.n	8003514 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	68db      	ldr	r3, [r3, #12]
 80034e8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80034ea:	69fb      	ldr	r3, [r7, #28]
 80034ec:	005b      	lsls	r3, r3, #1
 80034ee:	2203      	movs	r2, #3
 80034f0:	fa02 f303 	lsl.w	r3, r2, r3
 80034f4:	43db      	mvns	r3, r3
 80034f6:	69ba      	ldr	r2, [r7, #24]
 80034f8:	4013      	ands	r3, r2
 80034fa:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80034fc:	683b      	ldr	r3, [r7, #0]
 80034fe:	689a      	ldr	r2, [r3, #8]
 8003500:	69fb      	ldr	r3, [r7, #28]
 8003502:	005b      	lsls	r3, r3, #1
 8003504:	fa02 f303 	lsl.w	r3, r2, r3
 8003508:	69ba      	ldr	r2, [r7, #24]
 800350a:	4313      	orrs	r3, r2
 800350c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	69ba      	ldr	r2, [r7, #24]
 8003512:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003514:	683b      	ldr	r3, [r7, #0]
 8003516:	685b      	ldr	r3, [r3, #4]
 8003518:	f003 0303 	and.w	r3, r3, #3
 800351c:	2b02      	cmp	r3, #2
 800351e:	d123      	bne.n	8003568 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003520:	69fb      	ldr	r3, [r7, #28]
 8003522:	08da      	lsrs	r2, r3, #3
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	3208      	adds	r2, #8
 8003528:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800352c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800352e:	69fb      	ldr	r3, [r7, #28]
 8003530:	f003 0307 	and.w	r3, r3, #7
 8003534:	009b      	lsls	r3, r3, #2
 8003536:	220f      	movs	r2, #15
 8003538:	fa02 f303 	lsl.w	r3, r2, r3
 800353c:	43db      	mvns	r3, r3
 800353e:	69ba      	ldr	r2, [r7, #24]
 8003540:	4013      	ands	r3, r2
 8003542:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003544:	683b      	ldr	r3, [r7, #0]
 8003546:	691a      	ldr	r2, [r3, #16]
 8003548:	69fb      	ldr	r3, [r7, #28]
 800354a:	f003 0307 	and.w	r3, r3, #7
 800354e:	009b      	lsls	r3, r3, #2
 8003550:	fa02 f303 	lsl.w	r3, r2, r3
 8003554:	69ba      	ldr	r2, [r7, #24]
 8003556:	4313      	orrs	r3, r2
 8003558:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800355a:	69fb      	ldr	r3, [r7, #28]
 800355c:	08da      	lsrs	r2, r3, #3
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	3208      	adds	r2, #8
 8003562:	69b9      	ldr	r1, [r7, #24]
 8003564:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800356e:	69fb      	ldr	r3, [r7, #28]
 8003570:	005b      	lsls	r3, r3, #1
 8003572:	2203      	movs	r2, #3
 8003574:	fa02 f303 	lsl.w	r3, r2, r3
 8003578:	43db      	mvns	r3, r3
 800357a:	69ba      	ldr	r2, [r7, #24]
 800357c:	4013      	ands	r3, r2
 800357e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003580:	683b      	ldr	r3, [r7, #0]
 8003582:	685b      	ldr	r3, [r3, #4]
 8003584:	f003 0203 	and.w	r2, r3, #3
 8003588:	69fb      	ldr	r3, [r7, #28]
 800358a:	005b      	lsls	r3, r3, #1
 800358c:	fa02 f303 	lsl.w	r3, r2, r3
 8003590:	69ba      	ldr	r2, [r7, #24]
 8003592:	4313      	orrs	r3, r2
 8003594:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	69ba      	ldr	r2, [r7, #24]
 800359a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800359c:	683b      	ldr	r3, [r7, #0]
 800359e:	685b      	ldr	r3, [r3, #4]
 80035a0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	f000 80b4 	beq.w	8003712 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80035aa:	2300      	movs	r3, #0
 80035ac:	60fb      	str	r3, [r7, #12]
 80035ae:	4b60      	ldr	r3, [pc, #384]	@ (8003730 <HAL_GPIO_Init+0x30c>)
 80035b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80035b2:	4a5f      	ldr	r2, [pc, #380]	@ (8003730 <HAL_GPIO_Init+0x30c>)
 80035b4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80035b8:	6453      	str	r3, [r2, #68]	@ 0x44
 80035ba:	4b5d      	ldr	r3, [pc, #372]	@ (8003730 <HAL_GPIO_Init+0x30c>)
 80035bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80035be:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80035c2:	60fb      	str	r3, [r7, #12]
 80035c4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80035c6:	4a5b      	ldr	r2, [pc, #364]	@ (8003734 <HAL_GPIO_Init+0x310>)
 80035c8:	69fb      	ldr	r3, [r7, #28]
 80035ca:	089b      	lsrs	r3, r3, #2
 80035cc:	3302      	adds	r3, #2
 80035ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80035d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80035d4:	69fb      	ldr	r3, [r7, #28]
 80035d6:	f003 0303 	and.w	r3, r3, #3
 80035da:	009b      	lsls	r3, r3, #2
 80035dc:	220f      	movs	r2, #15
 80035de:	fa02 f303 	lsl.w	r3, r2, r3
 80035e2:	43db      	mvns	r3, r3
 80035e4:	69ba      	ldr	r2, [r7, #24]
 80035e6:	4013      	ands	r3, r2
 80035e8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	4a52      	ldr	r2, [pc, #328]	@ (8003738 <HAL_GPIO_Init+0x314>)
 80035ee:	4293      	cmp	r3, r2
 80035f0:	d02b      	beq.n	800364a <HAL_GPIO_Init+0x226>
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	4a51      	ldr	r2, [pc, #324]	@ (800373c <HAL_GPIO_Init+0x318>)
 80035f6:	4293      	cmp	r3, r2
 80035f8:	d025      	beq.n	8003646 <HAL_GPIO_Init+0x222>
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	4a50      	ldr	r2, [pc, #320]	@ (8003740 <HAL_GPIO_Init+0x31c>)
 80035fe:	4293      	cmp	r3, r2
 8003600:	d01f      	beq.n	8003642 <HAL_GPIO_Init+0x21e>
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	4a4f      	ldr	r2, [pc, #316]	@ (8003744 <HAL_GPIO_Init+0x320>)
 8003606:	4293      	cmp	r3, r2
 8003608:	d019      	beq.n	800363e <HAL_GPIO_Init+0x21a>
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	4a4e      	ldr	r2, [pc, #312]	@ (8003748 <HAL_GPIO_Init+0x324>)
 800360e:	4293      	cmp	r3, r2
 8003610:	d013      	beq.n	800363a <HAL_GPIO_Init+0x216>
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	4a4d      	ldr	r2, [pc, #308]	@ (800374c <HAL_GPIO_Init+0x328>)
 8003616:	4293      	cmp	r3, r2
 8003618:	d00d      	beq.n	8003636 <HAL_GPIO_Init+0x212>
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	4a4c      	ldr	r2, [pc, #304]	@ (8003750 <HAL_GPIO_Init+0x32c>)
 800361e:	4293      	cmp	r3, r2
 8003620:	d007      	beq.n	8003632 <HAL_GPIO_Init+0x20e>
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	4a4b      	ldr	r2, [pc, #300]	@ (8003754 <HAL_GPIO_Init+0x330>)
 8003626:	4293      	cmp	r3, r2
 8003628:	d101      	bne.n	800362e <HAL_GPIO_Init+0x20a>
 800362a:	2307      	movs	r3, #7
 800362c:	e00e      	b.n	800364c <HAL_GPIO_Init+0x228>
 800362e:	2308      	movs	r3, #8
 8003630:	e00c      	b.n	800364c <HAL_GPIO_Init+0x228>
 8003632:	2306      	movs	r3, #6
 8003634:	e00a      	b.n	800364c <HAL_GPIO_Init+0x228>
 8003636:	2305      	movs	r3, #5
 8003638:	e008      	b.n	800364c <HAL_GPIO_Init+0x228>
 800363a:	2304      	movs	r3, #4
 800363c:	e006      	b.n	800364c <HAL_GPIO_Init+0x228>
 800363e:	2303      	movs	r3, #3
 8003640:	e004      	b.n	800364c <HAL_GPIO_Init+0x228>
 8003642:	2302      	movs	r3, #2
 8003644:	e002      	b.n	800364c <HAL_GPIO_Init+0x228>
 8003646:	2301      	movs	r3, #1
 8003648:	e000      	b.n	800364c <HAL_GPIO_Init+0x228>
 800364a:	2300      	movs	r3, #0
 800364c:	69fa      	ldr	r2, [r7, #28]
 800364e:	f002 0203 	and.w	r2, r2, #3
 8003652:	0092      	lsls	r2, r2, #2
 8003654:	4093      	lsls	r3, r2
 8003656:	69ba      	ldr	r2, [r7, #24]
 8003658:	4313      	orrs	r3, r2
 800365a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800365c:	4935      	ldr	r1, [pc, #212]	@ (8003734 <HAL_GPIO_Init+0x310>)
 800365e:	69fb      	ldr	r3, [r7, #28]
 8003660:	089b      	lsrs	r3, r3, #2
 8003662:	3302      	adds	r3, #2
 8003664:	69ba      	ldr	r2, [r7, #24]
 8003666:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800366a:	4b3b      	ldr	r3, [pc, #236]	@ (8003758 <HAL_GPIO_Init+0x334>)
 800366c:	689b      	ldr	r3, [r3, #8]
 800366e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003670:	693b      	ldr	r3, [r7, #16]
 8003672:	43db      	mvns	r3, r3
 8003674:	69ba      	ldr	r2, [r7, #24]
 8003676:	4013      	ands	r3, r2
 8003678:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800367a:	683b      	ldr	r3, [r7, #0]
 800367c:	685b      	ldr	r3, [r3, #4]
 800367e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003682:	2b00      	cmp	r3, #0
 8003684:	d003      	beq.n	800368e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8003686:	69ba      	ldr	r2, [r7, #24]
 8003688:	693b      	ldr	r3, [r7, #16]
 800368a:	4313      	orrs	r3, r2
 800368c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800368e:	4a32      	ldr	r2, [pc, #200]	@ (8003758 <HAL_GPIO_Init+0x334>)
 8003690:	69bb      	ldr	r3, [r7, #24]
 8003692:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003694:	4b30      	ldr	r3, [pc, #192]	@ (8003758 <HAL_GPIO_Init+0x334>)
 8003696:	68db      	ldr	r3, [r3, #12]
 8003698:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800369a:	693b      	ldr	r3, [r7, #16]
 800369c:	43db      	mvns	r3, r3
 800369e:	69ba      	ldr	r2, [r7, #24]
 80036a0:	4013      	ands	r3, r2
 80036a2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80036a4:	683b      	ldr	r3, [r7, #0]
 80036a6:	685b      	ldr	r3, [r3, #4]
 80036a8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d003      	beq.n	80036b8 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80036b0:	69ba      	ldr	r2, [r7, #24]
 80036b2:	693b      	ldr	r3, [r7, #16]
 80036b4:	4313      	orrs	r3, r2
 80036b6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80036b8:	4a27      	ldr	r2, [pc, #156]	@ (8003758 <HAL_GPIO_Init+0x334>)
 80036ba:	69bb      	ldr	r3, [r7, #24]
 80036bc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80036be:	4b26      	ldr	r3, [pc, #152]	@ (8003758 <HAL_GPIO_Init+0x334>)
 80036c0:	685b      	ldr	r3, [r3, #4]
 80036c2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80036c4:	693b      	ldr	r3, [r7, #16]
 80036c6:	43db      	mvns	r3, r3
 80036c8:	69ba      	ldr	r2, [r7, #24]
 80036ca:	4013      	ands	r3, r2
 80036cc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80036ce:	683b      	ldr	r3, [r7, #0]
 80036d0:	685b      	ldr	r3, [r3, #4]
 80036d2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d003      	beq.n	80036e2 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80036da:	69ba      	ldr	r2, [r7, #24]
 80036dc:	693b      	ldr	r3, [r7, #16]
 80036de:	4313      	orrs	r3, r2
 80036e0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80036e2:	4a1d      	ldr	r2, [pc, #116]	@ (8003758 <HAL_GPIO_Init+0x334>)
 80036e4:	69bb      	ldr	r3, [r7, #24]
 80036e6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80036e8:	4b1b      	ldr	r3, [pc, #108]	@ (8003758 <HAL_GPIO_Init+0x334>)
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80036ee:	693b      	ldr	r3, [r7, #16]
 80036f0:	43db      	mvns	r3, r3
 80036f2:	69ba      	ldr	r2, [r7, #24]
 80036f4:	4013      	ands	r3, r2
 80036f6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80036f8:	683b      	ldr	r3, [r7, #0]
 80036fa:	685b      	ldr	r3, [r3, #4]
 80036fc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003700:	2b00      	cmp	r3, #0
 8003702:	d003      	beq.n	800370c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8003704:	69ba      	ldr	r2, [r7, #24]
 8003706:	693b      	ldr	r3, [r7, #16]
 8003708:	4313      	orrs	r3, r2
 800370a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800370c:	4a12      	ldr	r2, [pc, #72]	@ (8003758 <HAL_GPIO_Init+0x334>)
 800370e:	69bb      	ldr	r3, [r7, #24]
 8003710:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003712:	69fb      	ldr	r3, [r7, #28]
 8003714:	3301      	adds	r3, #1
 8003716:	61fb      	str	r3, [r7, #28]
 8003718:	69fb      	ldr	r3, [r7, #28]
 800371a:	2b0f      	cmp	r3, #15
 800371c:	f67f ae90 	bls.w	8003440 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003720:	bf00      	nop
 8003722:	bf00      	nop
 8003724:	3724      	adds	r7, #36	@ 0x24
 8003726:	46bd      	mov	sp, r7
 8003728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800372c:	4770      	bx	lr
 800372e:	bf00      	nop
 8003730:	40023800 	.word	0x40023800
 8003734:	40013800 	.word	0x40013800
 8003738:	40020000 	.word	0x40020000
 800373c:	40020400 	.word	0x40020400
 8003740:	40020800 	.word	0x40020800
 8003744:	40020c00 	.word	0x40020c00
 8003748:	40021000 	.word	0x40021000
 800374c:	40021400 	.word	0x40021400
 8003750:	40021800 	.word	0x40021800
 8003754:	40021c00 	.word	0x40021c00
 8003758:	40013c00 	.word	0x40013c00

0800375c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800375c:	b480      	push	{r7}
 800375e:	b083      	sub	sp, #12
 8003760:	af00      	add	r7, sp, #0
 8003762:	6078      	str	r0, [r7, #4]
 8003764:	460b      	mov	r3, r1
 8003766:	807b      	strh	r3, [r7, #2]
 8003768:	4613      	mov	r3, r2
 800376a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800376c:	787b      	ldrb	r3, [r7, #1]
 800376e:	2b00      	cmp	r3, #0
 8003770:	d003      	beq.n	800377a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003772:	887a      	ldrh	r2, [r7, #2]
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003778:	e003      	b.n	8003782 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800377a:	887b      	ldrh	r3, [r7, #2]
 800377c:	041a      	lsls	r2, r3, #16
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	619a      	str	r2, [r3, #24]
}
 8003782:	bf00      	nop
 8003784:	370c      	adds	r7, #12
 8003786:	46bd      	mov	sp, r7
 8003788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800378c:	4770      	bx	lr
	...

08003790 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003790:	b580      	push	{r7, lr}
 8003792:	b082      	sub	sp, #8
 8003794:	af00      	add	r7, sp, #0
 8003796:	4603      	mov	r3, r0
 8003798:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800379a:	4b08      	ldr	r3, [pc, #32]	@ (80037bc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800379c:	695a      	ldr	r2, [r3, #20]
 800379e:	88fb      	ldrh	r3, [r7, #6]
 80037a0:	4013      	ands	r3, r2
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d006      	beq.n	80037b4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80037a6:	4a05      	ldr	r2, [pc, #20]	@ (80037bc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80037a8:	88fb      	ldrh	r3, [r7, #6]
 80037aa:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80037ac:	88fb      	ldrh	r3, [r7, #6]
 80037ae:	4618      	mov	r0, r3
 80037b0:	f000 f806 	bl	80037c0 <HAL_GPIO_EXTI_Callback>
  }
}
 80037b4:	bf00      	nop
 80037b6:	3708      	adds	r7, #8
 80037b8:	46bd      	mov	sp, r7
 80037ba:	bd80      	pop	{r7, pc}
 80037bc:	40013c00 	.word	0x40013c00

080037c0 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80037c0:	b480      	push	{r7}
 80037c2:	b083      	sub	sp, #12
 80037c4:	af00      	add	r7, sp, #0
 80037c6:	4603      	mov	r3, r0
 80037c8:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80037ca:	bf00      	nop
 80037cc:	370c      	adds	r7, #12
 80037ce:	46bd      	mov	sp, r7
 80037d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037d4:	4770      	bx	lr
	...

080037d8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80037d8:	b580      	push	{r7, lr}
 80037da:	b086      	sub	sp, #24
 80037dc:	af00      	add	r7, sp, #0
 80037de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d101      	bne.n	80037ea <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80037e6:	2301      	movs	r3, #1
 80037e8:	e267      	b.n	8003cba <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	f003 0301 	and.w	r3, r3, #1
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d075      	beq.n	80038e2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80037f6:	4b88      	ldr	r3, [pc, #544]	@ (8003a18 <HAL_RCC_OscConfig+0x240>)
 80037f8:	689b      	ldr	r3, [r3, #8]
 80037fa:	f003 030c 	and.w	r3, r3, #12
 80037fe:	2b04      	cmp	r3, #4
 8003800:	d00c      	beq.n	800381c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003802:	4b85      	ldr	r3, [pc, #532]	@ (8003a18 <HAL_RCC_OscConfig+0x240>)
 8003804:	689b      	ldr	r3, [r3, #8]
 8003806:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800380a:	2b08      	cmp	r3, #8
 800380c:	d112      	bne.n	8003834 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800380e:	4b82      	ldr	r3, [pc, #520]	@ (8003a18 <HAL_RCC_OscConfig+0x240>)
 8003810:	685b      	ldr	r3, [r3, #4]
 8003812:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003816:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800381a:	d10b      	bne.n	8003834 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800381c:	4b7e      	ldr	r3, [pc, #504]	@ (8003a18 <HAL_RCC_OscConfig+0x240>)
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003824:	2b00      	cmp	r3, #0
 8003826:	d05b      	beq.n	80038e0 <HAL_RCC_OscConfig+0x108>
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	685b      	ldr	r3, [r3, #4]
 800382c:	2b00      	cmp	r3, #0
 800382e:	d157      	bne.n	80038e0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003830:	2301      	movs	r3, #1
 8003832:	e242      	b.n	8003cba <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	685b      	ldr	r3, [r3, #4]
 8003838:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800383c:	d106      	bne.n	800384c <HAL_RCC_OscConfig+0x74>
 800383e:	4b76      	ldr	r3, [pc, #472]	@ (8003a18 <HAL_RCC_OscConfig+0x240>)
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	4a75      	ldr	r2, [pc, #468]	@ (8003a18 <HAL_RCC_OscConfig+0x240>)
 8003844:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003848:	6013      	str	r3, [r2, #0]
 800384a:	e01d      	b.n	8003888 <HAL_RCC_OscConfig+0xb0>
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	685b      	ldr	r3, [r3, #4]
 8003850:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003854:	d10c      	bne.n	8003870 <HAL_RCC_OscConfig+0x98>
 8003856:	4b70      	ldr	r3, [pc, #448]	@ (8003a18 <HAL_RCC_OscConfig+0x240>)
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	4a6f      	ldr	r2, [pc, #444]	@ (8003a18 <HAL_RCC_OscConfig+0x240>)
 800385c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003860:	6013      	str	r3, [r2, #0]
 8003862:	4b6d      	ldr	r3, [pc, #436]	@ (8003a18 <HAL_RCC_OscConfig+0x240>)
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	4a6c      	ldr	r2, [pc, #432]	@ (8003a18 <HAL_RCC_OscConfig+0x240>)
 8003868:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800386c:	6013      	str	r3, [r2, #0]
 800386e:	e00b      	b.n	8003888 <HAL_RCC_OscConfig+0xb0>
 8003870:	4b69      	ldr	r3, [pc, #420]	@ (8003a18 <HAL_RCC_OscConfig+0x240>)
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	4a68      	ldr	r2, [pc, #416]	@ (8003a18 <HAL_RCC_OscConfig+0x240>)
 8003876:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800387a:	6013      	str	r3, [r2, #0]
 800387c:	4b66      	ldr	r3, [pc, #408]	@ (8003a18 <HAL_RCC_OscConfig+0x240>)
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	4a65      	ldr	r2, [pc, #404]	@ (8003a18 <HAL_RCC_OscConfig+0x240>)
 8003882:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003886:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	685b      	ldr	r3, [r3, #4]
 800388c:	2b00      	cmp	r3, #0
 800388e:	d013      	beq.n	80038b8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003890:	f7fe fb4a 	bl	8001f28 <HAL_GetTick>
 8003894:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003896:	e008      	b.n	80038aa <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003898:	f7fe fb46 	bl	8001f28 <HAL_GetTick>
 800389c:	4602      	mov	r2, r0
 800389e:	693b      	ldr	r3, [r7, #16]
 80038a0:	1ad3      	subs	r3, r2, r3
 80038a2:	2b64      	cmp	r3, #100	@ 0x64
 80038a4:	d901      	bls.n	80038aa <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80038a6:	2303      	movs	r3, #3
 80038a8:	e207      	b.n	8003cba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80038aa:	4b5b      	ldr	r3, [pc, #364]	@ (8003a18 <HAL_RCC_OscConfig+0x240>)
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d0f0      	beq.n	8003898 <HAL_RCC_OscConfig+0xc0>
 80038b6:	e014      	b.n	80038e2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038b8:	f7fe fb36 	bl	8001f28 <HAL_GetTick>
 80038bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80038be:	e008      	b.n	80038d2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80038c0:	f7fe fb32 	bl	8001f28 <HAL_GetTick>
 80038c4:	4602      	mov	r2, r0
 80038c6:	693b      	ldr	r3, [r7, #16]
 80038c8:	1ad3      	subs	r3, r2, r3
 80038ca:	2b64      	cmp	r3, #100	@ 0x64
 80038cc:	d901      	bls.n	80038d2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80038ce:	2303      	movs	r3, #3
 80038d0:	e1f3      	b.n	8003cba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80038d2:	4b51      	ldr	r3, [pc, #324]	@ (8003a18 <HAL_RCC_OscConfig+0x240>)
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d1f0      	bne.n	80038c0 <HAL_RCC_OscConfig+0xe8>
 80038de:	e000      	b.n	80038e2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80038e0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	f003 0302 	and.w	r3, r3, #2
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d063      	beq.n	80039b6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80038ee:	4b4a      	ldr	r3, [pc, #296]	@ (8003a18 <HAL_RCC_OscConfig+0x240>)
 80038f0:	689b      	ldr	r3, [r3, #8]
 80038f2:	f003 030c 	and.w	r3, r3, #12
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d00b      	beq.n	8003912 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80038fa:	4b47      	ldr	r3, [pc, #284]	@ (8003a18 <HAL_RCC_OscConfig+0x240>)
 80038fc:	689b      	ldr	r3, [r3, #8]
 80038fe:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003902:	2b08      	cmp	r3, #8
 8003904:	d11c      	bne.n	8003940 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003906:	4b44      	ldr	r3, [pc, #272]	@ (8003a18 <HAL_RCC_OscConfig+0x240>)
 8003908:	685b      	ldr	r3, [r3, #4]
 800390a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800390e:	2b00      	cmp	r3, #0
 8003910:	d116      	bne.n	8003940 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003912:	4b41      	ldr	r3, [pc, #260]	@ (8003a18 <HAL_RCC_OscConfig+0x240>)
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	f003 0302 	and.w	r3, r3, #2
 800391a:	2b00      	cmp	r3, #0
 800391c:	d005      	beq.n	800392a <HAL_RCC_OscConfig+0x152>
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	68db      	ldr	r3, [r3, #12]
 8003922:	2b01      	cmp	r3, #1
 8003924:	d001      	beq.n	800392a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003926:	2301      	movs	r3, #1
 8003928:	e1c7      	b.n	8003cba <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800392a:	4b3b      	ldr	r3, [pc, #236]	@ (8003a18 <HAL_RCC_OscConfig+0x240>)
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	691b      	ldr	r3, [r3, #16]
 8003936:	00db      	lsls	r3, r3, #3
 8003938:	4937      	ldr	r1, [pc, #220]	@ (8003a18 <HAL_RCC_OscConfig+0x240>)
 800393a:	4313      	orrs	r3, r2
 800393c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800393e:	e03a      	b.n	80039b6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	68db      	ldr	r3, [r3, #12]
 8003944:	2b00      	cmp	r3, #0
 8003946:	d020      	beq.n	800398a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003948:	4b34      	ldr	r3, [pc, #208]	@ (8003a1c <HAL_RCC_OscConfig+0x244>)
 800394a:	2201      	movs	r2, #1
 800394c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800394e:	f7fe faeb 	bl	8001f28 <HAL_GetTick>
 8003952:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003954:	e008      	b.n	8003968 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003956:	f7fe fae7 	bl	8001f28 <HAL_GetTick>
 800395a:	4602      	mov	r2, r0
 800395c:	693b      	ldr	r3, [r7, #16]
 800395e:	1ad3      	subs	r3, r2, r3
 8003960:	2b02      	cmp	r3, #2
 8003962:	d901      	bls.n	8003968 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003964:	2303      	movs	r3, #3
 8003966:	e1a8      	b.n	8003cba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003968:	4b2b      	ldr	r3, [pc, #172]	@ (8003a18 <HAL_RCC_OscConfig+0x240>)
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	f003 0302 	and.w	r3, r3, #2
 8003970:	2b00      	cmp	r3, #0
 8003972:	d0f0      	beq.n	8003956 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003974:	4b28      	ldr	r3, [pc, #160]	@ (8003a18 <HAL_RCC_OscConfig+0x240>)
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	691b      	ldr	r3, [r3, #16]
 8003980:	00db      	lsls	r3, r3, #3
 8003982:	4925      	ldr	r1, [pc, #148]	@ (8003a18 <HAL_RCC_OscConfig+0x240>)
 8003984:	4313      	orrs	r3, r2
 8003986:	600b      	str	r3, [r1, #0]
 8003988:	e015      	b.n	80039b6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800398a:	4b24      	ldr	r3, [pc, #144]	@ (8003a1c <HAL_RCC_OscConfig+0x244>)
 800398c:	2200      	movs	r2, #0
 800398e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003990:	f7fe faca 	bl	8001f28 <HAL_GetTick>
 8003994:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003996:	e008      	b.n	80039aa <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003998:	f7fe fac6 	bl	8001f28 <HAL_GetTick>
 800399c:	4602      	mov	r2, r0
 800399e:	693b      	ldr	r3, [r7, #16]
 80039a0:	1ad3      	subs	r3, r2, r3
 80039a2:	2b02      	cmp	r3, #2
 80039a4:	d901      	bls.n	80039aa <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80039a6:	2303      	movs	r3, #3
 80039a8:	e187      	b.n	8003cba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80039aa:	4b1b      	ldr	r3, [pc, #108]	@ (8003a18 <HAL_RCC_OscConfig+0x240>)
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	f003 0302 	and.w	r3, r3, #2
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d1f0      	bne.n	8003998 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	f003 0308 	and.w	r3, r3, #8
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d036      	beq.n	8003a30 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	695b      	ldr	r3, [r3, #20]
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d016      	beq.n	80039f8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80039ca:	4b15      	ldr	r3, [pc, #84]	@ (8003a20 <HAL_RCC_OscConfig+0x248>)
 80039cc:	2201      	movs	r2, #1
 80039ce:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80039d0:	f7fe faaa 	bl	8001f28 <HAL_GetTick>
 80039d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80039d6:	e008      	b.n	80039ea <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80039d8:	f7fe faa6 	bl	8001f28 <HAL_GetTick>
 80039dc:	4602      	mov	r2, r0
 80039de:	693b      	ldr	r3, [r7, #16]
 80039e0:	1ad3      	subs	r3, r2, r3
 80039e2:	2b02      	cmp	r3, #2
 80039e4:	d901      	bls.n	80039ea <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80039e6:	2303      	movs	r3, #3
 80039e8:	e167      	b.n	8003cba <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80039ea:	4b0b      	ldr	r3, [pc, #44]	@ (8003a18 <HAL_RCC_OscConfig+0x240>)
 80039ec:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80039ee:	f003 0302 	and.w	r3, r3, #2
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d0f0      	beq.n	80039d8 <HAL_RCC_OscConfig+0x200>
 80039f6:	e01b      	b.n	8003a30 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80039f8:	4b09      	ldr	r3, [pc, #36]	@ (8003a20 <HAL_RCC_OscConfig+0x248>)
 80039fa:	2200      	movs	r2, #0
 80039fc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80039fe:	f7fe fa93 	bl	8001f28 <HAL_GetTick>
 8003a02:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003a04:	e00e      	b.n	8003a24 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003a06:	f7fe fa8f 	bl	8001f28 <HAL_GetTick>
 8003a0a:	4602      	mov	r2, r0
 8003a0c:	693b      	ldr	r3, [r7, #16]
 8003a0e:	1ad3      	subs	r3, r2, r3
 8003a10:	2b02      	cmp	r3, #2
 8003a12:	d907      	bls.n	8003a24 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003a14:	2303      	movs	r3, #3
 8003a16:	e150      	b.n	8003cba <HAL_RCC_OscConfig+0x4e2>
 8003a18:	40023800 	.word	0x40023800
 8003a1c:	42470000 	.word	0x42470000
 8003a20:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003a24:	4b88      	ldr	r3, [pc, #544]	@ (8003c48 <HAL_RCC_OscConfig+0x470>)
 8003a26:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003a28:	f003 0302 	and.w	r3, r3, #2
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d1ea      	bne.n	8003a06 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	f003 0304 	and.w	r3, r3, #4
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	f000 8097 	beq.w	8003b6c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003a3e:	2300      	movs	r3, #0
 8003a40:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003a42:	4b81      	ldr	r3, [pc, #516]	@ (8003c48 <HAL_RCC_OscConfig+0x470>)
 8003a44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a46:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d10f      	bne.n	8003a6e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003a4e:	2300      	movs	r3, #0
 8003a50:	60bb      	str	r3, [r7, #8]
 8003a52:	4b7d      	ldr	r3, [pc, #500]	@ (8003c48 <HAL_RCC_OscConfig+0x470>)
 8003a54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a56:	4a7c      	ldr	r2, [pc, #496]	@ (8003c48 <HAL_RCC_OscConfig+0x470>)
 8003a58:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003a5c:	6413      	str	r3, [r2, #64]	@ 0x40
 8003a5e:	4b7a      	ldr	r3, [pc, #488]	@ (8003c48 <HAL_RCC_OscConfig+0x470>)
 8003a60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a62:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003a66:	60bb      	str	r3, [r7, #8]
 8003a68:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003a6a:	2301      	movs	r3, #1
 8003a6c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a6e:	4b77      	ldr	r3, [pc, #476]	@ (8003c4c <HAL_RCC_OscConfig+0x474>)
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d118      	bne.n	8003aac <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003a7a:	4b74      	ldr	r3, [pc, #464]	@ (8003c4c <HAL_RCC_OscConfig+0x474>)
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	4a73      	ldr	r2, [pc, #460]	@ (8003c4c <HAL_RCC_OscConfig+0x474>)
 8003a80:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003a84:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003a86:	f7fe fa4f 	bl	8001f28 <HAL_GetTick>
 8003a8a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a8c:	e008      	b.n	8003aa0 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003a8e:	f7fe fa4b 	bl	8001f28 <HAL_GetTick>
 8003a92:	4602      	mov	r2, r0
 8003a94:	693b      	ldr	r3, [r7, #16]
 8003a96:	1ad3      	subs	r3, r2, r3
 8003a98:	2b02      	cmp	r3, #2
 8003a9a:	d901      	bls.n	8003aa0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003a9c:	2303      	movs	r3, #3
 8003a9e:	e10c      	b.n	8003cba <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003aa0:	4b6a      	ldr	r3, [pc, #424]	@ (8003c4c <HAL_RCC_OscConfig+0x474>)
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d0f0      	beq.n	8003a8e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	689b      	ldr	r3, [r3, #8]
 8003ab0:	2b01      	cmp	r3, #1
 8003ab2:	d106      	bne.n	8003ac2 <HAL_RCC_OscConfig+0x2ea>
 8003ab4:	4b64      	ldr	r3, [pc, #400]	@ (8003c48 <HAL_RCC_OscConfig+0x470>)
 8003ab6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003ab8:	4a63      	ldr	r2, [pc, #396]	@ (8003c48 <HAL_RCC_OscConfig+0x470>)
 8003aba:	f043 0301 	orr.w	r3, r3, #1
 8003abe:	6713      	str	r3, [r2, #112]	@ 0x70
 8003ac0:	e01c      	b.n	8003afc <HAL_RCC_OscConfig+0x324>
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	689b      	ldr	r3, [r3, #8]
 8003ac6:	2b05      	cmp	r3, #5
 8003ac8:	d10c      	bne.n	8003ae4 <HAL_RCC_OscConfig+0x30c>
 8003aca:	4b5f      	ldr	r3, [pc, #380]	@ (8003c48 <HAL_RCC_OscConfig+0x470>)
 8003acc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003ace:	4a5e      	ldr	r2, [pc, #376]	@ (8003c48 <HAL_RCC_OscConfig+0x470>)
 8003ad0:	f043 0304 	orr.w	r3, r3, #4
 8003ad4:	6713      	str	r3, [r2, #112]	@ 0x70
 8003ad6:	4b5c      	ldr	r3, [pc, #368]	@ (8003c48 <HAL_RCC_OscConfig+0x470>)
 8003ad8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003ada:	4a5b      	ldr	r2, [pc, #364]	@ (8003c48 <HAL_RCC_OscConfig+0x470>)
 8003adc:	f043 0301 	orr.w	r3, r3, #1
 8003ae0:	6713      	str	r3, [r2, #112]	@ 0x70
 8003ae2:	e00b      	b.n	8003afc <HAL_RCC_OscConfig+0x324>
 8003ae4:	4b58      	ldr	r3, [pc, #352]	@ (8003c48 <HAL_RCC_OscConfig+0x470>)
 8003ae6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003ae8:	4a57      	ldr	r2, [pc, #348]	@ (8003c48 <HAL_RCC_OscConfig+0x470>)
 8003aea:	f023 0301 	bic.w	r3, r3, #1
 8003aee:	6713      	str	r3, [r2, #112]	@ 0x70
 8003af0:	4b55      	ldr	r3, [pc, #340]	@ (8003c48 <HAL_RCC_OscConfig+0x470>)
 8003af2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003af4:	4a54      	ldr	r2, [pc, #336]	@ (8003c48 <HAL_RCC_OscConfig+0x470>)
 8003af6:	f023 0304 	bic.w	r3, r3, #4
 8003afa:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	689b      	ldr	r3, [r3, #8]
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d015      	beq.n	8003b30 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b04:	f7fe fa10 	bl	8001f28 <HAL_GetTick>
 8003b08:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003b0a:	e00a      	b.n	8003b22 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003b0c:	f7fe fa0c 	bl	8001f28 <HAL_GetTick>
 8003b10:	4602      	mov	r2, r0
 8003b12:	693b      	ldr	r3, [r7, #16]
 8003b14:	1ad3      	subs	r3, r2, r3
 8003b16:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003b1a:	4293      	cmp	r3, r2
 8003b1c:	d901      	bls.n	8003b22 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003b1e:	2303      	movs	r3, #3
 8003b20:	e0cb      	b.n	8003cba <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003b22:	4b49      	ldr	r3, [pc, #292]	@ (8003c48 <HAL_RCC_OscConfig+0x470>)
 8003b24:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b26:	f003 0302 	and.w	r3, r3, #2
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d0ee      	beq.n	8003b0c <HAL_RCC_OscConfig+0x334>
 8003b2e:	e014      	b.n	8003b5a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003b30:	f7fe f9fa 	bl	8001f28 <HAL_GetTick>
 8003b34:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003b36:	e00a      	b.n	8003b4e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003b38:	f7fe f9f6 	bl	8001f28 <HAL_GetTick>
 8003b3c:	4602      	mov	r2, r0
 8003b3e:	693b      	ldr	r3, [r7, #16]
 8003b40:	1ad3      	subs	r3, r2, r3
 8003b42:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003b46:	4293      	cmp	r3, r2
 8003b48:	d901      	bls.n	8003b4e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003b4a:	2303      	movs	r3, #3
 8003b4c:	e0b5      	b.n	8003cba <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003b4e:	4b3e      	ldr	r3, [pc, #248]	@ (8003c48 <HAL_RCC_OscConfig+0x470>)
 8003b50:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b52:	f003 0302 	and.w	r3, r3, #2
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d1ee      	bne.n	8003b38 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003b5a:	7dfb      	ldrb	r3, [r7, #23]
 8003b5c:	2b01      	cmp	r3, #1
 8003b5e:	d105      	bne.n	8003b6c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003b60:	4b39      	ldr	r3, [pc, #228]	@ (8003c48 <HAL_RCC_OscConfig+0x470>)
 8003b62:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b64:	4a38      	ldr	r2, [pc, #224]	@ (8003c48 <HAL_RCC_OscConfig+0x470>)
 8003b66:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003b6a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	699b      	ldr	r3, [r3, #24]
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	f000 80a1 	beq.w	8003cb8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003b76:	4b34      	ldr	r3, [pc, #208]	@ (8003c48 <HAL_RCC_OscConfig+0x470>)
 8003b78:	689b      	ldr	r3, [r3, #8]
 8003b7a:	f003 030c 	and.w	r3, r3, #12
 8003b7e:	2b08      	cmp	r3, #8
 8003b80:	d05c      	beq.n	8003c3c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	699b      	ldr	r3, [r3, #24]
 8003b86:	2b02      	cmp	r3, #2
 8003b88:	d141      	bne.n	8003c0e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003b8a:	4b31      	ldr	r3, [pc, #196]	@ (8003c50 <HAL_RCC_OscConfig+0x478>)
 8003b8c:	2200      	movs	r2, #0
 8003b8e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b90:	f7fe f9ca 	bl	8001f28 <HAL_GetTick>
 8003b94:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003b96:	e008      	b.n	8003baa <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003b98:	f7fe f9c6 	bl	8001f28 <HAL_GetTick>
 8003b9c:	4602      	mov	r2, r0
 8003b9e:	693b      	ldr	r3, [r7, #16]
 8003ba0:	1ad3      	subs	r3, r2, r3
 8003ba2:	2b02      	cmp	r3, #2
 8003ba4:	d901      	bls.n	8003baa <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003ba6:	2303      	movs	r3, #3
 8003ba8:	e087      	b.n	8003cba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003baa:	4b27      	ldr	r3, [pc, #156]	@ (8003c48 <HAL_RCC_OscConfig+0x470>)
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d1f0      	bne.n	8003b98 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	69da      	ldr	r2, [r3, #28]
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	6a1b      	ldr	r3, [r3, #32]
 8003bbe:	431a      	orrs	r2, r3
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003bc4:	019b      	lsls	r3, r3, #6
 8003bc6:	431a      	orrs	r2, r3
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003bcc:	085b      	lsrs	r3, r3, #1
 8003bce:	3b01      	subs	r3, #1
 8003bd0:	041b      	lsls	r3, r3, #16
 8003bd2:	431a      	orrs	r2, r3
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003bd8:	061b      	lsls	r3, r3, #24
 8003bda:	491b      	ldr	r1, [pc, #108]	@ (8003c48 <HAL_RCC_OscConfig+0x470>)
 8003bdc:	4313      	orrs	r3, r2
 8003bde:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003be0:	4b1b      	ldr	r3, [pc, #108]	@ (8003c50 <HAL_RCC_OscConfig+0x478>)
 8003be2:	2201      	movs	r2, #1
 8003be4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003be6:	f7fe f99f 	bl	8001f28 <HAL_GetTick>
 8003bea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003bec:	e008      	b.n	8003c00 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003bee:	f7fe f99b 	bl	8001f28 <HAL_GetTick>
 8003bf2:	4602      	mov	r2, r0
 8003bf4:	693b      	ldr	r3, [r7, #16]
 8003bf6:	1ad3      	subs	r3, r2, r3
 8003bf8:	2b02      	cmp	r3, #2
 8003bfa:	d901      	bls.n	8003c00 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003bfc:	2303      	movs	r3, #3
 8003bfe:	e05c      	b.n	8003cba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003c00:	4b11      	ldr	r3, [pc, #68]	@ (8003c48 <HAL_RCC_OscConfig+0x470>)
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d0f0      	beq.n	8003bee <HAL_RCC_OscConfig+0x416>
 8003c0c:	e054      	b.n	8003cb8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003c0e:	4b10      	ldr	r3, [pc, #64]	@ (8003c50 <HAL_RCC_OscConfig+0x478>)
 8003c10:	2200      	movs	r2, #0
 8003c12:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c14:	f7fe f988 	bl	8001f28 <HAL_GetTick>
 8003c18:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003c1a:	e008      	b.n	8003c2e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003c1c:	f7fe f984 	bl	8001f28 <HAL_GetTick>
 8003c20:	4602      	mov	r2, r0
 8003c22:	693b      	ldr	r3, [r7, #16]
 8003c24:	1ad3      	subs	r3, r2, r3
 8003c26:	2b02      	cmp	r3, #2
 8003c28:	d901      	bls.n	8003c2e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003c2a:	2303      	movs	r3, #3
 8003c2c:	e045      	b.n	8003cba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003c2e:	4b06      	ldr	r3, [pc, #24]	@ (8003c48 <HAL_RCC_OscConfig+0x470>)
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d1f0      	bne.n	8003c1c <HAL_RCC_OscConfig+0x444>
 8003c3a:	e03d      	b.n	8003cb8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	699b      	ldr	r3, [r3, #24]
 8003c40:	2b01      	cmp	r3, #1
 8003c42:	d107      	bne.n	8003c54 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003c44:	2301      	movs	r3, #1
 8003c46:	e038      	b.n	8003cba <HAL_RCC_OscConfig+0x4e2>
 8003c48:	40023800 	.word	0x40023800
 8003c4c:	40007000 	.word	0x40007000
 8003c50:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003c54:	4b1b      	ldr	r3, [pc, #108]	@ (8003cc4 <HAL_RCC_OscConfig+0x4ec>)
 8003c56:	685b      	ldr	r3, [r3, #4]
 8003c58:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	699b      	ldr	r3, [r3, #24]
 8003c5e:	2b01      	cmp	r3, #1
 8003c60:	d028      	beq.n	8003cb4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003c6c:	429a      	cmp	r2, r3
 8003c6e:	d121      	bne.n	8003cb4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003c7a:	429a      	cmp	r2, r3
 8003c7c:	d11a      	bne.n	8003cb4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003c7e:	68fa      	ldr	r2, [r7, #12]
 8003c80:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003c84:	4013      	ands	r3, r2
 8003c86:	687a      	ldr	r2, [r7, #4]
 8003c88:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003c8a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003c8c:	4293      	cmp	r3, r2
 8003c8e:	d111      	bne.n	8003cb4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c9a:	085b      	lsrs	r3, r3, #1
 8003c9c:	3b01      	subs	r3, #1
 8003c9e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003ca0:	429a      	cmp	r2, r3
 8003ca2:	d107      	bne.n	8003cb4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003cae:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003cb0:	429a      	cmp	r2, r3
 8003cb2:	d001      	beq.n	8003cb8 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003cb4:	2301      	movs	r3, #1
 8003cb6:	e000      	b.n	8003cba <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003cb8:	2300      	movs	r3, #0
}
 8003cba:	4618      	mov	r0, r3
 8003cbc:	3718      	adds	r7, #24
 8003cbe:	46bd      	mov	sp, r7
 8003cc0:	bd80      	pop	{r7, pc}
 8003cc2:	bf00      	nop
 8003cc4:	40023800 	.word	0x40023800

08003cc8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003cc8:	b580      	push	{r7, lr}
 8003cca:	b084      	sub	sp, #16
 8003ccc:	af00      	add	r7, sp, #0
 8003cce:	6078      	str	r0, [r7, #4]
 8003cd0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d101      	bne.n	8003cdc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003cd8:	2301      	movs	r3, #1
 8003cda:	e0cc      	b.n	8003e76 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003cdc:	4b68      	ldr	r3, [pc, #416]	@ (8003e80 <HAL_RCC_ClockConfig+0x1b8>)
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	f003 0307 	and.w	r3, r3, #7
 8003ce4:	683a      	ldr	r2, [r7, #0]
 8003ce6:	429a      	cmp	r2, r3
 8003ce8:	d90c      	bls.n	8003d04 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003cea:	4b65      	ldr	r3, [pc, #404]	@ (8003e80 <HAL_RCC_ClockConfig+0x1b8>)
 8003cec:	683a      	ldr	r2, [r7, #0]
 8003cee:	b2d2      	uxtb	r2, r2
 8003cf0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003cf2:	4b63      	ldr	r3, [pc, #396]	@ (8003e80 <HAL_RCC_ClockConfig+0x1b8>)
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	f003 0307 	and.w	r3, r3, #7
 8003cfa:	683a      	ldr	r2, [r7, #0]
 8003cfc:	429a      	cmp	r2, r3
 8003cfe:	d001      	beq.n	8003d04 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003d00:	2301      	movs	r3, #1
 8003d02:	e0b8      	b.n	8003e76 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	f003 0302 	and.w	r3, r3, #2
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d020      	beq.n	8003d52 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	f003 0304 	and.w	r3, r3, #4
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d005      	beq.n	8003d28 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003d1c:	4b59      	ldr	r3, [pc, #356]	@ (8003e84 <HAL_RCC_ClockConfig+0x1bc>)
 8003d1e:	689b      	ldr	r3, [r3, #8]
 8003d20:	4a58      	ldr	r2, [pc, #352]	@ (8003e84 <HAL_RCC_ClockConfig+0x1bc>)
 8003d22:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8003d26:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	f003 0308 	and.w	r3, r3, #8
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d005      	beq.n	8003d40 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003d34:	4b53      	ldr	r3, [pc, #332]	@ (8003e84 <HAL_RCC_ClockConfig+0x1bc>)
 8003d36:	689b      	ldr	r3, [r3, #8]
 8003d38:	4a52      	ldr	r2, [pc, #328]	@ (8003e84 <HAL_RCC_ClockConfig+0x1bc>)
 8003d3a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8003d3e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003d40:	4b50      	ldr	r3, [pc, #320]	@ (8003e84 <HAL_RCC_ClockConfig+0x1bc>)
 8003d42:	689b      	ldr	r3, [r3, #8]
 8003d44:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	689b      	ldr	r3, [r3, #8]
 8003d4c:	494d      	ldr	r1, [pc, #308]	@ (8003e84 <HAL_RCC_ClockConfig+0x1bc>)
 8003d4e:	4313      	orrs	r3, r2
 8003d50:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	f003 0301 	and.w	r3, r3, #1
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d044      	beq.n	8003de8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	685b      	ldr	r3, [r3, #4]
 8003d62:	2b01      	cmp	r3, #1
 8003d64:	d107      	bne.n	8003d76 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003d66:	4b47      	ldr	r3, [pc, #284]	@ (8003e84 <HAL_RCC_ClockConfig+0x1bc>)
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d119      	bne.n	8003da6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003d72:	2301      	movs	r3, #1
 8003d74:	e07f      	b.n	8003e76 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	685b      	ldr	r3, [r3, #4]
 8003d7a:	2b02      	cmp	r3, #2
 8003d7c:	d003      	beq.n	8003d86 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003d82:	2b03      	cmp	r3, #3
 8003d84:	d107      	bne.n	8003d96 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003d86:	4b3f      	ldr	r3, [pc, #252]	@ (8003e84 <HAL_RCC_ClockConfig+0x1bc>)
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d109      	bne.n	8003da6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003d92:	2301      	movs	r3, #1
 8003d94:	e06f      	b.n	8003e76 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d96:	4b3b      	ldr	r3, [pc, #236]	@ (8003e84 <HAL_RCC_ClockConfig+0x1bc>)
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	f003 0302 	and.w	r3, r3, #2
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d101      	bne.n	8003da6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003da2:	2301      	movs	r3, #1
 8003da4:	e067      	b.n	8003e76 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003da6:	4b37      	ldr	r3, [pc, #220]	@ (8003e84 <HAL_RCC_ClockConfig+0x1bc>)
 8003da8:	689b      	ldr	r3, [r3, #8]
 8003daa:	f023 0203 	bic.w	r2, r3, #3
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	685b      	ldr	r3, [r3, #4]
 8003db2:	4934      	ldr	r1, [pc, #208]	@ (8003e84 <HAL_RCC_ClockConfig+0x1bc>)
 8003db4:	4313      	orrs	r3, r2
 8003db6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003db8:	f7fe f8b6 	bl	8001f28 <HAL_GetTick>
 8003dbc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003dbe:	e00a      	b.n	8003dd6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003dc0:	f7fe f8b2 	bl	8001f28 <HAL_GetTick>
 8003dc4:	4602      	mov	r2, r0
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	1ad3      	subs	r3, r2, r3
 8003dca:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003dce:	4293      	cmp	r3, r2
 8003dd0:	d901      	bls.n	8003dd6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003dd2:	2303      	movs	r3, #3
 8003dd4:	e04f      	b.n	8003e76 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003dd6:	4b2b      	ldr	r3, [pc, #172]	@ (8003e84 <HAL_RCC_ClockConfig+0x1bc>)
 8003dd8:	689b      	ldr	r3, [r3, #8]
 8003dda:	f003 020c 	and.w	r2, r3, #12
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	685b      	ldr	r3, [r3, #4]
 8003de2:	009b      	lsls	r3, r3, #2
 8003de4:	429a      	cmp	r2, r3
 8003de6:	d1eb      	bne.n	8003dc0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003de8:	4b25      	ldr	r3, [pc, #148]	@ (8003e80 <HAL_RCC_ClockConfig+0x1b8>)
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	f003 0307 	and.w	r3, r3, #7
 8003df0:	683a      	ldr	r2, [r7, #0]
 8003df2:	429a      	cmp	r2, r3
 8003df4:	d20c      	bcs.n	8003e10 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003df6:	4b22      	ldr	r3, [pc, #136]	@ (8003e80 <HAL_RCC_ClockConfig+0x1b8>)
 8003df8:	683a      	ldr	r2, [r7, #0]
 8003dfa:	b2d2      	uxtb	r2, r2
 8003dfc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003dfe:	4b20      	ldr	r3, [pc, #128]	@ (8003e80 <HAL_RCC_ClockConfig+0x1b8>)
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	f003 0307 	and.w	r3, r3, #7
 8003e06:	683a      	ldr	r2, [r7, #0]
 8003e08:	429a      	cmp	r2, r3
 8003e0a:	d001      	beq.n	8003e10 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003e0c:	2301      	movs	r3, #1
 8003e0e:	e032      	b.n	8003e76 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	f003 0304 	and.w	r3, r3, #4
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d008      	beq.n	8003e2e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003e1c:	4b19      	ldr	r3, [pc, #100]	@ (8003e84 <HAL_RCC_ClockConfig+0x1bc>)
 8003e1e:	689b      	ldr	r3, [r3, #8]
 8003e20:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	68db      	ldr	r3, [r3, #12]
 8003e28:	4916      	ldr	r1, [pc, #88]	@ (8003e84 <HAL_RCC_ClockConfig+0x1bc>)
 8003e2a:	4313      	orrs	r3, r2
 8003e2c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	f003 0308 	and.w	r3, r3, #8
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d009      	beq.n	8003e4e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003e3a:	4b12      	ldr	r3, [pc, #72]	@ (8003e84 <HAL_RCC_ClockConfig+0x1bc>)
 8003e3c:	689b      	ldr	r3, [r3, #8]
 8003e3e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	691b      	ldr	r3, [r3, #16]
 8003e46:	00db      	lsls	r3, r3, #3
 8003e48:	490e      	ldr	r1, [pc, #56]	@ (8003e84 <HAL_RCC_ClockConfig+0x1bc>)
 8003e4a:	4313      	orrs	r3, r2
 8003e4c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003e4e:	f000 f821 	bl	8003e94 <HAL_RCC_GetSysClockFreq>
 8003e52:	4602      	mov	r2, r0
 8003e54:	4b0b      	ldr	r3, [pc, #44]	@ (8003e84 <HAL_RCC_ClockConfig+0x1bc>)
 8003e56:	689b      	ldr	r3, [r3, #8]
 8003e58:	091b      	lsrs	r3, r3, #4
 8003e5a:	f003 030f 	and.w	r3, r3, #15
 8003e5e:	490a      	ldr	r1, [pc, #40]	@ (8003e88 <HAL_RCC_ClockConfig+0x1c0>)
 8003e60:	5ccb      	ldrb	r3, [r1, r3]
 8003e62:	fa22 f303 	lsr.w	r3, r2, r3
 8003e66:	4a09      	ldr	r2, [pc, #36]	@ (8003e8c <HAL_RCC_ClockConfig+0x1c4>)
 8003e68:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003e6a:	4b09      	ldr	r3, [pc, #36]	@ (8003e90 <HAL_RCC_ClockConfig+0x1c8>)
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	4618      	mov	r0, r3
 8003e70:	f7fe f816 	bl	8001ea0 <HAL_InitTick>

  return HAL_OK;
 8003e74:	2300      	movs	r3, #0
}
 8003e76:	4618      	mov	r0, r3
 8003e78:	3710      	adds	r7, #16
 8003e7a:	46bd      	mov	sp, r7
 8003e7c:	bd80      	pop	{r7, pc}
 8003e7e:	bf00      	nop
 8003e80:	40023c00 	.word	0x40023c00
 8003e84:	40023800 	.word	0x40023800
 8003e88:	0800add8 	.word	0x0800add8
 8003e8c:	20000004 	.word	0x20000004
 8003e90:	20000008 	.word	0x20000008

08003e94 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003e94:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003e98:	b090      	sub	sp, #64	@ 0x40
 8003e9a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003e9c:	2300      	movs	r3, #0
 8003e9e:	637b      	str	r3, [r7, #52]	@ 0x34
 8003ea0:	2300      	movs	r3, #0
 8003ea2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003ea4:	2300      	movs	r3, #0
 8003ea6:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8003ea8:	2300      	movs	r3, #0
 8003eaa:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003eac:	4b59      	ldr	r3, [pc, #356]	@ (8004014 <HAL_RCC_GetSysClockFreq+0x180>)
 8003eae:	689b      	ldr	r3, [r3, #8]
 8003eb0:	f003 030c 	and.w	r3, r3, #12
 8003eb4:	2b08      	cmp	r3, #8
 8003eb6:	d00d      	beq.n	8003ed4 <HAL_RCC_GetSysClockFreq+0x40>
 8003eb8:	2b08      	cmp	r3, #8
 8003eba:	f200 80a1 	bhi.w	8004000 <HAL_RCC_GetSysClockFreq+0x16c>
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d002      	beq.n	8003ec8 <HAL_RCC_GetSysClockFreq+0x34>
 8003ec2:	2b04      	cmp	r3, #4
 8003ec4:	d003      	beq.n	8003ece <HAL_RCC_GetSysClockFreq+0x3a>
 8003ec6:	e09b      	b.n	8004000 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003ec8:	4b53      	ldr	r3, [pc, #332]	@ (8004018 <HAL_RCC_GetSysClockFreq+0x184>)
 8003eca:	63bb      	str	r3, [r7, #56]	@ 0x38
       break;
 8003ecc:	e09b      	b.n	8004006 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003ece:	4b53      	ldr	r3, [pc, #332]	@ (800401c <HAL_RCC_GetSysClockFreq+0x188>)
 8003ed0:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003ed2:	e098      	b.n	8004006 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003ed4:	4b4f      	ldr	r3, [pc, #316]	@ (8004014 <HAL_RCC_GetSysClockFreq+0x180>)
 8003ed6:	685b      	ldr	r3, [r3, #4]
 8003ed8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003edc:	637b      	str	r3, [r7, #52]	@ 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003ede:	4b4d      	ldr	r3, [pc, #308]	@ (8004014 <HAL_RCC_GetSysClockFreq+0x180>)
 8003ee0:	685b      	ldr	r3, [r3, #4]
 8003ee2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d028      	beq.n	8003f3c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003eea:	4b4a      	ldr	r3, [pc, #296]	@ (8004014 <HAL_RCC_GetSysClockFreq+0x180>)
 8003eec:	685b      	ldr	r3, [r3, #4]
 8003eee:	099b      	lsrs	r3, r3, #6
 8003ef0:	2200      	movs	r2, #0
 8003ef2:	623b      	str	r3, [r7, #32]
 8003ef4:	627a      	str	r2, [r7, #36]	@ 0x24
 8003ef6:	6a3b      	ldr	r3, [r7, #32]
 8003ef8:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8003efc:	2100      	movs	r1, #0
 8003efe:	4b47      	ldr	r3, [pc, #284]	@ (800401c <HAL_RCC_GetSysClockFreq+0x188>)
 8003f00:	fb03 f201 	mul.w	r2, r3, r1
 8003f04:	2300      	movs	r3, #0
 8003f06:	fb00 f303 	mul.w	r3, r0, r3
 8003f0a:	4413      	add	r3, r2
 8003f0c:	4a43      	ldr	r2, [pc, #268]	@ (800401c <HAL_RCC_GetSysClockFreq+0x188>)
 8003f0e:	fba0 1202 	umull	r1, r2, r0, r2
 8003f12:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003f14:	460a      	mov	r2, r1
 8003f16:	62ba      	str	r2, [r7, #40]	@ 0x28
 8003f18:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003f1a:	4413      	add	r3, r2
 8003f1c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003f1e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003f20:	2200      	movs	r2, #0
 8003f22:	61bb      	str	r3, [r7, #24]
 8003f24:	61fa      	str	r2, [r7, #28]
 8003f26:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003f2a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8003f2e:	f7fc ff0b 	bl	8000d48 <__aeabi_uldivmod>
 8003f32:	4602      	mov	r2, r0
 8003f34:	460b      	mov	r3, r1
 8003f36:	4613      	mov	r3, r2
 8003f38:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003f3a:	e053      	b.n	8003fe4 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003f3c:	4b35      	ldr	r3, [pc, #212]	@ (8004014 <HAL_RCC_GetSysClockFreq+0x180>)
 8003f3e:	685b      	ldr	r3, [r3, #4]
 8003f40:	099b      	lsrs	r3, r3, #6
 8003f42:	2200      	movs	r2, #0
 8003f44:	613b      	str	r3, [r7, #16]
 8003f46:	617a      	str	r2, [r7, #20]
 8003f48:	693b      	ldr	r3, [r7, #16]
 8003f4a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8003f4e:	f04f 0b00 	mov.w	fp, #0
 8003f52:	4652      	mov	r2, sl
 8003f54:	465b      	mov	r3, fp
 8003f56:	f04f 0000 	mov.w	r0, #0
 8003f5a:	f04f 0100 	mov.w	r1, #0
 8003f5e:	0159      	lsls	r1, r3, #5
 8003f60:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003f64:	0150      	lsls	r0, r2, #5
 8003f66:	4602      	mov	r2, r0
 8003f68:	460b      	mov	r3, r1
 8003f6a:	ebb2 080a 	subs.w	r8, r2, sl
 8003f6e:	eb63 090b 	sbc.w	r9, r3, fp
 8003f72:	f04f 0200 	mov.w	r2, #0
 8003f76:	f04f 0300 	mov.w	r3, #0
 8003f7a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8003f7e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8003f82:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8003f86:	ebb2 0408 	subs.w	r4, r2, r8
 8003f8a:	eb63 0509 	sbc.w	r5, r3, r9
 8003f8e:	f04f 0200 	mov.w	r2, #0
 8003f92:	f04f 0300 	mov.w	r3, #0
 8003f96:	00eb      	lsls	r3, r5, #3
 8003f98:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003f9c:	00e2      	lsls	r2, r4, #3
 8003f9e:	4614      	mov	r4, r2
 8003fa0:	461d      	mov	r5, r3
 8003fa2:	eb14 030a 	adds.w	r3, r4, sl
 8003fa6:	603b      	str	r3, [r7, #0]
 8003fa8:	eb45 030b 	adc.w	r3, r5, fp
 8003fac:	607b      	str	r3, [r7, #4]
 8003fae:	f04f 0200 	mov.w	r2, #0
 8003fb2:	f04f 0300 	mov.w	r3, #0
 8003fb6:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003fba:	4629      	mov	r1, r5
 8003fbc:	028b      	lsls	r3, r1, #10
 8003fbe:	4621      	mov	r1, r4
 8003fc0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003fc4:	4621      	mov	r1, r4
 8003fc6:	028a      	lsls	r2, r1, #10
 8003fc8:	4610      	mov	r0, r2
 8003fca:	4619      	mov	r1, r3
 8003fcc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003fce:	2200      	movs	r2, #0
 8003fd0:	60bb      	str	r3, [r7, #8]
 8003fd2:	60fa      	str	r2, [r7, #12]
 8003fd4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003fd8:	f7fc feb6 	bl	8000d48 <__aeabi_uldivmod>
 8003fdc:	4602      	mov	r2, r0
 8003fde:	460b      	mov	r3, r1
 8003fe0:	4613      	mov	r3, r2
 8003fe2:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003fe4:	4b0b      	ldr	r3, [pc, #44]	@ (8004014 <HAL_RCC_GetSysClockFreq+0x180>)
 8003fe6:	685b      	ldr	r3, [r3, #4]
 8003fe8:	0c1b      	lsrs	r3, r3, #16
 8003fea:	f003 0303 	and.w	r3, r3, #3
 8003fee:	3301      	adds	r3, #1
 8003ff0:	005b      	lsls	r3, r3, #1
 8003ff2:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco/pllp;
 8003ff4:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8003ff6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ff8:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ffc:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003ffe:	e002      	b.n	8004006 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004000:	4b05      	ldr	r3, [pc, #20]	@ (8004018 <HAL_RCC_GetSysClockFreq+0x184>)
 8004002:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8004004:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004006:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8004008:	4618      	mov	r0, r3
 800400a:	3740      	adds	r7, #64	@ 0x40
 800400c:	46bd      	mov	sp, r7
 800400e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004012:	bf00      	nop
 8004014:	40023800 	.word	0x40023800
 8004018:	00f42400 	.word	0x00f42400
 800401c:	017d7840 	.word	0x017d7840

08004020 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004020:	b580      	push	{r7, lr}
 8004022:	b082      	sub	sp, #8
 8004024:	af00      	add	r7, sp, #0
 8004026:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	2b00      	cmp	r3, #0
 800402c:	d101      	bne.n	8004032 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800402e:	2301      	movs	r3, #1
 8004030:	e041      	b.n	80040b6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004038:	b2db      	uxtb	r3, r3
 800403a:	2b00      	cmp	r3, #0
 800403c:	d106      	bne.n	800404c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	2200      	movs	r2, #0
 8004042:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004046:	6878      	ldr	r0, [r7, #4]
 8004048:	f7fd fea8 	bl	8001d9c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	2202      	movs	r2, #2
 8004050:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681a      	ldr	r2, [r3, #0]
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	3304      	adds	r3, #4
 800405c:	4619      	mov	r1, r3
 800405e:	4610      	mov	r0, r2
 8004060:	f000 f95e 	bl	8004320 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	2201      	movs	r2, #1
 8004068:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	2201      	movs	r2, #1
 8004070:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	2201      	movs	r2, #1
 8004078:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	2201      	movs	r2, #1
 8004080:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	2201      	movs	r2, #1
 8004088:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	2201      	movs	r2, #1
 8004090:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	2201      	movs	r2, #1
 8004098:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	2201      	movs	r2, #1
 80040a0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	2201      	movs	r2, #1
 80040a8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	2201      	movs	r2, #1
 80040b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80040b4:	2300      	movs	r3, #0
}
 80040b6:	4618      	mov	r0, r3
 80040b8:	3708      	adds	r7, #8
 80040ba:	46bd      	mov	sp, r7
 80040bc:	bd80      	pop	{r7, pc}
	...

080040c0 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80040c0:	b480      	push	{r7}
 80040c2:	b085      	sub	sp, #20
 80040c4:	af00      	add	r7, sp, #0
 80040c6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80040ce:	b2db      	uxtb	r3, r3
 80040d0:	2b01      	cmp	r3, #1
 80040d2:	d001      	beq.n	80040d8 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80040d4:	2301      	movs	r3, #1
 80040d6:	e046      	b.n	8004166 <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	2202      	movs	r2, #2
 80040dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	4a23      	ldr	r2, [pc, #140]	@ (8004174 <HAL_TIM_Base_Start+0xb4>)
 80040e6:	4293      	cmp	r3, r2
 80040e8:	d022      	beq.n	8004130 <HAL_TIM_Base_Start+0x70>
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80040f2:	d01d      	beq.n	8004130 <HAL_TIM_Base_Start+0x70>
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	4a1f      	ldr	r2, [pc, #124]	@ (8004178 <HAL_TIM_Base_Start+0xb8>)
 80040fa:	4293      	cmp	r3, r2
 80040fc:	d018      	beq.n	8004130 <HAL_TIM_Base_Start+0x70>
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	4a1e      	ldr	r2, [pc, #120]	@ (800417c <HAL_TIM_Base_Start+0xbc>)
 8004104:	4293      	cmp	r3, r2
 8004106:	d013      	beq.n	8004130 <HAL_TIM_Base_Start+0x70>
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	4a1c      	ldr	r2, [pc, #112]	@ (8004180 <HAL_TIM_Base_Start+0xc0>)
 800410e:	4293      	cmp	r3, r2
 8004110:	d00e      	beq.n	8004130 <HAL_TIM_Base_Start+0x70>
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	4a1b      	ldr	r2, [pc, #108]	@ (8004184 <HAL_TIM_Base_Start+0xc4>)
 8004118:	4293      	cmp	r3, r2
 800411a:	d009      	beq.n	8004130 <HAL_TIM_Base_Start+0x70>
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	4a19      	ldr	r2, [pc, #100]	@ (8004188 <HAL_TIM_Base_Start+0xc8>)
 8004122:	4293      	cmp	r3, r2
 8004124:	d004      	beq.n	8004130 <HAL_TIM_Base_Start+0x70>
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	4a18      	ldr	r2, [pc, #96]	@ (800418c <HAL_TIM_Base_Start+0xcc>)
 800412c:	4293      	cmp	r3, r2
 800412e:	d111      	bne.n	8004154 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	689b      	ldr	r3, [r3, #8]
 8004136:	f003 0307 	and.w	r3, r3, #7
 800413a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	2b06      	cmp	r3, #6
 8004140:	d010      	beq.n	8004164 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	681a      	ldr	r2, [r3, #0]
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	f042 0201 	orr.w	r2, r2, #1
 8004150:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004152:	e007      	b.n	8004164 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	681a      	ldr	r2, [r3, #0]
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	f042 0201 	orr.w	r2, r2, #1
 8004162:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004164:	2300      	movs	r3, #0
}
 8004166:	4618      	mov	r0, r3
 8004168:	3714      	adds	r7, #20
 800416a:	46bd      	mov	sp, r7
 800416c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004170:	4770      	bx	lr
 8004172:	bf00      	nop
 8004174:	40010000 	.word	0x40010000
 8004178:	40000400 	.word	0x40000400
 800417c:	40000800 	.word	0x40000800
 8004180:	40000c00 	.word	0x40000c00
 8004184:	40010400 	.word	0x40010400
 8004188:	40014000 	.word	0x40014000
 800418c:	40001800 	.word	0x40001800

08004190 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004190:	b580      	push	{r7, lr}
 8004192:	b084      	sub	sp, #16
 8004194:	af00      	add	r7, sp, #0
 8004196:	6078      	str	r0, [r7, #4]
 8004198:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800419a:	2300      	movs	r3, #0
 800419c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80041a4:	2b01      	cmp	r3, #1
 80041a6:	d101      	bne.n	80041ac <HAL_TIM_ConfigClockSource+0x1c>
 80041a8:	2302      	movs	r3, #2
 80041aa:	e0b4      	b.n	8004316 <HAL_TIM_ConfigClockSource+0x186>
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	2201      	movs	r2, #1
 80041b0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	2202      	movs	r2, #2
 80041b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	689b      	ldr	r3, [r3, #8]
 80041c2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80041c4:	68bb      	ldr	r3, [r7, #8]
 80041c6:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80041ca:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80041cc:	68bb      	ldr	r3, [r7, #8]
 80041ce:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80041d2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	68ba      	ldr	r2, [r7, #8]
 80041da:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80041dc:	683b      	ldr	r3, [r7, #0]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80041e4:	d03e      	beq.n	8004264 <HAL_TIM_ConfigClockSource+0xd4>
 80041e6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80041ea:	f200 8087 	bhi.w	80042fc <HAL_TIM_ConfigClockSource+0x16c>
 80041ee:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80041f2:	f000 8086 	beq.w	8004302 <HAL_TIM_ConfigClockSource+0x172>
 80041f6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80041fa:	d87f      	bhi.n	80042fc <HAL_TIM_ConfigClockSource+0x16c>
 80041fc:	2b70      	cmp	r3, #112	@ 0x70
 80041fe:	d01a      	beq.n	8004236 <HAL_TIM_ConfigClockSource+0xa6>
 8004200:	2b70      	cmp	r3, #112	@ 0x70
 8004202:	d87b      	bhi.n	80042fc <HAL_TIM_ConfigClockSource+0x16c>
 8004204:	2b60      	cmp	r3, #96	@ 0x60
 8004206:	d050      	beq.n	80042aa <HAL_TIM_ConfigClockSource+0x11a>
 8004208:	2b60      	cmp	r3, #96	@ 0x60
 800420a:	d877      	bhi.n	80042fc <HAL_TIM_ConfigClockSource+0x16c>
 800420c:	2b50      	cmp	r3, #80	@ 0x50
 800420e:	d03c      	beq.n	800428a <HAL_TIM_ConfigClockSource+0xfa>
 8004210:	2b50      	cmp	r3, #80	@ 0x50
 8004212:	d873      	bhi.n	80042fc <HAL_TIM_ConfigClockSource+0x16c>
 8004214:	2b40      	cmp	r3, #64	@ 0x40
 8004216:	d058      	beq.n	80042ca <HAL_TIM_ConfigClockSource+0x13a>
 8004218:	2b40      	cmp	r3, #64	@ 0x40
 800421a:	d86f      	bhi.n	80042fc <HAL_TIM_ConfigClockSource+0x16c>
 800421c:	2b30      	cmp	r3, #48	@ 0x30
 800421e:	d064      	beq.n	80042ea <HAL_TIM_ConfigClockSource+0x15a>
 8004220:	2b30      	cmp	r3, #48	@ 0x30
 8004222:	d86b      	bhi.n	80042fc <HAL_TIM_ConfigClockSource+0x16c>
 8004224:	2b20      	cmp	r3, #32
 8004226:	d060      	beq.n	80042ea <HAL_TIM_ConfigClockSource+0x15a>
 8004228:	2b20      	cmp	r3, #32
 800422a:	d867      	bhi.n	80042fc <HAL_TIM_ConfigClockSource+0x16c>
 800422c:	2b00      	cmp	r3, #0
 800422e:	d05c      	beq.n	80042ea <HAL_TIM_ConfigClockSource+0x15a>
 8004230:	2b10      	cmp	r3, #16
 8004232:	d05a      	beq.n	80042ea <HAL_TIM_ConfigClockSource+0x15a>
 8004234:	e062      	b.n	80042fc <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	6818      	ldr	r0, [r3, #0]
 800423a:	683b      	ldr	r3, [r7, #0]
 800423c:	6899      	ldr	r1, [r3, #8]
 800423e:	683b      	ldr	r3, [r7, #0]
 8004240:	685a      	ldr	r2, [r3, #4]
 8004242:	683b      	ldr	r3, [r7, #0]
 8004244:	68db      	ldr	r3, [r3, #12]
 8004246:	f000 f985 	bl	8004554 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	689b      	ldr	r3, [r3, #8]
 8004250:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004252:	68bb      	ldr	r3, [r7, #8]
 8004254:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8004258:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	68ba      	ldr	r2, [r7, #8]
 8004260:	609a      	str	r2, [r3, #8]
      break;
 8004262:	e04f      	b.n	8004304 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	6818      	ldr	r0, [r3, #0]
 8004268:	683b      	ldr	r3, [r7, #0]
 800426a:	6899      	ldr	r1, [r3, #8]
 800426c:	683b      	ldr	r3, [r7, #0]
 800426e:	685a      	ldr	r2, [r3, #4]
 8004270:	683b      	ldr	r3, [r7, #0]
 8004272:	68db      	ldr	r3, [r3, #12]
 8004274:	f000 f96e 	bl	8004554 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	689a      	ldr	r2, [r3, #8]
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004286:	609a      	str	r2, [r3, #8]
      break;
 8004288:	e03c      	b.n	8004304 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	6818      	ldr	r0, [r3, #0]
 800428e:	683b      	ldr	r3, [r7, #0]
 8004290:	6859      	ldr	r1, [r3, #4]
 8004292:	683b      	ldr	r3, [r7, #0]
 8004294:	68db      	ldr	r3, [r3, #12]
 8004296:	461a      	mov	r2, r3
 8004298:	f000 f8e2 	bl	8004460 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	2150      	movs	r1, #80	@ 0x50
 80042a2:	4618      	mov	r0, r3
 80042a4:	f000 f93b 	bl	800451e <TIM_ITRx_SetConfig>
      break;
 80042a8:	e02c      	b.n	8004304 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	6818      	ldr	r0, [r3, #0]
 80042ae:	683b      	ldr	r3, [r7, #0]
 80042b0:	6859      	ldr	r1, [r3, #4]
 80042b2:	683b      	ldr	r3, [r7, #0]
 80042b4:	68db      	ldr	r3, [r3, #12]
 80042b6:	461a      	mov	r2, r3
 80042b8:	f000 f901 	bl	80044be <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	2160      	movs	r1, #96	@ 0x60
 80042c2:	4618      	mov	r0, r3
 80042c4:	f000 f92b 	bl	800451e <TIM_ITRx_SetConfig>
      break;
 80042c8:	e01c      	b.n	8004304 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	6818      	ldr	r0, [r3, #0]
 80042ce:	683b      	ldr	r3, [r7, #0]
 80042d0:	6859      	ldr	r1, [r3, #4]
 80042d2:	683b      	ldr	r3, [r7, #0]
 80042d4:	68db      	ldr	r3, [r3, #12]
 80042d6:	461a      	mov	r2, r3
 80042d8:	f000 f8c2 	bl	8004460 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	2140      	movs	r1, #64	@ 0x40
 80042e2:	4618      	mov	r0, r3
 80042e4:	f000 f91b 	bl	800451e <TIM_ITRx_SetConfig>
      break;
 80042e8:	e00c      	b.n	8004304 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	681a      	ldr	r2, [r3, #0]
 80042ee:	683b      	ldr	r3, [r7, #0]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	4619      	mov	r1, r3
 80042f4:	4610      	mov	r0, r2
 80042f6:	f000 f912 	bl	800451e <TIM_ITRx_SetConfig>
      break;
 80042fa:	e003      	b.n	8004304 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80042fc:	2301      	movs	r3, #1
 80042fe:	73fb      	strb	r3, [r7, #15]
      break;
 8004300:	e000      	b.n	8004304 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004302:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	2201      	movs	r2, #1
 8004308:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	2200      	movs	r2, #0
 8004310:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004314:	7bfb      	ldrb	r3, [r7, #15]
}
 8004316:	4618      	mov	r0, r3
 8004318:	3710      	adds	r7, #16
 800431a:	46bd      	mov	sp, r7
 800431c:	bd80      	pop	{r7, pc}
	...

08004320 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004320:	b480      	push	{r7}
 8004322:	b085      	sub	sp, #20
 8004324:	af00      	add	r7, sp, #0
 8004326:	6078      	str	r0, [r7, #4]
 8004328:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	4a40      	ldr	r2, [pc, #256]	@ (8004434 <TIM_Base_SetConfig+0x114>)
 8004334:	4293      	cmp	r3, r2
 8004336:	d013      	beq.n	8004360 <TIM_Base_SetConfig+0x40>
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800433e:	d00f      	beq.n	8004360 <TIM_Base_SetConfig+0x40>
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	4a3d      	ldr	r2, [pc, #244]	@ (8004438 <TIM_Base_SetConfig+0x118>)
 8004344:	4293      	cmp	r3, r2
 8004346:	d00b      	beq.n	8004360 <TIM_Base_SetConfig+0x40>
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	4a3c      	ldr	r2, [pc, #240]	@ (800443c <TIM_Base_SetConfig+0x11c>)
 800434c:	4293      	cmp	r3, r2
 800434e:	d007      	beq.n	8004360 <TIM_Base_SetConfig+0x40>
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	4a3b      	ldr	r2, [pc, #236]	@ (8004440 <TIM_Base_SetConfig+0x120>)
 8004354:	4293      	cmp	r3, r2
 8004356:	d003      	beq.n	8004360 <TIM_Base_SetConfig+0x40>
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	4a3a      	ldr	r2, [pc, #232]	@ (8004444 <TIM_Base_SetConfig+0x124>)
 800435c:	4293      	cmp	r3, r2
 800435e:	d108      	bne.n	8004372 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004366:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004368:	683b      	ldr	r3, [r7, #0]
 800436a:	685b      	ldr	r3, [r3, #4]
 800436c:	68fa      	ldr	r2, [r7, #12]
 800436e:	4313      	orrs	r3, r2
 8004370:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	4a2f      	ldr	r2, [pc, #188]	@ (8004434 <TIM_Base_SetConfig+0x114>)
 8004376:	4293      	cmp	r3, r2
 8004378:	d02b      	beq.n	80043d2 <TIM_Base_SetConfig+0xb2>
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004380:	d027      	beq.n	80043d2 <TIM_Base_SetConfig+0xb2>
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	4a2c      	ldr	r2, [pc, #176]	@ (8004438 <TIM_Base_SetConfig+0x118>)
 8004386:	4293      	cmp	r3, r2
 8004388:	d023      	beq.n	80043d2 <TIM_Base_SetConfig+0xb2>
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	4a2b      	ldr	r2, [pc, #172]	@ (800443c <TIM_Base_SetConfig+0x11c>)
 800438e:	4293      	cmp	r3, r2
 8004390:	d01f      	beq.n	80043d2 <TIM_Base_SetConfig+0xb2>
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	4a2a      	ldr	r2, [pc, #168]	@ (8004440 <TIM_Base_SetConfig+0x120>)
 8004396:	4293      	cmp	r3, r2
 8004398:	d01b      	beq.n	80043d2 <TIM_Base_SetConfig+0xb2>
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	4a29      	ldr	r2, [pc, #164]	@ (8004444 <TIM_Base_SetConfig+0x124>)
 800439e:	4293      	cmp	r3, r2
 80043a0:	d017      	beq.n	80043d2 <TIM_Base_SetConfig+0xb2>
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	4a28      	ldr	r2, [pc, #160]	@ (8004448 <TIM_Base_SetConfig+0x128>)
 80043a6:	4293      	cmp	r3, r2
 80043a8:	d013      	beq.n	80043d2 <TIM_Base_SetConfig+0xb2>
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	4a27      	ldr	r2, [pc, #156]	@ (800444c <TIM_Base_SetConfig+0x12c>)
 80043ae:	4293      	cmp	r3, r2
 80043b0:	d00f      	beq.n	80043d2 <TIM_Base_SetConfig+0xb2>
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	4a26      	ldr	r2, [pc, #152]	@ (8004450 <TIM_Base_SetConfig+0x130>)
 80043b6:	4293      	cmp	r3, r2
 80043b8:	d00b      	beq.n	80043d2 <TIM_Base_SetConfig+0xb2>
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	4a25      	ldr	r2, [pc, #148]	@ (8004454 <TIM_Base_SetConfig+0x134>)
 80043be:	4293      	cmp	r3, r2
 80043c0:	d007      	beq.n	80043d2 <TIM_Base_SetConfig+0xb2>
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	4a24      	ldr	r2, [pc, #144]	@ (8004458 <TIM_Base_SetConfig+0x138>)
 80043c6:	4293      	cmp	r3, r2
 80043c8:	d003      	beq.n	80043d2 <TIM_Base_SetConfig+0xb2>
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	4a23      	ldr	r2, [pc, #140]	@ (800445c <TIM_Base_SetConfig+0x13c>)
 80043ce:	4293      	cmp	r3, r2
 80043d0:	d108      	bne.n	80043e4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80043d8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80043da:	683b      	ldr	r3, [r7, #0]
 80043dc:	68db      	ldr	r3, [r3, #12]
 80043de:	68fa      	ldr	r2, [r7, #12]
 80043e0:	4313      	orrs	r3, r2
 80043e2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80043ea:	683b      	ldr	r3, [r7, #0]
 80043ec:	695b      	ldr	r3, [r3, #20]
 80043ee:	4313      	orrs	r3, r2
 80043f0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	68fa      	ldr	r2, [r7, #12]
 80043f6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80043f8:	683b      	ldr	r3, [r7, #0]
 80043fa:	689a      	ldr	r2, [r3, #8]
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004400:	683b      	ldr	r3, [r7, #0]
 8004402:	681a      	ldr	r2, [r3, #0]
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	4a0a      	ldr	r2, [pc, #40]	@ (8004434 <TIM_Base_SetConfig+0x114>)
 800440c:	4293      	cmp	r3, r2
 800440e:	d003      	beq.n	8004418 <TIM_Base_SetConfig+0xf8>
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	4a0c      	ldr	r2, [pc, #48]	@ (8004444 <TIM_Base_SetConfig+0x124>)
 8004414:	4293      	cmp	r3, r2
 8004416:	d103      	bne.n	8004420 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004418:	683b      	ldr	r3, [r7, #0]
 800441a:	691a      	ldr	r2, [r3, #16]
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	2201      	movs	r2, #1
 8004424:	615a      	str	r2, [r3, #20]
}
 8004426:	bf00      	nop
 8004428:	3714      	adds	r7, #20
 800442a:	46bd      	mov	sp, r7
 800442c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004430:	4770      	bx	lr
 8004432:	bf00      	nop
 8004434:	40010000 	.word	0x40010000
 8004438:	40000400 	.word	0x40000400
 800443c:	40000800 	.word	0x40000800
 8004440:	40000c00 	.word	0x40000c00
 8004444:	40010400 	.word	0x40010400
 8004448:	40014000 	.word	0x40014000
 800444c:	40014400 	.word	0x40014400
 8004450:	40014800 	.word	0x40014800
 8004454:	40001800 	.word	0x40001800
 8004458:	40001c00 	.word	0x40001c00
 800445c:	40002000 	.word	0x40002000

08004460 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004460:	b480      	push	{r7}
 8004462:	b087      	sub	sp, #28
 8004464:	af00      	add	r7, sp, #0
 8004466:	60f8      	str	r0, [r7, #12]
 8004468:	60b9      	str	r1, [r7, #8]
 800446a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	6a1b      	ldr	r3, [r3, #32]
 8004470:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	6a1b      	ldr	r3, [r3, #32]
 8004476:	f023 0201 	bic.w	r2, r3, #1
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	699b      	ldr	r3, [r3, #24]
 8004482:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004484:	693b      	ldr	r3, [r7, #16]
 8004486:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800448a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	011b      	lsls	r3, r3, #4
 8004490:	693a      	ldr	r2, [r7, #16]
 8004492:	4313      	orrs	r3, r2
 8004494:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004496:	697b      	ldr	r3, [r7, #20]
 8004498:	f023 030a 	bic.w	r3, r3, #10
 800449c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800449e:	697a      	ldr	r2, [r7, #20]
 80044a0:	68bb      	ldr	r3, [r7, #8]
 80044a2:	4313      	orrs	r3, r2
 80044a4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	693a      	ldr	r2, [r7, #16]
 80044aa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	697a      	ldr	r2, [r7, #20]
 80044b0:	621a      	str	r2, [r3, #32]
}
 80044b2:	bf00      	nop
 80044b4:	371c      	adds	r7, #28
 80044b6:	46bd      	mov	sp, r7
 80044b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044bc:	4770      	bx	lr

080044be <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80044be:	b480      	push	{r7}
 80044c0:	b087      	sub	sp, #28
 80044c2:	af00      	add	r7, sp, #0
 80044c4:	60f8      	str	r0, [r7, #12]
 80044c6:	60b9      	str	r1, [r7, #8]
 80044c8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	6a1b      	ldr	r3, [r3, #32]
 80044ce:	f023 0210 	bic.w	r2, r3, #16
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	699b      	ldr	r3, [r3, #24]
 80044da:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	6a1b      	ldr	r3, [r3, #32]
 80044e0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80044e2:	697b      	ldr	r3, [r7, #20]
 80044e4:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80044e8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	031b      	lsls	r3, r3, #12
 80044ee:	697a      	ldr	r2, [r7, #20]
 80044f0:	4313      	orrs	r3, r2
 80044f2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80044f4:	693b      	ldr	r3, [r7, #16]
 80044f6:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80044fa:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80044fc:	68bb      	ldr	r3, [r7, #8]
 80044fe:	011b      	lsls	r3, r3, #4
 8004500:	693a      	ldr	r2, [r7, #16]
 8004502:	4313      	orrs	r3, r2
 8004504:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	697a      	ldr	r2, [r7, #20]
 800450a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	693a      	ldr	r2, [r7, #16]
 8004510:	621a      	str	r2, [r3, #32]
}
 8004512:	bf00      	nop
 8004514:	371c      	adds	r7, #28
 8004516:	46bd      	mov	sp, r7
 8004518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800451c:	4770      	bx	lr

0800451e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800451e:	b480      	push	{r7}
 8004520:	b085      	sub	sp, #20
 8004522:	af00      	add	r7, sp, #0
 8004524:	6078      	str	r0, [r7, #4]
 8004526:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	689b      	ldr	r3, [r3, #8]
 800452c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004534:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004536:	683a      	ldr	r2, [r7, #0]
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	4313      	orrs	r3, r2
 800453c:	f043 0307 	orr.w	r3, r3, #7
 8004540:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	68fa      	ldr	r2, [r7, #12]
 8004546:	609a      	str	r2, [r3, #8]
}
 8004548:	bf00      	nop
 800454a:	3714      	adds	r7, #20
 800454c:	46bd      	mov	sp, r7
 800454e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004552:	4770      	bx	lr

08004554 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004554:	b480      	push	{r7}
 8004556:	b087      	sub	sp, #28
 8004558:	af00      	add	r7, sp, #0
 800455a:	60f8      	str	r0, [r7, #12]
 800455c:	60b9      	str	r1, [r7, #8]
 800455e:	607a      	str	r2, [r7, #4]
 8004560:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	689b      	ldr	r3, [r3, #8]
 8004566:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004568:	697b      	ldr	r3, [r7, #20]
 800456a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800456e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004570:	683b      	ldr	r3, [r7, #0]
 8004572:	021a      	lsls	r2, r3, #8
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	431a      	orrs	r2, r3
 8004578:	68bb      	ldr	r3, [r7, #8]
 800457a:	4313      	orrs	r3, r2
 800457c:	697a      	ldr	r2, [r7, #20]
 800457e:	4313      	orrs	r3, r2
 8004580:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	697a      	ldr	r2, [r7, #20]
 8004586:	609a      	str	r2, [r3, #8]
}
 8004588:	bf00      	nop
 800458a:	371c      	adds	r7, #28
 800458c:	46bd      	mov	sp, r7
 800458e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004592:	4770      	bx	lr

08004594 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004594:	b480      	push	{r7}
 8004596:	b085      	sub	sp, #20
 8004598:	af00      	add	r7, sp, #0
 800459a:	6078      	str	r0, [r7, #4]
 800459c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80045a4:	2b01      	cmp	r3, #1
 80045a6:	d101      	bne.n	80045ac <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80045a8:	2302      	movs	r3, #2
 80045aa:	e05a      	b.n	8004662 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	2201      	movs	r2, #1
 80045b0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	2202      	movs	r2, #2
 80045b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	685b      	ldr	r3, [r3, #4]
 80045c2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	689b      	ldr	r3, [r3, #8]
 80045ca:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80045d2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80045d4:	683b      	ldr	r3, [r7, #0]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	68fa      	ldr	r2, [r7, #12]
 80045da:	4313      	orrs	r3, r2
 80045dc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	68fa      	ldr	r2, [r7, #12]
 80045e4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	4a21      	ldr	r2, [pc, #132]	@ (8004670 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80045ec:	4293      	cmp	r3, r2
 80045ee:	d022      	beq.n	8004636 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80045f8:	d01d      	beq.n	8004636 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	4a1d      	ldr	r2, [pc, #116]	@ (8004674 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8004600:	4293      	cmp	r3, r2
 8004602:	d018      	beq.n	8004636 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	4a1b      	ldr	r2, [pc, #108]	@ (8004678 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800460a:	4293      	cmp	r3, r2
 800460c:	d013      	beq.n	8004636 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	4a1a      	ldr	r2, [pc, #104]	@ (800467c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8004614:	4293      	cmp	r3, r2
 8004616:	d00e      	beq.n	8004636 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	4a18      	ldr	r2, [pc, #96]	@ (8004680 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800461e:	4293      	cmp	r3, r2
 8004620:	d009      	beq.n	8004636 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	4a17      	ldr	r2, [pc, #92]	@ (8004684 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004628:	4293      	cmp	r3, r2
 800462a:	d004      	beq.n	8004636 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	4a15      	ldr	r2, [pc, #84]	@ (8004688 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8004632:	4293      	cmp	r3, r2
 8004634:	d10c      	bne.n	8004650 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004636:	68bb      	ldr	r3, [r7, #8]
 8004638:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800463c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800463e:	683b      	ldr	r3, [r7, #0]
 8004640:	685b      	ldr	r3, [r3, #4]
 8004642:	68ba      	ldr	r2, [r7, #8]
 8004644:	4313      	orrs	r3, r2
 8004646:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	68ba      	ldr	r2, [r7, #8]
 800464e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	2201      	movs	r2, #1
 8004654:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	2200      	movs	r2, #0
 800465c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004660:	2300      	movs	r3, #0
}
 8004662:	4618      	mov	r0, r3
 8004664:	3714      	adds	r7, #20
 8004666:	46bd      	mov	sp, r7
 8004668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800466c:	4770      	bx	lr
 800466e:	bf00      	nop
 8004670:	40010000 	.word	0x40010000
 8004674:	40000400 	.word	0x40000400
 8004678:	40000800 	.word	0x40000800
 800467c:	40000c00 	.word	0x40000c00
 8004680:	40010400 	.word	0x40010400
 8004684:	40014000 	.word	0x40014000
 8004688:	40001800 	.word	0x40001800

0800468c <arm_max_f32>:
 800468c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004690:	1e4f      	subs	r7, r1, #1
 8004692:	ea5f 0897 	movs.w	r8, r7, lsr #2
 8004696:	f100 0e04 	add.w	lr, r0, #4
 800469a:	edd0 7a00 	vldr	s15, [r0]
 800469e:	d058      	beq.n	8004752 <arm_max_f32+0xc6>
 80046a0:	3014      	adds	r0, #20
 80046a2:	46c4      	mov	ip, r8
 80046a4:	2604      	movs	r6, #4
 80046a6:	2400      	movs	r4, #0
 80046a8:	ed10 6a04 	vldr	s12, [r0, #-16]
 80046ac:	ed50 6a03 	vldr	s13, [r0, #-12]
 80046b0:	ed10 7a02 	vldr	s14, [r0, #-8]
 80046b4:	ed50 5a01 	vldr	s11, [r0, #-4]
 80046b8:	eeb4 6ae7 	vcmpe.f32	s12, s15
 80046bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80046c0:	bfc8      	it	gt
 80046c2:	eef0 7a46 	vmovgt.f32	s15, s12
 80046c6:	f1a6 0503 	sub.w	r5, r6, #3
 80046ca:	eef4 7ae6 	vcmpe.f32	s15, s13
 80046ce:	bfc8      	it	gt
 80046d0:	462c      	movgt	r4, r5
 80046d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80046d6:	bf48      	it	mi
 80046d8:	eef0 7a66 	vmovmi.f32	s15, s13
 80046dc:	f1a6 0502 	sub.w	r5, r6, #2
 80046e0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80046e4:	bf48      	it	mi
 80046e6:	462c      	movmi	r4, r5
 80046e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80046ec:	bf48      	it	mi
 80046ee:	eef0 7a47 	vmovmi.f32	s15, s14
 80046f2:	f106 35ff 	add.w	r5, r6, #4294967295
 80046f6:	eef4 7ae5 	vcmpe.f32	s15, s11
 80046fa:	bf48      	it	mi
 80046fc:	462c      	movmi	r4, r5
 80046fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004702:	bf48      	it	mi
 8004704:	4634      	movmi	r4, r6
 8004706:	bf48      	it	mi
 8004708:	eef0 7a65 	vmovmi.f32	s15, s11
 800470c:	f1bc 0c01 	subs.w	ip, ip, #1
 8004710:	f100 0010 	add.w	r0, r0, #16
 8004714:	f106 0604 	add.w	r6, r6, #4
 8004718:	d1c6      	bne.n	80046a8 <arm_max_f32+0x1c>
 800471a:	eb0e 1e08 	add.w	lr, lr, r8, lsl #4
 800471e:	f017 0003 	ands.w	r0, r7, #3
 8004722:	d018      	beq.n	8004756 <arm_max_f32+0xca>
 8004724:	1a08      	subs	r0, r1, r0
 8004726:	ecbe 7a01 	vldmia	lr!, {s14}
 800472a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800472e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004732:	bfc8      	it	gt
 8004734:	4604      	movgt	r4, r0
 8004736:	f100 0001 	add.w	r0, r0, #1
 800473a:	bfd8      	it	le
 800473c:	eeb0 7a67 	vmovle.f32	s14, s15
 8004740:	4281      	cmp	r1, r0
 8004742:	eef0 7a47 	vmov.f32	s15, s14
 8004746:	d1ee      	bne.n	8004726 <arm_max_f32+0x9a>
 8004748:	ed82 7a00 	vstr	s14, [r2]
 800474c:	601c      	str	r4, [r3, #0]
 800474e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004752:	4644      	mov	r4, r8
 8004754:	e7e3      	b.n	800471e <arm_max_f32+0x92>
 8004756:	eeb0 7a67 	vmov.f32	s14, s15
 800475a:	e7f5      	b.n	8004748 <arm_max_f32+0xbc>

0800475c <arm_cfft_radix8by2_f32>:
 800475c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004760:	ed2d 8b08 	vpush	{d8-d11}
 8004764:	4607      	mov	r7, r0
 8004766:	4608      	mov	r0, r1
 8004768:	f8b7 e000 	ldrh.w	lr, [r7]
 800476c:	687a      	ldr	r2, [r7, #4]
 800476e:	ea4f 015e 	mov.w	r1, lr, lsr #1
 8004772:	eb00 088e 	add.w	r8, r0, lr, lsl #2
 8004776:	ea5f 0ede 	movs.w	lr, lr, lsr #3
 800477a:	f000 80b0 	beq.w	80048de <arm_cfft_radix8by2_f32+0x182>
 800477e:	008b      	lsls	r3, r1, #2
 8004780:	3310      	adds	r3, #16
 8004782:	18c6      	adds	r6, r0, r3
 8004784:	3210      	adds	r2, #16
 8004786:	4443      	add	r3, r8
 8004788:	f100 0510 	add.w	r5, r0, #16
 800478c:	f108 0410 	add.w	r4, r8, #16
 8004790:	ed54 1a04 	vldr	s3, [r4, #-16]
 8004794:	ed54 6a03 	vldr	s13, [r4, #-12]
 8004798:	ed13 4a04 	vldr	s8, [r3, #-16]
 800479c:	ed53 3a03 	vldr	s7, [r3, #-12]
 80047a0:	ed53 5a02 	vldr	s11, [r3, #-8]
 80047a4:	ed13 5a01 	vldr	s10, [r3, #-4]
 80047a8:	ed14 0a02 	vldr	s0, [r4, #-8]
 80047ac:	ed54 7a01 	vldr	s15, [r4, #-4]
 80047b0:	ed16 2a04 	vldr	s4, [r6, #-16]
 80047b4:	ed56 2a03 	vldr	s5, [r6, #-12]
 80047b8:	ed15 6a03 	vldr	s12, [r5, #-12]
 80047bc:	ed15 7a01 	vldr	s14, [r5, #-4]
 80047c0:	ed15 3a04 	vldr	s6, [r5, #-16]
 80047c4:	ed56 0a02 	vldr	s1, [r6, #-8]
 80047c8:	ed16 1a01 	vldr	s2, [r6, #-4]
 80047cc:	ed55 4a02 	vldr	s9, [r5, #-8]
 80047d0:	ee73 ba21 	vadd.f32	s23, s6, s3
 80047d4:	ee36 ba26 	vadd.f32	s22, s12, s13
 80047d8:	ee37 aa27 	vadd.f32	s20, s14, s15
 80047dc:	ee72 9a04 	vadd.f32	s19, s4, s8
 80047e0:	ee32 9aa3 	vadd.f32	s18, s5, s7
 80047e4:	ee31 8a05 	vadd.f32	s16, s2, s10
 80047e8:	ee74 aa80 	vadd.f32	s21, s9, s0
 80047ec:	ee70 8aa5 	vadd.f32	s17, s1, s11
 80047f0:	ed45 ba04 	vstr	s23, [r5, #-16]
 80047f4:	ed05 ba03 	vstr	s22, [r5, #-12]
 80047f8:	ed45 aa02 	vstr	s21, [r5, #-8]
 80047fc:	ed05 aa01 	vstr	s20, [r5, #-4]
 8004800:	ed06 8a01 	vstr	s16, [r6, #-4]
 8004804:	ed46 9a04 	vstr	s19, [r6, #-16]
 8004808:	ed06 9a03 	vstr	s18, [r6, #-12]
 800480c:	ed46 8a02 	vstr	s17, [r6, #-8]
 8004810:	ee76 6a66 	vsub.f32	s13, s12, s13
 8004814:	ee73 3ae2 	vsub.f32	s7, s7, s5
 8004818:	ed12 6a03 	vldr	s12, [r2, #-12]
 800481c:	ed52 2a04 	vldr	s5, [r2, #-16]
 8004820:	ee33 3a61 	vsub.f32	s6, s6, s3
 8004824:	ee34 4a42 	vsub.f32	s8, s8, s4
 8004828:	ee26 8a86 	vmul.f32	s16, s13, s12
 800482c:	ee24 2a06 	vmul.f32	s4, s8, s12
 8004830:	ee63 1a22 	vmul.f32	s3, s6, s5
 8004834:	ee24 4a22 	vmul.f32	s8, s8, s5
 8004838:	ee23 3a06 	vmul.f32	s6, s6, s12
 800483c:	ee66 6aa2 	vmul.f32	s13, s13, s5
 8004840:	ee23 6a86 	vmul.f32	s12, s7, s12
 8004844:	ee63 3aa2 	vmul.f32	s7, s7, s5
 8004848:	ee36 6a04 	vadd.f32	s12, s12, s8
 800484c:	ee76 6ac3 	vsub.f32	s13, s13, s6
 8004850:	ee72 3a63 	vsub.f32	s7, s4, s7
 8004854:	ee71 2a88 	vadd.f32	s5, s3, s16
 8004858:	ed44 6a03 	vstr	s13, [r4, #-12]
 800485c:	ed44 2a04 	vstr	s5, [r4, #-16]
 8004860:	ed43 3a04 	vstr	s7, [r3, #-16]
 8004864:	ed03 6a03 	vstr	s12, [r3, #-12]
 8004868:	ee77 7a67 	vsub.f32	s15, s14, s15
 800486c:	ee75 6ae0 	vsub.f32	s13, s11, s1
 8004870:	ed12 7a01 	vldr	s14, [r2, #-4]
 8004874:	ed52 5a02 	vldr	s11, [r2, #-8]
 8004878:	ee35 6a41 	vsub.f32	s12, s10, s2
 800487c:	ee74 4ac0 	vsub.f32	s9, s9, s0
 8004880:	ee67 3a87 	vmul.f32	s7, s15, s14
 8004884:	ee26 5a87 	vmul.f32	s10, s13, s14
 8004888:	ee24 4aa5 	vmul.f32	s8, s9, s11
 800488c:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8004890:	ee64 4a87 	vmul.f32	s9, s9, s14
 8004894:	ee66 6aa5 	vmul.f32	s13, s13, s11
 8004898:	ee26 7a07 	vmul.f32	s14, s12, s14
 800489c:	ee26 6a25 	vmul.f32	s12, s12, s11
 80048a0:	ee77 7ae4 	vsub.f32	s15, s15, s9
 80048a4:	ee74 5a23 	vadd.f32	s11, s8, s7
 80048a8:	ee35 6a46 	vsub.f32	s12, s10, s12
 80048ac:	ee37 7a26 	vadd.f32	s14, s14, s13
 80048b0:	f1be 0e01 	subs.w	lr, lr, #1
 80048b4:	ed44 5a02 	vstr	s11, [r4, #-8]
 80048b8:	f105 0510 	add.w	r5, r5, #16
 80048bc:	ed44 7a01 	vstr	s15, [r4, #-4]
 80048c0:	f106 0610 	add.w	r6, r6, #16
 80048c4:	ed03 6a02 	vstr	s12, [r3, #-8]
 80048c8:	ed03 7a01 	vstr	s14, [r3, #-4]
 80048cc:	f102 0210 	add.w	r2, r2, #16
 80048d0:	f104 0410 	add.w	r4, r4, #16
 80048d4:	f103 0310 	add.w	r3, r3, #16
 80048d8:	f47f af5a 	bne.w	8004790 <arm_cfft_radix8by2_f32+0x34>
 80048dc:	687a      	ldr	r2, [r7, #4]
 80048de:	b28c      	uxth	r4, r1
 80048e0:	4621      	mov	r1, r4
 80048e2:	2302      	movs	r3, #2
 80048e4:	f000 fbca 	bl	800507c <arm_radix8_butterfly_f32>
 80048e8:	ecbd 8b08 	vpop	{d8-d11}
 80048ec:	4621      	mov	r1, r4
 80048ee:	687a      	ldr	r2, [r7, #4]
 80048f0:	4640      	mov	r0, r8
 80048f2:	2302      	movs	r3, #2
 80048f4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80048f8:	f000 bbc0 	b.w	800507c <arm_radix8_butterfly_f32>

080048fc <arm_cfft_radix8by4_f32>:
 80048fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004900:	ed2d 8b0a 	vpush	{d8-d12}
 8004904:	8802      	ldrh	r2, [r0, #0]
 8004906:	ed91 6a00 	vldr	s12, [r1]
 800490a:	b08f      	sub	sp, #60	@ 0x3c
 800490c:	460f      	mov	r7, r1
 800490e:	0852      	lsrs	r2, r2, #1
 8004910:	6841      	ldr	r1, [r0, #4]
 8004912:	900c      	str	r0, [sp, #48]	@ 0x30
 8004914:	0093      	lsls	r3, r2, #2
 8004916:	4638      	mov	r0, r7
 8004918:	4418      	add	r0, r3
 800491a:	4606      	mov	r6, r0
 800491c:	9009      	str	r0, [sp, #36]	@ 0x24
 800491e:	4418      	add	r0, r3
 8004920:	edd0 6a00 	vldr	s13, [r0]
 8004924:	ed96 4a00 	vldr	s8, [r6]
 8004928:	edd6 2a01 	vldr	s5, [r6, #4]
 800492c:	edd0 7a01 	vldr	s15, [r0, #4]
 8004930:	900a      	str	r0, [sp, #40]	@ 0x28
 8004932:	ee76 5a26 	vadd.f32	s11, s12, s13
 8004936:	4604      	mov	r4, r0
 8004938:	4625      	mov	r5, r4
 800493a:	441c      	add	r4, r3
 800493c:	edd4 4a00 	vldr	s9, [r4]
 8004940:	ed97 7a01 	vldr	s14, [r7, #4]
 8004944:	ed94 3a01 	vldr	s6, [r4, #4]
 8004948:	9401      	str	r4, [sp, #4]
 800494a:	ee35 5a84 	vadd.f32	s10, s11, s8
 800494e:	4630      	mov	r0, r6
 8004950:	ee35 5a24 	vadd.f32	s10, s10, s9
 8004954:	463e      	mov	r6, r7
 8004956:	ee15 ea10 	vmov	lr, s10
 800495a:	ee76 6a66 	vsub.f32	s13, s12, s13
 800495e:	f846 eb08 	str.w	lr, [r6], #8
 8004962:	ee37 6a27 	vadd.f32	s12, s14, s15
 8004966:	ed90 5a01 	vldr	s10, [r0, #4]
 800496a:	9605      	str	r6, [sp, #20]
 800496c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004970:	9e01      	ldr	r6, [sp, #4]
 8004972:	9707      	str	r7, [sp, #28]
 8004974:	ee76 3aa2 	vadd.f32	s7, s13, s5
 8004978:	ed96 2a01 	vldr	s4, [r6, #4]
 800497c:	ee36 7a05 	vadd.f32	s14, s12, s10
 8004980:	ee75 5ac4 	vsub.f32	s11, s11, s8
 8004984:	ee37 5ac4 	vsub.f32	s10, s15, s8
 8004988:	ee77 7a84 	vadd.f32	s15, s15, s8
 800498c:	ee33 4ac3 	vsub.f32	s8, s7, s6
 8004990:	4604      	mov	r4, r0
 8004992:	46a3      	mov	fp, r4
 8004994:	ee37 7a02 	vadd.f32	s14, s14, s4
 8004998:	ee35 5a24 	vadd.f32	s10, s10, s9
 800499c:	ee14 8a10 	vmov	r8, s8
 80049a0:	46a4      	mov	ip, r4
 80049a2:	ee75 5ae4 	vsub.f32	s11, s11, s9
 80049a6:	ed87 7a01 	vstr	s14, [r7, #4]
 80049aa:	f84b 8b08 	str.w	r8, [fp], #8
 80049ae:	f1ac 0704 	sub.w	r7, ip, #4
 80049b2:	ed8c 5a01 	vstr	s10, [ip, #4]
 80049b6:	f101 0c08 	add.w	ip, r1, #8
 80049ba:	462c      	mov	r4, r5
 80049bc:	f8cd c010 	str.w	ip, [sp, #16]
 80049c0:	ee15 ca90 	vmov	ip, s11
 80049c4:	ee36 6a62 	vsub.f32	s12, s12, s5
 80049c8:	f844 cb08 	str.w	ip, [r4], #8
 80049cc:	ee76 6ae2 	vsub.f32	s13, s13, s5
 80049d0:	ee36 6a43 	vsub.f32	s12, s12, s6
 80049d4:	9406      	str	r4, [sp, #24]
 80049d6:	ee76 6a83 	vadd.f32	s13, s13, s6
 80049da:	f101 0410 	add.w	r4, r1, #16
 80049de:	0852      	lsrs	r2, r2, #1
 80049e0:	9402      	str	r4, [sp, #8]
 80049e2:	ed85 6a01 	vstr	s12, [r5, #4]
 80049e6:	462c      	mov	r4, r5
 80049e8:	f101 0518 	add.w	r5, r1, #24
 80049ec:	920b      	str	r2, [sp, #44]	@ 0x2c
 80049ee:	46b2      	mov	sl, r6
 80049f0:	9503      	str	r5, [sp, #12]
 80049f2:	ee77 7ae4 	vsub.f32	s15, s15, s9
 80049f6:	3a02      	subs	r2, #2
 80049f8:	ee16 5a90 	vmov	r5, s13
 80049fc:	46b6      	mov	lr, r6
 80049fe:	4630      	mov	r0, r6
 8004a00:	0852      	lsrs	r2, r2, #1
 8004a02:	f84a 5b08 	str.w	r5, [sl], #8
 8004a06:	f1a0 0604 	sub.w	r6, r0, #4
 8004a0a:	edce 7a01 	vstr	s15, [lr, #4]
 8004a0e:	9208      	str	r2, [sp, #32]
 8004a10:	f000 8130 	beq.w	8004c74 <arm_cfft_radix8by4_f32+0x378>
 8004a14:	4691      	mov	r9, r2
 8004a16:	9a07      	ldr	r2, [sp, #28]
 8004a18:	f8dd 8008 	ldr.w	r8, [sp, #8]
 8004a1c:	f8cd a034 	str.w	sl, [sp, #52]	@ 0x34
 8004a20:	3b08      	subs	r3, #8
 8004a22:	f102 0510 	add.w	r5, r2, #16
 8004a26:	f101 0c20 	add.w	ip, r1, #32
 8004a2a:	f1a4 020c 	sub.w	r2, r4, #12
 8004a2e:	f101 0e30 	add.w	lr, r1, #48	@ 0x30
 8004a32:	4433      	add	r3, r6
 8004a34:	3410      	adds	r4, #16
 8004a36:	4650      	mov	r0, sl
 8004a38:	4659      	mov	r1, fp
 8004a3a:	ed55 3a02 	vldr	s7, [r5, #-8]
 8004a3e:	ed14 5a02 	vldr	s10, [r4, #-8]
 8004a42:	ed91 7a00 	vldr	s14, [r1]
 8004a46:	edd0 7a00 	vldr	s15, [r0]
 8004a4a:	ed54 5a01 	vldr	s11, [r4, #-4]
 8004a4e:	ed15 4a01 	vldr	s8, [r5, #-4]
 8004a52:	edd0 6a01 	vldr	s13, [r0, #4]
 8004a56:	ed91 6a01 	vldr	s12, [r1, #4]
 8004a5a:	ee33 8a85 	vadd.f32	s16, s7, s10
 8004a5e:	ee34 0a25 	vadd.f32	s0, s8, s11
 8004a62:	ee78 4a07 	vadd.f32	s9, s16, s14
 8004a66:	ee74 5a65 	vsub.f32	s11, s8, s11
 8004a6a:	ee74 4aa7 	vadd.f32	s9, s9, s15
 8004a6e:	ee33 5ac5 	vsub.f32	s10, s7, s10
 8004a72:	ed45 4a02 	vstr	s9, [r5, #-8]
 8004a76:	edd1 4a01 	vldr	s9, [r1, #4]
 8004a7a:	ed90 4a01 	vldr	s8, [r0, #4]
 8004a7e:	ee70 4a24 	vadd.f32	s9, s0, s9
 8004a82:	ee75 aa06 	vadd.f32	s21, s10, s12
 8004a86:	ee74 4a84 	vadd.f32	s9, s9, s8
 8004a8a:	ee35 aac7 	vsub.f32	s20, s11, s14
 8004a8e:	ed45 4a01 	vstr	s9, [r5, #-4]
 8004a92:	edd6 1a00 	vldr	s3, [r6]
 8004a96:	edd7 0a00 	vldr	s1, [r7]
 8004a9a:	ed92 4a02 	vldr	s8, [r2, #8]
 8004a9e:	edd3 3a02 	vldr	s7, [r3, #8]
 8004aa2:	ed93 2a01 	vldr	s4, [r3, #4]
 8004aa6:	ed16 1a01 	vldr	s2, [r6, #-4]
 8004aaa:	edd2 2a01 	vldr	s5, [r2, #4]
 8004aae:	ed57 9a01 	vldr	s19, [r7, #-4]
 8004ab2:	ee70 4aa1 	vadd.f32	s9, s1, s3
 8004ab6:	ee39 3a81 	vadd.f32	s6, s19, s2
 8004aba:	ee74 8a84 	vadd.f32	s17, s9, s8
 8004abe:	ee70 1ae1 	vsub.f32	s3, s1, s3
 8004ac2:	ee78 8aa3 	vadd.f32	s17, s17, s7
 8004ac6:	ee7a aae6 	vsub.f32	s21, s21, s13
 8004aca:	ee18 aa90 	vmov	sl, s17
 8004ace:	f847 a908 	str.w	sl, [r7], #-8
 8004ad2:	edd2 8a01 	vldr	s17, [r2, #4]
 8004ad6:	ed93 9a01 	vldr	s18, [r3, #4]
 8004ada:	ee73 8a28 	vadd.f32	s17, s6, s17
 8004ade:	ee3a aa27 	vadd.f32	s20, s20, s15
 8004ae2:	ee78 8a89 	vadd.f32	s17, s17, s18
 8004ae6:	ee74 0a63 	vsub.f32	s1, s8, s7
 8004aea:	edc7 8a01 	vstr	s17, [r7, #4]
 8004aee:	ed18 ba02 	vldr	s22, [r8, #-8]
 8004af2:	ed58 8a01 	vldr	s17, [r8, #-4]
 8004af6:	ee39 1ac1 	vsub.f32	s2, s19, s2
 8004afa:	ee6a ba28 	vmul.f32	s23, s20, s17
 8004afe:	ee2a ca8b 	vmul.f32	s24, s21, s22
 8004b02:	ee71 9ae2 	vsub.f32	s19, s3, s5
 8004b06:	ee31 9a20 	vadd.f32	s18, s2, s1
 8004b0a:	ee79 9a82 	vadd.f32	s19, s19, s4
 8004b0e:	ee3c ca2b 	vadd.f32	s24, s24, s23
 8004b12:	ee6a aaa8 	vmul.f32	s21, s21, s17
 8004b16:	ee69 baa8 	vmul.f32	s23, s19, s17
 8004b1a:	ee2a aa0b 	vmul.f32	s20, s20, s22
 8004b1e:	ee69 9a8b 	vmul.f32	s19, s19, s22
 8004b22:	ee69 8a28 	vmul.f32	s17, s18, s17
 8004b26:	ee29 ba0b 	vmul.f32	s22, s18, s22
 8004b2a:	ee1c aa10 	vmov	sl, s24
 8004b2e:	ee78 8aa9 	vadd.f32	s17, s17, s19
 8004b32:	f841 ab08 	str.w	sl, [r1], #8
 8004b36:	ee3a aa6a 	vsub.f32	s20, s20, s21
 8004b3a:	ee3b bacb 	vsub.f32	s22, s23, s22
 8004b3e:	ee34 4ac4 	vsub.f32	s8, s9, s8
 8004b42:	ee33 3a62 	vsub.f32	s6, s6, s5
 8004b46:	ed01 aa01 	vstr	s20, [r1, #-4]
 8004b4a:	edc2 8a01 	vstr	s17, [r2, #4]
 8004b4e:	ed82 ba02 	vstr	s22, [r2, #8]
 8004b52:	ed5c 4a04 	vldr	s9, [ip, #-16]
 8004b56:	ee74 3a63 	vsub.f32	s7, s8, s7
 8004b5a:	ee38 8a47 	vsub.f32	s16, s16, s14
 8004b5e:	ed1c 4a03 	vldr	s8, [ip, #-12]
 8004b62:	ee30 0a46 	vsub.f32	s0, s0, s12
 8004b66:	ee33 3a42 	vsub.f32	s6, s6, s4
 8004b6a:	ee38 8a67 	vsub.f32	s16, s16, s15
 8004b6e:	ee30 0a66 	vsub.f32	s0, s0, s13
 8004b72:	ee23 9ae4 	vnmul.f32	s18, s7, s9
 8004b76:	ee63 8a04 	vmul.f32	s17, s6, s8
 8004b7a:	ee28 aa24 	vmul.f32	s20, s16, s9
 8004b7e:	ee60 9a04 	vmul.f32	s19, s0, s8
 8004b82:	ee28 8a04 	vmul.f32	s16, s16, s8
 8004b86:	ee20 0a24 	vmul.f32	s0, s0, s9
 8004b8a:	ee63 3a84 	vmul.f32	s7, s7, s8
 8004b8e:	ee39 4a68 	vsub.f32	s8, s18, s17
 8004b92:	ee7a 9a29 	vadd.f32	s19, s20, s19
 8004b96:	ee14 aa10 	vmov	sl, s8
 8004b9a:	ee30 0a48 	vsub.f32	s0, s0, s16
 8004b9e:	ee63 4a24 	vmul.f32	s9, s6, s9
 8004ba2:	ed44 9a02 	vstr	s19, [r4, #-8]
 8004ba6:	ee73 3ae4 	vsub.f32	s7, s7, s9
 8004baa:	ed04 0a01 	vstr	s0, [r4, #-4]
 8004bae:	f846 a908 	str.w	sl, [r6], #-8
 8004bb2:	ee35 6a46 	vsub.f32	s12, s10, s12
 8004bb6:	ee35 7a87 	vadd.f32	s14, s11, s14
 8004bba:	edc6 3a01 	vstr	s7, [r6, #4]
 8004bbe:	ee76 6a26 	vadd.f32	s13, s12, s13
 8004bc2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004bc6:	ed1e 6a05 	vldr	s12, [lr, #-20]	@ 0xffffffec
 8004bca:	ed1e 7a06 	vldr	s14, [lr, #-24]	@ 0xffffffe8
 8004bce:	ee67 5a86 	vmul.f32	s11, s15, s12
 8004bd2:	ee26 5a87 	vmul.f32	s10, s13, s14
 8004bd6:	ee72 2a62 	vsub.f32	s5, s4, s5
 8004bda:	ee30 1ac1 	vsub.f32	s2, s1, s2
 8004bde:	ee72 2ae1 	vsub.f32	s5, s5, s3
 8004be2:	ee75 5a25 	vadd.f32	s11, s10, s11
 8004be6:	ee62 0a86 	vmul.f32	s1, s5, s12
 8004bea:	ee66 6a86 	vmul.f32	s13, s13, s12
 8004bee:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004bf2:	ee21 6a06 	vmul.f32	s12, s2, s12
 8004bf6:	ee62 2a87 	vmul.f32	s5, s5, s14
 8004bfa:	ee21 1a07 	vmul.f32	s2, s2, s14
 8004bfe:	ee15 aa90 	vmov	sl, s11
 8004c02:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8004c06:	f840 ab08 	str.w	sl, [r0], #8
 8004c0a:	ee30 1ac1 	vsub.f32	s2, s1, s2
 8004c0e:	ee76 2a22 	vadd.f32	s5, s12, s5
 8004c12:	f1b9 0901 	subs.w	r9, r9, #1
 8004c16:	ed40 7a01 	vstr	s15, [r0, #-4]
 8004c1a:	f105 0508 	add.w	r5, r5, #8
 8004c1e:	ed83 1a02 	vstr	s2, [r3, #8]
 8004c22:	edc3 2a01 	vstr	s5, [r3, #4]
 8004c26:	f108 0808 	add.w	r8, r8, #8
 8004c2a:	f1a2 0208 	sub.w	r2, r2, #8
 8004c2e:	f10c 0c10 	add.w	ip, ip, #16
 8004c32:	f104 0408 	add.w	r4, r4, #8
 8004c36:	f10e 0e18 	add.w	lr, lr, #24
 8004c3a:	f1a3 0308 	sub.w	r3, r3, #8
 8004c3e:	f47f aefc 	bne.w	8004a3a <arm_cfft_radix8by4_f32+0x13e>
 8004c42:	9908      	ldr	r1, [sp, #32]
 8004c44:	9802      	ldr	r0, [sp, #8]
 8004c46:	f8dd a034 	ldr.w	sl, [sp, #52]	@ 0x34
 8004c4a:	00cb      	lsls	r3, r1, #3
 8004c4c:	eb01 0241 	add.w	r2, r1, r1, lsl #1
 8004c50:	eb00 1101 	add.w	r1, r0, r1, lsl #4
 8004c54:	9102      	str	r1, [sp, #8]
 8004c56:	9905      	ldr	r1, [sp, #20]
 8004c58:	4419      	add	r1, r3
 8004c5a:	9105      	str	r1, [sp, #20]
 8004c5c:	9904      	ldr	r1, [sp, #16]
 8004c5e:	4419      	add	r1, r3
 8004c60:	9104      	str	r1, [sp, #16]
 8004c62:	9906      	ldr	r1, [sp, #24]
 8004c64:	449b      	add	fp, r3
 8004c66:	4419      	add	r1, r3
 8004c68:	449a      	add	sl, r3
 8004c6a:	9b03      	ldr	r3, [sp, #12]
 8004c6c:	9106      	str	r1, [sp, #24]
 8004c6e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004c72:	9303      	str	r3, [sp, #12]
 8004c74:	9a05      	ldr	r2, [sp, #20]
 8004c76:	9806      	ldr	r0, [sp, #24]
 8004c78:	ed92 4a00 	vldr	s8, [r2]
 8004c7c:	ed90 7a00 	vldr	s14, [r0]
 8004c80:	ed9b 3a00 	vldr	s6, [fp]
 8004c84:	edda 3a00 	vldr	s7, [sl]
 8004c88:	edd2 4a01 	vldr	s9, [r2, #4]
 8004c8c:	edd0 6a01 	vldr	s13, [r0, #4]
 8004c90:	ed9a 2a01 	vldr	s4, [sl, #4]
 8004c94:	eddb 7a01 	vldr	s15, [fp, #4]
 8004c98:	f8bd 402c 	ldrh.w	r4, [sp, #44]	@ 0x2c
 8004c9c:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8004c9e:	ee34 6a07 	vadd.f32	s12, s8, s14
 8004ca2:	ee74 5aa6 	vadd.f32	s11, s9, s13
 8004ca6:	ee36 5a03 	vadd.f32	s10, s12, s6
 8004caa:	ee74 6ae6 	vsub.f32	s13, s9, s13
 8004cae:	ee35 5a23 	vadd.f32	s10, s10, s7
 8004cb2:	ee34 7a47 	vsub.f32	s14, s8, s14
 8004cb6:	ed82 5a00 	vstr	s10, [r2]
 8004cba:	ed9b 5a01 	vldr	s10, [fp, #4]
 8004cbe:	edda 4a01 	vldr	s9, [sl, #4]
 8004cc2:	ee35 5a85 	vadd.f32	s10, s11, s10
 8004cc6:	ee37 4a27 	vadd.f32	s8, s14, s15
 8004cca:	ee35 5a24 	vadd.f32	s10, s10, s9
 8004cce:	ee76 4ac3 	vsub.f32	s9, s13, s6
 8004cd2:	ed82 5a01 	vstr	s10, [r2, #4]
 8004cd6:	9a04      	ldr	r2, [sp, #16]
 8004cd8:	ee34 5aa3 	vadd.f32	s10, s9, s7
 8004cdc:	edd2 1a00 	vldr	s3, [r2]
 8004ce0:	edd2 2a01 	vldr	s5, [r2, #4]
 8004ce4:	9a02      	ldr	r2, [sp, #8]
 8004ce6:	ee34 4a42 	vsub.f32	s8, s8, s4
 8004cea:	ee36 6a43 	vsub.f32	s12, s12, s6
 8004cee:	ee64 4a21 	vmul.f32	s9, s8, s3
 8004cf2:	ee24 4a22 	vmul.f32	s8, s8, s5
 8004cf6:	ee65 2a22 	vmul.f32	s5, s10, s5
 8004cfa:	ee25 5a21 	vmul.f32	s10, s10, s3
 8004cfe:	ee74 2aa2 	vadd.f32	s5, s9, s5
 8004d02:	ee35 5a44 	vsub.f32	s10, s10, s8
 8004d06:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8004d0a:	edcb 2a00 	vstr	s5, [fp]
 8004d0e:	ed8b 5a01 	vstr	s10, [fp, #4]
 8004d12:	ed92 4a01 	vldr	s8, [r2, #4]
 8004d16:	ed92 5a00 	vldr	s10, [r2]
 8004d1a:	9a03      	ldr	r2, [sp, #12]
 8004d1c:	ee36 6a63 	vsub.f32	s12, s12, s7
 8004d20:	ee75 5ac2 	vsub.f32	s11, s11, s4
 8004d24:	ee66 4a05 	vmul.f32	s9, s12, s10
 8004d28:	ee25 5a85 	vmul.f32	s10, s11, s10
 8004d2c:	ee26 6a04 	vmul.f32	s12, s12, s8
 8004d30:	ee65 5a84 	vmul.f32	s11, s11, s8
 8004d34:	ee35 6a46 	vsub.f32	s12, s10, s12
 8004d38:	ee74 5aa5 	vadd.f32	s11, s9, s11
 8004d3c:	ee76 6a83 	vadd.f32	s13, s13, s6
 8004d40:	ee37 7a67 	vsub.f32	s14, s14, s15
 8004d44:	ed80 6a01 	vstr	s12, [r0, #4]
 8004d48:	edc0 5a00 	vstr	s11, [r0]
 8004d4c:	edd2 5a01 	vldr	s11, [r2, #4]
 8004d50:	9807      	ldr	r0, [sp, #28]
 8004d52:	ee77 7a02 	vadd.f32	s15, s14, s4
 8004d56:	ee36 7ae3 	vsub.f32	s14, s13, s7
 8004d5a:	edd2 6a00 	vldr	s13, [r2]
 8004d5e:	ee27 6aa6 	vmul.f32	s12, s15, s13
 8004d62:	ee67 6a26 	vmul.f32	s13, s14, s13
 8004d66:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8004d6a:	ee27 7a25 	vmul.f32	s14, s14, s11
 8004d6e:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8004d72:	ee36 7a07 	vadd.f32	s14, s12, s14
 8004d76:	edca 7a01 	vstr	s15, [sl, #4]
 8004d7a:	ed8a 7a00 	vstr	s14, [sl]
 8004d7e:	6872      	ldr	r2, [r6, #4]
 8004d80:	4621      	mov	r1, r4
 8004d82:	2304      	movs	r3, #4
 8004d84:	f000 f97a 	bl	800507c <arm_radix8_butterfly_f32>
 8004d88:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8004d8a:	6872      	ldr	r2, [r6, #4]
 8004d8c:	4621      	mov	r1, r4
 8004d8e:	2304      	movs	r3, #4
 8004d90:	f000 f974 	bl	800507c <arm_radix8_butterfly_f32>
 8004d94:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8004d96:	6872      	ldr	r2, [r6, #4]
 8004d98:	4621      	mov	r1, r4
 8004d9a:	2304      	movs	r3, #4
 8004d9c:	f000 f96e 	bl	800507c <arm_radix8_butterfly_f32>
 8004da0:	6872      	ldr	r2, [r6, #4]
 8004da2:	9801      	ldr	r0, [sp, #4]
 8004da4:	4621      	mov	r1, r4
 8004da6:	2304      	movs	r3, #4
 8004da8:	b00f      	add	sp, #60	@ 0x3c
 8004daa:	ecbd 8b0a 	vpop	{d8-d12}
 8004dae:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004db2:	f000 b963 	b.w	800507c <arm_radix8_butterfly_f32>
 8004db6:	bf00      	nop

08004db8 <arm_cfft_f32>:
 8004db8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004dbc:	2a01      	cmp	r2, #1
 8004dbe:	4606      	mov	r6, r0
 8004dc0:	4617      	mov	r7, r2
 8004dc2:	460c      	mov	r4, r1
 8004dc4:	4698      	mov	r8, r3
 8004dc6:	8805      	ldrh	r5, [r0, #0]
 8004dc8:	d054      	beq.n	8004e74 <arm_cfft_f32+0xbc>
 8004dca:	f5b5 7f80 	cmp.w	r5, #256	@ 0x100
 8004dce:	d04c      	beq.n	8004e6a <arm_cfft_f32+0xb2>
 8004dd0:	d916      	bls.n	8004e00 <arm_cfft_f32+0x48>
 8004dd2:	f5b5 6f80 	cmp.w	r5, #1024	@ 0x400
 8004dd6:	d01a      	beq.n	8004e0e <arm_cfft_f32+0x56>
 8004dd8:	d95c      	bls.n	8004e94 <arm_cfft_f32+0xdc>
 8004dda:	f5b5 6f00 	cmp.w	r5, #2048	@ 0x800
 8004dde:	d044      	beq.n	8004e6a <arm_cfft_f32+0xb2>
 8004de0:	f5b5 5f80 	cmp.w	r5, #4096	@ 0x1000
 8004de4:	d105      	bne.n	8004df2 <arm_cfft_f32+0x3a>
 8004de6:	2301      	movs	r3, #1
 8004de8:	6872      	ldr	r2, [r6, #4]
 8004dea:	4629      	mov	r1, r5
 8004dec:	4620      	mov	r0, r4
 8004dee:	f000 f945 	bl	800507c <arm_radix8_butterfly_f32>
 8004df2:	f1b8 0f00 	cmp.w	r8, #0
 8004df6:	d111      	bne.n	8004e1c <arm_cfft_f32+0x64>
 8004df8:	2f01      	cmp	r7, #1
 8004dfa:	d016      	beq.n	8004e2a <arm_cfft_f32+0x72>
 8004dfc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004e00:	2d20      	cmp	r5, #32
 8004e02:	d032      	beq.n	8004e6a <arm_cfft_f32+0xb2>
 8004e04:	d94a      	bls.n	8004e9c <arm_cfft_f32+0xe4>
 8004e06:	2d40      	cmp	r5, #64	@ 0x40
 8004e08:	d0ed      	beq.n	8004de6 <arm_cfft_f32+0x2e>
 8004e0a:	2d80      	cmp	r5, #128	@ 0x80
 8004e0c:	d1f1      	bne.n	8004df2 <arm_cfft_f32+0x3a>
 8004e0e:	4621      	mov	r1, r4
 8004e10:	4630      	mov	r0, r6
 8004e12:	f7ff fca3 	bl	800475c <arm_cfft_radix8by2_f32>
 8004e16:	f1b8 0f00 	cmp.w	r8, #0
 8004e1a:	d0ed      	beq.n	8004df8 <arm_cfft_f32+0x40>
 8004e1c:	68b2      	ldr	r2, [r6, #8]
 8004e1e:	89b1      	ldrh	r1, [r6, #12]
 8004e20:	4620      	mov	r0, r4
 8004e22:	f7fb f9d5 	bl	80001d0 <arm_bitreversal_32>
 8004e26:	2f01      	cmp	r7, #1
 8004e28:	d1e8      	bne.n	8004dfc <arm_cfft_f32+0x44>
 8004e2a:	ee07 5a90 	vmov	s15, r5
 8004e2e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004e32:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004e36:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8004e3a:	2d00      	cmp	r5, #0
 8004e3c:	d0de      	beq.n	8004dfc <arm_cfft_f32+0x44>
 8004e3e:	f104 0108 	add.w	r1, r4, #8
 8004e42:	2300      	movs	r3, #0
 8004e44:	3301      	adds	r3, #1
 8004e46:	429d      	cmp	r5, r3
 8004e48:	f101 0108 	add.w	r1, r1, #8
 8004e4c:	ed11 7a04 	vldr	s14, [r1, #-16]
 8004e50:	ed51 7a03 	vldr	s15, [r1, #-12]
 8004e54:	ee27 7a26 	vmul.f32	s14, s14, s13
 8004e58:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 8004e5c:	ed01 7a04 	vstr	s14, [r1, #-16]
 8004e60:	ed41 7a03 	vstr	s15, [r1, #-12]
 8004e64:	d1ee      	bne.n	8004e44 <arm_cfft_f32+0x8c>
 8004e66:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004e6a:	4621      	mov	r1, r4
 8004e6c:	4630      	mov	r0, r6
 8004e6e:	f7ff fd45 	bl	80048fc <arm_cfft_radix8by4_f32>
 8004e72:	e7be      	b.n	8004df2 <arm_cfft_f32+0x3a>
 8004e74:	b1ad      	cbz	r5, 8004ea2 <arm_cfft_f32+0xea>
 8004e76:	f101 030c 	add.w	r3, r1, #12
 8004e7a:	2200      	movs	r2, #0
 8004e7c:	ed53 7a02 	vldr	s15, [r3, #-8]
 8004e80:	3201      	adds	r2, #1
 8004e82:	eef1 7a67 	vneg.f32	s15, s15
 8004e86:	4295      	cmp	r5, r2
 8004e88:	ed43 7a02 	vstr	s15, [r3, #-8]
 8004e8c:	f103 0308 	add.w	r3, r3, #8
 8004e90:	d1f4      	bne.n	8004e7c <arm_cfft_f32+0xc4>
 8004e92:	e79a      	b.n	8004dca <arm_cfft_f32+0x12>
 8004e94:	f5b5 7f00 	cmp.w	r5, #512	@ 0x200
 8004e98:	d0a5      	beq.n	8004de6 <arm_cfft_f32+0x2e>
 8004e9a:	e7aa      	b.n	8004df2 <arm_cfft_f32+0x3a>
 8004e9c:	2d10      	cmp	r5, #16
 8004e9e:	d0b6      	beq.n	8004e0e <arm_cfft_f32+0x56>
 8004ea0:	e7a7      	b.n	8004df2 <arm_cfft_f32+0x3a>
 8004ea2:	f5b5 7f80 	cmp.w	r5, #256	@ 0x100
 8004ea6:	d894      	bhi.n	8004dd2 <arm_cfft_f32+0x1a>
 8004ea8:	e7aa      	b.n	8004e00 <arm_cfft_f32+0x48>
 8004eaa:	bf00      	nop

08004eac <arm_cmplx_mag_f32>:
 8004eac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004eb0:	ea5f 0892 	movs.w	r8, r2, lsr #2
 8004eb4:	b084      	sub	sp, #16
 8004eb6:	d07f      	beq.n	8004fb8 <arm_cmplx_mag_f32+0x10c>
 8004eb8:	2700      	movs	r7, #0
 8004eba:	f100 0420 	add.w	r4, r0, #32
 8004ebe:	f101 0510 	add.w	r5, r1, #16
 8004ec2:	4646      	mov	r6, r8
 8004ec4:	e05a      	b.n	8004f7c <arm_cmplx_mag_f32+0xd0>
 8004ec6:	eeb1 0ae7 	vsqrt.f32	s0, s15
 8004eca:	eeb4 0a40 	vcmp.f32	s0, s0
 8004ece:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004ed2:	f040 80a4 	bne.w	800501e <arm_cmplx_mag_f32+0x172>
 8004ed6:	ed05 0a04 	vstr	s0, [r5, #-16]
 8004eda:	ed54 7a06 	vldr	s15, [r4, #-24]	@ 0xffffffe8
 8004ede:	ed14 0a05 	vldr	s0, [r4, #-20]	@ 0xffffffec
 8004ee2:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8004ee6:	ee20 0a00 	vmul.f32	s0, s0, s0
 8004eea:	ee77 7a80 	vadd.f32	s15, s15, s0
 8004eee:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004ef2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004ef6:	f2c0 808f 	blt.w	8005018 <arm_cmplx_mag_f32+0x16c>
 8004efa:	eeb1 0ae7 	vsqrt.f32	s0, s15
 8004efe:	eeb4 0a40 	vcmp.f32	s0, s0
 8004f02:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004f06:	f040 80af 	bne.w	8005068 <arm_cmplx_mag_f32+0x1bc>
 8004f0a:	ed05 0a03 	vstr	s0, [r5, #-12]
 8004f0e:	ed54 7a04 	vldr	s15, [r4, #-16]
 8004f12:	ed14 0a03 	vldr	s0, [r4, #-12]
 8004f16:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8004f1a:	ee20 0a00 	vmul.f32	s0, s0, s0
 8004f1e:	ee77 7a80 	vadd.f32	s15, s15, s0
 8004f22:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004f26:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004f2a:	db72      	blt.n	8005012 <arm_cmplx_mag_f32+0x166>
 8004f2c:	eeb1 0ae7 	vsqrt.f32	s0, s15
 8004f30:	eeb4 0a40 	vcmp.f32	s0, s0
 8004f34:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004f38:	f040 808c 	bne.w	8005054 <arm_cmplx_mag_f32+0x1a8>
 8004f3c:	ed05 0a02 	vstr	s0, [r5, #-8]
 8004f40:	ed54 7a02 	vldr	s15, [r4, #-8]
 8004f44:	ed14 0a01 	vldr	s0, [r4, #-4]
 8004f48:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8004f4c:	ee20 0a00 	vmul.f32	s0, s0, s0
 8004f50:	ee77 7a80 	vadd.f32	s15, s15, s0
 8004f54:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004f58:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004f5c:	db20      	blt.n	8004fa0 <arm_cmplx_mag_f32+0xf4>
 8004f5e:	eeb1 0ae7 	vsqrt.f32	s0, s15
 8004f62:	eeb4 0a40 	vcmp.f32	s0, s0
 8004f66:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004f6a:	d169      	bne.n	8005040 <arm_cmplx_mag_f32+0x194>
 8004f6c:	3e01      	subs	r6, #1
 8004f6e:	ed05 0a01 	vstr	s0, [r5, #-4]
 8004f72:	f104 0420 	add.w	r4, r4, #32
 8004f76:	f105 0510 	add.w	r5, r5, #16
 8004f7a:	d019      	beq.n	8004fb0 <arm_cmplx_mag_f32+0x104>
 8004f7c:	ed54 7a08 	vldr	s15, [r4, #-32]	@ 0xffffffe0
 8004f80:	ed14 0a07 	vldr	s0, [r4, #-28]	@ 0xffffffe4
 8004f84:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8004f88:	ee20 0a00 	vmul.f32	s0, s0, s0
 8004f8c:	ee77 7a80 	vadd.f32	s15, s15, s0
 8004f90:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004f94:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004f98:	da95      	bge.n	8004ec6 <arm_cmplx_mag_f32+0x1a>
 8004f9a:	f845 7c10 	str.w	r7, [r5, #-16]
 8004f9e:	e79c      	b.n	8004eda <arm_cmplx_mag_f32+0x2e>
 8004fa0:	3e01      	subs	r6, #1
 8004fa2:	f845 7c04 	str.w	r7, [r5, #-4]
 8004fa6:	f104 0420 	add.w	r4, r4, #32
 8004faa:	f105 0510 	add.w	r5, r5, #16
 8004fae:	d1e5      	bne.n	8004f7c <arm_cmplx_mag_f32+0xd0>
 8004fb0:	eb00 1048 	add.w	r0, r0, r8, lsl #5
 8004fb4:	eb01 1108 	add.w	r1, r1, r8, lsl #4
 8004fb8:	f012 0503 	ands.w	r5, r2, #3
 8004fbc:	d026      	beq.n	800500c <arm_cmplx_mag_f32+0x160>
 8004fbe:	2600      	movs	r6, #0
 8004fc0:	f100 0408 	add.w	r4, r0, #8
 8004fc4:	e00c      	b.n	8004fe0 <arm_cmplx_mag_f32+0x134>
 8004fc6:	eeb1 0ae7 	vsqrt.f32	s0, s15
 8004fca:	eeb4 0a40 	vcmp.f32	s0, s0
 8004fce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004fd2:	d12e      	bne.n	8005032 <arm_cmplx_mag_f32+0x186>
 8004fd4:	3d01      	subs	r5, #1
 8004fd6:	ed01 0a01 	vstr	s0, [r1, #-4]
 8004fda:	f104 0408 	add.w	r4, r4, #8
 8004fde:	d015      	beq.n	800500c <arm_cmplx_mag_f32+0x160>
 8004fe0:	ed54 7a02 	vldr	s15, [r4, #-8]
 8004fe4:	ed14 0a01 	vldr	s0, [r4, #-4]
 8004fe8:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8004fec:	ee20 0a00 	vmul.f32	s0, s0, s0
 8004ff0:	3104      	adds	r1, #4
 8004ff2:	ee77 7a80 	vadd.f32	s15, s15, s0
 8004ff6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004ffa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004ffe:	dae2      	bge.n	8004fc6 <arm_cmplx_mag_f32+0x11a>
 8005000:	3d01      	subs	r5, #1
 8005002:	f841 6c04 	str.w	r6, [r1, #-4]
 8005006:	f104 0408 	add.w	r4, r4, #8
 800500a:	d1e9      	bne.n	8004fe0 <arm_cmplx_mag_f32+0x134>
 800500c:	b004      	add	sp, #16
 800500e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005012:	f845 7c08 	str.w	r7, [r5, #-8]
 8005016:	e793      	b.n	8004f40 <arm_cmplx_mag_f32+0x94>
 8005018:	f845 7c0c 	str.w	r7, [r5, #-12]
 800501c:	e777      	b.n	8004f0e <arm_cmplx_mag_f32+0x62>
 800501e:	eeb0 0a67 	vmov.f32	s0, s15
 8005022:	9203      	str	r2, [sp, #12]
 8005024:	9102      	str	r1, [sp, #8]
 8005026:	9001      	str	r0, [sp, #4]
 8005028:	f004 fed6 	bl	8009dd8 <sqrtf>
 800502c:	a801      	add	r0, sp, #4
 800502e:	c807      	ldmia	r0, {r0, r1, r2}
 8005030:	e751      	b.n	8004ed6 <arm_cmplx_mag_f32+0x2a>
 8005032:	eeb0 0a67 	vmov.f32	s0, s15
 8005036:	9101      	str	r1, [sp, #4]
 8005038:	f004 fece 	bl	8009dd8 <sqrtf>
 800503c:	9901      	ldr	r1, [sp, #4]
 800503e:	e7c9      	b.n	8004fd4 <arm_cmplx_mag_f32+0x128>
 8005040:	eeb0 0a67 	vmov.f32	s0, s15
 8005044:	9203      	str	r2, [sp, #12]
 8005046:	9102      	str	r1, [sp, #8]
 8005048:	9001      	str	r0, [sp, #4]
 800504a:	f004 fec5 	bl	8009dd8 <sqrtf>
 800504e:	a801      	add	r0, sp, #4
 8005050:	c807      	ldmia	r0, {r0, r1, r2}
 8005052:	e78b      	b.n	8004f6c <arm_cmplx_mag_f32+0xc0>
 8005054:	eeb0 0a67 	vmov.f32	s0, s15
 8005058:	9203      	str	r2, [sp, #12]
 800505a:	9102      	str	r1, [sp, #8]
 800505c:	9001      	str	r0, [sp, #4]
 800505e:	f004 febb 	bl	8009dd8 <sqrtf>
 8005062:	a801      	add	r0, sp, #4
 8005064:	c807      	ldmia	r0, {r0, r1, r2}
 8005066:	e769      	b.n	8004f3c <arm_cmplx_mag_f32+0x90>
 8005068:	eeb0 0a67 	vmov.f32	s0, s15
 800506c:	9203      	str	r2, [sp, #12]
 800506e:	9102      	str	r1, [sp, #8]
 8005070:	9001      	str	r0, [sp, #4]
 8005072:	f004 feb1 	bl	8009dd8 <sqrtf>
 8005076:	a801      	add	r0, sp, #4
 8005078:	c807      	ldmia	r0, {r0, r1, r2}
 800507a:	e746      	b.n	8004f0a <arm_cmplx_mag_f32+0x5e>

0800507c <arm_radix8_butterfly_f32>:
 800507c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005080:	ed2d 8b10 	vpush	{d8-d15}
 8005084:	461c      	mov	r4, r3
 8005086:	b09d      	sub	sp, #116	@ 0x74
 8005088:	4603      	mov	r3, r0
 800508a:	3304      	adds	r3, #4
 800508c:	ed9f bac4 	vldr	s22, [pc, #784]	@ 80053a0 <arm_radix8_butterfly_f32+0x324>
 8005090:	9019      	str	r0, [sp, #100]	@ 0x64
 8005092:	921a      	str	r2, [sp, #104]	@ 0x68
 8005094:	468b      	mov	fp, r1
 8005096:	931b      	str	r3, [sp, #108]	@ 0x6c
 8005098:	468a      	mov	sl, r1
 800509a:	46a1      	mov	r9, r4
 800509c:	4607      	mov	r7, r0
 800509e:	ea4f 03db 	mov.w	r3, fp, lsr #3
 80050a2:	ea4f 0843 	mov.w	r8, r3, lsl #1
 80050a6:	eb03 0508 	add.w	r5, r3, r8
 80050aa:	195c      	adds	r4, r3, r5
 80050ac:	00de      	lsls	r6, r3, #3
 80050ae:	191a      	adds	r2, r3, r4
 80050b0:	9600      	str	r6, [sp, #0]
 80050b2:	1898      	adds	r0, r3, r2
 80050b4:	4619      	mov	r1, r3
 80050b6:	9e00      	ldr	r6, [sp, #0]
 80050b8:	9311      	str	r3, [sp, #68]	@ 0x44
 80050ba:	4401      	add	r1, r0
 80050bc:	eb07 02c2 	add.w	r2, r7, r2, lsl #3
 80050c0:	eb07 01c1 	add.w	r1, r7, r1, lsl #3
 80050c4:	19be      	adds	r6, r7, r6
 80050c6:	eb07 05c5 	add.w	r5, r7, r5, lsl #3
 80050ca:	eb07 04c4 	add.w	r4, r7, r4, lsl #3
 80050ce:	eb07 00c0 	add.w	r0, r7, r0, lsl #3
 80050d2:	9f00      	ldr	r7, [sp, #0]
 80050d4:	011b      	lsls	r3, r3, #4
 80050d6:	eb06 0e07 	add.w	lr, r6, r7
 80050da:	9f1b      	ldr	r7, [sp, #108]	@ 0x6c
 80050dc:	9302      	str	r3, [sp, #8]
 80050de:	3204      	adds	r2, #4
 80050e0:	3104      	adds	r1, #4
 80050e2:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80050e6:	f04f 0c00 	mov.w	ip, #0
 80050ea:	edde 7a00 	vldr	s15, [lr]
 80050ee:	edd6 6a00 	vldr	s13, [r6]
 80050f2:	ed95 2a00 	vldr	s4, [r5]
 80050f6:	ed17 aa01 	vldr	s20, [r7, #-4]
 80050fa:	edd4 4a00 	vldr	s9, [r4]
 80050fe:	ed90 5a00 	vldr	s10, [r0]
 8005102:	ed12 7a01 	vldr	s14, [r2, #-4]
 8005106:	ed51 0a01 	vldr	s1, [r1, #-4]
 800510a:	ee77 8a85 	vadd.f32	s17, s15, s10
 800510e:	ee76 3a87 	vadd.f32	s7, s13, s14
 8005112:	ee32 4a20 	vadd.f32	s8, s4, s1
 8005116:	ee3a 3a24 	vadd.f32	s6, s20, s9
 800511a:	ee33 6a84 	vadd.f32	s12, s7, s8
 800511e:	ee73 5a28 	vadd.f32	s11, s6, s17
 8005122:	ee36 7ac7 	vsub.f32	s14, s13, s14
 8005126:	ee75 6a86 	vadd.f32	s13, s11, s12
 800512a:	ee75 5ac6 	vsub.f32	s11, s11, s12
 800512e:	ed47 6a01 	vstr	s13, [r7, #-4]
 8005132:	edc4 5a00 	vstr	s11, [r4]
 8005136:	ed92 9a00 	vldr	s18, [r2]
 800513a:	ed95 1a01 	vldr	s2, [r5, #4]
 800513e:	edd6 5a01 	vldr	s11, [r6, #4]
 8005142:	ed91 6a00 	vldr	s12, [r1]
 8005146:	edd7 2a00 	vldr	s5, [r7]
 800514a:	edd4 1a01 	vldr	s3, [r4, #4]
 800514e:	edde 6a01 	vldr	s13, [lr, #4]
 8005152:	edd0 9a01 	vldr	s19, [r0, #4]
 8005156:	ee72 0a60 	vsub.f32	s1, s4, s1
 800515a:	ee71 aa46 	vsub.f32	s21, s2, s12
 800515e:	ee35 2ac9 	vsub.f32	s4, s11, s18
 8005162:	ee37 0a60 	vsub.f32	s0, s14, s1
 8005166:	ee32 8a2a 	vadd.f32	s16, s4, s21
 800516a:	ee37 7a20 	vadd.f32	s14, s14, s1
 800516e:	ee32 2a6a 	vsub.f32	s4, s4, s21
 8005172:	ee37 5ac5 	vsub.f32	s10, s15, s10
 8005176:	ee75 5a89 	vadd.f32	s11, s11, s18
 800517a:	ee60 0a0b 	vmul.f32	s1, s0, s22
 800517e:	ee7a 4a64 	vsub.f32	s9, s20, s9
 8005182:	ee31 6a06 	vadd.f32	s12, s2, s12
 8005186:	ee36 9aa9 	vadd.f32	s18, s13, s19
 800518a:	ee32 1aa1 	vadd.f32	s2, s5, s3
 800518e:	ee76 6ae9 	vsub.f32	s13, s13, s19
 8005192:	ee72 1ae1 	vsub.f32	s3, s5, s3
 8005196:	ee28 8a0b 	vmul.f32	s16, s16, s22
 800519a:	ee62 2a0b 	vmul.f32	s5, s4, s22
 800519e:	ee67 7a0b 	vmul.f32	s15, s14, s22
 80051a2:	ee33 3a68 	vsub.f32	s6, s6, s17
 80051a6:	ee36 0a88 	vadd.f32	s0, s13, s16
 80051aa:	ee75 8a86 	vadd.f32	s17, s11, s12
 80051ae:	ee36 7ac8 	vsub.f32	s14, s13, s16
 80051b2:	ee33 4ac4 	vsub.f32	s8, s7, s8
 80051b6:	ee74 6ae0 	vsub.f32	s13, s9, s1
 80051ba:	ee74 3aa0 	vadd.f32	s7, s9, s1
 80051be:	ee35 6ac6 	vsub.f32	s12, s11, s12
 80051c2:	ee75 4a27 	vadd.f32	s9, s10, s15
 80051c6:	ee71 5a49 	vsub.f32	s11, s2, s18
 80051ca:	ee31 2a09 	vadd.f32	s4, s2, s18
 80051ce:	ee75 7a67 	vsub.f32	s15, s10, s15
 80051d2:	ee31 1aa2 	vadd.f32	s2, s3, s5
 80051d6:	ee71 2ae2 	vsub.f32	s5, s3, s5
 80051da:	ee73 0a06 	vadd.f32	s1, s6, s12
 80051de:	ee75 1ac4 	vsub.f32	s3, s11, s8
 80051e2:	ee36 5a87 	vadd.f32	s10, s13, s14
 80051e6:	ee32 8a28 	vadd.f32	s16, s4, s17
 80051ea:	ee33 6a46 	vsub.f32	s12, s6, s12
 80051ee:	ee34 4a25 	vadd.f32	s8, s8, s11
 80051f2:	ee33 3a80 	vadd.f32	s6, s7, s0
 80051f6:	ee36 7ac7 	vsub.f32	s14, s13, s14
 80051fa:	ee71 5a64 	vsub.f32	s11, s2, s9
 80051fe:	ee72 6ae7 	vsub.f32	s13, s5, s15
 8005202:	ee32 2a68 	vsub.f32	s4, s4, s17
 8005206:	ee73 3ac0 	vsub.f32	s7, s7, s0
 800520a:	ee74 4a81 	vadd.f32	s9, s9, s2
 800520e:	ee77 7aa2 	vadd.f32	s15, s15, s5
 8005212:	44dc      	add	ip, fp
 8005214:	45e2      	cmp	sl, ip
 8005216:	ed87 8a00 	vstr	s16, [r7]
 800521a:	ed84 2a01 	vstr	s4, [r4, #4]
 800521e:	441f      	add	r7, r3
 8005220:	edce 0a00 	vstr	s1, [lr]
 8005224:	441c      	add	r4, r3
 8005226:	ed80 6a00 	vstr	s12, [r0]
 800522a:	edce 1a01 	vstr	s3, [lr, #4]
 800522e:	ed80 4a01 	vstr	s8, [r0, #4]
 8005232:	449e      	add	lr, r3
 8005234:	ed86 3a00 	vstr	s6, [r6]
 8005238:	4418      	add	r0, r3
 800523a:	ed41 3a01 	vstr	s7, [r1, #-4]
 800523e:	ed02 5a01 	vstr	s10, [r2, #-4]
 8005242:	ed85 7a00 	vstr	s14, [r5]
 8005246:	edc6 5a01 	vstr	s11, [r6, #4]
 800524a:	edc1 4a00 	vstr	s9, [r1]
 800524e:	441e      	add	r6, r3
 8005250:	edc2 6a00 	vstr	s13, [r2]
 8005254:	4419      	add	r1, r3
 8005256:	edc5 7a01 	vstr	s15, [r5, #4]
 800525a:	441a      	add	r2, r3
 800525c:	441d      	add	r5, r3
 800525e:	f63f af44 	bhi.w	80050ea <arm_radix8_butterfly_f32+0x6e>
 8005262:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8005264:	2a07      	cmp	r2, #7
 8005266:	f240 81f5 	bls.w	8005654 <arm_radix8_butterfly_f32+0x5d8>
 800526a:	f108 0101 	add.w	r1, r8, #1
 800526e:	188f      	adds	r7, r1, r2
 8005270:	eb09 0849 	add.w	r8, r9, r9, lsl #1
 8005274:	19d6      	adds	r6, r2, r7
 8005276:	eb08 0c09 	add.w	ip, r8, r9
 800527a:	1994      	adds	r4, r2, r6
 800527c:	eb0c 0e09 	add.w	lr, ip, r9
 8005280:	4610      	mov	r0, r2
 8005282:	9701      	str	r7, [sp, #4]
 8005284:	4420      	add	r0, r4
 8005286:	eb0e 0709 	add.w	r7, lr, r9
 800528a:	1815      	adds	r5, r2, r0
 800528c:	eb07 0209 	add.w	r2, r7, r9
 8005290:	9203      	str	r2, [sp, #12]
 8005292:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8005294:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005298:	9117      	str	r1, [sp, #92]	@ 0x5c
 800529a:	440a      	add	r2, r1
 800529c:	9900      	ldr	r1, [sp, #0]
 800529e:	3108      	adds	r1, #8
 80052a0:	9100      	str	r1, [sp, #0]
 80052a2:	9902      	ldr	r1, [sp, #8]
 80052a4:	3108      	adds	r1, #8
 80052a6:	9102      	str	r1, [sp, #8]
 80052a8:	9919      	ldr	r1, [sp, #100]	@ 0x64
 80052aa:	00ff      	lsls	r7, r7, #3
 80052ac:	9715      	str	r7, [sp, #84]	@ 0x54
 80052ae:	eb01 04c4 	add.w	r4, r1, r4, lsl #3
 80052b2:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
 80052b6:	eb01 00c0 	add.w	r0, r1, r0, lsl #3
 80052ba:	9f17      	ldr	r7, [sp, #92]	@ 0x5c
 80052bc:	9903      	ldr	r1, [sp, #12]
 80052be:	19d7      	adds	r7, r2, r7
 80052c0:	00c9      	lsls	r1, r1, #3
 80052c2:	9114      	str	r1, [sp, #80]	@ 0x50
 80052c4:	9710      	str	r7, [sp, #64]	@ 0x40
 80052c6:	9919      	ldr	r1, [sp, #100]	@ 0x64
 80052c8:	9f00      	ldr	r7, [sp, #0]
 80052ca:	19cf      	adds	r7, r1, r7
 80052cc:	970d      	str	r7, [sp, #52]	@ 0x34
 80052ce:	9f02      	ldr	r7, [sp, #8]
 80052d0:	19cf      	adds	r7, r1, r7
 80052d2:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 80052d6:	970c      	str	r7, [sp, #48]	@ 0x30
 80052d8:	9f01      	ldr	r7, [sp, #4]
 80052da:	f8cd e058 	str.w	lr, [sp, #88]	@ 0x58
 80052de:	3504      	adds	r5, #4
 80052e0:	3004      	adds	r0, #4
 80052e2:	eb01 0ec7 	add.w	lr, r1, r7, lsl #3
 80052e6:	9508      	str	r5, [sp, #32]
 80052e8:	9009      	str	r0, [sp, #36]	@ 0x24
 80052ea:	9d16      	ldr	r5, [sp, #88]	@ 0x58
 80052ec:	981a      	ldr	r0, [sp, #104]	@ 0x68
 80052ee:	f8cd e02c 	str.w	lr, [sp, #44]	@ 0x2c
 80052f2:	ea4f 08c8 	mov.w	r8, r8, lsl #3
 80052f6:	eb01 0ec6 	add.w	lr, r1, r6, lsl #3
 80052fa:	9e14      	ldr	r6, [sp, #80]	@ 0x50
 80052fc:	f8cd e038 	str.w	lr, [sp, #56]	@ 0x38
 8005300:	1945      	adds	r5, r0, r5
 8005302:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 8005306:	460f      	mov	r7, r1
 8005308:	3404      	adds	r4, #4
 800530a:	4641      	mov	r1, r8
 800530c:	1841      	adds	r1, r0, r1
 800530e:	f8cd c048 	str.w	ip, [sp, #72]	@ 0x48
 8005312:	940a      	str	r4, [sp, #40]	@ 0x28
 8005314:	eb00 0c06 	add.w	ip, r0, r6
 8005318:	f8cd 804c 	str.w	r8, [sp, #76]	@ 0x4c
 800531c:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800531e:	9506      	str	r5, [sp, #24]
 8005320:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 8005322:	9105      	str	r1, [sp, #20]
 8005324:	4639      	mov	r1, r7
 8005326:	1905      	adds	r5, r0, r4
 8005328:	3108      	adds	r1, #8
 800532a:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 800532c:	9507      	str	r5, [sp, #28]
 800532e:	910f      	str	r1, [sp, #60]	@ 0x3c
 8005330:	ea4f 1509 	mov.w	r5, r9, lsl #4
 8005334:	2101      	movs	r1, #1
 8005336:	eb00 0e06 	add.w	lr, r0, r6
 800533a:	9518      	str	r5, [sp, #96]	@ 0x60
 800533c:	9404      	str	r4, [sp, #16]
 800533e:	9103      	str	r1, [sp, #12]
 8005340:	4620      	mov	r0, r4
 8005342:	4689      	mov	r9, r1
 8005344:	9e06      	ldr	r6, [sp, #24]
 8005346:	ed90 fa00 	vldr	s30, [r0]
 800534a:	edd6 7a01 	vldr	s15, [r6, #4]
 800534e:	edd0 ba01 	vldr	s23, [r0, #4]
 8005352:	edcd 7a00 	vstr	s15, [sp]
 8005356:	a80d      	add	r0, sp, #52	@ 0x34
 8005358:	edde 7a01 	vldr	s15, [lr, #4]
 800535c:	9c05      	ldr	r4, [sp, #20]
 800535e:	9d07      	ldr	r5, [sp, #28]
 8005360:	edd2 fa00 	vldr	s31, [r2]
 8005364:	ed92 ca01 	vldr	s24, [r2, #4]
 8005368:	edcd 7a01 	vstr	s15, [sp, #4]
 800536c:	c807      	ldmia	r0, {r0, r1, r2}
 800536e:	eddc 7a01 	vldr	s15, [ip, #4]
 8005372:	edd4 ea00 	vldr	s29, [r4]
 8005376:	ed95 ea00 	vldr	s28, [r5]
 800537a:	edd6 da00 	vldr	s27, [r6]
 800537e:	edd4 aa01 	vldr	s21, [r4, #4]
 8005382:	ed95 aa01 	vldr	s20, [r5, #4]
 8005386:	ed9e da00 	vldr	s26, [lr]
 800538a:	eddc ca00 	vldr	s25, [ip]
 800538e:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005392:	9f09      	ldr	r7, [sp, #36]	@ 0x24
 8005394:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 8005396:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8005398:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 800539a:	edcd 7a02 	vstr	s15, [sp, #8]
 800539e:	e001      	b.n	80053a4 <arm_radix8_butterfly_f32+0x328>
 80053a0:	3f3504f3 	.word	0x3f3504f3
 80053a4:	ed16 6a01 	vldr	s12, [r6, #-4]
 80053a8:	ed91 5a00 	vldr	s10, [r1]
 80053ac:	ed57 9a01 	vldr	s19, [r7, #-4]
 80053b0:	edd5 7a00 	vldr	s15, [r5]
 80053b4:	ed18 7a01 	vldr	s14, [r8, #-4]
 80053b8:	edd2 3a00 	vldr	s7, [r2]
 80053bc:	ed94 3a00 	vldr	s6, [r4]
 80053c0:	ed90 2a00 	vldr	s4, [r0]
 80053c4:	ed92 0a01 	vldr	s0, [r2, #4]
 80053c8:	ee33 8a85 	vadd.f32	s16, s7, s10
 80053cc:	ee32 1a06 	vadd.f32	s2, s4, s12
 80053d0:	ee33 4a29 	vadd.f32	s8, s6, s19
 80053d4:	ee77 4a87 	vadd.f32	s9, s15, s14
 80053d8:	ee78 1a04 	vadd.f32	s3, s16, s8
 80053dc:	ee71 6a24 	vadd.f32	s13, s2, s9
 80053e0:	ee32 2a46 	vsub.f32	s4, s4, s12
 80053e4:	ee31 6aa6 	vadd.f32	s12, s3, s13
 80053e8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80053ec:	ed82 6a00 	vstr	s12, [r2]
 80053f0:	edd5 8a01 	vldr	s17, [r5, #4]
 80053f4:	ed90 9a01 	vldr	s18, [r0, #4]
 80053f8:	edd6 2a00 	vldr	s5, [r6]
 80053fc:	ed98 7a00 	vldr	s14, [r8]
 8005400:	edd4 0a01 	vldr	s1, [r4, #4]
 8005404:	ed91 6a01 	vldr	s12, [r1, #4]
 8005408:	edd7 5a00 	vldr	s11, [r7]
 800540c:	ee73 3ac5 	vsub.f32	s7, s7, s10
 8005410:	ee33 3a69 	vsub.f32	s6, s6, s19
 8005414:	ee39 5a62 	vsub.f32	s10, s18, s5
 8005418:	ee78 9ac7 	vsub.f32	s19, s17, s14
 800541c:	ee38 4a44 	vsub.f32	s8, s16, s8
 8005420:	ee38 7a87 	vadd.f32	s14, s17, s14
 8005424:	ee30 8aa5 	vadd.f32	s16, s1, s11
 8005428:	ee79 2a22 	vadd.f32	s5, s18, s5
 800542c:	ee75 8a69 	vsub.f32	s17, s10, s19
 8005430:	ee32 9a27 	vadd.f32	s18, s4, s15
 8005434:	ee35 5a29 	vadd.f32	s10, s10, s19
 8005438:	ee72 7a67 	vsub.f32	s15, s4, s15
 800543c:	ee30 2a06 	vadd.f32	s4, s0, s12
 8005440:	ee69 9a0b 	vmul.f32	s19, s18, s22
 8005444:	ee70 5ae5 	vsub.f32	s11, s1, s11
 8005448:	ee32 9a08 	vadd.f32	s18, s4, s16
 800544c:	ee68 8a8b 	vmul.f32	s17, s17, s22
 8005450:	ee32 2a48 	vsub.f32	s4, s4, s16
 8005454:	ee71 4a64 	vsub.f32	s9, s2, s9
 8005458:	ee25 5a0b 	vmul.f32	s10, s10, s22
 800545c:	ee32 1a87 	vadd.f32	s2, s5, s14
 8005460:	ee67 7a8b 	vmul.f32	s15, s15, s22
 8005464:	ee72 2ac7 	vsub.f32	s5, s5, s14
 8005468:	ee30 6a46 	vsub.f32	s12, s0, s12
 800546c:	ee73 0a29 	vadd.f32	s1, s6, s19
 8005470:	ee36 0a28 	vadd.f32	s0, s12, s17
 8005474:	ee33 3a69 	vsub.f32	s6, s6, s19
 8005478:	ee32 7a64 	vsub.f32	s14, s4, s9
 800547c:	ee73 9aa7 	vadd.f32	s19, s7, s15
 8005480:	ee36 6a68 	vsub.f32	s12, s12, s17
 8005484:	ee73 7ae7 	vsub.f32	s15, s7, s15
 8005488:	ee75 8a85 	vadd.f32	s17, s11, s10
 800548c:	ee74 3a22 	vadd.f32	s7, s8, s5
 8005490:	ee35 5ac5 	vsub.f32	s10, s11, s10
 8005494:	ee71 6ae6 	vsub.f32	s13, s3, s13
 8005498:	ee79 1a41 	vsub.f32	s3, s18, s2
 800549c:	ee39 8aa8 	vadd.f32	s16, s19, s17
 80054a0:	ee76 5a43 	vsub.f32	s11, s12, s6
 80054a4:	ee74 2a62 	vsub.f32	s5, s8, s5
 80054a8:	ee74 4a82 	vadd.f32	s9, s9, s4
 80054ac:	ee30 4a60 	vsub.f32	s8, s0, s1
 80054b0:	ee79 8ae8 	vsub.f32	s17, s19, s17
 80054b4:	ee30 0a80 	vadd.f32	s0, s1, s0
 80054b8:	ee77 9a85 	vadd.f32	s19, s15, s10
 80054bc:	ee33 6a06 	vadd.f32	s12, s6, s12
 80054c0:	ee77 7ac5 	vsub.f32	s15, s15, s10
 80054c4:	ee2e 2a21 	vmul.f32	s4, s28, s3
 80054c8:	ee2e 5a26 	vmul.f32	s10, s28, s13
 80054cc:	ee6f 0a23 	vmul.f32	s1, s30, s7
 80054d0:	ee2a 3a21 	vmul.f32	s6, s20, s3
 80054d4:	ee39 1a01 	vadd.f32	s2, s18, s2
 80054d8:	ee6a 6a26 	vmul.f32	s13, s20, s13
 80054dc:	ee2b 9a87 	vmul.f32	s18, s23, s14
 80054e0:	ee6b 3aa3 	vmul.f32	s7, s23, s7
 80054e4:	ee2f 7a07 	vmul.f32	s14, s30, s14
 80054e8:	ee6f 1a84 	vmul.f32	s3, s31, s8
 80054ec:	ee35 3a03 	vadd.f32	s6, s10, s6
 80054f0:	ee72 6a66 	vsub.f32	s13, s4, s13
 80054f4:	ee2c 5a04 	vmul.f32	s10, s24, s8
 80054f8:	ee2f 2a88 	vmul.f32	s4, s31, s16
 80054fc:	ed9d 4a02 	vldr	s8, [sp, #8]
 8005500:	ed82 1a01 	vstr	s2, [r2, #4]
 8005504:	ee77 3a63 	vsub.f32	s7, s14, s7
 8005508:	ee2c 8a08 	vmul.f32	s16, s24, s16
 800550c:	ed9d 7a01 	vldr	s14, [sp, #4]
 8005510:	ed81 3a00 	vstr	s6, [r1]
 8005514:	ee30 9a89 	vadd.f32	s18, s1, s18
 8005518:	ee32 2a05 	vadd.f32	s4, s4, s10
 800551c:	ee6d 0a22 	vmul.f32	s1, s26, s5
 8005520:	ee31 8ac8 	vsub.f32	s16, s3, s16
 8005524:	ee67 2a22 	vmul.f32	s5, s14, s5
 8005528:	ee64 1a00 	vmul.f32	s3, s8, s0
 800552c:	ee27 7a24 	vmul.f32	s14, s14, s9
 8005530:	ee2c 5aa8 	vmul.f32	s10, s25, s17
 8005534:	ee6d 4a24 	vmul.f32	s9, s26, s9
 8005538:	ee64 8a28 	vmul.f32	s17, s8, s17
 800553c:	ed9d 4a00 	vldr	s8, [sp]
 8005540:	edc1 6a01 	vstr	s13, [r1, #4]
 8005544:	ee74 2ae2 	vsub.f32	s5, s9, s5
 8005548:	ee6d 4aa9 	vmul.f32	s9, s27, s19
 800554c:	ee64 9a29 	vmul.f32	s19, s8, s19
 8005550:	ee24 4a25 	vmul.f32	s8, s8, s11
 8005554:	ee30 7a87 	vadd.f32	s14, s1, s14
 8005558:	ee74 4a84 	vadd.f32	s9, s9, s8
 800555c:	ee6e 0aa7 	vmul.f32	s1, s29, s15
 8005560:	ee2a 4a86 	vmul.f32	s8, s21, s12
 8005564:	ee2c 0a80 	vmul.f32	s0, s25, s0
 8005568:	ee6d 5aa5 	vmul.f32	s11, s27, s11
 800556c:	ee6a 7aa7 	vmul.f32	s15, s21, s15
 8005570:	ee2e 6a86 	vmul.f32	s12, s29, s12
 8005574:	ee75 1a21 	vadd.f32	s3, s10, s3
 8005578:	ee30 0a68 	vsub.f32	s0, s0, s17
 800557c:	ee75 9ae9 	vsub.f32	s19, s11, s19
 8005580:	ee70 0a84 	vadd.f32	s1, s1, s8
 8005584:	ee36 6a67 	vsub.f32	s12, s12, s15
 8005588:	44d9      	add	r9, fp
 800558a:	45ca      	cmp	sl, r9
 800558c:	ed84 9a00 	vstr	s18, [r4]
 8005590:	edc4 3a01 	vstr	s7, [r4, #4]
 8005594:	441a      	add	r2, r3
 8005596:	ed07 7a01 	vstr	s14, [r7, #-4]
 800559a:	edc7 2a00 	vstr	s5, [r7]
 800559e:	4419      	add	r1, r3
 80055a0:	ed80 2a00 	vstr	s4, [r0]
 80055a4:	ed80 8a01 	vstr	s16, [r0, #4]
 80055a8:	441c      	add	r4, r3
 80055aa:	ed48 1a01 	vstr	s3, [r8, #-4]
 80055ae:	ed88 0a00 	vstr	s0, [r8]
 80055b2:	441f      	add	r7, r3
 80055b4:	ed46 4a01 	vstr	s9, [r6, #-4]
 80055b8:	4418      	add	r0, r3
 80055ba:	edc6 9a00 	vstr	s19, [r6]
 80055be:	4498      	add	r8, r3
 80055c0:	edc5 0a00 	vstr	s1, [r5]
 80055c4:	ed85 6a01 	vstr	s12, [r5, #4]
 80055c8:	441e      	add	r6, r3
 80055ca:	441d      	add	r5, r3
 80055cc:	f63f aeea 	bhi.w	80053a4 <arm_radix8_butterfly_f32+0x328>
 80055d0:	9a03      	ldr	r2, [sp, #12]
 80055d2:	9818      	ldr	r0, [sp, #96]	@ 0x60
 80055d4:	3201      	adds	r2, #1
 80055d6:	4611      	mov	r1, r2
 80055d8:	9203      	str	r2, [sp, #12]
 80055da:	9a04      	ldr	r2, [sp, #16]
 80055dc:	4402      	add	r2, r0
 80055de:	9204      	str	r2, [sp, #16]
 80055e0:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 80055e2:	9a05      	ldr	r2, [sp, #20]
 80055e4:	4402      	add	r2, r0
 80055e6:	9205      	str	r2, [sp, #20]
 80055e8:	9812      	ldr	r0, [sp, #72]	@ 0x48
 80055ea:	9a07      	ldr	r2, [sp, #28]
 80055ec:	4402      	add	r2, r0
 80055ee:	9207      	str	r2, [sp, #28]
 80055f0:	9816      	ldr	r0, [sp, #88]	@ 0x58
 80055f2:	9a06      	ldr	r2, [sp, #24]
 80055f4:	4402      	add	r2, r0
 80055f6:	9206      	str	r2, [sp, #24]
 80055f8:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 80055fa:	4496      	add	lr, r2
 80055fc:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 80055fe:	4494      	add	ip, r2
 8005600:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8005602:	3208      	adds	r2, #8
 8005604:	920f      	str	r2, [sp, #60]	@ 0x3c
 8005606:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8005608:	3208      	adds	r2, #8
 800560a:	920e      	str	r2, [sp, #56]	@ 0x38
 800560c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800560e:	3208      	adds	r2, #8
 8005610:	920d      	str	r2, [sp, #52]	@ 0x34
 8005612:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8005614:	3208      	adds	r2, #8
 8005616:	920c      	str	r2, [sp, #48]	@ 0x30
 8005618:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800561a:	3208      	adds	r2, #8
 800561c:	920b      	str	r2, [sp, #44]	@ 0x2c
 800561e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8005620:	3208      	adds	r2, #8
 8005622:	920a      	str	r2, [sp, #40]	@ 0x28
 8005624:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005626:	3208      	adds	r2, #8
 8005628:	9209      	str	r2, [sp, #36]	@ 0x24
 800562a:	9a08      	ldr	r2, [sp, #32]
 800562c:	3208      	adds	r2, #8
 800562e:	9208      	str	r2, [sp, #32]
 8005630:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 8005632:	9811      	ldr	r0, [sp, #68]	@ 0x44
 8005634:	4288      	cmp	r0, r1
 8005636:	4622      	mov	r2, r4
 8005638:	d007      	beq.n	800564a <arm_radix8_butterfly_f32+0x5ce>
 800563a:	9817      	ldr	r0, [sp, #92]	@ 0x5c
 800563c:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8005640:	4621      	mov	r1, r4
 8005642:	4401      	add	r1, r0
 8005644:	9110      	str	r1, [sp, #64]	@ 0x40
 8005646:	9804      	ldr	r0, [sp, #16]
 8005648:	e67c      	b.n	8005344 <arm_radix8_butterfly_f32+0x2c8>
 800564a:	4683      	mov	fp, r0
 800564c:	f8bd 905c 	ldrh.w	r9, [sp, #92]	@ 0x5c
 8005650:	9f19      	ldr	r7, [sp, #100]	@ 0x64
 8005652:	e524      	b.n	800509e <arm_radix8_butterfly_f32+0x22>
 8005654:	b01d      	add	sp, #116	@ 0x74
 8005656:	ecbd 8b10 	vpop	{d8-d15}
 800565a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800565e:	bf00      	nop

08005660 <__cvt>:
 8005660:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005664:	ec57 6b10 	vmov	r6, r7, d0
 8005668:	2f00      	cmp	r7, #0
 800566a:	460c      	mov	r4, r1
 800566c:	4619      	mov	r1, r3
 800566e:	463b      	mov	r3, r7
 8005670:	bfbb      	ittet	lt
 8005672:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8005676:	461f      	movlt	r7, r3
 8005678:	2300      	movge	r3, #0
 800567a:	232d      	movlt	r3, #45	@ 0x2d
 800567c:	700b      	strb	r3, [r1, #0]
 800567e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005680:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8005684:	4691      	mov	r9, r2
 8005686:	f023 0820 	bic.w	r8, r3, #32
 800568a:	bfbc      	itt	lt
 800568c:	4632      	movlt	r2, r6
 800568e:	4616      	movlt	r6, r2
 8005690:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8005694:	d005      	beq.n	80056a2 <__cvt+0x42>
 8005696:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800569a:	d100      	bne.n	800569e <__cvt+0x3e>
 800569c:	3401      	adds	r4, #1
 800569e:	2102      	movs	r1, #2
 80056a0:	e000      	b.n	80056a4 <__cvt+0x44>
 80056a2:	2103      	movs	r1, #3
 80056a4:	ab03      	add	r3, sp, #12
 80056a6:	9301      	str	r3, [sp, #4]
 80056a8:	ab02      	add	r3, sp, #8
 80056aa:	9300      	str	r3, [sp, #0]
 80056ac:	ec47 6b10 	vmov	d0, r6, r7
 80056b0:	4653      	mov	r3, sl
 80056b2:	4622      	mov	r2, r4
 80056b4:	f001 f870 	bl	8006798 <_dtoa_r>
 80056b8:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 80056bc:	4605      	mov	r5, r0
 80056be:	d119      	bne.n	80056f4 <__cvt+0x94>
 80056c0:	f019 0f01 	tst.w	r9, #1
 80056c4:	d00e      	beq.n	80056e4 <__cvt+0x84>
 80056c6:	eb00 0904 	add.w	r9, r0, r4
 80056ca:	2200      	movs	r2, #0
 80056cc:	2300      	movs	r3, #0
 80056ce:	4630      	mov	r0, r6
 80056d0:	4639      	mov	r1, r7
 80056d2:	f7fb fa59 	bl	8000b88 <__aeabi_dcmpeq>
 80056d6:	b108      	cbz	r0, 80056dc <__cvt+0x7c>
 80056d8:	f8cd 900c 	str.w	r9, [sp, #12]
 80056dc:	2230      	movs	r2, #48	@ 0x30
 80056de:	9b03      	ldr	r3, [sp, #12]
 80056e0:	454b      	cmp	r3, r9
 80056e2:	d31e      	bcc.n	8005722 <__cvt+0xc2>
 80056e4:	9b03      	ldr	r3, [sp, #12]
 80056e6:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80056e8:	1b5b      	subs	r3, r3, r5
 80056ea:	4628      	mov	r0, r5
 80056ec:	6013      	str	r3, [r2, #0]
 80056ee:	b004      	add	sp, #16
 80056f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80056f4:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80056f8:	eb00 0904 	add.w	r9, r0, r4
 80056fc:	d1e5      	bne.n	80056ca <__cvt+0x6a>
 80056fe:	7803      	ldrb	r3, [r0, #0]
 8005700:	2b30      	cmp	r3, #48	@ 0x30
 8005702:	d10a      	bne.n	800571a <__cvt+0xba>
 8005704:	2200      	movs	r2, #0
 8005706:	2300      	movs	r3, #0
 8005708:	4630      	mov	r0, r6
 800570a:	4639      	mov	r1, r7
 800570c:	f7fb fa3c 	bl	8000b88 <__aeabi_dcmpeq>
 8005710:	b918      	cbnz	r0, 800571a <__cvt+0xba>
 8005712:	f1c4 0401 	rsb	r4, r4, #1
 8005716:	f8ca 4000 	str.w	r4, [sl]
 800571a:	f8da 3000 	ldr.w	r3, [sl]
 800571e:	4499      	add	r9, r3
 8005720:	e7d3      	b.n	80056ca <__cvt+0x6a>
 8005722:	1c59      	adds	r1, r3, #1
 8005724:	9103      	str	r1, [sp, #12]
 8005726:	701a      	strb	r2, [r3, #0]
 8005728:	e7d9      	b.n	80056de <__cvt+0x7e>

0800572a <__exponent>:
 800572a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800572c:	2900      	cmp	r1, #0
 800572e:	bfba      	itte	lt
 8005730:	4249      	neglt	r1, r1
 8005732:	232d      	movlt	r3, #45	@ 0x2d
 8005734:	232b      	movge	r3, #43	@ 0x2b
 8005736:	2909      	cmp	r1, #9
 8005738:	7002      	strb	r2, [r0, #0]
 800573a:	7043      	strb	r3, [r0, #1]
 800573c:	dd29      	ble.n	8005792 <__exponent+0x68>
 800573e:	f10d 0307 	add.w	r3, sp, #7
 8005742:	461d      	mov	r5, r3
 8005744:	270a      	movs	r7, #10
 8005746:	461a      	mov	r2, r3
 8005748:	fbb1 f6f7 	udiv	r6, r1, r7
 800574c:	fb07 1416 	mls	r4, r7, r6, r1
 8005750:	3430      	adds	r4, #48	@ 0x30
 8005752:	f802 4c01 	strb.w	r4, [r2, #-1]
 8005756:	460c      	mov	r4, r1
 8005758:	2c63      	cmp	r4, #99	@ 0x63
 800575a:	f103 33ff 	add.w	r3, r3, #4294967295
 800575e:	4631      	mov	r1, r6
 8005760:	dcf1      	bgt.n	8005746 <__exponent+0x1c>
 8005762:	3130      	adds	r1, #48	@ 0x30
 8005764:	1e94      	subs	r4, r2, #2
 8005766:	f803 1c01 	strb.w	r1, [r3, #-1]
 800576a:	1c41      	adds	r1, r0, #1
 800576c:	4623      	mov	r3, r4
 800576e:	42ab      	cmp	r3, r5
 8005770:	d30a      	bcc.n	8005788 <__exponent+0x5e>
 8005772:	f10d 0309 	add.w	r3, sp, #9
 8005776:	1a9b      	subs	r3, r3, r2
 8005778:	42ac      	cmp	r4, r5
 800577a:	bf88      	it	hi
 800577c:	2300      	movhi	r3, #0
 800577e:	3302      	adds	r3, #2
 8005780:	4403      	add	r3, r0
 8005782:	1a18      	subs	r0, r3, r0
 8005784:	b003      	add	sp, #12
 8005786:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005788:	f813 6b01 	ldrb.w	r6, [r3], #1
 800578c:	f801 6f01 	strb.w	r6, [r1, #1]!
 8005790:	e7ed      	b.n	800576e <__exponent+0x44>
 8005792:	2330      	movs	r3, #48	@ 0x30
 8005794:	3130      	adds	r1, #48	@ 0x30
 8005796:	7083      	strb	r3, [r0, #2]
 8005798:	70c1      	strb	r1, [r0, #3]
 800579a:	1d03      	adds	r3, r0, #4
 800579c:	e7f1      	b.n	8005782 <__exponent+0x58>
	...

080057a0 <_printf_float>:
 80057a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80057a4:	b08d      	sub	sp, #52	@ 0x34
 80057a6:	460c      	mov	r4, r1
 80057a8:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 80057ac:	4616      	mov	r6, r2
 80057ae:	461f      	mov	r7, r3
 80057b0:	4605      	mov	r5, r0
 80057b2:	f000 fee9 	bl	8006588 <_localeconv_r>
 80057b6:	6803      	ldr	r3, [r0, #0]
 80057b8:	9304      	str	r3, [sp, #16]
 80057ba:	4618      	mov	r0, r3
 80057bc:	f7fa fdb8 	bl	8000330 <strlen>
 80057c0:	2300      	movs	r3, #0
 80057c2:	930a      	str	r3, [sp, #40]	@ 0x28
 80057c4:	f8d8 3000 	ldr.w	r3, [r8]
 80057c8:	9005      	str	r0, [sp, #20]
 80057ca:	3307      	adds	r3, #7
 80057cc:	f023 0307 	bic.w	r3, r3, #7
 80057d0:	f103 0208 	add.w	r2, r3, #8
 80057d4:	f894 a018 	ldrb.w	sl, [r4, #24]
 80057d8:	f8d4 b000 	ldr.w	fp, [r4]
 80057dc:	f8c8 2000 	str.w	r2, [r8]
 80057e0:	e9d3 8900 	ldrd	r8, r9, [r3]
 80057e4:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 80057e8:	9307      	str	r3, [sp, #28]
 80057ea:	f8cd 8018 	str.w	r8, [sp, #24]
 80057ee:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 80057f2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80057f6:	4b9c      	ldr	r3, [pc, #624]	@ (8005a68 <_printf_float+0x2c8>)
 80057f8:	f04f 32ff 	mov.w	r2, #4294967295
 80057fc:	f7fb f9f6 	bl	8000bec <__aeabi_dcmpun>
 8005800:	bb70      	cbnz	r0, 8005860 <_printf_float+0xc0>
 8005802:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005806:	4b98      	ldr	r3, [pc, #608]	@ (8005a68 <_printf_float+0x2c8>)
 8005808:	f04f 32ff 	mov.w	r2, #4294967295
 800580c:	f7fb f9d0 	bl	8000bb0 <__aeabi_dcmple>
 8005810:	bb30      	cbnz	r0, 8005860 <_printf_float+0xc0>
 8005812:	2200      	movs	r2, #0
 8005814:	2300      	movs	r3, #0
 8005816:	4640      	mov	r0, r8
 8005818:	4649      	mov	r1, r9
 800581a:	f7fb f9bf 	bl	8000b9c <__aeabi_dcmplt>
 800581e:	b110      	cbz	r0, 8005826 <_printf_float+0x86>
 8005820:	232d      	movs	r3, #45	@ 0x2d
 8005822:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005826:	4a91      	ldr	r2, [pc, #580]	@ (8005a6c <_printf_float+0x2cc>)
 8005828:	4b91      	ldr	r3, [pc, #580]	@ (8005a70 <_printf_float+0x2d0>)
 800582a:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800582e:	bf8c      	ite	hi
 8005830:	4690      	movhi	r8, r2
 8005832:	4698      	movls	r8, r3
 8005834:	2303      	movs	r3, #3
 8005836:	6123      	str	r3, [r4, #16]
 8005838:	f02b 0304 	bic.w	r3, fp, #4
 800583c:	6023      	str	r3, [r4, #0]
 800583e:	f04f 0900 	mov.w	r9, #0
 8005842:	9700      	str	r7, [sp, #0]
 8005844:	4633      	mov	r3, r6
 8005846:	aa0b      	add	r2, sp, #44	@ 0x2c
 8005848:	4621      	mov	r1, r4
 800584a:	4628      	mov	r0, r5
 800584c:	f000 f9d2 	bl	8005bf4 <_printf_common>
 8005850:	3001      	adds	r0, #1
 8005852:	f040 808d 	bne.w	8005970 <_printf_float+0x1d0>
 8005856:	f04f 30ff 	mov.w	r0, #4294967295
 800585a:	b00d      	add	sp, #52	@ 0x34
 800585c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005860:	4642      	mov	r2, r8
 8005862:	464b      	mov	r3, r9
 8005864:	4640      	mov	r0, r8
 8005866:	4649      	mov	r1, r9
 8005868:	f7fb f9c0 	bl	8000bec <__aeabi_dcmpun>
 800586c:	b140      	cbz	r0, 8005880 <_printf_float+0xe0>
 800586e:	464b      	mov	r3, r9
 8005870:	2b00      	cmp	r3, #0
 8005872:	bfbc      	itt	lt
 8005874:	232d      	movlt	r3, #45	@ 0x2d
 8005876:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800587a:	4a7e      	ldr	r2, [pc, #504]	@ (8005a74 <_printf_float+0x2d4>)
 800587c:	4b7e      	ldr	r3, [pc, #504]	@ (8005a78 <_printf_float+0x2d8>)
 800587e:	e7d4      	b.n	800582a <_printf_float+0x8a>
 8005880:	6863      	ldr	r3, [r4, #4]
 8005882:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8005886:	9206      	str	r2, [sp, #24]
 8005888:	1c5a      	adds	r2, r3, #1
 800588a:	d13b      	bne.n	8005904 <_printf_float+0x164>
 800588c:	2306      	movs	r3, #6
 800588e:	6063      	str	r3, [r4, #4]
 8005890:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8005894:	2300      	movs	r3, #0
 8005896:	6022      	str	r2, [r4, #0]
 8005898:	9303      	str	r3, [sp, #12]
 800589a:	ab0a      	add	r3, sp, #40	@ 0x28
 800589c:	e9cd a301 	strd	sl, r3, [sp, #4]
 80058a0:	ab09      	add	r3, sp, #36	@ 0x24
 80058a2:	9300      	str	r3, [sp, #0]
 80058a4:	6861      	ldr	r1, [r4, #4]
 80058a6:	ec49 8b10 	vmov	d0, r8, r9
 80058aa:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 80058ae:	4628      	mov	r0, r5
 80058b0:	f7ff fed6 	bl	8005660 <__cvt>
 80058b4:	9b06      	ldr	r3, [sp, #24]
 80058b6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80058b8:	2b47      	cmp	r3, #71	@ 0x47
 80058ba:	4680      	mov	r8, r0
 80058bc:	d129      	bne.n	8005912 <_printf_float+0x172>
 80058be:	1cc8      	adds	r0, r1, #3
 80058c0:	db02      	blt.n	80058c8 <_printf_float+0x128>
 80058c2:	6863      	ldr	r3, [r4, #4]
 80058c4:	4299      	cmp	r1, r3
 80058c6:	dd41      	ble.n	800594c <_printf_float+0x1ac>
 80058c8:	f1aa 0a02 	sub.w	sl, sl, #2
 80058cc:	fa5f fa8a 	uxtb.w	sl, sl
 80058d0:	3901      	subs	r1, #1
 80058d2:	4652      	mov	r2, sl
 80058d4:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 80058d8:	9109      	str	r1, [sp, #36]	@ 0x24
 80058da:	f7ff ff26 	bl	800572a <__exponent>
 80058de:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80058e0:	1813      	adds	r3, r2, r0
 80058e2:	2a01      	cmp	r2, #1
 80058e4:	4681      	mov	r9, r0
 80058e6:	6123      	str	r3, [r4, #16]
 80058e8:	dc02      	bgt.n	80058f0 <_printf_float+0x150>
 80058ea:	6822      	ldr	r2, [r4, #0]
 80058ec:	07d2      	lsls	r2, r2, #31
 80058ee:	d501      	bpl.n	80058f4 <_printf_float+0x154>
 80058f0:	3301      	adds	r3, #1
 80058f2:	6123      	str	r3, [r4, #16]
 80058f4:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	d0a2      	beq.n	8005842 <_printf_float+0xa2>
 80058fc:	232d      	movs	r3, #45	@ 0x2d
 80058fe:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005902:	e79e      	b.n	8005842 <_printf_float+0xa2>
 8005904:	9a06      	ldr	r2, [sp, #24]
 8005906:	2a47      	cmp	r2, #71	@ 0x47
 8005908:	d1c2      	bne.n	8005890 <_printf_float+0xf0>
 800590a:	2b00      	cmp	r3, #0
 800590c:	d1c0      	bne.n	8005890 <_printf_float+0xf0>
 800590e:	2301      	movs	r3, #1
 8005910:	e7bd      	b.n	800588e <_printf_float+0xee>
 8005912:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8005916:	d9db      	bls.n	80058d0 <_printf_float+0x130>
 8005918:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800591c:	d118      	bne.n	8005950 <_printf_float+0x1b0>
 800591e:	2900      	cmp	r1, #0
 8005920:	6863      	ldr	r3, [r4, #4]
 8005922:	dd0b      	ble.n	800593c <_printf_float+0x19c>
 8005924:	6121      	str	r1, [r4, #16]
 8005926:	b913      	cbnz	r3, 800592e <_printf_float+0x18e>
 8005928:	6822      	ldr	r2, [r4, #0]
 800592a:	07d0      	lsls	r0, r2, #31
 800592c:	d502      	bpl.n	8005934 <_printf_float+0x194>
 800592e:	3301      	adds	r3, #1
 8005930:	440b      	add	r3, r1
 8005932:	6123      	str	r3, [r4, #16]
 8005934:	65a1      	str	r1, [r4, #88]	@ 0x58
 8005936:	f04f 0900 	mov.w	r9, #0
 800593a:	e7db      	b.n	80058f4 <_printf_float+0x154>
 800593c:	b913      	cbnz	r3, 8005944 <_printf_float+0x1a4>
 800593e:	6822      	ldr	r2, [r4, #0]
 8005940:	07d2      	lsls	r2, r2, #31
 8005942:	d501      	bpl.n	8005948 <_printf_float+0x1a8>
 8005944:	3302      	adds	r3, #2
 8005946:	e7f4      	b.n	8005932 <_printf_float+0x192>
 8005948:	2301      	movs	r3, #1
 800594a:	e7f2      	b.n	8005932 <_printf_float+0x192>
 800594c:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8005950:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005952:	4299      	cmp	r1, r3
 8005954:	db05      	blt.n	8005962 <_printf_float+0x1c2>
 8005956:	6823      	ldr	r3, [r4, #0]
 8005958:	6121      	str	r1, [r4, #16]
 800595a:	07d8      	lsls	r0, r3, #31
 800595c:	d5ea      	bpl.n	8005934 <_printf_float+0x194>
 800595e:	1c4b      	adds	r3, r1, #1
 8005960:	e7e7      	b.n	8005932 <_printf_float+0x192>
 8005962:	2900      	cmp	r1, #0
 8005964:	bfd4      	ite	le
 8005966:	f1c1 0202 	rsble	r2, r1, #2
 800596a:	2201      	movgt	r2, #1
 800596c:	4413      	add	r3, r2
 800596e:	e7e0      	b.n	8005932 <_printf_float+0x192>
 8005970:	6823      	ldr	r3, [r4, #0]
 8005972:	055a      	lsls	r2, r3, #21
 8005974:	d407      	bmi.n	8005986 <_printf_float+0x1e6>
 8005976:	6923      	ldr	r3, [r4, #16]
 8005978:	4642      	mov	r2, r8
 800597a:	4631      	mov	r1, r6
 800597c:	4628      	mov	r0, r5
 800597e:	47b8      	blx	r7
 8005980:	3001      	adds	r0, #1
 8005982:	d12b      	bne.n	80059dc <_printf_float+0x23c>
 8005984:	e767      	b.n	8005856 <_printf_float+0xb6>
 8005986:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800598a:	f240 80dd 	bls.w	8005b48 <_printf_float+0x3a8>
 800598e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8005992:	2200      	movs	r2, #0
 8005994:	2300      	movs	r3, #0
 8005996:	f7fb f8f7 	bl	8000b88 <__aeabi_dcmpeq>
 800599a:	2800      	cmp	r0, #0
 800599c:	d033      	beq.n	8005a06 <_printf_float+0x266>
 800599e:	4a37      	ldr	r2, [pc, #220]	@ (8005a7c <_printf_float+0x2dc>)
 80059a0:	2301      	movs	r3, #1
 80059a2:	4631      	mov	r1, r6
 80059a4:	4628      	mov	r0, r5
 80059a6:	47b8      	blx	r7
 80059a8:	3001      	adds	r0, #1
 80059aa:	f43f af54 	beq.w	8005856 <_printf_float+0xb6>
 80059ae:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 80059b2:	4543      	cmp	r3, r8
 80059b4:	db02      	blt.n	80059bc <_printf_float+0x21c>
 80059b6:	6823      	ldr	r3, [r4, #0]
 80059b8:	07d8      	lsls	r0, r3, #31
 80059ba:	d50f      	bpl.n	80059dc <_printf_float+0x23c>
 80059bc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80059c0:	4631      	mov	r1, r6
 80059c2:	4628      	mov	r0, r5
 80059c4:	47b8      	blx	r7
 80059c6:	3001      	adds	r0, #1
 80059c8:	f43f af45 	beq.w	8005856 <_printf_float+0xb6>
 80059cc:	f04f 0900 	mov.w	r9, #0
 80059d0:	f108 38ff 	add.w	r8, r8, #4294967295
 80059d4:	f104 0a1a 	add.w	sl, r4, #26
 80059d8:	45c8      	cmp	r8, r9
 80059da:	dc09      	bgt.n	80059f0 <_printf_float+0x250>
 80059dc:	6823      	ldr	r3, [r4, #0]
 80059de:	079b      	lsls	r3, r3, #30
 80059e0:	f100 8103 	bmi.w	8005bea <_printf_float+0x44a>
 80059e4:	68e0      	ldr	r0, [r4, #12]
 80059e6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80059e8:	4298      	cmp	r0, r3
 80059ea:	bfb8      	it	lt
 80059ec:	4618      	movlt	r0, r3
 80059ee:	e734      	b.n	800585a <_printf_float+0xba>
 80059f0:	2301      	movs	r3, #1
 80059f2:	4652      	mov	r2, sl
 80059f4:	4631      	mov	r1, r6
 80059f6:	4628      	mov	r0, r5
 80059f8:	47b8      	blx	r7
 80059fa:	3001      	adds	r0, #1
 80059fc:	f43f af2b 	beq.w	8005856 <_printf_float+0xb6>
 8005a00:	f109 0901 	add.w	r9, r9, #1
 8005a04:	e7e8      	b.n	80059d8 <_printf_float+0x238>
 8005a06:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005a08:	2b00      	cmp	r3, #0
 8005a0a:	dc39      	bgt.n	8005a80 <_printf_float+0x2e0>
 8005a0c:	4a1b      	ldr	r2, [pc, #108]	@ (8005a7c <_printf_float+0x2dc>)
 8005a0e:	2301      	movs	r3, #1
 8005a10:	4631      	mov	r1, r6
 8005a12:	4628      	mov	r0, r5
 8005a14:	47b8      	blx	r7
 8005a16:	3001      	adds	r0, #1
 8005a18:	f43f af1d 	beq.w	8005856 <_printf_float+0xb6>
 8005a1c:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8005a20:	ea59 0303 	orrs.w	r3, r9, r3
 8005a24:	d102      	bne.n	8005a2c <_printf_float+0x28c>
 8005a26:	6823      	ldr	r3, [r4, #0]
 8005a28:	07d9      	lsls	r1, r3, #31
 8005a2a:	d5d7      	bpl.n	80059dc <_printf_float+0x23c>
 8005a2c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005a30:	4631      	mov	r1, r6
 8005a32:	4628      	mov	r0, r5
 8005a34:	47b8      	blx	r7
 8005a36:	3001      	adds	r0, #1
 8005a38:	f43f af0d 	beq.w	8005856 <_printf_float+0xb6>
 8005a3c:	f04f 0a00 	mov.w	sl, #0
 8005a40:	f104 0b1a 	add.w	fp, r4, #26
 8005a44:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005a46:	425b      	negs	r3, r3
 8005a48:	4553      	cmp	r3, sl
 8005a4a:	dc01      	bgt.n	8005a50 <_printf_float+0x2b0>
 8005a4c:	464b      	mov	r3, r9
 8005a4e:	e793      	b.n	8005978 <_printf_float+0x1d8>
 8005a50:	2301      	movs	r3, #1
 8005a52:	465a      	mov	r2, fp
 8005a54:	4631      	mov	r1, r6
 8005a56:	4628      	mov	r0, r5
 8005a58:	47b8      	blx	r7
 8005a5a:	3001      	adds	r0, #1
 8005a5c:	f43f aefb 	beq.w	8005856 <_printf_float+0xb6>
 8005a60:	f10a 0a01 	add.w	sl, sl, #1
 8005a64:	e7ee      	b.n	8005a44 <_printf_float+0x2a4>
 8005a66:	bf00      	nop
 8005a68:	7fefffff 	.word	0x7fefffff
 8005a6c:	0800dc14 	.word	0x0800dc14
 8005a70:	0800dc10 	.word	0x0800dc10
 8005a74:	0800dc1c 	.word	0x0800dc1c
 8005a78:	0800dc18 	.word	0x0800dc18
 8005a7c:	0800dc20 	.word	0x0800dc20
 8005a80:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8005a82:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8005a86:	4553      	cmp	r3, sl
 8005a88:	bfa8      	it	ge
 8005a8a:	4653      	movge	r3, sl
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	4699      	mov	r9, r3
 8005a90:	dc36      	bgt.n	8005b00 <_printf_float+0x360>
 8005a92:	f04f 0b00 	mov.w	fp, #0
 8005a96:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005a9a:	f104 021a 	add.w	r2, r4, #26
 8005a9e:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8005aa0:	9306      	str	r3, [sp, #24]
 8005aa2:	eba3 0309 	sub.w	r3, r3, r9
 8005aa6:	455b      	cmp	r3, fp
 8005aa8:	dc31      	bgt.n	8005b0e <_printf_float+0x36e>
 8005aaa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005aac:	459a      	cmp	sl, r3
 8005aae:	dc3a      	bgt.n	8005b26 <_printf_float+0x386>
 8005ab0:	6823      	ldr	r3, [r4, #0]
 8005ab2:	07da      	lsls	r2, r3, #31
 8005ab4:	d437      	bmi.n	8005b26 <_printf_float+0x386>
 8005ab6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005ab8:	ebaa 0903 	sub.w	r9, sl, r3
 8005abc:	9b06      	ldr	r3, [sp, #24]
 8005abe:	ebaa 0303 	sub.w	r3, sl, r3
 8005ac2:	4599      	cmp	r9, r3
 8005ac4:	bfa8      	it	ge
 8005ac6:	4699      	movge	r9, r3
 8005ac8:	f1b9 0f00 	cmp.w	r9, #0
 8005acc:	dc33      	bgt.n	8005b36 <_printf_float+0x396>
 8005ace:	f04f 0800 	mov.w	r8, #0
 8005ad2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005ad6:	f104 0b1a 	add.w	fp, r4, #26
 8005ada:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005adc:	ebaa 0303 	sub.w	r3, sl, r3
 8005ae0:	eba3 0309 	sub.w	r3, r3, r9
 8005ae4:	4543      	cmp	r3, r8
 8005ae6:	f77f af79 	ble.w	80059dc <_printf_float+0x23c>
 8005aea:	2301      	movs	r3, #1
 8005aec:	465a      	mov	r2, fp
 8005aee:	4631      	mov	r1, r6
 8005af0:	4628      	mov	r0, r5
 8005af2:	47b8      	blx	r7
 8005af4:	3001      	adds	r0, #1
 8005af6:	f43f aeae 	beq.w	8005856 <_printf_float+0xb6>
 8005afa:	f108 0801 	add.w	r8, r8, #1
 8005afe:	e7ec      	b.n	8005ada <_printf_float+0x33a>
 8005b00:	4642      	mov	r2, r8
 8005b02:	4631      	mov	r1, r6
 8005b04:	4628      	mov	r0, r5
 8005b06:	47b8      	blx	r7
 8005b08:	3001      	adds	r0, #1
 8005b0a:	d1c2      	bne.n	8005a92 <_printf_float+0x2f2>
 8005b0c:	e6a3      	b.n	8005856 <_printf_float+0xb6>
 8005b0e:	2301      	movs	r3, #1
 8005b10:	4631      	mov	r1, r6
 8005b12:	4628      	mov	r0, r5
 8005b14:	9206      	str	r2, [sp, #24]
 8005b16:	47b8      	blx	r7
 8005b18:	3001      	adds	r0, #1
 8005b1a:	f43f ae9c 	beq.w	8005856 <_printf_float+0xb6>
 8005b1e:	9a06      	ldr	r2, [sp, #24]
 8005b20:	f10b 0b01 	add.w	fp, fp, #1
 8005b24:	e7bb      	b.n	8005a9e <_printf_float+0x2fe>
 8005b26:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005b2a:	4631      	mov	r1, r6
 8005b2c:	4628      	mov	r0, r5
 8005b2e:	47b8      	blx	r7
 8005b30:	3001      	adds	r0, #1
 8005b32:	d1c0      	bne.n	8005ab6 <_printf_float+0x316>
 8005b34:	e68f      	b.n	8005856 <_printf_float+0xb6>
 8005b36:	9a06      	ldr	r2, [sp, #24]
 8005b38:	464b      	mov	r3, r9
 8005b3a:	4442      	add	r2, r8
 8005b3c:	4631      	mov	r1, r6
 8005b3e:	4628      	mov	r0, r5
 8005b40:	47b8      	blx	r7
 8005b42:	3001      	adds	r0, #1
 8005b44:	d1c3      	bne.n	8005ace <_printf_float+0x32e>
 8005b46:	e686      	b.n	8005856 <_printf_float+0xb6>
 8005b48:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8005b4c:	f1ba 0f01 	cmp.w	sl, #1
 8005b50:	dc01      	bgt.n	8005b56 <_printf_float+0x3b6>
 8005b52:	07db      	lsls	r3, r3, #31
 8005b54:	d536      	bpl.n	8005bc4 <_printf_float+0x424>
 8005b56:	2301      	movs	r3, #1
 8005b58:	4642      	mov	r2, r8
 8005b5a:	4631      	mov	r1, r6
 8005b5c:	4628      	mov	r0, r5
 8005b5e:	47b8      	blx	r7
 8005b60:	3001      	adds	r0, #1
 8005b62:	f43f ae78 	beq.w	8005856 <_printf_float+0xb6>
 8005b66:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005b6a:	4631      	mov	r1, r6
 8005b6c:	4628      	mov	r0, r5
 8005b6e:	47b8      	blx	r7
 8005b70:	3001      	adds	r0, #1
 8005b72:	f43f ae70 	beq.w	8005856 <_printf_float+0xb6>
 8005b76:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8005b7a:	2200      	movs	r2, #0
 8005b7c:	2300      	movs	r3, #0
 8005b7e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005b82:	f7fb f801 	bl	8000b88 <__aeabi_dcmpeq>
 8005b86:	b9c0      	cbnz	r0, 8005bba <_printf_float+0x41a>
 8005b88:	4653      	mov	r3, sl
 8005b8a:	f108 0201 	add.w	r2, r8, #1
 8005b8e:	4631      	mov	r1, r6
 8005b90:	4628      	mov	r0, r5
 8005b92:	47b8      	blx	r7
 8005b94:	3001      	adds	r0, #1
 8005b96:	d10c      	bne.n	8005bb2 <_printf_float+0x412>
 8005b98:	e65d      	b.n	8005856 <_printf_float+0xb6>
 8005b9a:	2301      	movs	r3, #1
 8005b9c:	465a      	mov	r2, fp
 8005b9e:	4631      	mov	r1, r6
 8005ba0:	4628      	mov	r0, r5
 8005ba2:	47b8      	blx	r7
 8005ba4:	3001      	adds	r0, #1
 8005ba6:	f43f ae56 	beq.w	8005856 <_printf_float+0xb6>
 8005baa:	f108 0801 	add.w	r8, r8, #1
 8005bae:	45d0      	cmp	r8, sl
 8005bb0:	dbf3      	blt.n	8005b9a <_printf_float+0x3fa>
 8005bb2:	464b      	mov	r3, r9
 8005bb4:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8005bb8:	e6df      	b.n	800597a <_printf_float+0x1da>
 8005bba:	f04f 0800 	mov.w	r8, #0
 8005bbe:	f104 0b1a 	add.w	fp, r4, #26
 8005bc2:	e7f4      	b.n	8005bae <_printf_float+0x40e>
 8005bc4:	2301      	movs	r3, #1
 8005bc6:	4642      	mov	r2, r8
 8005bc8:	e7e1      	b.n	8005b8e <_printf_float+0x3ee>
 8005bca:	2301      	movs	r3, #1
 8005bcc:	464a      	mov	r2, r9
 8005bce:	4631      	mov	r1, r6
 8005bd0:	4628      	mov	r0, r5
 8005bd2:	47b8      	blx	r7
 8005bd4:	3001      	adds	r0, #1
 8005bd6:	f43f ae3e 	beq.w	8005856 <_printf_float+0xb6>
 8005bda:	f108 0801 	add.w	r8, r8, #1
 8005bde:	68e3      	ldr	r3, [r4, #12]
 8005be0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8005be2:	1a5b      	subs	r3, r3, r1
 8005be4:	4543      	cmp	r3, r8
 8005be6:	dcf0      	bgt.n	8005bca <_printf_float+0x42a>
 8005be8:	e6fc      	b.n	80059e4 <_printf_float+0x244>
 8005bea:	f04f 0800 	mov.w	r8, #0
 8005bee:	f104 0919 	add.w	r9, r4, #25
 8005bf2:	e7f4      	b.n	8005bde <_printf_float+0x43e>

08005bf4 <_printf_common>:
 8005bf4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005bf8:	4616      	mov	r6, r2
 8005bfa:	4698      	mov	r8, r3
 8005bfc:	688a      	ldr	r2, [r1, #8]
 8005bfe:	690b      	ldr	r3, [r1, #16]
 8005c00:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005c04:	4293      	cmp	r3, r2
 8005c06:	bfb8      	it	lt
 8005c08:	4613      	movlt	r3, r2
 8005c0a:	6033      	str	r3, [r6, #0]
 8005c0c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8005c10:	4607      	mov	r7, r0
 8005c12:	460c      	mov	r4, r1
 8005c14:	b10a      	cbz	r2, 8005c1a <_printf_common+0x26>
 8005c16:	3301      	adds	r3, #1
 8005c18:	6033      	str	r3, [r6, #0]
 8005c1a:	6823      	ldr	r3, [r4, #0]
 8005c1c:	0699      	lsls	r1, r3, #26
 8005c1e:	bf42      	ittt	mi
 8005c20:	6833      	ldrmi	r3, [r6, #0]
 8005c22:	3302      	addmi	r3, #2
 8005c24:	6033      	strmi	r3, [r6, #0]
 8005c26:	6825      	ldr	r5, [r4, #0]
 8005c28:	f015 0506 	ands.w	r5, r5, #6
 8005c2c:	d106      	bne.n	8005c3c <_printf_common+0x48>
 8005c2e:	f104 0a19 	add.w	sl, r4, #25
 8005c32:	68e3      	ldr	r3, [r4, #12]
 8005c34:	6832      	ldr	r2, [r6, #0]
 8005c36:	1a9b      	subs	r3, r3, r2
 8005c38:	42ab      	cmp	r3, r5
 8005c3a:	dc26      	bgt.n	8005c8a <_printf_common+0x96>
 8005c3c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8005c40:	6822      	ldr	r2, [r4, #0]
 8005c42:	3b00      	subs	r3, #0
 8005c44:	bf18      	it	ne
 8005c46:	2301      	movne	r3, #1
 8005c48:	0692      	lsls	r2, r2, #26
 8005c4a:	d42b      	bmi.n	8005ca4 <_printf_common+0xb0>
 8005c4c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8005c50:	4641      	mov	r1, r8
 8005c52:	4638      	mov	r0, r7
 8005c54:	47c8      	blx	r9
 8005c56:	3001      	adds	r0, #1
 8005c58:	d01e      	beq.n	8005c98 <_printf_common+0xa4>
 8005c5a:	6823      	ldr	r3, [r4, #0]
 8005c5c:	6922      	ldr	r2, [r4, #16]
 8005c5e:	f003 0306 	and.w	r3, r3, #6
 8005c62:	2b04      	cmp	r3, #4
 8005c64:	bf02      	ittt	eq
 8005c66:	68e5      	ldreq	r5, [r4, #12]
 8005c68:	6833      	ldreq	r3, [r6, #0]
 8005c6a:	1aed      	subeq	r5, r5, r3
 8005c6c:	68a3      	ldr	r3, [r4, #8]
 8005c6e:	bf0c      	ite	eq
 8005c70:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005c74:	2500      	movne	r5, #0
 8005c76:	4293      	cmp	r3, r2
 8005c78:	bfc4      	itt	gt
 8005c7a:	1a9b      	subgt	r3, r3, r2
 8005c7c:	18ed      	addgt	r5, r5, r3
 8005c7e:	2600      	movs	r6, #0
 8005c80:	341a      	adds	r4, #26
 8005c82:	42b5      	cmp	r5, r6
 8005c84:	d11a      	bne.n	8005cbc <_printf_common+0xc8>
 8005c86:	2000      	movs	r0, #0
 8005c88:	e008      	b.n	8005c9c <_printf_common+0xa8>
 8005c8a:	2301      	movs	r3, #1
 8005c8c:	4652      	mov	r2, sl
 8005c8e:	4641      	mov	r1, r8
 8005c90:	4638      	mov	r0, r7
 8005c92:	47c8      	blx	r9
 8005c94:	3001      	adds	r0, #1
 8005c96:	d103      	bne.n	8005ca0 <_printf_common+0xac>
 8005c98:	f04f 30ff 	mov.w	r0, #4294967295
 8005c9c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005ca0:	3501      	adds	r5, #1
 8005ca2:	e7c6      	b.n	8005c32 <_printf_common+0x3e>
 8005ca4:	18e1      	adds	r1, r4, r3
 8005ca6:	1c5a      	adds	r2, r3, #1
 8005ca8:	2030      	movs	r0, #48	@ 0x30
 8005caa:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8005cae:	4422      	add	r2, r4
 8005cb0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8005cb4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8005cb8:	3302      	adds	r3, #2
 8005cba:	e7c7      	b.n	8005c4c <_printf_common+0x58>
 8005cbc:	2301      	movs	r3, #1
 8005cbe:	4622      	mov	r2, r4
 8005cc0:	4641      	mov	r1, r8
 8005cc2:	4638      	mov	r0, r7
 8005cc4:	47c8      	blx	r9
 8005cc6:	3001      	adds	r0, #1
 8005cc8:	d0e6      	beq.n	8005c98 <_printf_common+0xa4>
 8005cca:	3601      	adds	r6, #1
 8005ccc:	e7d9      	b.n	8005c82 <_printf_common+0x8e>
	...

08005cd0 <_printf_i>:
 8005cd0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005cd4:	7e0f      	ldrb	r7, [r1, #24]
 8005cd6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8005cd8:	2f78      	cmp	r7, #120	@ 0x78
 8005cda:	4691      	mov	r9, r2
 8005cdc:	4680      	mov	r8, r0
 8005cde:	460c      	mov	r4, r1
 8005ce0:	469a      	mov	sl, r3
 8005ce2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8005ce6:	d807      	bhi.n	8005cf8 <_printf_i+0x28>
 8005ce8:	2f62      	cmp	r7, #98	@ 0x62
 8005cea:	d80a      	bhi.n	8005d02 <_printf_i+0x32>
 8005cec:	2f00      	cmp	r7, #0
 8005cee:	f000 80d1 	beq.w	8005e94 <_printf_i+0x1c4>
 8005cf2:	2f58      	cmp	r7, #88	@ 0x58
 8005cf4:	f000 80b8 	beq.w	8005e68 <_printf_i+0x198>
 8005cf8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005cfc:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8005d00:	e03a      	b.n	8005d78 <_printf_i+0xa8>
 8005d02:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8005d06:	2b15      	cmp	r3, #21
 8005d08:	d8f6      	bhi.n	8005cf8 <_printf_i+0x28>
 8005d0a:	a101      	add	r1, pc, #4	@ (adr r1, 8005d10 <_printf_i+0x40>)
 8005d0c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005d10:	08005d69 	.word	0x08005d69
 8005d14:	08005d7d 	.word	0x08005d7d
 8005d18:	08005cf9 	.word	0x08005cf9
 8005d1c:	08005cf9 	.word	0x08005cf9
 8005d20:	08005cf9 	.word	0x08005cf9
 8005d24:	08005cf9 	.word	0x08005cf9
 8005d28:	08005d7d 	.word	0x08005d7d
 8005d2c:	08005cf9 	.word	0x08005cf9
 8005d30:	08005cf9 	.word	0x08005cf9
 8005d34:	08005cf9 	.word	0x08005cf9
 8005d38:	08005cf9 	.word	0x08005cf9
 8005d3c:	08005e7b 	.word	0x08005e7b
 8005d40:	08005da7 	.word	0x08005da7
 8005d44:	08005e35 	.word	0x08005e35
 8005d48:	08005cf9 	.word	0x08005cf9
 8005d4c:	08005cf9 	.word	0x08005cf9
 8005d50:	08005e9d 	.word	0x08005e9d
 8005d54:	08005cf9 	.word	0x08005cf9
 8005d58:	08005da7 	.word	0x08005da7
 8005d5c:	08005cf9 	.word	0x08005cf9
 8005d60:	08005cf9 	.word	0x08005cf9
 8005d64:	08005e3d 	.word	0x08005e3d
 8005d68:	6833      	ldr	r3, [r6, #0]
 8005d6a:	1d1a      	adds	r2, r3, #4
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	6032      	str	r2, [r6, #0]
 8005d70:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005d74:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8005d78:	2301      	movs	r3, #1
 8005d7a:	e09c      	b.n	8005eb6 <_printf_i+0x1e6>
 8005d7c:	6833      	ldr	r3, [r6, #0]
 8005d7e:	6820      	ldr	r0, [r4, #0]
 8005d80:	1d19      	adds	r1, r3, #4
 8005d82:	6031      	str	r1, [r6, #0]
 8005d84:	0606      	lsls	r6, r0, #24
 8005d86:	d501      	bpl.n	8005d8c <_printf_i+0xbc>
 8005d88:	681d      	ldr	r5, [r3, #0]
 8005d8a:	e003      	b.n	8005d94 <_printf_i+0xc4>
 8005d8c:	0645      	lsls	r5, r0, #25
 8005d8e:	d5fb      	bpl.n	8005d88 <_printf_i+0xb8>
 8005d90:	f9b3 5000 	ldrsh.w	r5, [r3]
 8005d94:	2d00      	cmp	r5, #0
 8005d96:	da03      	bge.n	8005da0 <_printf_i+0xd0>
 8005d98:	232d      	movs	r3, #45	@ 0x2d
 8005d9a:	426d      	negs	r5, r5
 8005d9c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005da0:	4858      	ldr	r0, [pc, #352]	@ (8005f04 <_printf_i+0x234>)
 8005da2:	230a      	movs	r3, #10
 8005da4:	e011      	b.n	8005dca <_printf_i+0xfa>
 8005da6:	6821      	ldr	r1, [r4, #0]
 8005da8:	6833      	ldr	r3, [r6, #0]
 8005daa:	0608      	lsls	r0, r1, #24
 8005dac:	f853 5b04 	ldr.w	r5, [r3], #4
 8005db0:	d402      	bmi.n	8005db8 <_printf_i+0xe8>
 8005db2:	0649      	lsls	r1, r1, #25
 8005db4:	bf48      	it	mi
 8005db6:	b2ad      	uxthmi	r5, r5
 8005db8:	2f6f      	cmp	r7, #111	@ 0x6f
 8005dba:	4852      	ldr	r0, [pc, #328]	@ (8005f04 <_printf_i+0x234>)
 8005dbc:	6033      	str	r3, [r6, #0]
 8005dbe:	bf14      	ite	ne
 8005dc0:	230a      	movne	r3, #10
 8005dc2:	2308      	moveq	r3, #8
 8005dc4:	2100      	movs	r1, #0
 8005dc6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8005dca:	6866      	ldr	r6, [r4, #4]
 8005dcc:	60a6      	str	r6, [r4, #8]
 8005dce:	2e00      	cmp	r6, #0
 8005dd0:	db05      	blt.n	8005dde <_printf_i+0x10e>
 8005dd2:	6821      	ldr	r1, [r4, #0]
 8005dd4:	432e      	orrs	r6, r5
 8005dd6:	f021 0104 	bic.w	r1, r1, #4
 8005dda:	6021      	str	r1, [r4, #0]
 8005ddc:	d04b      	beq.n	8005e76 <_printf_i+0x1a6>
 8005dde:	4616      	mov	r6, r2
 8005de0:	fbb5 f1f3 	udiv	r1, r5, r3
 8005de4:	fb03 5711 	mls	r7, r3, r1, r5
 8005de8:	5dc7      	ldrb	r7, [r0, r7]
 8005dea:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005dee:	462f      	mov	r7, r5
 8005df0:	42bb      	cmp	r3, r7
 8005df2:	460d      	mov	r5, r1
 8005df4:	d9f4      	bls.n	8005de0 <_printf_i+0x110>
 8005df6:	2b08      	cmp	r3, #8
 8005df8:	d10b      	bne.n	8005e12 <_printf_i+0x142>
 8005dfa:	6823      	ldr	r3, [r4, #0]
 8005dfc:	07df      	lsls	r7, r3, #31
 8005dfe:	d508      	bpl.n	8005e12 <_printf_i+0x142>
 8005e00:	6923      	ldr	r3, [r4, #16]
 8005e02:	6861      	ldr	r1, [r4, #4]
 8005e04:	4299      	cmp	r1, r3
 8005e06:	bfde      	ittt	le
 8005e08:	2330      	movle	r3, #48	@ 0x30
 8005e0a:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005e0e:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005e12:	1b92      	subs	r2, r2, r6
 8005e14:	6122      	str	r2, [r4, #16]
 8005e16:	f8cd a000 	str.w	sl, [sp]
 8005e1a:	464b      	mov	r3, r9
 8005e1c:	aa03      	add	r2, sp, #12
 8005e1e:	4621      	mov	r1, r4
 8005e20:	4640      	mov	r0, r8
 8005e22:	f7ff fee7 	bl	8005bf4 <_printf_common>
 8005e26:	3001      	adds	r0, #1
 8005e28:	d14a      	bne.n	8005ec0 <_printf_i+0x1f0>
 8005e2a:	f04f 30ff 	mov.w	r0, #4294967295
 8005e2e:	b004      	add	sp, #16
 8005e30:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005e34:	6823      	ldr	r3, [r4, #0]
 8005e36:	f043 0320 	orr.w	r3, r3, #32
 8005e3a:	6023      	str	r3, [r4, #0]
 8005e3c:	4832      	ldr	r0, [pc, #200]	@ (8005f08 <_printf_i+0x238>)
 8005e3e:	2778      	movs	r7, #120	@ 0x78
 8005e40:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8005e44:	6823      	ldr	r3, [r4, #0]
 8005e46:	6831      	ldr	r1, [r6, #0]
 8005e48:	061f      	lsls	r7, r3, #24
 8005e4a:	f851 5b04 	ldr.w	r5, [r1], #4
 8005e4e:	d402      	bmi.n	8005e56 <_printf_i+0x186>
 8005e50:	065f      	lsls	r7, r3, #25
 8005e52:	bf48      	it	mi
 8005e54:	b2ad      	uxthmi	r5, r5
 8005e56:	6031      	str	r1, [r6, #0]
 8005e58:	07d9      	lsls	r1, r3, #31
 8005e5a:	bf44      	itt	mi
 8005e5c:	f043 0320 	orrmi.w	r3, r3, #32
 8005e60:	6023      	strmi	r3, [r4, #0]
 8005e62:	b11d      	cbz	r5, 8005e6c <_printf_i+0x19c>
 8005e64:	2310      	movs	r3, #16
 8005e66:	e7ad      	b.n	8005dc4 <_printf_i+0xf4>
 8005e68:	4826      	ldr	r0, [pc, #152]	@ (8005f04 <_printf_i+0x234>)
 8005e6a:	e7e9      	b.n	8005e40 <_printf_i+0x170>
 8005e6c:	6823      	ldr	r3, [r4, #0]
 8005e6e:	f023 0320 	bic.w	r3, r3, #32
 8005e72:	6023      	str	r3, [r4, #0]
 8005e74:	e7f6      	b.n	8005e64 <_printf_i+0x194>
 8005e76:	4616      	mov	r6, r2
 8005e78:	e7bd      	b.n	8005df6 <_printf_i+0x126>
 8005e7a:	6833      	ldr	r3, [r6, #0]
 8005e7c:	6825      	ldr	r5, [r4, #0]
 8005e7e:	6961      	ldr	r1, [r4, #20]
 8005e80:	1d18      	adds	r0, r3, #4
 8005e82:	6030      	str	r0, [r6, #0]
 8005e84:	062e      	lsls	r6, r5, #24
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	d501      	bpl.n	8005e8e <_printf_i+0x1be>
 8005e8a:	6019      	str	r1, [r3, #0]
 8005e8c:	e002      	b.n	8005e94 <_printf_i+0x1c4>
 8005e8e:	0668      	lsls	r0, r5, #25
 8005e90:	d5fb      	bpl.n	8005e8a <_printf_i+0x1ba>
 8005e92:	8019      	strh	r1, [r3, #0]
 8005e94:	2300      	movs	r3, #0
 8005e96:	6123      	str	r3, [r4, #16]
 8005e98:	4616      	mov	r6, r2
 8005e9a:	e7bc      	b.n	8005e16 <_printf_i+0x146>
 8005e9c:	6833      	ldr	r3, [r6, #0]
 8005e9e:	1d1a      	adds	r2, r3, #4
 8005ea0:	6032      	str	r2, [r6, #0]
 8005ea2:	681e      	ldr	r6, [r3, #0]
 8005ea4:	6862      	ldr	r2, [r4, #4]
 8005ea6:	2100      	movs	r1, #0
 8005ea8:	4630      	mov	r0, r6
 8005eaa:	f7fa f9f1 	bl	8000290 <memchr>
 8005eae:	b108      	cbz	r0, 8005eb4 <_printf_i+0x1e4>
 8005eb0:	1b80      	subs	r0, r0, r6
 8005eb2:	6060      	str	r0, [r4, #4]
 8005eb4:	6863      	ldr	r3, [r4, #4]
 8005eb6:	6123      	str	r3, [r4, #16]
 8005eb8:	2300      	movs	r3, #0
 8005eba:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005ebe:	e7aa      	b.n	8005e16 <_printf_i+0x146>
 8005ec0:	6923      	ldr	r3, [r4, #16]
 8005ec2:	4632      	mov	r2, r6
 8005ec4:	4649      	mov	r1, r9
 8005ec6:	4640      	mov	r0, r8
 8005ec8:	47d0      	blx	sl
 8005eca:	3001      	adds	r0, #1
 8005ecc:	d0ad      	beq.n	8005e2a <_printf_i+0x15a>
 8005ece:	6823      	ldr	r3, [r4, #0]
 8005ed0:	079b      	lsls	r3, r3, #30
 8005ed2:	d413      	bmi.n	8005efc <_printf_i+0x22c>
 8005ed4:	68e0      	ldr	r0, [r4, #12]
 8005ed6:	9b03      	ldr	r3, [sp, #12]
 8005ed8:	4298      	cmp	r0, r3
 8005eda:	bfb8      	it	lt
 8005edc:	4618      	movlt	r0, r3
 8005ede:	e7a6      	b.n	8005e2e <_printf_i+0x15e>
 8005ee0:	2301      	movs	r3, #1
 8005ee2:	4632      	mov	r2, r6
 8005ee4:	4649      	mov	r1, r9
 8005ee6:	4640      	mov	r0, r8
 8005ee8:	47d0      	blx	sl
 8005eea:	3001      	adds	r0, #1
 8005eec:	d09d      	beq.n	8005e2a <_printf_i+0x15a>
 8005eee:	3501      	adds	r5, #1
 8005ef0:	68e3      	ldr	r3, [r4, #12]
 8005ef2:	9903      	ldr	r1, [sp, #12]
 8005ef4:	1a5b      	subs	r3, r3, r1
 8005ef6:	42ab      	cmp	r3, r5
 8005ef8:	dcf2      	bgt.n	8005ee0 <_printf_i+0x210>
 8005efa:	e7eb      	b.n	8005ed4 <_printf_i+0x204>
 8005efc:	2500      	movs	r5, #0
 8005efe:	f104 0619 	add.w	r6, r4, #25
 8005f02:	e7f5      	b.n	8005ef0 <_printf_i+0x220>
 8005f04:	0800dc22 	.word	0x0800dc22
 8005f08:	0800dc33 	.word	0x0800dc33

08005f0c <_scanf_float>:
 8005f0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005f10:	b087      	sub	sp, #28
 8005f12:	4691      	mov	r9, r2
 8005f14:	9303      	str	r3, [sp, #12]
 8005f16:	688b      	ldr	r3, [r1, #8]
 8005f18:	1e5a      	subs	r2, r3, #1
 8005f1a:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8005f1e:	bf81      	itttt	hi
 8005f20:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8005f24:	eb03 0b05 	addhi.w	fp, r3, r5
 8005f28:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8005f2c:	608b      	strhi	r3, [r1, #8]
 8005f2e:	680b      	ldr	r3, [r1, #0]
 8005f30:	460a      	mov	r2, r1
 8005f32:	f04f 0500 	mov.w	r5, #0
 8005f36:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 8005f3a:	f842 3b1c 	str.w	r3, [r2], #28
 8005f3e:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8005f42:	4680      	mov	r8, r0
 8005f44:	460c      	mov	r4, r1
 8005f46:	bf98      	it	ls
 8005f48:	f04f 0b00 	movls.w	fp, #0
 8005f4c:	9201      	str	r2, [sp, #4]
 8005f4e:	4616      	mov	r6, r2
 8005f50:	46aa      	mov	sl, r5
 8005f52:	462f      	mov	r7, r5
 8005f54:	9502      	str	r5, [sp, #8]
 8005f56:	68a2      	ldr	r2, [r4, #8]
 8005f58:	b15a      	cbz	r2, 8005f72 <_scanf_float+0x66>
 8005f5a:	f8d9 3000 	ldr.w	r3, [r9]
 8005f5e:	781b      	ldrb	r3, [r3, #0]
 8005f60:	2b4e      	cmp	r3, #78	@ 0x4e
 8005f62:	d863      	bhi.n	800602c <_scanf_float+0x120>
 8005f64:	2b40      	cmp	r3, #64	@ 0x40
 8005f66:	d83b      	bhi.n	8005fe0 <_scanf_float+0xd4>
 8005f68:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 8005f6c:	b2c8      	uxtb	r0, r1
 8005f6e:	280e      	cmp	r0, #14
 8005f70:	d939      	bls.n	8005fe6 <_scanf_float+0xda>
 8005f72:	b11f      	cbz	r7, 8005f7c <_scanf_float+0x70>
 8005f74:	6823      	ldr	r3, [r4, #0]
 8005f76:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005f7a:	6023      	str	r3, [r4, #0]
 8005f7c:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005f80:	f1ba 0f01 	cmp.w	sl, #1
 8005f84:	f200 8114 	bhi.w	80061b0 <_scanf_float+0x2a4>
 8005f88:	9b01      	ldr	r3, [sp, #4]
 8005f8a:	429e      	cmp	r6, r3
 8005f8c:	f200 8105 	bhi.w	800619a <_scanf_float+0x28e>
 8005f90:	2001      	movs	r0, #1
 8005f92:	b007      	add	sp, #28
 8005f94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005f98:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 8005f9c:	2a0d      	cmp	r2, #13
 8005f9e:	d8e8      	bhi.n	8005f72 <_scanf_float+0x66>
 8005fa0:	a101      	add	r1, pc, #4	@ (adr r1, 8005fa8 <_scanf_float+0x9c>)
 8005fa2:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8005fa6:	bf00      	nop
 8005fa8:	080060f1 	.word	0x080060f1
 8005fac:	08005f73 	.word	0x08005f73
 8005fb0:	08005f73 	.word	0x08005f73
 8005fb4:	08005f73 	.word	0x08005f73
 8005fb8:	0800614d 	.word	0x0800614d
 8005fbc:	08006127 	.word	0x08006127
 8005fc0:	08005f73 	.word	0x08005f73
 8005fc4:	08005f73 	.word	0x08005f73
 8005fc8:	080060ff 	.word	0x080060ff
 8005fcc:	08005f73 	.word	0x08005f73
 8005fd0:	08005f73 	.word	0x08005f73
 8005fd4:	08005f73 	.word	0x08005f73
 8005fd8:	08005f73 	.word	0x08005f73
 8005fdc:	080060bb 	.word	0x080060bb
 8005fe0:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 8005fe4:	e7da      	b.n	8005f9c <_scanf_float+0x90>
 8005fe6:	290e      	cmp	r1, #14
 8005fe8:	d8c3      	bhi.n	8005f72 <_scanf_float+0x66>
 8005fea:	a001      	add	r0, pc, #4	@ (adr r0, 8005ff0 <_scanf_float+0xe4>)
 8005fec:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8005ff0:	080060ab 	.word	0x080060ab
 8005ff4:	08005f73 	.word	0x08005f73
 8005ff8:	080060ab 	.word	0x080060ab
 8005ffc:	0800613b 	.word	0x0800613b
 8006000:	08005f73 	.word	0x08005f73
 8006004:	0800604d 	.word	0x0800604d
 8006008:	08006091 	.word	0x08006091
 800600c:	08006091 	.word	0x08006091
 8006010:	08006091 	.word	0x08006091
 8006014:	08006091 	.word	0x08006091
 8006018:	08006091 	.word	0x08006091
 800601c:	08006091 	.word	0x08006091
 8006020:	08006091 	.word	0x08006091
 8006024:	08006091 	.word	0x08006091
 8006028:	08006091 	.word	0x08006091
 800602c:	2b6e      	cmp	r3, #110	@ 0x6e
 800602e:	d809      	bhi.n	8006044 <_scanf_float+0x138>
 8006030:	2b60      	cmp	r3, #96	@ 0x60
 8006032:	d8b1      	bhi.n	8005f98 <_scanf_float+0x8c>
 8006034:	2b54      	cmp	r3, #84	@ 0x54
 8006036:	d07b      	beq.n	8006130 <_scanf_float+0x224>
 8006038:	2b59      	cmp	r3, #89	@ 0x59
 800603a:	d19a      	bne.n	8005f72 <_scanf_float+0x66>
 800603c:	2d07      	cmp	r5, #7
 800603e:	d198      	bne.n	8005f72 <_scanf_float+0x66>
 8006040:	2508      	movs	r5, #8
 8006042:	e02f      	b.n	80060a4 <_scanf_float+0x198>
 8006044:	2b74      	cmp	r3, #116	@ 0x74
 8006046:	d073      	beq.n	8006130 <_scanf_float+0x224>
 8006048:	2b79      	cmp	r3, #121	@ 0x79
 800604a:	e7f6      	b.n	800603a <_scanf_float+0x12e>
 800604c:	6821      	ldr	r1, [r4, #0]
 800604e:	05c8      	lsls	r0, r1, #23
 8006050:	d51e      	bpl.n	8006090 <_scanf_float+0x184>
 8006052:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 8006056:	6021      	str	r1, [r4, #0]
 8006058:	3701      	adds	r7, #1
 800605a:	f1bb 0f00 	cmp.w	fp, #0
 800605e:	d003      	beq.n	8006068 <_scanf_float+0x15c>
 8006060:	3201      	adds	r2, #1
 8006062:	f10b 3bff 	add.w	fp, fp, #4294967295
 8006066:	60a2      	str	r2, [r4, #8]
 8006068:	68a3      	ldr	r3, [r4, #8]
 800606a:	3b01      	subs	r3, #1
 800606c:	60a3      	str	r3, [r4, #8]
 800606e:	6923      	ldr	r3, [r4, #16]
 8006070:	3301      	adds	r3, #1
 8006072:	6123      	str	r3, [r4, #16]
 8006074:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8006078:	3b01      	subs	r3, #1
 800607a:	2b00      	cmp	r3, #0
 800607c:	f8c9 3004 	str.w	r3, [r9, #4]
 8006080:	f340 8082 	ble.w	8006188 <_scanf_float+0x27c>
 8006084:	f8d9 3000 	ldr.w	r3, [r9]
 8006088:	3301      	adds	r3, #1
 800608a:	f8c9 3000 	str.w	r3, [r9]
 800608e:	e762      	b.n	8005f56 <_scanf_float+0x4a>
 8006090:	eb1a 0105 	adds.w	r1, sl, r5
 8006094:	f47f af6d 	bne.w	8005f72 <_scanf_float+0x66>
 8006098:	6822      	ldr	r2, [r4, #0]
 800609a:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 800609e:	6022      	str	r2, [r4, #0]
 80060a0:	460d      	mov	r5, r1
 80060a2:	468a      	mov	sl, r1
 80060a4:	f806 3b01 	strb.w	r3, [r6], #1
 80060a8:	e7de      	b.n	8006068 <_scanf_float+0x15c>
 80060aa:	6822      	ldr	r2, [r4, #0]
 80060ac:	0610      	lsls	r0, r2, #24
 80060ae:	f57f af60 	bpl.w	8005f72 <_scanf_float+0x66>
 80060b2:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80060b6:	6022      	str	r2, [r4, #0]
 80060b8:	e7f4      	b.n	80060a4 <_scanf_float+0x198>
 80060ba:	f1ba 0f00 	cmp.w	sl, #0
 80060be:	d10c      	bne.n	80060da <_scanf_float+0x1ce>
 80060c0:	b977      	cbnz	r7, 80060e0 <_scanf_float+0x1d4>
 80060c2:	6822      	ldr	r2, [r4, #0]
 80060c4:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 80060c8:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 80060cc:	d108      	bne.n	80060e0 <_scanf_float+0x1d4>
 80060ce:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 80060d2:	6022      	str	r2, [r4, #0]
 80060d4:	f04f 0a01 	mov.w	sl, #1
 80060d8:	e7e4      	b.n	80060a4 <_scanf_float+0x198>
 80060da:	f1ba 0f02 	cmp.w	sl, #2
 80060de:	d050      	beq.n	8006182 <_scanf_float+0x276>
 80060e0:	2d01      	cmp	r5, #1
 80060e2:	d002      	beq.n	80060ea <_scanf_float+0x1de>
 80060e4:	2d04      	cmp	r5, #4
 80060e6:	f47f af44 	bne.w	8005f72 <_scanf_float+0x66>
 80060ea:	3501      	adds	r5, #1
 80060ec:	b2ed      	uxtb	r5, r5
 80060ee:	e7d9      	b.n	80060a4 <_scanf_float+0x198>
 80060f0:	f1ba 0f01 	cmp.w	sl, #1
 80060f4:	f47f af3d 	bne.w	8005f72 <_scanf_float+0x66>
 80060f8:	f04f 0a02 	mov.w	sl, #2
 80060fc:	e7d2      	b.n	80060a4 <_scanf_float+0x198>
 80060fe:	b975      	cbnz	r5, 800611e <_scanf_float+0x212>
 8006100:	2f00      	cmp	r7, #0
 8006102:	f47f af37 	bne.w	8005f74 <_scanf_float+0x68>
 8006106:	6822      	ldr	r2, [r4, #0]
 8006108:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800610c:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8006110:	f040 8103 	bne.w	800631a <_scanf_float+0x40e>
 8006114:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8006118:	6022      	str	r2, [r4, #0]
 800611a:	2501      	movs	r5, #1
 800611c:	e7c2      	b.n	80060a4 <_scanf_float+0x198>
 800611e:	2d03      	cmp	r5, #3
 8006120:	d0e3      	beq.n	80060ea <_scanf_float+0x1de>
 8006122:	2d05      	cmp	r5, #5
 8006124:	e7df      	b.n	80060e6 <_scanf_float+0x1da>
 8006126:	2d02      	cmp	r5, #2
 8006128:	f47f af23 	bne.w	8005f72 <_scanf_float+0x66>
 800612c:	2503      	movs	r5, #3
 800612e:	e7b9      	b.n	80060a4 <_scanf_float+0x198>
 8006130:	2d06      	cmp	r5, #6
 8006132:	f47f af1e 	bne.w	8005f72 <_scanf_float+0x66>
 8006136:	2507      	movs	r5, #7
 8006138:	e7b4      	b.n	80060a4 <_scanf_float+0x198>
 800613a:	6822      	ldr	r2, [r4, #0]
 800613c:	0591      	lsls	r1, r2, #22
 800613e:	f57f af18 	bpl.w	8005f72 <_scanf_float+0x66>
 8006142:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 8006146:	6022      	str	r2, [r4, #0]
 8006148:	9702      	str	r7, [sp, #8]
 800614a:	e7ab      	b.n	80060a4 <_scanf_float+0x198>
 800614c:	6822      	ldr	r2, [r4, #0]
 800614e:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 8006152:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 8006156:	d005      	beq.n	8006164 <_scanf_float+0x258>
 8006158:	0550      	lsls	r0, r2, #21
 800615a:	f57f af0a 	bpl.w	8005f72 <_scanf_float+0x66>
 800615e:	2f00      	cmp	r7, #0
 8006160:	f000 80db 	beq.w	800631a <_scanf_float+0x40e>
 8006164:	0591      	lsls	r1, r2, #22
 8006166:	bf58      	it	pl
 8006168:	9902      	ldrpl	r1, [sp, #8]
 800616a:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800616e:	bf58      	it	pl
 8006170:	1a79      	subpl	r1, r7, r1
 8006172:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 8006176:	bf58      	it	pl
 8006178:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800617c:	6022      	str	r2, [r4, #0]
 800617e:	2700      	movs	r7, #0
 8006180:	e790      	b.n	80060a4 <_scanf_float+0x198>
 8006182:	f04f 0a03 	mov.w	sl, #3
 8006186:	e78d      	b.n	80060a4 <_scanf_float+0x198>
 8006188:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800618c:	4649      	mov	r1, r9
 800618e:	4640      	mov	r0, r8
 8006190:	4798      	blx	r3
 8006192:	2800      	cmp	r0, #0
 8006194:	f43f aedf 	beq.w	8005f56 <_scanf_float+0x4a>
 8006198:	e6eb      	b.n	8005f72 <_scanf_float+0x66>
 800619a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800619e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80061a2:	464a      	mov	r2, r9
 80061a4:	4640      	mov	r0, r8
 80061a6:	4798      	blx	r3
 80061a8:	6923      	ldr	r3, [r4, #16]
 80061aa:	3b01      	subs	r3, #1
 80061ac:	6123      	str	r3, [r4, #16]
 80061ae:	e6eb      	b.n	8005f88 <_scanf_float+0x7c>
 80061b0:	1e6b      	subs	r3, r5, #1
 80061b2:	2b06      	cmp	r3, #6
 80061b4:	d824      	bhi.n	8006200 <_scanf_float+0x2f4>
 80061b6:	2d02      	cmp	r5, #2
 80061b8:	d836      	bhi.n	8006228 <_scanf_float+0x31c>
 80061ba:	9b01      	ldr	r3, [sp, #4]
 80061bc:	429e      	cmp	r6, r3
 80061be:	f67f aee7 	bls.w	8005f90 <_scanf_float+0x84>
 80061c2:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80061c6:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80061ca:	464a      	mov	r2, r9
 80061cc:	4640      	mov	r0, r8
 80061ce:	4798      	blx	r3
 80061d0:	6923      	ldr	r3, [r4, #16]
 80061d2:	3b01      	subs	r3, #1
 80061d4:	6123      	str	r3, [r4, #16]
 80061d6:	e7f0      	b.n	80061ba <_scanf_float+0x2ae>
 80061d8:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80061dc:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 80061e0:	464a      	mov	r2, r9
 80061e2:	4640      	mov	r0, r8
 80061e4:	4798      	blx	r3
 80061e6:	6923      	ldr	r3, [r4, #16]
 80061e8:	3b01      	subs	r3, #1
 80061ea:	6123      	str	r3, [r4, #16]
 80061ec:	f10a 3aff 	add.w	sl, sl, #4294967295
 80061f0:	fa5f fa8a 	uxtb.w	sl, sl
 80061f4:	f1ba 0f02 	cmp.w	sl, #2
 80061f8:	d1ee      	bne.n	80061d8 <_scanf_float+0x2cc>
 80061fa:	3d03      	subs	r5, #3
 80061fc:	b2ed      	uxtb	r5, r5
 80061fe:	1b76      	subs	r6, r6, r5
 8006200:	6823      	ldr	r3, [r4, #0]
 8006202:	05da      	lsls	r2, r3, #23
 8006204:	d530      	bpl.n	8006268 <_scanf_float+0x35c>
 8006206:	055b      	lsls	r3, r3, #21
 8006208:	d511      	bpl.n	800622e <_scanf_float+0x322>
 800620a:	9b01      	ldr	r3, [sp, #4]
 800620c:	429e      	cmp	r6, r3
 800620e:	f67f aebf 	bls.w	8005f90 <_scanf_float+0x84>
 8006212:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8006216:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800621a:	464a      	mov	r2, r9
 800621c:	4640      	mov	r0, r8
 800621e:	4798      	blx	r3
 8006220:	6923      	ldr	r3, [r4, #16]
 8006222:	3b01      	subs	r3, #1
 8006224:	6123      	str	r3, [r4, #16]
 8006226:	e7f0      	b.n	800620a <_scanf_float+0x2fe>
 8006228:	46aa      	mov	sl, r5
 800622a:	46b3      	mov	fp, r6
 800622c:	e7de      	b.n	80061ec <_scanf_float+0x2e0>
 800622e:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8006232:	6923      	ldr	r3, [r4, #16]
 8006234:	2965      	cmp	r1, #101	@ 0x65
 8006236:	f103 33ff 	add.w	r3, r3, #4294967295
 800623a:	f106 35ff 	add.w	r5, r6, #4294967295
 800623e:	6123      	str	r3, [r4, #16]
 8006240:	d00c      	beq.n	800625c <_scanf_float+0x350>
 8006242:	2945      	cmp	r1, #69	@ 0x45
 8006244:	d00a      	beq.n	800625c <_scanf_float+0x350>
 8006246:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800624a:	464a      	mov	r2, r9
 800624c:	4640      	mov	r0, r8
 800624e:	4798      	blx	r3
 8006250:	6923      	ldr	r3, [r4, #16]
 8006252:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8006256:	3b01      	subs	r3, #1
 8006258:	1eb5      	subs	r5, r6, #2
 800625a:	6123      	str	r3, [r4, #16]
 800625c:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8006260:	464a      	mov	r2, r9
 8006262:	4640      	mov	r0, r8
 8006264:	4798      	blx	r3
 8006266:	462e      	mov	r6, r5
 8006268:	6822      	ldr	r2, [r4, #0]
 800626a:	f012 0210 	ands.w	r2, r2, #16
 800626e:	d001      	beq.n	8006274 <_scanf_float+0x368>
 8006270:	2000      	movs	r0, #0
 8006272:	e68e      	b.n	8005f92 <_scanf_float+0x86>
 8006274:	7032      	strb	r2, [r6, #0]
 8006276:	6823      	ldr	r3, [r4, #0]
 8006278:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800627c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006280:	d125      	bne.n	80062ce <_scanf_float+0x3c2>
 8006282:	9b02      	ldr	r3, [sp, #8]
 8006284:	429f      	cmp	r7, r3
 8006286:	d00a      	beq.n	800629e <_scanf_float+0x392>
 8006288:	1bda      	subs	r2, r3, r7
 800628a:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 800628e:	429e      	cmp	r6, r3
 8006290:	bf28      	it	cs
 8006292:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 8006296:	4922      	ldr	r1, [pc, #136]	@ (8006320 <_scanf_float+0x414>)
 8006298:	4630      	mov	r0, r6
 800629a:	f000 f907 	bl	80064ac <siprintf>
 800629e:	9901      	ldr	r1, [sp, #4]
 80062a0:	2200      	movs	r2, #0
 80062a2:	4640      	mov	r0, r8
 80062a4:	f002 fbf4 	bl	8008a90 <_strtod_r>
 80062a8:	9b03      	ldr	r3, [sp, #12]
 80062aa:	6821      	ldr	r1, [r4, #0]
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	f011 0f02 	tst.w	r1, #2
 80062b2:	ec57 6b10 	vmov	r6, r7, d0
 80062b6:	f103 0204 	add.w	r2, r3, #4
 80062ba:	d015      	beq.n	80062e8 <_scanf_float+0x3dc>
 80062bc:	9903      	ldr	r1, [sp, #12]
 80062be:	600a      	str	r2, [r1, #0]
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	e9c3 6700 	strd	r6, r7, [r3]
 80062c6:	68e3      	ldr	r3, [r4, #12]
 80062c8:	3301      	adds	r3, #1
 80062ca:	60e3      	str	r3, [r4, #12]
 80062cc:	e7d0      	b.n	8006270 <_scanf_float+0x364>
 80062ce:	9b04      	ldr	r3, [sp, #16]
 80062d0:	2b00      	cmp	r3, #0
 80062d2:	d0e4      	beq.n	800629e <_scanf_float+0x392>
 80062d4:	9905      	ldr	r1, [sp, #20]
 80062d6:	230a      	movs	r3, #10
 80062d8:	3101      	adds	r1, #1
 80062da:	4640      	mov	r0, r8
 80062dc:	f002 fc58 	bl	8008b90 <_strtol_r>
 80062e0:	9b04      	ldr	r3, [sp, #16]
 80062e2:	9e05      	ldr	r6, [sp, #20]
 80062e4:	1ac2      	subs	r2, r0, r3
 80062e6:	e7d0      	b.n	800628a <_scanf_float+0x37e>
 80062e8:	f011 0f04 	tst.w	r1, #4
 80062ec:	9903      	ldr	r1, [sp, #12]
 80062ee:	600a      	str	r2, [r1, #0]
 80062f0:	d1e6      	bne.n	80062c0 <_scanf_float+0x3b4>
 80062f2:	681d      	ldr	r5, [r3, #0]
 80062f4:	4632      	mov	r2, r6
 80062f6:	463b      	mov	r3, r7
 80062f8:	4630      	mov	r0, r6
 80062fa:	4639      	mov	r1, r7
 80062fc:	f7fa fc76 	bl	8000bec <__aeabi_dcmpun>
 8006300:	b128      	cbz	r0, 800630e <_scanf_float+0x402>
 8006302:	4808      	ldr	r0, [pc, #32]	@ (8006324 <_scanf_float+0x418>)
 8006304:	f000 f9b8 	bl	8006678 <nanf>
 8006308:	ed85 0a00 	vstr	s0, [r5]
 800630c:	e7db      	b.n	80062c6 <_scanf_float+0x3ba>
 800630e:	4630      	mov	r0, r6
 8006310:	4639      	mov	r1, r7
 8006312:	f7fa fcc9 	bl	8000ca8 <__aeabi_d2f>
 8006316:	6028      	str	r0, [r5, #0]
 8006318:	e7d5      	b.n	80062c6 <_scanf_float+0x3ba>
 800631a:	2700      	movs	r7, #0
 800631c:	e62e      	b.n	8005f7c <_scanf_float+0x70>
 800631e:	bf00      	nop
 8006320:	0800dc44 	.word	0x0800dc44
 8006324:	0800dd85 	.word	0x0800dd85

08006328 <std>:
 8006328:	2300      	movs	r3, #0
 800632a:	b510      	push	{r4, lr}
 800632c:	4604      	mov	r4, r0
 800632e:	e9c0 3300 	strd	r3, r3, [r0]
 8006332:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006336:	6083      	str	r3, [r0, #8]
 8006338:	8181      	strh	r1, [r0, #12]
 800633a:	6643      	str	r3, [r0, #100]	@ 0x64
 800633c:	81c2      	strh	r2, [r0, #14]
 800633e:	6183      	str	r3, [r0, #24]
 8006340:	4619      	mov	r1, r3
 8006342:	2208      	movs	r2, #8
 8006344:	305c      	adds	r0, #92	@ 0x5c
 8006346:	f000 f916 	bl	8006576 <memset>
 800634a:	4b0d      	ldr	r3, [pc, #52]	@ (8006380 <std+0x58>)
 800634c:	6263      	str	r3, [r4, #36]	@ 0x24
 800634e:	4b0d      	ldr	r3, [pc, #52]	@ (8006384 <std+0x5c>)
 8006350:	62a3      	str	r3, [r4, #40]	@ 0x28
 8006352:	4b0d      	ldr	r3, [pc, #52]	@ (8006388 <std+0x60>)
 8006354:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8006356:	4b0d      	ldr	r3, [pc, #52]	@ (800638c <std+0x64>)
 8006358:	6323      	str	r3, [r4, #48]	@ 0x30
 800635a:	4b0d      	ldr	r3, [pc, #52]	@ (8006390 <std+0x68>)
 800635c:	6224      	str	r4, [r4, #32]
 800635e:	429c      	cmp	r4, r3
 8006360:	d006      	beq.n	8006370 <std+0x48>
 8006362:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8006366:	4294      	cmp	r4, r2
 8006368:	d002      	beq.n	8006370 <std+0x48>
 800636a:	33d0      	adds	r3, #208	@ 0xd0
 800636c:	429c      	cmp	r4, r3
 800636e:	d105      	bne.n	800637c <std+0x54>
 8006370:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8006374:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006378:	f000 b97a 	b.w	8006670 <__retarget_lock_init_recursive>
 800637c:	bd10      	pop	{r4, pc}
 800637e:	bf00      	nop
 8006380:	080064f1 	.word	0x080064f1
 8006384:	08006513 	.word	0x08006513
 8006388:	0800654b 	.word	0x0800654b
 800638c:	0800656f 	.word	0x0800656f
 8006390:	2001d1f8 	.word	0x2001d1f8

08006394 <stdio_exit_handler>:
 8006394:	4a02      	ldr	r2, [pc, #8]	@ (80063a0 <stdio_exit_handler+0xc>)
 8006396:	4903      	ldr	r1, [pc, #12]	@ (80063a4 <stdio_exit_handler+0x10>)
 8006398:	4803      	ldr	r0, [pc, #12]	@ (80063a8 <stdio_exit_handler+0x14>)
 800639a:	f000 b869 	b.w	8006470 <_fwalk_sglue>
 800639e:	bf00      	nop
 80063a0:	20000010 	.word	0x20000010
 80063a4:	08008f4d 	.word	0x08008f4d
 80063a8:	20000020 	.word	0x20000020

080063ac <cleanup_stdio>:
 80063ac:	6841      	ldr	r1, [r0, #4]
 80063ae:	4b0c      	ldr	r3, [pc, #48]	@ (80063e0 <cleanup_stdio+0x34>)
 80063b0:	4299      	cmp	r1, r3
 80063b2:	b510      	push	{r4, lr}
 80063b4:	4604      	mov	r4, r0
 80063b6:	d001      	beq.n	80063bc <cleanup_stdio+0x10>
 80063b8:	f002 fdc8 	bl	8008f4c <_fflush_r>
 80063bc:	68a1      	ldr	r1, [r4, #8]
 80063be:	4b09      	ldr	r3, [pc, #36]	@ (80063e4 <cleanup_stdio+0x38>)
 80063c0:	4299      	cmp	r1, r3
 80063c2:	d002      	beq.n	80063ca <cleanup_stdio+0x1e>
 80063c4:	4620      	mov	r0, r4
 80063c6:	f002 fdc1 	bl	8008f4c <_fflush_r>
 80063ca:	68e1      	ldr	r1, [r4, #12]
 80063cc:	4b06      	ldr	r3, [pc, #24]	@ (80063e8 <cleanup_stdio+0x3c>)
 80063ce:	4299      	cmp	r1, r3
 80063d0:	d004      	beq.n	80063dc <cleanup_stdio+0x30>
 80063d2:	4620      	mov	r0, r4
 80063d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80063d8:	f002 bdb8 	b.w	8008f4c <_fflush_r>
 80063dc:	bd10      	pop	{r4, pc}
 80063de:	bf00      	nop
 80063e0:	2001d1f8 	.word	0x2001d1f8
 80063e4:	2001d260 	.word	0x2001d260
 80063e8:	2001d2c8 	.word	0x2001d2c8

080063ec <global_stdio_init.part.0>:
 80063ec:	b510      	push	{r4, lr}
 80063ee:	4b0b      	ldr	r3, [pc, #44]	@ (800641c <global_stdio_init.part.0+0x30>)
 80063f0:	4c0b      	ldr	r4, [pc, #44]	@ (8006420 <global_stdio_init.part.0+0x34>)
 80063f2:	4a0c      	ldr	r2, [pc, #48]	@ (8006424 <global_stdio_init.part.0+0x38>)
 80063f4:	601a      	str	r2, [r3, #0]
 80063f6:	4620      	mov	r0, r4
 80063f8:	2200      	movs	r2, #0
 80063fa:	2104      	movs	r1, #4
 80063fc:	f7ff ff94 	bl	8006328 <std>
 8006400:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8006404:	2201      	movs	r2, #1
 8006406:	2109      	movs	r1, #9
 8006408:	f7ff ff8e 	bl	8006328 <std>
 800640c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8006410:	2202      	movs	r2, #2
 8006412:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006416:	2112      	movs	r1, #18
 8006418:	f7ff bf86 	b.w	8006328 <std>
 800641c:	2001d330 	.word	0x2001d330
 8006420:	2001d1f8 	.word	0x2001d1f8
 8006424:	08006395 	.word	0x08006395

08006428 <__sfp_lock_acquire>:
 8006428:	4801      	ldr	r0, [pc, #4]	@ (8006430 <__sfp_lock_acquire+0x8>)
 800642a:	f000 b922 	b.w	8006672 <__retarget_lock_acquire_recursive>
 800642e:	bf00      	nop
 8006430:	2001d339 	.word	0x2001d339

08006434 <__sfp_lock_release>:
 8006434:	4801      	ldr	r0, [pc, #4]	@ (800643c <__sfp_lock_release+0x8>)
 8006436:	f000 b91d 	b.w	8006674 <__retarget_lock_release_recursive>
 800643a:	bf00      	nop
 800643c:	2001d339 	.word	0x2001d339

08006440 <__sinit>:
 8006440:	b510      	push	{r4, lr}
 8006442:	4604      	mov	r4, r0
 8006444:	f7ff fff0 	bl	8006428 <__sfp_lock_acquire>
 8006448:	6a23      	ldr	r3, [r4, #32]
 800644a:	b11b      	cbz	r3, 8006454 <__sinit+0x14>
 800644c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006450:	f7ff bff0 	b.w	8006434 <__sfp_lock_release>
 8006454:	4b04      	ldr	r3, [pc, #16]	@ (8006468 <__sinit+0x28>)
 8006456:	6223      	str	r3, [r4, #32]
 8006458:	4b04      	ldr	r3, [pc, #16]	@ (800646c <__sinit+0x2c>)
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	2b00      	cmp	r3, #0
 800645e:	d1f5      	bne.n	800644c <__sinit+0xc>
 8006460:	f7ff ffc4 	bl	80063ec <global_stdio_init.part.0>
 8006464:	e7f2      	b.n	800644c <__sinit+0xc>
 8006466:	bf00      	nop
 8006468:	080063ad 	.word	0x080063ad
 800646c:	2001d330 	.word	0x2001d330

08006470 <_fwalk_sglue>:
 8006470:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006474:	4607      	mov	r7, r0
 8006476:	4688      	mov	r8, r1
 8006478:	4614      	mov	r4, r2
 800647a:	2600      	movs	r6, #0
 800647c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006480:	f1b9 0901 	subs.w	r9, r9, #1
 8006484:	d505      	bpl.n	8006492 <_fwalk_sglue+0x22>
 8006486:	6824      	ldr	r4, [r4, #0]
 8006488:	2c00      	cmp	r4, #0
 800648a:	d1f7      	bne.n	800647c <_fwalk_sglue+0xc>
 800648c:	4630      	mov	r0, r6
 800648e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006492:	89ab      	ldrh	r3, [r5, #12]
 8006494:	2b01      	cmp	r3, #1
 8006496:	d907      	bls.n	80064a8 <_fwalk_sglue+0x38>
 8006498:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800649c:	3301      	adds	r3, #1
 800649e:	d003      	beq.n	80064a8 <_fwalk_sglue+0x38>
 80064a0:	4629      	mov	r1, r5
 80064a2:	4638      	mov	r0, r7
 80064a4:	47c0      	blx	r8
 80064a6:	4306      	orrs	r6, r0
 80064a8:	3568      	adds	r5, #104	@ 0x68
 80064aa:	e7e9      	b.n	8006480 <_fwalk_sglue+0x10>

080064ac <siprintf>:
 80064ac:	b40e      	push	{r1, r2, r3}
 80064ae:	b510      	push	{r4, lr}
 80064b0:	b09d      	sub	sp, #116	@ 0x74
 80064b2:	ab1f      	add	r3, sp, #124	@ 0x7c
 80064b4:	9002      	str	r0, [sp, #8]
 80064b6:	9006      	str	r0, [sp, #24]
 80064b8:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80064bc:	480a      	ldr	r0, [pc, #40]	@ (80064e8 <siprintf+0x3c>)
 80064be:	9107      	str	r1, [sp, #28]
 80064c0:	9104      	str	r1, [sp, #16]
 80064c2:	490a      	ldr	r1, [pc, #40]	@ (80064ec <siprintf+0x40>)
 80064c4:	f853 2b04 	ldr.w	r2, [r3], #4
 80064c8:	9105      	str	r1, [sp, #20]
 80064ca:	2400      	movs	r4, #0
 80064cc:	a902      	add	r1, sp, #8
 80064ce:	6800      	ldr	r0, [r0, #0]
 80064d0:	9301      	str	r3, [sp, #4]
 80064d2:	941b      	str	r4, [sp, #108]	@ 0x6c
 80064d4:	f002 fbba 	bl	8008c4c <_svfiprintf_r>
 80064d8:	9b02      	ldr	r3, [sp, #8]
 80064da:	701c      	strb	r4, [r3, #0]
 80064dc:	b01d      	add	sp, #116	@ 0x74
 80064de:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80064e2:	b003      	add	sp, #12
 80064e4:	4770      	bx	lr
 80064e6:	bf00      	nop
 80064e8:	2000001c 	.word	0x2000001c
 80064ec:	ffff0208 	.word	0xffff0208

080064f0 <__sread>:
 80064f0:	b510      	push	{r4, lr}
 80064f2:	460c      	mov	r4, r1
 80064f4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80064f8:	f000 f86c 	bl	80065d4 <_read_r>
 80064fc:	2800      	cmp	r0, #0
 80064fe:	bfab      	itete	ge
 8006500:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8006502:	89a3      	ldrhlt	r3, [r4, #12]
 8006504:	181b      	addge	r3, r3, r0
 8006506:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800650a:	bfac      	ite	ge
 800650c:	6563      	strge	r3, [r4, #84]	@ 0x54
 800650e:	81a3      	strhlt	r3, [r4, #12]
 8006510:	bd10      	pop	{r4, pc}

08006512 <__swrite>:
 8006512:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006516:	461f      	mov	r7, r3
 8006518:	898b      	ldrh	r3, [r1, #12]
 800651a:	05db      	lsls	r3, r3, #23
 800651c:	4605      	mov	r5, r0
 800651e:	460c      	mov	r4, r1
 8006520:	4616      	mov	r6, r2
 8006522:	d505      	bpl.n	8006530 <__swrite+0x1e>
 8006524:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006528:	2302      	movs	r3, #2
 800652a:	2200      	movs	r2, #0
 800652c:	f000 f840 	bl	80065b0 <_lseek_r>
 8006530:	89a3      	ldrh	r3, [r4, #12]
 8006532:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006536:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800653a:	81a3      	strh	r3, [r4, #12]
 800653c:	4632      	mov	r2, r6
 800653e:	463b      	mov	r3, r7
 8006540:	4628      	mov	r0, r5
 8006542:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006546:	f000 b857 	b.w	80065f8 <_write_r>

0800654a <__sseek>:
 800654a:	b510      	push	{r4, lr}
 800654c:	460c      	mov	r4, r1
 800654e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006552:	f000 f82d 	bl	80065b0 <_lseek_r>
 8006556:	1c43      	adds	r3, r0, #1
 8006558:	89a3      	ldrh	r3, [r4, #12]
 800655a:	bf15      	itete	ne
 800655c:	6560      	strne	r0, [r4, #84]	@ 0x54
 800655e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8006562:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8006566:	81a3      	strheq	r3, [r4, #12]
 8006568:	bf18      	it	ne
 800656a:	81a3      	strhne	r3, [r4, #12]
 800656c:	bd10      	pop	{r4, pc}

0800656e <__sclose>:
 800656e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006572:	f000 b80d 	b.w	8006590 <_close_r>

08006576 <memset>:
 8006576:	4402      	add	r2, r0
 8006578:	4603      	mov	r3, r0
 800657a:	4293      	cmp	r3, r2
 800657c:	d100      	bne.n	8006580 <memset+0xa>
 800657e:	4770      	bx	lr
 8006580:	f803 1b01 	strb.w	r1, [r3], #1
 8006584:	e7f9      	b.n	800657a <memset+0x4>
	...

08006588 <_localeconv_r>:
 8006588:	4800      	ldr	r0, [pc, #0]	@ (800658c <_localeconv_r+0x4>)
 800658a:	4770      	bx	lr
 800658c:	2000015c 	.word	0x2000015c

08006590 <_close_r>:
 8006590:	b538      	push	{r3, r4, r5, lr}
 8006592:	4d06      	ldr	r5, [pc, #24]	@ (80065ac <_close_r+0x1c>)
 8006594:	2300      	movs	r3, #0
 8006596:	4604      	mov	r4, r0
 8006598:	4608      	mov	r0, r1
 800659a:	602b      	str	r3, [r5, #0]
 800659c:	f7fb fae8 	bl	8001b70 <_close>
 80065a0:	1c43      	adds	r3, r0, #1
 80065a2:	d102      	bne.n	80065aa <_close_r+0x1a>
 80065a4:	682b      	ldr	r3, [r5, #0]
 80065a6:	b103      	cbz	r3, 80065aa <_close_r+0x1a>
 80065a8:	6023      	str	r3, [r4, #0]
 80065aa:	bd38      	pop	{r3, r4, r5, pc}
 80065ac:	2001d334 	.word	0x2001d334

080065b0 <_lseek_r>:
 80065b0:	b538      	push	{r3, r4, r5, lr}
 80065b2:	4d07      	ldr	r5, [pc, #28]	@ (80065d0 <_lseek_r+0x20>)
 80065b4:	4604      	mov	r4, r0
 80065b6:	4608      	mov	r0, r1
 80065b8:	4611      	mov	r1, r2
 80065ba:	2200      	movs	r2, #0
 80065bc:	602a      	str	r2, [r5, #0]
 80065be:	461a      	mov	r2, r3
 80065c0:	f7fb fafd 	bl	8001bbe <_lseek>
 80065c4:	1c43      	adds	r3, r0, #1
 80065c6:	d102      	bne.n	80065ce <_lseek_r+0x1e>
 80065c8:	682b      	ldr	r3, [r5, #0]
 80065ca:	b103      	cbz	r3, 80065ce <_lseek_r+0x1e>
 80065cc:	6023      	str	r3, [r4, #0]
 80065ce:	bd38      	pop	{r3, r4, r5, pc}
 80065d0:	2001d334 	.word	0x2001d334

080065d4 <_read_r>:
 80065d4:	b538      	push	{r3, r4, r5, lr}
 80065d6:	4d07      	ldr	r5, [pc, #28]	@ (80065f4 <_read_r+0x20>)
 80065d8:	4604      	mov	r4, r0
 80065da:	4608      	mov	r0, r1
 80065dc:	4611      	mov	r1, r2
 80065de:	2200      	movs	r2, #0
 80065e0:	602a      	str	r2, [r5, #0]
 80065e2:	461a      	mov	r2, r3
 80065e4:	f7fb fa8b 	bl	8001afe <_read>
 80065e8:	1c43      	adds	r3, r0, #1
 80065ea:	d102      	bne.n	80065f2 <_read_r+0x1e>
 80065ec:	682b      	ldr	r3, [r5, #0]
 80065ee:	b103      	cbz	r3, 80065f2 <_read_r+0x1e>
 80065f0:	6023      	str	r3, [r4, #0]
 80065f2:	bd38      	pop	{r3, r4, r5, pc}
 80065f4:	2001d334 	.word	0x2001d334

080065f8 <_write_r>:
 80065f8:	b538      	push	{r3, r4, r5, lr}
 80065fa:	4d07      	ldr	r5, [pc, #28]	@ (8006618 <_write_r+0x20>)
 80065fc:	4604      	mov	r4, r0
 80065fe:	4608      	mov	r0, r1
 8006600:	4611      	mov	r1, r2
 8006602:	2200      	movs	r2, #0
 8006604:	602a      	str	r2, [r5, #0]
 8006606:	461a      	mov	r2, r3
 8006608:	f7fb fa96 	bl	8001b38 <_write>
 800660c:	1c43      	adds	r3, r0, #1
 800660e:	d102      	bne.n	8006616 <_write_r+0x1e>
 8006610:	682b      	ldr	r3, [r5, #0]
 8006612:	b103      	cbz	r3, 8006616 <_write_r+0x1e>
 8006614:	6023      	str	r3, [r4, #0]
 8006616:	bd38      	pop	{r3, r4, r5, pc}
 8006618:	2001d334 	.word	0x2001d334

0800661c <__errno>:
 800661c:	4b01      	ldr	r3, [pc, #4]	@ (8006624 <__errno+0x8>)
 800661e:	6818      	ldr	r0, [r3, #0]
 8006620:	4770      	bx	lr
 8006622:	bf00      	nop
 8006624:	2000001c 	.word	0x2000001c

08006628 <__libc_init_array>:
 8006628:	b570      	push	{r4, r5, r6, lr}
 800662a:	4d0d      	ldr	r5, [pc, #52]	@ (8006660 <__libc_init_array+0x38>)
 800662c:	4c0d      	ldr	r4, [pc, #52]	@ (8006664 <__libc_init_array+0x3c>)
 800662e:	1b64      	subs	r4, r4, r5
 8006630:	10a4      	asrs	r4, r4, #2
 8006632:	2600      	movs	r6, #0
 8006634:	42a6      	cmp	r6, r4
 8006636:	d109      	bne.n	800664c <__libc_init_array+0x24>
 8006638:	4d0b      	ldr	r5, [pc, #44]	@ (8006668 <__libc_init_array+0x40>)
 800663a:	4c0c      	ldr	r4, [pc, #48]	@ (800666c <__libc_init_array+0x44>)
 800663c:	f004 fbc0 	bl	800adc0 <_init>
 8006640:	1b64      	subs	r4, r4, r5
 8006642:	10a4      	asrs	r4, r4, #2
 8006644:	2600      	movs	r6, #0
 8006646:	42a6      	cmp	r6, r4
 8006648:	d105      	bne.n	8006656 <__libc_init_array+0x2e>
 800664a:	bd70      	pop	{r4, r5, r6, pc}
 800664c:	f855 3b04 	ldr.w	r3, [r5], #4
 8006650:	4798      	blx	r3
 8006652:	3601      	adds	r6, #1
 8006654:	e7ee      	b.n	8006634 <__libc_init_array+0xc>
 8006656:	f855 3b04 	ldr.w	r3, [r5], #4
 800665a:	4798      	blx	r3
 800665c:	3601      	adds	r6, #1
 800665e:	e7f2      	b.n	8006646 <__libc_init_array+0x1e>
 8006660:	0800e220 	.word	0x0800e220
 8006664:	0800e220 	.word	0x0800e220
 8006668:	0800e220 	.word	0x0800e220
 800666c:	0800e224 	.word	0x0800e224

08006670 <__retarget_lock_init_recursive>:
 8006670:	4770      	bx	lr

08006672 <__retarget_lock_acquire_recursive>:
 8006672:	4770      	bx	lr

08006674 <__retarget_lock_release_recursive>:
 8006674:	4770      	bx	lr
	...

08006678 <nanf>:
 8006678:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8006680 <nanf+0x8>
 800667c:	4770      	bx	lr
 800667e:	bf00      	nop
 8006680:	7fc00000 	.word	0x7fc00000

08006684 <quorem>:
 8006684:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006688:	6903      	ldr	r3, [r0, #16]
 800668a:	690c      	ldr	r4, [r1, #16]
 800668c:	42a3      	cmp	r3, r4
 800668e:	4607      	mov	r7, r0
 8006690:	db7e      	blt.n	8006790 <quorem+0x10c>
 8006692:	3c01      	subs	r4, #1
 8006694:	f101 0814 	add.w	r8, r1, #20
 8006698:	00a3      	lsls	r3, r4, #2
 800669a:	f100 0514 	add.w	r5, r0, #20
 800669e:	9300      	str	r3, [sp, #0]
 80066a0:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80066a4:	9301      	str	r3, [sp, #4]
 80066a6:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80066aa:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80066ae:	3301      	adds	r3, #1
 80066b0:	429a      	cmp	r2, r3
 80066b2:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80066b6:	fbb2 f6f3 	udiv	r6, r2, r3
 80066ba:	d32e      	bcc.n	800671a <quorem+0x96>
 80066bc:	f04f 0a00 	mov.w	sl, #0
 80066c0:	46c4      	mov	ip, r8
 80066c2:	46ae      	mov	lr, r5
 80066c4:	46d3      	mov	fp, sl
 80066c6:	f85c 3b04 	ldr.w	r3, [ip], #4
 80066ca:	b298      	uxth	r0, r3
 80066cc:	fb06 a000 	mla	r0, r6, r0, sl
 80066d0:	0c02      	lsrs	r2, r0, #16
 80066d2:	0c1b      	lsrs	r3, r3, #16
 80066d4:	fb06 2303 	mla	r3, r6, r3, r2
 80066d8:	f8de 2000 	ldr.w	r2, [lr]
 80066dc:	b280      	uxth	r0, r0
 80066de:	b292      	uxth	r2, r2
 80066e0:	1a12      	subs	r2, r2, r0
 80066e2:	445a      	add	r2, fp
 80066e4:	f8de 0000 	ldr.w	r0, [lr]
 80066e8:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80066ec:	b29b      	uxth	r3, r3
 80066ee:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 80066f2:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 80066f6:	b292      	uxth	r2, r2
 80066f8:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 80066fc:	45e1      	cmp	r9, ip
 80066fe:	f84e 2b04 	str.w	r2, [lr], #4
 8006702:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8006706:	d2de      	bcs.n	80066c6 <quorem+0x42>
 8006708:	9b00      	ldr	r3, [sp, #0]
 800670a:	58eb      	ldr	r3, [r5, r3]
 800670c:	b92b      	cbnz	r3, 800671a <quorem+0x96>
 800670e:	9b01      	ldr	r3, [sp, #4]
 8006710:	3b04      	subs	r3, #4
 8006712:	429d      	cmp	r5, r3
 8006714:	461a      	mov	r2, r3
 8006716:	d32f      	bcc.n	8006778 <quorem+0xf4>
 8006718:	613c      	str	r4, [r7, #16]
 800671a:	4638      	mov	r0, r7
 800671c:	f001 f9c8 	bl	8007ab0 <__mcmp>
 8006720:	2800      	cmp	r0, #0
 8006722:	db25      	blt.n	8006770 <quorem+0xec>
 8006724:	4629      	mov	r1, r5
 8006726:	2000      	movs	r0, #0
 8006728:	f858 2b04 	ldr.w	r2, [r8], #4
 800672c:	f8d1 c000 	ldr.w	ip, [r1]
 8006730:	fa1f fe82 	uxth.w	lr, r2
 8006734:	fa1f f38c 	uxth.w	r3, ip
 8006738:	eba3 030e 	sub.w	r3, r3, lr
 800673c:	4403      	add	r3, r0
 800673e:	0c12      	lsrs	r2, r2, #16
 8006740:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8006744:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8006748:	b29b      	uxth	r3, r3
 800674a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800674e:	45c1      	cmp	r9, r8
 8006750:	f841 3b04 	str.w	r3, [r1], #4
 8006754:	ea4f 4022 	mov.w	r0, r2, asr #16
 8006758:	d2e6      	bcs.n	8006728 <quorem+0xa4>
 800675a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800675e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006762:	b922      	cbnz	r2, 800676e <quorem+0xea>
 8006764:	3b04      	subs	r3, #4
 8006766:	429d      	cmp	r5, r3
 8006768:	461a      	mov	r2, r3
 800676a:	d30b      	bcc.n	8006784 <quorem+0x100>
 800676c:	613c      	str	r4, [r7, #16]
 800676e:	3601      	adds	r6, #1
 8006770:	4630      	mov	r0, r6
 8006772:	b003      	add	sp, #12
 8006774:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006778:	6812      	ldr	r2, [r2, #0]
 800677a:	3b04      	subs	r3, #4
 800677c:	2a00      	cmp	r2, #0
 800677e:	d1cb      	bne.n	8006718 <quorem+0x94>
 8006780:	3c01      	subs	r4, #1
 8006782:	e7c6      	b.n	8006712 <quorem+0x8e>
 8006784:	6812      	ldr	r2, [r2, #0]
 8006786:	3b04      	subs	r3, #4
 8006788:	2a00      	cmp	r2, #0
 800678a:	d1ef      	bne.n	800676c <quorem+0xe8>
 800678c:	3c01      	subs	r4, #1
 800678e:	e7ea      	b.n	8006766 <quorem+0xe2>
 8006790:	2000      	movs	r0, #0
 8006792:	e7ee      	b.n	8006772 <quorem+0xee>
 8006794:	0000      	movs	r0, r0
	...

08006798 <_dtoa_r>:
 8006798:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800679c:	69c7      	ldr	r7, [r0, #28]
 800679e:	b097      	sub	sp, #92	@ 0x5c
 80067a0:	ed8d 0b04 	vstr	d0, [sp, #16]
 80067a4:	ec55 4b10 	vmov	r4, r5, d0
 80067a8:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 80067aa:	9107      	str	r1, [sp, #28]
 80067ac:	4681      	mov	r9, r0
 80067ae:	920c      	str	r2, [sp, #48]	@ 0x30
 80067b0:	9311      	str	r3, [sp, #68]	@ 0x44
 80067b2:	b97f      	cbnz	r7, 80067d4 <_dtoa_r+0x3c>
 80067b4:	2010      	movs	r0, #16
 80067b6:	f000 fe09 	bl	80073cc <malloc>
 80067ba:	4602      	mov	r2, r0
 80067bc:	f8c9 001c 	str.w	r0, [r9, #28]
 80067c0:	b920      	cbnz	r0, 80067cc <_dtoa_r+0x34>
 80067c2:	4ba9      	ldr	r3, [pc, #676]	@ (8006a68 <_dtoa_r+0x2d0>)
 80067c4:	21ef      	movs	r1, #239	@ 0xef
 80067c6:	48a9      	ldr	r0, [pc, #676]	@ (8006a6c <_dtoa_r+0x2d4>)
 80067c8:	f002 fc3a 	bl	8009040 <__assert_func>
 80067cc:	e9c0 7701 	strd	r7, r7, [r0, #4]
 80067d0:	6007      	str	r7, [r0, #0]
 80067d2:	60c7      	str	r7, [r0, #12]
 80067d4:	f8d9 301c 	ldr.w	r3, [r9, #28]
 80067d8:	6819      	ldr	r1, [r3, #0]
 80067da:	b159      	cbz	r1, 80067f4 <_dtoa_r+0x5c>
 80067dc:	685a      	ldr	r2, [r3, #4]
 80067de:	604a      	str	r2, [r1, #4]
 80067e0:	2301      	movs	r3, #1
 80067e2:	4093      	lsls	r3, r2
 80067e4:	608b      	str	r3, [r1, #8]
 80067e6:	4648      	mov	r0, r9
 80067e8:	f000 fee6 	bl	80075b8 <_Bfree>
 80067ec:	f8d9 301c 	ldr.w	r3, [r9, #28]
 80067f0:	2200      	movs	r2, #0
 80067f2:	601a      	str	r2, [r3, #0]
 80067f4:	1e2b      	subs	r3, r5, #0
 80067f6:	bfb9      	ittee	lt
 80067f8:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 80067fc:	9305      	strlt	r3, [sp, #20]
 80067fe:	2300      	movge	r3, #0
 8006800:	6033      	strge	r3, [r6, #0]
 8006802:	9f05      	ldr	r7, [sp, #20]
 8006804:	4b9a      	ldr	r3, [pc, #616]	@ (8006a70 <_dtoa_r+0x2d8>)
 8006806:	bfbc      	itt	lt
 8006808:	2201      	movlt	r2, #1
 800680a:	6032      	strlt	r2, [r6, #0]
 800680c:	43bb      	bics	r3, r7
 800680e:	d112      	bne.n	8006836 <_dtoa_r+0x9e>
 8006810:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8006812:	f242 730f 	movw	r3, #9999	@ 0x270f
 8006816:	6013      	str	r3, [r2, #0]
 8006818:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800681c:	4323      	orrs	r3, r4
 800681e:	f000 855a 	beq.w	80072d6 <_dtoa_r+0xb3e>
 8006822:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8006824:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 8006a84 <_dtoa_r+0x2ec>
 8006828:	2b00      	cmp	r3, #0
 800682a:	f000 855c 	beq.w	80072e6 <_dtoa_r+0xb4e>
 800682e:	f10a 0303 	add.w	r3, sl, #3
 8006832:	f000 bd56 	b.w	80072e2 <_dtoa_r+0xb4a>
 8006836:	ed9d 7b04 	vldr	d7, [sp, #16]
 800683a:	2200      	movs	r2, #0
 800683c:	ec51 0b17 	vmov	r0, r1, d7
 8006840:	2300      	movs	r3, #0
 8006842:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 8006846:	f7fa f99f 	bl	8000b88 <__aeabi_dcmpeq>
 800684a:	4680      	mov	r8, r0
 800684c:	b158      	cbz	r0, 8006866 <_dtoa_r+0xce>
 800684e:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8006850:	2301      	movs	r3, #1
 8006852:	6013      	str	r3, [r2, #0]
 8006854:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8006856:	b113      	cbz	r3, 800685e <_dtoa_r+0xc6>
 8006858:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800685a:	4b86      	ldr	r3, [pc, #536]	@ (8006a74 <_dtoa_r+0x2dc>)
 800685c:	6013      	str	r3, [r2, #0]
 800685e:	f8df a228 	ldr.w	sl, [pc, #552]	@ 8006a88 <_dtoa_r+0x2f0>
 8006862:	f000 bd40 	b.w	80072e6 <_dtoa_r+0xb4e>
 8006866:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 800686a:	aa14      	add	r2, sp, #80	@ 0x50
 800686c:	a915      	add	r1, sp, #84	@ 0x54
 800686e:	4648      	mov	r0, r9
 8006870:	f001 fa3e 	bl	8007cf0 <__d2b>
 8006874:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8006878:	9002      	str	r0, [sp, #8]
 800687a:	2e00      	cmp	r6, #0
 800687c:	d078      	beq.n	8006970 <_dtoa_r+0x1d8>
 800687e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006880:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 8006884:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006888:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800688c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8006890:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8006894:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8006898:	4619      	mov	r1, r3
 800689a:	2200      	movs	r2, #0
 800689c:	4b76      	ldr	r3, [pc, #472]	@ (8006a78 <_dtoa_r+0x2e0>)
 800689e:	f7f9 fd53 	bl	8000348 <__aeabi_dsub>
 80068a2:	a36b      	add	r3, pc, #428	@ (adr r3, 8006a50 <_dtoa_r+0x2b8>)
 80068a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068a8:	f7f9 ff06 	bl	80006b8 <__aeabi_dmul>
 80068ac:	a36a      	add	r3, pc, #424	@ (adr r3, 8006a58 <_dtoa_r+0x2c0>)
 80068ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068b2:	f7f9 fd4b 	bl	800034c <__adddf3>
 80068b6:	4604      	mov	r4, r0
 80068b8:	4630      	mov	r0, r6
 80068ba:	460d      	mov	r5, r1
 80068bc:	f7f9 fe92 	bl	80005e4 <__aeabi_i2d>
 80068c0:	a367      	add	r3, pc, #412	@ (adr r3, 8006a60 <_dtoa_r+0x2c8>)
 80068c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068c6:	f7f9 fef7 	bl	80006b8 <__aeabi_dmul>
 80068ca:	4602      	mov	r2, r0
 80068cc:	460b      	mov	r3, r1
 80068ce:	4620      	mov	r0, r4
 80068d0:	4629      	mov	r1, r5
 80068d2:	f7f9 fd3b 	bl	800034c <__adddf3>
 80068d6:	4604      	mov	r4, r0
 80068d8:	460d      	mov	r5, r1
 80068da:	f7fa f99d 	bl	8000c18 <__aeabi_d2iz>
 80068de:	2200      	movs	r2, #0
 80068e0:	4607      	mov	r7, r0
 80068e2:	2300      	movs	r3, #0
 80068e4:	4620      	mov	r0, r4
 80068e6:	4629      	mov	r1, r5
 80068e8:	f7fa f958 	bl	8000b9c <__aeabi_dcmplt>
 80068ec:	b140      	cbz	r0, 8006900 <_dtoa_r+0x168>
 80068ee:	4638      	mov	r0, r7
 80068f0:	f7f9 fe78 	bl	80005e4 <__aeabi_i2d>
 80068f4:	4622      	mov	r2, r4
 80068f6:	462b      	mov	r3, r5
 80068f8:	f7fa f946 	bl	8000b88 <__aeabi_dcmpeq>
 80068fc:	b900      	cbnz	r0, 8006900 <_dtoa_r+0x168>
 80068fe:	3f01      	subs	r7, #1
 8006900:	2f16      	cmp	r7, #22
 8006902:	d852      	bhi.n	80069aa <_dtoa_r+0x212>
 8006904:	4b5d      	ldr	r3, [pc, #372]	@ (8006a7c <_dtoa_r+0x2e4>)
 8006906:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800690a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800690e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8006912:	f7fa f943 	bl	8000b9c <__aeabi_dcmplt>
 8006916:	2800      	cmp	r0, #0
 8006918:	d049      	beq.n	80069ae <_dtoa_r+0x216>
 800691a:	3f01      	subs	r7, #1
 800691c:	2300      	movs	r3, #0
 800691e:	9310      	str	r3, [sp, #64]	@ 0x40
 8006920:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8006922:	1b9b      	subs	r3, r3, r6
 8006924:	1e5a      	subs	r2, r3, #1
 8006926:	bf45      	ittet	mi
 8006928:	f1c3 0301 	rsbmi	r3, r3, #1
 800692c:	9300      	strmi	r3, [sp, #0]
 800692e:	2300      	movpl	r3, #0
 8006930:	2300      	movmi	r3, #0
 8006932:	9206      	str	r2, [sp, #24]
 8006934:	bf54      	ite	pl
 8006936:	9300      	strpl	r3, [sp, #0]
 8006938:	9306      	strmi	r3, [sp, #24]
 800693a:	2f00      	cmp	r7, #0
 800693c:	db39      	blt.n	80069b2 <_dtoa_r+0x21a>
 800693e:	9b06      	ldr	r3, [sp, #24]
 8006940:	970d      	str	r7, [sp, #52]	@ 0x34
 8006942:	443b      	add	r3, r7
 8006944:	9306      	str	r3, [sp, #24]
 8006946:	2300      	movs	r3, #0
 8006948:	9308      	str	r3, [sp, #32]
 800694a:	9b07      	ldr	r3, [sp, #28]
 800694c:	2b09      	cmp	r3, #9
 800694e:	d863      	bhi.n	8006a18 <_dtoa_r+0x280>
 8006950:	2b05      	cmp	r3, #5
 8006952:	bfc4      	itt	gt
 8006954:	3b04      	subgt	r3, #4
 8006956:	9307      	strgt	r3, [sp, #28]
 8006958:	9b07      	ldr	r3, [sp, #28]
 800695a:	f1a3 0302 	sub.w	r3, r3, #2
 800695e:	bfcc      	ite	gt
 8006960:	2400      	movgt	r4, #0
 8006962:	2401      	movle	r4, #1
 8006964:	2b03      	cmp	r3, #3
 8006966:	d863      	bhi.n	8006a30 <_dtoa_r+0x298>
 8006968:	e8df f003 	tbb	[pc, r3]
 800696c:	2b375452 	.word	0x2b375452
 8006970:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 8006974:	441e      	add	r6, r3
 8006976:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800697a:	2b20      	cmp	r3, #32
 800697c:	bfc1      	itttt	gt
 800697e:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8006982:	409f      	lslgt	r7, r3
 8006984:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8006988:	fa24 f303 	lsrgt.w	r3, r4, r3
 800698c:	bfd6      	itet	le
 800698e:	f1c3 0320 	rsble	r3, r3, #32
 8006992:	ea47 0003 	orrgt.w	r0, r7, r3
 8006996:	fa04 f003 	lslle.w	r0, r4, r3
 800699a:	f7f9 fe13 	bl	80005c4 <__aeabi_ui2d>
 800699e:	2201      	movs	r2, #1
 80069a0:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 80069a4:	3e01      	subs	r6, #1
 80069a6:	9212      	str	r2, [sp, #72]	@ 0x48
 80069a8:	e776      	b.n	8006898 <_dtoa_r+0x100>
 80069aa:	2301      	movs	r3, #1
 80069ac:	e7b7      	b.n	800691e <_dtoa_r+0x186>
 80069ae:	9010      	str	r0, [sp, #64]	@ 0x40
 80069b0:	e7b6      	b.n	8006920 <_dtoa_r+0x188>
 80069b2:	9b00      	ldr	r3, [sp, #0]
 80069b4:	1bdb      	subs	r3, r3, r7
 80069b6:	9300      	str	r3, [sp, #0]
 80069b8:	427b      	negs	r3, r7
 80069ba:	9308      	str	r3, [sp, #32]
 80069bc:	2300      	movs	r3, #0
 80069be:	930d      	str	r3, [sp, #52]	@ 0x34
 80069c0:	e7c3      	b.n	800694a <_dtoa_r+0x1b2>
 80069c2:	2301      	movs	r3, #1
 80069c4:	9309      	str	r3, [sp, #36]	@ 0x24
 80069c6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80069c8:	eb07 0b03 	add.w	fp, r7, r3
 80069cc:	f10b 0301 	add.w	r3, fp, #1
 80069d0:	2b01      	cmp	r3, #1
 80069d2:	9303      	str	r3, [sp, #12]
 80069d4:	bfb8      	it	lt
 80069d6:	2301      	movlt	r3, #1
 80069d8:	e006      	b.n	80069e8 <_dtoa_r+0x250>
 80069da:	2301      	movs	r3, #1
 80069dc:	9309      	str	r3, [sp, #36]	@ 0x24
 80069de:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80069e0:	2b00      	cmp	r3, #0
 80069e2:	dd28      	ble.n	8006a36 <_dtoa_r+0x29e>
 80069e4:	469b      	mov	fp, r3
 80069e6:	9303      	str	r3, [sp, #12]
 80069e8:	f8d9 001c 	ldr.w	r0, [r9, #28]
 80069ec:	2100      	movs	r1, #0
 80069ee:	2204      	movs	r2, #4
 80069f0:	f102 0514 	add.w	r5, r2, #20
 80069f4:	429d      	cmp	r5, r3
 80069f6:	d926      	bls.n	8006a46 <_dtoa_r+0x2ae>
 80069f8:	6041      	str	r1, [r0, #4]
 80069fa:	4648      	mov	r0, r9
 80069fc:	f000 fd9c 	bl	8007538 <_Balloc>
 8006a00:	4682      	mov	sl, r0
 8006a02:	2800      	cmp	r0, #0
 8006a04:	d142      	bne.n	8006a8c <_dtoa_r+0x2f4>
 8006a06:	4b1e      	ldr	r3, [pc, #120]	@ (8006a80 <_dtoa_r+0x2e8>)
 8006a08:	4602      	mov	r2, r0
 8006a0a:	f240 11af 	movw	r1, #431	@ 0x1af
 8006a0e:	e6da      	b.n	80067c6 <_dtoa_r+0x2e>
 8006a10:	2300      	movs	r3, #0
 8006a12:	e7e3      	b.n	80069dc <_dtoa_r+0x244>
 8006a14:	2300      	movs	r3, #0
 8006a16:	e7d5      	b.n	80069c4 <_dtoa_r+0x22c>
 8006a18:	2401      	movs	r4, #1
 8006a1a:	2300      	movs	r3, #0
 8006a1c:	9307      	str	r3, [sp, #28]
 8006a1e:	9409      	str	r4, [sp, #36]	@ 0x24
 8006a20:	f04f 3bff 	mov.w	fp, #4294967295
 8006a24:	2200      	movs	r2, #0
 8006a26:	f8cd b00c 	str.w	fp, [sp, #12]
 8006a2a:	2312      	movs	r3, #18
 8006a2c:	920c      	str	r2, [sp, #48]	@ 0x30
 8006a2e:	e7db      	b.n	80069e8 <_dtoa_r+0x250>
 8006a30:	2301      	movs	r3, #1
 8006a32:	9309      	str	r3, [sp, #36]	@ 0x24
 8006a34:	e7f4      	b.n	8006a20 <_dtoa_r+0x288>
 8006a36:	f04f 0b01 	mov.w	fp, #1
 8006a3a:	f8cd b00c 	str.w	fp, [sp, #12]
 8006a3e:	465b      	mov	r3, fp
 8006a40:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 8006a44:	e7d0      	b.n	80069e8 <_dtoa_r+0x250>
 8006a46:	3101      	adds	r1, #1
 8006a48:	0052      	lsls	r2, r2, #1
 8006a4a:	e7d1      	b.n	80069f0 <_dtoa_r+0x258>
 8006a4c:	f3af 8000 	nop.w
 8006a50:	636f4361 	.word	0x636f4361
 8006a54:	3fd287a7 	.word	0x3fd287a7
 8006a58:	8b60c8b3 	.word	0x8b60c8b3
 8006a5c:	3fc68a28 	.word	0x3fc68a28
 8006a60:	509f79fb 	.word	0x509f79fb
 8006a64:	3fd34413 	.word	0x3fd34413
 8006a68:	0800dc56 	.word	0x0800dc56
 8006a6c:	0800dc6d 	.word	0x0800dc6d
 8006a70:	7ff00000 	.word	0x7ff00000
 8006a74:	0800dc21 	.word	0x0800dc21
 8006a78:	3ff80000 	.word	0x3ff80000
 8006a7c:	0800de20 	.word	0x0800de20
 8006a80:	0800dcc5 	.word	0x0800dcc5
 8006a84:	0800dc52 	.word	0x0800dc52
 8006a88:	0800dc20 	.word	0x0800dc20
 8006a8c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8006a90:	6018      	str	r0, [r3, #0]
 8006a92:	9b03      	ldr	r3, [sp, #12]
 8006a94:	2b0e      	cmp	r3, #14
 8006a96:	f200 80a1 	bhi.w	8006bdc <_dtoa_r+0x444>
 8006a9a:	2c00      	cmp	r4, #0
 8006a9c:	f000 809e 	beq.w	8006bdc <_dtoa_r+0x444>
 8006aa0:	2f00      	cmp	r7, #0
 8006aa2:	dd33      	ble.n	8006b0c <_dtoa_r+0x374>
 8006aa4:	4b9c      	ldr	r3, [pc, #624]	@ (8006d18 <_dtoa_r+0x580>)
 8006aa6:	f007 020f 	and.w	r2, r7, #15
 8006aaa:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006aae:	ed93 7b00 	vldr	d7, [r3]
 8006ab2:	05f8      	lsls	r0, r7, #23
 8006ab4:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 8006ab8:	ea4f 1427 	mov.w	r4, r7, asr #4
 8006abc:	d516      	bpl.n	8006aec <_dtoa_r+0x354>
 8006abe:	4b97      	ldr	r3, [pc, #604]	@ (8006d1c <_dtoa_r+0x584>)
 8006ac0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8006ac4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006ac8:	f7f9 ff20 	bl	800090c <__aeabi_ddiv>
 8006acc:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006ad0:	f004 040f 	and.w	r4, r4, #15
 8006ad4:	2603      	movs	r6, #3
 8006ad6:	4d91      	ldr	r5, [pc, #580]	@ (8006d1c <_dtoa_r+0x584>)
 8006ad8:	b954      	cbnz	r4, 8006af0 <_dtoa_r+0x358>
 8006ada:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8006ade:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006ae2:	f7f9 ff13 	bl	800090c <__aeabi_ddiv>
 8006ae6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006aea:	e028      	b.n	8006b3e <_dtoa_r+0x3a6>
 8006aec:	2602      	movs	r6, #2
 8006aee:	e7f2      	b.n	8006ad6 <_dtoa_r+0x33e>
 8006af0:	07e1      	lsls	r1, r4, #31
 8006af2:	d508      	bpl.n	8006b06 <_dtoa_r+0x36e>
 8006af4:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8006af8:	e9d5 2300 	ldrd	r2, r3, [r5]
 8006afc:	f7f9 fddc 	bl	80006b8 <__aeabi_dmul>
 8006b00:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8006b04:	3601      	adds	r6, #1
 8006b06:	1064      	asrs	r4, r4, #1
 8006b08:	3508      	adds	r5, #8
 8006b0a:	e7e5      	b.n	8006ad8 <_dtoa_r+0x340>
 8006b0c:	f000 80af 	beq.w	8006c6e <_dtoa_r+0x4d6>
 8006b10:	427c      	negs	r4, r7
 8006b12:	4b81      	ldr	r3, [pc, #516]	@ (8006d18 <_dtoa_r+0x580>)
 8006b14:	4d81      	ldr	r5, [pc, #516]	@ (8006d1c <_dtoa_r+0x584>)
 8006b16:	f004 020f 	and.w	r2, r4, #15
 8006b1a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006b1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b22:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8006b26:	f7f9 fdc7 	bl	80006b8 <__aeabi_dmul>
 8006b2a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006b2e:	1124      	asrs	r4, r4, #4
 8006b30:	2300      	movs	r3, #0
 8006b32:	2602      	movs	r6, #2
 8006b34:	2c00      	cmp	r4, #0
 8006b36:	f040 808f 	bne.w	8006c58 <_dtoa_r+0x4c0>
 8006b3a:	2b00      	cmp	r3, #0
 8006b3c:	d1d3      	bne.n	8006ae6 <_dtoa_r+0x34e>
 8006b3e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8006b40:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 8006b44:	2b00      	cmp	r3, #0
 8006b46:	f000 8094 	beq.w	8006c72 <_dtoa_r+0x4da>
 8006b4a:	4b75      	ldr	r3, [pc, #468]	@ (8006d20 <_dtoa_r+0x588>)
 8006b4c:	2200      	movs	r2, #0
 8006b4e:	4620      	mov	r0, r4
 8006b50:	4629      	mov	r1, r5
 8006b52:	f7fa f823 	bl	8000b9c <__aeabi_dcmplt>
 8006b56:	2800      	cmp	r0, #0
 8006b58:	f000 808b 	beq.w	8006c72 <_dtoa_r+0x4da>
 8006b5c:	9b03      	ldr	r3, [sp, #12]
 8006b5e:	2b00      	cmp	r3, #0
 8006b60:	f000 8087 	beq.w	8006c72 <_dtoa_r+0x4da>
 8006b64:	f1bb 0f00 	cmp.w	fp, #0
 8006b68:	dd34      	ble.n	8006bd4 <_dtoa_r+0x43c>
 8006b6a:	4620      	mov	r0, r4
 8006b6c:	4b6d      	ldr	r3, [pc, #436]	@ (8006d24 <_dtoa_r+0x58c>)
 8006b6e:	2200      	movs	r2, #0
 8006b70:	4629      	mov	r1, r5
 8006b72:	f7f9 fda1 	bl	80006b8 <__aeabi_dmul>
 8006b76:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006b7a:	f107 38ff 	add.w	r8, r7, #4294967295
 8006b7e:	3601      	adds	r6, #1
 8006b80:	465c      	mov	r4, fp
 8006b82:	4630      	mov	r0, r6
 8006b84:	f7f9 fd2e 	bl	80005e4 <__aeabi_i2d>
 8006b88:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006b8c:	f7f9 fd94 	bl	80006b8 <__aeabi_dmul>
 8006b90:	4b65      	ldr	r3, [pc, #404]	@ (8006d28 <_dtoa_r+0x590>)
 8006b92:	2200      	movs	r2, #0
 8006b94:	f7f9 fbda 	bl	800034c <__adddf3>
 8006b98:	4605      	mov	r5, r0
 8006b9a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8006b9e:	2c00      	cmp	r4, #0
 8006ba0:	d16a      	bne.n	8006c78 <_dtoa_r+0x4e0>
 8006ba2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006ba6:	4b61      	ldr	r3, [pc, #388]	@ (8006d2c <_dtoa_r+0x594>)
 8006ba8:	2200      	movs	r2, #0
 8006baa:	f7f9 fbcd 	bl	8000348 <__aeabi_dsub>
 8006bae:	4602      	mov	r2, r0
 8006bb0:	460b      	mov	r3, r1
 8006bb2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8006bb6:	462a      	mov	r2, r5
 8006bb8:	4633      	mov	r3, r6
 8006bba:	f7fa f80d 	bl	8000bd8 <__aeabi_dcmpgt>
 8006bbe:	2800      	cmp	r0, #0
 8006bc0:	f040 8298 	bne.w	80070f4 <_dtoa_r+0x95c>
 8006bc4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006bc8:	462a      	mov	r2, r5
 8006bca:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8006bce:	f7f9 ffe5 	bl	8000b9c <__aeabi_dcmplt>
 8006bd2:	bb38      	cbnz	r0, 8006c24 <_dtoa_r+0x48c>
 8006bd4:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 8006bd8:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8006bdc:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8006bde:	2b00      	cmp	r3, #0
 8006be0:	f2c0 8157 	blt.w	8006e92 <_dtoa_r+0x6fa>
 8006be4:	2f0e      	cmp	r7, #14
 8006be6:	f300 8154 	bgt.w	8006e92 <_dtoa_r+0x6fa>
 8006bea:	4b4b      	ldr	r3, [pc, #300]	@ (8006d18 <_dtoa_r+0x580>)
 8006bec:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8006bf0:	ed93 7b00 	vldr	d7, [r3]
 8006bf4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8006bf6:	2b00      	cmp	r3, #0
 8006bf8:	ed8d 7b00 	vstr	d7, [sp]
 8006bfc:	f280 80e5 	bge.w	8006dca <_dtoa_r+0x632>
 8006c00:	9b03      	ldr	r3, [sp, #12]
 8006c02:	2b00      	cmp	r3, #0
 8006c04:	f300 80e1 	bgt.w	8006dca <_dtoa_r+0x632>
 8006c08:	d10c      	bne.n	8006c24 <_dtoa_r+0x48c>
 8006c0a:	4b48      	ldr	r3, [pc, #288]	@ (8006d2c <_dtoa_r+0x594>)
 8006c0c:	2200      	movs	r2, #0
 8006c0e:	ec51 0b17 	vmov	r0, r1, d7
 8006c12:	f7f9 fd51 	bl	80006b8 <__aeabi_dmul>
 8006c16:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006c1a:	f7f9 ffd3 	bl	8000bc4 <__aeabi_dcmpge>
 8006c1e:	2800      	cmp	r0, #0
 8006c20:	f000 8266 	beq.w	80070f0 <_dtoa_r+0x958>
 8006c24:	2400      	movs	r4, #0
 8006c26:	4625      	mov	r5, r4
 8006c28:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8006c2a:	4656      	mov	r6, sl
 8006c2c:	ea6f 0803 	mvn.w	r8, r3
 8006c30:	2700      	movs	r7, #0
 8006c32:	4621      	mov	r1, r4
 8006c34:	4648      	mov	r0, r9
 8006c36:	f000 fcbf 	bl	80075b8 <_Bfree>
 8006c3a:	2d00      	cmp	r5, #0
 8006c3c:	f000 80bd 	beq.w	8006dba <_dtoa_r+0x622>
 8006c40:	b12f      	cbz	r7, 8006c4e <_dtoa_r+0x4b6>
 8006c42:	42af      	cmp	r7, r5
 8006c44:	d003      	beq.n	8006c4e <_dtoa_r+0x4b6>
 8006c46:	4639      	mov	r1, r7
 8006c48:	4648      	mov	r0, r9
 8006c4a:	f000 fcb5 	bl	80075b8 <_Bfree>
 8006c4e:	4629      	mov	r1, r5
 8006c50:	4648      	mov	r0, r9
 8006c52:	f000 fcb1 	bl	80075b8 <_Bfree>
 8006c56:	e0b0      	b.n	8006dba <_dtoa_r+0x622>
 8006c58:	07e2      	lsls	r2, r4, #31
 8006c5a:	d505      	bpl.n	8006c68 <_dtoa_r+0x4d0>
 8006c5c:	e9d5 2300 	ldrd	r2, r3, [r5]
 8006c60:	f7f9 fd2a 	bl	80006b8 <__aeabi_dmul>
 8006c64:	3601      	adds	r6, #1
 8006c66:	2301      	movs	r3, #1
 8006c68:	1064      	asrs	r4, r4, #1
 8006c6a:	3508      	adds	r5, #8
 8006c6c:	e762      	b.n	8006b34 <_dtoa_r+0x39c>
 8006c6e:	2602      	movs	r6, #2
 8006c70:	e765      	b.n	8006b3e <_dtoa_r+0x3a6>
 8006c72:	9c03      	ldr	r4, [sp, #12]
 8006c74:	46b8      	mov	r8, r7
 8006c76:	e784      	b.n	8006b82 <_dtoa_r+0x3ea>
 8006c78:	4b27      	ldr	r3, [pc, #156]	@ (8006d18 <_dtoa_r+0x580>)
 8006c7a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8006c7c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8006c80:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8006c84:	4454      	add	r4, sl
 8006c86:	2900      	cmp	r1, #0
 8006c88:	d054      	beq.n	8006d34 <_dtoa_r+0x59c>
 8006c8a:	4929      	ldr	r1, [pc, #164]	@ (8006d30 <_dtoa_r+0x598>)
 8006c8c:	2000      	movs	r0, #0
 8006c8e:	f7f9 fe3d 	bl	800090c <__aeabi_ddiv>
 8006c92:	4633      	mov	r3, r6
 8006c94:	462a      	mov	r2, r5
 8006c96:	f7f9 fb57 	bl	8000348 <__aeabi_dsub>
 8006c9a:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8006c9e:	4656      	mov	r6, sl
 8006ca0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006ca4:	f7f9 ffb8 	bl	8000c18 <__aeabi_d2iz>
 8006ca8:	4605      	mov	r5, r0
 8006caa:	f7f9 fc9b 	bl	80005e4 <__aeabi_i2d>
 8006cae:	4602      	mov	r2, r0
 8006cb0:	460b      	mov	r3, r1
 8006cb2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006cb6:	f7f9 fb47 	bl	8000348 <__aeabi_dsub>
 8006cba:	3530      	adds	r5, #48	@ 0x30
 8006cbc:	4602      	mov	r2, r0
 8006cbe:	460b      	mov	r3, r1
 8006cc0:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8006cc4:	f806 5b01 	strb.w	r5, [r6], #1
 8006cc8:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8006ccc:	f7f9 ff66 	bl	8000b9c <__aeabi_dcmplt>
 8006cd0:	2800      	cmp	r0, #0
 8006cd2:	d172      	bne.n	8006dba <_dtoa_r+0x622>
 8006cd4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006cd8:	4911      	ldr	r1, [pc, #68]	@ (8006d20 <_dtoa_r+0x588>)
 8006cda:	2000      	movs	r0, #0
 8006cdc:	f7f9 fb34 	bl	8000348 <__aeabi_dsub>
 8006ce0:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8006ce4:	f7f9 ff5a 	bl	8000b9c <__aeabi_dcmplt>
 8006ce8:	2800      	cmp	r0, #0
 8006cea:	f040 80b4 	bne.w	8006e56 <_dtoa_r+0x6be>
 8006cee:	42a6      	cmp	r6, r4
 8006cf0:	f43f af70 	beq.w	8006bd4 <_dtoa_r+0x43c>
 8006cf4:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8006cf8:	4b0a      	ldr	r3, [pc, #40]	@ (8006d24 <_dtoa_r+0x58c>)
 8006cfa:	2200      	movs	r2, #0
 8006cfc:	f7f9 fcdc 	bl	80006b8 <__aeabi_dmul>
 8006d00:	4b08      	ldr	r3, [pc, #32]	@ (8006d24 <_dtoa_r+0x58c>)
 8006d02:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8006d06:	2200      	movs	r2, #0
 8006d08:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006d0c:	f7f9 fcd4 	bl	80006b8 <__aeabi_dmul>
 8006d10:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006d14:	e7c4      	b.n	8006ca0 <_dtoa_r+0x508>
 8006d16:	bf00      	nop
 8006d18:	0800de20 	.word	0x0800de20
 8006d1c:	0800ddf8 	.word	0x0800ddf8
 8006d20:	3ff00000 	.word	0x3ff00000
 8006d24:	40240000 	.word	0x40240000
 8006d28:	401c0000 	.word	0x401c0000
 8006d2c:	40140000 	.word	0x40140000
 8006d30:	3fe00000 	.word	0x3fe00000
 8006d34:	4631      	mov	r1, r6
 8006d36:	4628      	mov	r0, r5
 8006d38:	f7f9 fcbe 	bl	80006b8 <__aeabi_dmul>
 8006d3c:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8006d40:	9413      	str	r4, [sp, #76]	@ 0x4c
 8006d42:	4656      	mov	r6, sl
 8006d44:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006d48:	f7f9 ff66 	bl	8000c18 <__aeabi_d2iz>
 8006d4c:	4605      	mov	r5, r0
 8006d4e:	f7f9 fc49 	bl	80005e4 <__aeabi_i2d>
 8006d52:	4602      	mov	r2, r0
 8006d54:	460b      	mov	r3, r1
 8006d56:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006d5a:	f7f9 faf5 	bl	8000348 <__aeabi_dsub>
 8006d5e:	3530      	adds	r5, #48	@ 0x30
 8006d60:	f806 5b01 	strb.w	r5, [r6], #1
 8006d64:	4602      	mov	r2, r0
 8006d66:	460b      	mov	r3, r1
 8006d68:	42a6      	cmp	r6, r4
 8006d6a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8006d6e:	f04f 0200 	mov.w	r2, #0
 8006d72:	d124      	bne.n	8006dbe <_dtoa_r+0x626>
 8006d74:	4baf      	ldr	r3, [pc, #700]	@ (8007034 <_dtoa_r+0x89c>)
 8006d76:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8006d7a:	f7f9 fae7 	bl	800034c <__adddf3>
 8006d7e:	4602      	mov	r2, r0
 8006d80:	460b      	mov	r3, r1
 8006d82:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006d86:	f7f9 ff27 	bl	8000bd8 <__aeabi_dcmpgt>
 8006d8a:	2800      	cmp	r0, #0
 8006d8c:	d163      	bne.n	8006e56 <_dtoa_r+0x6be>
 8006d8e:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8006d92:	49a8      	ldr	r1, [pc, #672]	@ (8007034 <_dtoa_r+0x89c>)
 8006d94:	2000      	movs	r0, #0
 8006d96:	f7f9 fad7 	bl	8000348 <__aeabi_dsub>
 8006d9a:	4602      	mov	r2, r0
 8006d9c:	460b      	mov	r3, r1
 8006d9e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006da2:	f7f9 fefb 	bl	8000b9c <__aeabi_dcmplt>
 8006da6:	2800      	cmp	r0, #0
 8006da8:	f43f af14 	beq.w	8006bd4 <_dtoa_r+0x43c>
 8006dac:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8006dae:	1e73      	subs	r3, r6, #1
 8006db0:	9313      	str	r3, [sp, #76]	@ 0x4c
 8006db2:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8006db6:	2b30      	cmp	r3, #48	@ 0x30
 8006db8:	d0f8      	beq.n	8006dac <_dtoa_r+0x614>
 8006dba:	4647      	mov	r7, r8
 8006dbc:	e03b      	b.n	8006e36 <_dtoa_r+0x69e>
 8006dbe:	4b9e      	ldr	r3, [pc, #632]	@ (8007038 <_dtoa_r+0x8a0>)
 8006dc0:	f7f9 fc7a 	bl	80006b8 <__aeabi_dmul>
 8006dc4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006dc8:	e7bc      	b.n	8006d44 <_dtoa_r+0x5ac>
 8006dca:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 8006dce:	4656      	mov	r6, sl
 8006dd0:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006dd4:	4620      	mov	r0, r4
 8006dd6:	4629      	mov	r1, r5
 8006dd8:	f7f9 fd98 	bl	800090c <__aeabi_ddiv>
 8006ddc:	f7f9 ff1c 	bl	8000c18 <__aeabi_d2iz>
 8006de0:	4680      	mov	r8, r0
 8006de2:	f7f9 fbff 	bl	80005e4 <__aeabi_i2d>
 8006de6:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006dea:	f7f9 fc65 	bl	80006b8 <__aeabi_dmul>
 8006dee:	4602      	mov	r2, r0
 8006df0:	460b      	mov	r3, r1
 8006df2:	4620      	mov	r0, r4
 8006df4:	4629      	mov	r1, r5
 8006df6:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8006dfa:	f7f9 faa5 	bl	8000348 <__aeabi_dsub>
 8006dfe:	f806 4b01 	strb.w	r4, [r6], #1
 8006e02:	9d03      	ldr	r5, [sp, #12]
 8006e04:	eba6 040a 	sub.w	r4, r6, sl
 8006e08:	42a5      	cmp	r5, r4
 8006e0a:	4602      	mov	r2, r0
 8006e0c:	460b      	mov	r3, r1
 8006e0e:	d133      	bne.n	8006e78 <_dtoa_r+0x6e0>
 8006e10:	f7f9 fa9c 	bl	800034c <__adddf3>
 8006e14:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006e18:	4604      	mov	r4, r0
 8006e1a:	460d      	mov	r5, r1
 8006e1c:	f7f9 fedc 	bl	8000bd8 <__aeabi_dcmpgt>
 8006e20:	b9c0      	cbnz	r0, 8006e54 <_dtoa_r+0x6bc>
 8006e22:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006e26:	4620      	mov	r0, r4
 8006e28:	4629      	mov	r1, r5
 8006e2a:	f7f9 fead 	bl	8000b88 <__aeabi_dcmpeq>
 8006e2e:	b110      	cbz	r0, 8006e36 <_dtoa_r+0x69e>
 8006e30:	f018 0f01 	tst.w	r8, #1
 8006e34:	d10e      	bne.n	8006e54 <_dtoa_r+0x6bc>
 8006e36:	9902      	ldr	r1, [sp, #8]
 8006e38:	4648      	mov	r0, r9
 8006e3a:	f000 fbbd 	bl	80075b8 <_Bfree>
 8006e3e:	2300      	movs	r3, #0
 8006e40:	7033      	strb	r3, [r6, #0]
 8006e42:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8006e44:	3701      	adds	r7, #1
 8006e46:	601f      	str	r7, [r3, #0]
 8006e48:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8006e4a:	2b00      	cmp	r3, #0
 8006e4c:	f000 824b 	beq.w	80072e6 <_dtoa_r+0xb4e>
 8006e50:	601e      	str	r6, [r3, #0]
 8006e52:	e248      	b.n	80072e6 <_dtoa_r+0xb4e>
 8006e54:	46b8      	mov	r8, r7
 8006e56:	4633      	mov	r3, r6
 8006e58:	461e      	mov	r6, r3
 8006e5a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006e5e:	2a39      	cmp	r2, #57	@ 0x39
 8006e60:	d106      	bne.n	8006e70 <_dtoa_r+0x6d8>
 8006e62:	459a      	cmp	sl, r3
 8006e64:	d1f8      	bne.n	8006e58 <_dtoa_r+0x6c0>
 8006e66:	2230      	movs	r2, #48	@ 0x30
 8006e68:	f108 0801 	add.w	r8, r8, #1
 8006e6c:	f88a 2000 	strb.w	r2, [sl]
 8006e70:	781a      	ldrb	r2, [r3, #0]
 8006e72:	3201      	adds	r2, #1
 8006e74:	701a      	strb	r2, [r3, #0]
 8006e76:	e7a0      	b.n	8006dba <_dtoa_r+0x622>
 8006e78:	4b6f      	ldr	r3, [pc, #444]	@ (8007038 <_dtoa_r+0x8a0>)
 8006e7a:	2200      	movs	r2, #0
 8006e7c:	f7f9 fc1c 	bl	80006b8 <__aeabi_dmul>
 8006e80:	2200      	movs	r2, #0
 8006e82:	2300      	movs	r3, #0
 8006e84:	4604      	mov	r4, r0
 8006e86:	460d      	mov	r5, r1
 8006e88:	f7f9 fe7e 	bl	8000b88 <__aeabi_dcmpeq>
 8006e8c:	2800      	cmp	r0, #0
 8006e8e:	d09f      	beq.n	8006dd0 <_dtoa_r+0x638>
 8006e90:	e7d1      	b.n	8006e36 <_dtoa_r+0x69e>
 8006e92:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006e94:	2a00      	cmp	r2, #0
 8006e96:	f000 80ea 	beq.w	800706e <_dtoa_r+0x8d6>
 8006e9a:	9a07      	ldr	r2, [sp, #28]
 8006e9c:	2a01      	cmp	r2, #1
 8006e9e:	f300 80cd 	bgt.w	800703c <_dtoa_r+0x8a4>
 8006ea2:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8006ea4:	2a00      	cmp	r2, #0
 8006ea6:	f000 80c1 	beq.w	800702c <_dtoa_r+0x894>
 8006eaa:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8006eae:	9c08      	ldr	r4, [sp, #32]
 8006eb0:	9e00      	ldr	r6, [sp, #0]
 8006eb2:	9a00      	ldr	r2, [sp, #0]
 8006eb4:	441a      	add	r2, r3
 8006eb6:	9200      	str	r2, [sp, #0]
 8006eb8:	9a06      	ldr	r2, [sp, #24]
 8006eba:	2101      	movs	r1, #1
 8006ebc:	441a      	add	r2, r3
 8006ebe:	4648      	mov	r0, r9
 8006ec0:	9206      	str	r2, [sp, #24]
 8006ec2:	f000 fc77 	bl	80077b4 <__i2b>
 8006ec6:	4605      	mov	r5, r0
 8006ec8:	b166      	cbz	r6, 8006ee4 <_dtoa_r+0x74c>
 8006eca:	9b06      	ldr	r3, [sp, #24]
 8006ecc:	2b00      	cmp	r3, #0
 8006ece:	dd09      	ble.n	8006ee4 <_dtoa_r+0x74c>
 8006ed0:	42b3      	cmp	r3, r6
 8006ed2:	9a00      	ldr	r2, [sp, #0]
 8006ed4:	bfa8      	it	ge
 8006ed6:	4633      	movge	r3, r6
 8006ed8:	1ad2      	subs	r2, r2, r3
 8006eda:	9200      	str	r2, [sp, #0]
 8006edc:	9a06      	ldr	r2, [sp, #24]
 8006ede:	1af6      	subs	r6, r6, r3
 8006ee0:	1ad3      	subs	r3, r2, r3
 8006ee2:	9306      	str	r3, [sp, #24]
 8006ee4:	9b08      	ldr	r3, [sp, #32]
 8006ee6:	b30b      	cbz	r3, 8006f2c <_dtoa_r+0x794>
 8006ee8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006eea:	2b00      	cmp	r3, #0
 8006eec:	f000 80c6 	beq.w	800707c <_dtoa_r+0x8e4>
 8006ef0:	2c00      	cmp	r4, #0
 8006ef2:	f000 80c0 	beq.w	8007076 <_dtoa_r+0x8de>
 8006ef6:	4629      	mov	r1, r5
 8006ef8:	4622      	mov	r2, r4
 8006efa:	4648      	mov	r0, r9
 8006efc:	f000 fd12 	bl	8007924 <__pow5mult>
 8006f00:	9a02      	ldr	r2, [sp, #8]
 8006f02:	4601      	mov	r1, r0
 8006f04:	4605      	mov	r5, r0
 8006f06:	4648      	mov	r0, r9
 8006f08:	f000 fc6a 	bl	80077e0 <__multiply>
 8006f0c:	9902      	ldr	r1, [sp, #8]
 8006f0e:	4680      	mov	r8, r0
 8006f10:	4648      	mov	r0, r9
 8006f12:	f000 fb51 	bl	80075b8 <_Bfree>
 8006f16:	9b08      	ldr	r3, [sp, #32]
 8006f18:	1b1b      	subs	r3, r3, r4
 8006f1a:	9308      	str	r3, [sp, #32]
 8006f1c:	f000 80b1 	beq.w	8007082 <_dtoa_r+0x8ea>
 8006f20:	9a08      	ldr	r2, [sp, #32]
 8006f22:	4641      	mov	r1, r8
 8006f24:	4648      	mov	r0, r9
 8006f26:	f000 fcfd 	bl	8007924 <__pow5mult>
 8006f2a:	9002      	str	r0, [sp, #8]
 8006f2c:	2101      	movs	r1, #1
 8006f2e:	4648      	mov	r0, r9
 8006f30:	f000 fc40 	bl	80077b4 <__i2b>
 8006f34:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006f36:	4604      	mov	r4, r0
 8006f38:	2b00      	cmp	r3, #0
 8006f3a:	f000 81d8 	beq.w	80072ee <_dtoa_r+0xb56>
 8006f3e:	461a      	mov	r2, r3
 8006f40:	4601      	mov	r1, r0
 8006f42:	4648      	mov	r0, r9
 8006f44:	f000 fcee 	bl	8007924 <__pow5mult>
 8006f48:	9b07      	ldr	r3, [sp, #28]
 8006f4a:	2b01      	cmp	r3, #1
 8006f4c:	4604      	mov	r4, r0
 8006f4e:	f300 809f 	bgt.w	8007090 <_dtoa_r+0x8f8>
 8006f52:	9b04      	ldr	r3, [sp, #16]
 8006f54:	2b00      	cmp	r3, #0
 8006f56:	f040 8097 	bne.w	8007088 <_dtoa_r+0x8f0>
 8006f5a:	9b05      	ldr	r3, [sp, #20]
 8006f5c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006f60:	2b00      	cmp	r3, #0
 8006f62:	f040 8093 	bne.w	800708c <_dtoa_r+0x8f4>
 8006f66:	9b05      	ldr	r3, [sp, #20]
 8006f68:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8006f6c:	0d1b      	lsrs	r3, r3, #20
 8006f6e:	051b      	lsls	r3, r3, #20
 8006f70:	b133      	cbz	r3, 8006f80 <_dtoa_r+0x7e8>
 8006f72:	9b00      	ldr	r3, [sp, #0]
 8006f74:	3301      	adds	r3, #1
 8006f76:	9300      	str	r3, [sp, #0]
 8006f78:	9b06      	ldr	r3, [sp, #24]
 8006f7a:	3301      	adds	r3, #1
 8006f7c:	9306      	str	r3, [sp, #24]
 8006f7e:	2301      	movs	r3, #1
 8006f80:	9308      	str	r3, [sp, #32]
 8006f82:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006f84:	2b00      	cmp	r3, #0
 8006f86:	f000 81b8 	beq.w	80072fa <_dtoa_r+0xb62>
 8006f8a:	6923      	ldr	r3, [r4, #16]
 8006f8c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8006f90:	6918      	ldr	r0, [r3, #16]
 8006f92:	f000 fbc3 	bl	800771c <__hi0bits>
 8006f96:	f1c0 0020 	rsb	r0, r0, #32
 8006f9a:	9b06      	ldr	r3, [sp, #24]
 8006f9c:	4418      	add	r0, r3
 8006f9e:	f010 001f 	ands.w	r0, r0, #31
 8006fa2:	f000 8082 	beq.w	80070aa <_dtoa_r+0x912>
 8006fa6:	f1c0 0320 	rsb	r3, r0, #32
 8006faa:	2b04      	cmp	r3, #4
 8006fac:	dd73      	ble.n	8007096 <_dtoa_r+0x8fe>
 8006fae:	9b00      	ldr	r3, [sp, #0]
 8006fb0:	f1c0 001c 	rsb	r0, r0, #28
 8006fb4:	4403      	add	r3, r0
 8006fb6:	9300      	str	r3, [sp, #0]
 8006fb8:	9b06      	ldr	r3, [sp, #24]
 8006fba:	4403      	add	r3, r0
 8006fbc:	4406      	add	r6, r0
 8006fbe:	9306      	str	r3, [sp, #24]
 8006fc0:	9b00      	ldr	r3, [sp, #0]
 8006fc2:	2b00      	cmp	r3, #0
 8006fc4:	dd05      	ble.n	8006fd2 <_dtoa_r+0x83a>
 8006fc6:	9902      	ldr	r1, [sp, #8]
 8006fc8:	461a      	mov	r2, r3
 8006fca:	4648      	mov	r0, r9
 8006fcc:	f000 fd04 	bl	80079d8 <__lshift>
 8006fd0:	9002      	str	r0, [sp, #8]
 8006fd2:	9b06      	ldr	r3, [sp, #24]
 8006fd4:	2b00      	cmp	r3, #0
 8006fd6:	dd05      	ble.n	8006fe4 <_dtoa_r+0x84c>
 8006fd8:	4621      	mov	r1, r4
 8006fda:	461a      	mov	r2, r3
 8006fdc:	4648      	mov	r0, r9
 8006fde:	f000 fcfb 	bl	80079d8 <__lshift>
 8006fe2:	4604      	mov	r4, r0
 8006fe4:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8006fe6:	2b00      	cmp	r3, #0
 8006fe8:	d061      	beq.n	80070ae <_dtoa_r+0x916>
 8006fea:	9802      	ldr	r0, [sp, #8]
 8006fec:	4621      	mov	r1, r4
 8006fee:	f000 fd5f 	bl	8007ab0 <__mcmp>
 8006ff2:	2800      	cmp	r0, #0
 8006ff4:	da5b      	bge.n	80070ae <_dtoa_r+0x916>
 8006ff6:	2300      	movs	r3, #0
 8006ff8:	9902      	ldr	r1, [sp, #8]
 8006ffa:	220a      	movs	r2, #10
 8006ffc:	4648      	mov	r0, r9
 8006ffe:	f000 fafd 	bl	80075fc <__multadd>
 8007002:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007004:	9002      	str	r0, [sp, #8]
 8007006:	f107 38ff 	add.w	r8, r7, #4294967295
 800700a:	2b00      	cmp	r3, #0
 800700c:	f000 8177 	beq.w	80072fe <_dtoa_r+0xb66>
 8007010:	4629      	mov	r1, r5
 8007012:	2300      	movs	r3, #0
 8007014:	220a      	movs	r2, #10
 8007016:	4648      	mov	r0, r9
 8007018:	f000 faf0 	bl	80075fc <__multadd>
 800701c:	f1bb 0f00 	cmp.w	fp, #0
 8007020:	4605      	mov	r5, r0
 8007022:	dc6f      	bgt.n	8007104 <_dtoa_r+0x96c>
 8007024:	9b07      	ldr	r3, [sp, #28]
 8007026:	2b02      	cmp	r3, #2
 8007028:	dc49      	bgt.n	80070be <_dtoa_r+0x926>
 800702a:	e06b      	b.n	8007104 <_dtoa_r+0x96c>
 800702c:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800702e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8007032:	e73c      	b.n	8006eae <_dtoa_r+0x716>
 8007034:	3fe00000 	.word	0x3fe00000
 8007038:	40240000 	.word	0x40240000
 800703c:	9b03      	ldr	r3, [sp, #12]
 800703e:	1e5c      	subs	r4, r3, #1
 8007040:	9b08      	ldr	r3, [sp, #32]
 8007042:	42a3      	cmp	r3, r4
 8007044:	db09      	blt.n	800705a <_dtoa_r+0x8c2>
 8007046:	1b1c      	subs	r4, r3, r4
 8007048:	9b03      	ldr	r3, [sp, #12]
 800704a:	2b00      	cmp	r3, #0
 800704c:	f6bf af30 	bge.w	8006eb0 <_dtoa_r+0x718>
 8007050:	9b00      	ldr	r3, [sp, #0]
 8007052:	9a03      	ldr	r2, [sp, #12]
 8007054:	1a9e      	subs	r6, r3, r2
 8007056:	2300      	movs	r3, #0
 8007058:	e72b      	b.n	8006eb2 <_dtoa_r+0x71a>
 800705a:	9b08      	ldr	r3, [sp, #32]
 800705c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800705e:	9408      	str	r4, [sp, #32]
 8007060:	1ae3      	subs	r3, r4, r3
 8007062:	441a      	add	r2, r3
 8007064:	9e00      	ldr	r6, [sp, #0]
 8007066:	9b03      	ldr	r3, [sp, #12]
 8007068:	920d      	str	r2, [sp, #52]	@ 0x34
 800706a:	2400      	movs	r4, #0
 800706c:	e721      	b.n	8006eb2 <_dtoa_r+0x71a>
 800706e:	9c08      	ldr	r4, [sp, #32]
 8007070:	9e00      	ldr	r6, [sp, #0]
 8007072:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 8007074:	e728      	b.n	8006ec8 <_dtoa_r+0x730>
 8007076:	f8dd 8008 	ldr.w	r8, [sp, #8]
 800707a:	e751      	b.n	8006f20 <_dtoa_r+0x788>
 800707c:	9a08      	ldr	r2, [sp, #32]
 800707e:	9902      	ldr	r1, [sp, #8]
 8007080:	e750      	b.n	8006f24 <_dtoa_r+0x78c>
 8007082:	f8cd 8008 	str.w	r8, [sp, #8]
 8007086:	e751      	b.n	8006f2c <_dtoa_r+0x794>
 8007088:	2300      	movs	r3, #0
 800708a:	e779      	b.n	8006f80 <_dtoa_r+0x7e8>
 800708c:	9b04      	ldr	r3, [sp, #16]
 800708e:	e777      	b.n	8006f80 <_dtoa_r+0x7e8>
 8007090:	2300      	movs	r3, #0
 8007092:	9308      	str	r3, [sp, #32]
 8007094:	e779      	b.n	8006f8a <_dtoa_r+0x7f2>
 8007096:	d093      	beq.n	8006fc0 <_dtoa_r+0x828>
 8007098:	9a00      	ldr	r2, [sp, #0]
 800709a:	331c      	adds	r3, #28
 800709c:	441a      	add	r2, r3
 800709e:	9200      	str	r2, [sp, #0]
 80070a0:	9a06      	ldr	r2, [sp, #24]
 80070a2:	441a      	add	r2, r3
 80070a4:	441e      	add	r6, r3
 80070a6:	9206      	str	r2, [sp, #24]
 80070a8:	e78a      	b.n	8006fc0 <_dtoa_r+0x828>
 80070aa:	4603      	mov	r3, r0
 80070ac:	e7f4      	b.n	8007098 <_dtoa_r+0x900>
 80070ae:	9b03      	ldr	r3, [sp, #12]
 80070b0:	2b00      	cmp	r3, #0
 80070b2:	46b8      	mov	r8, r7
 80070b4:	dc20      	bgt.n	80070f8 <_dtoa_r+0x960>
 80070b6:	469b      	mov	fp, r3
 80070b8:	9b07      	ldr	r3, [sp, #28]
 80070ba:	2b02      	cmp	r3, #2
 80070bc:	dd1e      	ble.n	80070fc <_dtoa_r+0x964>
 80070be:	f1bb 0f00 	cmp.w	fp, #0
 80070c2:	f47f adb1 	bne.w	8006c28 <_dtoa_r+0x490>
 80070c6:	4621      	mov	r1, r4
 80070c8:	465b      	mov	r3, fp
 80070ca:	2205      	movs	r2, #5
 80070cc:	4648      	mov	r0, r9
 80070ce:	f000 fa95 	bl	80075fc <__multadd>
 80070d2:	4601      	mov	r1, r0
 80070d4:	4604      	mov	r4, r0
 80070d6:	9802      	ldr	r0, [sp, #8]
 80070d8:	f000 fcea 	bl	8007ab0 <__mcmp>
 80070dc:	2800      	cmp	r0, #0
 80070de:	f77f ada3 	ble.w	8006c28 <_dtoa_r+0x490>
 80070e2:	4656      	mov	r6, sl
 80070e4:	2331      	movs	r3, #49	@ 0x31
 80070e6:	f806 3b01 	strb.w	r3, [r6], #1
 80070ea:	f108 0801 	add.w	r8, r8, #1
 80070ee:	e59f      	b.n	8006c30 <_dtoa_r+0x498>
 80070f0:	9c03      	ldr	r4, [sp, #12]
 80070f2:	46b8      	mov	r8, r7
 80070f4:	4625      	mov	r5, r4
 80070f6:	e7f4      	b.n	80070e2 <_dtoa_r+0x94a>
 80070f8:	f8dd b00c 	ldr.w	fp, [sp, #12]
 80070fc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80070fe:	2b00      	cmp	r3, #0
 8007100:	f000 8101 	beq.w	8007306 <_dtoa_r+0xb6e>
 8007104:	2e00      	cmp	r6, #0
 8007106:	dd05      	ble.n	8007114 <_dtoa_r+0x97c>
 8007108:	4629      	mov	r1, r5
 800710a:	4632      	mov	r2, r6
 800710c:	4648      	mov	r0, r9
 800710e:	f000 fc63 	bl	80079d8 <__lshift>
 8007112:	4605      	mov	r5, r0
 8007114:	9b08      	ldr	r3, [sp, #32]
 8007116:	2b00      	cmp	r3, #0
 8007118:	d05c      	beq.n	80071d4 <_dtoa_r+0xa3c>
 800711a:	6869      	ldr	r1, [r5, #4]
 800711c:	4648      	mov	r0, r9
 800711e:	f000 fa0b 	bl	8007538 <_Balloc>
 8007122:	4606      	mov	r6, r0
 8007124:	b928      	cbnz	r0, 8007132 <_dtoa_r+0x99a>
 8007126:	4b82      	ldr	r3, [pc, #520]	@ (8007330 <_dtoa_r+0xb98>)
 8007128:	4602      	mov	r2, r0
 800712a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800712e:	f7ff bb4a 	b.w	80067c6 <_dtoa_r+0x2e>
 8007132:	692a      	ldr	r2, [r5, #16]
 8007134:	3202      	adds	r2, #2
 8007136:	0092      	lsls	r2, r2, #2
 8007138:	f105 010c 	add.w	r1, r5, #12
 800713c:	300c      	adds	r0, #12
 800713e:	f001 ff69 	bl	8009014 <memcpy>
 8007142:	2201      	movs	r2, #1
 8007144:	4631      	mov	r1, r6
 8007146:	4648      	mov	r0, r9
 8007148:	f000 fc46 	bl	80079d8 <__lshift>
 800714c:	f10a 0301 	add.w	r3, sl, #1
 8007150:	9300      	str	r3, [sp, #0]
 8007152:	eb0a 030b 	add.w	r3, sl, fp
 8007156:	9308      	str	r3, [sp, #32]
 8007158:	9b04      	ldr	r3, [sp, #16]
 800715a:	f003 0301 	and.w	r3, r3, #1
 800715e:	462f      	mov	r7, r5
 8007160:	9306      	str	r3, [sp, #24]
 8007162:	4605      	mov	r5, r0
 8007164:	9b00      	ldr	r3, [sp, #0]
 8007166:	9802      	ldr	r0, [sp, #8]
 8007168:	4621      	mov	r1, r4
 800716a:	f103 3bff 	add.w	fp, r3, #4294967295
 800716e:	f7ff fa89 	bl	8006684 <quorem>
 8007172:	4603      	mov	r3, r0
 8007174:	3330      	adds	r3, #48	@ 0x30
 8007176:	9003      	str	r0, [sp, #12]
 8007178:	4639      	mov	r1, r7
 800717a:	9802      	ldr	r0, [sp, #8]
 800717c:	9309      	str	r3, [sp, #36]	@ 0x24
 800717e:	f000 fc97 	bl	8007ab0 <__mcmp>
 8007182:	462a      	mov	r2, r5
 8007184:	9004      	str	r0, [sp, #16]
 8007186:	4621      	mov	r1, r4
 8007188:	4648      	mov	r0, r9
 800718a:	f000 fcad 	bl	8007ae8 <__mdiff>
 800718e:	68c2      	ldr	r2, [r0, #12]
 8007190:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007192:	4606      	mov	r6, r0
 8007194:	bb02      	cbnz	r2, 80071d8 <_dtoa_r+0xa40>
 8007196:	4601      	mov	r1, r0
 8007198:	9802      	ldr	r0, [sp, #8]
 800719a:	f000 fc89 	bl	8007ab0 <__mcmp>
 800719e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80071a0:	4602      	mov	r2, r0
 80071a2:	4631      	mov	r1, r6
 80071a4:	4648      	mov	r0, r9
 80071a6:	920c      	str	r2, [sp, #48]	@ 0x30
 80071a8:	9309      	str	r3, [sp, #36]	@ 0x24
 80071aa:	f000 fa05 	bl	80075b8 <_Bfree>
 80071ae:	9b07      	ldr	r3, [sp, #28]
 80071b0:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 80071b2:	9e00      	ldr	r6, [sp, #0]
 80071b4:	ea42 0103 	orr.w	r1, r2, r3
 80071b8:	9b06      	ldr	r3, [sp, #24]
 80071ba:	4319      	orrs	r1, r3
 80071bc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80071be:	d10d      	bne.n	80071dc <_dtoa_r+0xa44>
 80071c0:	2b39      	cmp	r3, #57	@ 0x39
 80071c2:	d027      	beq.n	8007214 <_dtoa_r+0xa7c>
 80071c4:	9a04      	ldr	r2, [sp, #16]
 80071c6:	2a00      	cmp	r2, #0
 80071c8:	dd01      	ble.n	80071ce <_dtoa_r+0xa36>
 80071ca:	9b03      	ldr	r3, [sp, #12]
 80071cc:	3331      	adds	r3, #49	@ 0x31
 80071ce:	f88b 3000 	strb.w	r3, [fp]
 80071d2:	e52e      	b.n	8006c32 <_dtoa_r+0x49a>
 80071d4:	4628      	mov	r0, r5
 80071d6:	e7b9      	b.n	800714c <_dtoa_r+0x9b4>
 80071d8:	2201      	movs	r2, #1
 80071da:	e7e2      	b.n	80071a2 <_dtoa_r+0xa0a>
 80071dc:	9904      	ldr	r1, [sp, #16]
 80071de:	2900      	cmp	r1, #0
 80071e0:	db04      	blt.n	80071ec <_dtoa_r+0xa54>
 80071e2:	9807      	ldr	r0, [sp, #28]
 80071e4:	4301      	orrs	r1, r0
 80071e6:	9806      	ldr	r0, [sp, #24]
 80071e8:	4301      	orrs	r1, r0
 80071ea:	d120      	bne.n	800722e <_dtoa_r+0xa96>
 80071ec:	2a00      	cmp	r2, #0
 80071ee:	ddee      	ble.n	80071ce <_dtoa_r+0xa36>
 80071f0:	9902      	ldr	r1, [sp, #8]
 80071f2:	9300      	str	r3, [sp, #0]
 80071f4:	2201      	movs	r2, #1
 80071f6:	4648      	mov	r0, r9
 80071f8:	f000 fbee 	bl	80079d8 <__lshift>
 80071fc:	4621      	mov	r1, r4
 80071fe:	9002      	str	r0, [sp, #8]
 8007200:	f000 fc56 	bl	8007ab0 <__mcmp>
 8007204:	2800      	cmp	r0, #0
 8007206:	9b00      	ldr	r3, [sp, #0]
 8007208:	dc02      	bgt.n	8007210 <_dtoa_r+0xa78>
 800720a:	d1e0      	bne.n	80071ce <_dtoa_r+0xa36>
 800720c:	07da      	lsls	r2, r3, #31
 800720e:	d5de      	bpl.n	80071ce <_dtoa_r+0xa36>
 8007210:	2b39      	cmp	r3, #57	@ 0x39
 8007212:	d1da      	bne.n	80071ca <_dtoa_r+0xa32>
 8007214:	2339      	movs	r3, #57	@ 0x39
 8007216:	f88b 3000 	strb.w	r3, [fp]
 800721a:	4633      	mov	r3, r6
 800721c:	461e      	mov	r6, r3
 800721e:	3b01      	subs	r3, #1
 8007220:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8007224:	2a39      	cmp	r2, #57	@ 0x39
 8007226:	d04e      	beq.n	80072c6 <_dtoa_r+0xb2e>
 8007228:	3201      	adds	r2, #1
 800722a:	701a      	strb	r2, [r3, #0]
 800722c:	e501      	b.n	8006c32 <_dtoa_r+0x49a>
 800722e:	2a00      	cmp	r2, #0
 8007230:	dd03      	ble.n	800723a <_dtoa_r+0xaa2>
 8007232:	2b39      	cmp	r3, #57	@ 0x39
 8007234:	d0ee      	beq.n	8007214 <_dtoa_r+0xa7c>
 8007236:	3301      	adds	r3, #1
 8007238:	e7c9      	b.n	80071ce <_dtoa_r+0xa36>
 800723a:	9a00      	ldr	r2, [sp, #0]
 800723c:	9908      	ldr	r1, [sp, #32]
 800723e:	f802 3c01 	strb.w	r3, [r2, #-1]
 8007242:	428a      	cmp	r2, r1
 8007244:	d028      	beq.n	8007298 <_dtoa_r+0xb00>
 8007246:	9902      	ldr	r1, [sp, #8]
 8007248:	2300      	movs	r3, #0
 800724a:	220a      	movs	r2, #10
 800724c:	4648      	mov	r0, r9
 800724e:	f000 f9d5 	bl	80075fc <__multadd>
 8007252:	42af      	cmp	r7, r5
 8007254:	9002      	str	r0, [sp, #8]
 8007256:	f04f 0300 	mov.w	r3, #0
 800725a:	f04f 020a 	mov.w	r2, #10
 800725e:	4639      	mov	r1, r7
 8007260:	4648      	mov	r0, r9
 8007262:	d107      	bne.n	8007274 <_dtoa_r+0xadc>
 8007264:	f000 f9ca 	bl	80075fc <__multadd>
 8007268:	4607      	mov	r7, r0
 800726a:	4605      	mov	r5, r0
 800726c:	9b00      	ldr	r3, [sp, #0]
 800726e:	3301      	adds	r3, #1
 8007270:	9300      	str	r3, [sp, #0]
 8007272:	e777      	b.n	8007164 <_dtoa_r+0x9cc>
 8007274:	f000 f9c2 	bl	80075fc <__multadd>
 8007278:	4629      	mov	r1, r5
 800727a:	4607      	mov	r7, r0
 800727c:	2300      	movs	r3, #0
 800727e:	220a      	movs	r2, #10
 8007280:	4648      	mov	r0, r9
 8007282:	f000 f9bb 	bl	80075fc <__multadd>
 8007286:	4605      	mov	r5, r0
 8007288:	e7f0      	b.n	800726c <_dtoa_r+0xad4>
 800728a:	f1bb 0f00 	cmp.w	fp, #0
 800728e:	bfcc      	ite	gt
 8007290:	465e      	movgt	r6, fp
 8007292:	2601      	movle	r6, #1
 8007294:	4456      	add	r6, sl
 8007296:	2700      	movs	r7, #0
 8007298:	9902      	ldr	r1, [sp, #8]
 800729a:	9300      	str	r3, [sp, #0]
 800729c:	2201      	movs	r2, #1
 800729e:	4648      	mov	r0, r9
 80072a0:	f000 fb9a 	bl	80079d8 <__lshift>
 80072a4:	4621      	mov	r1, r4
 80072a6:	9002      	str	r0, [sp, #8]
 80072a8:	f000 fc02 	bl	8007ab0 <__mcmp>
 80072ac:	2800      	cmp	r0, #0
 80072ae:	dcb4      	bgt.n	800721a <_dtoa_r+0xa82>
 80072b0:	d102      	bne.n	80072b8 <_dtoa_r+0xb20>
 80072b2:	9b00      	ldr	r3, [sp, #0]
 80072b4:	07db      	lsls	r3, r3, #31
 80072b6:	d4b0      	bmi.n	800721a <_dtoa_r+0xa82>
 80072b8:	4633      	mov	r3, r6
 80072ba:	461e      	mov	r6, r3
 80072bc:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80072c0:	2a30      	cmp	r2, #48	@ 0x30
 80072c2:	d0fa      	beq.n	80072ba <_dtoa_r+0xb22>
 80072c4:	e4b5      	b.n	8006c32 <_dtoa_r+0x49a>
 80072c6:	459a      	cmp	sl, r3
 80072c8:	d1a8      	bne.n	800721c <_dtoa_r+0xa84>
 80072ca:	2331      	movs	r3, #49	@ 0x31
 80072cc:	f108 0801 	add.w	r8, r8, #1
 80072d0:	f88a 3000 	strb.w	r3, [sl]
 80072d4:	e4ad      	b.n	8006c32 <_dtoa_r+0x49a>
 80072d6:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80072d8:	f8df a058 	ldr.w	sl, [pc, #88]	@ 8007334 <_dtoa_r+0xb9c>
 80072dc:	b11b      	cbz	r3, 80072e6 <_dtoa_r+0xb4e>
 80072de:	f10a 0308 	add.w	r3, sl, #8
 80072e2:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 80072e4:	6013      	str	r3, [r2, #0]
 80072e6:	4650      	mov	r0, sl
 80072e8:	b017      	add	sp, #92	@ 0x5c
 80072ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80072ee:	9b07      	ldr	r3, [sp, #28]
 80072f0:	2b01      	cmp	r3, #1
 80072f2:	f77f ae2e 	ble.w	8006f52 <_dtoa_r+0x7ba>
 80072f6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80072f8:	9308      	str	r3, [sp, #32]
 80072fa:	2001      	movs	r0, #1
 80072fc:	e64d      	b.n	8006f9a <_dtoa_r+0x802>
 80072fe:	f1bb 0f00 	cmp.w	fp, #0
 8007302:	f77f aed9 	ble.w	80070b8 <_dtoa_r+0x920>
 8007306:	4656      	mov	r6, sl
 8007308:	9802      	ldr	r0, [sp, #8]
 800730a:	4621      	mov	r1, r4
 800730c:	f7ff f9ba 	bl	8006684 <quorem>
 8007310:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 8007314:	f806 3b01 	strb.w	r3, [r6], #1
 8007318:	eba6 020a 	sub.w	r2, r6, sl
 800731c:	4593      	cmp	fp, r2
 800731e:	ddb4      	ble.n	800728a <_dtoa_r+0xaf2>
 8007320:	9902      	ldr	r1, [sp, #8]
 8007322:	2300      	movs	r3, #0
 8007324:	220a      	movs	r2, #10
 8007326:	4648      	mov	r0, r9
 8007328:	f000 f968 	bl	80075fc <__multadd>
 800732c:	9002      	str	r0, [sp, #8]
 800732e:	e7eb      	b.n	8007308 <_dtoa_r+0xb70>
 8007330:	0800dcc5 	.word	0x0800dcc5
 8007334:	0800dc49 	.word	0x0800dc49

08007338 <_free_r>:
 8007338:	b538      	push	{r3, r4, r5, lr}
 800733a:	4605      	mov	r5, r0
 800733c:	2900      	cmp	r1, #0
 800733e:	d041      	beq.n	80073c4 <_free_r+0x8c>
 8007340:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007344:	1f0c      	subs	r4, r1, #4
 8007346:	2b00      	cmp	r3, #0
 8007348:	bfb8      	it	lt
 800734a:	18e4      	addlt	r4, r4, r3
 800734c:	f000 f8e8 	bl	8007520 <__malloc_lock>
 8007350:	4a1d      	ldr	r2, [pc, #116]	@ (80073c8 <_free_r+0x90>)
 8007352:	6813      	ldr	r3, [r2, #0]
 8007354:	b933      	cbnz	r3, 8007364 <_free_r+0x2c>
 8007356:	6063      	str	r3, [r4, #4]
 8007358:	6014      	str	r4, [r2, #0]
 800735a:	4628      	mov	r0, r5
 800735c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007360:	f000 b8e4 	b.w	800752c <__malloc_unlock>
 8007364:	42a3      	cmp	r3, r4
 8007366:	d908      	bls.n	800737a <_free_r+0x42>
 8007368:	6820      	ldr	r0, [r4, #0]
 800736a:	1821      	adds	r1, r4, r0
 800736c:	428b      	cmp	r3, r1
 800736e:	bf01      	itttt	eq
 8007370:	6819      	ldreq	r1, [r3, #0]
 8007372:	685b      	ldreq	r3, [r3, #4]
 8007374:	1809      	addeq	r1, r1, r0
 8007376:	6021      	streq	r1, [r4, #0]
 8007378:	e7ed      	b.n	8007356 <_free_r+0x1e>
 800737a:	461a      	mov	r2, r3
 800737c:	685b      	ldr	r3, [r3, #4]
 800737e:	b10b      	cbz	r3, 8007384 <_free_r+0x4c>
 8007380:	42a3      	cmp	r3, r4
 8007382:	d9fa      	bls.n	800737a <_free_r+0x42>
 8007384:	6811      	ldr	r1, [r2, #0]
 8007386:	1850      	adds	r0, r2, r1
 8007388:	42a0      	cmp	r0, r4
 800738a:	d10b      	bne.n	80073a4 <_free_r+0x6c>
 800738c:	6820      	ldr	r0, [r4, #0]
 800738e:	4401      	add	r1, r0
 8007390:	1850      	adds	r0, r2, r1
 8007392:	4283      	cmp	r3, r0
 8007394:	6011      	str	r1, [r2, #0]
 8007396:	d1e0      	bne.n	800735a <_free_r+0x22>
 8007398:	6818      	ldr	r0, [r3, #0]
 800739a:	685b      	ldr	r3, [r3, #4]
 800739c:	6053      	str	r3, [r2, #4]
 800739e:	4408      	add	r0, r1
 80073a0:	6010      	str	r0, [r2, #0]
 80073a2:	e7da      	b.n	800735a <_free_r+0x22>
 80073a4:	d902      	bls.n	80073ac <_free_r+0x74>
 80073a6:	230c      	movs	r3, #12
 80073a8:	602b      	str	r3, [r5, #0]
 80073aa:	e7d6      	b.n	800735a <_free_r+0x22>
 80073ac:	6820      	ldr	r0, [r4, #0]
 80073ae:	1821      	adds	r1, r4, r0
 80073b0:	428b      	cmp	r3, r1
 80073b2:	bf04      	itt	eq
 80073b4:	6819      	ldreq	r1, [r3, #0]
 80073b6:	685b      	ldreq	r3, [r3, #4]
 80073b8:	6063      	str	r3, [r4, #4]
 80073ba:	bf04      	itt	eq
 80073bc:	1809      	addeq	r1, r1, r0
 80073be:	6021      	streq	r1, [r4, #0]
 80073c0:	6054      	str	r4, [r2, #4]
 80073c2:	e7ca      	b.n	800735a <_free_r+0x22>
 80073c4:	bd38      	pop	{r3, r4, r5, pc}
 80073c6:	bf00      	nop
 80073c8:	2001d340 	.word	0x2001d340

080073cc <malloc>:
 80073cc:	4b02      	ldr	r3, [pc, #8]	@ (80073d8 <malloc+0xc>)
 80073ce:	4601      	mov	r1, r0
 80073d0:	6818      	ldr	r0, [r3, #0]
 80073d2:	f000 b825 	b.w	8007420 <_malloc_r>
 80073d6:	bf00      	nop
 80073d8:	2000001c 	.word	0x2000001c

080073dc <sbrk_aligned>:
 80073dc:	b570      	push	{r4, r5, r6, lr}
 80073de:	4e0f      	ldr	r6, [pc, #60]	@ (800741c <sbrk_aligned+0x40>)
 80073e0:	460c      	mov	r4, r1
 80073e2:	6831      	ldr	r1, [r6, #0]
 80073e4:	4605      	mov	r5, r0
 80073e6:	b911      	cbnz	r1, 80073ee <sbrk_aligned+0x12>
 80073e8:	f001 fe04 	bl	8008ff4 <_sbrk_r>
 80073ec:	6030      	str	r0, [r6, #0]
 80073ee:	4621      	mov	r1, r4
 80073f0:	4628      	mov	r0, r5
 80073f2:	f001 fdff 	bl	8008ff4 <_sbrk_r>
 80073f6:	1c43      	adds	r3, r0, #1
 80073f8:	d103      	bne.n	8007402 <sbrk_aligned+0x26>
 80073fa:	f04f 34ff 	mov.w	r4, #4294967295
 80073fe:	4620      	mov	r0, r4
 8007400:	bd70      	pop	{r4, r5, r6, pc}
 8007402:	1cc4      	adds	r4, r0, #3
 8007404:	f024 0403 	bic.w	r4, r4, #3
 8007408:	42a0      	cmp	r0, r4
 800740a:	d0f8      	beq.n	80073fe <sbrk_aligned+0x22>
 800740c:	1a21      	subs	r1, r4, r0
 800740e:	4628      	mov	r0, r5
 8007410:	f001 fdf0 	bl	8008ff4 <_sbrk_r>
 8007414:	3001      	adds	r0, #1
 8007416:	d1f2      	bne.n	80073fe <sbrk_aligned+0x22>
 8007418:	e7ef      	b.n	80073fa <sbrk_aligned+0x1e>
 800741a:	bf00      	nop
 800741c:	2001d33c 	.word	0x2001d33c

08007420 <_malloc_r>:
 8007420:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007424:	1ccd      	adds	r5, r1, #3
 8007426:	f025 0503 	bic.w	r5, r5, #3
 800742a:	3508      	adds	r5, #8
 800742c:	2d0c      	cmp	r5, #12
 800742e:	bf38      	it	cc
 8007430:	250c      	movcc	r5, #12
 8007432:	2d00      	cmp	r5, #0
 8007434:	4606      	mov	r6, r0
 8007436:	db01      	blt.n	800743c <_malloc_r+0x1c>
 8007438:	42a9      	cmp	r1, r5
 800743a:	d904      	bls.n	8007446 <_malloc_r+0x26>
 800743c:	230c      	movs	r3, #12
 800743e:	6033      	str	r3, [r6, #0]
 8007440:	2000      	movs	r0, #0
 8007442:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007446:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800751c <_malloc_r+0xfc>
 800744a:	f000 f869 	bl	8007520 <__malloc_lock>
 800744e:	f8d8 3000 	ldr.w	r3, [r8]
 8007452:	461c      	mov	r4, r3
 8007454:	bb44      	cbnz	r4, 80074a8 <_malloc_r+0x88>
 8007456:	4629      	mov	r1, r5
 8007458:	4630      	mov	r0, r6
 800745a:	f7ff ffbf 	bl	80073dc <sbrk_aligned>
 800745e:	1c43      	adds	r3, r0, #1
 8007460:	4604      	mov	r4, r0
 8007462:	d158      	bne.n	8007516 <_malloc_r+0xf6>
 8007464:	f8d8 4000 	ldr.w	r4, [r8]
 8007468:	4627      	mov	r7, r4
 800746a:	2f00      	cmp	r7, #0
 800746c:	d143      	bne.n	80074f6 <_malloc_r+0xd6>
 800746e:	2c00      	cmp	r4, #0
 8007470:	d04b      	beq.n	800750a <_malloc_r+0xea>
 8007472:	6823      	ldr	r3, [r4, #0]
 8007474:	4639      	mov	r1, r7
 8007476:	4630      	mov	r0, r6
 8007478:	eb04 0903 	add.w	r9, r4, r3
 800747c:	f001 fdba 	bl	8008ff4 <_sbrk_r>
 8007480:	4581      	cmp	r9, r0
 8007482:	d142      	bne.n	800750a <_malloc_r+0xea>
 8007484:	6821      	ldr	r1, [r4, #0]
 8007486:	1a6d      	subs	r5, r5, r1
 8007488:	4629      	mov	r1, r5
 800748a:	4630      	mov	r0, r6
 800748c:	f7ff ffa6 	bl	80073dc <sbrk_aligned>
 8007490:	3001      	adds	r0, #1
 8007492:	d03a      	beq.n	800750a <_malloc_r+0xea>
 8007494:	6823      	ldr	r3, [r4, #0]
 8007496:	442b      	add	r3, r5
 8007498:	6023      	str	r3, [r4, #0]
 800749a:	f8d8 3000 	ldr.w	r3, [r8]
 800749e:	685a      	ldr	r2, [r3, #4]
 80074a0:	bb62      	cbnz	r2, 80074fc <_malloc_r+0xdc>
 80074a2:	f8c8 7000 	str.w	r7, [r8]
 80074a6:	e00f      	b.n	80074c8 <_malloc_r+0xa8>
 80074a8:	6822      	ldr	r2, [r4, #0]
 80074aa:	1b52      	subs	r2, r2, r5
 80074ac:	d420      	bmi.n	80074f0 <_malloc_r+0xd0>
 80074ae:	2a0b      	cmp	r2, #11
 80074b0:	d917      	bls.n	80074e2 <_malloc_r+0xc2>
 80074b2:	1961      	adds	r1, r4, r5
 80074b4:	42a3      	cmp	r3, r4
 80074b6:	6025      	str	r5, [r4, #0]
 80074b8:	bf18      	it	ne
 80074ba:	6059      	strne	r1, [r3, #4]
 80074bc:	6863      	ldr	r3, [r4, #4]
 80074be:	bf08      	it	eq
 80074c0:	f8c8 1000 	streq.w	r1, [r8]
 80074c4:	5162      	str	r2, [r4, r5]
 80074c6:	604b      	str	r3, [r1, #4]
 80074c8:	4630      	mov	r0, r6
 80074ca:	f000 f82f 	bl	800752c <__malloc_unlock>
 80074ce:	f104 000b 	add.w	r0, r4, #11
 80074d2:	1d23      	adds	r3, r4, #4
 80074d4:	f020 0007 	bic.w	r0, r0, #7
 80074d8:	1ac2      	subs	r2, r0, r3
 80074da:	bf1c      	itt	ne
 80074dc:	1a1b      	subne	r3, r3, r0
 80074de:	50a3      	strne	r3, [r4, r2]
 80074e0:	e7af      	b.n	8007442 <_malloc_r+0x22>
 80074e2:	6862      	ldr	r2, [r4, #4]
 80074e4:	42a3      	cmp	r3, r4
 80074e6:	bf0c      	ite	eq
 80074e8:	f8c8 2000 	streq.w	r2, [r8]
 80074ec:	605a      	strne	r2, [r3, #4]
 80074ee:	e7eb      	b.n	80074c8 <_malloc_r+0xa8>
 80074f0:	4623      	mov	r3, r4
 80074f2:	6864      	ldr	r4, [r4, #4]
 80074f4:	e7ae      	b.n	8007454 <_malloc_r+0x34>
 80074f6:	463c      	mov	r4, r7
 80074f8:	687f      	ldr	r7, [r7, #4]
 80074fa:	e7b6      	b.n	800746a <_malloc_r+0x4a>
 80074fc:	461a      	mov	r2, r3
 80074fe:	685b      	ldr	r3, [r3, #4]
 8007500:	42a3      	cmp	r3, r4
 8007502:	d1fb      	bne.n	80074fc <_malloc_r+0xdc>
 8007504:	2300      	movs	r3, #0
 8007506:	6053      	str	r3, [r2, #4]
 8007508:	e7de      	b.n	80074c8 <_malloc_r+0xa8>
 800750a:	230c      	movs	r3, #12
 800750c:	6033      	str	r3, [r6, #0]
 800750e:	4630      	mov	r0, r6
 8007510:	f000 f80c 	bl	800752c <__malloc_unlock>
 8007514:	e794      	b.n	8007440 <_malloc_r+0x20>
 8007516:	6005      	str	r5, [r0, #0]
 8007518:	e7d6      	b.n	80074c8 <_malloc_r+0xa8>
 800751a:	bf00      	nop
 800751c:	2001d340 	.word	0x2001d340

08007520 <__malloc_lock>:
 8007520:	4801      	ldr	r0, [pc, #4]	@ (8007528 <__malloc_lock+0x8>)
 8007522:	f7ff b8a6 	b.w	8006672 <__retarget_lock_acquire_recursive>
 8007526:	bf00      	nop
 8007528:	2001d338 	.word	0x2001d338

0800752c <__malloc_unlock>:
 800752c:	4801      	ldr	r0, [pc, #4]	@ (8007534 <__malloc_unlock+0x8>)
 800752e:	f7ff b8a1 	b.w	8006674 <__retarget_lock_release_recursive>
 8007532:	bf00      	nop
 8007534:	2001d338 	.word	0x2001d338

08007538 <_Balloc>:
 8007538:	b570      	push	{r4, r5, r6, lr}
 800753a:	69c6      	ldr	r6, [r0, #28]
 800753c:	4604      	mov	r4, r0
 800753e:	460d      	mov	r5, r1
 8007540:	b976      	cbnz	r6, 8007560 <_Balloc+0x28>
 8007542:	2010      	movs	r0, #16
 8007544:	f7ff ff42 	bl	80073cc <malloc>
 8007548:	4602      	mov	r2, r0
 800754a:	61e0      	str	r0, [r4, #28]
 800754c:	b920      	cbnz	r0, 8007558 <_Balloc+0x20>
 800754e:	4b18      	ldr	r3, [pc, #96]	@ (80075b0 <_Balloc+0x78>)
 8007550:	4818      	ldr	r0, [pc, #96]	@ (80075b4 <_Balloc+0x7c>)
 8007552:	216b      	movs	r1, #107	@ 0x6b
 8007554:	f001 fd74 	bl	8009040 <__assert_func>
 8007558:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800755c:	6006      	str	r6, [r0, #0]
 800755e:	60c6      	str	r6, [r0, #12]
 8007560:	69e6      	ldr	r6, [r4, #28]
 8007562:	68f3      	ldr	r3, [r6, #12]
 8007564:	b183      	cbz	r3, 8007588 <_Balloc+0x50>
 8007566:	69e3      	ldr	r3, [r4, #28]
 8007568:	68db      	ldr	r3, [r3, #12]
 800756a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800756e:	b9b8      	cbnz	r0, 80075a0 <_Balloc+0x68>
 8007570:	2101      	movs	r1, #1
 8007572:	fa01 f605 	lsl.w	r6, r1, r5
 8007576:	1d72      	adds	r2, r6, #5
 8007578:	0092      	lsls	r2, r2, #2
 800757a:	4620      	mov	r0, r4
 800757c:	f001 fd7e 	bl	800907c <_calloc_r>
 8007580:	b160      	cbz	r0, 800759c <_Balloc+0x64>
 8007582:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8007586:	e00e      	b.n	80075a6 <_Balloc+0x6e>
 8007588:	2221      	movs	r2, #33	@ 0x21
 800758a:	2104      	movs	r1, #4
 800758c:	4620      	mov	r0, r4
 800758e:	f001 fd75 	bl	800907c <_calloc_r>
 8007592:	69e3      	ldr	r3, [r4, #28]
 8007594:	60f0      	str	r0, [r6, #12]
 8007596:	68db      	ldr	r3, [r3, #12]
 8007598:	2b00      	cmp	r3, #0
 800759a:	d1e4      	bne.n	8007566 <_Balloc+0x2e>
 800759c:	2000      	movs	r0, #0
 800759e:	bd70      	pop	{r4, r5, r6, pc}
 80075a0:	6802      	ldr	r2, [r0, #0]
 80075a2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80075a6:	2300      	movs	r3, #0
 80075a8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80075ac:	e7f7      	b.n	800759e <_Balloc+0x66>
 80075ae:	bf00      	nop
 80075b0:	0800dc56 	.word	0x0800dc56
 80075b4:	0800dcd6 	.word	0x0800dcd6

080075b8 <_Bfree>:
 80075b8:	b570      	push	{r4, r5, r6, lr}
 80075ba:	69c6      	ldr	r6, [r0, #28]
 80075bc:	4605      	mov	r5, r0
 80075be:	460c      	mov	r4, r1
 80075c0:	b976      	cbnz	r6, 80075e0 <_Bfree+0x28>
 80075c2:	2010      	movs	r0, #16
 80075c4:	f7ff ff02 	bl	80073cc <malloc>
 80075c8:	4602      	mov	r2, r0
 80075ca:	61e8      	str	r0, [r5, #28]
 80075cc:	b920      	cbnz	r0, 80075d8 <_Bfree+0x20>
 80075ce:	4b09      	ldr	r3, [pc, #36]	@ (80075f4 <_Bfree+0x3c>)
 80075d0:	4809      	ldr	r0, [pc, #36]	@ (80075f8 <_Bfree+0x40>)
 80075d2:	218f      	movs	r1, #143	@ 0x8f
 80075d4:	f001 fd34 	bl	8009040 <__assert_func>
 80075d8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80075dc:	6006      	str	r6, [r0, #0]
 80075de:	60c6      	str	r6, [r0, #12]
 80075e0:	b13c      	cbz	r4, 80075f2 <_Bfree+0x3a>
 80075e2:	69eb      	ldr	r3, [r5, #28]
 80075e4:	6862      	ldr	r2, [r4, #4]
 80075e6:	68db      	ldr	r3, [r3, #12]
 80075e8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80075ec:	6021      	str	r1, [r4, #0]
 80075ee:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80075f2:	bd70      	pop	{r4, r5, r6, pc}
 80075f4:	0800dc56 	.word	0x0800dc56
 80075f8:	0800dcd6 	.word	0x0800dcd6

080075fc <__multadd>:
 80075fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007600:	690d      	ldr	r5, [r1, #16]
 8007602:	4607      	mov	r7, r0
 8007604:	460c      	mov	r4, r1
 8007606:	461e      	mov	r6, r3
 8007608:	f101 0c14 	add.w	ip, r1, #20
 800760c:	2000      	movs	r0, #0
 800760e:	f8dc 3000 	ldr.w	r3, [ip]
 8007612:	b299      	uxth	r1, r3
 8007614:	fb02 6101 	mla	r1, r2, r1, r6
 8007618:	0c1e      	lsrs	r6, r3, #16
 800761a:	0c0b      	lsrs	r3, r1, #16
 800761c:	fb02 3306 	mla	r3, r2, r6, r3
 8007620:	b289      	uxth	r1, r1
 8007622:	3001      	adds	r0, #1
 8007624:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8007628:	4285      	cmp	r5, r0
 800762a:	f84c 1b04 	str.w	r1, [ip], #4
 800762e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8007632:	dcec      	bgt.n	800760e <__multadd+0x12>
 8007634:	b30e      	cbz	r6, 800767a <__multadd+0x7e>
 8007636:	68a3      	ldr	r3, [r4, #8]
 8007638:	42ab      	cmp	r3, r5
 800763a:	dc19      	bgt.n	8007670 <__multadd+0x74>
 800763c:	6861      	ldr	r1, [r4, #4]
 800763e:	4638      	mov	r0, r7
 8007640:	3101      	adds	r1, #1
 8007642:	f7ff ff79 	bl	8007538 <_Balloc>
 8007646:	4680      	mov	r8, r0
 8007648:	b928      	cbnz	r0, 8007656 <__multadd+0x5a>
 800764a:	4602      	mov	r2, r0
 800764c:	4b0c      	ldr	r3, [pc, #48]	@ (8007680 <__multadd+0x84>)
 800764e:	480d      	ldr	r0, [pc, #52]	@ (8007684 <__multadd+0x88>)
 8007650:	21ba      	movs	r1, #186	@ 0xba
 8007652:	f001 fcf5 	bl	8009040 <__assert_func>
 8007656:	6922      	ldr	r2, [r4, #16]
 8007658:	3202      	adds	r2, #2
 800765a:	f104 010c 	add.w	r1, r4, #12
 800765e:	0092      	lsls	r2, r2, #2
 8007660:	300c      	adds	r0, #12
 8007662:	f001 fcd7 	bl	8009014 <memcpy>
 8007666:	4621      	mov	r1, r4
 8007668:	4638      	mov	r0, r7
 800766a:	f7ff ffa5 	bl	80075b8 <_Bfree>
 800766e:	4644      	mov	r4, r8
 8007670:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8007674:	3501      	adds	r5, #1
 8007676:	615e      	str	r6, [r3, #20]
 8007678:	6125      	str	r5, [r4, #16]
 800767a:	4620      	mov	r0, r4
 800767c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007680:	0800dcc5 	.word	0x0800dcc5
 8007684:	0800dcd6 	.word	0x0800dcd6

08007688 <__s2b>:
 8007688:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800768c:	460c      	mov	r4, r1
 800768e:	4615      	mov	r5, r2
 8007690:	461f      	mov	r7, r3
 8007692:	2209      	movs	r2, #9
 8007694:	3308      	adds	r3, #8
 8007696:	4606      	mov	r6, r0
 8007698:	fb93 f3f2 	sdiv	r3, r3, r2
 800769c:	2100      	movs	r1, #0
 800769e:	2201      	movs	r2, #1
 80076a0:	429a      	cmp	r2, r3
 80076a2:	db09      	blt.n	80076b8 <__s2b+0x30>
 80076a4:	4630      	mov	r0, r6
 80076a6:	f7ff ff47 	bl	8007538 <_Balloc>
 80076aa:	b940      	cbnz	r0, 80076be <__s2b+0x36>
 80076ac:	4602      	mov	r2, r0
 80076ae:	4b19      	ldr	r3, [pc, #100]	@ (8007714 <__s2b+0x8c>)
 80076b0:	4819      	ldr	r0, [pc, #100]	@ (8007718 <__s2b+0x90>)
 80076b2:	21d3      	movs	r1, #211	@ 0xd3
 80076b4:	f001 fcc4 	bl	8009040 <__assert_func>
 80076b8:	0052      	lsls	r2, r2, #1
 80076ba:	3101      	adds	r1, #1
 80076bc:	e7f0      	b.n	80076a0 <__s2b+0x18>
 80076be:	9b08      	ldr	r3, [sp, #32]
 80076c0:	6143      	str	r3, [r0, #20]
 80076c2:	2d09      	cmp	r5, #9
 80076c4:	f04f 0301 	mov.w	r3, #1
 80076c8:	6103      	str	r3, [r0, #16]
 80076ca:	dd16      	ble.n	80076fa <__s2b+0x72>
 80076cc:	f104 0909 	add.w	r9, r4, #9
 80076d0:	46c8      	mov	r8, r9
 80076d2:	442c      	add	r4, r5
 80076d4:	f818 3b01 	ldrb.w	r3, [r8], #1
 80076d8:	4601      	mov	r1, r0
 80076da:	3b30      	subs	r3, #48	@ 0x30
 80076dc:	220a      	movs	r2, #10
 80076de:	4630      	mov	r0, r6
 80076e0:	f7ff ff8c 	bl	80075fc <__multadd>
 80076e4:	45a0      	cmp	r8, r4
 80076e6:	d1f5      	bne.n	80076d4 <__s2b+0x4c>
 80076e8:	f1a5 0408 	sub.w	r4, r5, #8
 80076ec:	444c      	add	r4, r9
 80076ee:	1b2d      	subs	r5, r5, r4
 80076f0:	1963      	adds	r3, r4, r5
 80076f2:	42bb      	cmp	r3, r7
 80076f4:	db04      	blt.n	8007700 <__s2b+0x78>
 80076f6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80076fa:	340a      	adds	r4, #10
 80076fc:	2509      	movs	r5, #9
 80076fe:	e7f6      	b.n	80076ee <__s2b+0x66>
 8007700:	f814 3b01 	ldrb.w	r3, [r4], #1
 8007704:	4601      	mov	r1, r0
 8007706:	3b30      	subs	r3, #48	@ 0x30
 8007708:	220a      	movs	r2, #10
 800770a:	4630      	mov	r0, r6
 800770c:	f7ff ff76 	bl	80075fc <__multadd>
 8007710:	e7ee      	b.n	80076f0 <__s2b+0x68>
 8007712:	bf00      	nop
 8007714:	0800dcc5 	.word	0x0800dcc5
 8007718:	0800dcd6 	.word	0x0800dcd6

0800771c <__hi0bits>:
 800771c:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8007720:	4603      	mov	r3, r0
 8007722:	bf36      	itet	cc
 8007724:	0403      	lslcc	r3, r0, #16
 8007726:	2000      	movcs	r0, #0
 8007728:	2010      	movcc	r0, #16
 800772a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800772e:	bf3c      	itt	cc
 8007730:	021b      	lslcc	r3, r3, #8
 8007732:	3008      	addcc	r0, #8
 8007734:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007738:	bf3c      	itt	cc
 800773a:	011b      	lslcc	r3, r3, #4
 800773c:	3004      	addcc	r0, #4
 800773e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007742:	bf3c      	itt	cc
 8007744:	009b      	lslcc	r3, r3, #2
 8007746:	3002      	addcc	r0, #2
 8007748:	2b00      	cmp	r3, #0
 800774a:	db05      	blt.n	8007758 <__hi0bits+0x3c>
 800774c:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8007750:	f100 0001 	add.w	r0, r0, #1
 8007754:	bf08      	it	eq
 8007756:	2020      	moveq	r0, #32
 8007758:	4770      	bx	lr

0800775a <__lo0bits>:
 800775a:	6803      	ldr	r3, [r0, #0]
 800775c:	4602      	mov	r2, r0
 800775e:	f013 0007 	ands.w	r0, r3, #7
 8007762:	d00b      	beq.n	800777c <__lo0bits+0x22>
 8007764:	07d9      	lsls	r1, r3, #31
 8007766:	d421      	bmi.n	80077ac <__lo0bits+0x52>
 8007768:	0798      	lsls	r0, r3, #30
 800776a:	bf49      	itett	mi
 800776c:	085b      	lsrmi	r3, r3, #1
 800776e:	089b      	lsrpl	r3, r3, #2
 8007770:	2001      	movmi	r0, #1
 8007772:	6013      	strmi	r3, [r2, #0]
 8007774:	bf5c      	itt	pl
 8007776:	6013      	strpl	r3, [r2, #0]
 8007778:	2002      	movpl	r0, #2
 800777a:	4770      	bx	lr
 800777c:	b299      	uxth	r1, r3
 800777e:	b909      	cbnz	r1, 8007784 <__lo0bits+0x2a>
 8007780:	0c1b      	lsrs	r3, r3, #16
 8007782:	2010      	movs	r0, #16
 8007784:	b2d9      	uxtb	r1, r3
 8007786:	b909      	cbnz	r1, 800778c <__lo0bits+0x32>
 8007788:	3008      	adds	r0, #8
 800778a:	0a1b      	lsrs	r3, r3, #8
 800778c:	0719      	lsls	r1, r3, #28
 800778e:	bf04      	itt	eq
 8007790:	091b      	lsreq	r3, r3, #4
 8007792:	3004      	addeq	r0, #4
 8007794:	0799      	lsls	r1, r3, #30
 8007796:	bf04      	itt	eq
 8007798:	089b      	lsreq	r3, r3, #2
 800779a:	3002      	addeq	r0, #2
 800779c:	07d9      	lsls	r1, r3, #31
 800779e:	d403      	bmi.n	80077a8 <__lo0bits+0x4e>
 80077a0:	085b      	lsrs	r3, r3, #1
 80077a2:	f100 0001 	add.w	r0, r0, #1
 80077a6:	d003      	beq.n	80077b0 <__lo0bits+0x56>
 80077a8:	6013      	str	r3, [r2, #0]
 80077aa:	4770      	bx	lr
 80077ac:	2000      	movs	r0, #0
 80077ae:	4770      	bx	lr
 80077b0:	2020      	movs	r0, #32
 80077b2:	4770      	bx	lr

080077b4 <__i2b>:
 80077b4:	b510      	push	{r4, lr}
 80077b6:	460c      	mov	r4, r1
 80077b8:	2101      	movs	r1, #1
 80077ba:	f7ff febd 	bl	8007538 <_Balloc>
 80077be:	4602      	mov	r2, r0
 80077c0:	b928      	cbnz	r0, 80077ce <__i2b+0x1a>
 80077c2:	4b05      	ldr	r3, [pc, #20]	@ (80077d8 <__i2b+0x24>)
 80077c4:	4805      	ldr	r0, [pc, #20]	@ (80077dc <__i2b+0x28>)
 80077c6:	f240 1145 	movw	r1, #325	@ 0x145
 80077ca:	f001 fc39 	bl	8009040 <__assert_func>
 80077ce:	2301      	movs	r3, #1
 80077d0:	6144      	str	r4, [r0, #20]
 80077d2:	6103      	str	r3, [r0, #16]
 80077d4:	bd10      	pop	{r4, pc}
 80077d6:	bf00      	nop
 80077d8:	0800dcc5 	.word	0x0800dcc5
 80077dc:	0800dcd6 	.word	0x0800dcd6

080077e0 <__multiply>:
 80077e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80077e4:	4617      	mov	r7, r2
 80077e6:	690a      	ldr	r2, [r1, #16]
 80077e8:	693b      	ldr	r3, [r7, #16]
 80077ea:	429a      	cmp	r2, r3
 80077ec:	bfa8      	it	ge
 80077ee:	463b      	movge	r3, r7
 80077f0:	4689      	mov	r9, r1
 80077f2:	bfa4      	itt	ge
 80077f4:	460f      	movge	r7, r1
 80077f6:	4699      	movge	r9, r3
 80077f8:	693d      	ldr	r5, [r7, #16]
 80077fa:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80077fe:	68bb      	ldr	r3, [r7, #8]
 8007800:	6879      	ldr	r1, [r7, #4]
 8007802:	eb05 060a 	add.w	r6, r5, sl
 8007806:	42b3      	cmp	r3, r6
 8007808:	b085      	sub	sp, #20
 800780a:	bfb8      	it	lt
 800780c:	3101      	addlt	r1, #1
 800780e:	f7ff fe93 	bl	8007538 <_Balloc>
 8007812:	b930      	cbnz	r0, 8007822 <__multiply+0x42>
 8007814:	4602      	mov	r2, r0
 8007816:	4b41      	ldr	r3, [pc, #260]	@ (800791c <__multiply+0x13c>)
 8007818:	4841      	ldr	r0, [pc, #260]	@ (8007920 <__multiply+0x140>)
 800781a:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800781e:	f001 fc0f 	bl	8009040 <__assert_func>
 8007822:	f100 0414 	add.w	r4, r0, #20
 8007826:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 800782a:	4623      	mov	r3, r4
 800782c:	2200      	movs	r2, #0
 800782e:	4573      	cmp	r3, lr
 8007830:	d320      	bcc.n	8007874 <__multiply+0x94>
 8007832:	f107 0814 	add.w	r8, r7, #20
 8007836:	f109 0114 	add.w	r1, r9, #20
 800783a:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 800783e:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 8007842:	9302      	str	r3, [sp, #8]
 8007844:	1beb      	subs	r3, r5, r7
 8007846:	3b15      	subs	r3, #21
 8007848:	f023 0303 	bic.w	r3, r3, #3
 800784c:	3304      	adds	r3, #4
 800784e:	3715      	adds	r7, #21
 8007850:	42bd      	cmp	r5, r7
 8007852:	bf38      	it	cc
 8007854:	2304      	movcc	r3, #4
 8007856:	9301      	str	r3, [sp, #4]
 8007858:	9b02      	ldr	r3, [sp, #8]
 800785a:	9103      	str	r1, [sp, #12]
 800785c:	428b      	cmp	r3, r1
 800785e:	d80c      	bhi.n	800787a <__multiply+0x9a>
 8007860:	2e00      	cmp	r6, #0
 8007862:	dd03      	ble.n	800786c <__multiply+0x8c>
 8007864:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8007868:	2b00      	cmp	r3, #0
 800786a:	d055      	beq.n	8007918 <__multiply+0x138>
 800786c:	6106      	str	r6, [r0, #16]
 800786e:	b005      	add	sp, #20
 8007870:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007874:	f843 2b04 	str.w	r2, [r3], #4
 8007878:	e7d9      	b.n	800782e <__multiply+0x4e>
 800787a:	f8b1 a000 	ldrh.w	sl, [r1]
 800787e:	f1ba 0f00 	cmp.w	sl, #0
 8007882:	d01f      	beq.n	80078c4 <__multiply+0xe4>
 8007884:	46c4      	mov	ip, r8
 8007886:	46a1      	mov	r9, r4
 8007888:	2700      	movs	r7, #0
 800788a:	f85c 2b04 	ldr.w	r2, [ip], #4
 800788e:	f8d9 3000 	ldr.w	r3, [r9]
 8007892:	fa1f fb82 	uxth.w	fp, r2
 8007896:	b29b      	uxth	r3, r3
 8007898:	fb0a 330b 	mla	r3, sl, fp, r3
 800789c:	443b      	add	r3, r7
 800789e:	f8d9 7000 	ldr.w	r7, [r9]
 80078a2:	0c12      	lsrs	r2, r2, #16
 80078a4:	0c3f      	lsrs	r7, r7, #16
 80078a6:	fb0a 7202 	mla	r2, sl, r2, r7
 80078aa:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 80078ae:	b29b      	uxth	r3, r3
 80078b0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80078b4:	4565      	cmp	r5, ip
 80078b6:	f849 3b04 	str.w	r3, [r9], #4
 80078ba:	ea4f 4712 	mov.w	r7, r2, lsr #16
 80078be:	d8e4      	bhi.n	800788a <__multiply+0xaa>
 80078c0:	9b01      	ldr	r3, [sp, #4]
 80078c2:	50e7      	str	r7, [r4, r3]
 80078c4:	9b03      	ldr	r3, [sp, #12]
 80078c6:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 80078ca:	3104      	adds	r1, #4
 80078cc:	f1b9 0f00 	cmp.w	r9, #0
 80078d0:	d020      	beq.n	8007914 <__multiply+0x134>
 80078d2:	6823      	ldr	r3, [r4, #0]
 80078d4:	4647      	mov	r7, r8
 80078d6:	46a4      	mov	ip, r4
 80078d8:	f04f 0a00 	mov.w	sl, #0
 80078dc:	f8b7 b000 	ldrh.w	fp, [r7]
 80078e0:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 80078e4:	fb09 220b 	mla	r2, r9, fp, r2
 80078e8:	4452      	add	r2, sl
 80078ea:	b29b      	uxth	r3, r3
 80078ec:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80078f0:	f84c 3b04 	str.w	r3, [ip], #4
 80078f4:	f857 3b04 	ldr.w	r3, [r7], #4
 80078f8:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80078fc:	f8bc 3000 	ldrh.w	r3, [ip]
 8007900:	fb09 330a 	mla	r3, r9, sl, r3
 8007904:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 8007908:	42bd      	cmp	r5, r7
 800790a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800790e:	d8e5      	bhi.n	80078dc <__multiply+0xfc>
 8007910:	9a01      	ldr	r2, [sp, #4]
 8007912:	50a3      	str	r3, [r4, r2]
 8007914:	3404      	adds	r4, #4
 8007916:	e79f      	b.n	8007858 <__multiply+0x78>
 8007918:	3e01      	subs	r6, #1
 800791a:	e7a1      	b.n	8007860 <__multiply+0x80>
 800791c:	0800dcc5 	.word	0x0800dcc5
 8007920:	0800dcd6 	.word	0x0800dcd6

08007924 <__pow5mult>:
 8007924:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007928:	4615      	mov	r5, r2
 800792a:	f012 0203 	ands.w	r2, r2, #3
 800792e:	4607      	mov	r7, r0
 8007930:	460e      	mov	r6, r1
 8007932:	d007      	beq.n	8007944 <__pow5mult+0x20>
 8007934:	4c25      	ldr	r4, [pc, #148]	@ (80079cc <__pow5mult+0xa8>)
 8007936:	3a01      	subs	r2, #1
 8007938:	2300      	movs	r3, #0
 800793a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800793e:	f7ff fe5d 	bl	80075fc <__multadd>
 8007942:	4606      	mov	r6, r0
 8007944:	10ad      	asrs	r5, r5, #2
 8007946:	d03d      	beq.n	80079c4 <__pow5mult+0xa0>
 8007948:	69fc      	ldr	r4, [r7, #28]
 800794a:	b97c      	cbnz	r4, 800796c <__pow5mult+0x48>
 800794c:	2010      	movs	r0, #16
 800794e:	f7ff fd3d 	bl	80073cc <malloc>
 8007952:	4602      	mov	r2, r0
 8007954:	61f8      	str	r0, [r7, #28]
 8007956:	b928      	cbnz	r0, 8007964 <__pow5mult+0x40>
 8007958:	4b1d      	ldr	r3, [pc, #116]	@ (80079d0 <__pow5mult+0xac>)
 800795a:	481e      	ldr	r0, [pc, #120]	@ (80079d4 <__pow5mult+0xb0>)
 800795c:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8007960:	f001 fb6e 	bl	8009040 <__assert_func>
 8007964:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007968:	6004      	str	r4, [r0, #0]
 800796a:	60c4      	str	r4, [r0, #12]
 800796c:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8007970:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007974:	b94c      	cbnz	r4, 800798a <__pow5mult+0x66>
 8007976:	f240 2171 	movw	r1, #625	@ 0x271
 800797a:	4638      	mov	r0, r7
 800797c:	f7ff ff1a 	bl	80077b4 <__i2b>
 8007980:	2300      	movs	r3, #0
 8007982:	f8c8 0008 	str.w	r0, [r8, #8]
 8007986:	4604      	mov	r4, r0
 8007988:	6003      	str	r3, [r0, #0]
 800798a:	f04f 0900 	mov.w	r9, #0
 800798e:	07eb      	lsls	r3, r5, #31
 8007990:	d50a      	bpl.n	80079a8 <__pow5mult+0x84>
 8007992:	4631      	mov	r1, r6
 8007994:	4622      	mov	r2, r4
 8007996:	4638      	mov	r0, r7
 8007998:	f7ff ff22 	bl	80077e0 <__multiply>
 800799c:	4631      	mov	r1, r6
 800799e:	4680      	mov	r8, r0
 80079a0:	4638      	mov	r0, r7
 80079a2:	f7ff fe09 	bl	80075b8 <_Bfree>
 80079a6:	4646      	mov	r6, r8
 80079a8:	106d      	asrs	r5, r5, #1
 80079aa:	d00b      	beq.n	80079c4 <__pow5mult+0xa0>
 80079ac:	6820      	ldr	r0, [r4, #0]
 80079ae:	b938      	cbnz	r0, 80079c0 <__pow5mult+0x9c>
 80079b0:	4622      	mov	r2, r4
 80079b2:	4621      	mov	r1, r4
 80079b4:	4638      	mov	r0, r7
 80079b6:	f7ff ff13 	bl	80077e0 <__multiply>
 80079ba:	6020      	str	r0, [r4, #0]
 80079bc:	f8c0 9000 	str.w	r9, [r0]
 80079c0:	4604      	mov	r4, r0
 80079c2:	e7e4      	b.n	800798e <__pow5mult+0x6a>
 80079c4:	4630      	mov	r0, r6
 80079c6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80079ca:	bf00      	nop
 80079cc:	0800dde8 	.word	0x0800dde8
 80079d0:	0800dc56 	.word	0x0800dc56
 80079d4:	0800dcd6 	.word	0x0800dcd6

080079d8 <__lshift>:
 80079d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80079dc:	460c      	mov	r4, r1
 80079de:	6849      	ldr	r1, [r1, #4]
 80079e0:	6923      	ldr	r3, [r4, #16]
 80079e2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80079e6:	68a3      	ldr	r3, [r4, #8]
 80079e8:	4607      	mov	r7, r0
 80079ea:	4691      	mov	r9, r2
 80079ec:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80079f0:	f108 0601 	add.w	r6, r8, #1
 80079f4:	42b3      	cmp	r3, r6
 80079f6:	db0b      	blt.n	8007a10 <__lshift+0x38>
 80079f8:	4638      	mov	r0, r7
 80079fa:	f7ff fd9d 	bl	8007538 <_Balloc>
 80079fe:	4605      	mov	r5, r0
 8007a00:	b948      	cbnz	r0, 8007a16 <__lshift+0x3e>
 8007a02:	4602      	mov	r2, r0
 8007a04:	4b28      	ldr	r3, [pc, #160]	@ (8007aa8 <__lshift+0xd0>)
 8007a06:	4829      	ldr	r0, [pc, #164]	@ (8007aac <__lshift+0xd4>)
 8007a08:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8007a0c:	f001 fb18 	bl	8009040 <__assert_func>
 8007a10:	3101      	adds	r1, #1
 8007a12:	005b      	lsls	r3, r3, #1
 8007a14:	e7ee      	b.n	80079f4 <__lshift+0x1c>
 8007a16:	2300      	movs	r3, #0
 8007a18:	f100 0114 	add.w	r1, r0, #20
 8007a1c:	f100 0210 	add.w	r2, r0, #16
 8007a20:	4618      	mov	r0, r3
 8007a22:	4553      	cmp	r3, sl
 8007a24:	db33      	blt.n	8007a8e <__lshift+0xb6>
 8007a26:	6920      	ldr	r0, [r4, #16]
 8007a28:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007a2c:	f104 0314 	add.w	r3, r4, #20
 8007a30:	f019 091f 	ands.w	r9, r9, #31
 8007a34:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007a38:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8007a3c:	d02b      	beq.n	8007a96 <__lshift+0xbe>
 8007a3e:	f1c9 0e20 	rsb	lr, r9, #32
 8007a42:	468a      	mov	sl, r1
 8007a44:	2200      	movs	r2, #0
 8007a46:	6818      	ldr	r0, [r3, #0]
 8007a48:	fa00 f009 	lsl.w	r0, r0, r9
 8007a4c:	4310      	orrs	r0, r2
 8007a4e:	f84a 0b04 	str.w	r0, [sl], #4
 8007a52:	f853 2b04 	ldr.w	r2, [r3], #4
 8007a56:	459c      	cmp	ip, r3
 8007a58:	fa22 f20e 	lsr.w	r2, r2, lr
 8007a5c:	d8f3      	bhi.n	8007a46 <__lshift+0x6e>
 8007a5e:	ebac 0304 	sub.w	r3, ip, r4
 8007a62:	3b15      	subs	r3, #21
 8007a64:	f023 0303 	bic.w	r3, r3, #3
 8007a68:	3304      	adds	r3, #4
 8007a6a:	f104 0015 	add.w	r0, r4, #21
 8007a6e:	4560      	cmp	r0, ip
 8007a70:	bf88      	it	hi
 8007a72:	2304      	movhi	r3, #4
 8007a74:	50ca      	str	r2, [r1, r3]
 8007a76:	b10a      	cbz	r2, 8007a7c <__lshift+0xa4>
 8007a78:	f108 0602 	add.w	r6, r8, #2
 8007a7c:	3e01      	subs	r6, #1
 8007a7e:	4638      	mov	r0, r7
 8007a80:	612e      	str	r6, [r5, #16]
 8007a82:	4621      	mov	r1, r4
 8007a84:	f7ff fd98 	bl	80075b8 <_Bfree>
 8007a88:	4628      	mov	r0, r5
 8007a8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007a8e:	f842 0f04 	str.w	r0, [r2, #4]!
 8007a92:	3301      	adds	r3, #1
 8007a94:	e7c5      	b.n	8007a22 <__lshift+0x4a>
 8007a96:	3904      	subs	r1, #4
 8007a98:	f853 2b04 	ldr.w	r2, [r3], #4
 8007a9c:	f841 2f04 	str.w	r2, [r1, #4]!
 8007aa0:	459c      	cmp	ip, r3
 8007aa2:	d8f9      	bhi.n	8007a98 <__lshift+0xc0>
 8007aa4:	e7ea      	b.n	8007a7c <__lshift+0xa4>
 8007aa6:	bf00      	nop
 8007aa8:	0800dcc5 	.word	0x0800dcc5
 8007aac:	0800dcd6 	.word	0x0800dcd6

08007ab0 <__mcmp>:
 8007ab0:	690a      	ldr	r2, [r1, #16]
 8007ab2:	4603      	mov	r3, r0
 8007ab4:	6900      	ldr	r0, [r0, #16]
 8007ab6:	1a80      	subs	r0, r0, r2
 8007ab8:	b530      	push	{r4, r5, lr}
 8007aba:	d10e      	bne.n	8007ada <__mcmp+0x2a>
 8007abc:	3314      	adds	r3, #20
 8007abe:	3114      	adds	r1, #20
 8007ac0:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8007ac4:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8007ac8:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8007acc:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8007ad0:	4295      	cmp	r5, r2
 8007ad2:	d003      	beq.n	8007adc <__mcmp+0x2c>
 8007ad4:	d205      	bcs.n	8007ae2 <__mcmp+0x32>
 8007ad6:	f04f 30ff 	mov.w	r0, #4294967295
 8007ada:	bd30      	pop	{r4, r5, pc}
 8007adc:	42a3      	cmp	r3, r4
 8007ade:	d3f3      	bcc.n	8007ac8 <__mcmp+0x18>
 8007ae0:	e7fb      	b.n	8007ada <__mcmp+0x2a>
 8007ae2:	2001      	movs	r0, #1
 8007ae4:	e7f9      	b.n	8007ada <__mcmp+0x2a>
	...

08007ae8 <__mdiff>:
 8007ae8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007aec:	4689      	mov	r9, r1
 8007aee:	4606      	mov	r6, r0
 8007af0:	4611      	mov	r1, r2
 8007af2:	4648      	mov	r0, r9
 8007af4:	4614      	mov	r4, r2
 8007af6:	f7ff ffdb 	bl	8007ab0 <__mcmp>
 8007afa:	1e05      	subs	r5, r0, #0
 8007afc:	d112      	bne.n	8007b24 <__mdiff+0x3c>
 8007afe:	4629      	mov	r1, r5
 8007b00:	4630      	mov	r0, r6
 8007b02:	f7ff fd19 	bl	8007538 <_Balloc>
 8007b06:	4602      	mov	r2, r0
 8007b08:	b928      	cbnz	r0, 8007b16 <__mdiff+0x2e>
 8007b0a:	4b3f      	ldr	r3, [pc, #252]	@ (8007c08 <__mdiff+0x120>)
 8007b0c:	f240 2137 	movw	r1, #567	@ 0x237
 8007b10:	483e      	ldr	r0, [pc, #248]	@ (8007c0c <__mdiff+0x124>)
 8007b12:	f001 fa95 	bl	8009040 <__assert_func>
 8007b16:	2301      	movs	r3, #1
 8007b18:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8007b1c:	4610      	mov	r0, r2
 8007b1e:	b003      	add	sp, #12
 8007b20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007b24:	bfbc      	itt	lt
 8007b26:	464b      	movlt	r3, r9
 8007b28:	46a1      	movlt	r9, r4
 8007b2a:	4630      	mov	r0, r6
 8007b2c:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8007b30:	bfba      	itte	lt
 8007b32:	461c      	movlt	r4, r3
 8007b34:	2501      	movlt	r5, #1
 8007b36:	2500      	movge	r5, #0
 8007b38:	f7ff fcfe 	bl	8007538 <_Balloc>
 8007b3c:	4602      	mov	r2, r0
 8007b3e:	b918      	cbnz	r0, 8007b48 <__mdiff+0x60>
 8007b40:	4b31      	ldr	r3, [pc, #196]	@ (8007c08 <__mdiff+0x120>)
 8007b42:	f240 2145 	movw	r1, #581	@ 0x245
 8007b46:	e7e3      	b.n	8007b10 <__mdiff+0x28>
 8007b48:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8007b4c:	6926      	ldr	r6, [r4, #16]
 8007b4e:	60c5      	str	r5, [r0, #12]
 8007b50:	f109 0310 	add.w	r3, r9, #16
 8007b54:	f109 0514 	add.w	r5, r9, #20
 8007b58:	f104 0e14 	add.w	lr, r4, #20
 8007b5c:	f100 0b14 	add.w	fp, r0, #20
 8007b60:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8007b64:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8007b68:	9301      	str	r3, [sp, #4]
 8007b6a:	46d9      	mov	r9, fp
 8007b6c:	f04f 0c00 	mov.w	ip, #0
 8007b70:	9b01      	ldr	r3, [sp, #4]
 8007b72:	f85e 0b04 	ldr.w	r0, [lr], #4
 8007b76:	f853 af04 	ldr.w	sl, [r3, #4]!
 8007b7a:	9301      	str	r3, [sp, #4]
 8007b7c:	fa1f f38a 	uxth.w	r3, sl
 8007b80:	4619      	mov	r1, r3
 8007b82:	b283      	uxth	r3, r0
 8007b84:	1acb      	subs	r3, r1, r3
 8007b86:	0c00      	lsrs	r0, r0, #16
 8007b88:	4463      	add	r3, ip
 8007b8a:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8007b8e:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8007b92:	b29b      	uxth	r3, r3
 8007b94:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8007b98:	4576      	cmp	r6, lr
 8007b9a:	f849 3b04 	str.w	r3, [r9], #4
 8007b9e:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8007ba2:	d8e5      	bhi.n	8007b70 <__mdiff+0x88>
 8007ba4:	1b33      	subs	r3, r6, r4
 8007ba6:	3b15      	subs	r3, #21
 8007ba8:	f023 0303 	bic.w	r3, r3, #3
 8007bac:	3415      	adds	r4, #21
 8007bae:	3304      	adds	r3, #4
 8007bb0:	42a6      	cmp	r6, r4
 8007bb2:	bf38      	it	cc
 8007bb4:	2304      	movcc	r3, #4
 8007bb6:	441d      	add	r5, r3
 8007bb8:	445b      	add	r3, fp
 8007bba:	461e      	mov	r6, r3
 8007bbc:	462c      	mov	r4, r5
 8007bbe:	4544      	cmp	r4, r8
 8007bc0:	d30e      	bcc.n	8007be0 <__mdiff+0xf8>
 8007bc2:	f108 0103 	add.w	r1, r8, #3
 8007bc6:	1b49      	subs	r1, r1, r5
 8007bc8:	f021 0103 	bic.w	r1, r1, #3
 8007bcc:	3d03      	subs	r5, #3
 8007bce:	45a8      	cmp	r8, r5
 8007bd0:	bf38      	it	cc
 8007bd2:	2100      	movcc	r1, #0
 8007bd4:	440b      	add	r3, r1
 8007bd6:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8007bda:	b191      	cbz	r1, 8007c02 <__mdiff+0x11a>
 8007bdc:	6117      	str	r7, [r2, #16]
 8007bde:	e79d      	b.n	8007b1c <__mdiff+0x34>
 8007be0:	f854 1b04 	ldr.w	r1, [r4], #4
 8007be4:	46e6      	mov	lr, ip
 8007be6:	0c08      	lsrs	r0, r1, #16
 8007be8:	fa1c fc81 	uxtah	ip, ip, r1
 8007bec:	4471      	add	r1, lr
 8007bee:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8007bf2:	b289      	uxth	r1, r1
 8007bf4:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8007bf8:	f846 1b04 	str.w	r1, [r6], #4
 8007bfc:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8007c00:	e7dd      	b.n	8007bbe <__mdiff+0xd6>
 8007c02:	3f01      	subs	r7, #1
 8007c04:	e7e7      	b.n	8007bd6 <__mdiff+0xee>
 8007c06:	bf00      	nop
 8007c08:	0800dcc5 	.word	0x0800dcc5
 8007c0c:	0800dcd6 	.word	0x0800dcd6

08007c10 <__ulp>:
 8007c10:	b082      	sub	sp, #8
 8007c12:	ed8d 0b00 	vstr	d0, [sp]
 8007c16:	9a01      	ldr	r2, [sp, #4]
 8007c18:	4b0f      	ldr	r3, [pc, #60]	@ (8007c58 <__ulp+0x48>)
 8007c1a:	4013      	ands	r3, r2
 8007c1c:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 8007c20:	2b00      	cmp	r3, #0
 8007c22:	dc08      	bgt.n	8007c36 <__ulp+0x26>
 8007c24:	425b      	negs	r3, r3
 8007c26:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 8007c2a:	ea4f 5223 	mov.w	r2, r3, asr #20
 8007c2e:	da04      	bge.n	8007c3a <__ulp+0x2a>
 8007c30:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8007c34:	4113      	asrs	r3, r2
 8007c36:	2200      	movs	r2, #0
 8007c38:	e008      	b.n	8007c4c <__ulp+0x3c>
 8007c3a:	f1a2 0314 	sub.w	r3, r2, #20
 8007c3e:	2b1e      	cmp	r3, #30
 8007c40:	bfda      	itte	le
 8007c42:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 8007c46:	40da      	lsrle	r2, r3
 8007c48:	2201      	movgt	r2, #1
 8007c4a:	2300      	movs	r3, #0
 8007c4c:	4619      	mov	r1, r3
 8007c4e:	4610      	mov	r0, r2
 8007c50:	ec41 0b10 	vmov	d0, r0, r1
 8007c54:	b002      	add	sp, #8
 8007c56:	4770      	bx	lr
 8007c58:	7ff00000 	.word	0x7ff00000

08007c5c <__b2d>:
 8007c5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007c60:	6906      	ldr	r6, [r0, #16]
 8007c62:	f100 0814 	add.w	r8, r0, #20
 8007c66:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 8007c6a:	1f37      	subs	r7, r6, #4
 8007c6c:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8007c70:	4610      	mov	r0, r2
 8007c72:	f7ff fd53 	bl	800771c <__hi0bits>
 8007c76:	f1c0 0320 	rsb	r3, r0, #32
 8007c7a:	280a      	cmp	r0, #10
 8007c7c:	600b      	str	r3, [r1, #0]
 8007c7e:	491b      	ldr	r1, [pc, #108]	@ (8007cec <__b2d+0x90>)
 8007c80:	dc15      	bgt.n	8007cae <__b2d+0x52>
 8007c82:	f1c0 0c0b 	rsb	ip, r0, #11
 8007c86:	fa22 f30c 	lsr.w	r3, r2, ip
 8007c8a:	45b8      	cmp	r8, r7
 8007c8c:	ea43 0501 	orr.w	r5, r3, r1
 8007c90:	bf34      	ite	cc
 8007c92:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8007c96:	2300      	movcs	r3, #0
 8007c98:	3015      	adds	r0, #21
 8007c9a:	fa02 f000 	lsl.w	r0, r2, r0
 8007c9e:	fa23 f30c 	lsr.w	r3, r3, ip
 8007ca2:	4303      	orrs	r3, r0
 8007ca4:	461c      	mov	r4, r3
 8007ca6:	ec45 4b10 	vmov	d0, r4, r5
 8007caa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007cae:	45b8      	cmp	r8, r7
 8007cb0:	bf3a      	itte	cc
 8007cb2:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8007cb6:	f1a6 0708 	subcc.w	r7, r6, #8
 8007cba:	2300      	movcs	r3, #0
 8007cbc:	380b      	subs	r0, #11
 8007cbe:	d012      	beq.n	8007ce6 <__b2d+0x8a>
 8007cc0:	f1c0 0120 	rsb	r1, r0, #32
 8007cc4:	fa23 f401 	lsr.w	r4, r3, r1
 8007cc8:	4082      	lsls	r2, r0
 8007cca:	4322      	orrs	r2, r4
 8007ccc:	4547      	cmp	r7, r8
 8007cce:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 8007cd2:	bf8c      	ite	hi
 8007cd4:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 8007cd8:	2200      	movls	r2, #0
 8007cda:	4083      	lsls	r3, r0
 8007cdc:	40ca      	lsrs	r2, r1
 8007cde:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 8007ce2:	4313      	orrs	r3, r2
 8007ce4:	e7de      	b.n	8007ca4 <__b2d+0x48>
 8007ce6:	ea42 0501 	orr.w	r5, r2, r1
 8007cea:	e7db      	b.n	8007ca4 <__b2d+0x48>
 8007cec:	3ff00000 	.word	0x3ff00000

08007cf0 <__d2b>:
 8007cf0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8007cf4:	460f      	mov	r7, r1
 8007cf6:	2101      	movs	r1, #1
 8007cf8:	ec59 8b10 	vmov	r8, r9, d0
 8007cfc:	4616      	mov	r6, r2
 8007cfe:	f7ff fc1b 	bl	8007538 <_Balloc>
 8007d02:	4604      	mov	r4, r0
 8007d04:	b930      	cbnz	r0, 8007d14 <__d2b+0x24>
 8007d06:	4602      	mov	r2, r0
 8007d08:	4b23      	ldr	r3, [pc, #140]	@ (8007d98 <__d2b+0xa8>)
 8007d0a:	4824      	ldr	r0, [pc, #144]	@ (8007d9c <__d2b+0xac>)
 8007d0c:	f240 310f 	movw	r1, #783	@ 0x30f
 8007d10:	f001 f996 	bl	8009040 <__assert_func>
 8007d14:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8007d18:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007d1c:	b10d      	cbz	r5, 8007d22 <__d2b+0x32>
 8007d1e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007d22:	9301      	str	r3, [sp, #4]
 8007d24:	f1b8 0300 	subs.w	r3, r8, #0
 8007d28:	d023      	beq.n	8007d72 <__d2b+0x82>
 8007d2a:	4668      	mov	r0, sp
 8007d2c:	9300      	str	r3, [sp, #0]
 8007d2e:	f7ff fd14 	bl	800775a <__lo0bits>
 8007d32:	e9dd 1200 	ldrd	r1, r2, [sp]
 8007d36:	b1d0      	cbz	r0, 8007d6e <__d2b+0x7e>
 8007d38:	f1c0 0320 	rsb	r3, r0, #32
 8007d3c:	fa02 f303 	lsl.w	r3, r2, r3
 8007d40:	430b      	orrs	r3, r1
 8007d42:	40c2      	lsrs	r2, r0
 8007d44:	6163      	str	r3, [r4, #20]
 8007d46:	9201      	str	r2, [sp, #4]
 8007d48:	9b01      	ldr	r3, [sp, #4]
 8007d4a:	61a3      	str	r3, [r4, #24]
 8007d4c:	2b00      	cmp	r3, #0
 8007d4e:	bf0c      	ite	eq
 8007d50:	2201      	moveq	r2, #1
 8007d52:	2202      	movne	r2, #2
 8007d54:	6122      	str	r2, [r4, #16]
 8007d56:	b1a5      	cbz	r5, 8007d82 <__d2b+0x92>
 8007d58:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8007d5c:	4405      	add	r5, r0
 8007d5e:	603d      	str	r5, [r7, #0]
 8007d60:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8007d64:	6030      	str	r0, [r6, #0]
 8007d66:	4620      	mov	r0, r4
 8007d68:	b003      	add	sp, #12
 8007d6a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007d6e:	6161      	str	r1, [r4, #20]
 8007d70:	e7ea      	b.n	8007d48 <__d2b+0x58>
 8007d72:	a801      	add	r0, sp, #4
 8007d74:	f7ff fcf1 	bl	800775a <__lo0bits>
 8007d78:	9b01      	ldr	r3, [sp, #4]
 8007d7a:	6163      	str	r3, [r4, #20]
 8007d7c:	3020      	adds	r0, #32
 8007d7e:	2201      	movs	r2, #1
 8007d80:	e7e8      	b.n	8007d54 <__d2b+0x64>
 8007d82:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8007d86:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8007d8a:	6038      	str	r0, [r7, #0]
 8007d8c:	6918      	ldr	r0, [r3, #16]
 8007d8e:	f7ff fcc5 	bl	800771c <__hi0bits>
 8007d92:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8007d96:	e7e5      	b.n	8007d64 <__d2b+0x74>
 8007d98:	0800dcc5 	.word	0x0800dcc5
 8007d9c:	0800dcd6 	.word	0x0800dcd6

08007da0 <__ratio>:
 8007da0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007da4:	b085      	sub	sp, #20
 8007da6:	e9cd 1000 	strd	r1, r0, [sp]
 8007daa:	a902      	add	r1, sp, #8
 8007dac:	f7ff ff56 	bl	8007c5c <__b2d>
 8007db0:	9800      	ldr	r0, [sp, #0]
 8007db2:	a903      	add	r1, sp, #12
 8007db4:	ec55 4b10 	vmov	r4, r5, d0
 8007db8:	f7ff ff50 	bl	8007c5c <__b2d>
 8007dbc:	9b01      	ldr	r3, [sp, #4]
 8007dbe:	6919      	ldr	r1, [r3, #16]
 8007dc0:	9b00      	ldr	r3, [sp, #0]
 8007dc2:	691b      	ldr	r3, [r3, #16]
 8007dc4:	1ac9      	subs	r1, r1, r3
 8007dc6:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 8007dca:	1a9b      	subs	r3, r3, r2
 8007dcc:	ec5b ab10 	vmov	sl, fp, d0
 8007dd0:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 8007dd4:	2b00      	cmp	r3, #0
 8007dd6:	bfce      	itee	gt
 8007dd8:	462a      	movgt	r2, r5
 8007dda:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8007dde:	465a      	movle	r2, fp
 8007de0:	462f      	mov	r7, r5
 8007de2:	46d9      	mov	r9, fp
 8007de4:	bfcc      	ite	gt
 8007de6:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8007dea:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 8007dee:	464b      	mov	r3, r9
 8007df0:	4652      	mov	r2, sl
 8007df2:	4620      	mov	r0, r4
 8007df4:	4639      	mov	r1, r7
 8007df6:	f7f8 fd89 	bl	800090c <__aeabi_ddiv>
 8007dfa:	ec41 0b10 	vmov	d0, r0, r1
 8007dfe:	b005      	add	sp, #20
 8007e00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08007e04 <__copybits>:
 8007e04:	3901      	subs	r1, #1
 8007e06:	b570      	push	{r4, r5, r6, lr}
 8007e08:	1149      	asrs	r1, r1, #5
 8007e0a:	6914      	ldr	r4, [r2, #16]
 8007e0c:	3101      	adds	r1, #1
 8007e0e:	f102 0314 	add.w	r3, r2, #20
 8007e12:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8007e16:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8007e1a:	1f05      	subs	r5, r0, #4
 8007e1c:	42a3      	cmp	r3, r4
 8007e1e:	d30c      	bcc.n	8007e3a <__copybits+0x36>
 8007e20:	1aa3      	subs	r3, r4, r2
 8007e22:	3b11      	subs	r3, #17
 8007e24:	f023 0303 	bic.w	r3, r3, #3
 8007e28:	3211      	adds	r2, #17
 8007e2a:	42a2      	cmp	r2, r4
 8007e2c:	bf88      	it	hi
 8007e2e:	2300      	movhi	r3, #0
 8007e30:	4418      	add	r0, r3
 8007e32:	2300      	movs	r3, #0
 8007e34:	4288      	cmp	r0, r1
 8007e36:	d305      	bcc.n	8007e44 <__copybits+0x40>
 8007e38:	bd70      	pop	{r4, r5, r6, pc}
 8007e3a:	f853 6b04 	ldr.w	r6, [r3], #4
 8007e3e:	f845 6f04 	str.w	r6, [r5, #4]!
 8007e42:	e7eb      	b.n	8007e1c <__copybits+0x18>
 8007e44:	f840 3b04 	str.w	r3, [r0], #4
 8007e48:	e7f4      	b.n	8007e34 <__copybits+0x30>

08007e4a <__any_on>:
 8007e4a:	f100 0214 	add.w	r2, r0, #20
 8007e4e:	6900      	ldr	r0, [r0, #16]
 8007e50:	114b      	asrs	r3, r1, #5
 8007e52:	4298      	cmp	r0, r3
 8007e54:	b510      	push	{r4, lr}
 8007e56:	db11      	blt.n	8007e7c <__any_on+0x32>
 8007e58:	dd0a      	ble.n	8007e70 <__any_on+0x26>
 8007e5a:	f011 011f 	ands.w	r1, r1, #31
 8007e5e:	d007      	beq.n	8007e70 <__any_on+0x26>
 8007e60:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8007e64:	fa24 f001 	lsr.w	r0, r4, r1
 8007e68:	fa00 f101 	lsl.w	r1, r0, r1
 8007e6c:	428c      	cmp	r4, r1
 8007e6e:	d10b      	bne.n	8007e88 <__any_on+0x3e>
 8007e70:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8007e74:	4293      	cmp	r3, r2
 8007e76:	d803      	bhi.n	8007e80 <__any_on+0x36>
 8007e78:	2000      	movs	r0, #0
 8007e7a:	bd10      	pop	{r4, pc}
 8007e7c:	4603      	mov	r3, r0
 8007e7e:	e7f7      	b.n	8007e70 <__any_on+0x26>
 8007e80:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8007e84:	2900      	cmp	r1, #0
 8007e86:	d0f5      	beq.n	8007e74 <__any_on+0x2a>
 8007e88:	2001      	movs	r0, #1
 8007e8a:	e7f6      	b.n	8007e7a <__any_on+0x30>

08007e8c <sulp>:
 8007e8c:	b570      	push	{r4, r5, r6, lr}
 8007e8e:	4604      	mov	r4, r0
 8007e90:	460d      	mov	r5, r1
 8007e92:	ec45 4b10 	vmov	d0, r4, r5
 8007e96:	4616      	mov	r6, r2
 8007e98:	f7ff feba 	bl	8007c10 <__ulp>
 8007e9c:	ec51 0b10 	vmov	r0, r1, d0
 8007ea0:	b17e      	cbz	r6, 8007ec2 <sulp+0x36>
 8007ea2:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8007ea6:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8007eaa:	2b00      	cmp	r3, #0
 8007eac:	dd09      	ble.n	8007ec2 <sulp+0x36>
 8007eae:	051b      	lsls	r3, r3, #20
 8007eb0:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 8007eb4:	2400      	movs	r4, #0
 8007eb6:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 8007eba:	4622      	mov	r2, r4
 8007ebc:	462b      	mov	r3, r5
 8007ebe:	f7f8 fbfb 	bl	80006b8 <__aeabi_dmul>
 8007ec2:	ec41 0b10 	vmov	d0, r0, r1
 8007ec6:	bd70      	pop	{r4, r5, r6, pc}

08007ec8 <_strtod_l>:
 8007ec8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007ecc:	b09f      	sub	sp, #124	@ 0x7c
 8007ece:	460c      	mov	r4, r1
 8007ed0:	9217      	str	r2, [sp, #92]	@ 0x5c
 8007ed2:	2200      	movs	r2, #0
 8007ed4:	921a      	str	r2, [sp, #104]	@ 0x68
 8007ed6:	9005      	str	r0, [sp, #20]
 8007ed8:	f04f 0a00 	mov.w	sl, #0
 8007edc:	f04f 0b00 	mov.w	fp, #0
 8007ee0:	460a      	mov	r2, r1
 8007ee2:	9219      	str	r2, [sp, #100]	@ 0x64
 8007ee4:	7811      	ldrb	r1, [r2, #0]
 8007ee6:	292b      	cmp	r1, #43	@ 0x2b
 8007ee8:	d04a      	beq.n	8007f80 <_strtod_l+0xb8>
 8007eea:	d838      	bhi.n	8007f5e <_strtod_l+0x96>
 8007eec:	290d      	cmp	r1, #13
 8007eee:	d832      	bhi.n	8007f56 <_strtod_l+0x8e>
 8007ef0:	2908      	cmp	r1, #8
 8007ef2:	d832      	bhi.n	8007f5a <_strtod_l+0x92>
 8007ef4:	2900      	cmp	r1, #0
 8007ef6:	d03b      	beq.n	8007f70 <_strtod_l+0xa8>
 8007ef8:	2200      	movs	r2, #0
 8007efa:	920e      	str	r2, [sp, #56]	@ 0x38
 8007efc:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 8007efe:	782a      	ldrb	r2, [r5, #0]
 8007f00:	2a30      	cmp	r2, #48	@ 0x30
 8007f02:	f040 80b2 	bne.w	800806a <_strtod_l+0x1a2>
 8007f06:	786a      	ldrb	r2, [r5, #1]
 8007f08:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8007f0c:	2a58      	cmp	r2, #88	@ 0x58
 8007f0e:	d16e      	bne.n	8007fee <_strtod_l+0x126>
 8007f10:	9302      	str	r3, [sp, #8]
 8007f12:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007f14:	9301      	str	r3, [sp, #4]
 8007f16:	ab1a      	add	r3, sp, #104	@ 0x68
 8007f18:	9300      	str	r3, [sp, #0]
 8007f1a:	4a8f      	ldr	r2, [pc, #572]	@ (8008158 <_strtod_l+0x290>)
 8007f1c:	9805      	ldr	r0, [sp, #20]
 8007f1e:	ab1b      	add	r3, sp, #108	@ 0x6c
 8007f20:	a919      	add	r1, sp, #100	@ 0x64
 8007f22:	f001 f927 	bl	8009174 <__gethex>
 8007f26:	f010 060f 	ands.w	r6, r0, #15
 8007f2a:	4604      	mov	r4, r0
 8007f2c:	d005      	beq.n	8007f3a <_strtod_l+0x72>
 8007f2e:	2e06      	cmp	r6, #6
 8007f30:	d128      	bne.n	8007f84 <_strtod_l+0xbc>
 8007f32:	3501      	adds	r5, #1
 8007f34:	2300      	movs	r3, #0
 8007f36:	9519      	str	r5, [sp, #100]	@ 0x64
 8007f38:	930e      	str	r3, [sp, #56]	@ 0x38
 8007f3a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8007f3c:	2b00      	cmp	r3, #0
 8007f3e:	f040 858e 	bne.w	8008a5e <_strtod_l+0xb96>
 8007f42:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007f44:	b1cb      	cbz	r3, 8007f7a <_strtod_l+0xb2>
 8007f46:	4652      	mov	r2, sl
 8007f48:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 8007f4c:	ec43 2b10 	vmov	d0, r2, r3
 8007f50:	b01f      	add	sp, #124	@ 0x7c
 8007f52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007f56:	2920      	cmp	r1, #32
 8007f58:	d1ce      	bne.n	8007ef8 <_strtod_l+0x30>
 8007f5a:	3201      	adds	r2, #1
 8007f5c:	e7c1      	b.n	8007ee2 <_strtod_l+0x1a>
 8007f5e:	292d      	cmp	r1, #45	@ 0x2d
 8007f60:	d1ca      	bne.n	8007ef8 <_strtod_l+0x30>
 8007f62:	2101      	movs	r1, #1
 8007f64:	910e      	str	r1, [sp, #56]	@ 0x38
 8007f66:	1c51      	adds	r1, r2, #1
 8007f68:	9119      	str	r1, [sp, #100]	@ 0x64
 8007f6a:	7852      	ldrb	r2, [r2, #1]
 8007f6c:	2a00      	cmp	r2, #0
 8007f6e:	d1c5      	bne.n	8007efc <_strtod_l+0x34>
 8007f70:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8007f72:	9419      	str	r4, [sp, #100]	@ 0x64
 8007f74:	2b00      	cmp	r3, #0
 8007f76:	f040 8570 	bne.w	8008a5a <_strtod_l+0xb92>
 8007f7a:	4652      	mov	r2, sl
 8007f7c:	465b      	mov	r3, fp
 8007f7e:	e7e5      	b.n	8007f4c <_strtod_l+0x84>
 8007f80:	2100      	movs	r1, #0
 8007f82:	e7ef      	b.n	8007f64 <_strtod_l+0x9c>
 8007f84:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8007f86:	b13a      	cbz	r2, 8007f98 <_strtod_l+0xd0>
 8007f88:	2135      	movs	r1, #53	@ 0x35
 8007f8a:	a81c      	add	r0, sp, #112	@ 0x70
 8007f8c:	f7ff ff3a 	bl	8007e04 <__copybits>
 8007f90:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8007f92:	9805      	ldr	r0, [sp, #20]
 8007f94:	f7ff fb10 	bl	80075b8 <_Bfree>
 8007f98:	3e01      	subs	r6, #1
 8007f9a:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8007f9c:	2e04      	cmp	r6, #4
 8007f9e:	d806      	bhi.n	8007fae <_strtod_l+0xe6>
 8007fa0:	e8df f006 	tbb	[pc, r6]
 8007fa4:	201d0314 	.word	0x201d0314
 8007fa8:	14          	.byte	0x14
 8007fa9:	00          	.byte	0x00
 8007faa:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 8007fae:	05e1      	lsls	r1, r4, #23
 8007fb0:	bf48      	it	mi
 8007fb2:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 8007fb6:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8007fba:	0d1b      	lsrs	r3, r3, #20
 8007fbc:	051b      	lsls	r3, r3, #20
 8007fbe:	2b00      	cmp	r3, #0
 8007fc0:	d1bb      	bne.n	8007f3a <_strtod_l+0x72>
 8007fc2:	f7fe fb2b 	bl	800661c <__errno>
 8007fc6:	2322      	movs	r3, #34	@ 0x22
 8007fc8:	6003      	str	r3, [r0, #0]
 8007fca:	e7b6      	b.n	8007f3a <_strtod_l+0x72>
 8007fcc:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 8007fd0:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8007fd4:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8007fd8:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8007fdc:	e7e7      	b.n	8007fae <_strtod_l+0xe6>
 8007fde:	f8df b180 	ldr.w	fp, [pc, #384]	@ 8008160 <_strtod_l+0x298>
 8007fe2:	e7e4      	b.n	8007fae <_strtod_l+0xe6>
 8007fe4:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8007fe8:	f04f 3aff 	mov.w	sl, #4294967295
 8007fec:	e7df      	b.n	8007fae <_strtod_l+0xe6>
 8007fee:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007ff0:	1c5a      	adds	r2, r3, #1
 8007ff2:	9219      	str	r2, [sp, #100]	@ 0x64
 8007ff4:	785b      	ldrb	r3, [r3, #1]
 8007ff6:	2b30      	cmp	r3, #48	@ 0x30
 8007ff8:	d0f9      	beq.n	8007fee <_strtod_l+0x126>
 8007ffa:	2b00      	cmp	r3, #0
 8007ffc:	d09d      	beq.n	8007f3a <_strtod_l+0x72>
 8007ffe:	2301      	movs	r3, #1
 8008000:	2700      	movs	r7, #0
 8008002:	9308      	str	r3, [sp, #32]
 8008004:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008006:	930c      	str	r3, [sp, #48]	@ 0x30
 8008008:	970b      	str	r7, [sp, #44]	@ 0x2c
 800800a:	46b9      	mov	r9, r7
 800800c:	220a      	movs	r2, #10
 800800e:	9819      	ldr	r0, [sp, #100]	@ 0x64
 8008010:	7805      	ldrb	r5, [r0, #0]
 8008012:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 8008016:	b2d9      	uxtb	r1, r3
 8008018:	2909      	cmp	r1, #9
 800801a:	d928      	bls.n	800806e <_strtod_l+0x1a6>
 800801c:	494f      	ldr	r1, [pc, #316]	@ (800815c <_strtod_l+0x294>)
 800801e:	2201      	movs	r2, #1
 8008020:	f000 ffd6 	bl	8008fd0 <strncmp>
 8008024:	2800      	cmp	r0, #0
 8008026:	d032      	beq.n	800808e <_strtod_l+0x1c6>
 8008028:	2000      	movs	r0, #0
 800802a:	462a      	mov	r2, r5
 800802c:	900a      	str	r0, [sp, #40]	@ 0x28
 800802e:	464d      	mov	r5, r9
 8008030:	4603      	mov	r3, r0
 8008032:	2a65      	cmp	r2, #101	@ 0x65
 8008034:	d001      	beq.n	800803a <_strtod_l+0x172>
 8008036:	2a45      	cmp	r2, #69	@ 0x45
 8008038:	d114      	bne.n	8008064 <_strtod_l+0x19c>
 800803a:	b91d      	cbnz	r5, 8008044 <_strtod_l+0x17c>
 800803c:	9a08      	ldr	r2, [sp, #32]
 800803e:	4302      	orrs	r2, r0
 8008040:	d096      	beq.n	8007f70 <_strtod_l+0xa8>
 8008042:	2500      	movs	r5, #0
 8008044:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 8008046:	1c62      	adds	r2, r4, #1
 8008048:	9219      	str	r2, [sp, #100]	@ 0x64
 800804a:	7862      	ldrb	r2, [r4, #1]
 800804c:	2a2b      	cmp	r2, #43	@ 0x2b
 800804e:	d07a      	beq.n	8008146 <_strtod_l+0x27e>
 8008050:	2a2d      	cmp	r2, #45	@ 0x2d
 8008052:	d07e      	beq.n	8008152 <_strtod_l+0x28a>
 8008054:	f04f 0c00 	mov.w	ip, #0
 8008058:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800805c:	2909      	cmp	r1, #9
 800805e:	f240 8085 	bls.w	800816c <_strtod_l+0x2a4>
 8008062:	9419      	str	r4, [sp, #100]	@ 0x64
 8008064:	f04f 0800 	mov.w	r8, #0
 8008068:	e0a5      	b.n	80081b6 <_strtod_l+0x2ee>
 800806a:	2300      	movs	r3, #0
 800806c:	e7c8      	b.n	8008000 <_strtod_l+0x138>
 800806e:	f1b9 0f08 	cmp.w	r9, #8
 8008072:	bfd8      	it	le
 8008074:	990b      	ldrle	r1, [sp, #44]	@ 0x2c
 8008076:	f100 0001 	add.w	r0, r0, #1
 800807a:	bfda      	itte	le
 800807c:	fb02 3301 	mlale	r3, r2, r1, r3
 8008080:	930b      	strle	r3, [sp, #44]	@ 0x2c
 8008082:	fb02 3707 	mlagt	r7, r2, r7, r3
 8008086:	f109 0901 	add.w	r9, r9, #1
 800808a:	9019      	str	r0, [sp, #100]	@ 0x64
 800808c:	e7bf      	b.n	800800e <_strtod_l+0x146>
 800808e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008090:	1c5a      	adds	r2, r3, #1
 8008092:	9219      	str	r2, [sp, #100]	@ 0x64
 8008094:	785a      	ldrb	r2, [r3, #1]
 8008096:	f1b9 0f00 	cmp.w	r9, #0
 800809a:	d03b      	beq.n	8008114 <_strtod_l+0x24c>
 800809c:	900a      	str	r0, [sp, #40]	@ 0x28
 800809e:	464d      	mov	r5, r9
 80080a0:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 80080a4:	2b09      	cmp	r3, #9
 80080a6:	d912      	bls.n	80080ce <_strtod_l+0x206>
 80080a8:	2301      	movs	r3, #1
 80080aa:	e7c2      	b.n	8008032 <_strtod_l+0x16a>
 80080ac:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80080ae:	1c5a      	adds	r2, r3, #1
 80080b0:	9219      	str	r2, [sp, #100]	@ 0x64
 80080b2:	785a      	ldrb	r2, [r3, #1]
 80080b4:	3001      	adds	r0, #1
 80080b6:	2a30      	cmp	r2, #48	@ 0x30
 80080b8:	d0f8      	beq.n	80080ac <_strtod_l+0x1e4>
 80080ba:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 80080be:	2b08      	cmp	r3, #8
 80080c0:	f200 84d2 	bhi.w	8008a68 <_strtod_l+0xba0>
 80080c4:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80080c6:	900a      	str	r0, [sp, #40]	@ 0x28
 80080c8:	2000      	movs	r0, #0
 80080ca:	930c      	str	r3, [sp, #48]	@ 0x30
 80080cc:	4605      	mov	r5, r0
 80080ce:	3a30      	subs	r2, #48	@ 0x30
 80080d0:	f100 0301 	add.w	r3, r0, #1
 80080d4:	d018      	beq.n	8008108 <_strtod_l+0x240>
 80080d6:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80080d8:	4419      	add	r1, r3
 80080da:	910a      	str	r1, [sp, #40]	@ 0x28
 80080dc:	462e      	mov	r6, r5
 80080de:	f04f 0e0a 	mov.w	lr, #10
 80080e2:	1c71      	adds	r1, r6, #1
 80080e4:	eba1 0c05 	sub.w	ip, r1, r5
 80080e8:	4563      	cmp	r3, ip
 80080ea:	dc15      	bgt.n	8008118 <_strtod_l+0x250>
 80080ec:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80080f0:	182b      	adds	r3, r5, r0
 80080f2:	2b08      	cmp	r3, #8
 80080f4:	f105 0501 	add.w	r5, r5, #1
 80080f8:	4405      	add	r5, r0
 80080fa:	dc1a      	bgt.n	8008132 <_strtod_l+0x26a>
 80080fc:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80080fe:	230a      	movs	r3, #10
 8008100:	fb03 2301 	mla	r3, r3, r1, r2
 8008104:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008106:	2300      	movs	r3, #0
 8008108:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800810a:	1c51      	adds	r1, r2, #1
 800810c:	9119      	str	r1, [sp, #100]	@ 0x64
 800810e:	7852      	ldrb	r2, [r2, #1]
 8008110:	4618      	mov	r0, r3
 8008112:	e7c5      	b.n	80080a0 <_strtod_l+0x1d8>
 8008114:	4648      	mov	r0, r9
 8008116:	e7ce      	b.n	80080b6 <_strtod_l+0x1ee>
 8008118:	2e08      	cmp	r6, #8
 800811a:	dc05      	bgt.n	8008128 <_strtod_l+0x260>
 800811c:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 800811e:	fb0e f606 	mul.w	r6, lr, r6
 8008122:	960b      	str	r6, [sp, #44]	@ 0x2c
 8008124:	460e      	mov	r6, r1
 8008126:	e7dc      	b.n	80080e2 <_strtod_l+0x21a>
 8008128:	2910      	cmp	r1, #16
 800812a:	bfd8      	it	le
 800812c:	fb0e f707 	mulle.w	r7, lr, r7
 8008130:	e7f8      	b.n	8008124 <_strtod_l+0x25c>
 8008132:	2b0f      	cmp	r3, #15
 8008134:	bfdc      	itt	le
 8008136:	230a      	movle	r3, #10
 8008138:	fb03 2707 	mlale	r7, r3, r7, r2
 800813c:	e7e3      	b.n	8008106 <_strtod_l+0x23e>
 800813e:	2300      	movs	r3, #0
 8008140:	930a      	str	r3, [sp, #40]	@ 0x28
 8008142:	2301      	movs	r3, #1
 8008144:	e77a      	b.n	800803c <_strtod_l+0x174>
 8008146:	f04f 0c00 	mov.w	ip, #0
 800814a:	1ca2      	adds	r2, r4, #2
 800814c:	9219      	str	r2, [sp, #100]	@ 0x64
 800814e:	78a2      	ldrb	r2, [r4, #2]
 8008150:	e782      	b.n	8008058 <_strtod_l+0x190>
 8008152:	f04f 0c01 	mov.w	ip, #1
 8008156:	e7f8      	b.n	800814a <_strtod_l+0x282>
 8008158:	0800defc 	.word	0x0800defc
 800815c:	0800dd2f 	.word	0x0800dd2f
 8008160:	7ff00000 	.word	0x7ff00000
 8008164:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8008166:	1c51      	adds	r1, r2, #1
 8008168:	9119      	str	r1, [sp, #100]	@ 0x64
 800816a:	7852      	ldrb	r2, [r2, #1]
 800816c:	2a30      	cmp	r2, #48	@ 0x30
 800816e:	d0f9      	beq.n	8008164 <_strtod_l+0x29c>
 8008170:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 8008174:	2908      	cmp	r1, #8
 8008176:	f63f af75 	bhi.w	8008064 <_strtod_l+0x19c>
 800817a:	3a30      	subs	r2, #48	@ 0x30
 800817c:	9209      	str	r2, [sp, #36]	@ 0x24
 800817e:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8008180:	920f      	str	r2, [sp, #60]	@ 0x3c
 8008182:	f04f 080a 	mov.w	r8, #10
 8008186:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8008188:	1c56      	adds	r6, r2, #1
 800818a:	9619      	str	r6, [sp, #100]	@ 0x64
 800818c:	7852      	ldrb	r2, [r2, #1]
 800818e:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 8008192:	f1be 0f09 	cmp.w	lr, #9
 8008196:	d939      	bls.n	800820c <_strtod_l+0x344>
 8008198:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800819a:	1a76      	subs	r6, r6, r1
 800819c:	2e08      	cmp	r6, #8
 800819e:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 80081a2:	dc03      	bgt.n	80081ac <_strtod_l+0x2e4>
 80081a4:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80081a6:	4588      	cmp	r8, r1
 80081a8:	bfa8      	it	ge
 80081aa:	4688      	movge	r8, r1
 80081ac:	f1bc 0f00 	cmp.w	ip, #0
 80081b0:	d001      	beq.n	80081b6 <_strtod_l+0x2ee>
 80081b2:	f1c8 0800 	rsb	r8, r8, #0
 80081b6:	2d00      	cmp	r5, #0
 80081b8:	d14e      	bne.n	8008258 <_strtod_l+0x390>
 80081ba:	9908      	ldr	r1, [sp, #32]
 80081bc:	4308      	orrs	r0, r1
 80081be:	f47f aebc 	bne.w	8007f3a <_strtod_l+0x72>
 80081c2:	2b00      	cmp	r3, #0
 80081c4:	f47f aed4 	bne.w	8007f70 <_strtod_l+0xa8>
 80081c8:	2a69      	cmp	r2, #105	@ 0x69
 80081ca:	d028      	beq.n	800821e <_strtod_l+0x356>
 80081cc:	dc25      	bgt.n	800821a <_strtod_l+0x352>
 80081ce:	2a49      	cmp	r2, #73	@ 0x49
 80081d0:	d025      	beq.n	800821e <_strtod_l+0x356>
 80081d2:	2a4e      	cmp	r2, #78	@ 0x4e
 80081d4:	f47f aecc 	bne.w	8007f70 <_strtod_l+0xa8>
 80081d8:	499a      	ldr	r1, [pc, #616]	@ (8008444 <_strtod_l+0x57c>)
 80081da:	a819      	add	r0, sp, #100	@ 0x64
 80081dc:	f001 f9ec 	bl	80095b8 <__match>
 80081e0:	2800      	cmp	r0, #0
 80081e2:	f43f aec5 	beq.w	8007f70 <_strtod_l+0xa8>
 80081e6:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80081e8:	781b      	ldrb	r3, [r3, #0]
 80081ea:	2b28      	cmp	r3, #40	@ 0x28
 80081ec:	d12e      	bne.n	800824c <_strtod_l+0x384>
 80081ee:	4996      	ldr	r1, [pc, #600]	@ (8008448 <_strtod_l+0x580>)
 80081f0:	aa1c      	add	r2, sp, #112	@ 0x70
 80081f2:	a819      	add	r0, sp, #100	@ 0x64
 80081f4:	f001 f9f4 	bl	80095e0 <__hexnan>
 80081f8:	2805      	cmp	r0, #5
 80081fa:	d127      	bne.n	800824c <_strtod_l+0x384>
 80081fc:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 80081fe:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 8008202:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 8008206:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800820a:	e696      	b.n	8007f3a <_strtod_l+0x72>
 800820c:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800820e:	fb08 2101 	mla	r1, r8, r1, r2
 8008212:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 8008216:	9209      	str	r2, [sp, #36]	@ 0x24
 8008218:	e7b5      	b.n	8008186 <_strtod_l+0x2be>
 800821a:	2a6e      	cmp	r2, #110	@ 0x6e
 800821c:	e7da      	b.n	80081d4 <_strtod_l+0x30c>
 800821e:	498b      	ldr	r1, [pc, #556]	@ (800844c <_strtod_l+0x584>)
 8008220:	a819      	add	r0, sp, #100	@ 0x64
 8008222:	f001 f9c9 	bl	80095b8 <__match>
 8008226:	2800      	cmp	r0, #0
 8008228:	f43f aea2 	beq.w	8007f70 <_strtod_l+0xa8>
 800822c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800822e:	4988      	ldr	r1, [pc, #544]	@ (8008450 <_strtod_l+0x588>)
 8008230:	3b01      	subs	r3, #1
 8008232:	a819      	add	r0, sp, #100	@ 0x64
 8008234:	9319      	str	r3, [sp, #100]	@ 0x64
 8008236:	f001 f9bf 	bl	80095b8 <__match>
 800823a:	b910      	cbnz	r0, 8008242 <_strtod_l+0x37a>
 800823c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800823e:	3301      	adds	r3, #1
 8008240:	9319      	str	r3, [sp, #100]	@ 0x64
 8008242:	f8df b21c 	ldr.w	fp, [pc, #540]	@ 8008460 <_strtod_l+0x598>
 8008246:	f04f 0a00 	mov.w	sl, #0
 800824a:	e676      	b.n	8007f3a <_strtod_l+0x72>
 800824c:	4881      	ldr	r0, [pc, #516]	@ (8008454 <_strtod_l+0x58c>)
 800824e:	f000 feef 	bl	8009030 <nan>
 8008252:	ec5b ab10 	vmov	sl, fp, d0
 8008256:	e670      	b.n	8007f3a <_strtod_l+0x72>
 8008258:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800825a:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 800825c:	eba8 0303 	sub.w	r3, r8, r3
 8008260:	f1b9 0f00 	cmp.w	r9, #0
 8008264:	bf08      	it	eq
 8008266:	46a9      	moveq	r9, r5
 8008268:	2d10      	cmp	r5, #16
 800826a:	9309      	str	r3, [sp, #36]	@ 0x24
 800826c:	462c      	mov	r4, r5
 800826e:	bfa8      	it	ge
 8008270:	2410      	movge	r4, #16
 8008272:	f7f8 f9a7 	bl	80005c4 <__aeabi_ui2d>
 8008276:	2d09      	cmp	r5, #9
 8008278:	4682      	mov	sl, r0
 800827a:	468b      	mov	fp, r1
 800827c:	dc13      	bgt.n	80082a6 <_strtod_l+0x3de>
 800827e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008280:	2b00      	cmp	r3, #0
 8008282:	f43f ae5a 	beq.w	8007f3a <_strtod_l+0x72>
 8008286:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008288:	dd78      	ble.n	800837c <_strtod_l+0x4b4>
 800828a:	2b16      	cmp	r3, #22
 800828c:	dc5f      	bgt.n	800834e <_strtod_l+0x486>
 800828e:	4972      	ldr	r1, [pc, #456]	@ (8008458 <_strtod_l+0x590>)
 8008290:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8008294:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008298:	4652      	mov	r2, sl
 800829a:	465b      	mov	r3, fp
 800829c:	f7f8 fa0c 	bl	80006b8 <__aeabi_dmul>
 80082a0:	4682      	mov	sl, r0
 80082a2:	468b      	mov	fp, r1
 80082a4:	e649      	b.n	8007f3a <_strtod_l+0x72>
 80082a6:	4b6c      	ldr	r3, [pc, #432]	@ (8008458 <_strtod_l+0x590>)
 80082a8:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80082ac:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 80082b0:	f7f8 fa02 	bl	80006b8 <__aeabi_dmul>
 80082b4:	4682      	mov	sl, r0
 80082b6:	4638      	mov	r0, r7
 80082b8:	468b      	mov	fp, r1
 80082ba:	f7f8 f983 	bl	80005c4 <__aeabi_ui2d>
 80082be:	4602      	mov	r2, r0
 80082c0:	460b      	mov	r3, r1
 80082c2:	4650      	mov	r0, sl
 80082c4:	4659      	mov	r1, fp
 80082c6:	f7f8 f841 	bl	800034c <__adddf3>
 80082ca:	2d0f      	cmp	r5, #15
 80082cc:	4682      	mov	sl, r0
 80082ce:	468b      	mov	fp, r1
 80082d0:	ddd5      	ble.n	800827e <_strtod_l+0x3b6>
 80082d2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80082d4:	1b2c      	subs	r4, r5, r4
 80082d6:	441c      	add	r4, r3
 80082d8:	2c00      	cmp	r4, #0
 80082da:	f340 8093 	ble.w	8008404 <_strtod_l+0x53c>
 80082de:	f014 030f 	ands.w	r3, r4, #15
 80082e2:	d00a      	beq.n	80082fa <_strtod_l+0x432>
 80082e4:	495c      	ldr	r1, [pc, #368]	@ (8008458 <_strtod_l+0x590>)
 80082e6:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80082ea:	4652      	mov	r2, sl
 80082ec:	465b      	mov	r3, fp
 80082ee:	e9d1 0100 	ldrd	r0, r1, [r1]
 80082f2:	f7f8 f9e1 	bl	80006b8 <__aeabi_dmul>
 80082f6:	4682      	mov	sl, r0
 80082f8:	468b      	mov	fp, r1
 80082fa:	f034 040f 	bics.w	r4, r4, #15
 80082fe:	d073      	beq.n	80083e8 <_strtod_l+0x520>
 8008300:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 8008304:	dd49      	ble.n	800839a <_strtod_l+0x4d2>
 8008306:	2400      	movs	r4, #0
 8008308:	46a0      	mov	r8, r4
 800830a:	940b      	str	r4, [sp, #44]	@ 0x2c
 800830c:	46a1      	mov	r9, r4
 800830e:	9a05      	ldr	r2, [sp, #20]
 8008310:	f8df b14c 	ldr.w	fp, [pc, #332]	@ 8008460 <_strtod_l+0x598>
 8008314:	2322      	movs	r3, #34	@ 0x22
 8008316:	6013      	str	r3, [r2, #0]
 8008318:	f04f 0a00 	mov.w	sl, #0
 800831c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800831e:	2b00      	cmp	r3, #0
 8008320:	f43f ae0b 	beq.w	8007f3a <_strtod_l+0x72>
 8008324:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8008326:	9805      	ldr	r0, [sp, #20]
 8008328:	f7ff f946 	bl	80075b8 <_Bfree>
 800832c:	9805      	ldr	r0, [sp, #20]
 800832e:	4649      	mov	r1, r9
 8008330:	f7ff f942 	bl	80075b8 <_Bfree>
 8008334:	9805      	ldr	r0, [sp, #20]
 8008336:	4641      	mov	r1, r8
 8008338:	f7ff f93e 	bl	80075b8 <_Bfree>
 800833c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800833e:	9805      	ldr	r0, [sp, #20]
 8008340:	f7ff f93a 	bl	80075b8 <_Bfree>
 8008344:	9805      	ldr	r0, [sp, #20]
 8008346:	4621      	mov	r1, r4
 8008348:	f7ff f936 	bl	80075b8 <_Bfree>
 800834c:	e5f5      	b.n	8007f3a <_strtod_l+0x72>
 800834e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008350:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 8008354:	4293      	cmp	r3, r2
 8008356:	dbbc      	blt.n	80082d2 <_strtod_l+0x40a>
 8008358:	4c3f      	ldr	r4, [pc, #252]	@ (8008458 <_strtod_l+0x590>)
 800835a:	f1c5 050f 	rsb	r5, r5, #15
 800835e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8008362:	4652      	mov	r2, sl
 8008364:	465b      	mov	r3, fp
 8008366:	e9d1 0100 	ldrd	r0, r1, [r1]
 800836a:	f7f8 f9a5 	bl	80006b8 <__aeabi_dmul>
 800836e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008370:	1b5d      	subs	r5, r3, r5
 8008372:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8008376:	e9d4 2300 	ldrd	r2, r3, [r4]
 800837a:	e78f      	b.n	800829c <_strtod_l+0x3d4>
 800837c:	3316      	adds	r3, #22
 800837e:	dba8      	blt.n	80082d2 <_strtod_l+0x40a>
 8008380:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008382:	eba3 0808 	sub.w	r8, r3, r8
 8008386:	4b34      	ldr	r3, [pc, #208]	@ (8008458 <_strtod_l+0x590>)
 8008388:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 800838c:	e9d8 2300 	ldrd	r2, r3, [r8]
 8008390:	4650      	mov	r0, sl
 8008392:	4659      	mov	r1, fp
 8008394:	f7f8 faba 	bl	800090c <__aeabi_ddiv>
 8008398:	e782      	b.n	80082a0 <_strtod_l+0x3d8>
 800839a:	2300      	movs	r3, #0
 800839c:	4f2f      	ldr	r7, [pc, #188]	@ (800845c <_strtod_l+0x594>)
 800839e:	1124      	asrs	r4, r4, #4
 80083a0:	4650      	mov	r0, sl
 80083a2:	4659      	mov	r1, fp
 80083a4:	461e      	mov	r6, r3
 80083a6:	2c01      	cmp	r4, #1
 80083a8:	dc21      	bgt.n	80083ee <_strtod_l+0x526>
 80083aa:	b10b      	cbz	r3, 80083b0 <_strtod_l+0x4e8>
 80083ac:	4682      	mov	sl, r0
 80083ae:	468b      	mov	fp, r1
 80083b0:	492a      	ldr	r1, [pc, #168]	@ (800845c <_strtod_l+0x594>)
 80083b2:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 80083b6:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 80083ba:	4652      	mov	r2, sl
 80083bc:	465b      	mov	r3, fp
 80083be:	e9d1 0100 	ldrd	r0, r1, [r1]
 80083c2:	f7f8 f979 	bl	80006b8 <__aeabi_dmul>
 80083c6:	4b26      	ldr	r3, [pc, #152]	@ (8008460 <_strtod_l+0x598>)
 80083c8:	460a      	mov	r2, r1
 80083ca:	400b      	ands	r3, r1
 80083cc:	4925      	ldr	r1, [pc, #148]	@ (8008464 <_strtod_l+0x59c>)
 80083ce:	428b      	cmp	r3, r1
 80083d0:	4682      	mov	sl, r0
 80083d2:	d898      	bhi.n	8008306 <_strtod_l+0x43e>
 80083d4:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 80083d8:	428b      	cmp	r3, r1
 80083da:	bf86      	itte	hi
 80083dc:	f8df b088 	ldrhi.w	fp, [pc, #136]	@ 8008468 <_strtod_l+0x5a0>
 80083e0:	f04f 3aff 	movhi.w	sl, #4294967295
 80083e4:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 80083e8:	2300      	movs	r3, #0
 80083ea:	9308      	str	r3, [sp, #32]
 80083ec:	e076      	b.n	80084dc <_strtod_l+0x614>
 80083ee:	07e2      	lsls	r2, r4, #31
 80083f0:	d504      	bpl.n	80083fc <_strtod_l+0x534>
 80083f2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80083f6:	f7f8 f95f 	bl	80006b8 <__aeabi_dmul>
 80083fa:	2301      	movs	r3, #1
 80083fc:	3601      	adds	r6, #1
 80083fe:	1064      	asrs	r4, r4, #1
 8008400:	3708      	adds	r7, #8
 8008402:	e7d0      	b.n	80083a6 <_strtod_l+0x4de>
 8008404:	d0f0      	beq.n	80083e8 <_strtod_l+0x520>
 8008406:	4264      	negs	r4, r4
 8008408:	f014 020f 	ands.w	r2, r4, #15
 800840c:	d00a      	beq.n	8008424 <_strtod_l+0x55c>
 800840e:	4b12      	ldr	r3, [pc, #72]	@ (8008458 <_strtod_l+0x590>)
 8008410:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008414:	4650      	mov	r0, sl
 8008416:	4659      	mov	r1, fp
 8008418:	e9d3 2300 	ldrd	r2, r3, [r3]
 800841c:	f7f8 fa76 	bl	800090c <__aeabi_ddiv>
 8008420:	4682      	mov	sl, r0
 8008422:	468b      	mov	fp, r1
 8008424:	1124      	asrs	r4, r4, #4
 8008426:	d0df      	beq.n	80083e8 <_strtod_l+0x520>
 8008428:	2c1f      	cmp	r4, #31
 800842a:	dd1f      	ble.n	800846c <_strtod_l+0x5a4>
 800842c:	2400      	movs	r4, #0
 800842e:	46a0      	mov	r8, r4
 8008430:	940b      	str	r4, [sp, #44]	@ 0x2c
 8008432:	46a1      	mov	r9, r4
 8008434:	9a05      	ldr	r2, [sp, #20]
 8008436:	2322      	movs	r3, #34	@ 0x22
 8008438:	f04f 0a00 	mov.w	sl, #0
 800843c:	f04f 0b00 	mov.w	fp, #0
 8008440:	6013      	str	r3, [r2, #0]
 8008442:	e76b      	b.n	800831c <_strtod_l+0x454>
 8008444:	0800dc1d 	.word	0x0800dc1d
 8008448:	0800dee8 	.word	0x0800dee8
 800844c:	0800dc15 	.word	0x0800dc15
 8008450:	0800dc4c 	.word	0x0800dc4c
 8008454:	0800dd85 	.word	0x0800dd85
 8008458:	0800de20 	.word	0x0800de20
 800845c:	0800ddf8 	.word	0x0800ddf8
 8008460:	7ff00000 	.word	0x7ff00000
 8008464:	7ca00000 	.word	0x7ca00000
 8008468:	7fefffff 	.word	0x7fefffff
 800846c:	f014 0310 	ands.w	r3, r4, #16
 8008470:	bf18      	it	ne
 8008472:	236a      	movne	r3, #106	@ 0x6a
 8008474:	4ea9      	ldr	r6, [pc, #676]	@ (800871c <_strtod_l+0x854>)
 8008476:	9308      	str	r3, [sp, #32]
 8008478:	4650      	mov	r0, sl
 800847a:	4659      	mov	r1, fp
 800847c:	2300      	movs	r3, #0
 800847e:	07e7      	lsls	r7, r4, #31
 8008480:	d504      	bpl.n	800848c <_strtod_l+0x5c4>
 8008482:	e9d6 2300 	ldrd	r2, r3, [r6]
 8008486:	f7f8 f917 	bl	80006b8 <__aeabi_dmul>
 800848a:	2301      	movs	r3, #1
 800848c:	1064      	asrs	r4, r4, #1
 800848e:	f106 0608 	add.w	r6, r6, #8
 8008492:	d1f4      	bne.n	800847e <_strtod_l+0x5b6>
 8008494:	b10b      	cbz	r3, 800849a <_strtod_l+0x5d2>
 8008496:	4682      	mov	sl, r0
 8008498:	468b      	mov	fp, r1
 800849a:	9b08      	ldr	r3, [sp, #32]
 800849c:	b1b3      	cbz	r3, 80084cc <_strtod_l+0x604>
 800849e:	f3cb 520a 	ubfx	r2, fp, #20, #11
 80084a2:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 80084a6:	2b00      	cmp	r3, #0
 80084a8:	4659      	mov	r1, fp
 80084aa:	dd0f      	ble.n	80084cc <_strtod_l+0x604>
 80084ac:	2b1f      	cmp	r3, #31
 80084ae:	dd56      	ble.n	800855e <_strtod_l+0x696>
 80084b0:	2b34      	cmp	r3, #52	@ 0x34
 80084b2:	bfde      	ittt	le
 80084b4:	f04f 33ff 	movle.w	r3, #4294967295
 80084b8:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 80084bc:	4093      	lslle	r3, r2
 80084be:	f04f 0a00 	mov.w	sl, #0
 80084c2:	bfcc      	ite	gt
 80084c4:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 80084c8:	ea03 0b01 	andle.w	fp, r3, r1
 80084cc:	2200      	movs	r2, #0
 80084ce:	2300      	movs	r3, #0
 80084d0:	4650      	mov	r0, sl
 80084d2:	4659      	mov	r1, fp
 80084d4:	f7f8 fb58 	bl	8000b88 <__aeabi_dcmpeq>
 80084d8:	2800      	cmp	r0, #0
 80084da:	d1a7      	bne.n	800842c <_strtod_l+0x564>
 80084dc:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80084de:	9300      	str	r3, [sp, #0]
 80084e0:	990c      	ldr	r1, [sp, #48]	@ 0x30
 80084e2:	9805      	ldr	r0, [sp, #20]
 80084e4:	462b      	mov	r3, r5
 80084e6:	464a      	mov	r2, r9
 80084e8:	f7ff f8ce 	bl	8007688 <__s2b>
 80084ec:	900b      	str	r0, [sp, #44]	@ 0x2c
 80084ee:	2800      	cmp	r0, #0
 80084f0:	f43f af09 	beq.w	8008306 <_strtod_l+0x43e>
 80084f4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80084f6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80084f8:	2a00      	cmp	r2, #0
 80084fa:	eba3 0308 	sub.w	r3, r3, r8
 80084fe:	bfa8      	it	ge
 8008500:	2300      	movge	r3, #0
 8008502:	9312      	str	r3, [sp, #72]	@ 0x48
 8008504:	2400      	movs	r4, #0
 8008506:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800850a:	9316      	str	r3, [sp, #88]	@ 0x58
 800850c:	46a0      	mov	r8, r4
 800850e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008510:	9805      	ldr	r0, [sp, #20]
 8008512:	6859      	ldr	r1, [r3, #4]
 8008514:	f7ff f810 	bl	8007538 <_Balloc>
 8008518:	4681      	mov	r9, r0
 800851a:	2800      	cmp	r0, #0
 800851c:	f43f aef7 	beq.w	800830e <_strtod_l+0x446>
 8008520:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008522:	691a      	ldr	r2, [r3, #16]
 8008524:	3202      	adds	r2, #2
 8008526:	f103 010c 	add.w	r1, r3, #12
 800852a:	0092      	lsls	r2, r2, #2
 800852c:	300c      	adds	r0, #12
 800852e:	f000 fd71 	bl	8009014 <memcpy>
 8008532:	ec4b ab10 	vmov	d0, sl, fp
 8008536:	9805      	ldr	r0, [sp, #20]
 8008538:	aa1c      	add	r2, sp, #112	@ 0x70
 800853a:	a91b      	add	r1, sp, #108	@ 0x6c
 800853c:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 8008540:	f7ff fbd6 	bl	8007cf0 <__d2b>
 8008544:	901a      	str	r0, [sp, #104]	@ 0x68
 8008546:	2800      	cmp	r0, #0
 8008548:	f43f aee1 	beq.w	800830e <_strtod_l+0x446>
 800854c:	9805      	ldr	r0, [sp, #20]
 800854e:	2101      	movs	r1, #1
 8008550:	f7ff f930 	bl	80077b4 <__i2b>
 8008554:	4680      	mov	r8, r0
 8008556:	b948      	cbnz	r0, 800856c <_strtod_l+0x6a4>
 8008558:	f04f 0800 	mov.w	r8, #0
 800855c:	e6d7      	b.n	800830e <_strtod_l+0x446>
 800855e:	f04f 32ff 	mov.w	r2, #4294967295
 8008562:	fa02 f303 	lsl.w	r3, r2, r3
 8008566:	ea03 0a0a 	and.w	sl, r3, sl
 800856a:	e7af      	b.n	80084cc <_strtod_l+0x604>
 800856c:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 800856e:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8008570:	2d00      	cmp	r5, #0
 8008572:	bfab      	itete	ge
 8008574:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 8008576:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 8008578:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 800857a:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 800857c:	bfac      	ite	ge
 800857e:	18ef      	addge	r7, r5, r3
 8008580:	1b5e      	sublt	r6, r3, r5
 8008582:	9b08      	ldr	r3, [sp, #32]
 8008584:	1aed      	subs	r5, r5, r3
 8008586:	4415      	add	r5, r2
 8008588:	4b65      	ldr	r3, [pc, #404]	@ (8008720 <_strtod_l+0x858>)
 800858a:	3d01      	subs	r5, #1
 800858c:	429d      	cmp	r5, r3
 800858e:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8008592:	da50      	bge.n	8008636 <_strtod_l+0x76e>
 8008594:	1b5b      	subs	r3, r3, r5
 8008596:	2b1f      	cmp	r3, #31
 8008598:	eba2 0203 	sub.w	r2, r2, r3
 800859c:	f04f 0101 	mov.w	r1, #1
 80085a0:	dc3d      	bgt.n	800861e <_strtod_l+0x756>
 80085a2:	fa01 f303 	lsl.w	r3, r1, r3
 80085a6:	9313      	str	r3, [sp, #76]	@ 0x4c
 80085a8:	2300      	movs	r3, #0
 80085aa:	9310      	str	r3, [sp, #64]	@ 0x40
 80085ac:	18bd      	adds	r5, r7, r2
 80085ae:	9b08      	ldr	r3, [sp, #32]
 80085b0:	42af      	cmp	r7, r5
 80085b2:	4416      	add	r6, r2
 80085b4:	441e      	add	r6, r3
 80085b6:	463b      	mov	r3, r7
 80085b8:	bfa8      	it	ge
 80085ba:	462b      	movge	r3, r5
 80085bc:	42b3      	cmp	r3, r6
 80085be:	bfa8      	it	ge
 80085c0:	4633      	movge	r3, r6
 80085c2:	2b00      	cmp	r3, #0
 80085c4:	bfc2      	ittt	gt
 80085c6:	1aed      	subgt	r5, r5, r3
 80085c8:	1af6      	subgt	r6, r6, r3
 80085ca:	1aff      	subgt	r7, r7, r3
 80085cc:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80085ce:	2b00      	cmp	r3, #0
 80085d0:	dd16      	ble.n	8008600 <_strtod_l+0x738>
 80085d2:	4641      	mov	r1, r8
 80085d4:	9805      	ldr	r0, [sp, #20]
 80085d6:	461a      	mov	r2, r3
 80085d8:	f7ff f9a4 	bl	8007924 <__pow5mult>
 80085dc:	4680      	mov	r8, r0
 80085de:	2800      	cmp	r0, #0
 80085e0:	d0ba      	beq.n	8008558 <_strtod_l+0x690>
 80085e2:	4601      	mov	r1, r0
 80085e4:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 80085e6:	9805      	ldr	r0, [sp, #20]
 80085e8:	f7ff f8fa 	bl	80077e0 <__multiply>
 80085ec:	900a      	str	r0, [sp, #40]	@ 0x28
 80085ee:	2800      	cmp	r0, #0
 80085f0:	f43f ae8d 	beq.w	800830e <_strtod_l+0x446>
 80085f4:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80085f6:	9805      	ldr	r0, [sp, #20]
 80085f8:	f7fe ffde 	bl	80075b8 <_Bfree>
 80085fc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80085fe:	931a      	str	r3, [sp, #104]	@ 0x68
 8008600:	2d00      	cmp	r5, #0
 8008602:	dc1d      	bgt.n	8008640 <_strtod_l+0x778>
 8008604:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008606:	2b00      	cmp	r3, #0
 8008608:	dd23      	ble.n	8008652 <_strtod_l+0x78a>
 800860a:	4649      	mov	r1, r9
 800860c:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800860e:	9805      	ldr	r0, [sp, #20]
 8008610:	f7ff f988 	bl	8007924 <__pow5mult>
 8008614:	4681      	mov	r9, r0
 8008616:	b9e0      	cbnz	r0, 8008652 <_strtod_l+0x78a>
 8008618:	f04f 0900 	mov.w	r9, #0
 800861c:	e677      	b.n	800830e <_strtod_l+0x446>
 800861e:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 8008622:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 8008626:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 800862a:	35e2      	adds	r5, #226	@ 0xe2
 800862c:	fa01 f305 	lsl.w	r3, r1, r5
 8008630:	9310      	str	r3, [sp, #64]	@ 0x40
 8008632:	9113      	str	r1, [sp, #76]	@ 0x4c
 8008634:	e7ba      	b.n	80085ac <_strtod_l+0x6e4>
 8008636:	2300      	movs	r3, #0
 8008638:	9310      	str	r3, [sp, #64]	@ 0x40
 800863a:	2301      	movs	r3, #1
 800863c:	9313      	str	r3, [sp, #76]	@ 0x4c
 800863e:	e7b5      	b.n	80085ac <_strtod_l+0x6e4>
 8008640:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8008642:	9805      	ldr	r0, [sp, #20]
 8008644:	462a      	mov	r2, r5
 8008646:	f7ff f9c7 	bl	80079d8 <__lshift>
 800864a:	901a      	str	r0, [sp, #104]	@ 0x68
 800864c:	2800      	cmp	r0, #0
 800864e:	d1d9      	bne.n	8008604 <_strtod_l+0x73c>
 8008650:	e65d      	b.n	800830e <_strtod_l+0x446>
 8008652:	2e00      	cmp	r6, #0
 8008654:	dd07      	ble.n	8008666 <_strtod_l+0x79e>
 8008656:	4649      	mov	r1, r9
 8008658:	9805      	ldr	r0, [sp, #20]
 800865a:	4632      	mov	r2, r6
 800865c:	f7ff f9bc 	bl	80079d8 <__lshift>
 8008660:	4681      	mov	r9, r0
 8008662:	2800      	cmp	r0, #0
 8008664:	d0d8      	beq.n	8008618 <_strtod_l+0x750>
 8008666:	2f00      	cmp	r7, #0
 8008668:	dd08      	ble.n	800867c <_strtod_l+0x7b4>
 800866a:	4641      	mov	r1, r8
 800866c:	9805      	ldr	r0, [sp, #20]
 800866e:	463a      	mov	r2, r7
 8008670:	f7ff f9b2 	bl	80079d8 <__lshift>
 8008674:	4680      	mov	r8, r0
 8008676:	2800      	cmp	r0, #0
 8008678:	f43f ae49 	beq.w	800830e <_strtod_l+0x446>
 800867c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800867e:	9805      	ldr	r0, [sp, #20]
 8008680:	464a      	mov	r2, r9
 8008682:	f7ff fa31 	bl	8007ae8 <__mdiff>
 8008686:	4604      	mov	r4, r0
 8008688:	2800      	cmp	r0, #0
 800868a:	f43f ae40 	beq.w	800830e <_strtod_l+0x446>
 800868e:	68c3      	ldr	r3, [r0, #12]
 8008690:	930f      	str	r3, [sp, #60]	@ 0x3c
 8008692:	2300      	movs	r3, #0
 8008694:	60c3      	str	r3, [r0, #12]
 8008696:	4641      	mov	r1, r8
 8008698:	f7ff fa0a 	bl	8007ab0 <__mcmp>
 800869c:	2800      	cmp	r0, #0
 800869e:	da45      	bge.n	800872c <_strtod_l+0x864>
 80086a0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80086a2:	ea53 030a 	orrs.w	r3, r3, sl
 80086a6:	d16b      	bne.n	8008780 <_strtod_l+0x8b8>
 80086a8:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80086ac:	2b00      	cmp	r3, #0
 80086ae:	d167      	bne.n	8008780 <_strtod_l+0x8b8>
 80086b0:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80086b4:	0d1b      	lsrs	r3, r3, #20
 80086b6:	051b      	lsls	r3, r3, #20
 80086b8:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 80086bc:	d960      	bls.n	8008780 <_strtod_l+0x8b8>
 80086be:	6963      	ldr	r3, [r4, #20]
 80086c0:	b913      	cbnz	r3, 80086c8 <_strtod_l+0x800>
 80086c2:	6923      	ldr	r3, [r4, #16]
 80086c4:	2b01      	cmp	r3, #1
 80086c6:	dd5b      	ble.n	8008780 <_strtod_l+0x8b8>
 80086c8:	4621      	mov	r1, r4
 80086ca:	2201      	movs	r2, #1
 80086cc:	9805      	ldr	r0, [sp, #20]
 80086ce:	f7ff f983 	bl	80079d8 <__lshift>
 80086d2:	4641      	mov	r1, r8
 80086d4:	4604      	mov	r4, r0
 80086d6:	f7ff f9eb 	bl	8007ab0 <__mcmp>
 80086da:	2800      	cmp	r0, #0
 80086dc:	dd50      	ble.n	8008780 <_strtod_l+0x8b8>
 80086de:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80086e2:	9a08      	ldr	r2, [sp, #32]
 80086e4:	0d1b      	lsrs	r3, r3, #20
 80086e6:	051b      	lsls	r3, r3, #20
 80086e8:	2a00      	cmp	r2, #0
 80086ea:	d06a      	beq.n	80087c2 <_strtod_l+0x8fa>
 80086ec:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 80086f0:	d867      	bhi.n	80087c2 <_strtod_l+0x8fa>
 80086f2:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 80086f6:	f67f ae9d 	bls.w	8008434 <_strtod_l+0x56c>
 80086fa:	4b0a      	ldr	r3, [pc, #40]	@ (8008724 <_strtod_l+0x85c>)
 80086fc:	4650      	mov	r0, sl
 80086fe:	4659      	mov	r1, fp
 8008700:	2200      	movs	r2, #0
 8008702:	f7f7 ffd9 	bl	80006b8 <__aeabi_dmul>
 8008706:	4b08      	ldr	r3, [pc, #32]	@ (8008728 <_strtod_l+0x860>)
 8008708:	400b      	ands	r3, r1
 800870a:	4682      	mov	sl, r0
 800870c:	468b      	mov	fp, r1
 800870e:	2b00      	cmp	r3, #0
 8008710:	f47f ae08 	bne.w	8008324 <_strtod_l+0x45c>
 8008714:	9a05      	ldr	r2, [sp, #20]
 8008716:	2322      	movs	r3, #34	@ 0x22
 8008718:	6013      	str	r3, [r2, #0]
 800871a:	e603      	b.n	8008324 <_strtod_l+0x45c>
 800871c:	0800df10 	.word	0x0800df10
 8008720:	fffffc02 	.word	0xfffffc02
 8008724:	39500000 	.word	0x39500000
 8008728:	7ff00000 	.word	0x7ff00000
 800872c:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 8008730:	d165      	bne.n	80087fe <_strtod_l+0x936>
 8008732:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8008734:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008738:	b35a      	cbz	r2, 8008792 <_strtod_l+0x8ca>
 800873a:	4a9f      	ldr	r2, [pc, #636]	@ (80089b8 <_strtod_l+0xaf0>)
 800873c:	4293      	cmp	r3, r2
 800873e:	d12b      	bne.n	8008798 <_strtod_l+0x8d0>
 8008740:	9b08      	ldr	r3, [sp, #32]
 8008742:	4651      	mov	r1, sl
 8008744:	b303      	cbz	r3, 8008788 <_strtod_l+0x8c0>
 8008746:	4b9d      	ldr	r3, [pc, #628]	@ (80089bc <_strtod_l+0xaf4>)
 8008748:	465a      	mov	r2, fp
 800874a:	4013      	ands	r3, r2
 800874c:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8008750:	f04f 32ff 	mov.w	r2, #4294967295
 8008754:	d81b      	bhi.n	800878e <_strtod_l+0x8c6>
 8008756:	0d1b      	lsrs	r3, r3, #20
 8008758:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800875c:	fa02 f303 	lsl.w	r3, r2, r3
 8008760:	4299      	cmp	r1, r3
 8008762:	d119      	bne.n	8008798 <_strtod_l+0x8d0>
 8008764:	4b96      	ldr	r3, [pc, #600]	@ (80089c0 <_strtod_l+0xaf8>)
 8008766:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8008768:	429a      	cmp	r2, r3
 800876a:	d102      	bne.n	8008772 <_strtod_l+0x8aa>
 800876c:	3101      	adds	r1, #1
 800876e:	f43f adce 	beq.w	800830e <_strtod_l+0x446>
 8008772:	4b92      	ldr	r3, [pc, #584]	@ (80089bc <_strtod_l+0xaf4>)
 8008774:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8008776:	401a      	ands	r2, r3
 8008778:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 800877c:	f04f 0a00 	mov.w	sl, #0
 8008780:	9b08      	ldr	r3, [sp, #32]
 8008782:	2b00      	cmp	r3, #0
 8008784:	d1b9      	bne.n	80086fa <_strtod_l+0x832>
 8008786:	e5cd      	b.n	8008324 <_strtod_l+0x45c>
 8008788:	f04f 33ff 	mov.w	r3, #4294967295
 800878c:	e7e8      	b.n	8008760 <_strtod_l+0x898>
 800878e:	4613      	mov	r3, r2
 8008790:	e7e6      	b.n	8008760 <_strtod_l+0x898>
 8008792:	ea53 030a 	orrs.w	r3, r3, sl
 8008796:	d0a2      	beq.n	80086de <_strtod_l+0x816>
 8008798:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800879a:	b1db      	cbz	r3, 80087d4 <_strtod_l+0x90c>
 800879c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800879e:	4213      	tst	r3, r2
 80087a0:	d0ee      	beq.n	8008780 <_strtod_l+0x8b8>
 80087a2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80087a4:	9a08      	ldr	r2, [sp, #32]
 80087a6:	4650      	mov	r0, sl
 80087a8:	4659      	mov	r1, fp
 80087aa:	b1bb      	cbz	r3, 80087dc <_strtod_l+0x914>
 80087ac:	f7ff fb6e 	bl	8007e8c <sulp>
 80087b0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80087b4:	ec53 2b10 	vmov	r2, r3, d0
 80087b8:	f7f7 fdc8 	bl	800034c <__adddf3>
 80087bc:	4682      	mov	sl, r0
 80087be:	468b      	mov	fp, r1
 80087c0:	e7de      	b.n	8008780 <_strtod_l+0x8b8>
 80087c2:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 80087c6:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 80087ca:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 80087ce:	f04f 3aff 	mov.w	sl, #4294967295
 80087d2:	e7d5      	b.n	8008780 <_strtod_l+0x8b8>
 80087d4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80087d6:	ea13 0f0a 	tst.w	r3, sl
 80087da:	e7e1      	b.n	80087a0 <_strtod_l+0x8d8>
 80087dc:	f7ff fb56 	bl	8007e8c <sulp>
 80087e0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80087e4:	ec53 2b10 	vmov	r2, r3, d0
 80087e8:	f7f7 fdae 	bl	8000348 <__aeabi_dsub>
 80087ec:	2200      	movs	r2, #0
 80087ee:	2300      	movs	r3, #0
 80087f0:	4682      	mov	sl, r0
 80087f2:	468b      	mov	fp, r1
 80087f4:	f7f8 f9c8 	bl	8000b88 <__aeabi_dcmpeq>
 80087f8:	2800      	cmp	r0, #0
 80087fa:	d0c1      	beq.n	8008780 <_strtod_l+0x8b8>
 80087fc:	e61a      	b.n	8008434 <_strtod_l+0x56c>
 80087fe:	4641      	mov	r1, r8
 8008800:	4620      	mov	r0, r4
 8008802:	f7ff facd 	bl	8007da0 <__ratio>
 8008806:	ec57 6b10 	vmov	r6, r7, d0
 800880a:	2200      	movs	r2, #0
 800880c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8008810:	4630      	mov	r0, r6
 8008812:	4639      	mov	r1, r7
 8008814:	f7f8 f9cc 	bl	8000bb0 <__aeabi_dcmple>
 8008818:	2800      	cmp	r0, #0
 800881a:	d06f      	beq.n	80088fc <_strtod_l+0xa34>
 800881c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800881e:	2b00      	cmp	r3, #0
 8008820:	d17a      	bne.n	8008918 <_strtod_l+0xa50>
 8008822:	f1ba 0f00 	cmp.w	sl, #0
 8008826:	d158      	bne.n	80088da <_strtod_l+0xa12>
 8008828:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800882a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800882e:	2b00      	cmp	r3, #0
 8008830:	d15a      	bne.n	80088e8 <_strtod_l+0xa20>
 8008832:	4b64      	ldr	r3, [pc, #400]	@ (80089c4 <_strtod_l+0xafc>)
 8008834:	2200      	movs	r2, #0
 8008836:	4630      	mov	r0, r6
 8008838:	4639      	mov	r1, r7
 800883a:	f7f8 f9af 	bl	8000b9c <__aeabi_dcmplt>
 800883e:	2800      	cmp	r0, #0
 8008840:	d159      	bne.n	80088f6 <_strtod_l+0xa2e>
 8008842:	4630      	mov	r0, r6
 8008844:	4639      	mov	r1, r7
 8008846:	4b60      	ldr	r3, [pc, #384]	@ (80089c8 <_strtod_l+0xb00>)
 8008848:	2200      	movs	r2, #0
 800884a:	f7f7 ff35 	bl	80006b8 <__aeabi_dmul>
 800884e:	4606      	mov	r6, r0
 8008850:	460f      	mov	r7, r1
 8008852:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 8008856:	9606      	str	r6, [sp, #24]
 8008858:	9307      	str	r3, [sp, #28]
 800885a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800885e:	4d57      	ldr	r5, [pc, #348]	@ (80089bc <_strtod_l+0xaf4>)
 8008860:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8008864:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008866:	401d      	ands	r5, r3
 8008868:	4b58      	ldr	r3, [pc, #352]	@ (80089cc <_strtod_l+0xb04>)
 800886a:	429d      	cmp	r5, r3
 800886c:	f040 80b2 	bne.w	80089d4 <_strtod_l+0xb0c>
 8008870:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008872:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 8008876:	ec4b ab10 	vmov	d0, sl, fp
 800887a:	f7ff f9c9 	bl	8007c10 <__ulp>
 800887e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008882:	ec51 0b10 	vmov	r0, r1, d0
 8008886:	f7f7 ff17 	bl	80006b8 <__aeabi_dmul>
 800888a:	4652      	mov	r2, sl
 800888c:	465b      	mov	r3, fp
 800888e:	f7f7 fd5d 	bl	800034c <__adddf3>
 8008892:	460b      	mov	r3, r1
 8008894:	4949      	ldr	r1, [pc, #292]	@ (80089bc <_strtod_l+0xaf4>)
 8008896:	4a4e      	ldr	r2, [pc, #312]	@ (80089d0 <_strtod_l+0xb08>)
 8008898:	4019      	ands	r1, r3
 800889a:	4291      	cmp	r1, r2
 800889c:	4682      	mov	sl, r0
 800889e:	d942      	bls.n	8008926 <_strtod_l+0xa5e>
 80088a0:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80088a2:	4b47      	ldr	r3, [pc, #284]	@ (80089c0 <_strtod_l+0xaf8>)
 80088a4:	429a      	cmp	r2, r3
 80088a6:	d103      	bne.n	80088b0 <_strtod_l+0x9e8>
 80088a8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80088aa:	3301      	adds	r3, #1
 80088ac:	f43f ad2f 	beq.w	800830e <_strtod_l+0x446>
 80088b0:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 80089c0 <_strtod_l+0xaf8>
 80088b4:	f04f 3aff 	mov.w	sl, #4294967295
 80088b8:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80088ba:	9805      	ldr	r0, [sp, #20]
 80088bc:	f7fe fe7c 	bl	80075b8 <_Bfree>
 80088c0:	9805      	ldr	r0, [sp, #20]
 80088c2:	4649      	mov	r1, r9
 80088c4:	f7fe fe78 	bl	80075b8 <_Bfree>
 80088c8:	9805      	ldr	r0, [sp, #20]
 80088ca:	4641      	mov	r1, r8
 80088cc:	f7fe fe74 	bl	80075b8 <_Bfree>
 80088d0:	9805      	ldr	r0, [sp, #20]
 80088d2:	4621      	mov	r1, r4
 80088d4:	f7fe fe70 	bl	80075b8 <_Bfree>
 80088d8:	e619      	b.n	800850e <_strtod_l+0x646>
 80088da:	f1ba 0f01 	cmp.w	sl, #1
 80088de:	d103      	bne.n	80088e8 <_strtod_l+0xa20>
 80088e0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80088e2:	2b00      	cmp	r3, #0
 80088e4:	f43f ada6 	beq.w	8008434 <_strtod_l+0x56c>
 80088e8:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 8008998 <_strtod_l+0xad0>
 80088ec:	4f35      	ldr	r7, [pc, #212]	@ (80089c4 <_strtod_l+0xafc>)
 80088ee:	ed8d 7b06 	vstr	d7, [sp, #24]
 80088f2:	2600      	movs	r6, #0
 80088f4:	e7b1      	b.n	800885a <_strtod_l+0x992>
 80088f6:	4f34      	ldr	r7, [pc, #208]	@ (80089c8 <_strtod_l+0xb00>)
 80088f8:	2600      	movs	r6, #0
 80088fa:	e7aa      	b.n	8008852 <_strtod_l+0x98a>
 80088fc:	4b32      	ldr	r3, [pc, #200]	@ (80089c8 <_strtod_l+0xb00>)
 80088fe:	4630      	mov	r0, r6
 8008900:	4639      	mov	r1, r7
 8008902:	2200      	movs	r2, #0
 8008904:	f7f7 fed8 	bl	80006b8 <__aeabi_dmul>
 8008908:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800890a:	4606      	mov	r6, r0
 800890c:	460f      	mov	r7, r1
 800890e:	2b00      	cmp	r3, #0
 8008910:	d09f      	beq.n	8008852 <_strtod_l+0x98a>
 8008912:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8008916:	e7a0      	b.n	800885a <_strtod_l+0x992>
 8008918:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 80089a0 <_strtod_l+0xad8>
 800891c:	ed8d 7b06 	vstr	d7, [sp, #24]
 8008920:	ec57 6b17 	vmov	r6, r7, d7
 8008924:	e799      	b.n	800885a <_strtod_l+0x992>
 8008926:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800892a:	9b08      	ldr	r3, [sp, #32]
 800892c:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 8008930:	2b00      	cmp	r3, #0
 8008932:	d1c1      	bne.n	80088b8 <_strtod_l+0x9f0>
 8008934:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8008938:	0d1b      	lsrs	r3, r3, #20
 800893a:	051b      	lsls	r3, r3, #20
 800893c:	429d      	cmp	r5, r3
 800893e:	d1bb      	bne.n	80088b8 <_strtod_l+0x9f0>
 8008940:	4630      	mov	r0, r6
 8008942:	4639      	mov	r1, r7
 8008944:	f7f8 fa18 	bl	8000d78 <__aeabi_d2lz>
 8008948:	f7f7 fe88 	bl	800065c <__aeabi_l2d>
 800894c:	4602      	mov	r2, r0
 800894e:	460b      	mov	r3, r1
 8008950:	4630      	mov	r0, r6
 8008952:	4639      	mov	r1, r7
 8008954:	f7f7 fcf8 	bl	8000348 <__aeabi_dsub>
 8008958:	460b      	mov	r3, r1
 800895a:	4602      	mov	r2, r0
 800895c:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8008960:	f3cb 0613 	ubfx	r6, fp, #0, #20
 8008964:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008966:	ea46 060a 	orr.w	r6, r6, sl
 800896a:	431e      	orrs	r6, r3
 800896c:	d06f      	beq.n	8008a4e <_strtod_l+0xb86>
 800896e:	a30e      	add	r3, pc, #56	@ (adr r3, 80089a8 <_strtod_l+0xae0>)
 8008970:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008974:	f7f8 f912 	bl	8000b9c <__aeabi_dcmplt>
 8008978:	2800      	cmp	r0, #0
 800897a:	f47f acd3 	bne.w	8008324 <_strtod_l+0x45c>
 800897e:	a30c      	add	r3, pc, #48	@ (adr r3, 80089b0 <_strtod_l+0xae8>)
 8008980:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008984:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008988:	f7f8 f926 	bl	8000bd8 <__aeabi_dcmpgt>
 800898c:	2800      	cmp	r0, #0
 800898e:	d093      	beq.n	80088b8 <_strtod_l+0x9f0>
 8008990:	e4c8      	b.n	8008324 <_strtod_l+0x45c>
 8008992:	bf00      	nop
 8008994:	f3af 8000 	nop.w
 8008998:	00000000 	.word	0x00000000
 800899c:	bff00000 	.word	0xbff00000
 80089a0:	00000000 	.word	0x00000000
 80089a4:	3ff00000 	.word	0x3ff00000
 80089a8:	94a03595 	.word	0x94a03595
 80089ac:	3fdfffff 	.word	0x3fdfffff
 80089b0:	35afe535 	.word	0x35afe535
 80089b4:	3fe00000 	.word	0x3fe00000
 80089b8:	000fffff 	.word	0x000fffff
 80089bc:	7ff00000 	.word	0x7ff00000
 80089c0:	7fefffff 	.word	0x7fefffff
 80089c4:	3ff00000 	.word	0x3ff00000
 80089c8:	3fe00000 	.word	0x3fe00000
 80089cc:	7fe00000 	.word	0x7fe00000
 80089d0:	7c9fffff 	.word	0x7c9fffff
 80089d4:	9b08      	ldr	r3, [sp, #32]
 80089d6:	b323      	cbz	r3, 8008a22 <_strtod_l+0xb5a>
 80089d8:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 80089dc:	d821      	bhi.n	8008a22 <_strtod_l+0xb5a>
 80089de:	a328      	add	r3, pc, #160	@ (adr r3, 8008a80 <_strtod_l+0xbb8>)
 80089e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80089e4:	4630      	mov	r0, r6
 80089e6:	4639      	mov	r1, r7
 80089e8:	f7f8 f8e2 	bl	8000bb0 <__aeabi_dcmple>
 80089ec:	b1a0      	cbz	r0, 8008a18 <_strtod_l+0xb50>
 80089ee:	4639      	mov	r1, r7
 80089f0:	4630      	mov	r0, r6
 80089f2:	f7f8 f939 	bl	8000c68 <__aeabi_d2uiz>
 80089f6:	2801      	cmp	r0, #1
 80089f8:	bf38      	it	cc
 80089fa:	2001      	movcc	r0, #1
 80089fc:	f7f7 fde2 	bl	80005c4 <__aeabi_ui2d>
 8008a00:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008a02:	4606      	mov	r6, r0
 8008a04:	460f      	mov	r7, r1
 8008a06:	b9fb      	cbnz	r3, 8008a48 <_strtod_l+0xb80>
 8008a08:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8008a0c:	9014      	str	r0, [sp, #80]	@ 0x50
 8008a0e:	9315      	str	r3, [sp, #84]	@ 0x54
 8008a10:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 8008a14:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8008a18:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8008a1a:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 8008a1e:	1b5b      	subs	r3, r3, r5
 8008a20:	9311      	str	r3, [sp, #68]	@ 0x44
 8008a22:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8008a26:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 8008a2a:	f7ff f8f1 	bl	8007c10 <__ulp>
 8008a2e:	4650      	mov	r0, sl
 8008a30:	ec53 2b10 	vmov	r2, r3, d0
 8008a34:	4659      	mov	r1, fp
 8008a36:	f7f7 fe3f 	bl	80006b8 <__aeabi_dmul>
 8008a3a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8008a3e:	f7f7 fc85 	bl	800034c <__adddf3>
 8008a42:	4682      	mov	sl, r0
 8008a44:	468b      	mov	fp, r1
 8008a46:	e770      	b.n	800892a <_strtod_l+0xa62>
 8008a48:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 8008a4c:	e7e0      	b.n	8008a10 <_strtod_l+0xb48>
 8008a4e:	a30e      	add	r3, pc, #56	@ (adr r3, 8008a88 <_strtod_l+0xbc0>)
 8008a50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a54:	f7f8 f8a2 	bl	8000b9c <__aeabi_dcmplt>
 8008a58:	e798      	b.n	800898c <_strtod_l+0xac4>
 8008a5a:	2300      	movs	r3, #0
 8008a5c:	930e      	str	r3, [sp, #56]	@ 0x38
 8008a5e:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8008a60:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008a62:	6013      	str	r3, [r2, #0]
 8008a64:	f7ff ba6d 	b.w	8007f42 <_strtod_l+0x7a>
 8008a68:	2a65      	cmp	r2, #101	@ 0x65
 8008a6a:	f43f ab68 	beq.w	800813e <_strtod_l+0x276>
 8008a6e:	2a45      	cmp	r2, #69	@ 0x45
 8008a70:	f43f ab65 	beq.w	800813e <_strtod_l+0x276>
 8008a74:	2301      	movs	r3, #1
 8008a76:	f7ff bba0 	b.w	80081ba <_strtod_l+0x2f2>
 8008a7a:	bf00      	nop
 8008a7c:	f3af 8000 	nop.w
 8008a80:	ffc00000 	.word	0xffc00000
 8008a84:	41dfffff 	.word	0x41dfffff
 8008a88:	94a03595 	.word	0x94a03595
 8008a8c:	3fcfffff 	.word	0x3fcfffff

08008a90 <_strtod_r>:
 8008a90:	4b01      	ldr	r3, [pc, #4]	@ (8008a98 <_strtod_r+0x8>)
 8008a92:	f7ff ba19 	b.w	8007ec8 <_strtod_l>
 8008a96:	bf00      	nop
 8008a98:	2000006c 	.word	0x2000006c

08008a9c <_strtol_l.isra.0>:
 8008a9c:	2b24      	cmp	r3, #36	@ 0x24
 8008a9e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008aa2:	4686      	mov	lr, r0
 8008aa4:	4690      	mov	r8, r2
 8008aa6:	d801      	bhi.n	8008aac <_strtol_l.isra.0+0x10>
 8008aa8:	2b01      	cmp	r3, #1
 8008aaa:	d106      	bne.n	8008aba <_strtol_l.isra.0+0x1e>
 8008aac:	f7fd fdb6 	bl	800661c <__errno>
 8008ab0:	2316      	movs	r3, #22
 8008ab2:	6003      	str	r3, [r0, #0]
 8008ab4:	2000      	movs	r0, #0
 8008ab6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008aba:	4834      	ldr	r0, [pc, #208]	@ (8008b8c <_strtol_l.isra.0+0xf0>)
 8008abc:	460d      	mov	r5, r1
 8008abe:	462a      	mov	r2, r5
 8008ac0:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008ac4:	5d06      	ldrb	r6, [r0, r4]
 8008ac6:	f016 0608 	ands.w	r6, r6, #8
 8008aca:	d1f8      	bne.n	8008abe <_strtol_l.isra.0+0x22>
 8008acc:	2c2d      	cmp	r4, #45	@ 0x2d
 8008ace:	d110      	bne.n	8008af2 <_strtol_l.isra.0+0x56>
 8008ad0:	782c      	ldrb	r4, [r5, #0]
 8008ad2:	2601      	movs	r6, #1
 8008ad4:	1c95      	adds	r5, r2, #2
 8008ad6:	f033 0210 	bics.w	r2, r3, #16
 8008ada:	d115      	bne.n	8008b08 <_strtol_l.isra.0+0x6c>
 8008adc:	2c30      	cmp	r4, #48	@ 0x30
 8008ade:	d10d      	bne.n	8008afc <_strtol_l.isra.0+0x60>
 8008ae0:	782a      	ldrb	r2, [r5, #0]
 8008ae2:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8008ae6:	2a58      	cmp	r2, #88	@ 0x58
 8008ae8:	d108      	bne.n	8008afc <_strtol_l.isra.0+0x60>
 8008aea:	786c      	ldrb	r4, [r5, #1]
 8008aec:	3502      	adds	r5, #2
 8008aee:	2310      	movs	r3, #16
 8008af0:	e00a      	b.n	8008b08 <_strtol_l.isra.0+0x6c>
 8008af2:	2c2b      	cmp	r4, #43	@ 0x2b
 8008af4:	bf04      	itt	eq
 8008af6:	782c      	ldrbeq	r4, [r5, #0]
 8008af8:	1c95      	addeq	r5, r2, #2
 8008afa:	e7ec      	b.n	8008ad6 <_strtol_l.isra.0+0x3a>
 8008afc:	2b00      	cmp	r3, #0
 8008afe:	d1f6      	bne.n	8008aee <_strtol_l.isra.0+0x52>
 8008b00:	2c30      	cmp	r4, #48	@ 0x30
 8008b02:	bf14      	ite	ne
 8008b04:	230a      	movne	r3, #10
 8008b06:	2308      	moveq	r3, #8
 8008b08:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8008b0c:	f10c 3cff 	add.w	ip, ip, #4294967295
 8008b10:	2200      	movs	r2, #0
 8008b12:	fbbc f9f3 	udiv	r9, ip, r3
 8008b16:	4610      	mov	r0, r2
 8008b18:	fb03 ca19 	mls	sl, r3, r9, ip
 8008b1c:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8008b20:	2f09      	cmp	r7, #9
 8008b22:	d80f      	bhi.n	8008b44 <_strtol_l.isra.0+0xa8>
 8008b24:	463c      	mov	r4, r7
 8008b26:	42a3      	cmp	r3, r4
 8008b28:	dd1b      	ble.n	8008b62 <_strtol_l.isra.0+0xc6>
 8008b2a:	1c57      	adds	r7, r2, #1
 8008b2c:	d007      	beq.n	8008b3e <_strtol_l.isra.0+0xa2>
 8008b2e:	4581      	cmp	r9, r0
 8008b30:	d314      	bcc.n	8008b5c <_strtol_l.isra.0+0xc0>
 8008b32:	d101      	bne.n	8008b38 <_strtol_l.isra.0+0x9c>
 8008b34:	45a2      	cmp	sl, r4
 8008b36:	db11      	blt.n	8008b5c <_strtol_l.isra.0+0xc0>
 8008b38:	fb00 4003 	mla	r0, r0, r3, r4
 8008b3c:	2201      	movs	r2, #1
 8008b3e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008b42:	e7eb      	b.n	8008b1c <_strtol_l.isra.0+0x80>
 8008b44:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8008b48:	2f19      	cmp	r7, #25
 8008b4a:	d801      	bhi.n	8008b50 <_strtol_l.isra.0+0xb4>
 8008b4c:	3c37      	subs	r4, #55	@ 0x37
 8008b4e:	e7ea      	b.n	8008b26 <_strtol_l.isra.0+0x8a>
 8008b50:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8008b54:	2f19      	cmp	r7, #25
 8008b56:	d804      	bhi.n	8008b62 <_strtol_l.isra.0+0xc6>
 8008b58:	3c57      	subs	r4, #87	@ 0x57
 8008b5a:	e7e4      	b.n	8008b26 <_strtol_l.isra.0+0x8a>
 8008b5c:	f04f 32ff 	mov.w	r2, #4294967295
 8008b60:	e7ed      	b.n	8008b3e <_strtol_l.isra.0+0xa2>
 8008b62:	1c53      	adds	r3, r2, #1
 8008b64:	d108      	bne.n	8008b78 <_strtol_l.isra.0+0xdc>
 8008b66:	2322      	movs	r3, #34	@ 0x22
 8008b68:	f8ce 3000 	str.w	r3, [lr]
 8008b6c:	4660      	mov	r0, ip
 8008b6e:	f1b8 0f00 	cmp.w	r8, #0
 8008b72:	d0a0      	beq.n	8008ab6 <_strtol_l.isra.0+0x1a>
 8008b74:	1e69      	subs	r1, r5, #1
 8008b76:	e006      	b.n	8008b86 <_strtol_l.isra.0+0xea>
 8008b78:	b106      	cbz	r6, 8008b7c <_strtol_l.isra.0+0xe0>
 8008b7a:	4240      	negs	r0, r0
 8008b7c:	f1b8 0f00 	cmp.w	r8, #0
 8008b80:	d099      	beq.n	8008ab6 <_strtol_l.isra.0+0x1a>
 8008b82:	2a00      	cmp	r2, #0
 8008b84:	d1f6      	bne.n	8008b74 <_strtol_l.isra.0+0xd8>
 8008b86:	f8c8 1000 	str.w	r1, [r8]
 8008b8a:	e794      	b.n	8008ab6 <_strtol_l.isra.0+0x1a>
 8008b8c:	0800df39 	.word	0x0800df39

08008b90 <_strtol_r>:
 8008b90:	f7ff bf84 	b.w	8008a9c <_strtol_l.isra.0>

08008b94 <__ssputs_r>:
 8008b94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008b98:	688e      	ldr	r6, [r1, #8]
 8008b9a:	461f      	mov	r7, r3
 8008b9c:	42be      	cmp	r6, r7
 8008b9e:	680b      	ldr	r3, [r1, #0]
 8008ba0:	4682      	mov	sl, r0
 8008ba2:	460c      	mov	r4, r1
 8008ba4:	4690      	mov	r8, r2
 8008ba6:	d82d      	bhi.n	8008c04 <__ssputs_r+0x70>
 8008ba8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008bac:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8008bb0:	d026      	beq.n	8008c00 <__ssputs_r+0x6c>
 8008bb2:	6965      	ldr	r5, [r4, #20]
 8008bb4:	6909      	ldr	r1, [r1, #16]
 8008bb6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008bba:	eba3 0901 	sub.w	r9, r3, r1
 8008bbe:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008bc2:	1c7b      	adds	r3, r7, #1
 8008bc4:	444b      	add	r3, r9
 8008bc6:	106d      	asrs	r5, r5, #1
 8008bc8:	429d      	cmp	r5, r3
 8008bca:	bf38      	it	cc
 8008bcc:	461d      	movcc	r5, r3
 8008bce:	0553      	lsls	r3, r2, #21
 8008bd0:	d527      	bpl.n	8008c22 <__ssputs_r+0x8e>
 8008bd2:	4629      	mov	r1, r5
 8008bd4:	f7fe fc24 	bl	8007420 <_malloc_r>
 8008bd8:	4606      	mov	r6, r0
 8008bda:	b360      	cbz	r0, 8008c36 <__ssputs_r+0xa2>
 8008bdc:	6921      	ldr	r1, [r4, #16]
 8008bde:	464a      	mov	r2, r9
 8008be0:	f000 fa18 	bl	8009014 <memcpy>
 8008be4:	89a3      	ldrh	r3, [r4, #12]
 8008be6:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8008bea:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008bee:	81a3      	strh	r3, [r4, #12]
 8008bf0:	6126      	str	r6, [r4, #16]
 8008bf2:	6165      	str	r5, [r4, #20]
 8008bf4:	444e      	add	r6, r9
 8008bf6:	eba5 0509 	sub.w	r5, r5, r9
 8008bfa:	6026      	str	r6, [r4, #0]
 8008bfc:	60a5      	str	r5, [r4, #8]
 8008bfe:	463e      	mov	r6, r7
 8008c00:	42be      	cmp	r6, r7
 8008c02:	d900      	bls.n	8008c06 <__ssputs_r+0x72>
 8008c04:	463e      	mov	r6, r7
 8008c06:	6820      	ldr	r0, [r4, #0]
 8008c08:	4632      	mov	r2, r6
 8008c0a:	4641      	mov	r1, r8
 8008c0c:	f000 f9c6 	bl	8008f9c <memmove>
 8008c10:	68a3      	ldr	r3, [r4, #8]
 8008c12:	1b9b      	subs	r3, r3, r6
 8008c14:	60a3      	str	r3, [r4, #8]
 8008c16:	6823      	ldr	r3, [r4, #0]
 8008c18:	4433      	add	r3, r6
 8008c1a:	6023      	str	r3, [r4, #0]
 8008c1c:	2000      	movs	r0, #0
 8008c1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008c22:	462a      	mov	r2, r5
 8008c24:	f000 fd89 	bl	800973a <_realloc_r>
 8008c28:	4606      	mov	r6, r0
 8008c2a:	2800      	cmp	r0, #0
 8008c2c:	d1e0      	bne.n	8008bf0 <__ssputs_r+0x5c>
 8008c2e:	6921      	ldr	r1, [r4, #16]
 8008c30:	4650      	mov	r0, sl
 8008c32:	f7fe fb81 	bl	8007338 <_free_r>
 8008c36:	230c      	movs	r3, #12
 8008c38:	f8ca 3000 	str.w	r3, [sl]
 8008c3c:	89a3      	ldrh	r3, [r4, #12]
 8008c3e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008c42:	81a3      	strh	r3, [r4, #12]
 8008c44:	f04f 30ff 	mov.w	r0, #4294967295
 8008c48:	e7e9      	b.n	8008c1e <__ssputs_r+0x8a>
	...

08008c4c <_svfiprintf_r>:
 8008c4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008c50:	4698      	mov	r8, r3
 8008c52:	898b      	ldrh	r3, [r1, #12]
 8008c54:	061b      	lsls	r3, r3, #24
 8008c56:	b09d      	sub	sp, #116	@ 0x74
 8008c58:	4607      	mov	r7, r0
 8008c5a:	460d      	mov	r5, r1
 8008c5c:	4614      	mov	r4, r2
 8008c5e:	d510      	bpl.n	8008c82 <_svfiprintf_r+0x36>
 8008c60:	690b      	ldr	r3, [r1, #16]
 8008c62:	b973      	cbnz	r3, 8008c82 <_svfiprintf_r+0x36>
 8008c64:	2140      	movs	r1, #64	@ 0x40
 8008c66:	f7fe fbdb 	bl	8007420 <_malloc_r>
 8008c6a:	6028      	str	r0, [r5, #0]
 8008c6c:	6128      	str	r0, [r5, #16]
 8008c6e:	b930      	cbnz	r0, 8008c7e <_svfiprintf_r+0x32>
 8008c70:	230c      	movs	r3, #12
 8008c72:	603b      	str	r3, [r7, #0]
 8008c74:	f04f 30ff 	mov.w	r0, #4294967295
 8008c78:	b01d      	add	sp, #116	@ 0x74
 8008c7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008c7e:	2340      	movs	r3, #64	@ 0x40
 8008c80:	616b      	str	r3, [r5, #20]
 8008c82:	2300      	movs	r3, #0
 8008c84:	9309      	str	r3, [sp, #36]	@ 0x24
 8008c86:	2320      	movs	r3, #32
 8008c88:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8008c8c:	f8cd 800c 	str.w	r8, [sp, #12]
 8008c90:	2330      	movs	r3, #48	@ 0x30
 8008c92:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8008e30 <_svfiprintf_r+0x1e4>
 8008c96:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8008c9a:	f04f 0901 	mov.w	r9, #1
 8008c9e:	4623      	mov	r3, r4
 8008ca0:	469a      	mov	sl, r3
 8008ca2:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008ca6:	b10a      	cbz	r2, 8008cac <_svfiprintf_r+0x60>
 8008ca8:	2a25      	cmp	r2, #37	@ 0x25
 8008caa:	d1f9      	bne.n	8008ca0 <_svfiprintf_r+0x54>
 8008cac:	ebba 0b04 	subs.w	fp, sl, r4
 8008cb0:	d00b      	beq.n	8008cca <_svfiprintf_r+0x7e>
 8008cb2:	465b      	mov	r3, fp
 8008cb4:	4622      	mov	r2, r4
 8008cb6:	4629      	mov	r1, r5
 8008cb8:	4638      	mov	r0, r7
 8008cba:	f7ff ff6b 	bl	8008b94 <__ssputs_r>
 8008cbe:	3001      	adds	r0, #1
 8008cc0:	f000 80a7 	beq.w	8008e12 <_svfiprintf_r+0x1c6>
 8008cc4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008cc6:	445a      	add	r2, fp
 8008cc8:	9209      	str	r2, [sp, #36]	@ 0x24
 8008cca:	f89a 3000 	ldrb.w	r3, [sl]
 8008cce:	2b00      	cmp	r3, #0
 8008cd0:	f000 809f 	beq.w	8008e12 <_svfiprintf_r+0x1c6>
 8008cd4:	2300      	movs	r3, #0
 8008cd6:	f04f 32ff 	mov.w	r2, #4294967295
 8008cda:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008cde:	f10a 0a01 	add.w	sl, sl, #1
 8008ce2:	9304      	str	r3, [sp, #16]
 8008ce4:	9307      	str	r3, [sp, #28]
 8008ce6:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8008cea:	931a      	str	r3, [sp, #104]	@ 0x68
 8008cec:	4654      	mov	r4, sl
 8008cee:	2205      	movs	r2, #5
 8008cf0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008cf4:	484e      	ldr	r0, [pc, #312]	@ (8008e30 <_svfiprintf_r+0x1e4>)
 8008cf6:	f7f7 facb 	bl	8000290 <memchr>
 8008cfa:	9a04      	ldr	r2, [sp, #16]
 8008cfc:	b9d8      	cbnz	r0, 8008d36 <_svfiprintf_r+0xea>
 8008cfe:	06d0      	lsls	r0, r2, #27
 8008d00:	bf44      	itt	mi
 8008d02:	2320      	movmi	r3, #32
 8008d04:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008d08:	0711      	lsls	r1, r2, #28
 8008d0a:	bf44      	itt	mi
 8008d0c:	232b      	movmi	r3, #43	@ 0x2b
 8008d0e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008d12:	f89a 3000 	ldrb.w	r3, [sl]
 8008d16:	2b2a      	cmp	r3, #42	@ 0x2a
 8008d18:	d015      	beq.n	8008d46 <_svfiprintf_r+0xfa>
 8008d1a:	9a07      	ldr	r2, [sp, #28]
 8008d1c:	4654      	mov	r4, sl
 8008d1e:	2000      	movs	r0, #0
 8008d20:	f04f 0c0a 	mov.w	ip, #10
 8008d24:	4621      	mov	r1, r4
 8008d26:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008d2a:	3b30      	subs	r3, #48	@ 0x30
 8008d2c:	2b09      	cmp	r3, #9
 8008d2e:	d94b      	bls.n	8008dc8 <_svfiprintf_r+0x17c>
 8008d30:	b1b0      	cbz	r0, 8008d60 <_svfiprintf_r+0x114>
 8008d32:	9207      	str	r2, [sp, #28]
 8008d34:	e014      	b.n	8008d60 <_svfiprintf_r+0x114>
 8008d36:	eba0 0308 	sub.w	r3, r0, r8
 8008d3a:	fa09 f303 	lsl.w	r3, r9, r3
 8008d3e:	4313      	orrs	r3, r2
 8008d40:	9304      	str	r3, [sp, #16]
 8008d42:	46a2      	mov	sl, r4
 8008d44:	e7d2      	b.n	8008cec <_svfiprintf_r+0xa0>
 8008d46:	9b03      	ldr	r3, [sp, #12]
 8008d48:	1d19      	adds	r1, r3, #4
 8008d4a:	681b      	ldr	r3, [r3, #0]
 8008d4c:	9103      	str	r1, [sp, #12]
 8008d4e:	2b00      	cmp	r3, #0
 8008d50:	bfbb      	ittet	lt
 8008d52:	425b      	neglt	r3, r3
 8008d54:	f042 0202 	orrlt.w	r2, r2, #2
 8008d58:	9307      	strge	r3, [sp, #28]
 8008d5a:	9307      	strlt	r3, [sp, #28]
 8008d5c:	bfb8      	it	lt
 8008d5e:	9204      	strlt	r2, [sp, #16]
 8008d60:	7823      	ldrb	r3, [r4, #0]
 8008d62:	2b2e      	cmp	r3, #46	@ 0x2e
 8008d64:	d10a      	bne.n	8008d7c <_svfiprintf_r+0x130>
 8008d66:	7863      	ldrb	r3, [r4, #1]
 8008d68:	2b2a      	cmp	r3, #42	@ 0x2a
 8008d6a:	d132      	bne.n	8008dd2 <_svfiprintf_r+0x186>
 8008d6c:	9b03      	ldr	r3, [sp, #12]
 8008d6e:	1d1a      	adds	r2, r3, #4
 8008d70:	681b      	ldr	r3, [r3, #0]
 8008d72:	9203      	str	r2, [sp, #12]
 8008d74:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008d78:	3402      	adds	r4, #2
 8008d7a:	9305      	str	r3, [sp, #20]
 8008d7c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8008e40 <_svfiprintf_r+0x1f4>
 8008d80:	7821      	ldrb	r1, [r4, #0]
 8008d82:	2203      	movs	r2, #3
 8008d84:	4650      	mov	r0, sl
 8008d86:	f7f7 fa83 	bl	8000290 <memchr>
 8008d8a:	b138      	cbz	r0, 8008d9c <_svfiprintf_r+0x150>
 8008d8c:	9b04      	ldr	r3, [sp, #16]
 8008d8e:	eba0 000a 	sub.w	r0, r0, sl
 8008d92:	2240      	movs	r2, #64	@ 0x40
 8008d94:	4082      	lsls	r2, r0
 8008d96:	4313      	orrs	r3, r2
 8008d98:	3401      	adds	r4, #1
 8008d9a:	9304      	str	r3, [sp, #16]
 8008d9c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008da0:	4824      	ldr	r0, [pc, #144]	@ (8008e34 <_svfiprintf_r+0x1e8>)
 8008da2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8008da6:	2206      	movs	r2, #6
 8008da8:	f7f7 fa72 	bl	8000290 <memchr>
 8008dac:	2800      	cmp	r0, #0
 8008dae:	d036      	beq.n	8008e1e <_svfiprintf_r+0x1d2>
 8008db0:	4b21      	ldr	r3, [pc, #132]	@ (8008e38 <_svfiprintf_r+0x1ec>)
 8008db2:	bb1b      	cbnz	r3, 8008dfc <_svfiprintf_r+0x1b0>
 8008db4:	9b03      	ldr	r3, [sp, #12]
 8008db6:	3307      	adds	r3, #7
 8008db8:	f023 0307 	bic.w	r3, r3, #7
 8008dbc:	3308      	adds	r3, #8
 8008dbe:	9303      	str	r3, [sp, #12]
 8008dc0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008dc2:	4433      	add	r3, r6
 8008dc4:	9309      	str	r3, [sp, #36]	@ 0x24
 8008dc6:	e76a      	b.n	8008c9e <_svfiprintf_r+0x52>
 8008dc8:	fb0c 3202 	mla	r2, ip, r2, r3
 8008dcc:	460c      	mov	r4, r1
 8008dce:	2001      	movs	r0, #1
 8008dd0:	e7a8      	b.n	8008d24 <_svfiprintf_r+0xd8>
 8008dd2:	2300      	movs	r3, #0
 8008dd4:	3401      	adds	r4, #1
 8008dd6:	9305      	str	r3, [sp, #20]
 8008dd8:	4619      	mov	r1, r3
 8008dda:	f04f 0c0a 	mov.w	ip, #10
 8008dde:	4620      	mov	r0, r4
 8008de0:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008de4:	3a30      	subs	r2, #48	@ 0x30
 8008de6:	2a09      	cmp	r2, #9
 8008de8:	d903      	bls.n	8008df2 <_svfiprintf_r+0x1a6>
 8008dea:	2b00      	cmp	r3, #0
 8008dec:	d0c6      	beq.n	8008d7c <_svfiprintf_r+0x130>
 8008dee:	9105      	str	r1, [sp, #20]
 8008df0:	e7c4      	b.n	8008d7c <_svfiprintf_r+0x130>
 8008df2:	fb0c 2101 	mla	r1, ip, r1, r2
 8008df6:	4604      	mov	r4, r0
 8008df8:	2301      	movs	r3, #1
 8008dfa:	e7f0      	b.n	8008dde <_svfiprintf_r+0x192>
 8008dfc:	ab03      	add	r3, sp, #12
 8008dfe:	9300      	str	r3, [sp, #0]
 8008e00:	462a      	mov	r2, r5
 8008e02:	4b0e      	ldr	r3, [pc, #56]	@ (8008e3c <_svfiprintf_r+0x1f0>)
 8008e04:	a904      	add	r1, sp, #16
 8008e06:	4638      	mov	r0, r7
 8008e08:	f7fc fcca 	bl	80057a0 <_printf_float>
 8008e0c:	1c42      	adds	r2, r0, #1
 8008e0e:	4606      	mov	r6, r0
 8008e10:	d1d6      	bne.n	8008dc0 <_svfiprintf_r+0x174>
 8008e12:	89ab      	ldrh	r3, [r5, #12]
 8008e14:	065b      	lsls	r3, r3, #25
 8008e16:	f53f af2d 	bmi.w	8008c74 <_svfiprintf_r+0x28>
 8008e1a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008e1c:	e72c      	b.n	8008c78 <_svfiprintf_r+0x2c>
 8008e1e:	ab03      	add	r3, sp, #12
 8008e20:	9300      	str	r3, [sp, #0]
 8008e22:	462a      	mov	r2, r5
 8008e24:	4b05      	ldr	r3, [pc, #20]	@ (8008e3c <_svfiprintf_r+0x1f0>)
 8008e26:	a904      	add	r1, sp, #16
 8008e28:	4638      	mov	r0, r7
 8008e2a:	f7fc ff51 	bl	8005cd0 <_printf_i>
 8008e2e:	e7ed      	b.n	8008e0c <_svfiprintf_r+0x1c0>
 8008e30:	0800dd31 	.word	0x0800dd31
 8008e34:	0800dd3b 	.word	0x0800dd3b
 8008e38:	080057a1 	.word	0x080057a1
 8008e3c:	08008b95 	.word	0x08008b95
 8008e40:	0800dd37 	.word	0x0800dd37

08008e44 <__sflush_r>:
 8008e44:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008e48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008e4c:	0716      	lsls	r6, r2, #28
 8008e4e:	4605      	mov	r5, r0
 8008e50:	460c      	mov	r4, r1
 8008e52:	d454      	bmi.n	8008efe <__sflush_r+0xba>
 8008e54:	684b      	ldr	r3, [r1, #4]
 8008e56:	2b00      	cmp	r3, #0
 8008e58:	dc02      	bgt.n	8008e60 <__sflush_r+0x1c>
 8008e5a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8008e5c:	2b00      	cmp	r3, #0
 8008e5e:	dd48      	ble.n	8008ef2 <__sflush_r+0xae>
 8008e60:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008e62:	2e00      	cmp	r6, #0
 8008e64:	d045      	beq.n	8008ef2 <__sflush_r+0xae>
 8008e66:	2300      	movs	r3, #0
 8008e68:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8008e6c:	682f      	ldr	r7, [r5, #0]
 8008e6e:	6a21      	ldr	r1, [r4, #32]
 8008e70:	602b      	str	r3, [r5, #0]
 8008e72:	d030      	beq.n	8008ed6 <__sflush_r+0x92>
 8008e74:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8008e76:	89a3      	ldrh	r3, [r4, #12]
 8008e78:	0759      	lsls	r1, r3, #29
 8008e7a:	d505      	bpl.n	8008e88 <__sflush_r+0x44>
 8008e7c:	6863      	ldr	r3, [r4, #4]
 8008e7e:	1ad2      	subs	r2, r2, r3
 8008e80:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8008e82:	b10b      	cbz	r3, 8008e88 <__sflush_r+0x44>
 8008e84:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8008e86:	1ad2      	subs	r2, r2, r3
 8008e88:	2300      	movs	r3, #0
 8008e8a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008e8c:	6a21      	ldr	r1, [r4, #32]
 8008e8e:	4628      	mov	r0, r5
 8008e90:	47b0      	blx	r6
 8008e92:	1c43      	adds	r3, r0, #1
 8008e94:	89a3      	ldrh	r3, [r4, #12]
 8008e96:	d106      	bne.n	8008ea6 <__sflush_r+0x62>
 8008e98:	6829      	ldr	r1, [r5, #0]
 8008e9a:	291d      	cmp	r1, #29
 8008e9c:	d82b      	bhi.n	8008ef6 <__sflush_r+0xb2>
 8008e9e:	4a2a      	ldr	r2, [pc, #168]	@ (8008f48 <__sflush_r+0x104>)
 8008ea0:	40ca      	lsrs	r2, r1
 8008ea2:	07d6      	lsls	r6, r2, #31
 8008ea4:	d527      	bpl.n	8008ef6 <__sflush_r+0xb2>
 8008ea6:	2200      	movs	r2, #0
 8008ea8:	6062      	str	r2, [r4, #4]
 8008eaa:	04d9      	lsls	r1, r3, #19
 8008eac:	6922      	ldr	r2, [r4, #16]
 8008eae:	6022      	str	r2, [r4, #0]
 8008eb0:	d504      	bpl.n	8008ebc <__sflush_r+0x78>
 8008eb2:	1c42      	adds	r2, r0, #1
 8008eb4:	d101      	bne.n	8008eba <__sflush_r+0x76>
 8008eb6:	682b      	ldr	r3, [r5, #0]
 8008eb8:	b903      	cbnz	r3, 8008ebc <__sflush_r+0x78>
 8008eba:	6560      	str	r0, [r4, #84]	@ 0x54
 8008ebc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008ebe:	602f      	str	r7, [r5, #0]
 8008ec0:	b1b9      	cbz	r1, 8008ef2 <__sflush_r+0xae>
 8008ec2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008ec6:	4299      	cmp	r1, r3
 8008ec8:	d002      	beq.n	8008ed0 <__sflush_r+0x8c>
 8008eca:	4628      	mov	r0, r5
 8008ecc:	f7fe fa34 	bl	8007338 <_free_r>
 8008ed0:	2300      	movs	r3, #0
 8008ed2:	6363      	str	r3, [r4, #52]	@ 0x34
 8008ed4:	e00d      	b.n	8008ef2 <__sflush_r+0xae>
 8008ed6:	2301      	movs	r3, #1
 8008ed8:	4628      	mov	r0, r5
 8008eda:	47b0      	blx	r6
 8008edc:	4602      	mov	r2, r0
 8008ede:	1c50      	adds	r0, r2, #1
 8008ee0:	d1c9      	bne.n	8008e76 <__sflush_r+0x32>
 8008ee2:	682b      	ldr	r3, [r5, #0]
 8008ee4:	2b00      	cmp	r3, #0
 8008ee6:	d0c6      	beq.n	8008e76 <__sflush_r+0x32>
 8008ee8:	2b1d      	cmp	r3, #29
 8008eea:	d001      	beq.n	8008ef0 <__sflush_r+0xac>
 8008eec:	2b16      	cmp	r3, #22
 8008eee:	d11e      	bne.n	8008f2e <__sflush_r+0xea>
 8008ef0:	602f      	str	r7, [r5, #0]
 8008ef2:	2000      	movs	r0, #0
 8008ef4:	e022      	b.n	8008f3c <__sflush_r+0xf8>
 8008ef6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008efa:	b21b      	sxth	r3, r3
 8008efc:	e01b      	b.n	8008f36 <__sflush_r+0xf2>
 8008efe:	690f      	ldr	r7, [r1, #16]
 8008f00:	2f00      	cmp	r7, #0
 8008f02:	d0f6      	beq.n	8008ef2 <__sflush_r+0xae>
 8008f04:	0793      	lsls	r3, r2, #30
 8008f06:	680e      	ldr	r6, [r1, #0]
 8008f08:	bf08      	it	eq
 8008f0a:	694b      	ldreq	r3, [r1, #20]
 8008f0c:	600f      	str	r7, [r1, #0]
 8008f0e:	bf18      	it	ne
 8008f10:	2300      	movne	r3, #0
 8008f12:	eba6 0807 	sub.w	r8, r6, r7
 8008f16:	608b      	str	r3, [r1, #8]
 8008f18:	f1b8 0f00 	cmp.w	r8, #0
 8008f1c:	dde9      	ble.n	8008ef2 <__sflush_r+0xae>
 8008f1e:	6a21      	ldr	r1, [r4, #32]
 8008f20:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8008f22:	4643      	mov	r3, r8
 8008f24:	463a      	mov	r2, r7
 8008f26:	4628      	mov	r0, r5
 8008f28:	47b0      	blx	r6
 8008f2a:	2800      	cmp	r0, #0
 8008f2c:	dc08      	bgt.n	8008f40 <__sflush_r+0xfc>
 8008f2e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008f32:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008f36:	81a3      	strh	r3, [r4, #12]
 8008f38:	f04f 30ff 	mov.w	r0, #4294967295
 8008f3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008f40:	4407      	add	r7, r0
 8008f42:	eba8 0800 	sub.w	r8, r8, r0
 8008f46:	e7e7      	b.n	8008f18 <__sflush_r+0xd4>
 8008f48:	20400001 	.word	0x20400001

08008f4c <_fflush_r>:
 8008f4c:	b538      	push	{r3, r4, r5, lr}
 8008f4e:	690b      	ldr	r3, [r1, #16]
 8008f50:	4605      	mov	r5, r0
 8008f52:	460c      	mov	r4, r1
 8008f54:	b913      	cbnz	r3, 8008f5c <_fflush_r+0x10>
 8008f56:	2500      	movs	r5, #0
 8008f58:	4628      	mov	r0, r5
 8008f5a:	bd38      	pop	{r3, r4, r5, pc}
 8008f5c:	b118      	cbz	r0, 8008f66 <_fflush_r+0x1a>
 8008f5e:	6a03      	ldr	r3, [r0, #32]
 8008f60:	b90b      	cbnz	r3, 8008f66 <_fflush_r+0x1a>
 8008f62:	f7fd fa6d 	bl	8006440 <__sinit>
 8008f66:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008f6a:	2b00      	cmp	r3, #0
 8008f6c:	d0f3      	beq.n	8008f56 <_fflush_r+0xa>
 8008f6e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8008f70:	07d0      	lsls	r0, r2, #31
 8008f72:	d404      	bmi.n	8008f7e <_fflush_r+0x32>
 8008f74:	0599      	lsls	r1, r3, #22
 8008f76:	d402      	bmi.n	8008f7e <_fflush_r+0x32>
 8008f78:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008f7a:	f7fd fb7a 	bl	8006672 <__retarget_lock_acquire_recursive>
 8008f7e:	4628      	mov	r0, r5
 8008f80:	4621      	mov	r1, r4
 8008f82:	f7ff ff5f 	bl	8008e44 <__sflush_r>
 8008f86:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008f88:	07da      	lsls	r2, r3, #31
 8008f8a:	4605      	mov	r5, r0
 8008f8c:	d4e4      	bmi.n	8008f58 <_fflush_r+0xc>
 8008f8e:	89a3      	ldrh	r3, [r4, #12]
 8008f90:	059b      	lsls	r3, r3, #22
 8008f92:	d4e1      	bmi.n	8008f58 <_fflush_r+0xc>
 8008f94:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008f96:	f7fd fb6d 	bl	8006674 <__retarget_lock_release_recursive>
 8008f9a:	e7dd      	b.n	8008f58 <_fflush_r+0xc>

08008f9c <memmove>:
 8008f9c:	4288      	cmp	r0, r1
 8008f9e:	b510      	push	{r4, lr}
 8008fa0:	eb01 0402 	add.w	r4, r1, r2
 8008fa4:	d902      	bls.n	8008fac <memmove+0x10>
 8008fa6:	4284      	cmp	r4, r0
 8008fa8:	4623      	mov	r3, r4
 8008faa:	d807      	bhi.n	8008fbc <memmove+0x20>
 8008fac:	1e43      	subs	r3, r0, #1
 8008fae:	42a1      	cmp	r1, r4
 8008fb0:	d008      	beq.n	8008fc4 <memmove+0x28>
 8008fb2:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008fb6:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008fba:	e7f8      	b.n	8008fae <memmove+0x12>
 8008fbc:	4402      	add	r2, r0
 8008fbe:	4601      	mov	r1, r0
 8008fc0:	428a      	cmp	r2, r1
 8008fc2:	d100      	bne.n	8008fc6 <memmove+0x2a>
 8008fc4:	bd10      	pop	{r4, pc}
 8008fc6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008fca:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008fce:	e7f7      	b.n	8008fc0 <memmove+0x24>

08008fd0 <strncmp>:
 8008fd0:	b510      	push	{r4, lr}
 8008fd2:	b16a      	cbz	r2, 8008ff0 <strncmp+0x20>
 8008fd4:	3901      	subs	r1, #1
 8008fd6:	1884      	adds	r4, r0, r2
 8008fd8:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008fdc:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8008fe0:	429a      	cmp	r2, r3
 8008fe2:	d103      	bne.n	8008fec <strncmp+0x1c>
 8008fe4:	42a0      	cmp	r0, r4
 8008fe6:	d001      	beq.n	8008fec <strncmp+0x1c>
 8008fe8:	2a00      	cmp	r2, #0
 8008fea:	d1f5      	bne.n	8008fd8 <strncmp+0x8>
 8008fec:	1ad0      	subs	r0, r2, r3
 8008fee:	bd10      	pop	{r4, pc}
 8008ff0:	4610      	mov	r0, r2
 8008ff2:	e7fc      	b.n	8008fee <strncmp+0x1e>

08008ff4 <_sbrk_r>:
 8008ff4:	b538      	push	{r3, r4, r5, lr}
 8008ff6:	4d06      	ldr	r5, [pc, #24]	@ (8009010 <_sbrk_r+0x1c>)
 8008ff8:	2300      	movs	r3, #0
 8008ffa:	4604      	mov	r4, r0
 8008ffc:	4608      	mov	r0, r1
 8008ffe:	602b      	str	r3, [r5, #0]
 8009000:	f7f8 fdea 	bl	8001bd8 <_sbrk>
 8009004:	1c43      	adds	r3, r0, #1
 8009006:	d102      	bne.n	800900e <_sbrk_r+0x1a>
 8009008:	682b      	ldr	r3, [r5, #0]
 800900a:	b103      	cbz	r3, 800900e <_sbrk_r+0x1a>
 800900c:	6023      	str	r3, [r4, #0]
 800900e:	bd38      	pop	{r3, r4, r5, pc}
 8009010:	2001d334 	.word	0x2001d334

08009014 <memcpy>:
 8009014:	440a      	add	r2, r1
 8009016:	4291      	cmp	r1, r2
 8009018:	f100 33ff 	add.w	r3, r0, #4294967295
 800901c:	d100      	bne.n	8009020 <memcpy+0xc>
 800901e:	4770      	bx	lr
 8009020:	b510      	push	{r4, lr}
 8009022:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009026:	f803 4f01 	strb.w	r4, [r3, #1]!
 800902a:	4291      	cmp	r1, r2
 800902c:	d1f9      	bne.n	8009022 <memcpy+0xe>
 800902e:	bd10      	pop	{r4, pc}

08009030 <nan>:
 8009030:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8009038 <nan+0x8>
 8009034:	4770      	bx	lr
 8009036:	bf00      	nop
 8009038:	00000000 	.word	0x00000000
 800903c:	7ff80000 	.word	0x7ff80000

08009040 <__assert_func>:
 8009040:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009042:	4614      	mov	r4, r2
 8009044:	461a      	mov	r2, r3
 8009046:	4b09      	ldr	r3, [pc, #36]	@ (800906c <__assert_func+0x2c>)
 8009048:	681b      	ldr	r3, [r3, #0]
 800904a:	4605      	mov	r5, r0
 800904c:	68d8      	ldr	r0, [r3, #12]
 800904e:	b14c      	cbz	r4, 8009064 <__assert_func+0x24>
 8009050:	4b07      	ldr	r3, [pc, #28]	@ (8009070 <__assert_func+0x30>)
 8009052:	9100      	str	r1, [sp, #0]
 8009054:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009058:	4906      	ldr	r1, [pc, #24]	@ (8009074 <__assert_func+0x34>)
 800905a:	462b      	mov	r3, r5
 800905c:	f000 fba8 	bl	80097b0 <fiprintf>
 8009060:	f000 fbb8 	bl	80097d4 <abort>
 8009064:	4b04      	ldr	r3, [pc, #16]	@ (8009078 <__assert_func+0x38>)
 8009066:	461c      	mov	r4, r3
 8009068:	e7f3      	b.n	8009052 <__assert_func+0x12>
 800906a:	bf00      	nop
 800906c:	2000001c 	.word	0x2000001c
 8009070:	0800dd4a 	.word	0x0800dd4a
 8009074:	0800dd57 	.word	0x0800dd57
 8009078:	0800dd85 	.word	0x0800dd85

0800907c <_calloc_r>:
 800907c:	b570      	push	{r4, r5, r6, lr}
 800907e:	fba1 5402 	umull	r5, r4, r1, r2
 8009082:	b934      	cbnz	r4, 8009092 <_calloc_r+0x16>
 8009084:	4629      	mov	r1, r5
 8009086:	f7fe f9cb 	bl	8007420 <_malloc_r>
 800908a:	4606      	mov	r6, r0
 800908c:	b928      	cbnz	r0, 800909a <_calloc_r+0x1e>
 800908e:	4630      	mov	r0, r6
 8009090:	bd70      	pop	{r4, r5, r6, pc}
 8009092:	220c      	movs	r2, #12
 8009094:	6002      	str	r2, [r0, #0]
 8009096:	2600      	movs	r6, #0
 8009098:	e7f9      	b.n	800908e <_calloc_r+0x12>
 800909a:	462a      	mov	r2, r5
 800909c:	4621      	mov	r1, r4
 800909e:	f7fd fa6a 	bl	8006576 <memset>
 80090a2:	e7f4      	b.n	800908e <_calloc_r+0x12>

080090a4 <rshift>:
 80090a4:	6903      	ldr	r3, [r0, #16]
 80090a6:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 80090aa:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80090ae:	ea4f 1261 	mov.w	r2, r1, asr #5
 80090b2:	f100 0414 	add.w	r4, r0, #20
 80090b6:	dd45      	ble.n	8009144 <rshift+0xa0>
 80090b8:	f011 011f 	ands.w	r1, r1, #31
 80090bc:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 80090c0:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 80090c4:	d10c      	bne.n	80090e0 <rshift+0x3c>
 80090c6:	f100 0710 	add.w	r7, r0, #16
 80090ca:	4629      	mov	r1, r5
 80090cc:	42b1      	cmp	r1, r6
 80090ce:	d334      	bcc.n	800913a <rshift+0x96>
 80090d0:	1a9b      	subs	r3, r3, r2
 80090d2:	009b      	lsls	r3, r3, #2
 80090d4:	1eea      	subs	r2, r5, #3
 80090d6:	4296      	cmp	r6, r2
 80090d8:	bf38      	it	cc
 80090da:	2300      	movcc	r3, #0
 80090dc:	4423      	add	r3, r4
 80090de:	e015      	b.n	800910c <rshift+0x68>
 80090e0:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 80090e4:	f1c1 0820 	rsb	r8, r1, #32
 80090e8:	40cf      	lsrs	r7, r1
 80090ea:	f105 0e04 	add.w	lr, r5, #4
 80090ee:	46a1      	mov	r9, r4
 80090f0:	4576      	cmp	r6, lr
 80090f2:	46f4      	mov	ip, lr
 80090f4:	d815      	bhi.n	8009122 <rshift+0x7e>
 80090f6:	1a9a      	subs	r2, r3, r2
 80090f8:	0092      	lsls	r2, r2, #2
 80090fa:	3a04      	subs	r2, #4
 80090fc:	3501      	adds	r5, #1
 80090fe:	42ae      	cmp	r6, r5
 8009100:	bf38      	it	cc
 8009102:	2200      	movcc	r2, #0
 8009104:	18a3      	adds	r3, r4, r2
 8009106:	50a7      	str	r7, [r4, r2]
 8009108:	b107      	cbz	r7, 800910c <rshift+0x68>
 800910a:	3304      	adds	r3, #4
 800910c:	1b1a      	subs	r2, r3, r4
 800910e:	42a3      	cmp	r3, r4
 8009110:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8009114:	bf08      	it	eq
 8009116:	2300      	moveq	r3, #0
 8009118:	6102      	str	r2, [r0, #16]
 800911a:	bf08      	it	eq
 800911c:	6143      	streq	r3, [r0, #20]
 800911e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009122:	f8dc c000 	ldr.w	ip, [ip]
 8009126:	fa0c fc08 	lsl.w	ip, ip, r8
 800912a:	ea4c 0707 	orr.w	r7, ip, r7
 800912e:	f849 7b04 	str.w	r7, [r9], #4
 8009132:	f85e 7b04 	ldr.w	r7, [lr], #4
 8009136:	40cf      	lsrs	r7, r1
 8009138:	e7da      	b.n	80090f0 <rshift+0x4c>
 800913a:	f851 cb04 	ldr.w	ip, [r1], #4
 800913e:	f847 cf04 	str.w	ip, [r7, #4]!
 8009142:	e7c3      	b.n	80090cc <rshift+0x28>
 8009144:	4623      	mov	r3, r4
 8009146:	e7e1      	b.n	800910c <rshift+0x68>

08009148 <__hexdig_fun>:
 8009148:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800914c:	2b09      	cmp	r3, #9
 800914e:	d802      	bhi.n	8009156 <__hexdig_fun+0xe>
 8009150:	3820      	subs	r0, #32
 8009152:	b2c0      	uxtb	r0, r0
 8009154:	4770      	bx	lr
 8009156:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800915a:	2b05      	cmp	r3, #5
 800915c:	d801      	bhi.n	8009162 <__hexdig_fun+0x1a>
 800915e:	3847      	subs	r0, #71	@ 0x47
 8009160:	e7f7      	b.n	8009152 <__hexdig_fun+0xa>
 8009162:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 8009166:	2b05      	cmp	r3, #5
 8009168:	d801      	bhi.n	800916e <__hexdig_fun+0x26>
 800916a:	3827      	subs	r0, #39	@ 0x27
 800916c:	e7f1      	b.n	8009152 <__hexdig_fun+0xa>
 800916e:	2000      	movs	r0, #0
 8009170:	4770      	bx	lr
	...

08009174 <__gethex>:
 8009174:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009178:	b085      	sub	sp, #20
 800917a:	468a      	mov	sl, r1
 800917c:	9302      	str	r3, [sp, #8]
 800917e:	680b      	ldr	r3, [r1, #0]
 8009180:	9001      	str	r0, [sp, #4]
 8009182:	4690      	mov	r8, r2
 8009184:	1c9c      	adds	r4, r3, #2
 8009186:	46a1      	mov	r9, r4
 8009188:	f814 0b01 	ldrb.w	r0, [r4], #1
 800918c:	2830      	cmp	r0, #48	@ 0x30
 800918e:	d0fa      	beq.n	8009186 <__gethex+0x12>
 8009190:	eba9 0303 	sub.w	r3, r9, r3
 8009194:	f1a3 0b02 	sub.w	fp, r3, #2
 8009198:	f7ff ffd6 	bl	8009148 <__hexdig_fun>
 800919c:	4605      	mov	r5, r0
 800919e:	2800      	cmp	r0, #0
 80091a0:	d168      	bne.n	8009274 <__gethex+0x100>
 80091a2:	49a0      	ldr	r1, [pc, #640]	@ (8009424 <__gethex+0x2b0>)
 80091a4:	2201      	movs	r2, #1
 80091a6:	4648      	mov	r0, r9
 80091a8:	f7ff ff12 	bl	8008fd0 <strncmp>
 80091ac:	4607      	mov	r7, r0
 80091ae:	2800      	cmp	r0, #0
 80091b0:	d167      	bne.n	8009282 <__gethex+0x10e>
 80091b2:	f899 0001 	ldrb.w	r0, [r9, #1]
 80091b6:	4626      	mov	r6, r4
 80091b8:	f7ff ffc6 	bl	8009148 <__hexdig_fun>
 80091bc:	2800      	cmp	r0, #0
 80091be:	d062      	beq.n	8009286 <__gethex+0x112>
 80091c0:	4623      	mov	r3, r4
 80091c2:	7818      	ldrb	r0, [r3, #0]
 80091c4:	2830      	cmp	r0, #48	@ 0x30
 80091c6:	4699      	mov	r9, r3
 80091c8:	f103 0301 	add.w	r3, r3, #1
 80091cc:	d0f9      	beq.n	80091c2 <__gethex+0x4e>
 80091ce:	f7ff ffbb 	bl	8009148 <__hexdig_fun>
 80091d2:	fab0 f580 	clz	r5, r0
 80091d6:	096d      	lsrs	r5, r5, #5
 80091d8:	f04f 0b01 	mov.w	fp, #1
 80091dc:	464a      	mov	r2, r9
 80091de:	4616      	mov	r6, r2
 80091e0:	3201      	adds	r2, #1
 80091e2:	7830      	ldrb	r0, [r6, #0]
 80091e4:	f7ff ffb0 	bl	8009148 <__hexdig_fun>
 80091e8:	2800      	cmp	r0, #0
 80091ea:	d1f8      	bne.n	80091de <__gethex+0x6a>
 80091ec:	498d      	ldr	r1, [pc, #564]	@ (8009424 <__gethex+0x2b0>)
 80091ee:	2201      	movs	r2, #1
 80091f0:	4630      	mov	r0, r6
 80091f2:	f7ff feed 	bl	8008fd0 <strncmp>
 80091f6:	2800      	cmp	r0, #0
 80091f8:	d13f      	bne.n	800927a <__gethex+0x106>
 80091fa:	b944      	cbnz	r4, 800920e <__gethex+0x9a>
 80091fc:	1c74      	adds	r4, r6, #1
 80091fe:	4622      	mov	r2, r4
 8009200:	4616      	mov	r6, r2
 8009202:	3201      	adds	r2, #1
 8009204:	7830      	ldrb	r0, [r6, #0]
 8009206:	f7ff ff9f 	bl	8009148 <__hexdig_fun>
 800920a:	2800      	cmp	r0, #0
 800920c:	d1f8      	bne.n	8009200 <__gethex+0x8c>
 800920e:	1ba4      	subs	r4, r4, r6
 8009210:	00a7      	lsls	r7, r4, #2
 8009212:	7833      	ldrb	r3, [r6, #0]
 8009214:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 8009218:	2b50      	cmp	r3, #80	@ 0x50
 800921a:	d13e      	bne.n	800929a <__gethex+0x126>
 800921c:	7873      	ldrb	r3, [r6, #1]
 800921e:	2b2b      	cmp	r3, #43	@ 0x2b
 8009220:	d033      	beq.n	800928a <__gethex+0x116>
 8009222:	2b2d      	cmp	r3, #45	@ 0x2d
 8009224:	d034      	beq.n	8009290 <__gethex+0x11c>
 8009226:	1c71      	adds	r1, r6, #1
 8009228:	2400      	movs	r4, #0
 800922a:	7808      	ldrb	r0, [r1, #0]
 800922c:	f7ff ff8c 	bl	8009148 <__hexdig_fun>
 8009230:	1e43      	subs	r3, r0, #1
 8009232:	b2db      	uxtb	r3, r3
 8009234:	2b18      	cmp	r3, #24
 8009236:	d830      	bhi.n	800929a <__gethex+0x126>
 8009238:	f1a0 0210 	sub.w	r2, r0, #16
 800923c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8009240:	f7ff ff82 	bl	8009148 <__hexdig_fun>
 8009244:	f100 3cff 	add.w	ip, r0, #4294967295
 8009248:	fa5f fc8c 	uxtb.w	ip, ip
 800924c:	f1bc 0f18 	cmp.w	ip, #24
 8009250:	f04f 030a 	mov.w	r3, #10
 8009254:	d91e      	bls.n	8009294 <__gethex+0x120>
 8009256:	b104      	cbz	r4, 800925a <__gethex+0xe6>
 8009258:	4252      	negs	r2, r2
 800925a:	4417      	add	r7, r2
 800925c:	f8ca 1000 	str.w	r1, [sl]
 8009260:	b1ed      	cbz	r5, 800929e <__gethex+0x12a>
 8009262:	f1bb 0f00 	cmp.w	fp, #0
 8009266:	bf0c      	ite	eq
 8009268:	2506      	moveq	r5, #6
 800926a:	2500      	movne	r5, #0
 800926c:	4628      	mov	r0, r5
 800926e:	b005      	add	sp, #20
 8009270:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009274:	2500      	movs	r5, #0
 8009276:	462c      	mov	r4, r5
 8009278:	e7b0      	b.n	80091dc <__gethex+0x68>
 800927a:	2c00      	cmp	r4, #0
 800927c:	d1c7      	bne.n	800920e <__gethex+0x9a>
 800927e:	4627      	mov	r7, r4
 8009280:	e7c7      	b.n	8009212 <__gethex+0x9e>
 8009282:	464e      	mov	r6, r9
 8009284:	462f      	mov	r7, r5
 8009286:	2501      	movs	r5, #1
 8009288:	e7c3      	b.n	8009212 <__gethex+0x9e>
 800928a:	2400      	movs	r4, #0
 800928c:	1cb1      	adds	r1, r6, #2
 800928e:	e7cc      	b.n	800922a <__gethex+0xb6>
 8009290:	2401      	movs	r4, #1
 8009292:	e7fb      	b.n	800928c <__gethex+0x118>
 8009294:	fb03 0002 	mla	r0, r3, r2, r0
 8009298:	e7ce      	b.n	8009238 <__gethex+0xc4>
 800929a:	4631      	mov	r1, r6
 800929c:	e7de      	b.n	800925c <__gethex+0xe8>
 800929e:	eba6 0309 	sub.w	r3, r6, r9
 80092a2:	3b01      	subs	r3, #1
 80092a4:	4629      	mov	r1, r5
 80092a6:	2b07      	cmp	r3, #7
 80092a8:	dc0a      	bgt.n	80092c0 <__gethex+0x14c>
 80092aa:	9801      	ldr	r0, [sp, #4]
 80092ac:	f7fe f944 	bl	8007538 <_Balloc>
 80092b0:	4604      	mov	r4, r0
 80092b2:	b940      	cbnz	r0, 80092c6 <__gethex+0x152>
 80092b4:	4b5c      	ldr	r3, [pc, #368]	@ (8009428 <__gethex+0x2b4>)
 80092b6:	4602      	mov	r2, r0
 80092b8:	21e4      	movs	r1, #228	@ 0xe4
 80092ba:	485c      	ldr	r0, [pc, #368]	@ (800942c <__gethex+0x2b8>)
 80092bc:	f7ff fec0 	bl	8009040 <__assert_func>
 80092c0:	3101      	adds	r1, #1
 80092c2:	105b      	asrs	r3, r3, #1
 80092c4:	e7ef      	b.n	80092a6 <__gethex+0x132>
 80092c6:	f100 0a14 	add.w	sl, r0, #20
 80092ca:	2300      	movs	r3, #0
 80092cc:	4655      	mov	r5, sl
 80092ce:	469b      	mov	fp, r3
 80092d0:	45b1      	cmp	r9, r6
 80092d2:	d337      	bcc.n	8009344 <__gethex+0x1d0>
 80092d4:	f845 bb04 	str.w	fp, [r5], #4
 80092d8:	eba5 050a 	sub.w	r5, r5, sl
 80092dc:	10ad      	asrs	r5, r5, #2
 80092de:	6125      	str	r5, [r4, #16]
 80092e0:	4658      	mov	r0, fp
 80092e2:	f7fe fa1b 	bl	800771c <__hi0bits>
 80092e6:	016d      	lsls	r5, r5, #5
 80092e8:	f8d8 6000 	ldr.w	r6, [r8]
 80092ec:	1a2d      	subs	r5, r5, r0
 80092ee:	42b5      	cmp	r5, r6
 80092f0:	dd54      	ble.n	800939c <__gethex+0x228>
 80092f2:	1bad      	subs	r5, r5, r6
 80092f4:	4629      	mov	r1, r5
 80092f6:	4620      	mov	r0, r4
 80092f8:	f7fe fda7 	bl	8007e4a <__any_on>
 80092fc:	4681      	mov	r9, r0
 80092fe:	b178      	cbz	r0, 8009320 <__gethex+0x1ac>
 8009300:	1e6b      	subs	r3, r5, #1
 8009302:	1159      	asrs	r1, r3, #5
 8009304:	f003 021f 	and.w	r2, r3, #31
 8009308:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800930c:	f04f 0901 	mov.w	r9, #1
 8009310:	fa09 f202 	lsl.w	r2, r9, r2
 8009314:	420a      	tst	r2, r1
 8009316:	d003      	beq.n	8009320 <__gethex+0x1ac>
 8009318:	454b      	cmp	r3, r9
 800931a:	dc36      	bgt.n	800938a <__gethex+0x216>
 800931c:	f04f 0902 	mov.w	r9, #2
 8009320:	4629      	mov	r1, r5
 8009322:	4620      	mov	r0, r4
 8009324:	f7ff febe 	bl	80090a4 <rshift>
 8009328:	442f      	add	r7, r5
 800932a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800932e:	42bb      	cmp	r3, r7
 8009330:	da42      	bge.n	80093b8 <__gethex+0x244>
 8009332:	9801      	ldr	r0, [sp, #4]
 8009334:	4621      	mov	r1, r4
 8009336:	f7fe f93f 	bl	80075b8 <_Bfree>
 800933a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800933c:	2300      	movs	r3, #0
 800933e:	6013      	str	r3, [r2, #0]
 8009340:	25a3      	movs	r5, #163	@ 0xa3
 8009342:	e793      	b.n	800926c <__gethex+0xf8>
 8009344:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 8009348:	2a2e      	cmp	r2, #46	@ 0x2e
 800934a:	d012      	beq.n	8009372 <__gethex+0x1fe>
 800934c:	2b20      	cmp	r3, #32
 800934e:	d104      	bne.n	800935a <__gethex+0x1e6>
 8009350:	f845 bb04 	str.w	fp, [r5], #4
 8009354:	f04f 0b00 	mov.w	fp, #0
 8009358:	465b      	mov	r3, fp
 800935a:	7830      	ldrb	r0, [r6, #0]
 800935c:	9303      	str	r3, [sp, #12]
 800935e:	f7ff fef3 	bl	8009148 <__hexdig_fun>
 8009362:	9b03      	ldr	r3, [sp, #12]
 8009364:	f000 000f 	and.w	r0, r0, #15
 8009368:	4098      	lsls	r0, r3
 800936a:	ea4b 0b00 	orr.w	fp, fp, r0
 800936e:	3304      	adds	r3, #4
 8009370:	e7ae      	b.n	80092d0 <__gethex+0x15c>
 8009372:	45b1      	cmp	r9, r6
 8009374:	d8ea      	bhi.n	800934c <__gethex+0x1d8>
 8009376:	492b      	ldr	r1, [pc, #172]	@ (8009424 <__gethex+0x2b0>)
 8009378:	9303      	str	r3, [sp, #12]
 800937a:	2201      	movs	r2, #1
 800937c:	4630      	mov	r0, r6
 800937e:	f7ff fe27 	bl	8008fd0 <strncmp>
 8009382:	9b03      	ldr	r3, [sp, #12]
 8009384:	2800      	cmp	r0, #0
 8009386:	d1e1      	bne.n	800934c <__gethex+0x1d8>
 8009388:	e7a2      	b.n	80092d0 <__gethex+0x15c>
 800938a:	1ea9      	subs	r1, r5, #2
 800938c:	4620      	mov	r0, r4
 800938e:	f7fe fd5c 	bl	8007e4a <__any_on>
 8009392:	2800      	cmp	r0, #0
 8009394:	d0c2      	beq.n	800931c <__gethex+0x1a8>
 8009396:	f04f 0903 	mov.w	r9, #3
 800939a:	e7c1      	b.n	8009320 <__gethex+0x1ac>
 800939c:	da09      	bge.n	80093b2 <__gethex+0x23e>
 800939e:	1b75      	subs	r5, r6, r5
 80093a0:	4621      	mov	r1, r4
 80093a2:	9801      	ldr	r0, [sp, #4]
 80093a4:	462a      	mov	r2, r5
 80093a6:	f7fe fb17 	bl	80079d8 <__lshift>
 80093aa:	1b7f      	subs	r7, r7, r5
 80093ac:	4604      	mov	r4, r0
 80093ae:	f100 0a14 	add.w	sl, r0, #20
 80093b2:	f04f 0900 	mov.w	r9, #0
 80093b6:	e7b8      	b.n	800932a <__gethex+0x1b6>
 80093b8:	f8d8 5004 	ldr.w	r5, [r8, #4]
 80093bc:	42bd      	cmp	r5, r7
 80093be:	dd6f      	ble.n	80094a0 <__gethex+0x32c>
 80093c0:	1bed      	subs	r5, r5, r7
 80093c2:	42ae      	cmp	r6, r5
 80093c4:	dc34      	bgt.n	8009430 <__gethex+0x2bc>
 80093c6:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80093ca:	2b02      	cmp	r3, #2
 80093cc:	d022      	beq.n	8009414 <__gethex+0x2a0>
 80093ce:	2b03      	cmp	r3, #3
 80093d0:	d024      	beq.n	800941c <__gethex+0x2a8>
 80093d2:	2b01      	cmp	r3, #1
 80093d4:	d115      	bne.n	8009402 <__gethex+0x28e>
 80093d6:	42ae      	cmp	r6, r5
 80093d8:	d113      	bne.n	8009402 <__gethex+0x28e>
 80093da:	2e01      	cmp	r6, #1
 80093dc:	d10b      	bne.n	80093f6 <__gethex+0x282>
 80093de:	9a02      	ldr	r2, [sp, #8]
 80093e0:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80093e4:	6013      	str	r3, [r2, #0]
 80093e6:	2301      	movs	r3, #1
 80093e8:	6123      	str	r3, [r4, #16]
 80093ea:	f8ca 3000 	str.w	r3, [sl]
 80093ee:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80093f0:	2562      	movs	r5, #98	@ 0x62
 80093f2:	601c      	str	r4, [r3, #0]
 80093f4:	e73a      	b.n	800926c <__gethex+0xf8>
 80093f6:	1e71      	subs	r1, r6, #1
 80093f8:	4620      	mov	r0, r4
 80093fa:	f7fe fd26 	bl	8007e4a <__any_on>
 80093fe:	2800      	cmp	r0, #0
 8009400:	d1ed      	bne.n	80093de <__gethex+0x26a>
 8009402:	9801      	ldr	r0, [sp, #4]
 8009404:	4621      	mov	r1, r4
 8009406:	f7fe f8d7 	bl	80075b8 <_Bfree>
 800940a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800940c:	2300      	movs	r3, #0
 800940e:	6013      	str	r3, [r2, #0]
 8009410:	2550      	movs	r5, #80	@ 0x50
 8009412:	e72b      	b.n	800926c <__gethex+0xf8>
 8009414:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009416:	2b00      	cmp	r3, #0
 8009418:	d1f3      	bne.n	8009402 <__gethex+0x28e>
 800941a:	e7e0      	b.n	80093de <__gethex+0x26a>
 800941c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800941e:	2b00      	cmp	r3, #0
 8009420:	d1dd      	bne.n	80093de <__gethex+0x26a>
 8009422:	e7ee      	b.n	8009402 <__gethex+0x28e>
 8009424:	0800dd2f 	.word	0x0800dd2f
 8009428:	0800dcc5 	.word	0x0800dcc5
 800942c:	0800dd86 	.word	0x0800dd86
 8009430:	1e6f      	subs	r7, r5, #1
 8009432:	f1b9 0f00 	cmp.w	r9, #0
 8009436:	d130      	bne.n	800949a <__gethex+0x326>
 8009438:	b127      	cbz	r7, 8009444 <__gethex+0x2d0>
 800943a:	4639      	mov	r1, r7
 800943c:	4620      	mov	r0, r4
 800943e:	f7fe fd04 	bl	8007e4a <__any_on>
 8009442:	4681      	mov	r9, r0
 8009444:	117a      	asrs	r2, r7, #5
 8009446:	2301      	movs	r3, #1
 8009448:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800944c:	f007 071f 	and.w	r7, r7, #31
 8009450:	40bb      	lsls	r3, r7
 8009452:	4213      	tst	r3, r2
 8009454:	4629      	mov	r1, r5
 8009456:	4620      	mov	r0, r4
 8009458:	bf18      	it	ne
 800945a:	f049 0902 	orrne.w	r9, r9, #2
 800945e:	f7ff fe21 	bl	80090a4 <rshift>
 8009462:	f8d8 7004 	ldr.w	r7, [r8, #4]
 8009466:	1b76      	subs	r6, r6, r5
 8009468:	2502      	movs	r5, #2
 800946a:	f1b9 0f00 	cmp.w	r9, #0
 800946e:	d047      	beq.n	8009500 <__gethex+0x38c>
 8009470:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8009474:	2b02      	cmp	r3, #2
 8009476:	d015      	beq.n	80094a4 <__gethex+0x330>
 8009478:	2b03      	cmp	r3, #3
 800947a:	d017      	beq.n	80094ac <__gethex+0x338>
 800947c:	2b01      	cmp	r3, #1
 800947e:	d109      	bne.n	8009494 <__gethex+0x320>
 8009480:	f019 0f02 	tst.w	r9, #2
 8009484:	d006      	beq.n	8009494 <__gethex+0x320>
 8009486:	f8da 3000 	ldr.w	r3, [sl]
 800948a:	ea49 0903 	orr.w	r9, r9, r3
 800948e:	f019 0f01 	tst.w	r9, #1
 8009492:	d10e      	bne.n	80094b2 <__gethex+0x33e>
 8009494:	f045 0510 	orr.w	r5, r5, #16
 8009498:	e032      	b.n	8009500 <__gethex+0x38c>
 800949a:	f04f 0901 	mov.w	r9, #1
 800949e:	e7d1      	b.n	8009444 <__gethex+0x2d0>
 80094a0:	2501      	movs	r5, #1
 80094a2:	e7e2      	b.n	800946a <__gethex+0x2f6>
 80094a4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80094a6:	f1c3 0301 	rsb	r3, r3, #1
 80094aa:	930f      	str	r3, [sp, #60]	@ 0x3c
 80094ac:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80094ae:	2b00      	cmp	r3, #0
 80094b0:	d0f0      	beq.n	8009494 <__gethex+0x320>
 80094b2:	f8d4 b010 	ldr.w	fp, [r4, #16]
 80094b6:	f104 0314 	add.w	r3, r4, #20
 80094ba:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 80094be:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 80094c2:	f04f 0c00 	mov.w	ip, #0
 80094c6:	4618      	mov	r0, r3
 80094c8:	f853 2b04 	ldr.w	r2, [r3], #4
 80094cc:	f1b2 3fff 	cmp.w	r2, #4294967295
 80094d0:	d01b      	beq.n	800950a <__gethex+0x396>
 80094d2:	3201      	adds	r2, #1
 80094d4:	6002      	str	r2, [r0, #0]
 80094d6:	2d02      	cmp	r5, #2
 80094d8:	f104 0314 	add.w	r3, r4, #20
 80094dc:	d13c      	bne.n	8009558 <__gethex+0x3e4>
 80094de:	f8d8 2000 	ldr.w	r2, [r8]
 80094e2:	3a01      	subs	r2, #1
 80094e4:	42b2      	cmp	r2, r6
 80094e6:	d109      	bne.n	80094fc <__gethex+0x388>
 80094e8:	1171      	asrs	r1, r6, #5
 80094ea:	2201      	movs	r2, #1
 80094ec:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80094f0:	f006 061f 	and.w	r6, r6, #31
 80094f4:	fa02 f606 	lsl.w	r6, r2, r6
 80094f8:	421e      	tst	r6, r3
 80094fa:	d13a      	bne.n	8009572 <__gethex+0x3fe>
 80094fc:	f045 0520 	orr.w	r5, r5, #32
 8009500:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009502:	601c      	str	r4, [r3, #0]
 8009504:	9b02      	ldr	r3, [sp, #8]
 8009506:	601f      	str	r7, [r3, #0]
 8009508:	e6b0      	b.n	800926c <__gethex+0xf8>
 800950a:	4299      	cmp	r1, r3
 800950c:	f843 cc04 	str.w	ip, [r3, #-4]
 8009510:	d8d9      	bhi.n	80094c6 <__gethex+0x352>
 8009512:	68a3      	ldr	r3, [r4, #8]
 8009514:	459b      	cmp	fp, r3
 8009516:	db17      	blt.n	8009548 <__gethex+0x3d4>
 8009518:	6861      	ldr	r1, [r4, #4]
 800951a:	9801      	ldr	r0, [sp, #4]
 800951c:	3101      	adds	r1, #1
 800951e:	f7fe f80b 	bl	8007538 <_Balloc>
 8009522:	4681      	mov	r9, r0
 8009524:	b918      	cbnz	r0, 800952e <__gethex+0x3ba>
 8009526:	4b1a      	ldr	r3, [pc, #104]	@ (8009590 <__gethex+0x41c>)
 8009528:	4602      	mov	r2, r0
 800952a:	2184      	movs	r1, #132	@ 0x84
 800952c:	e6c5      	b.n	80092ba <__gethex+0x146>
 800952e:	6922      	ldr	r2, [r4, #16]
 8009530:	3202      	adds	r2, #2
 8009532:	f104 010c 	add.w	r1, r4, #12
 8009536:	0092      	lsls	r2, r2, #2
 8009538:	300c      	adds	r0, #12
 800953a:	f7ff fd6b 	bl	8009014 <memcpy>
 800953e:	4621      	mov	r1, r4
 8009540:	9801      	ldr	r0, [sp, #4]
 8009542:	f7fe f839 	bl	80075b8 <_Bfree>
 8009546:	464c      	mov	r4, r9
 8009548:	6923      	ldr	r3, [r4, #16]
 800954a:	1c5a      	adds	r2, r3, #1
 800954c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8009550:	6122      	str	r2, [r4, #16]
 8009552:	2201      	movs	r2, #1
 8009554:	615a      	str	r2, [r3, #20]
 8009556:	e7be      	b.n	80094d6 <__gethex+0x362>
 8009558:	6922      	ldr	r2, [r4, #16]
 800955a:	455a      	cmp	r2, fp
 800955c:	dd0b      	ble.n	8009576 <__gethex+0x402>
 800955e:	2101      	movs	r1, #1
 8009560:	4620      	mov	r0, r4
 8009562:	f7ff fd9f 	bl	80090a4 <rshift>
 8009566:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800956a:	3701      	adds	r7, #1
 800956c:	42bb      	cmp	r3, r7
 800956e:	f6ff aee0 	blt.w	8009332 <__gethex+0x1be>
 8009572:	2501      	movs	r5, #1
 8009574:	e7c2      	b.n	80094fc <__gethex+0x388>
 8009576:	f016 061f 	ands.w	r6, r6, #31
 800957a:	d0fa      	beq.n	8009572 <__gethex+0x3fe>
 800957c:	4453      	add	r3, sl
 800957e:	f1c6 0620 	rsb	r6, r6, #32
 8009582:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8009586:	f7fe f8c9 	bl	800771c <__hi0bits>
 800958a:	42b0      	cmp	r0, r6
 800958c:	dbe7      	blt.n	800955e <__gethex+0x3ea>
 800958e:	e7f0      	b.n	8009572 <__gethex+0x3fe>
 8009590:	0800dcc5 	.word	0x0800dcc5

08009594 <L_shift>:
 8009594:	f1c2 0208 	rsb	r2, r2, #8
 8009598:	0092      	lsls	r2, r2, #2
 800959a:	b570      	push	{r4, r5, r6, lr}
 800959c:	f1c2 0620 	rsb	r6, r2, #32
 80095a0:	6843      	ldr	r3, [r0, #4]
 80095a2:	6804      	ldr	r4, [r0, #0]
 80095a4:	fa03 f506 	lsl.w	r5, r3, r6
 80095a8:	432c      	orrs	r4, r5
 80095aa:	40d3      	lsrs	r3, r2
 80095ac:	6004      	str	r4, [r0, #0]
 80095ae:	f840 3f04 	str.w	r3, [r0, #4]!
 80095b2:	4288      	cmp	r0, r1
 80095b4:	d3f4      	bcc.n	80095a0 <L_shift+0xc>
 80095b6:	bd70      	pop	{r4, r5, r6, pc}

080095b8 <__match>:
 80095b8:	b530      	push	{r4, r5, lr}
 80095ba:	6803      	ldr	r3, [r0, #0]
 80095bc:	3301      	adds	r3, #1
 80095be:	f811 4b01 	ldrb.w	r4, [r1], #1
 80095c2:	b914      	cbnz	r4, 80095ca <__match+0x12>
 80095c4:	6003      	str	r3, [r0, #0]
 80095c6:	2001      	movs	r0, #1
 80095c8:	bd30      	pop	{r4, r5, pc}
 80095ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 80095ce:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 80095d2:	2d19      	cmp	r5, #25
 80095d4:	bf98      	it	ls
 80095d6:	3220      	addls	r2, #32
 80095d8:	42a2      	cmp	r2, r4
 80095da:	d0f0      	beq.n	80095be <__match+0x6>
 80095dc:	2000      	movs	r0, #0
 80095de:	e7f3      	b.n	80095c8 <__match+0x10>

080095e0 <__hexnan>:
 80095e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80095e4:	680b      	ldr	r3, [r1, #0]
 80095e6:	6801      	ldr	r1, [r0, #0]
 80095e8:	115e      	asrs	r6, r3, #5
 80095ea:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 80095ee:	f013 031f 	ands.w	r3, r3, #31
 80095f2:	b087      	sub	sp, #28
 80095f4:	bf18      	it	ne
 80095f6:	3604      	addne	r6, #4
 80095f8:	2500      	movs	r5, #0
 80095fa:	1f37      	subs	r7, r6, #4
 80095fc:	4682      	mov	sl, r0
 80095fe:	4690      	mov	r8, r2
 8009600:	9301      	str	r3, [sp, #4]
 8009602:	f846 5c04 	str.w	r5, [r6, #-4]
 8009606:	46b9      	mov	r9, r7
 8009608:	463c      	mov	r4, r7
 800960a:	9502      	str	r5, [sp, #8]
 800960c:	46ab      	mov	fp, r5
 800960e:	784a      	ldrb	r2, [r1, #1]
 8009610:	1c4b      	adds	r3, r1, #1
 8009612:	9303      	str	r3, [sp, #12]
 8009614:	b342      	cbz	r2, 8009668 <__hexnan+0x88>
 8009616:	4610      	mov	r0, r2
 8009618:	9105      	str	r1, [sp, #20]
 800961a:	9204      	str	r2, [sp, #16]
 800961c:	f7ff fd94 	bl	8009148 <__hexdig_fun>
 8009620:	2800      	cmp	r0, #0
 8009622:	d151      	bne.n	80096c8 <__hexnan+0xe8>
 8009624:	9a04      	ldr	r2, [sp, #16]
 8009626:	9905      	ldr	r1, [sp, #20]
 8009628:	2a20      	cmp	r2, #32
 800962a:	d818      	bhi.n	800965e <__hexnan+0x7e>
 800962c:	9b02      	ldr	r3, [sp, #8]
 800962e:	459b      	cmp	fp, r3
 8009630:	dd13      	ble.n	800965a <__hexnan+0x7a>
 8009632:	454c      	cmp	r4, r9
 8009634:	d206      	bcs.n	8009644 <__hexnan+0x64>
 8009636:	2d07      	cmp	r5, #7
 8009638:	dc04      	bgt.n	8009644 <__hexnan+0x64>
 800963a:	462a      	mov	r2, r5
 800963c:	4649      	mov	r1, r9
 800963e:	4620      	mov	r0, r4
 8009640:	f7ff ffa8 	bl	8009594 <L_shift>
 8009644:	4544      	cmp	r4, r8
 8009646:	d952      	bls.n	80096ee <__hexnan+0x10e>
 8009648:	2300      	movs	r3, #0
 800964a:	f1a4 0904 	sub.w	r9, r4, #4
 800964e:	f844 3c04 	str.w	r3, [r4, #-4]
 8009652:	f8cd b008 	str.w	fp, [sp, #8]
 8009656:	464c      	mov	r4, r9
 8009658:	461d      	mov	r5, r3
 800965a:	9903      	ldr	r1, [sp, #12]
 800965c:	e7d7      	b.n	800960e <__hexnan+0x2e>
 800965e:	2a29      	cmp	r2, #41	@ 0x29
 8009660:	d157      	bne.n	8009712 <__hexnan+0x132>
 8009662:	3102      	adds	r1, #2
 8009664:	f8ca 1000 	str.w	r1, [sl]
 8009668:	f1bb 0f00 	cmp.w	fp, #0
 800966c:	d051      	beq.n	8009712 <__hexnan+0x132>
 800966e:	454c      	cmp	r4, r9
 8009670:	d206      	bcs.n	8009680 <__hexnan+0xa0>
 8009672:	2d07      	cmp	r5, #7
 8009674:	dc04      	bgt.n	8009680 <__hexnan+0xa0>
 8009676:	462a      	mov	r2, r5
 8009678:	4649      	mov	r1, r9
 800967a:	4620      	mov	r0, r4
 800967c:	f7ff ff8a 	bl	8009594 <L_shift>
 8009680:	4544      	cmp	r4, r8
 8009682:	d936      	bls.n	80096f2 <__hexnan+0x112>
 8009684:	f1a8 0204 	sub.w	r2, r8, #4
 8009688:	4623      	mov	r3, r4
 800968a:	f853 1b04 	ldr.w	r1, [r3], #4
 800968e:	f842 1f04 	str.w	r1, [r2, #4]!
 8009692:	429f      	cmp	r7, r3
 8009694:	d2f9      	bcs.n	800968a <__hexnan+0xaa>
 8009696:	1b3b      	subs	r3, r7, r4
 8009698:	f023 0303 	bic.w	r3, r3, #3
 800969c:	3304      	adds	r3, #4
 800969e:	3401      	adds	r4, #1
 80096a0:	3e03      	subs	r6, #3
 80096a2:	42b4      	cmp	r4, r6
 80096a4:	bf88      	it	hi
 80096a6:	2304      	movhi	r3, #4
 80096a8:	4443      	add	r3, r8
 80096aa:	2200      	movs	r2, #0
 80096ac:	f843 2b04 	str.w	r2, [r3], #4
 80096b0:	429f      	cmp	r7, r3
 80096b2:	d2fb      	bcs.n	80096ac <__hexnan+0xcc>
 80096b4:	683b      	ldr	r3, [r7, #0]
 80096b6:	b91b      	cbnz	r3, 80096c0 <__hexnan+0xe0>
 80096b8:	4547      	cmp	r7, r8
 80096ba:	d128      	bne.n	800970e <__hexnan+0x12e>
 80096bc:	2301      	movs	r3, #1
 80096be:	603b      	str	r3, [r7, #0]
 80096c0:	2005      	movs	r0, #5
 80096c2:	b007      	add	sp, #28
 80096c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80096c8:	3501      	adds	r5, #1
 80096ca:	2d08      	cmp	r5, #8
 80096cc:	f10b 0b01 	add.w	fp, fp, #1
 80096d0:	dd06      	ble.n	80096e0 <__hexnan+0x100>
 80096d2:	4544      	cmp	r4, r8
 80096d4:	d9c1      	bls.n	800965a <__hexnan+0x7a>
 80096d6:	2300      	movs	r3, #0
 80096d8:	f844 3c04 	str.w	r3, [r4, #-4]
 80096dc:	2501      	movs	r5, #1
 80096de:	3c04      	subs	r4, #4
 80096e0:	6822      	ldr	r2, [r4, #0]
 80096e2:	f000 000f 	and.w	r0, r0, #15
 80096e6:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 80096ea:	6020      	str	r0, [r4, #0]
 80096ec:	e7b5      	b.n	800965a <__hexnan+0x7a>
 80096ee:	2508      	movs	r5, #8
 80096f0:	e7b3      	b.n	800965a <__hexnan+0x7a>
 80096f2:	9b01      	ldr	r3, [sp, #4]
 80096f4:	2b00      	cmp	r3, #0
 80096f6:	d0dd      	beq.n	80096b4 <__hexnan+0xd4>
 80096f8:	f1c3 0320 	rsb	r3, r3, #32
 80096fc:	f04f 32ff 	mov.w	r2, #4294967295
 8009700:	40da      	lsrs	r2, r3
 8009702:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8009706:	4013      	ands	r3, r2
 8009708:	f846 3c04 	str.w	r3, [r6, #-4]
 800970c:	e7d2      	b.n	80096b4 <__hexnan+0xd4>
 800970e:	3f04      	subs	r7, #4
 8009710:	e7d0      	b.n	80096b4 <__hexnan+0xd4>
 8009712:	2004      	movs	r0, #4
 8009714:	e7d5      	b.n	80096c2 <__hexnan+0xe2>

08009716 <__ascii_mbtowc>:
 8009716:	b082      	sub	sp, #8
 8009718:	b901      	cbnz	r1, 800971c <__ascii_mbtowc+0x6>
 800971a:	a901      	add	r1, sp, #4
 800971c:	b142      	cbz	r2, 8009730 <__ascii_mbtowc+0x1a>
 800971e:	b14b      	cbz	r3, 8009734 <__ascii_mbtowc+0x1e>
 8009720:	7813      	ldrb	r3, [r2, #0]
 8009722:	600b      	str	r3, [r1, #0]
 8009724:	7812      	ldrb	r2, [r2, #0]
 8009726:	1e10      	subs	r0, r2, #0
 8009728:	bf18      	it	ne
 800972a:	2001      	movne	r0, #1
 800972c:	b002      	add	sp, #8
 800972e:	4770      	bx	lr
 8009730:	4610      	mov	r0, r2
 8009732:	e7fb      	b.n	800972c <__ascii_mbtowc+0x16>
 8009734:	f06f 0001 	mvn.w	r0, #1
 8009738:	e7f8      	b.n	800972c <__ascii_mbtowc+0x16>

0800973a <_realloc_r>:
 800973a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800973e:	4607      	mov	r7, r0
 8009740:	4614      	mov	r4, r2
 8009742:	460d      	mov	r5, r1
 8009744:	b921      	cbnz	r1, 8009750 <_realloc_r+0x16>
 8009746:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800974a:	4611      	mov	r1, r2
 800974c:	f7fd be68 	b.w	8007420 <_malloc_r>
 8009750:	b92a      	cbnz	r2, 800975e <_realloc_r+0x24>
 8009752:	f7fd fdf1 	bl	8007338 <_free_r>
 8009756:	4625      	mov	r5, r4
 8009758:	4628      	mov	r0, r5
 800975a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800975e:	f000 f840 	bl	80097e2 <_malloc_usable_size_r>
 8009762:	4284      	cmp	r4, r0
 8009764:	4606      	mov	r6, r0
 8009766:	d802      	bhi.n	800976e <_realloc_r+0x34>
 8009768:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800976c:	d8f4      	bhi.n	8009758 <_realloc_r+0x1e>
 800976e:	4621      	mov	r1, r4
 8009770:	4638      	mov	r0, r7
 8009772:	f7fd fe55 	bl	8007420 <_malloc_r>
 8009776:	4680      	mov	r8, r0
 8009778:	b908      	cbnz	r0, 800977e <_realloc_r+0x44>
 800977a:	4645      	mov	r5, r8
 800977c:	e7ec      	b.n	8009758 <_realloc_r+0x1e>
 800977e:	42b4      	cmp	r4, r6
 8009780:	4622      	mov	r2, r4
 8009782:	4629      	mov	r1, r5
 8009784:	bf28      	it	cs
 8009786:	4632      	movcs	r2, r6
 8009788:	f7ff fc44 	bl	8009014 <memcpy>
 800978c:	4629      	mov	r1, r5
 800978e:	4638      	mov	r0, r7
 8009790:	f7fd fdd2 	bl	8007338 <_free_r>
 8009794:	e7f1      	b.n	800977a <_realloc_r+0x40>

08009796 <__ascii_wctomb>:
 8009796:	4603      	mov	r3, r0
 8009798:	4608      	mov	r0, r1
 800979a:	b141      	cbz	r1, 80097ae <__ascii_wctomb+0x18>
 800979c:	2aff      	cmp	r2, #255	@ 0xff
 800979e:	d904      	bls.n	80097aa <__ascii_wctomb+0x14>
 80097a0:	228a      	movs	r2, #138	@ 0x8a
 80097a2:	601a      	str	r2, [r3, #0]
 80097a4:	f04f 30ff 	mov.w	r0, #4294967295
 80097a8:	4770      	bx	lr
 80097aa:	700a      	strb	r2, [r1, #0]
 80097ac:	2001      	movs	r0, #1
 80097ae:	4770      	bx	lr

080097b0 <fiprintf>:
 80097b0:	b40e      	push	{r1, r2, r3}
 80097b2:	b503      	push	{r0, r1, lr}
 80097b4:	4601      	mov	r1, r0
 80097b6:	ab03      	add	r3, sp, #12
 80097b8:	4805      	ldr	r0, [pc, #20]	@ (80097d0 <fiprintf+0x20>)
 80097ba:	f853 2b04 	ldr.w	r2, [r3], #4
 80097be:	6800      	ldr	r0, [r0, #0]
 80097c0:	9301      	str	r3, [sp, #4]
 80097c2:	f000 f83f 	bl	8009844 <_vfiprintf_r>
 80097c6:	b002      	add	sp, #8
 80097c8:	f85d eb04 	ldr.w	lr, [sp], #4
 80097cc:	b003      	add	sp, #12
 80097ce:	4770      	bx	lr
 80097d0:	2000001c 	.word	0x2000001c

080097d4 <abort>:
 80097d4:	b508      	push	{r3, lr}
 80097d6:	2006      	movs	r0, #6
 80097d8:	f000 fa08 	bl	8009bec <raise>
 80097dc:	2001      	movs	r0, #1
 80097de:	f7f8 f983 	bl	8001ae8 <_exit>

080097e2 <_malloc_usable_size_r>:
 80097e2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80097e6:	1f18      	subs	r0, r3, #4
 80097e8:	2b00      	cmp	r3, #0
 80097ea:	bfbc      	itt	lt
 80097ec:	580b      	ldrlt	r3, [r1, r0]
 80097ee:	18c0      	addlt	r0, r0, r3
 80097f0:	4770      	bx	lr

080097f2 <__sfputc_r>:
 80097f2:	6893      	ldr	r3, [r2, #8]
 80097f4:	3b01      	subs	r3, #1
 80097f6:	2b00      	cmp	r3, #0
 80097f8:	b410      	push	{r4}
 80097fa:	6093      	str	r3, [r2, #8]
 80097fc:	da08      	bge.n	8009810 <__sfputc_r+0x1e>
 80097fe:	6994      	ldr	r4, [r2, #24]
 8009800:	42a3      	cmp	r3, r4
 8009802:	db01      	blt.n	8009808 <__sfputc_r+0x16>
 8009804:	290a      	cmp	r1, #10
 8009806:	d103      	bne.n	8009810 <__sfputc_r+0x1e>
 8009808:	f85d 4b04 	ldr.w	r4, [sp], #4
 800980c:	f000 b932 	b.w	8009a74 <__swbuf_r>
 8009810:	6813      	ldr	r3, [r2, #0]
 8009812:	1c58      	adds	r0, r3, #1
 8009814:	6010      	str	r0, [r2, #0]
 8009816:	7019      	strb	r1, [r3, #0]
 8009818:	4608      	mov	r0, r1
 800981a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800981e:	4770      	bx	lr

08009820 <__sfputs_r>:
 8009820:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009822:	4606      	mov	r6, r0
 8009824:	460f      	mov	r7, r1
 8009826:	4614      	mov	r4, r2
 8009828:	18d5      	adds	r5, r2, r3
 800982a:	42ac      	cmp	r4, r5
 800982c:	d101      	bne.n	8009832 <__sfputs_r+0x12>
 800982e:	2000      	movs	r0, #0
 8009830:	e007      	b.n	8009842 <__sfputs_r+0x22>
 8009832:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009836:	463a      	mov	r2, r7
 8009838:	4630      	mov	r0, r6
 800983a:	f7ff ffda 	bl	80097f2 <__sfputc_r>
 800983e:	1c43      	adds	r3, r0, #1
 8009840:	d1f3      	bne.n	800982a <__sfputs_r+0xa>
 8009842:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08009844 <_vfiprintf_r>:
 8009844:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009848:	460d      	mov	r5, r1
 800984a:	b09d      	sub	sp, #116	@ 0x74
 800984c:	4614      	mov	r4, r2
 800984e:	4698      	mov	r8, r3
 8009850:	4606      	mov	r6, r0
 8009852:	b118      	cbz	r0, 800985c <_vfiprintf_r+0x18>
 8009854:	6a03      	ldr	r3, [r0, #32]
 8009856:	b90b      	cbnz	r3, 800985c <_vfiprintf_r+0x18>
 8009858:	f7fc fdf2 	bl	8006440 <__sinit>
 800985c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800985e:	07d9      	lsls	r1, r3, #31
 8009860:	d405      	bmi.n	800986e <_vfiprintf_r+0x2a>
 8009862:	89ab      	ldrh	r3, [r5, #12]
 8009864:	059a      	lsls	r2, r3, #22
 8009866:	d402      	bmi.n	800986e <_vfiprintf_r+0x2a>
 8009868:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800986a:	f7fc ff02 	bl	8006672 <__retarget_lock_acquire_recursive>
 800986e:	89ab      	ldrh	r3, [r5, #12]
 8009870:	071b      	lsls	r3, r3, #28
 8009872:	d501      	bpl.n	8009878 <_vfiprintf_r+0x34>
 8009874:	692b      	ldr	r3, [r5, #16]
 8009876:	b99b      	cbnz	r3, 80098a0 <_vfiprintf_r+0x5c>
 8009878:	4629      	mov	r1, r5
 800987a:	4630      	mov	r0, r6
 800987c:	f000 f938 	bl	8009af0 <__swsetup_r>
 8009880:	b170      	cbz	r0, 80098a0 <_vfiprintf_r+0x5c>
 8009882:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009884:	07dc      	lsls	r4, r3, #31
 8009886:	d504      	bpl.n	8009892 <_vfiprintf_r+0x4e>
 8009888:	f04f 30ff 	mov.w	r0, #4294967295
 800988c:	b01d      	add	sp, #116	@ 0x74
 800988e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009892:	89ab      	ldrh	r3, [r5, #12]
 8009894:	0598      	lsls	r0, r3, #22
 8009896:	d4f7      	bmi.n	8009888 <_vfiprintf_r+0x44>
 8009898:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800989a:	f7fc feeb 	bl	8006674 <__retarget_lock_release_recursive>
 800989e:	e7f3      	b.n	8009888 <_vfiprintf_r+0x44>
 80098a0:	2300      	movs	r3, #0
 80098a2:	9309      	str	r3, [sp, #36]	@ 0x24
 80098a4:	2320      	movs	r3, #32
 80098a6:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80098aa:	f8cd 800c 	str.w	r8, [sp, #12]
 80098ae:	2330      	movs	r3, #48	@ 0x30
 80098b0:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8009a60 <_vfiprintf_r+0x21c>
 80098b4:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80098b8:	f04f 0901 	mov.w	r9, #1
 80098bc:	4623      	mov	r3, r4
 80098be:	469a      	mov	sl, r3
 80098c0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80098c4:	b10a      	cbz	r2, 80098ca <_vfiprintf_r+0x86>
 80098c6:	2a25      	cmp	r2, #37	@ 0x25
 80098c8:	d1f9      	bne.n	80098be <_vfiprintf_r+0x7a>
 80098ca:	ebba 0b04 	subs.w	fp, sl, r4
 80098ce:	d00b      	beq.n	80098e8 <_vfiprintf_r+0xa4>
 80098d0:	465b      	mov	r3, fp
 80098d2:	4622      	mov	r2, r4
 80098d4:	4629      	mov	r1, r5
 80098d6:	4630      	mov	r0, r6
 80098d8:	f7ff ffa2 	bl	8009820 <__sfputs_r>
 80098dc:	3001      	adds	r0, #1
 80098de:	f000 80a7 	beq.w	8009a30 <_vfiprintf_r+0x1ec>
 80098e2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80098e4:	445a      	add	r2, fp
 80098e6:	9209      	str	r2, [sp, #36]	@ 0x24
 80098e8:	f89a 3000 	ldrb.w	r3, [sl]
 80098ec:	2b00      	cmp	r3, #0
 80098ee:	f000 809f 	beq.w	8009a30 <_vfiprintf_r+0x1ec>
 80098f2:	2300      	movs	r3, #0
 80098f4:	f04f 32ff 	mov.w	r2, #4294967295
 80098f8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80098fc:	f10a 0a01 	add.w	sl, sl, #1
 8009900:	9304      	str	r3, [sp, #16]
 8009902:	9307      	str	r3, [sp, #28]
 8009904:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8009908:	931a      	str	r3, [sp, #104]	@ 0x68
 800990a:	4654      	mov	r4, sl
 800990c:	2205      	movs	r2, #5
 800990e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009912:	4853      	ldr	r0, [pc, #332]	@ (8009a60 <_vfiprintf_r+0x21c>)
 8009914:	f7f6 fcbc 	bl	8000290 <memchr>
 8009918:	9a04      	ldr	r2, [sp, #16]
 800991a:	b9d8      	cbnz	r0, 8009954 <_vfiprintf_r+0x110>
 800991c:	06d1      	lsls	r1, r2, #27
 800991e:	bf44      	itt	mi
 8009920:	2320      	movmi	r3, #32
 8009922:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009926:	0713      	lsls	r3, r2, #28
 8009928:	bf44      	itt	mi
 800992a:	232b      	movmi	r3, #43	@ 0x2b
 800992c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009930:	f89a 3000 	ldrb.w	r3, [sl]
 8009934:	2b2a      	cmp	r3, #42	@ 0x2a
 8009936:	d015      	beq.n	8009964 <_vfiprintf_r+0x120>
 8009938:	9a07      	ldr	r2, [sp, #28]
 800993a:	4654      	mov	r4, sl
 800993c:	2000      	movs	r0, #0
 800993e:	f04f 0c0a 	mov.w	ip, #10
 8009942:	4621      	mov	r1, r4
 8009944:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009948:	3b30      	subs	r3, #48	@ 0x30
 800994a:	2b09      	cmp	r3, #9
 800994c:	d94b      	bls.n	80099e6 <_vfiprintf_r+0x1a2>
 800994e:	b1b0      	cbz	r0, 800997e <_vfiprintf_r+0x13a>
 8009950:	9207      	str	r2, [sp, #28]
 8009952:	e014      	b.n	800997e <_vfiprintf_r+0x13a>
 8009954:	eba0 0308 	sub.w	r3, r0, r8
 8009958:	fa09 f303 	lsl.w	r3, r9, r3
 800995c:	4313      	orrs	r3, r2
 800995e:	9304      	str	r3, [sp, #16]
 8009960:	46a2      	mov	sl, r4
 8009962:	e7d2      	b.n	800990a <_vfiprintf_r+0xc6>
 8009964:	9b03      	ldr	r3, [sp, #12]
 8009966:	1d19      	adds	r1, r3, #4
 8009968:	681b      	ldr	r3, [r3, #0]
 800996a:	9103      	str	r1, [sp, #12]
 800996c:	2b00      	cmp	r3, #0
 800996e:	bfbb      	ittet	lt
 8009970:	425b      	neglt	r3, r3
 8009972:	f042 0202 	orrlt.w	r2, r2, #2
 8009976:	9307      	strge	r3, [sp, #28]
 8009978:	9307      	strlt	r3, [sp, #28]
 800997a:	bfb8      	it	lt
 800997c:	9204      	strlt	r2, [sp, #16]
 800997e:	7823      	ldrb	r3, [r4, #0]
 8009980:	2b2e      	cmp	r3, #46	@ 0x2e
 8009982:	d10a      	bne.n	800999a <_vfiprintf_r+0x156>
 8009984:	7863      	ldrb	r3, [r4, #1]
 8009986:	2b2a      	cmp	r3, #42	@ 0x2a
 8009988:	d132      	bne.n	80099f0 <_vfiprintf_r+0x1ac>
 800998a:	9b03      	ldr	r3, [sp, #12]
 800998c:	1d1a      	adds	r2, r3, #4
 800998e:	681b      	ldr	r3, [r3, #0]
 8009990:	9203      	str	r2, [sp, #12]
 8009992:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8009996:	3402      	adds	r4, #2
 8009998:	9305      	str	r3, [sp, #20]
 800999a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8009a70 <_vfiprintf_r+0x22c>
 800999e:	7821      	ldrb	r1, [r4, #0]
 80099a0:	2203      	movs	r2, #3
 80099a2:	4650      	mov	r0, sl
 80099a4:	f7f6 fc74 	bl	8000290 <memchr>
 80099a8:	b138      	cbz	r0, 80099ba <_vfiprintf_r+0x176>
 80099aa:	9b04      	ldr	r3, [sp, #16]
 80099ac:	eba0 000a 	sub.w	r0, r0, sl
 80099b0:	2240      	movs	r2, #64	@ 0x40
 80099b2:	4082      	lsls	r2, r0
 80099b4:	4313      	orrs	r3, r2
 80099b6:	3401      	adds	r4, #1
 80099b8:	9304      	str	r3, [sp, #16]
 80099ba:	f814 1b01 	ldrb.w	r1, [r4], #1
 80099be:	4829      	ldr	r0, [pc, #164]	@ (8009a64 <_vfiprintf_r+0x220>)
 80099c0:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80099c4:	2206      	movs	r2, #6
 80099c6:	f7f6 fc63 	bl	8000290 <memchr>
 80099ca:	2800      	cmp	r0, #0
 80099cc:	d03f      	beq.n	8009a4e <_vfiprintf_r+0x20a>
 80099ce:	4b26      	ldr	r3, [pc, #152]	@ (8009a68 <_vfiprintf_r+0x224>)
 80099d0:	bb1b      	cbnz	r3, 8009a1a <_vfiprintf_r+0x1d6>
 80099d2:	9b03      	ldr	r3, [sp, #12]
 80099d4:	3307      	adds	r3, #7
 80099d6:	f023 0307 	bic.w	r3, r3, #7
 80099da:	3308      	adds	r3, #8
 80099dc:	9303      	str	r3, [sp, #12]
 80099de:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80099e0:	443b      	add	r3, r7
 80099e2:	9309      	str	r3, [sp, #36]	@ 0x24
 80099e4:	e76a      	b.n	80098bc <_vfiprintf_r+0x78>
 80099e6:	fb0c 3202 	mla	r2, ip, r2, r3
 80099ea:	460c      	mov	r4, r1
 80099ec:	2001      	movs	r0, #1
 80099ee:	e7a8      	b.n	8009942 <_vfiprintf_r+0xfe>
 80099f0:	2300      	movs	r3, #0
 80099f2:	3401      	adds	r4, #1
 80099f4:	9305      	str	r3, [sp, #20]
 80099f6:	4619      	mov	r1, r3
 80099f8:	f04f 0c0a 	mov.w	ip, #10
 80099fc:	4620      	mov	r0, r4
 80099fe:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009a02:	3a30      	subs	r2, #48	@ 0x30
 8009a04:	2a09      	cmp	r2, #9
 8009a06:	d903      	bls.n	8009a10 <_vfiprintf_r+0x1cc>
 8009a08:	2b00      	cmp	r3, #0
 8009a0a:	d0c6      	beq.n	800999a <_vfiprintf_r+0x156>
 8009a0c:	9105      	str	r1, [sp, #20]
 8009a0e:	e7c4      	b.n	800999a <_vfiprintf_r+0x156>
 8009a10:	fb0c 2101 	mla	r1, ip, r1, r2
 8009a14:	4604      	mov	r4, r0
 8009a16:	2301      	movs	r3, #1
 8009a18:	e7f0      	b.n	80099fc <_vfiprintf_r+0x1b8>
 8009a1a:	ab03      	add	r3, sp, #12
 8009a1c:	9300      	str	r3, [sp, #0]
 8009a1e:	462a      	mov	r2, r5
 8009a20:	4b12      	ldr	r3, [pc, #72]	@ (8009a6c <_vfiprintf_r+0x228>)
 8009a22:	a904      	add	r1, sp, #16
 8009a24:	4630      	mov	r0, r6
 8009a26:	f7fb febb 	bl	80057a0 <_printf_float>
 8009a2a:	4607      	mov	r7, r0
 8009a2c:	1c78      	adds	r0, r7, #1
 8009a2e:	d1d6      	bne.n	80099de <_vfiprintf_r+0x19a>
 8009a30:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009a32:	07d9      	lsls	r1, r3, #31
 8009a34:	d405      	bmi.n	8009a42 <_vfiprintf_r+0x1fe>
 8009a36:	89ab      	ldrh	r3, [r5, #12]
 8009a38:	059a      	lsls	r2, r3, #22
 8009a3a:	d402      	bmi.n	8009a42 <_vfiprintf_r+0x1fe>
 8009a3c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009a3e:	f7fc fe19 	bl	8006674 <__retarget_lock_release_recursive>
 8009a42:	89ab      	ldrh	r3, [r5, #12]
 8009a44:	065b      	lsls	r3, r3, #25
 8009a46:	f53f af1f 	bmi.w	8009888 <_vfiprintf_r+0x44>
 8009a4a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009a4c:	e71e      	b.n	800988c <_vfiprintf_r+0x48>
 8009a4e:	ab03      	add	r3, sp, #12
 8009a50:	9300      	str	r3, [sp, #0]
 8009a52:	462a      	mov	r2, r5
 8009a54:	4b05      	ldr	r3, [pc, #20]	@ (8009a6c <_vfiprintf_r+0x228>)
 8009a56:	a904      	add	r1, sp, #16
 8009a58:	4630      	mov	r0, r6
 8009a5a:	f7fc f939 	bl	8005cd0 <_printf_i>
 8009a5e:	e7e4      	b.n	8009a2a <_vfiprintf_r+0x1e6>
 8009a60:	0800dd31 	.word	0x0800dd31
 8009a64:	0800dd3b 	.word	0x0800dd3b
 8009a68:	080057a1 	.word	0x080057a1
 8009a6c:	08009821 	.word	0x08009821
 8009a70:	0800dd37 	.word	0x0800dd37

08009a74 <__swbuf_r>:
 8009a74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009a76:	460e      	mov	r6, r1
 8009a78:	4614      	mov	r4, r2
 8009a7a:	4605      	mov	r5, r0
 8009a7c:	b118      	cbz	r0, 8009a86 <__swbuf_r+0x12>
 8009a7e:	6a03      	ldr	r3, [r0, #32]
 8009a80:	b90b      	cbnz	r3, 8009a86 <__swbuf_r+0x12>
 8009a82:	f7fc fcdd 	bl	8006440 <__sinit>
 8009a86:	69a3      	ldr	r3, [r4, #24]
 8009a88:	60a3      	str	r3, [r4, #8]
 8009a8a:	89a3      	ldrh	r3, [r4, #12]
 8009a8c:	071a      	lsls	r2, r3, #28
 8009a8e:	d501      	bpl.n	8009a94 <__swbuf_r+0x20>
 8009a90:	6923      	ldr	r3, [r4, #16]
 8009a92:	b943      	cbnz	r3, 8009aa6 <__swbuf_r+0x32>
 8009a94:	4621      	mov	r1, r4
 8009a96:	4628      	mov	r0, r5
 8009a98:	f000 f82a 	bl	8009af0 <__swsetup_r>
 8009a9c:	b118      	cbz	r0, 8009aa6 <__swbuf_r+0x32>
 8009a9e:	f04f 37ff 	mov.w	r7, #4294967295
 8009aa2:	4638      	mov	r0, r7
 8009aa4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009aa6:	6823      	ldr	r3, [r4, #0]
 8009aa8:	6922      	ldr	r2, [r4, #16]
 8009aaa:	1a98      	subs	r0, r3, r2
 8009aac:	6963      	ldr	r3, [r4, #20]
 8009aae:	b2f6      	uxtb	r6, r6
 8009ab0:	4283      	cmp	r3, r0
 8009ab2:	4637      	mov	r7, r6
 8009ab4:	dc05      	bgt.n	8009ac2 <__swbuf_r+0x4e>
 8009ab6:	4621      	mov	r1, r4
 8009ab8:	4628      	mov	r0, r5
 8009aba:	f7ff fa47 	bl	8008f4c <_fflush_r>
 8009abe:	2800      	cmp	r0, #0
 8009ac0:	d1ed      	bne.n	8009a9e <__swbuf_r+0x2a>
 8009ac2:	68a3      	ldr	r3, [r4, #8]
 8009ac4:	3b01      	subs	r3, #1
 8009ac6:	60a3      	str	r3, [r4, #8]
 8009ac8:	6823      	ldr	r3, [r4, #0]
 8009aca:	1c5a      	adds	r2, r3, #1
 8009acc:	6022      	str	r2, [r4, #0]
 8009ace:	701e      	strb	r6, [r3, #0]
 8009ad0:	6962      	ldr	r2, [r4, #20]
 8009ad2:	1c43      	adds	r3, r0, #1
 8009ad4:	429a      	cmp	r2, r3
 8009ad6:	d004      	beq.n	8009ae2 <__swbuf_r+0x6e>
 8009ad8:	89a3      	ldrh	r3, [r4, #12]
 8009ada:	07db      	lsls	r3, r3, #31
 8009adc:	d5e1      	bpl.n	8009aa2 <__swbuf_r+0x2e>
 8009ade:	2e0a      	cmp	r6, #10
 8009ae0:	d1df      	bne.n	8009aa2 <__swbuf_r+0x2e>
 8009ae2:	4621      	mov	r1, r4
 8009ae4:	4628      	mov	r0, r5
 8009ae6:	f7ff fa31 	bl	8008f4c <_fflush_r>
 8009aea:	2800      	cmp	r0, #0
 8009aec:	d0d9      	beq.n	8009aa2 <__swbuf_r+0x2e>
 8009aee:	e7d6      	b.n	8009a9e <__swbuf_r+0x2a>

08009af0 <__swsetup_r>:
 8009af0:	b538      	push	{r3, r4, r5, lr}
 8009af2:	4b29      	ldr	r3, [pc, #164]	@ (8009b98 <__swsetup_r+0xa8>)
 8009af4:	4605      	mov	r5, r0
 8009af6:	6818      	ldr	r0, [r3, #0]
 8009af8:	460c      	mov	r4, r1
 8009afa:	b118      	cbz	r0, 8009b04 <__swsetup_r+0x14>
 8009afc:	6a03      	ldr	r3, [r0, #32]
 8009afe:	b90b      	cbnz	r3, 8009b04 <__swsetup_r+0x14>
 8009b00:	f7fc fc9e 	bl	8006440 <__sinit>
 8009b04:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009b08:	0719      	lsls	r1, r3, #28
 8009b0a:	d422      	bmi.n	8009b52 <__swsetup_r+0x62>
 8009b0c:	06da      	lsls	r2, r3, #27
 8009b0e:	d407      	bmi.n	8009b20 <__swsetup_r+0x30>
 8009b10:	2209      	movs	r2, #9
 8009b12:	602a      	str	r2, [r5, #0]
 8009b14:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009b18:	81a3      	strh	r3, [r4, #12]
 8009b1a:	f04f 30ff 	mov.w	r0, #4294967295
 8009b1e:	e033      	b.n	8009b88 <__swsetup_r+0x98>
 8009b20:	0758      	lsls	r0, r3, #29
 8009b22:	d512      	bpl.n	8009b4a <__swsetup_r+0x5a>
 8009b24:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8009b26:	b141      	cbz	r1, 8009b3a <__swsetup_r+0x4a>
 8009b28:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009b2c:	4299      	cmp	r1, r3
 8009b2e:	d002      	beq.n	8009b36 <__swsetup_r+0x46>
 8009b30:	4628      	mov	r0, r5
 8009b32:	f7fd fc01 	bl	8007338 <_free_r>
 8009b36:	2300      	movs	r3, #0
 8009b38:	6363      	str	r3, [r4, #52]	@ 0x34
 8009b3a:	89a3      	ldrh	r3, [r4, #12]
 8009b3c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8009b40:	81a3      	strh	r3, [r4, #12]
 8009b42:	2300      	movs	r3, #0
 8009b44:	6063      	str	r3, [r4, #4]
 8009b46:	6923      	ldr	r3, [r4, #16]
 8009b48:	6023      	str	r3, [r4, #0]
 8009b4a:	89a3      	ldrh	r3, [r4, #12]
 8009b4c:	f043 0308 	orr.w	r3, r3, #8
 8009b50:	81a3      	strh	r3, [r4, #12]
 8009b52:	6923      	ldr	r3, [r4, #16]
 8009b54:	b94b      	cbnz	r3, 8009b6a <__swsetup_r+0x7a>
 8009b56:	89a3      	ldrh	r3, [r4, #12]
 8009b58:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8009b5c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009b60:	d003      	beq.n	8009b6a <__swsetup_r+0x7a>
 8009b62:	4621      	mov	r1, r4
 8009b64:	4628      	mov	r0, r5
 8009b66:	f000 f883 	bl	8009c70 <__smakebuf_r>
 8009b6a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009b6e:	f013 0201 	ands.w	r2, r3, #1
 8009b72:	d00a      	beq.n	8009b8a <__swsetup_r+0x9a>
 8009b74:	2200      	movs	r2, #0
 8009b76:	60a2      	str	r2, [r4, #8]
 8009b78:	6962      	ldr	r2, [r4, #20]
 8009b7a:	4252      	negs	r2, r2
 8009b7c:	61a2      	str	r2, [r4, #24]
 8009b7e:	6922      	ldr	r2, [r4, #16]
 8009b80:	b942      	cbnz	r2, 8009b94 <__swsetup_r+0xa4>
 8009b82:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8009b86:	d1c5      	bne.n	8009b14 <__swsetup_r+0x24>
 8009b88:	bd38      	pop	{r3, r4, r5, pc}
 8009b8a:	0799      	lsls	r1, r3, #30
 8009b8c:	bf58      	it	pl
 8009b8e:	6962      	ldrpl	r2, [r4, #20]
 8009b90:	60a2      	str	r2, [r4, #8]
 8009b92:	e7f4      	b.n	8009b7e <__swsetup_r+0x8e>
 8009b94:	2000      	movs	r0, #0
 8009b96:	e7f7      	b.n	8009b88 <__swsetup_r+0x98>
 8009b98:	2000001c 	.word	0x2000001c

08009b9c <_raise_r>:
 8009b9c:	291f      	cmp	r1, #31
 8009b9e:	b538      	push	{r3, r4, r5, lr}
 8009ba0:	4605      	mov	r5, r0
 8009ba2:	460c      	mov	r4, r1
 8009ba4:	d904      	bls.n	8009bb0 <_raise_r+0x14>
 8009ba6:	2316      	movs	r3, #22
 8009ba8:	6003      	str	r3, [r0, #0]
 8009baa:	f04f 30ff 	mov.w	r0, #4294967295
 8009bae:	bd38      	pop	{r3, r4, r5, pc}
 8009bb0:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8009bb2:	b112      	cbz	r2, 8009bba <_raise_r+0x1e>
 8009bb4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009bb8:	b94b      	cbnz	r3, 8009bce <_raise_r+0x32>
 8009bba:	4628      	mov	r0, r5
 8009bbc:	f000 f830 	bl	8009c20 <_getpid_r>
 8009bc0:	4622      	mov	r2, r4
 8009bc2:	4601      	mov	r1, r0
 8009bc4:	4628      	mov	r0, r5
 8009bc6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009bca:	f000 b817 	b.w	8009bfc <_kill_r>
 8009bce:	2b01      	cmp	r3, #1
 8009bd0:	d00a      	beq.n	8009be8 <_raise_r+0x4c>
 8009bd2:	1c59      	adds	r1, r3, #1
 8009bd4:	d103      	bne.n	8009bde <_raise_r+0x42>
 8009bd6:	2316      	movs	r3, #22
 8009bd8:	6003      	str	r3, [r0, #0]
 8009bda:	2001      	movs	r0, #1
 8009bdc:	e7e7      	b.n	8009bae <_raise_r+0x12>
 8009bde:	2100      	movs	r1, #0
 8009be0:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8009be4:	4620      	mov	r0, r4
 8009be6:	4798      	blx	r3
 8009be8:	2000      	movs	r0, #0
 8009bea:	e7e0      	b.n	8009bae <_raise_r+0x12>

08009bec <raise>:
 8009bec:	4b02      	ldr	r3, [pc, #8]	@ (8009bf8 <raise+0xc>)
 8009bee:	4601      	mov	r1, r0
 8009bf0:	6818      	ldr	r0, [r3, #0]
 8009bf2:	f7ff bfd3 	b.w	8009b9c <_raise_r>
 8009bf6:	bf00      	nop
 8009bf8:	2000001c 	.word	0x2000001c

08009bfc <_kill_r>:
 8009bfc:	b538      	push	{r3, r4, r5, lr}
 8009bfe:	4d07      	ldr	r5, [pc, #28]	@ (8009c1c <_kill_r+0x20>)
 8009c00:	2300      	movs	r3, #0
 8009c02:	4604      	mov	r4, r0
 8009c04:	4608      	mov	r0, r1
 8009c06:	4611      	mov	r1, r2
 8009c08:	602b      	str	r3, [r5, #0]
 8009c0a:	f7f7 ff5d 	bl	8001ac8 <_kill>
 8009c0e:	1c43      	adds	r3, r0, #1
 8009c10:	d102      	bne.n	8009c18 <_kill_r+0x1c>
 8009c12:	682b      	ldr	r3, [r5, #0]
 8009c14:	b103      	cbz	r3, 8009c18 <_kill_r+0x1c>
 8009c16:	6023      	str	r3, [r4, #0]
 8009c18:	bd38      	pop	{r3, r4, r5, pc}
 8009c1a:	bf00      	nop
 8009c1c:	2001d334 	.word	0x2001d334

08009c20 <_getpid_r>:
 8009c20:	f7f7 bf4a 	b.w	8001ab8 <_getpid>

08009c24 <__swhatbuf_r>:
 8009c24:	b570      	push	{r4, r5, r6, lr}
 8009c26:	460c      	mov	r4, r1
 8009c28:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009c2c:	2900      	cmp	r1, #0
 8009c2e:	b096      	sub	sp, #88	@ 0x58
 8009c30:	4615      	mov	r5, r2
 8009c32:	461e      	mov	r6, r3
 8009c34:	da0d      	bge.n	8009c52 <__swhatbuf_r+0x2e>
 8009c36:	89a3      	ldrh	r3, [r4, #12]
 8009c38:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8009c3c:	f04f 0100 	mov.w	r1, #0
 8009c40:	bf14      	ite	ne
 8009c42:	2340      	movne	r3, #64	@ 0x40
 8009c44:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8009c48:	2000      	movs	r0, #0
 8009c4a:	6031      	str	r1, [r6, #0]
 8009c4c:	602b      	str	r3, [r5, #0]
 8009c4e:	b016      	add	sp, #88	@ 0x58
 8009c50:	bd70      	pop	{r4, r5, r6, pc}
 8009c52:	466a      	mov	r2, sp
 8009c54:	f000 f848 	bl	8009ce8 <_fstat_r>
 8009c58:	2800      	cmp	r0, #0
 8009c5a:	dbec      	blt.n	8009c36 <__swhatbuf_r+0x12>
 8009c5c:	9901      	ldr	r1, [sp, #4]
 8009c5e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8009c62:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8009c66:	4259      	negs	r1, r3
 8009c68:	4159      	adcs	r1, r3
 8009c6a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009c6e:	e7eb      	b.n	8009c48 <__swhatbuf_r+0x24>

08009c70 <__smakebuf_r>:
 8009c70:	898b      	ldrh	r3, [r1, #12]
 8009c72:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009c74:	079d      	lsls	r5, r3, #30
 8009c76:	4606      	mov	r6, r0
 8009c78:	460c      	mov	r4, r1
 8009c7a:	d507      	bpl.n	8009c8c <__smakebuf_r+0x1c>
 8009c7c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8009c80:	6023      	str	r3, [r4, #0]
 8009c82:	6123      	str	r3, [r4, #16]
 8009c84:	2301      	movs	r3, #1
 8009c86:	6163      	str	r3, [r4, #20]
 8009c88:	b003      	add	sp, #12
 8009c8a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009c8c:	ab01      	add	r3, sp, #4
 8009c8e:	466a      	mov	r2, sp
 8009c90:	f7ff ffc8 	bl	8009c24 <__swhatbuf_r>
 8009c94:	9f00      	ldr	r7, [sp, #0]
 8009c96:	4605      	mov	r5, r0
 8009c98:	4639      	mov	r1, r7
 8009c9a:	4630      	mov	r0, r6
 8009c9c:	f7fd fbc0 	bl	8007420 <_malloc_r>
 8009ca0:	b948      	cbnz	r0, 8009cb6 <__smakebuf_r+0x46>
 8009ca2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009ca6:	059a      	lsls	r2, r3, #22
 8009ca8:	d4ee      	bmi.n	8009c88 <__smakebuf_r+0x18>
 8009caa:	f023 0303 	bic.w	r3, r3, #3
 8009cae:	f043 0302 	orr.w	r3, r3, #2
 8009cb2:	81a3      	strh	r3, [r4, #12]
 8009cb4:	e7e2      	b.n	8009c7c <__smakebuf_r+0xc>
 8009cb6:	89a3      	ldrh	r3, [r4, #12]
 8009cb8:	6020      	str	r0, [r4, #0]
 8009cba:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009cbe:	81a3      	strh	r3, [r4, #12]
 8009cc0:	9b01      	ldr	r3, [sp, #4]
 8009cc2:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8009cc6:	b15b      	cbz	r3, 8009ce0 <__smakebuf_r+0x70>
 8009cc8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009ccc:	4630      	mov	r0, r6
 8009cce:	f000 f81d 	bl	8009d0c <_isatty_r>
 8009cd2:	b128      	cbz	r0, 8009ce0 <__smakebuf_r+0x70>
 8009cd4:	89a3      	ldrh	r3, [r4, #12]
 8009cd6:	f023 0303 	bic.w	r3, r3, #3
 8009cda:	f043 0301 	orr.w	r3, r3, #1
 8009cde:	81a3      	strh	r3, [r4, #12]
 8009ce0:	89a3      	ldrh	r3, [r4, #12]
 8009ce2:	431d      	orrs	r5, r3
 8009ce4:	81a5      	strh	r5, [r4, #12]
 8009ce6:	e7cf      	b.n	8009c88 <__smakebuf_r+0x18>

08009ce8 <_fstat_r>:
 8009ce8:	b538      	push	{r3, r4, r5, lr}
 8009cea:	4d07      	ldr	r5, [pc, #28]	@ (8009d08 <_fstat_r+0x20>)
 8009cec:	2300      	movs	r3, #0
 8009cee:	4604      	mov	r4, r0
 8009cf0:	4608      	mov	r0, r1
 8009cf2:	4611      	mov	r1, r2
 8009cf4:	602b      	str	r3, [r5, #0]
 8009cf6:	f7f7 ff47 	bl	8001b88 <_fstat>
 8009cfa:	1c43      	adds	r3, r0, #1
 8009cfc:	d102      	bne.n	8009d04 <_fstat_r+0x1c>
 8009cfe:	682b      	ldr	r3, [r5, #0]
 8009d00:	b103      	cbz	r3, 8009d04 <_fstat_r+0x1c>
 8009d02:	6023      	str	r3, [r4, #0]
 8009d04:	bd38      	pop	{r3, r4, r5, pc}
 8009d06:	bf00      	nop
 8009d08:	2001d334 	.word	0x2001d334

08009d0c <_isatty_r>:
 8009d0c:	b538      	push	{r3, r4, r5, lr}
 8009d0e:	4d06      	ldr	r5, [pc, #24]	@ (8009d28 <_isatty_r+0x1c>)
 8009d10:	2300      	movs	r3, #0
 8009d12:	4604      	mov	r4, r0
 8009d14:	4608      	mov	r0, r1
 8009d16:	602b      	str	r3, [r5, #0]
 8009d18:	f7f7 ff46 	bl	8001ba8 <_isatty>
 8009d1c:	1c43      	adds	r3, r0, #1
 8009d1e:	d102      	bne.n	8009d26 <_isatty_r+0x1a>
 8009d20:	682b      	ldr	r3, [r5, #0]
 8009d22:	b103      	cbz	r3, 8009d26 <_isatty_r+0x1a>
 8009d24:	6023      	str	r3, [r4, #0]
 8009d26:	bd38      	pop	{r3, r4, r5, pc}
 8009d28:	2001d334 	.word	0x2001d334
 8009d2c:	00000000 	.word	0x00000000

08009d30 <sin>:
 8009d30:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009d32:	ec53 2b10 	vmov	r2, r3, d0
 8009d36:	4826      	ldr	r0, [pc, #152]	@ (8009dd0 <sin+0xa0>)
 8009d38:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8009d3c:	4281      	cmp	r1, r0
 8009d3e:	d807      	bhi.n	8009d50 <sin+0x20>
 8009d40:	ed9f 1b21 	vldr	d1, [pc, #132]	@ 8009dc8 <sin+0x98>
 8009d44:	2000      	movs	r0, #0
 8009d46:	b005      	add	sp, #20
 8009d48:	f85d eb04 	ldr.w	lr, [sp], #4
 8009d4c:	f000 b930 	b.w	8009fb0 <__kernel_sin>
 8009d50:	4820      	ldr	r0, [pc, #128]	@ (8009dd4 <sin+0xa4>)
 8009d52:	4281      	cmp	r1, r0
 8009d54:	d908      	bls.n	8009d68 <sin+0x38>
 8009d56:	4610      	mov	r0, r2
 8009d58:	4619      	mov	r1, r3
 8009d5a:	f7f6 faf5 	bl	8000348 <__aeabi_dsub>
 8009d5e:	ec41 0b10 	vmov	d0, r0, r1
 8009d62:	b005      	add	sp, #20
 8009d64:	f85d fb04 	ldr.w	pc, [sp], #4
 8009d68:	4668      	mov	r0, sp
 8009d6a:	f000 f9dd 	bl	800a128 <__ieee754_rem_pio2>
 8009d6e:	f000 0003 	and.w	r0, r0, #3
 8009d72:	2801      	cmp	r0, #1
 8009d74:	d00c      	beq.n	8009d90 <sin+0x60>
 8009d76:	2802      	cmp	r0, #2
 8009d78:	d011      	beq.n	8009d9e <sin+0x6e>
 8009d7a:	b9e8      	cbnz	r0, 8009db8 <sin+0x88>
 8009d7c:	ed9d 1b02 	vldr	d1, [sp, #8]
 8009d80:	ed9d 0b00 	vldr	d0, [sp]
 8009d84:	2001      	movs	r0, #1
 8009d86:	f000 f913 	bl	8009fb0 <__kernel_sin>
 8009d8a:	ec51 0b10 	vmov	r0, r1, d0
 8009d8e:	e7e6      	b.n	8009d5e <sin+0x2e>
 8009d90:	ed9d 1b02 	vldr	d1, [sp, #8]
 8009d94:	ed9d 0b00 	vldr	d0, [sp]
 8009d98:	f000 f842 	bl	8009e20 <__kernel_cos>
 8009d9c:	e7f5      	b.n	8009d8a <sin+0x5a>
 8009d9e:	ed9d 1b02 	vldr	d1, [sp, #8]
 8009da2:	ed9d 0b00 	vldr	d0, [sp]
 8009da6:	2001      	movs	r0, #1
 8009da8:	f000 f902 	bl	8009fb0 <__kernel_sin>
 8009dac:	ec53 2b10 	vmov	r2, r3, d0
 8009db0:	4610      	mov	r0, r2
 8009db2:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 8009db6:	e7d2      	b.n	8009d5e <sin+0x2e>
 8009db8:	ed9d 1b02 	vldr	d1, [sp, #8]
 8009dbc:	ed9d 0b00 	vldr	d0, [sp]
 8009dc0:	f000 f82e 	bl	8009e20 <__kernel_cos>
 8009dc4:	e7f2      	b.n	8009dac <sin+0x7c>
 8009dc6:	bf00      	nop
	...
 8009dd0:	3fe921fb 	.word	0x3fe921fb
 8009dd4:	7fefffff 	.word	0x7fefffff

08009dd8 <sqrtf>:
 8009dd8:	b508      	push	{r3, lr}
 8009dda:	ed2d 8b02 	vpush	{d8}
 8009dde:	eeb0 8a40 	vmov.f32	s16, s0
 8009de2:	f000 f817 	bl	8009e14 <__ieee754_sqrtf>
 8009de6:	eeb4 8a48 	vcmp.f32	s16, s16
 8009dea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009dee:	d60c      	bvs.n	8009e0a <sqrtf+0x32>
 8009df0:	eddf 8a07 	vldr	s17, [pc, #28]	@ 8009e10 <sqrtf+0x38>
 8009df4:	eeb4 8ae8 	vcmpe.f32	s16, s17
 8009df8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009dfc:	d505      	bpl.n	8009e0a <sqrtf+0x32>
 8009dfe:	f7fc fc0d 	bl	800661c <__errno>
 8009e02:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 8009e06:	2321      	movs	r3, #33	@ 0x21
 8009e08:	6003      	str	r3, [r0, #0]
 8009e0a:	ecbd 8b02 	vpop	{d8}
 8009e0e:	bd08      	pop	{r3, pc}
 8009e10:	00000000 	.word	0x00000000

08009e14 <__ieee754_sqrtf>:
 8009e14:	eeb1 0ac0 	vsqrt.f32	s0, s0
 8009e18:	4770      	bx	lr
 8009e1a:	0000      	movs	r0, r0
 8009e1c:	0000      	movs	r0, r0
	...

08009e20 <__kernel_cos>:
 8009e20:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009e24:	ec57 6b10 	vmov	r6, r7, d0
 8009e28:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 8009e2c:	f1b8 5f79 	cmp.w	r8, #1044381696	@ 0x3e400000
 8009e30:	ed8d 1b00 	vstr	d1, [sp]
 8009e34:	d206      	bcs.n	8009e44 <__kernel_cos+0x24>
 8009e36:	4630      	mov	r0, r6
 8009e38:	4639      	mov	r1, r7
 8009e3a:	f7f6 feed 	bl	8000c18 <__aeabi_d2iz>
 8009e3e:	2800      	cmp	r0, #0
 8009e40:	f000 8088 	beq.w	8009f54 <__kernel_cos+0x134>
 8009e44:	4632      	mov	r2, r6
 8009e46:	463b      	mov	r3, r7
 8009e48:	4630      	mov	r0, r6
 8009e4a:	4639      	mov	r1, r7
 8009e4c:	f7f6 fc34 	bl	80006b8 <__aeabi_dmul>
 8009e50:	4b51      	ldr	r3, [pc, #324]	@ (8009f98 <__kernel_cos+0x178>)
 8009e52:	2200      	movs	r2, #0
 8009e54:	4604      	mov	r4, r0
 8009e56:	460d      	mov	r5, r1
 8009e58:	f7f6 fc2e 	bl	80006b8 <__aeabi_dmul>
 8009e5c:	a340      	add	r3, pc, #256	@ (adr r3, 8009f60 <__kernel_cos+0x140>)
 8009e5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e62:	4682      	mov	sl, r0
 8009e64:	468b      	mov	fp, r1
 8009e66:	4620      	mov	r0, r4
 8009e68:	4629      	mov	r1, r5
 8009e6a:	f7f6 fc25 	bl	80006b8 <__aeabi_dmul>
 8009e6e:	a33e      	add	r3, pc, #248	@ (adr r3, 8009f68 <__kernel_cos+0x148>)
 8009e70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e74:	f7f6 fa6a 	bl	800034c <__adddf3>
 8009e78:	4622      	mov	r2, r4
 8009e7a:	462b      	mov	r3, r5
 8009e7c:	f7f6 fc1c 	bl	80006b8 <__aeabi_dmul>
 8009e80:	a33b      	add	r3, pc, #236	@ (adr r3, 8009f70 <__kernel_cos+0x150>)
 8009e82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e86:	f7f6 fa5f 	bl	8000348 <__aeabi_dsub>
 8009e8a:	4622      	mov	r2, r4
 8009e8c:	462b      	mov	r3, r5
 8009e8e:	f7f6 fc13 	bl	80006b8 <__aeabi_dmul>
 8009e92:	a339      	add	r3, pc, #228	@ (adr r3, 8009f78 <__kernel_cos+0x158>)
 8009e94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e98:	f7f6 fa58 	bl	800034c <__adddf3>
 8009e9c:	4622      	mov	r2, r4
 8009e9e:	462b      	mov	r3, r5
 8009ea0:	f7f6 fc0a 	bl	80006b8 <__aeabi_dmul>
 8009ea4:	a336      	add	r3, pc, #216	@ (adr r3, 8009f80 <__kernel_cos+0x160>)
 8009ea6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009eaa:	f7f6 fa4d 	bl	8000348 <__aeabi_dsub>
 8009eae:	4622      	mov	r2, r4
 8009eb0:	462b      	mov	r3, r5
 8009eb2:	f7f6 fc01 	bl	80006b8 <__aeabi_dmul>
 8009eb6:	a334      	add	r3, pc, #208	@ (adr r3, 8009f88 <__kernel_cos+0x168>)
 8009eb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ebc:	f7f6 fa46 	bl	800034c <__adddf3>
 8009ec0:	4622      	mov	r2, r4
 8009ec2:	462b      	mov	r3, r5
 8009ec4:	f7f6 fbf8 	bl	80006b8 <__aeabi_dmul>
 8009ec8:	4622      	mov	r2, r4
 8009eca:	462b      	mov	r3, r5
 8009ecc:	f7f6 fbf4 	bl	80006b8 <__aeabi_dmul>
 8009ed0:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009ed4:	4604      	mov	r4, r0
 8009ed6:	460d      	mov	r5, r1
 8009ed8:	4630      	mov	r0, r6
 8009eda:	4639      	mov	r1, r7
 8009edc:	f7f6 fbec 	bl	80006b8 <__aeabi_dmul>
 8009ee0:	460b      	mov	r3, r1
 8009ee2:	4602      	mov	r2, r0
 8009ee4:	4629      	mov	r1, r5
 8009ee6:	4620      	mov	r0, r4
 8009ee8:	f7f6 fa2e 	bl	8000348 <__aeabi_dsub>
 8009eec:	4b2b      	ldr	r3, [pc, #172]	@ (8009f9c <__kernel_cos+0x17c>)
 8009eee:	4598      	cmp	r8, r3
 8009ef0:	4606      	mov	r6, r0
 8009ef2:	460f      	mov	r7, r1
 8009ef4:	d810      	bhi.n	8009f18 <__kernel_cos+0xf8>
 8009ef6:	4602      	mov	r2, r0
 8009ef8:	460b      	mov	r3, r1
 8009efa:	4650      	mov	r0, sl
 8009efc:	4659      	mov	r1, fp
 8009efe:	f7f6 fa23 	bl	8000348 <__aeabi_dsub>
 8009f02:	460b      	mov	r3, r1
 8009f04:	4926      	ldr	r1, [pc, #152]	@ (8009fa0 <__kernel_cos+0x180>)
 8009f06:	4602      	mov	r2, r0
 8009f08:	2000      	movs	r0, #0
 8009f0a:	f7f6 fa1d 	bl	8000348 <__aeabi_dsub>
 8009f0e:	ec41 0b10 	vmov	d0, r0, r1
 8009f12:	b003      	add	sp, #12
 8009f14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009f18:	4b22      	ldr	r3, [pc, #136]	@ (8009fa4 <__kernel_cos+0x184>)
 8009f1a:	4921      	ldr	r1, [pc, #132]	@ (8009fa0 <__kernel_cos+0x180>)
 8009f1c:	4598      	cmp	r8, r3
 8009f1e:	bf8c      	ite	hi
 8009f20:	4d21      	ldrhi	r5, [pc, #132]	@ (8009fa8 <__kernel_cos+0x188>)
 8009f22:	f5a8 1500 	subls.w	r5, r8, #2097152	@ 0x200000
 8009f26:	2400      	movs	r4, #0
 8009f28:	4622      	mov	r2, r4
 8009f2a:	462b      	mov	r3, r5
 8009f2c:	2000      	movs	r0, #0
 8009f2e:	f7f6 fa0b 	bl	8000348 <__aeabi_dsub>
 8009f32:	4622      	mov	r2, r4
 8009f34:	4680      	mov	r8, r0
 8009f36:	4689      	mov	r9, r1
 8009f38:	462b      	mov	r3, r5
 8009f3a:	4650      	mov	r0, sl
 8009f3c:	4659      	mov	r1, fp
 8009f3e:	f7f6 fa03 	bl	8000348 <__aeabi_dsub>
 8009f42:	4632      	mov	r2, r6
 8009f44:	463b      	mov	r3, r7
 8009f46:	f7f6 f9ff 	bl	8000348 <__aeabi_dsub>
 8009f4a:	4602      	mov	r2, r0
 8009f4c:	460b      	mov	r3, r1
 8009f4e:	4640      	mov	r0, r8
 8009f50:	4649      	mov	r1, r9
 8009f52:	e7da      	b.n	8009f0a <__kernel_cos+0xea>
 8009f54:	ed9f 0b0e 	vldr	d0, [pc, #56]	@ 8009f90 <__kernel_cos+0x170>
 8009f58:	e7db      	b.n	8009f12 <__kernel_cos+0xf2>
 8009f5a:	bf00      	nop
 8009f5c:	f3af 8000 	nop.w
 8009f60:	be8838d4 	.word	0xbe8838d4
 8009f64:	bda8fae9 	.word	0xbda8fae9
 8009f68:	bdb4b1c4 	.word	0xbdb4b1c4
 8009f6c:	3e21ee9e 	.word	0x3e21ee9e
 8009f70:	809c52ad 	.word	0x809c52ad
 8009f74:	3e927e4f 	.word	0x3e927e4f
 8009f78:	19cb1590 	.word	0x19cb1590
 8009f7c:	3efa01a0 	.word	0x3efa01a0
 8009f80:	16c15177 	.word	0x16c15177
 8009f84:	3f56c16c 	.word	0x3f56c16c
 8009f88:	5555554c 	.word	0x5555554c
 8009f8c:	3fa55555 	.word	0x3fa55555
 8009f90:	00000000 	.word	0x00000000
 8009f94:	3ff00000 	.word	0x3ff00000
 8009f98:	3fe00000 	.word	0x3fe00000
 8009f9c:	3fd33332 	.word	0x3fd33332
 8009fa0:	3ff00000 	.word	0x3ff00000
 8009fa4:	3fe90000 	.word	0x3fe90000
 8009fa8:	3fd20000 	.word	0x3fd20000
 8009fac:	00000000 	.word	0x00000000

08009fb0 <__kernel_sin>:
 8009fb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009fb4:	ec55 4b10 	vmov	r4, r5, d0
 8009fb8:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 8009fbc:	b085      	sub	sp, #20
 8009fbe:	f1b3 5f79 	cmp.w	r3, #1044381696	@ 0x3e400000
 8009fc2:	ed8d 1b02 	vstr	d1, [sp, #8]
 8009fc6:	4680      	mov	r8, r0
 8009fc8:	d205      	bcs.n	8009fd6 <__kernel_sin+0x26>
 8009fca:	4620      	mov	r0, r4
 8009fcc:	4629      	mov	r1, r5
 8009fce:	f7f6 fe23 	bl	8000c18 <__aeabi_d2iz>
 8009fd2:	2800      	cmp	r0, #0
 8009fd4:	d052      	beq.n	800a07c <__kernel_sin+0xcc>
 8009fd6:	4622      	mov	r2, r4
 8009fd8:	462b      	mov	r3, r5
 8009fda:	4620      	mov	r0, r4
 8009fdc:	4629      	mov	r1, r5
 8009fde:	f7f6 fb6b 	bl	80006b8 <__aeabi_dmul>
 8009fe2:	4682      	mov	sl, r0
 8009fe4:	468b      	mov	fp, r1
 8009fe6:	4602      	mov	r2, r0
 8009fe8:	460b      	mov	r3, r1
 8009fea:	4620      	mov	r0, r4
 8009fec:	4629      	mov	r1, r5
 8009fee:	f7f6 fb63 	bl	80006b8 <__aeabi_dmul>
 8009ff2:	a342      	add	r3, pc, #264	@ (adr r3, 800a0fc <__kernel_sin+0x14c>)
 8009ff4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ff8:	e9cd 0100 	strd	r0, r1, [sp]
 8009ffc:	4650      	mov	r0, sl
 8009ffe:	4659      	mov	r1, fp
 800a000:	f7f6 fb5a 	bl	80006b8 <__aeabi_dmul>
 800a004:	a33f      	add	r3, pc, #252	@ (adr r3, 800a104 <__kernel_sin+0x154>)
 800a006:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a00a:	f7f6 f99d 	bl	8000348 <__aeabi_dsub>
 800a00e:	4652      	mov	r2, sl
 800a010:	465b      	mov	r3, fp
 800a012:	f7f6 fb51 	bl	80006b8 <__aeabi_dmul>
 800a016:	a33d      	add	r3, pc, #244	@ (adr r3, 800a10c <__kernel_sin+0x15c>)
 800a018:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a01c:	f7f6 f996 	bl	800034c <__adddf3>
 800a020:	4652      	mov	r2, sl
 800a022:	465b      	mov	r3, fp
 800a024:	f7f6 fb48 	bl	80006b8 <__aeabi_dmul>
 800a028:	a33a      	add	r3, pc, #232	@ (adr r3, 800a114 <__kernel_sin+0x164>)
 800a02a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a02e:	f7f6 f98b 	bl	8000348 <__aeabi_dsub>
 800a032:	4652      	mov	r2, sl
 800a034:	465b      	mov	r3, fp
 800a036:	f7f6 fb3f 	bl	80006b8 <__aeabi_dmul>
 800a03a:	a338      	add	r3, pc, #224	@ (adr r3, 800a11c <__kernel_sin+0x16c>)
 800a03c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a040:	f7f6 f984 	bl	800034c <__adddf3>
 800a044:	4606      	mov	r6, r0
 800a046:	460f      	mov	r7, r1
 800a048:	f1b8 0f00 	cmp.w	r8, #0
 800a04c:	d11b      	bne.n	800a086 <__kernel_sin+0xd6>
 800a04e:	4602      	mov	r2, r0
 800a050:	460b      	mov	r3, r1
 800a052:	4650      	mov	r0, sl
 800a054:	4659      	mov	r1, fp
 800a056:	f7f6 fb2f 	bl	80006b8 <__aeabi_dmul>
 800a05a:	a325      	add	r3, pc, #148	@ (adr r3, 800a0f0 <__kernel_sin+0x140>)
 800a05c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a060:	f7f6 f972 	bl	8000348 <__aeabi_dsub>
 800a064:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a068:	f7f6 fb26 	bl	80006b8 <__aeabi_dmul>
 800a06c:	4602      	mov	r2, r0
 800a06e:	460b      	mov	r3, r1
 800a070:	4620      	mov	r0, r4
 800a072:	4629      	mov	r1, r5
 800a074:	f7f6 f96a 	bl	800034c <__adddf3>
 800a078:	4604      	mov	r4, r0
 800a07a:	460d      	mov	r5, r1
 800a07c:	ec45 4b10 	vmov	d0, r4, r5
 800a080:	b005      	add	sp, #20
 800a082:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a086:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a08a:	4b1b      	ldr	r3, [pc, #108]	@ (800a0f8 <__kernel_sin+0x148>)
 800a08c:	2200      	movs	r2, #0
 800a08e:	f7f6 fb13 	bl	80006b8 <__aeabi_dmul>
 800a092:	4632      	mov	r2, r6
 800a094:	4680      	mov	r8, r0
 800a096:	4689      	mov	r9, r1
 800a098:	463b      	mov	r3, r7
 800a09a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a09e:	f7f6 fb0b 	bl	80006b8 <__aeabi_dmul>
 800a0a2:	4602      	mov	r2, r0
 800a0a4:	460b      	mov	r3, r1
 800a0a6:	4640      	mov	r0, r8
 800a0a8:	4649      	mov	r1, r9
 800a0aa:	f7f6 f94d 	bl	8000348 <__aeabi_dsub>
 800a0ae:	4652      	mov	r2, sl
 800a0b0:	465b      	mov	r3, fp
 800a0b2:	f7f6 fb01 	bl	80006b8 <__aeabi_dmul>
 800a0b6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a0ba:	f7f6 f945 	bl	8000348 <__aeabi_dsub>
 800a0be:	a30c      	add	r3, pc, #48	@ (adr r3, 800a0f0 <__kernel_sin+0x140>)
 800a0c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0c4:	4606      	mov	r6, r0
 800a0c6:	460f      	mov	r7, r1
 800a0c8:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a0cc:	f7f6 faf4 	bl	80006b8 <__aeabi_dmul>
 800a0d0:	4602      	mov	r2, r0
 800a0d2:	460b      	mov	r3, r1
 800a0d4:	4630      	mov	r0, r6
 800a0d6:	4639      	mov	r1, r7
 800a0d8:	f7f6 f938 	bl	800034c <__adddf3>
 800a0dc:	4602      	mov	r2, r0
 800a0de:	460b      	mov	r3, r1
 800a0e0:	4620      	mov	r0, r4
 800a0e2:	4629      	mov	r1, r5
 800a0e4:	f7f6 f930 	bl	8000348 <__aeabi_dsub>
 800a0e8:	e7c6      	b.n	800a078 <__kernel_sin+0xc8>
 800a0ea:	bf00      	nop
 800a0ec:	f3af 8000 	nop.w
 800a0f0:	55555549 	.word	0x55555549
 800a0f4:	3fc55555 	.word	0x3fc55555
 800a0f8:	3fe00000 	.word	0x3fe00000
 800a0fc:	5acfd57c 	.word	0x5acfd57c
 800a100:	3de5d93a 	.word	0x3de5d93a
 800a104:	8a2b9ceb 	.word	0x8a2b9ceb
 800a108:	3e5ae5e6 	.word	0x3e5ae5e6
 800a10c:	57b1fe7d 	.word	0x57b1fe7d
 800a110:	3ec71de3 	.word	0x3ec71de3
 800a114:	19c161d5 	.word	0x19c161d5
 800a118:	3f2a01a0 	.word	0x3f2a01a0
 800a11c:	1110f8a6 	.word	0x1110f8a6
 800a120:	3f811111 	.word	0x3f811111
 800a124:	00000000 	.word	0x00000000

0800a128 <__ieee754_rem_pio2>:
 800a128:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a12c:	ec57 6b10 	vmov	r6, r7, d0
 800a130:	4bc5      	ldr	r3, [pc, #788]	@ (800a448 <__ieee754_rem_pio2+0x320>)
 800a132:	b08d      	sub	sp, #52	@ 0x34
 800a134:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 800a138:	4598      	cmp	r8, r3
 800a13a:	4604      	mov	r4, r0
 800a13c:	9704      	str	r7, [sp, #16]
 800a13e:	d807      	bhi.n	800a150 <__ieee754_rem_pio2+0x28>
 800a140:	2200      	movs	r2, #0
 800a142:	2300      	movs	r3, #0
 800a144:	ed80 0b00 	vstr	d0, [r0]
 800a148:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800a14c:	2500      	movs	r5, #0
 800a14e:	e028      	b.n	800a1a2 <__ieee754_rem_pio2+0x7a>
 800a150:	4bbe      	ldr	r3, [pc, #760]	@ (800a44c <__ieee754_rem_pio2+0x324>)
 800a152:	4598      	cmp	r8, r3
 800a154:	d878      	bhi.n	800a248 <__ieee754_rem_pio2+0x120>
 800a156:	9b04      	ldr	r3, [sp, #16]
 800a158:	4dbd      	ldr	r5, [pc, #756]	@ (800a450 <__ieee754_rem_pio2+0x328>)
 800a15a:	2b00      	cmp	r3, #0
 800a15c:	4630      	mov	r0, r6
 800a15e:	a3ac      	add	r3, pc, #688	@ (adr r3, 800a410 <__ieee754_rem_pio2+0x2e8>)
 800a160:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a164:	4639      	mov	r1, r7
 800a166:	dd38      	ble.n	800a1da <__ieee754_rem_pio2+0xb2>
 800a168:	f7f6 f8ee 	bl	8000348 <__aeabi_dsub>
 800a16c:	45a8      	cmp	r8, r5
 800a16e:	4606      	mov	r6, r0
 800a170:	460f      	mov	r7, r1
 800a172:	d01a      	beq.n	800a1aa <__ieee754_rem_pio2+0x82>
 800a174:	a3a8      	add	r3, pc, #672	@ (adr r3, 800a418 <__ieee754_rem_pio2+0x2f0>)
 800a176:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a17a:	f7f6 f8e5 	bl	8000348 <__aeabi_dsub>
 800a17e:	4602      	mov	r2, r0
 800a180:	460b      	mov	r3, r1
 800a182:	4680      	mov	r8, r0
 800a184:	4689      	mov	r9, r1
 800a186:	4630      	mov	r0, r6
 800a188:	4639      	mov	r1, r7
 800a18a:	f7f6 f8dd 	bl	8000348 <__aeabi_dsub>
 800a18e:	a3a2      	add	r3, pc, #648	@ (adr r3, 800a418 <__ieee754_rem_pio2+0x2f0>)
 800a190:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a194:	f7f6 f8d8 	bl	8000348 <__aeabi_dsub>
 800a198:	e9c4 8900 	strd	r8, r9, [r4]
 800a19c:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800a1a0:	2501      	movs	r5, #1
 800a1a2:	4628      	mov	r0, r5
 800a1a4:	b00d      	add	sp, #52	@ 0x34
 800a1a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a1aa:	a39d      	add	r3, pc, #628	@ (adr r3, 800a420 <__ieee754_rem_pio2+0x2f8>)
 800a1ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a1b0:	f7f6 f8ca 	bl	8000348 <__aeabi_dsub>
 800a1b4:	a39c      	add	r3, pc, #624	@ (adr r3, 800a428 <__ieee754_rem_pio2+0x300>)
 800a1b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a1ba:	4606      	mov	r6, r0
 800a1bc:	460f      	mov	r7, r1
 800a1be:	f7f6 f8c3 	bl	8000348 <__aeabi_dsub>
 800a1c2:	4602      	mov	r2, r0
 800a1c4:	460b      	mov	r3, r1
 800a1c6:	4680      	mov	r8, r0
 800a1c8:	4689      	mov	r9, r1
 800a1ca:	4630      	mov	r0, r6
 800a1cc:	4639      	mov	r1, r7
 800a1ce:	f7f6 f8bb 	bl	8000348 <__aeabi_dsub>
 800a1d2:	a395      	add	r3, pc, #596	@ (adr r3, 800a428 <__ieee754_rem_pio2+0x300>)
 800a1d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a1d8:	e7dc      	b.n	800a194 <__ieee754_rem_pio2+0x6c>
 800a1da:	f7f6 f8b7 	bl	800034c <__adddf3>
 800a1de:	45a8      	cmp	r8, r5
 800a1e0:	4606      	mov	r6, r0
 800a1e2:	460f      	mov	r7, r1
 800a1e4:	d018      	beq.n	800a218 <__ieee754_rem_pio2+0xf0>
 800a1e6:	a38c      	add	r3, pc, #560	@ (adr r3, 800a418 <__ieee754_rem_pio2+0x2f0>)
 800a1e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a1ec:	f7f6 f8ae 	bl	800034c <__adddf3>
 800a1f0:	4602      	mov	r2, r0
 800a1f2:	460b      	mov	r3, r1
 800a1f4:	4680      	mov	r8, r0
 800a1f6:	4689      	mov	r9, r1
 800a1f8:	4630      	mov	r0, r6
 800a1fa:	4639      	mov	r1, r7
 800a1fc:	f7f6 f8a4 	bl	8000348 <__aeabi_dsub>
 800a200:	a385      	add	r3, pc, #532	@ (adr r3, 800a418 <__ieee754_rem_pio2+0x2f0>)
 800a202:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a206:	f7f6 f8a1 	bl	800034c <__adddf3>
 800a20a:	f04f 35ff 	mov.w	r5, #4294967295
 800a20e:	e9c4 8900 	strd	r8, r9, [r4]
 800a212:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800a216:	e7c4      	b.n	800a1a2 <__ieee754_rem_pio2+0x7a>
 800a218:	a381      	add	r3, pc, #516	@ (adr r3, 800a420 <__ieee754_rem_pio2+0x2f8>)
 800a21a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a21e:	f7f6 f895 	bl	800034c <__adddf3>
 800a222:	a381      	add	r3, pc, #516	@ (adr r3, 800a428 <__ieee754_rem_pio2+0x300>)
 800a224:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a228:	4606      	mov	r6, r0
 800a22a:	460f      	mov	r7, r1
 800a22c:	f7f6 f88e 	bl	800034c <__adddf3>
 800a230:	4602      	mov	r2, r0
 800a232:	460b      	mov	r3, r1
 800a234:	4680      	mov	r8, r0
 800a236:	4689      	mov	r9, r1
 800a238:	4630      	mov	r0, r6
 800a23a:	4639      	mov	r1, r7
 800a23c:	f7f6 f884 	bl	8000348 <__aeabi_dsub>
 800a240:	a379      	add	r3, pc, #484	@ (adr r3, 800a428 <__ieee754_rem_pio2+0x300>)
 800a242:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a246:	e7de      	b.n	800a206 <__ieee754_rem_pio2+0xde>
 800a248:	4b82      	ldr	r3, [pc, #520]	@ (800a454 <__ieee754_rem_pio2+0x32c>)
 800a24a:	4598      	cmp	r8, r3
 800a24c:	f200 80d1 	bhi.w	800a3f2 <__ieee754_rem_pio2+0x2ca>
 800a250:	f000 f966 	bl	800a520 <fabs>
 800a254:	ec57 6b10 	vmov	r6, r7, d0
 800a258:	a375      	add	r3, pc, #468	@ (adr r3, 800a430 <__ieee754_rem_pio2+0x308>)
 800a25a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a25e:	4630      	mov	r0, r6
 800a260:	4639      	mov	r1, r7
 800a262:	f7f6 fa29 	bl	80006b8 <__aeabi_dmul>
 800a266:	4b7c      	ldr	r3, [pc, #496]	@ (800a458 <__ieee754_rem_pio2+0x330>)
 800a268:	2200      	movs	r2, #0
 800a26a:	f7f6 f86f 	bl	800034c <__adddf3>
 800a26e:	f7f6 fcd3 	bl	8000c18 <__aeabi_d2iz>
 800a272:	4605      	mov	r5, r0
 800a274:	f7f6 f9b6 	bl	80005e4 <__aeabi_i2d>
 800a278:	4602      	mov	r2, r0
 800a27a:	460b      	mov	r3, r1
 800a27c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800a280:	a363      	add	r3, pc, #396	@ (adr r3, 800a410 <__ieee754_rem_pio2+0x2e8>)
 800a282:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a286:	f7f6 fa17 	bl	80006b8 <__aeabi_dmul>
 800a28a:	4602      	mov	r2, r0
 800a28c:	460b      	mov	r3, r1
 800a28e:	4630      	mov	r0, r6
 800a290:	4639      	mov	r1, r7
 800a292:	f7f6 f859 	bl	8000348 <__aeabi_dsub>
 800a296:	a360      	add	r3, pc, #384	@ (adr r3, 800a418 <__ieee754_rem_pio2+0x2f0>)
 800a298:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a29c:	4682      	mov	sl, r0
 800a29e:	468b      	mov	fp, r1
 800a2a0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a2a4:	f7f6 fa08 	bl	80006b8 <__aeabi_dmul>
 800a2a8:	2d1f      	cmp	r5, #31
 800a2aa:	4606      	mov	r6, r0
 800a2ac:	460f      	mov	r7, r1
 800a2ae:	dc0c      	bgt.n	800a2ca <__ieee754_rem_pio2+0x1a2>
 800a2b0:	4b6a      	ldr	r3, [pc, #424]	@ (800a45c <__ieee754_rem_pio2+0x334>)
 800a2b2:	1e6a      	subs	r2, r5, #1
 800a2b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a2b8:	4543      	cmp	r3, r8
 800a2ba:	d006      	beq.n	800a2ca <__ieee754_rem_pio2+0x1a2>
 800a2bc:	4632      	mov	r2, r6
 800a2be:	463b      	mov	r3, r7
 800a2c0:	4650      	mov	r0, sl
 800a2c2:	4659      	mov	r1, fp
 800a2c4:	f7f6 f840 	bl	8000348 <__aeabi_dsub>
 800a2c8:	e00e      	b.n	800a2e8 <__ieee754_rem_pio2+0x1c0>
 800a2ca:	463b      	mov	r3, r7
 800a2cc:	4632      	mov	r2, r6
 800a2ce:	4650      	mov	r0, sl
 800a2d0:	4659      	mov	r1, fp
 800a2d2:	f7f6 f839 	bl	8000348 <__aeabi_dsub>
 800a2d6:	ea4f 5328 	mov.w	r3, r8, asr #20
 800a2da:	9305      	str	r3, [sp, #20]
 800a2dc:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800a2e0:	ebc3 5318 	rsb	r3, r3, r8, lsr #20
 800a2e4:	2b10      	cmp	r3, #16
 800a2e6:	dc02      	bgt.n	800a2ee <__ieee754_rem_pio2+0x1c6>
 800a2e8:	e9c4 0100 	strd	r0, r1, [r4]
 800a2ec:	e039      	b.n	800a362 <__ieee754_rem_pio2+0x23a>
 800a2ee:	a34c      	add	r3, pc, #304	@ (adr r3, 800a420 <__ieee754_rem_pio2+0x2f8>)
 800a2f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a2f4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a2f8:	f7f6 f9de 	bl	80006b8 <__aeabi_dmul>
 800a2fc:	4606      	mov	r6, r0
 800a2fe:	460f      	mov	r7, r1
 800a300:	4602      	mov	r2, r0
 800a302:	460b      	mov	r3, r1
 800a304:	4650      	mov	r0, sl
 800a306:	4659      	mov	r1, fp
 800a308:	f7f6 f81e 	bl	8000348 <__aeabi_dsub>
 800a30c:	4602      	mov	r2, r0
 800a30e:	460b      	mov	r3, r1
 800a310:	4680      	mov	r8, r0
 800a312:	4689      	mov	r9, r1
 800a314:	4650      	mov	r0, sl
 800a316:	4659      	mov	r1, fp
 800a318:	f7f6 f816 	bl	8000348 <__aeabi_dsub>
 800a31c:	4632      	mov	r2, r6
 800a31e:	463b      	mov	r3, r7
 800a320:	f7f6 f812 	bl	8000348 <__aeabi_dsub>
 800a324:	a340      	add	r3, pc, #256	@ (adr r3, 800a428 <__ieee754_rem_pio2+0x300>)
 800a326:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a32a:	4606      	mov	r6, r0
 800a32c:	460f      	mov	r7, r1
 800a32e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a332:	f7f6 f9c1 	bl	80006b8 <__aeabi_dmul>
 800a336:	4632      	mov	r2, r6
 800a338:	463b      	mov	r3, r7
 800a33a:	f7f6 f805 	bl	8000348 <__aeabi_dsub>
 800a33e:	4602      	mov	r2, r0
 800a340:	460b      	mov	r3, r1
 800a342:	4606      	mov	r6, r0
 800a344:	460f      	mov	r7, r1
 800a346:	4640      	mov	r0, r8
 800a348:	4649      	mov	r1, r9
 800a34a:	f7f5 fffd 	bl	8000348 <__aeabi_dsub>
 800a34e:	9a05      	ldr	r2, [sp, #20]
 800a350:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800a354:	1ad3      	subs	r3, r2, r3
 800a356:	2b31      	cmp	r3, #49	@ 0x31
 800a358:	dc20      	bgt.n	800a39c <__ieee754_rem_pio2+0x274>
 800a35a:	e9c4 0100 	strd	r0, r1, [r4]
 800a35e:	46c2      	mov	sl, r8
 800a360:	46cb      	mov	fp, r9
 800a362:	e9d4 8900 	ldrd	r8, r9, [r4]
 800a366:	4650      	mov	r0, sl
 800a368:	4642      	mov	r2, r8
 800a36a:	464b      	mov	r3, r9
 800a36c:	4659      	mov	r1, fp
 800a36e:	f7f5 ffeb 	bl	8000348 <__aeabi_dsub>
 800a372:	463b      	mov	r3, r7
 800a374:	4632      	mov	r2, r6
 800a376:	f7f5 ffe7 	bl	8000348 <__aeabi_dsub>
 800a37a:	9b04      	ldr	r3, [sp, #16]
 800a37c:	2b00      	cmp	r3, #0
 800a37e:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800a382:	f6bf af0e 	bge.w	800a1a2 <__ieee754_rem_pio2+0x7a>
 800a386:	f109 4300 	add.w	r3, r9, #2147483648	@ 0x80000000
 800a38a:	6063      	str	r3, [r4, #4]
 800a38c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800a390:	f8c4 8000 	str.w	r8, [r4]
 800a394:	60a0      	str	r0, [r4, #8]
 800a396:	60e3      	str	r3, [r4, #12]
 800a398:	426d      	negs	r5, r5
 800a39a:	e702      	b.n	800a1a2 <__ieee754_rem_pio2+0x7a>
 800a39c:	a326      	add	r3, pc, #152	@ (adr r3, 800a438 <__ieee754_rem_pio2+0x310>)
 800a39e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3a2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a3a6:	f7f6 f987 	bl	80006b8 <__aeabi_dmul>
 800a3aa:	4606      	mov	r6, r0
 800a3ac:	460f      	mov	r7, r1
 800a3ae:	4602      	mov	r2, r0
 800a3b0:	460b      	mov	r3, r1
 800a3b2:	4640      	mov	r0, r8
 800a3b4:	4649      	mov	r1, r9
 800a3b6:	f7f5 ffc7 	bl	8000348 <__aeabi_dsub>
 800a3ba:	4602      	mov	r2, r0
 800a3bc:	460b      	mov	r3, r1
 800a3be:	4682      	mov	sl, r0
 800a3c0:	468b      	mov	fp, r1
 800a3c2:	4640      	mov	r0, r8
 800a3c4:	4649      	mov	r1, r9
 800a3c6:	f7f5 ffbf 	bl	8000348 <__aeabi_dsub>
 800a3ca:	4632      	mov	r2, r6
 800a3cc:	463b      	mov	r3, r7
 800a3ce:	f7f5 ffbb 	bl	8000348 <__aeabi_dsub>
 800a3d2:	a31b      	add	r3, pc, #108	@ (adr r3, 800a440 <__ieee754_rem_pio2+0x318>)
 800a3d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3d8:	4606      	mov	r6, r0
 800a3da:	460f      	mov	r7, r1
 800a3dc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a3e0:	f7f6 f96a 	bl	80006b8 <__aeabi_dmul>
 800a3e4:	4632      	mov	r2, r6
 800a3e6:	463b      	mov	r3, r7
 800a3e8:	f7f5 ffae 	bl	8000348 <__aeabi_dsub>
 800a3ec:	4606      	mov	r6, r0
 800a3ee:	460f      	mov	r7, r1
 800a3f0:	e764      	b.n	800a2bc <__ieee754_rem_pio2+0x194>
 800a3f2:	4b1b      	ldr	r3, [pc, #108]	@ (800a460 <__ieee754_rem_pio2+0x338>)
 800a3f4:	4598      	cmp	r8, r3
 800a3f6:	d935      	bls.n	800a464 <__ieee754_rem_pio2+0x33c>
 800a3f8:	4632      	mov	r2, r6
 800a3fa:	463b      	mov	r3, r7
 800a3fc:	4630      	mov	r0, r6
 800a3fe:	4639      	mov	r1, r7
 800a400:	f7f5 ffa2 	bl	8000348 <__aeabi_dsub>
 800a404:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800a408:	e9c4 0100 	strd	r0, r1, [r4]
 800a40c:	e69e      	b.n	800a14c <__ieee754_rem_pio2+0x24>
 800a40e:	bf00      	nop
 800a410:	54400000 	.word	0x54400000
 800a414:	3ff921fb 	.word	0x3ff921fb
 800a418:	1a626331 	.word	0x1a626331
 800a41c:	3dd0b461 	.word	0x3dd0b461
 800a420:	1a600000 	.word	0x1a600000
 800a424:	3dd0b461 	.word	0x3dd0b461
 800a428:	2e037073 	.word	0x2e037073
 800a42c:	3ba3198a 	.word	0x3ba3198a
 800a430:	6dc9c883 	.word	0x6dc9c883
 800a434:	3fe45f30 	.word	0x3fe45f30
 800a438:	2e000000 	.word	0x2e000000
 800a43c:	3ba3198a 	.word	0x3ba3198a
 800a440:	252049c1 	.word	0x252049c1
 800a444:	397b839a 	.word	0x397b839a
 800a448:	3fe921fb 	.word	0x3fe921fb
 800a44c:	4002d97b 	.word	0x4002d97b
 800a450:	3ff921fb 	.word	0x3ff921fb
 800a454:	413921fb 	.word	0x413921fb
 800a458:	3fe00000 	.word	0x3fe00000
 800a45c:	0800e03c 	.word	0x0800e03c
 800a460:	7fefffff 	.word	0x7fefffff
 800a464:	ea4f 5528 	mov.w	r5, r8, asr #20
 800a468:	f2a5 4516 	subw	r5, r5, #1046	@ 0x416
 800a46c:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 800a470:	4630      	mov	r0, r6
 800a472:	460f      	mov	r7, r1
 800a474:	f7f6 fbd0 	bl	8000c18 <__aeabi_d2iz>
 800a478:	f7f6 f8b4 	bl	80005e4 <__aeabi_i2d>
 800a47c:	4602      	mov	r2, r0
 800a47e:	460b      	mov	r3, r1
 800a480:	4630      	mov	r0, r6
 800a482:	4639      	mov	r1, r7
 800a484:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800a488:	f7f5 ff5e 	bl	8000348 <__aeabi_dsub>
 800a48c:	4b22      	ldr	r3, [pc, #136]	@ (800a518 <__ieee754_rem_pio2+0x3f0>)
 800a48e:	2200      	movs	r2, #0
 800a490:	f7f6 f912 	bl	80006b8 <__aeabi_dmul>
 800a494:	460f      	mov	r7, r1
 800a496:	4606      	mov	r6, r0
 800a498:	f7f6 fbbe 	bl	8000c18 <__aeabi_d2iz>
 800a49c:	f7f6 f8a2 	bl	80005e4 <__aeabi_i2d>
 800a4a0:	4602      	mov	r2, r0
 800a4a2:	460b      	mov	r3, r1
 800a4a4:	4630      	mov	r0, r6
 800a4a6:	4639      	mov	r1, r7
 800a4a8:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800a4ac:	f7f5 ff4c 	bl	8000348 <__aeabi_dsub>
 800a4b0:	4b19      	ldr	r3, [pc, #100]	@ (800a518 <__ieee754_rem_pio2+0x3f0>)
 800a4b2:	2200      	movs	r2, #0
 800a4b4:	f7f6 f900 	bl	80006b8 <__aeabi_dmul>
 800a4b8:	e9cd 010a 	strd	r0, r1, [sp, #40]	@ 0x28
 800a4bc:	f10d 0930 	add.w	r9, sp, #48	@ 0x30
 800a4c0:	f04f 0803 	mov.w	r8, #3
 800a4c4:	2600      	movs	r6, #0
 800a4c6:	2700      	movs	r7, #0
 800a4c8:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 800a4cc:	4632      	mov	r2, r6
 800a4ce:	463b      	mov	r3, r7
 800a4d0:	46c2      	mov	sl, r8
 800a4d2:	f108 38ff 	add.w	r8, r8, #4294967295
 800a4d6:	f7f6 fb57 	bl	8000b88 <__aeabi_dcmpeq>
 800a4da:	2800      	cmp	r0, #0
 800a4dc:	d1f4      	bne.n	800a4c8 <__ieee754_rem_pio2+0x3a0>
 800a4de:	4b0f      	ldr	r3, [pc, #60]	@ (800a51c <__ieee754_rem_pio2+0x3f4>)
 800a4e0:	9301      	str	r3, [sp, #4]
 800a4e2:	2302      	movs	r3, #2
 800a4e4:	9300      	str	r3, [sp, #0]
 800a4e6:	462a      	mov	r2, r5
 800a4e8:	4653      	mov	r3, sl
 800a4ea:	4621      	mov	r1, r4
 800a4ec:	a806      	add	r0, sp, #24
 800a4ee:	f000 f81f 	bl	800a530 <__kernel_rem_pio2>
 800a4f2:	9b04      	ldr	r3, [sp, #16]
 800a4f4:	2b00      	cmp	r3, #0
 800a4f6:	4605      	mov	r5, r0
 800a4f8:	f6bf ae53 	bge.w	800a1a2 <__ieee754_rem_pio2+0x7a>
 800a4fc:	e9d4 2100 	ldrd	r2, r1, [r4]
 800a500:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800a504:	e9c4 2300 	strd	r2, r3, [r4]
 800a508:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
 800a50c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800a510:	e9c4 2302 	strd	r2, r3, [r4, #8]
 800a514:	e740      	b.n	800a398 <__ieee754_rem_pio2+0x270>
 800a516:	bf00      	nop
 800a518:	41700000 	.word	0x41700000
 800a51c:	0800e0bc 	.word	0x0800e0bc

0800a520 <fabs>:
 800a520:	ec51 0b10 	vmov	r0, r1, d0
 800a524:	4602      	mov	r2, r0
 800a526:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800a52a:	ec43 2b10 	vmov	d0, r2, r3
 800a52e:	4770      	bx	lr

0800a530 <__kernel_rem_pio2>:
 800a530:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a534:	ed2d 8b02 	vpush	{d8}
 800a538:	f5ad 7d19 	sub.w	sp, sp, #612	@ 0x264
 800a53c:	f112 0f14 	cmn.w	r2, #20
 800a540:	9306      	str	r3, [sp, #24]
 800a542:	9104      	str	r1, [sp, #16]
 800a544:	4bc2      	ldr	r3, [pc, #776]	@ (800a850 <__kernel_rem_pio2+0x320>)
 800a546:	99a4      	ldr	r1, [sp, #656]	@ 0x290
 800a548:	9008      	str	r0, [sp, #32]
 800a54a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800a54e:	9300      	str	r3, [sp, #0]
 800a550:	9b06      	ldr	r3, [sp, #24]
 800a552:	f103 33ff 	add.w	r3, r3, #4294967295
 800a556:	bfa8      	it	ge
 800a558:	1ed4      	subge	r4, r2, #3
 800a55a:	9305      	str	r3, [sp, #20]
 800a55c:	bfb2      	itee	lt
 800a55e:	2400      	movlt	r4, #0
 800a560:	2318      	movge	r3, #24
 800a562:	fb94 f4f3 	sdivge	r4, r4, r3
 800a566:	f06f 0317 	mvn.w	r3, #23
 800a56a:	fb04 3303 	mla	r3, r4, r3, r3
 800a56e:	eb03 0b02 	add.w	fp, r3, r2
 800a572:	9b00      	ldr	r3, [sp, #0]
 800a574:	9a05      	ldr	r2, [sp, #20]
 800a576:	ed9f 8bb2 	vldr	d8, [pc, #712]	@ 800a840 <__kernel_rem_pio2+0x310>
 800a57a:	eb03 0802 	add.w	r8, r3, r2
 800a57e:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 800a580:	1aa7      	subs	r7, r4, r2
 800a582:	ae20      	add	r6, sp, #128	@ 0x80
 800a584:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 800a588:	2500      	movs	r5, #0
 800a58a:	4545      	cmp	r5, r8
 800a58c:	dd12      	ble.n	800a5b4 <__kernel_rem_pio2+0x84>
 800a58e:	9b06      	ldr	r3, [sp, #24]
 800a590:	aa20      	add	r2, sp, #128	@ 0x80
 800a592:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 800a596:	f50d 7ae0 	add.w	sl, sp, #448	@ 0x1c0
 800a59a:	2700      	movs	r7, #0
 800a59c:	9b00      	ldr	r3, [sp, #0]
 800a59e:	429f      	cmp	r7, r3
 800a5a0:	dc2e      	bgt.n	800a600 <__kernel_rem_pio2+0xd0>
 800a5a2:	ed9f 7ba7 	vldr	d7, [pc, #668]	@ 800a840 <__kernel_rem_pio2+0x310>
 800a5a6:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800a5aa:	ed8d 7b02 	vstr	d7, [sp, #8]
 800a5ae:	46a8      	mov	r8, r5
 800a5b0:	2600      	movs	r6, #0
 800a5b2:	e01b      	b.n	800a5ec <__kernel_rem_pio2+0xbc>
 800a5b4:	42ef      	cmn	r7, r5
 800a5b6:	d407      	bmi.n	800a5c8 <__kernel_rem_pio2+0x98>
 800a5b8:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800a5bc:	f7f6 f812 	bl	80005e4 <__aeabi_i2d>
 800a5c0:	e8e6 0102 	strd	r0, r1, [r6], #8
 800a5c4:	3501      	adds	r5, #1
 800a5c6:	e7e0      	b.n	800a58a <__kernel_rem_pio2+0x5a>
 800a5c8:	ec51 0b18 	vmov	r0, r1, d8
 800a5cc:	e7f8      	b.n	800a5c0 <__kernel_rem_pio2+0x90>
 800a5ce:	e978 2302 	ldrd	r2, r3, [r8, #-8]!
 800a5d2:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 800a5d6:	f7f6 f86f 	bl	80006b8 <__aeabi_dmul>
 800a5da:	4602      	mov	r2, r0
 800a5dc:	460b      	mov	r3, r1
 800a5de:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a5e2:	f7f5 feb3 	bl	800034c <__adddf3>
 800a5e6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a5ea:	3601      	adds	r6, #1
 800a5ec:	9b05      	ldr	r3, [sp, #20]
 800a5ee:	429e      	cmp	r6, r3
 800a5f0:	dded      	ble.n	800a5ce <__kernel_rem_pio2+0x9e>
 800a5f2:	ed9d 7b02 	vldr	d7, [sp, #8]
 800a5f6:	3701      	adds	r7, #1
 800a5f8:	ecaa 7b02 	vstmia	sl!, {d7}
 800a5fc:	3508      	adds	r5, #8
 800a5fe:	e7cd      	b.n	800a59c <__kernel_rem_pio2+0x6c>
 800a600:	9b00      	ldr	r3, [sp, #0]
 800a602:	f8dd 8000 	ldr.w	r8, [sp]
 800a606:	aa0c      	add	r2, sp, #48	@ 0x30
 800a608:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800a60c:	930a      	str	r3, [sp, #40]	@ 0x28
 800a60e:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 800a610:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800a614:	9309      	str	r3, [sp, #36]	@ 0x24
 800a616:	ea4f 03c8 	mov.w	r3, r8, lsl #3
 800a61a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a61c:	ab98      	add	r3, sp, #608	@ 0x260
 800a61e:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800a622:	ed13 7b28 	vldr	d7, [r3, #-160]	@ 0xffffff60
 800a626:	ed8d 7b02 	vstr	d7, [sp, #8]
 800a62a:	ac0c      	add	r4, sp, #48	@ 0x30
 800a62c:	ab70      	add	r3, sp, #448	@ 0x1c0
 800a62e:	eb03 05c8 	add.w	r5, r3, r8, lsl #3
 800a632:	46a1      	mov	r9, r4
 800a634:	46c2      	mov	sl, r8
 800a636:	f1ba 0f00 	cmp.w	sl, #0
 800a63a:	dc77      	bgt.n	800a72c <__kernel_rem_pio2+0x1fc>
 800a63c:	4658      	mov	r0, fp
 800a63e:	ed9d 0b02 	vldr	d0, [sp, #8]
 800a642:	f000 fac5 	bl	800abd0 <scalbn>
 800a646:	ec57 6b10 	vmov	r6, r7, d0
 800a64a:	2200      	movs	r2, #0
 800a64c:	f04f 537f 	mov.w	r3, #1069547520	@ 0x3fc00000
 800a650:	4630      	mov	r0, r6
 800a652:	4639      	mov	r1, r7
 800a654:	f7f6 f830 	bl	80006b8 <__aeabi_dmul>
 800a658:	ec41 0b10 	vmov	d0, r0, r1
 800a65c:	f000 fb34 	bl	800acc8 <floor>
 800a660:	4b7c      	ldr	r3, [pc, #496]	@ (800a854 <__kernel_rem_pio2+0x324>)
 800a662:	ec51 0b10 	vmov	r0, r1, d0
 800a666:	2200      	movs	r2, #0
 800a668:	f7f6 f826 	bl	80006b8 <__aeabi_dmul>
 800a66c:	4602      	mov	r2, r0
 800a66e:	460b      	mov	r3, r1
 800a670:	4630      	mov	r0, r6
 800a672:	4639      	mov	r1, r7
 800a674:	f7f5 fe68 	bl	8000348 <__aeabi_dsub>
 800a678:	460f      	mov	r7, r1
 800a67a:	4606      	mov	r6, r0
 800a67c:	f7f6 facc 	bl	8000c18 <__aeabi_d2iz>
 800a680:	9002      	str	r0, [sp, #8]
 800a682:	f7f5 ffaf 	bl	80005e4 <__aeabi_i2d>
 800a686:	4602      	mov	r2, r0
 800a688:	460b      	mov	r3, r1
 800a68a:	4630      	mov	r0, r6
 800a68c:	4639      	mov	r1, r7
 800a68e:	f7f5 fe5b 	bl	8000348 <__aeabi_dsub>
 800a692:	f1bb 0f00 	cmp.w	fp, #0
 800a696:	4606      	mov	r6, r0
 800a698:	460f      	mov	r7, r1
 800a69a:	dd6c      	ble.n	800a776 <__kernel_rem_pio2+0x246>
 800a69c:	f108 31ff 	add.w	r1, r8, #4294967295
 800a6a0:	ab0c      	add	r3, sp, #48	@ 0x30
 800a6a2:	9d02      	ldr	r5, [sp, #8]
 800a6a4:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800a6a8:	f1cb 0018 	rsb	r0, fp, #24
 800a6ac:	fa43 f200 	asr.w	r2, r3, r0
 800a6b0:	4415      	add	r5, r2
 800a6b2:	4082      	lsls	r2, r0
 800a6b4:	1a9b      	subs	r3, r3, r2
 800a6b6:	aa0c      	add	r2, sp, #48	@ 0x30
 800a6b8:	9502      	str	r5, [sp, #8]
 800a6ba:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 800a6be:	f1cb 0217 	rsb	r2, fp, #23
 800a6c2:	fa43 f902 	asr.w	r9, r3, r2
 800a6c6:	f1b9 0f00 	cmp.w	r9, #0
 800a6ca:	dd64      	ble.n	800a796 <__kernel_rem_pio2+0x266>
 800a6cc:	9b02      	ldr	r3, [sp, #8]
 800a6ce:	2200      	movs	r2, #0
 800a6d0:	3301      	adds	r3, #1
 800a6d2:	9302      	str	r3, [sp, #8]
 800a6d4:	4615      	mov	r5, r2
 800a6d6:	f06f 417f 	mvn.w	r1, #4278190080	@ 0xff000000
 800a6da:	4590      	cmp	r8, r2
 800a6dc:	f300 80a1 	bgt.w	800a822 <__kernel_rem_pio2+0x2f2>
 800a6e0:	f1bb 0f00 	cmp.w	fp, #0
 800a6e4:	dd07      	ble.n	800a6f6 <__kernel_rem_pio2+0x1c6>
 800a6e6:	f1bb 0f01 	cmp.w	fp, #1
 800a6ea:	f000 80c1 	beq.w	800a870 <__kernel_rem_pio2+0x340>
 800a6ee:	f1bb 0f02 	cmp.w	fp, #2
 800a6f2:	f000 80c8 	beq.w	800a886 <__kernel_rem_pio2+0x356>
 800a6f6:	f1b9 0f02 	cmp.w	r9, #2
 800a6fa:	d14c      	bne.n	800a796 <__kernel_rem_pio2+0x266>
 800a6fc:	4632      	mov	r2, r6
 800a6fe:	463b      	mov	r3, r7
 800a700:	4955      	ldr	r1, [pc, #340]	@ (800a858 <__kernel_rem_pio2+0x328>)
 800a702:	2000      	movs	r0, #0
 800a704:	f7f5 fe20 	bl	8000348 <__aeabi_dsub>
 800a708:	4606      	mov	r6, r0
 800a70a:	460f      	mov	r7, r1
 800a70c:	2d00      	cmp	r5, #0
 800a70e:	d042      	beq.n	800a796 <__kernel_rem_pio2+0x266>
 800a710:	4658      	mov	r0, fp
 800a712:	ed9f 0b4d 	vldr	d0, [pc, #308]	@ 800a848 <__kernel_rem_pio2+0x318>
 800a716:	f000 fa5b 	bl	800abd0 <scalbn>
 800a71a:	4630      	mov	r0, r6
 800a71c:	4639      	mov	r1, r7
 800a71e:	ec53 2b10 	vmov	r2, r3, d0
 800a722:	f7f5 fe11 	bl	8000348 <__aeabi_dsub>
 800a726:	4606      	mov	r6, r0
 800a728:	460f      	mov	r7, r1
 800a72a:	e034      	b.n	800a796 <__kernel_rem_pio2+0x266>
 800a72c:	4b4b      	ldr	r3, [pc, #300]	@ (800a85c <__kernel_rem_pio2+0x32c>)
 800a72e:	2200      	movs	r2, #0
 800a730:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a734:	f7f5 ffc0 	bl	80006b8 <__aeabi_dmul>
 800a738:	f7f6 fa6e 	bl	8000c18 <__aeabi_d2iz>
 800a73c:	f7f5 ff52 	bl	80005e4 <__aeabi_i2d>
 800a740:	4b47      	ldr	r3, [pc, #284]	@ (800a860 <__kernel_rem_pio2+0x330>)
 800a742:	2200      	movs	r2, #0
 800a744:	4606      	mov	r6, r0
 800a746:	460f      	mov	r7, r1
 800a748:	f7f5 ffb6 	bl	80006b8 <__aeabi_dmul>
 800a74c:	4602      	mov	r2, r0
 800a74e:	460b      	mov	r3, r1
 800a750:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a754:	f7f5 fdf8 	bl	8000348 <__aeabi_dsub>
 800a758:	f7f6 fa5e 	bl	8000c18 <__aeabi_d2iz>
 800a75c:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 800a760:	f849 0b04 	str.w	r0, [r9], #4
 800a764:	4639      	mov	r1, r7
 800a766:	4630      	mov	r0, r6
 800a768:	f7f5 fdf0 	bl	800034c <__adddf3>
 800a76c:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a770:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a774:	e75f      	b.n	800a636 <__kernel_rem_pio2+0x106>
 800a776:	d107      	bne.n	800a788 <__kernel_rem_pio2+0x258>
 800a778:	f108 33ff 	add.w	r3, r8, #4294967295
 800a77c:	aa0c      	add	r2, sp, #48	@ 0x30
 800a77e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a782:	ea4f 59e3 	mov.w	r9, r3, asr #23
 800a786:	e79e      	b.n	800a6c6 <__kernel_rem_pio2+0x196>
 800a788:	4b36      	ldr	r3, [pc, #216]	@ (800a864 <__kernel_rem_pio2+0x334>)
 800a78a:	2200      	movs	r2, #0
 800a78c:	f7f6 fa1a 	bl	8000bc4 <__aeabi_dcmpge>
 800a790:	2800      	cmp	r0, #0
 800a792:	d143      	bne.n	800a81c <__kernel_rem_pio2+0x2ec>
 800a794:	4681      	mov	r9, r0
 800a796:	2200      	movs	r2, #0
 800a798:	2300      	movs	r3, #0
 800a79a:	4630      	mov	r0, r6
 800a79c:	4639      	mov	r1, r7
 800a79e:	f7f6 f9f3 	bl	8000b88 <__aeabi_dcmpeq>
 800a7a2:	2800      	cmp	r0, #0
 800a7a4:	f000 80c1 	beq.w	800a92a <__kernel_rem_pio2+0x3fa>
 800a7a8:	f108 33ff 	add.w	r3, r8, #4294967295
 800a7ac:	2200      	movs	r2, #0
 800a7ae:	9900      	ldr	r1, [sp, #0]
 800a7b0:	428b      	cmp	r3, r1
 800a7b2:	da70      	bge.n	800a896 <__kernel_rem_pio2+0x366>
 800a7b4:	2a00      	cmp	r2, #0
 800a7b6:	f000 808b 	beq.w	800a8d0 <__kernel_rem_pio2+0x3a0>
 800a7ba:	f108 38ff 	add.w	r8, r8, #4294967295
 800a7be:	ab0c      	add	r3, sp, #48	@ 0x30
 800a7c0:	f1ab 0b18 	sub.w	fp, fp, #24
 800a7c4:	f853 3028 	ldr.w	r3, [r3, r8, lsl #2]
 800a7c8:	2b00      	cmp	r3, #0
 800a7ca:	d0f6      	beq.n	800a7ba <__kernel_rem_pio2+0x28a>
 800a7cc:	4658      	mov	r0, fp
 800a7ce:	ed9f 0b1e 	vldr	d0, [pc, #120]	@ 800a848 <__kernel_rem_pio2+0x318>
 800a7d2:	f000 f9fd 	bl	800abd0 <scalbn>
 800a7d6:	f108 0301 	add.w	r3, r8, #1
 800a7da:	00da      	lsls	r2, r3, #3
 800a7dc:	9205      	str	r2, [sp, #20]
 800a7de:	ec55 4b10 	vmov	r4, r5, d0
 800a7e2:	aa70      	add	r2, sp, #448	@ 0x1c0
 800a7e4:	f8df b074 	ldr.w	fp, [pc, #116]	@ 800a85c <__kernel_rem_pio2+0x32c>
 800a7e8:	eb02 07c3 	add.w	r7, r2, r3, lsl #3
 800a7ec:	4646      	mov	r6, r8
 800a7ee:	f04f 0a00 	mov.w	sl, #0
 800a7f2:	2e00      	cmp	r6, #0
 800a7f4:	f280 80d1 	bge.w	800a99a <__kernel_rem_pio2+0x46a>
 800a7f8:	4644      	mov	r4, r8
 800a7fa:	2c00      	cmp	r4, #0
 800a7fc:	f2c0 80ff 	blt.w	800a9fe <__kernel_rem_pio2+0x4ce>
 800a800:	4b19      	ldr	r3, [pc, #100]	@ (800a868 <__kernel_rem_pio2+0x338>)
 800a802:	461f      	mov	r7, r3
 800a804:	ab70      	add	r3, sp, #448	@ 0x1c0
 800a806:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800a80a:	9306      	str	r3, [sp, #24]
 800a80c:	f04f 0a00 	mov.w	sl, #0
 800a810:	f04f 0b00 	mov.w	fp, #0
 800a814:	2600      	movs	r6, #0
 800a816:	eba8 0504 	sub.w	r5, r8, r4
 800a81a:	e0e4      	b.n	800a9e6 <__kernel_rem_pio2+0x4b6>
 800a81c:	f04f 0902 	mov.w	r9, #2
 800a820:	e754      	b.n	800a6cc <__kernel_rem_pio2+0x19c>
 800a822:	f854 3b04 	ldr.w	r3, [r4], #4
 800a826:	bb0d      	cbnz	r5, 800a86c <__kernel_rem_pio2+0x33c>
 800a828:	b123      	cbz	r3, 800a834 <__kernel_rem_pio2+0x304>
 800a82a:	f1c3 7380 	rsb	r3, r3, #16777216	@ 0x1000000
 800a82e:	f844 3c04 	str.w	r3, [r4, #-4]
 800a832:	2301      	movs	r3, #1
 800a834:	3201      	adds	r2, #1
 800a836:	461d      	mov	r5, r3
 800a838:	e74f      	b.n	800a6da <__kernel_rem_pio2+0x1aa>
 800a83a:	bf00      	nop
 800a83c:	f3af 8000 	nop.w
	...
 800a84c:	3ff00000 	.word	0x3ff00000
 800a850:	0800e208 	.word	0x0800e208
 800a854:	40200000 	.word	0x40200000
 800a858:	3ff00000 	.word	0x3ff00000
 800a85c:	3e700000 	.word	0x3e700000
 800a860:	41700000 	.word	0x41700000
 800a864:	3fe00000 	.word	0x3fe00000
 800a868:	0800e1c8 	.word	0x0800e1c8
 800a86c:	1acb      	subs	r3, r1, r3
 800a86e:	e7de      	b.n	800a82e <__kernel_rem_pio2+0x2fe>
 800a870:	f108 32ff 	add.w	r2, r8, #4294967295
 800a874:	ab0c      	add	r3, sp, #48	@ 0x30
 800a876:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a87a:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800a87e:	a90c      	add	r1, sp, #48	@ 0x30
 800a880:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800a884:	e737      	b.n	800a6f6 <__kernel_rem_pio2+0x1c6>
 800a886:	f108 32ff 	add.w	r2, r8, #4294967295
 800a88a:	ab0c      	add	r3, sp, #48	@ 0x30
 800a88c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a890:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800a894:	e7f3      	b.n	800a87e <__kernel_rem_pio2+0x34e>
 800a896:	a90c      	add	r1, sp, #48	@ 0x30
 800a898:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800a89c:	3b01      	subs	r3, #1
 800a89e:	430a      	orrs	r2, r1
 800a8a0:	e785      	b.n	800a7ae <__kernel_rem_pio2+0x27e>
 800a8a2:	3401      	adds	r4, #1
 800a8a4:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800a8a8:	2a00      	cmp	r2, #0
 800a8aa:	d0fa      	beq.n	800a8a2 <__kernel_rem_pio2+0x372>
 800a8ac:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a8ae:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800a8b2:	eb0d 0503 	add.w	r5, sp, r3
 800a8b6:	9b06      	ldr	r3, [sp, #24]
 800a8b8:	aa20      	add	r2, sp, #128	@ 0x80
 800a8ba:	4443      	add	r3, r8
 800a8bc:	f108 0701 	add.w	r7, r8, #1
 800a8c0:	3d98      	subs	r5, #152	@ 0x98
 800a8c2:	eb02 06c3 	add.w	r6, r2, r3, lsl #3
 800a8c6:	4444      	add	r4, r8
 800a8c8:	42bc      	cmp	r4, r7
 800a8ca:	da04      	bge.n	800a8d6 <__kernel_rem_pio2+0x3a6>
 800a8cc:	46a0      	mov	r8, r4
 800a8ce:	e6a2      	b.n	800a616 <__kernel_rem_pio2+0xe6>
 800a8d0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a8d2:	2401      	movs	r4, #1
 800a8d4:	e7e6      	b.n	800a8a4 <__kernel_rem_pio2+0x374>
 800a8d6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a8d8:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 800a8dc:	f7f5 fe82 	bl	80005e4 <__aeabi_i2d>
 800a8e0:	ed9f 7baf 	vldr	d7, [pc, #700]	@ 800aba0 <__kernel_rem_pio2+0x670>
 800a8e4:	e8e6 0102 	strd	r0, r1, [r6], #8
 800a8e8:	ed8d 7b02 	vstr	d7, [sp, #8]
 800a8ec:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800a8f0:	46b2      	mov	sl, r6
 800a8f2:	f04f 0800 	mov.w	r8, #0
 800a8f6:	9b05      	ldr	r3, [sp, #20]
 800a8f8:	4598      	cmp	r8, r3
 800a8fa:	dd05      	ble.n	800a908 <__kernel_rem_pio2+0x3d8>
 800a8fc:	ed9d 7b02 	vldr	d7, [sp, #8]
 800a900:	3701      	adds	r7, #1
 800a902:	eca5 7b02 	vstmia	r5!, {d7}
 800a906:	e7df      	b.n	800a8c8 <__kernel_rem_pio2+0x398>
 800a908:	e97a 2302 	ldrd	r2, r3, [sl, #-8]!
 800a90c:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 800a910:	f7f5 fed2 	bl	80006b8 <__aeabi_dmul>
 800a914:	4602      	mov	r2, r0
 800a916:	460b      	mov	r3, r1
 800a918:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a91c:	f7f5 fd16 	bl	800034c <__adddf3>
 800a920:	f108 0801 	add.w	r8, r8, #1
 800a924:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a928:	e7e5      	b.n	800a8f6 <__kernel_rem_pio2+0x3c6>
 800a92a:	f1cb 0000 	rsb	r0, fp, #0
 800a92e:	ec47 6b10 	vmov	d0, r6, r7
 800a932:	f000 f94d 	bl	800abd0 <scalbn>
 800a936:	ec55 4b10 	vmov	r4, r5, d0
 800a93a:	4b9b      	ldr	r3, [pc, #620]	@ (800aba8 <__kernel_rem_pio2+0x678>)
 800a93c:	2200      	movs	r2, #0
 800a93e:	4620      	mov	r0, r4
 800a940:	4629      	mov	r1, r5
 800a942:	f7f6 f93f 	bl	8000bc4 <__aeabi_dcmpge>
 800a946:	b300      	cbz	r0, 800a98a <__kernel_rem_pio2+0x45a>
 800a948:	4b98      	ldr	r3, [pc, #608]	@ (800abac <__kernel_rem_pio2+0x67c>)
 800a94a:	2200      	movs	r2, #0
 800a94c:	4620      	mov	r0, r4
 800a94e:	4629      	mov	r1, r5
 800a950:	f7f5 feb2 	bl	80006b8 <__aeabi_dmul>
 800a954:	f7f6 f960 	bl	8000c18 <__aeabi_d2iz>
 800a958:	4606      	mov	r6, r0
 800a95a:	f7f5 fe43 	bl	80005e4 <__aeabi_i2d>
 800a95e:	4b92      	ldr	r3, [pc, #584]	@ (800aba8 <__kernel_rem_pio2+0x678>)
 800a960:	2200      	movs	r2, #0
 800a962:	f7f5 fea9 	bl	80006b8 <__aeabi_dmul>
 800a966:	460b      	mov	r3, r1
 800a968:	4602      	mov	r2, r0
 800a96a:	4629      	mov	r1, r5
 800a96c:	4620      	mov	r0, r4
 800a96e:	f7f5 fceb 	bl	8000348 <__aeabi_dsub>
 800a972:	f7f6 f951 	bl	8000c18 <__aeabi_d2iz>
 800a976:	ab0c      	add	r3, sp, #48	@ 0x30
 800a978:	f10b 0b18 	add.w	fp, fp, #24
 800a97c:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 800a980:	f108 0801 	add.w	r8, r8, #1
 800a984:	f843 6028 	str.w	r6, [r3, r8, lsl #2]
 800a988:	e720      	b.n	800a7cc <__kernel_rem_pio2+0x29c>
 800a98a:	4620      	mov	r0, r4
 800a98c:	4629      	mov	r1, r5
 800a98e:	f7f6 f943 	bl	8000c18 <__aeabi_d2iz>
 800a992:	ab0c      	add	r3, sp, #48	@ 0x30
 800a994:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 800a998:	e718      	b.n	800a7cc <__kernel_rem_pio2+0x29c>
 800a99a:	ab0c      	add	r3, sp, #48	@ 0x30
 800a99c:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800a9a0:	f7f5 fe20 	bl	80005e4 <__aeabi_i2d>
 800a9a4:	4622      	mov	r2, r4
 800a9a6:	462b      	mov	r3, r5
 800a9a8:	f7f5 fe86 	bl	80006b8 <__aeabi_dmul>
 800a9ac:	4652      	mov	r2, sl
 800a9ae:	e967 0102 	strd	r0, r1, [r7, #-8]!
 800a9b2:	465b      	mov	r3, fp
 800a9b4:	4620      	mov	r0, r4
 800a9b6:	4629      	mov	r1, r5
 800a9b8:	f7f5 fe7e 	bl	80006b8 <__aeabi_dmul>
 800a9bc:	3e01      	subs	r6, #1
 800a9be:	4604      	mov	r4, r0
 800a9c0:	460d      	mov	r5, r1
 800a9c2:	e716      	b.n	800a7f2 <__kernel_rem_pio2+0x2c2>
 800a9c4:	9906      	ldr	r1, [sp, #24]
 800a9c6:	e8f1 2302 	ldrd	r2, r3, [r1], #8
 800a9ca:	9106      	str	r1, [sp, #24]
 800a9cc:	e8f7 0102 	ldrd	r0, r1, [r7], #8
 800a9d0:	f7f5 fe72 	bl	80006b8 <__aeabi_dmul>
 800a9d4:	4602      	mov	r2, r0
 800a9d6:	460b      	mov	r3, r1
 800a9d8:	4650      	mov	r0, sl
 800a9da:	4659      	mov	r1, fp
 800a9dc:	f7f5 fcb6 	bl	800034c <__adddf3>
 800a9e0:	3601      	adds	r6, #1
 800a9e2:	4682      	mov	sl, r0
 800a9e4:	468b      	mov	fp, r1
 800a9e6:	9b00      	ldr	r3, [sp, #0]
 800a9e8:	429e      	cmp	r6, r3
 800a9ea:	dc01      	bgt.n	800a9f0 <__kernel_rem_pio2+0x4c0>
 800a9ec:	42ae      	cmp	r6, r5
 800a9ee:	dde9      	ble.n	800a9c4 <__kernel_rem_pio2+0x494>
 800a9f0:	ab48      	add	r3, sp, #288	@ 0x120
 800a9f2:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 800a9f6:	e9c5 ab00 	strd	sl, fp, [r5]
 800a9fa:	3c01      	subs	r4, #1
 800a9fc:	e6fd      	b.n	800a7fa <__kernel_rem_pio2+0x2ca>
 800a9fe:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 800aa00:	2b02      	cmp	r3, #2
 800aa02:	dc0b      	bgt.n	800aa1c <__kernel_rem_pio2+0x4ec>
 800aa04:	2b00      	cmp	r3, #0
 800aa06:	dc35      	bgt.n	800aa74 <__kernel_rem_pio2+0x544>
 800aa08:	d059      	beq.n	800aabe <__kernel_rem_pio2+0x58e>
 800aa0a:	9b02      	ldr	r3, [sp, #8]
 800aa0c:	f003 0007 	and.w	r0, r3, #7
 800aa10:	f50d 7d19 	add.w	sp, sp, #612	@ 0x264
 800aa14:	ecbd 8b02 	vpop	{d8}
 800aa18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aa1c:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 800aa1e:	2b03      	cmp	r3, #3
 800aa20:	d1f3      	bne.n	800aa0a <__kernel_rem_pio2+0x4da>
 800aa22:	9b05      	ldr	r3, [sp, #20]
 800aa24:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800aa28:	eb0d 0403 	add.w	r4, sp, r3
 800aa2c:	f5a4 74a4 	sub.w	r4, r4, #328	@ 0x148
 800aa30:	4625      	mov	r5, r4
 800aa32:	46c2      	mov	sl, r8
 800aa34:	f1ba 0f00 	cmp.w	sl, #0
 800aa38:	dc69      	bgt.n	800ab0e <__kernel_rem_pio2+0x5de>
 800aa3a:	4645      	mov	r5, r8
 800aa3c:	2d01      	cmp	r5, #1
 800aa3e:	f300 8087 	bgt.w	800ab50 <__kernel_rem_pio2+0x620>
 800aa42:	9c05      	ldr	r4, [sp, #20]
 800aa44:	ab48      	add	r3, sp, #288	@ 0x120
 800aa46:	441c      	add	r4, r3
 800aa48:	2000      	movs	r0, #0
 800aa4a:	2100      	movs	r1, #0
 800aa4c:	f1b8 0f01 	cmp.w	r8, #1
 800aa50:	f300 809c 	bgt.w	800ab8c <__kernel_rem_pio2+0x65c>
 800aa54:	e9dd 5648 	ldrd	r5, r6, [sp, #288]	@ 0x120
 800aa58:	e9dd 784a 	ldrd	r7, r8, [sp, #296]	@ 0x128
 800aa5c:	f1b9 0f00 	cmp.w	r9, #0
 800aa60:	f040 80a6 	bne.w	800abb0 <__kernel_rem_pio2+0x680>
 800aa64:	9b04      	ldr	r3, [sp, #16]
 800aa66:	e9c3 5600 	strd	r5, r6, [r3]
 800aa6a:	e9c3 7802 	strd	r7, r8, [r3, #8]
 800aa6e:	e9c3 0104 	strd	r0, r1, [r3, #16]
 800aa72:	e7ca      	b.n	800aa0a <__kernel_rem_pio2+0x4da>
 800aa74:	9d05      	ldr	r5, [sp, #20]
 800aa76:	ab48      	add	r3, sp, #288	@ 0x120
 800aa78:	441d      	add	r5, r3
 800aa7a:	4644      	mov	r4, r8
 800aa7c:	2000      	movs	r0, #0
 800aa7e:	2100      	movs	r1, #0
 800aa80:	2c00      	cmp	r4, #0
 800aa82:	da35      	bge.n	800aaf0 <__kernel_rem_pio2+0x5c0>
 800aa84:	f1b9 0f00 	cmp.w	r9, #0
 800aa88:	d038      	beq.n	800aafc <__kernel_rem_pio2+0x5cc>
 800aa8a:	4602      	mov	r2, r0
 800aa8c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800aa90:	9c04      	ldr	r4, [sp, #16]
 800aa92:	e9c4 2300 	strd	r2, r3, [r4]
 800aa96:	4602      	mov	r2, r0
 800aa98:	460b      	mov	r3, r1
 800aa9a:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	@ 0x120
 800aa9e:	f7f5 fc53 	bl	8000348 <__aeabi_dsub>
 800aaa2:	ad4a      	add	r5, sp, #296	@ 0x128
 800aaa4:	2401      	movs	r4, #1
 800aaa6:	45a0      	cmp	r8, r4
 800aaa8:	da2b      	bge.n	800ab02 <__kernel_rem_pio2+0x5d2>
 800aaaa:	f1b9 0f00 	cmp.w	r9, #0
 800aaae:	d002      	beq.n	800aab6 <__kernel_rem_pio2+0x586>
 800aab0:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800aab4:	4619      	mov	r1, r3
 800aab6:	9b04      	ldr	r3, [sp, #16]
 800aab8:	e9c3 0102 	strd	r0, r1, [r3, #8]
 800aabc:	e7a5      	b.n	800aa0a <__kernel_rem_pio2+0x4da>
 800aabe:	9c05      	ldr	r4, [sp, #20]
 800aac0:	ab48      	add	r3, sp, #288	@ 0x120
 800aac2:	441c      	add	r4, r3
 800aac4:	2000      	movs	r0, #0
 800aac6:	2100      	movs	r1, #0
 800aac8:	f1b8 0f00 	cmp.w	r8, #0
 800aacc:	da09      	bge.n	800aae2 <__kernel_rem_pio2+0x5b2>
 800aace:	f1b9 0f00 	cmp.w	r9, #0
 800aad2:	d002      	beq.n	800aada <__kernel_rem_pio2+0x5aa>
 800aad4:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800aad8:	4619      	mov	r1, r3
 800aada:	9b04      	ldr	r3, [sp, #16]
 800aadc:	e9c3 0100 	strd	r0, r1, [r3]
 800aae0:	e793      	b.n	800aa0a <__kernel_rem_pio2+0x4da>
 800aae2:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800aae6:	f7f5 fc31 	bl	800034c <__adddf3>
 800aaea:	f108 38ff 	add.w	r8, r8, #4294967295
 800aaee:	e7eb      	b.n	800aac8 <__kernel_rem_pio2+0x598>
 800aaf0:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 800aaf4:	f7f5 fc2a 	bl	800034c <__adddf3>
 800aaf8:	3c01      	subs	r4, #1
 800aafa:	e7c1      	b.n	800aa80 <__kernel_rem_pio2+0x550>
 800aafc:	4602      	mov	r2, r0
 800aafe:	460b      	mov	r3, r1
 800ab00:	e7c6      	b.n	800aa90 <__kernel_rem_pio2+0x560>
 800ab02:	e8f5 2302 	ldrd	r2, r3, [r5], #8
 800ab06:	f7f5 fc21 	bl	800034c <__adddf3>
 800ab0a:	3401      	adds	r4, #1
 800ab0c:	e7cb      	b.n	800aaa6 <__kernel_rem_pio2+0x576>
 800ab0e:	ed35 7b02 	vldmdb	r5!, {d7}
 800ab12:	ed8d 7b00 	vstr	d7, [sp]
 800ab16:	ed95 7b02 	vldr	d7, [r5, #8]
 800ab1a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800ab1e:	ec53 2b17 	vmov	r2, r3, d7
 800ab22:	ed8d 7b06 	vstr	d7, [sp, #24]
 800ab26:	f7f5 fc11 	bl	800034c <__adddf3>
 800ab2a:	4602      	mov	r2, r0
 800ab2c:	460b      	mov	r3, r1
 800ab2e:	4606      	mov	r6, r0
 800ab30:	460f      	mov	r7, r1
 800ab32:	e9dd 0100 	ldrd	r0, r1, [sp]
 800ab36:	f7f5 fc07 	bl	8000348 <__aeabi_dsub>
 800ab3a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800ab3e:	f7f5 fc05 	bl	800034c <__adddf3>
 800ab42:	f10a 3aff 	add.w	sl, sl, #4294967295
 800ab46:	e9c5 0102 	strd	r0, r1, [r5, #8]
 800ab4a:	e9c5 6700 	strd	r6, r7, [r5]
 800ab4e:	e771      	b.n	800aa34 <__kernel_rem_pio2+0x504>
 800ab50:	ed34 7b02 	vldmdb	r4!, {d7}
 800ab54:	e9d4 ab02 	ldrd	sl, fp, [r4, #8]
 800ab58:	ec51 0b17 	vmov	r0, r1, d7
 800ab5c:	4652      	mov	r2, sl
 800ab5e:	465b      	mov	r3, fp
 800ab60:	ed8d 7b00 	vstr	d7, [sp]
 800ab64:	f7f5 fbf2 	bl	800034c <__adddf3>
 800ab68:	4602      	mov	r2, r0
 800ab6a:	460b      	mov	r3, r1
 800ab6c:	4606      	mov	r6, r0
 800ab6e:	460f      	mov	r7, r1
 800ab70:	e9dd 0100 	ldrd	r0, r1, [sp]
 800ab74:	f7f5 fbe8 	bl	8000348 <__aeabi_dsub>
 800ab78:	4652      	mov	r2, sl
 800ab7a:	465b      	mov	r3, fp
 800ab7c:	f7f5 fbe6 	bl	800034c <__adddf3>
 800ab80:	3d01      	subs	r5, #1
 800ab82:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800ab86:	e9c4 6700 	strd	r6, r7, [r4]
 800ab8a:	e757      	b.n	800aa3c <__kernel_rem_pio2+0x50c>
 800ab8c:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800ab90:	f7f5 fbdc 	bl	800034c <__adddf3>
 800ab94:	f108 38ff 	add.w	r8, r8, #4294967295
 800ab98:	e758      	b.n	800aa4c <__kernel_rem_pio2+0x51c>
 800ab9a:	bf00      	nop
 800ab9c:	f3af 8000 	nop.w
	...
 800aba8:	41700000 	.word	0x41700000
 800abac:	3e700000 	.word	0x3e700000
 800abb0:	9b04      	ldr	r3, [sp, #16]
 800abb2:	9a04      	ldr	r2, [sp, #16]
 800abb4:	601d      	str	r5, [r3, #0]
 800abb6:	f106 4400 	add.w	r4, r6, #2147483648	@ 0x80000000
 800abba:	605c      	str	r4, [r3, #4]
 800abbc:	609f      	str	r7, [r3, #8]
 800abbe:	f108 4300 	add.w	r3, r8, #2147483648	@ 0x80000000
 800abc2:	60d3      	str	r3, [r2, #12]
 800abc4:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800abc8:	6110      	str	r0, [r2, #16]
 800abca:	6153      	str	r3, [r2, #20]
 800abcc:	e71d      	b.n	800aa0a <__kernel_rem_pio2+0x4da>
 800abce:	bf00      	nop

0800abd0 <scalbn>:
 800abd0:	b570      	push	{r4, r5, r6, lr}
 800abd2:	ec55 4b10 	vmov	r4, r5, d0
 800abd6:	f3c5 510a 	ubfx	r1, r5, #20, #11
 800abda:	4606      	mov	r6, r0
 800abdc:	462b      	mov	r3, r5
 800abde:	b991      	cbnz	r1, 800ac06 <scalbn+0x36>
 800abe0:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 800abe4:	4323      	orrs	r3, r4
 800abe6:	d03b      	beq.n	800ac60 <scalbn+0x90>
 800abe8:	4b33      	ldr	r3, [pc, #204]	@ (800acb8 <scalbn+0xe8>)
 800abea:	4620      	mov	r0, r4
 800abec:	4629      	mov	r1, r5
 800abee:	2200      	movs	r2, #0
 800abf0:	f7f5 fd62 	bl	80006b8 <__aeabi_dmul>
 800abf4:	4b31      	ldr	r3, [pc, #196]	@ (800acbc <scalbn+0xec>)
 800abf6:	429e      	cmp	r6, r3
 800abf8:	4604      	mov	r4, r0
 800abfa:	460d      	mov	r5, r1
 800abfc:	da0f      	bge.n	800ac1e <scalbn+0x4e>
 800abfe:	a326      	add	r3, pc, #152	@ (adr r3, 800ac98 <scalbn+0xc8>)
 800ac00:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac04:	e01e      	b.n	800ac44 <scalbn+0x74>
 800ac06:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 800ac0a:	4291      	cmp	r1, r2
 800ac0c:	d10b      	bne.n	800ac26 <scalbn+0x56>
 800ac0e:	4622      	mov	r2, r4
 800ac10:	4620      	mov	r0, r4
 800ac12:	4629      	mov	r1, r5
 800ac14:	f7f5 fb9a 	bl	800034c <__adddf3>
 800ac18:	4604      	mov	r4, r0
 800ac1a:	460d      	mov	r5, r1
 800ac1c:	e020      	b.n	800ac60 <scalbn+0x90>
 800ac1e:	460b      	mov	r3, r1
 800ac20:	f3c1 510a 	ubfx	r1, r1, #20, #11
 800ac24:	3936      	subs	r1, #54	@ 0x36
 800ac26:	f24c 3250 	movw	r2, #50000	@ 0xc350
 800ac2a:	4296      	cmp	r6, r2
 800ac2c:	dd0d      	ble.n	800ac4a <scalbn+0x7a>
 800ac2e:	2d00      	cmp	r5, #0
 800ac30:	a11b      	add	r1, pc, #108	@ (adr r1, 800aca0 <scalbn+0xd0>)
 800ac32:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ac36:	da02      	bge.n	800ac3e <scalbn+0x6e>
 800ac38:	a11b      	add	r1, pc, #108	@ (adr r1, 800aca8 <scalbn+0xd8>)
 800ac3a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ac3e:	a318      	add	r3, pc, #96	@ (adr r3, 800aca0 <scalbn+0xd0>)
 800ac40:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac44:	f7f5 fd38 	bl	80006b8 <__aeabi_dmul>
 800ac48:	e7e6      	b.n	800ac18 <scalbn+0x48>
 800ac4a:	1872      	adds	r2, r6, r1
 800ac4c:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 800ac50:	428a      	cmp	r2, r1
 800ac52:	dcec      	bgt.n	800ac2e <scalbn+0x5e>
 800ac54:	2a00      	cmp	r2, #0
 800ac56:	dd06      	ble.n	800ac66 <scalbn+0x96>
 800ac58:	f36f 531e 	bfc	r3, #20, #11
 800ac5c:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800ac60:	ec45 4b10 	vmov	d0, r4, r5
 800ac64:	bd70      	pop	{r4, r5, r6, pc}
 800ac66:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 800ac6a:	da08      	bge.n	800ac7e <scalbn+0xae>
 800ac6c:	2d00      	cmp	r5, #0
 800ac6e:	a10a      	add	r1, pc, #40	@ (adr r1, 800ac98 <scalbn+0xc8>)
 800ac70:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ac74:	dac3      	bge.n	800abfe <scalbn+0x2e>
 800ac76:	a10e      	add	r1, pc, #56	@ (adr r1, 800acb0 <scalbn+0xe0>)
 800ac78:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ac7c:	e7bf      	b.n	800abfe <scalbn+0x2e>
 800ac7e:	3236      	adds	r2, #54	@ 0x36
 800ac80:	f36f 531e 	bfc	r3, #20, #11
 800ac84:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800ac88:	4620      	mov	r0, r4
 800ac8a:	4b0d      	ldr	r3, [pc, #52]	@ (800acc0 <scalbn+0xf0>)
 800ac8c:	4629      	mov	r1, r5
 800ac8e:	2200      	movs	r2, #0
 800ac90:	e7d8      	b.n	800ac44 <scalbn+0x74>
 800ac92:	bf00      	nop
 800ac94:	f3af 8000 	nop.w
 800ac98:	c2f8f359 	.word	0xc2f8f359
 800ac9c:	01a56e1f 	.word	0x01a56e1f
 800aca0:	8800759c 	.word	0x8800759c
 800aca4:	7e37e43c 	.word	0x7e37e43c
 800aca8:	8800759c 	.word	0x8800759c
 800acac:	fe37e43c 	.word	0xfe37e43c
 800acb0:	c2f8f359 	.word	0xc2f8f359
 800acb4:	81a56e1f 	.word	0x81a56e1f
 800acb8:	43500000 	.word	0x43500000
 800acbc:	ffff3cb0 	.word	0xffff3cb0
 800acc0:	3c900000 	.word	0x3c900000
 800acc4:	00000000 	.word	0x00000000

0800acc8 <floor>:
 800acc8:	ec51 0b10 	vmov	r0, r1, d0
 800accc:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800acd0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800acd4:	f2a3 36ff 	subw	r6, r3, #1023	@ 0x3ff
 800acd8:	2e13      	cmp	r6, #19
 800acda:	460c      	mov	r4, r1
 800acdc:	4605      	mov	r5, r0
 800acde:	4680      	mov	r8, r0
 800ace0:	dc34      	bgt.n	800ad4c <floor+0x84>
 800ace2:	2e00      	cmp	r6, #0
 800ace4:	da17      	bge.n	800ad16 <floor+0x4e>
 800ace6:	a332      	add	r3, pc, #200	@ (adr r3, 800adb0 <floor+0xe8>)
 800ace8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800acec:	f7f5 fb2e 	bl	800034c <__adddf3>
 800acf0:	2200      	movs	r2, #0
 800acf2:	2300      	movs	r3, #0
 800acf4:	f7f5 ff70 	bl	8000bd8 <__aeabi_dcmpgt>
 800acf8:	b150      	cbz	r0, 800ad10 <floor+0x48>
 800acfa:	2c00      	cmp	r4, #0
 800acfc:	da55      	bge.n	800adaa <floor+0xe2>
 800acfe:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
 800ad02:	432c      	orrs	r4, r5
 800ad04:	2500      	movs	r5, #0
 800ad06:	42ac      	cmp	r4, r5
 800ad08:	4c2b      	ldr	r4, [pc, #172]	@ (800adb8 <floor+0xf0>)
 800ad0a:	bf08      	it	eq
 800ad0c:	f04f 4400 	moveq.w	r4, #2147483648	@ 0x80000000
 800ad10:	4621      	mov	r1, r4
 800ad12:	4628      	mov	r0, r5
 800ad14:	e023      	b.n	800ad5e <floor+0x96>
 800ad16:	4f29      	ldr	r7, [pc, #164]	@ (800adbc <floor+0xf4>)
 800ad18:	4137      	asrs	r7, r6
 800ad1a:	ea01 0307 	and.w	r3, r1, r7
 800ad1e:	4303      	orrs	r3, r0
 800ad20:	d01d      	beq.n	800ad5e <floor+0x96>
 800ad22:	a323      	add	r3, pc, #140	@ (adr r3, 800adb0 <floor+0xe8>)
 800ad24:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad28:	f7f5 fb10 	bl	800034c <__adddf3>
 800ad2c:	2200      	movs	r2, #0
 800ad2e:	2300      	movs	r3, #0
 800ad30:	f7f5 ff52 	bl	8000bd8 <__aeabi_dcmpgt>
 800ad34:	2800      	cmp	r0, #0
 800ad36:	d0eb      	beq.n	800ad10 <floor+0x48>
 800ad38:	2c00      	cmp	r4, #0
 800ad3a:	bfbe      	ittt	lt
 800ad3c:	f44f 1380 	movlt.w	r3, #1048576	@ 0x100000
 800ad40:	4133      	asrlt	r3, r6
 800ad42:	18e4      	addlt	r4, r4, r3
 800ad44:	ea24 0407 	bic.w	r4, r4, r7
 800ad48:	2500      	movs	r5, #0
 800ad4a:	e7e1      	b.n	800ad10 <floor+0x48>
 800ad4c:	2e33      	cmp	r6, #51	@ 0x33
 800ad4e:	dd0a      	ble.n	800ad66 <floor+0x9e>
 800ad50:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
 800ad54:	d103      	bne.n	800ad5e <floor+0x96>
 800ad56:	4602      	mov	r2, r0
 800ad58:	460b      	mov	r3, r1
 800ad5a:	f7f5 faf7 	bl	800034c <__adddf3>
 800ad5e:	ec41 0b10 	vmov	d0, r0, r1
 800ad62:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ad66:	f2a3 4313 	subw	r3, r3, #1043	@ 0x413
 800ad6a:	f04f 37ff 	mov.w	r7, #4294967295
 800ad6e:	40df      	lsrs	r7, r3
 800ad70:	4207      	tst	r7, r0
 800ad72:	d0f4      	beq.n	800ad5e <floor+0x96>
 800ad74:	a30e      	add	r3, pc, #56	@ (adr r3, 800adb0 <floor+0xe8>)
 800ad76:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad7a:	f7f5 fae7 	bl	800034c <__adddf3>
 800ad7e:	2200      	movs	r2, #0
 800ad80:	2300      	movs	r3, #0
 800ad82:	f7f5 ff29 	bl	8000bd8 <__aeabi_dcmpgt>
 800ad86:	2800      	cmp	r0, #0
 800ad88:	d0c2      	beq.n	800ad10 <floor+0x48>
 800ad8a:	2c00      	cmp	r4, #0
 800ad8c:	da0a      	bge.n	800ada4 <floor+0xdc>
 800ad8e:	2e14      	cmp	r6, #20
 800ad90:	d101      	bne.n	800ad96 <floor+0xce>
 800ad92:	3401      	adds	r4, #1
 800ad94:	e006      	b.n	800ada4 <floor+0xdc>
 800ad96:	f1c6 0634 	rsb	r6, r6, #52	@ 0x34
 800ad9a:	2301      	movs	r3, #1
 800ad9c:	40b3      	lsls	r3, r6
 800ad9e:	441d      	add	r5, r3
 800ada0:	4545      	cmp	r5, r8
 800ada2:	d3f6      	bcc.n	800ad92 <floor+0xca>
 800ada4:	ea25 0507 	bic.w	r5, r5, r7
 800ada8:	e7b2      	b.n	800ad10 <floor+0x48>
 800adaa:	2500      	movs	r5, #0
 800adac:	462c      	mov	r4, r5
 800adae:	e7af      	b.n	800ad10 <floor+0x48>
 800adb0:	8800759c 	.word	0x8800759c
 800adb4:	7e37e43c 	.word	0x7e37e43c
 800adb8:	bff00000 	.word	0xbff00000
 800adbc:	000fffff 	.word	0x000fffff

0800adc0 <_init>:
 800adc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800adc2:	bf00      	nop
 800adc4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800adc6:	bc08      	pop	{r3}
 800adc8:	469e      	mov	lr, r3
 800adca:	4770      	bx	lr

0800adcc <_fini>:
 800adcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800adce:	bf00      	nop
 800add0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800add2:	bc08      	pop	{r3}
 800add4:	469e      	mov	lr, r3
 800add6:	4770      	bx	lr
