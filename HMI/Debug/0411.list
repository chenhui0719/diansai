
0411.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006a78  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000268  08006c08  08006c08  00007c08  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006e70  08006e70  00008074  2**0
                  CONTENTS
  4 .ARM          00000008  08006e70  08006e70  00007e70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006e78  08006e78  00008074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006e78  08006e78  00007e78  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006e7c  08006e7c  00007e7c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08006e80  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00008074  2**0
                  CONTENTS
 10 .bss          00000fdc  20000074  20000074  00008074  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20001050  20001050  00008074  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00008074  2**0
                  CONTENTS, READONLY
 13 .debug_info   000119ce  00000000  00000000  000080a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002df5  00000000  00000000  00019a72  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000fb0  00000000  00000000  0001c868  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000c1a  00000000  00000000  0001d818  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002471f  00000000  00000000  0001e432  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00014eee  00000000  00000000  00042b51  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000dd5d5  00000000  00000000  00057a3f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00135014  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004938  00000000  00000000  00135058  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000005f  00000000  00000000  00139990  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000074 	.word	0x20000074
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08006bf0 	.word	0x08006bf0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000078 	.word	0x20000078
 80001cc:	08006bf0 	.word	0x08006bf0

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_drsub>:
 8000270:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000274:	e002      	b.n	800027c <__adddf3>
 8000276:	bf00      	nop

08000278 <__aeabi_dsub>:
 8000278:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800027c <__adddf3>:
 800027c:	b530      	push	{r4, r5, lr}
 800027e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000282:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000286:	ea94 0f05 	teq	r4, r5
 800028a:	bf08      	it	eq
 800028c:	ea90 0f02 	teqeq	r0, r2
 8000290:	bf1f      	itttt	ne
 8000292:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000296:	ea55 0c02 	orrsne.w	ip, r5, r2
 800029a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800029e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002a2:	f000 80e2 	beq.w	800046a <__adddf3+0x1ee>
 80002a6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002aa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ae:	bfb8      	it	lt
 80002b0:	426d      	neglt	r5, r5
 80002b2:	dd0c      	ble.n	80002ce <__adddf3+0x52>
 80002b4:	442c      	add	r4, r5
 80002b6:	ea80 0202 	eor.w	r2, r0, r2
 80002ba:	ea81 0303 	eor.w	r3, r1, r3
 80002be:	ea82 0000 	eor.w	r0, r2, r0
 80002c2:	ea83 0101 	eor.w	r1, r3, r1
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	2d36      	cmp	r5, #54	@ 0x36
 80002d0:	bf88      	it	hi
 80002d2:	bd30      	pophi	{r4, r5, pc}
 80002d4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002dc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002e0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002e4:	d002      	beq.n	80002ec <__adddf3+0x70>
 80002e6:	4240      	negs	r0, r0
 80002e8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ec:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80002f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002f4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002f8:	d002      	beq.n	8000300 <__adddf3+0x84>
 80002fa:	4252      	negs	r2, r2
 80002fc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000300:	ea94 0f05 	teq	r4, r5
 8000304:	f000 80a7 	beq.w	8000456 <__adddf3+0x1da>
 8000308:	f1a4 0401 	sub.w	r4, r4, #1
 800030c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000310:	db0d      	blt.n	800032e <__adddf3+0xb2>
 8000312:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000316:	fa22 f205 	lsr.w	r2, r2, r5
 800031a:	1880      	adds	r0, r0, r2
 800031c:	f141 0100 	adc.w	r1, r1, #0
 8000320:	fa03 f20e 	lsl.w	r2, r3, lr
 8000324:	1880      	adds	r0, r0, r2
 8000326:	fa43 f305 	asr.w	r3, r3, r5
 800032a:	4159      	adcs	r1, r3
 800032c:	e00e      	b.n	800034c <__adddf3+0xd0>
 800032e:	f1a5 0520 	sub.w	r5, r5, #32
 8000332:	f10e 0e20 	add.w	lr, lr, #32
 8000336:	2a01      	cmp	r2, #1
 8000338:	fa03 fc0e 	lsl.w	ip, r3, lr
 800033c:	bf28      	it	cs
 800033e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000342:	fa43 f305 	asr.w	r3, r3, r5
 8000346:	18c0      	adds	r0, r0, r3
 8000348:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800034c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000350:	d507      	bpl.n	8000362 <__adddf3+0xe6>
 8000352:	f04f 0e00 	mov.w	lr, #0
 8000356:	f1dc 0c00 	rsbs	ip, ip, #0
 800035a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800035e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000362:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000366:	d31b      	bcc.n	80003a0 <__adddf3+0x124>
 8000368:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800036c:	d30c      	bcc.n	8000388 <__adddf3+0x10c>
 800036e:	0849      	lsrs	r1, r1, #1
 8000370:	ea5f 0030 	movs.w	r0, r0, rrx
 8000374:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000378:	f104 0401 	add.w	r4, r4, #1
 800037c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000380:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000384:	f080 809a 	bcs.w	80004bc <__adddf3+0x240>
 8000388:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800038c:	bf08      	it	eq
 800038e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000392:	f150 0000 	adcs.w	r0, r0, #0
 8000396:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800039a:	ea41 0105 	orr.w	r1, r1, r5
 800039e:	bd30      	pop	{r4, r5, pc}
 80003a0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003a4:	4140      	adcs	r0, r0
 80003a6:	eb41 0101 	adc.w	r1, r1, r1
 80003aa:	3c01      	subs	r4, #1
 80003ac:	bf28      	it	cs
 80003ae:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003b2:	d2e9      	bcs.n	8000388 <__adddf3+0x10c>
 80003b4:	f091 0f00 	teq	r1, #0
 80003b8:	bf04      	itt	eq
 80003ba:	4601      	moveq	r1, r0
 80003bc:	2000      	moveq	r0, #0
 80003be:	fab1 f381 	clz	r3, r1
 80003c2:	bf08      	it	eq
 80003c4:	3320      	addeq	r3, #32
 80003c6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ca:	f1b3 0220 	subs.w	r2, r3, #32
 80003ce:	da0c      	bge.n	80003ea <__adddf3+0x16e>
 80003d0:	320c      	adds	r2, #12
 80003d2:	dd08      	ble.n	80003e6 <__adddf3+0x16a>
 80003d4:	f102 0c14 	add.w	ip, r2, #20
 80003d8:	f1c2 020c 	rsb	r2, r2, #12
 80003dc:	fa01 f00c 	lsl.w	r0, r1, ip
 80003e0:	fa21 f102 	lsr.w	r1, r1, r2
 80003e4:	e00c      	b.n	8000400 <__adddf3+0x184>
 80003e6:	f102 0214 	add.w	r2, r2, #20
 80003ea:	bfd8      	it	le
 80003ec:	f1c2 0c20 	rsble	ip, r2, #32
 80003f0:	fa01 f102 	lsl.w	r1, r1, r2
 80003f4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003f8:	bfdc      	itt	le
 80003fa:	ea41 010c 	orrle.w	r1, r1, ip
 80003fe:	4090      	lslle	r0, r2
 8000400:	1ae4      	subs	r4, r4, r3
 8000402:	bfa2      	ittt	ge
 8000404:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000408:	4329      	orrge	r1, r5
 800040a:	bd30      	popge	{r4, r5, pc}
 800040c:	ea6f 0404 	mvn.w	r4, r4
 8000410:	3c1f      	subs	r4, #31
 8000412:	da1c      	bge.n	800044e <__adddf3+0x1d2>
 8000414:	340c      	adds	r4, #12
 8000416:	dc0e      	bgt.n	8000436 <__adddf3+0x1ba>
 8000418:	f104 0414 	add.w	r4, r4, #20
 800041c:	f1c4 0220 	rsb	r2, r4, #32
 8000420:	fa20 f004 	lsr.w	r0, r0, r4
 8000424:	fa01 f302 	lsl.w	r3, r1, r2
 8000428:	ea40 0003 	orr.w	r0, r0, r3
 800042c:	fa21 f304 	lsr.w	r3, r1, r4
 8000430:	ea45 0103 	orr.w	r1, r5, r3
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	f1c4 040c 	rsb	r4, r4, #12
 800043a:	f1c4 0220 	rsb	r2, r4, #32
 800043e:	fa20 f002 	lsr.w	r0, r0, r2
 8000442:	fa01 f304 	lsl.w	r3, r1, r4
 8000446:	ea40 0003 	orr.w	r0, r0, r3
 800044a:	4629      	mov	r1, r5
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	fa21 f004 	lsr.w	r0, r1, r4
 8000452:	4629      	mov	r1, r5
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f094 0f00 	teq	r4, #0
 800045a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800045e:	bf06      	itte	eq
 8000460:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000464:	3401      	addeq	r4, #1
 8000466:	3d01      	subne	r5, #1
 8000468:	e74e      	b.n	8000308 <__adddf3+0x8c>
 800046a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800046e:	bf18      	it	ne
 8000470:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000474:	d029      	beq.n	80004ca <__adddf3+0x24e>
 8000476:	ea94 0f05 	teq	r4, r5
 800047a:	bf08      	it	eq
 800047c:	ea90 0f02 	teqeq	r0, r2
 8000480:	d005      	beq.n	800048e <__adddf3+0x212>
 8000482:	ea54 0c00 	orrs.w	ip, r4, r0
 8000486:	bf04      	itt	eq
 8000488:	4619      	moveq	r1, r3
 800048a:	4610      	moveq	r0, r2
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	ea91 0f03 	teq	r1, r3
 8000492:	bf1e      	ittt	ne
 8000494:	2100      	movne	r1, #0
 8000496:	2000      	movne	r0, #0
 8000498:	bd30      	popne	{r4, r5, pc}
 800049a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800049e:	d105      	bne.n	80004ac <__adddf3+0x230>
 80004a0:	0040      	lsls	r0, r0, #1
 80004a2:	4149      	adcs	r1, r1
 80004a4:	bf28      	it	cs
 80004a6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004aa:	bd30      	pop	{r4, r5, pc}
 80004ac:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004b0:	bf3c      	itt	cc
 80004b2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004b6:	bd30      	popcc	{r4, r5, pc}
 80004b8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004bc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004c0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004c4:	f04f 0000 	mov.w	r0, #0
 80004c8:	bd30      	pop	{r4, r5, pc}
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf1a      	itte	ne
 80004d0:	4619      	movne	r1, r3
 80004d2:	4610      	movne	r0, r2
 80004d4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004d8:	bf1c      	itt	ne
 80004da:	460b      	movne	r3, r1
 80004dc:	4602      	movne	r2, r0
 80004de:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004e2:	bf06      	itte	eq
 80004e4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004e8:	ea91 0f03 	teqeq	r1, r3
 80004ec:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80004f0:	bd30      	pop	{r4, r5, pc}
 80004f2:	bf00      	nop

080004f4 <__aeabi_ui2d>:
 80004f4:	f090 0f00 	teq	r0, #0
 80004f8:	bf04      	itt	eq
 80004fa:	2100      	moveq	r1, #0
 80004fc:	4770      	bxeq	lr
 80004fe:	b530      	push	{r4, r5, lr}
 8000500:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000504:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000508:	f04f 0500 	mov.w	r5, #0
 800050c:	f04f 0100 	mov.w	r1, #0
 8000510:	e750      	b.n	80003b4 <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_i2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000528:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800052c:	bf48      	it	mi
 800052e:	4240      	negmi	r0, r0
 8000530:	f04f 0100 	mov.w	r1, #0
 8000534:	e73e      	b.n	80003b4 <__adddf3+0x138>
 8000536:	bf00      	nop

08000538 <__aeabi_f2d>:
 8000538:	0042      	lsls	r2, r0, #1
 800053a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800053e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000542:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000546:	bf1f      	itttt	ne
 8000548:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800054c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000550:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000554:	4770      	bxne	lr
 8000556:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800055a:	bf08      	it	eq
 800055c:	4770      	bxeq	lr
 800055e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000562:	bf04      	itt	eq
 8000564:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000568:	4770      	bxeq	lr
 800056a:	b530      	push	{r4, r5, lr}
 800056c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000570:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000574:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000578:	e71c      	b.n	80003b4 <__adddf3+0x138>
 800057a:	bf00      	nop

0800057c <__aeabi_ul2d>:
 800057c:	ea50 0201 	orrs.w	r2, r0, r1
 8000580:	bf08      	it	eq
 8000582:	4770      	bxeq	lr
 8000584:	b530      	push	{r4, r5, lr}
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	e00a      	b.n	80005a2 <__aeabi_l2d+0x16>

0800058c <__aeabi_l2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800059a:	d502      	bpl.n	80005a2 <__aeabi_l2d+0x16>
 800059c:	4240      	negs	r0, r0
 800059e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005a2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005a6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005aa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ae:	f43f aed8 	beq.w	8000362 <__adddf3+0xe6>
 80005b2:	f04f 0203 	mov.w	r2, #3
 80005b6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ba:	bf18      	it	ne
 80005bc:	3203      	addne	r2, #3
 80005be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005c2:	bf18      	it	ne
 80005c4:	3203      	addne	r2, #3
 80005c6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ca:	f1c2 0320 	rsb	r3, r2, #32
 80005ce:	fa00 fc03 	lsl.w	ip, r0, r3
 80005d2:	fa20 f002 	lsr.w	r0, r0, r2
 80005d6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005da:	ea40 000e 	orr.w	r0, r0, lr
 80005de:	fa21 f102 	lsr.w	r1, r1, r2
 80005e2:	4414      	add	r4, r2
 80005e4:	e6bd      	b.n	8000362 <__adddf3+0xe6>
 80005e6:	bf00      	nop

080005e8 <__aeabi_dmul>:
 80005e8:	b570      	push	{r4, r5, r6, lr}
 80005ea:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005ee:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80005f2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005f6:	bf1d      	ittte	ne
 80005f8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005fc:	ea94 0f0c 	teqne	r4, ip
 8000600:	ea95 0f0c 	teqne	r5, ip
 8000604:	f000 f8de 	bleq	80007c4 <__aeabi_dmul+0x1dc>
 8000608:	442c      	add	r4, r5
 800060a:	ea81 0603 	eor.w	r6, r1, r3
 800060e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000612:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000616:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800061a:	bf18      	it	ne
 800061c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000620:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000624:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000628:	d038      	beq.n	800069c <__aeabi_dmul+0xb4>
 800062a:	fba0 ce02 	umull	ip, lr, r0, r2
 800062e:	f04f 0500 	mov.w	r5, #0
 8000632:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000636:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800063a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800063e:	f04f 0600 	mov.w	r6, #0
 8000642:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000646:	f09c 0f00 	teq	ip, #0
 800064a:	bf18      	it	ne
 800064c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000650:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000654:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000658:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800065c:	d204      	bcs.n	8000668 <__aeabi_dmul+0x80>
 800065e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000662:	416d      	adcs	r5, r5
 8000664:	eb46 0606 	adc.w	r6, r6, r6
 8000668:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800066c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000670:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000674:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000678:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800067c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000680:	bf88      	it	hi
 8000682:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000686:	d81e      	bhi.n	80006c6 <__aeabi_dmul+0xde>
 8000688:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800068c:	bf08      	it	eq
 800068e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000692:	f150 0000 	adcs.w	r0, r0, #0
 8000696:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800069a:	bd70      	pop	{r4, r5, r6, pc}
 800069c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006a0:	ea46 0101 	orr.w	r1, r6, r1
 80006a4:	ea40 0002 	orr.w	r0, r0, r2
 80006a8:	ea81 0103 	eor.w	r1, r1, r3
 80006ac:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006b0:	bfc2      	ittt	gt
 80006b2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006b6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	popgt	{r4, r5, r6, pc}
 80006bc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006c0:	f04f 0e00 	mov.w	lr, #0
 80006c4:	3c01      	subs	r4, #1
 80006c6:	f300 80ab 	bgt.w	8000820 <__aeabi_dmul+0x238>
 80006ca:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006ce:	bfde      	ittt	le
 80006d0:	2000      	movle	r0, #0
 80006d2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006d6:	bd70      	pople	{r4, r5, r6, pc}
 80006d8:	f1c4 0400 	rsb	r4, r4, #0
 80006dc:	3c20      	subs	r4, #32
 80006de:	da35      	bge.n	800074c <__aeabi_dmul+0x164>
 80006e0:	340c      	adds	r4, #12
 80006e2:	dc1b      	bgt.n	800071c <__aeabi_dmul+0x134>
 80006e4:	f104 0414 	add.w	r4, r4, #20
 80006e8:	f1c4 0520 	rsb	r5, r4, #32
 80006ec:	fa00 f305 	lsl.w	r3, r0, r5
 80006f0:	fa20 f004 	lsr.w	r0, r0, r4
 80006f4:	fa01 f205 	lsl.w	r2, r1, r5
 80006f8:	ea40 0002 	orr.w	r0, r0, r2
 80006fc:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000700:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000704:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000708:	fa21 f604 	lsr.w	r6, r1, r4
 800070c:	eb42 0106 	adc.w	r1, r2, r6
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f1c4 040c 	rsb	r4, r4, #12
 8000720:	f1c4 0520 	rsb	r5, r4, #32
 8000724:	fa00 f304 	lsl.w	r3, r0, r4
 8000728:	fa20 f005 	lsr.w	r0, r0, r5
 800072c:	fa01 f204 	lsl.w	r2, r1, r4
 8000730:	ea40 0002 	orr.w	r0, r0, r2
 8000734:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000738:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800073c:	f141 0100 	adc.w	r1, r1, #0
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 0520 	rsb	r5, r4, #32
 8000750:	fa00 f205 	lsl.w	r2, r0, r5
 8000754:	ea4e 0e02 	orr.w	lr, lr, r2
 8000758:	fa20 f304 	lsr.w	r3, r0, r4
 800075c:	fa01 f205 	lsl.w	r2, r1, r5
 8000760:	ea43 0302 	orr.w	r3, r3, r2
 8000764:	fa21 f004 	lsr.w	r0, r1, r4
 8000768:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800076c:	fa21 f204 	lsr.w	r2, r1, r4
 8000770:	ea20 0002 	bic.w	r0, r0, r2
 8000774:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000778:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800077c:	bf08      	it	eq
 800077e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000782:	bd70      	pop	{r4, r5, r6, pc}
 8000784:	f094 0f00 	teq	r4, #0
 8000788:	d10f      	bne.n	80007aa <__aeabi_dmul+0x1c2>
 800078a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800078e:	0040      	lsls	r0, r0, #1
 8000790:	eb41 0101 	adc.w	r1, r1, r1
 8000794:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000798:	bf08      	it	eq
 800079a:	3c01      	subeq	r4, #1
 800079c:	d0f7      	beq.n	800078e <__aeabi_dmul+0x1a6>
 800079e:	ea41 0106 	orr.w	r1, r1, r6
 80007a2:	f095 0f00 	teq	r5, #0
 80007a6:	bf18      	it	ne
 80007a8:	4770      	bxne	lr
 80007aa:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ae:	0052      	lsls	r2, r2, #1
 80007b0:	eb43 0303 	adc.w	r3, r3, r3
 80007b4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3d01      	subeq	r5, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1c6>
 80007be:	ea43 0306 	orr.w	r3, r3, r6
 80007c2:	4770      	bx	lr
 80007c4:	ea94 0f0c 	teq	r4, ip
 80007c8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007cc:	bf18      	it	ne
 80007ce:	ea95 0f0c 	teqne	r5, ip
 80007d2:	d00c      	beq.n	80007ee <__aeabi_dmul+0x206>
 80007d4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007d8:	bf18      	it	ne
 80007da:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007de:	d1d1      	bne.n	8000784 <__aeabi_dmul+0x19c>
 80007e0:	ea81 0103 	eor.w	r1, r1, r3
 80007e4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007e8:	f04f 0000 	mov.w	r0, #0
 80007ec:	bd70      	pop	{r4, r5, r6, pc}
 80007ee:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f2:	bf06      	itte	eq
 80007f4:	4610      	moveq	r0, r2
 80007f6:	4619      	moveq	r1, r3
 80007f8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fc:	d019      	beq.n	8000832 <__aeabi_dmul+0x24a>
 80007fe:	ea94 0f0c 	teq	r4, ip
 8000802:	d102      	bne.n	800080a <__aeabi_dmul+0x222>
 8000804:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000808:	d113      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800080a:	ea95 0f0c 	teq	r5, ip
 800080e:	d105      	bne.n	800081c <__aeabi_dmul+0x234>
 8000810:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000814:	bf1c      	itt	ne
 8000816:	4610      	movne	r0, r2
 8000818:	4619      	movne	r1, r3
 800081a:	d10a      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800081c:	ea81 0103 	eor.w	r1, r1, r3
 8000820:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000824:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000828:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800082c:	f04f 0000 	mov.w	r0, #0
 8000830:	bd70      	pop	{r4, r5, r6, pc}
 8000832:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000836:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800083a:	bd70      	pop	{r4, r5, r6, pc}

0800083c <__aeabi_ddiv>:
 800083c:	b570      	push	{r4, r5, r6, lr}
 800083e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000842:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000846:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800084a:	bf1d      	ittte	ne
 800084c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000850:	ea94 0f0c 	teqne	r4, ip
 8000854:	ea95 0f0c 	teqne	r5, ip
 8000858:	f000 f8a7 	bleq	80009aa <__aeabi_ddiv+0x16e>
 800085c:	eba4 0405 	sub.w	r4, r4, r5
 8000860:	ea81 0e03 	eor.w	lr, r1, r3
 8000864:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000868:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800086c:	f000 8088 	beq.w	8000980 <__aeabi_ddiv+0x144>
 8000870:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000874:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000878:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800087c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000880:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000884:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000888:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800088c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000890:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000894:	429d      	cmp	r5, r3
 8000896:	bf08      	it	eq
 8000898:	4296      	cmpeq	r6, r2
 800089a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800089e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008a2:	d202      	bcs.n	80008aa <__aeabi_ddiv+0x6e>
 80008a4:	085b      	lsrs	r3, r3, #1
 80008a6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008aa:	1ab6      	subs	r6, r6, r2
 80008ac:	eb65 0503 	sbc.w	r5, r5, r3
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ba:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008be:	ebb6 0e02 	subs.w	lr, r6, r2
 80008c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008c6:	bf22      	ittt	cs
 80008c8:	1ab6      	subcs	r6, r6, r2
 80008ca:	4675      	movcs	r5, lr
 80008cc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008de:	bf22      	ittt	cs
 80008e0:	1ab6      	subcs	r6, r6, r2
 80008e2:	4675      	movcs	r5, lr
 80008e4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008e8:	085b      	lsrs	r3, r3, #1
 80008ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000918:	ea55 0e06 	orrs.w	lr, r5, r6
 800091c:	d018      	beq.n	8000950 <__aeabi_ddiv+0x114>
 800091e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000922:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000926:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800092a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800092e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000932:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000936:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800093a:	d1c0      	bne.n	80008be <__aeabi_ddiv+0x82>
 800093c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000940:	d10b      	bne.n	800095a <__aeabi_ddiv+0x11e>
 8000942:	ea41 0100 	orr.w	r1, r1, r0
 8000946:	f04f 0000 	mov.w	r0, #0
 800094a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800094e:	e7b6      	b.n	80008be <__aeabi_ddiv+0x82>
 8000950:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000954:	bf04      	itt	eq
 8000956:	4301      	orreq	r1, r0
 8000958:	2000      	moveq	r0, #0
 800095a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800095e:	bf88      	it	hi
 8000960:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000964:	f63f aeaf 	bhi.w	80006c6 <__aeabi_dmul+0xde>
 8000968:	ebb5 0c03 	subs.w	ip, r5, r3
 800096c:	bf04      	itt	eq
 800096e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000972:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000976:	f150 0000 	adcs.w	r0, r0, #0
 800097a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800097e:	bd70      	pop	{r4, r5, r6, pc}
 8000980:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000984:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000988:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800098c:	bfc2      	ittt	gt
 800098e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000992:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000996:	bd70      	popgt	{r4, r5, r6, pc}
 8000998:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800099c:	f04f 0e00 	mov.w	lr, #0
 80009a0:	3c01      	subs	r4, #1
 80009a2:	e690      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009a4:	ea45 0e06 	orr.w	lr, r5, r6
 80009a8:	e68d      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009aa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ae:	ea94 0f0c 	teq	r4, ip
 80009b2:	bf08      	it	eq
 80009b4:	ea95 0f0c 	teqeq	r5, ip
 80009b8:	f43f af3b 	beq.w	8000832 <__aeabi_dmul+0x24a>
 80009bc:	ea94 0f0c 	teq	r4, ip
 80009c0:	d10a      	bne.n	80009d8 <__aeabi_ddiv+0x19c>
 80009c2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009c6:	f47f af34 	bne.w	8000832 <__aeabi_dmul+0x24a>
 80009ca:	ea95 0f0c 	teq	r5, ip
 80009ce:	f47f af25 	bne.w	800081c <__aeabi_dmul+0x234>
 80009d2:	4610      	mov	r0, r2
 80009d4:	4619      	mov	r1, r3
 80009d6:	e72c      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009d8:	ea95 0f0c 	teq	r5, ip
 80009dc:	d106      	bne.n	80009ec <__aeabi_ddiv+0x1b0>
 80009de:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009e2:	f43f aefd 	beq.w	80007e0 <__aeabi_dmul+0x1f8>
 80009e6:	4610      	mov	r0, r2
 80009e8:	4619      	mov	r1, r3
 80009ea:	e722      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009ec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009f0:	bf18      	it	ne
 80009f2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009f6:	f47f aec5 	bne.w	8000784 <__aeabi_dmul+0x19c>
 80009fa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009fe:	f47f af0d 	bne.w	800081c <__aeabi_dmul+0x234>
 8000a02:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a06:	f47f aeeb 	bne.w	80007e0 <__aeabi_dmul+0x1f8>
 8000a0a:	e712      	b.n	8000832 <__aeabi_dmul+0x24a>

08000a0c <__gedf2>:
 8000a0c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a10:	e006      	b.n	8000a20 <__cmpdf2+0x4>
 8000a12:	bf00      	nop

08000a14 <__ledf2>:
 8000a14:	f04f 0c01 	mov.w	ip, #1
 8000a18:	e002      	b.n	8000a20 <__cmpdf2+0x4>
 8000a1a:	bf00      	nop

08000a1c <__cmpdf2>:
 8000a1c:	f04f 0c01 	mov.w	ip, #1
 8000a20:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a24:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a28:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a2c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a36:	d01b      	beq.n	8000a70 <__cmpdf2+0x54>
 8000a38:	b001      	add	sp, #4
 8000a3a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a3e:	bf0c      	ite	eq
 8000a40:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a44:	ea91 0f03 	teqne	r1, r3
 8000a48:	bf02      	ittt	eq
 8000a4a:	ea90 0f02 	teqeq	r0, r2
 8000a4e:	2000      	moveq	r0, #0
 8000a50:	4770      	bxeq	lr
 8000a52:	f110 0f00 	cmn.w	r0, #0
 8000a56:	ea91 0f03 	teq	r1, r3
 8000a5a:	bf58      	it	pl
 8000a5c:	4299      	cmppl	r1, r3
 8000a5e:	bf08      	it	eq
 8000a60:	4290      	cmpeq	r0, r2
 8000a62:	bf2c      	ite	cs
 8000a64:	17d8      	asrcs	r0, r3, #31
 8000a66:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a6a:	f040 0001 	orr.w	r0, r0, #1
 8000a6e:	4770      	bx	lr
 8000a70:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a74:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a78:	d102      	bne.n	8000a80 <__cmpdf2+0x64>
 8000a7a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a7e:	d107      	bne.n	8000a90 <__cmpdf2+0x74>
 8000a80:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d1d6      	bne.n	8000a38 <__cmpdf2+0x1c>
 8000a8a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a8e:	d0d3      	beq.n	8000a38 <__cmpdf2+0x1c>
 8000a90:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a94:	4770      	bx	lr
 8000a96:	bf00      	nop

08000a98 <__aeabi_cdrcmple>:
 8000a98:	4684      	mov	ip, r0
 8000a9a:	4610      	mov	r0, r2
 8000a9c:	4662      	mov	r2, ip
 8000a9e:	468c      	mov	ip, r1
 8000aa0:	4619      	mov	r1, r3
 8000aa2:	4663      	mov	r3, ip
 8000aa4:	e000      	b.n	8000aa8 <__aeabi_cdcmpeq>
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdcmpeq>:
 8000aa8:	b501      	push	{r0, lr}
 8000aaa:	f7ff ffb7 	bl	8000a1c <__cmpdf2>
 8000aae:	2800      	cmp	r0, #0
 8000ab0:	bf48      	it	mi
 8000ab2:	f110 0f00 	cmnmi.w	r0, #0
 8000ab6:	bd01      	pop	{r0, pc}

08000ab8 <__aeabi_dcmpeq>:
 8000ab8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000abc:	f7ff fff4 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ac0:	bf0c      	ite	eq
 8000ac2:	2001      	moveq	r0, #1
 8000ac4:	2000      	movne	r0, #0
 8000ac6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aca:	bf00      	nop

08000acc <__aeabi_dcmplt>:
 8000acc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad0:	f7ff ffea 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ad4:	bf34      	ite	cc
 8000ad6:	2001      	movcc	r0, #1
 8000ad8:	2000      	movcs	r0, #0
 8000ada:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ade:	bf00      	nop

08000ae0 <__aeabi_dcmple>:
 8000ae0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae4:	f7ff ffe0 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ae8:	bf94      	ite	ls
 8000aea:	2001      	movls	r0, #1
 8000aec:	2000      	movhi	r0, #0
 8000aee:	f85d fb08 	ldr.w	pc, [sp], #8
 8000af2:	bf00      	nop

08000af4 <__aeabi_dcmpge>:
 8000af4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af8:	f7ff ffce 	bl	8000a98 <__aeabi_cdrcmple>
 8000afc:	bf94      	ite	ls
 8000afe:	2001      	movls	r0, #1
 8000b00:	2000      	movhi	r0, #0
 8000b02:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b06:	bf00      	nop

08000b08 <__aeabi_dcmpgt>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff ffc4 	bl	8000a98 <__aeabi_cdrcmple>
 8000b10:	bf34      	ite	cc
 8000b12:	2001      	movcc	r0, #1
 8000b14:	2000      	movcs	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_d2iz>:
 8000b1c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b20:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b24:	d215      	bcs.n	8000b52 <__aeabi_d2iz+0x36>
 8000b26:	d511      	bpl.n	8000b4c <__aeabi_d2iz+0x30>
 8000b28:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b2c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b30:	d912      	bls.n	8000b58 <__aeabi_d2iz+0x3c>
 8000b32:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b36:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b3a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b3e:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b42:	fa23 f002 	lsr.w	r0, r3, r2
 8000b46:	bf18      	it	ne
 8000b48:	4240      	negne	r0, r0
 8000b4a:	4770      	bx	lr
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b56:	d105      	bne.n	8000b64 <__aeabi_d2iz+0x48>
 8000b58:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b5c:	bf08      	it	eq
 8000b5e:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b62:	4770      	bx	lr
 8000b64:	f04f 0000 	mov.w	r0, #0
 8000b68:	4770      	bx	lr
 8000b6a:	bf00      	nop

08000b6c <__aeabi_d2uiz>:
 8000b6c:	004a      	lsls	r2, r1, #1
 8000b6e:	d211      	bcs.n	8000b94 <__aeabi_d2uiz+0x28>
 8000b70:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b74:	d211      	bcs.n	8000b9a <__aeabi_d2uiz+0x2e>
 8000b76:	d50d      	bpl.n	8000b94 <__aeabi_d2uiz+0x28>
 8000b78:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b7c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b80:	d40e      	bmi.n	8000ba0 <__aeabi_d2uiz+0x34>
 8000b82:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b86:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b8a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	4770      	bx	lr
 8000b94:	f04f 0000 	mov.w	r0, #0
 8000b98:	4770      	bx	lr
 8000b9a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b9e:	d102      	bne.n	8000ba6 <__aeabi_d2uiz+0x3a>
 8000ba0:	f04f 30ff 	mov.w	r0, #4294967295
 8000ba4:	4770      	bx	lr
 8000ba6:	f04f 0000 	mov.w	r0, #0
 8000baa:	4770      	bx	lr

08000bac <__aeabi_uldivmod>:
 8000bac:	b953      	cbnz	r3, 8000bc4 <__aeabi_uldivmod+0x18>
 8000bae:	b94a      	cbnz	r2, 8000bc4 <__aeabi_uldivmod+0x18>
 8000bb0:	2900      	cmp	r1, #0
 8000bb2:	bf08      	it	eq
 8000bb4:	2800      	cmpeq	r0, #0
 8000bb6:	bf1c      	itt	ne
 8000bb8:	f04f 31ff 	movne.w	r1, #4294967295
 8000bbc:	f04f 30ff 	movne.w	r0, #4294967295
 8000bc0:	f000 b988 	b.w	8000ed4 <__aeabi_idiv0>
 8000bc4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bc8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bcc:	f000 f806 	bl	8000bdc <__udivmoddi4>
 8000bd0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd8:	b004      	add	sp, #16
 8000bda:	4770      	bx	lr

08000bdc <__udivmoddi4>:
 8000bdc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000be0:	9d08      	ldr	r5, [sp, #32]
 8000be2:	468e      	mov	lr, r1
 8000be4:	4604      	mov	r4, r0
 8000be6:	4688      	mov	r8, r1
 8000be8:	2b00      	cmp	r3, #0
 8000bea:	d14a      	bne.n	8000c82 <__udivmoddi4+0xa6>
 8000bec:	428a      	cmp	r2, r1
 8000bee:	4617      	mov	r7, r2
 8000bf0:	d962      	bls.n	8000cb8 <__udivmoddi4+0xdc>
 8000bf2:	fab2 f682 	clz	r6, r2
 8000bf6:	b14e      	cbz	r6, 8000c0c <__udivmoddi4+0x30>
 8000bf8:	f1c6 0320 	rsb	r3, r6, #32
 8000bfc:	fa01 f806 	lsl.w	r8, r1, r6
 8000c00:	fa20 f303 	lsr.w	r3, r0, r3
 8000c04:	40b7      	lsls	r7, r6
 8000c06:	ea43 0808 	orr.w	r8, r3, r8
 8000c0a:	40b4      	lsls	r4, r6
 8000c0c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c10:	fa1f fc87 	uxth.w	ip, r7
 8000c14:	fbb8 f1fe 	udiv	r1, r8, lr
 8000c18:	0c23      	lsrs	r3, r4, #16
 8000c1a:	fb0e 8811 	mls	r8, lr, r1, r8
 8000c1e:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c22:	fb01 f20c 	mul.w	r2, r1, ip
 8000c26:	429a      	cmp	r2, r3
 8000c28:	d909      	bls.n	8000c3e <__udivmoddi4+0x62>
 8000c2a:	18fb      	adds	r3, r7, r3
 8000c2c:	f101 30ff 	add.w	r0, r1, #4294967295
 8000c30:	f080 80ea 	bcs.w	8000e08 <__udivmoddi4+0x22c>
 8000c34:	429a      	cmp	r2, r3
 8000c36:	f240 80e7 	bls.w	8000e08 <__udivmoddi4+0x22c>
 8000c3a:	3902      	subs	r1, #2
 8000c3c:	443b      	add	r3, r7
 8000c3e:	1a9a      	subs	r2, r3, r2
 8000c40:	b2a3      	uxth	r3, r4
 8000c42:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c46:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c4a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000c4e:	fb00 fc0c 	mul.w	ip, r0, ip
 8000c52:	459c      	cmp	ip, r3
 8000c54:	d909      	bls.n	8000c6a <__udivmoddi4+0x8e>
 8000c56:	18fb      	adds	r3, r7, r3
 8000c58:	f100 32ff 	add.w	r2, r0, #4294967295
 8000c5c:	f080 80d6 	bcs.w	8000e0c <__udivmoddi4+0x230>
 8000c60:	459c      	cmp	ip, r3
 8000c62:	f240 80d3 	bls.w	8000e0c <__udivmoddi4+0x230>
 8000c66:	443b      	add	r3, r7
 8000c68:	3802      	subs	r0, #2
 8000c6a:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000c6e:	eba3 030c 	sub.w	r3, r3, ip
 8000c72:	2100      	movs	r1, #0
 8000c74:	b11d      	cbz	r5, 8000c7e <__udivmoddi4+0xa2>
 8000c76:	40f3      	lsrs	r3, r6
 8000c78:	2200      	movs	r2, #0
 8000c7a:	e9c5 3200 	strd	r3, r2, [r5]
 8000c7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c82:	428b      	cmp	r3, r1
 8000c84:	d905      	bls.n	8000c92 <__udivmoddi4+0xb6>
 8000c86:	b10d      	cbz	r5, 8000c8c <__udivmoddi4+0xb0>
 8000c88:	e9c5 0100 	strd	r0, r1, [r5]
 8000c8c:	2100      	movs	r1, #0
 8000c8e:	4608      	mov	r0, r1
 8000c90:	e7f5      	b.n	8000c7e <__udivmoddi4+0xa2>
 8000c92:	fab3 f183 	clz	r1, r3
 8000c96:	2900      	cmp	r1, #0
 8000c98:	d146      	bne.n	8000d28 <__udivmoddi4+0x14c>
 8000c9a:	4573      	cmp	r3, lr
 8000c9c:	d302      	bcc.n	8000ca4 <__udivmoddi4+0xc8>
 8000c9e:	4282      	cmp	r2, r0
 8000ca0:	f200 8105 	bhi.w	8000eae <__udivmoddi4+0x2d2>
 8000ca4:	1a84      	subs	r4, r0, r2
 8000ca6:	eb6e 0203 	sbc.w	r2, lr, r3
 8000caa:	2001      	movs	r0, #1
 8000cac:	4690      	mov	r8, r2
 8000cae:	2d00      	cmp	r5, #0
 8000cb0:	d0e5      	beq.n	8000c7e <__udivmoddi4+0xa2>
 8000cb2:	e9c5 4800 	strd	r4, r8, [r5]
 8000cb6:	e7e2      	b.n	8000c7e <__udivmoddi4+0xa2>
 8000cb8:	2a00      	cmp	r2, #0
 8000cba:	f000 8090 	beq.w	8000dde <__udivmoddi4+0x202>
 8000cbe:	fab2 f682 	clz	r6, r2
 8000cc2:	2e00      	cmp	r6, #0
 8000cc4:	f040 80a4 	bne.w	8000e10 <__udivmoddi4+0x234>
 8000cc8:	1a8a      	subs	r2, r1, r2
 8000cca:	0c03      	lsrs	r3, r0, #16
 8000ccc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000cd0:	b280      	uxth	r0, r0
 8000cd2:	b2bc      	uxth	r4, r7
 8000cd4:	2101      	movs	r1, #1
 8000cd6:	fbb2 fcfe 	udiv	ip, r2, lr
 8000cda:	fb0e 221c 	mls	r2, lr, ip, r2
 8000cde:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000ce2:	fb04 f20c 	mul.w	r2, r4, ip
 8000ce6:	429a      	cmp	r2, r3
 8000ce8:	d907      	bls.n	8000cfa <__udivmoddi4+0x11e>
 8000cea:	18fb      	adds	r3, r7, r3
 8000cec:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000cf0:	d202      	bcs.n	8000cf8 <__udivmoddi4+0x11c>
 8000cf2:	429a      	cmp	r2, r3
 8000cf4:	f200 80e0 	bhi.w	8000eb8 <__udivmoddi4+0x2dc>
 8000cf8:	46c4      	mov	ip, r8
 8000cfa:	1a9b      	subs	r3, r3, r2
 8000cfc:	fbb3 f2fe 	udiv	r2, r3, lr
 8000d00:	fb0e 3312 	mls	r3, lr, r2, r3
 8000d04:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000d08:	fb02 f404 	mul.w	r4, r2, r4
 8000d0c:	429c      	cmp	r4, r3
 8000d0e:	d907      	bls.n	8000d20 <__udivmoddi4+0x144>
 8000d10:	18fb      	adds	r3, r7, r3
 8000d12:	f102 30ff 	add.w	r0, r2, #4294967295
 8000d16:	d202      	bcs.n	8000d1e <__udivmoddi4+0x142>
 8000d18:	429c      	cmp	r4, r3
 8000d1a:	f200 80ca 	bhi.w	8000eb2 <__udivmoddi4+0x2d6>
 8000d1e:	4602      	mov	r2, r0
 8000d20:	1b1b      	subs	r3, r3, r4
 8000d22:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000d26:	e7a5      	b.n	8000c74 <__udivmoddi4+0x98>
 8000d28:	f1c1 0620 	rsb	r6, r1, #32
 8000d2c:	408b      	lsls	r3, r1
 8000d2e:	fa22 f706 	lsr.w	r7, r2, r6
 8000d32:	431f      	orrs	r7, r3
 8000d34:	fa0e f401 	lsl.w	r4, lr, r1
 8000d38:	fa20 f306 	lsr.w	r3, r0, r6
 8000d3c:	fa2e fe06 	lsr.w	lr, lr, r6
 8000d40:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000d44:	4323      	orrs	r3, r4
 8000d46:	fa00 f801 	lsl.w	r8, r0, r1
 8000d4a:	fa1f fc87 	uxth.w	ip, r7
 8000d4e:	fbbe f0f9 	udiv	r0, lr, r9
 8000d52:	0c1c      	lsrs	r4, r3, #16
 8000d54:	fb09 ee10 	mls	lr, r9, r0, lr
 8000d58:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000d5c:	fb00 fe0c 	mul.w	lr, r0, ip
 8000d60:	45a6      	cmp	lr, r4
 8000d62:	fa02 f201 	lsl.w	r2, r2, r1
 8000d66:	d909      	bls.n	8000d7c <__udivmoddi4+0x1a0>
 8000d68:	193c      	adds	r4, r7, r4
 8000d6a:	f100 3aff 	add.w	sl, r0, #4294967295
 8000d6e:	f080 809c 	bcs.w	8000eaa <__udivmoddi4+0x2ce>
 8000d72:	45a6      	cmp	lr, r4
 8000d74:	f240 8099 	bls.w	8000eaa <__udivmoddi4+0x2ce>
 8000d78:	3802      	subs	r0, #2
 8000d7a:	443c      	add	r4, r7
 8000d7c:	eba4 040e 	sub.w	r4, r4, lr
 8000d80:	fa1f fe83 	uxth.w	lr, r3
 8000d84:	fbb4 f3f9 	udiv	r3, r4, r9
 8000d88:	fb09 4413 	mls	r4, r9, r3, r4
 8000d8c:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000d90:	fb03 fc0c 	mul.w	ip, r3, ip
 8000d94:	45a4      	cmp	ip, r4
 8000d96:	d908      	bls.n	8000daa <__udivmoddi4+0x1ce>
 8000d98:	193c      	adds	r4, r7, r4
 8000d9a:	f103 3eff 	add.w	lr, r3, #4294967295
 8000d9e:	f080 8082 	bcs.w	8000ea6 <__udivmoddi4+0x2ca>
 8000da2:	45a4      	cmp	ip, r4
 8000da4:	d97f      	bls.n	8000ea6 <__udivmoddi4+0x2ca>
 8000da6:	3b02      	subs	r3, #2
 8000da8:	443c      	add	r4, r7
 8000daa:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000dae:	eba4 040c 	sub.w	r4, r4, ip
 8000db2:	fba0 ec02 	umull	lr, ip, r0, r2
 8000db6:	4564      	cmp	r4, ip
 8000db8:	4673      	mov	r3, lr
 8000dba:	46e1      	mov	r9, ip
 8000dbc:	d362      	bcc.n	8000e84 <__udivmoddi4+0x2a8>
 8000dbe:	d05f      	beq.n	8000e80 <__udivmoddi4+0x2a4>
 8000dc0:	b15d      	cbz	r5, 8000dda <__udivmoddi4+0x1fe>
 8000dc2:	ebb8 0203 	subs.w	r2, r8, r3
 8000dc6:	eb64 0409 	sbc.w	r4, r4, r9
 8000dca:	fa04 f606 	lsl.w	r6, r4, r6
 8000dce:	fa22 f301 	lsr.w	r3, r2, r1
 8000dd2:	431e      	orrs	r6, r3
 8000dd4:	40cc      	lsrs	r4, r1
 8000dd6:	e9c5 6400 	strd	r6, r4, [r5]
 8000dda:	2100      	movs	r1, #0
 8000ddc:	e74f      	b.n	8000c7e <__udivmoddi4+0xa2>
 8000dde:	fbb1 fcf2 	udiv	ip, r1, r2
 8000de2:	0c01      	lsrs	r1, r0, #16
 8000de4:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000de8:	b280      	uxth	r0, r0
 8000dea:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000dee:	463b      	mov	r3, r7
 8000df0:	4638      	mov	r0, r7
 8000df2:	463c      	mov	r4, r7
 8000df4:	46b8      	mov	r8, r7
 8000df6:	46be      	mov	lr, r7
 8000df8:	2620      	movs	r6, #32
 8000dfa:	fbb1 f1f7 	udiv	r1, r1, r7
 8000dfe:	eba2 0208 	sub.w	r2, r2, r8
 8000e02:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000e06:	e766      	b.n	8000cd6 <__udivmoddi4+0xfa>
 8000e08:	4601      	mov	r1, r0
 8000e0a:	e718      	b.n	8000c3e <__udivmoddi4+0x62>
 8000e0c:	4610      	mov	r0, r2
 8000e0e:	e72c      	b.n	8000c6a <__udivmoddi4+0x8e>
 8000e10:	f1c6 0220 	rsb	r2, r6, #32
 8000e14:	fa2e f302 	lsr.w	r3, lr, r2
 8000e18:	40b7      	lsls	r7, r6
 8000e1a:	40b1      	lsls	r1, r6
 8000e1c:	fa20 f202 	lsr.w	r2, r0, r2
 8000e20:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e24:	430a      	orrs	r2, r1
 8000e26:	fbb3 f8fe 	udiv	r8, r3, lr
 8000e2a:	b2bc      	uxth	r4, r7
 8000e2c:	fb0e 3318 	mls	r3, lr, r8, r3
 8000e30:	0c11      	lsrs	r1, r2, #16
 8000e32:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e36:	fb08 f904 	mul.w	r9, r8, r4
 8000e3a:	40b0      	lsls	r0, r6
 8000e3c:	4589      	cmp	r9, r1
 8000e3e:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000e42:	b280      	uxth	r0, r0
 8000e44:	d93e      	bls.n	8000ec4 <__udivmoddi4+0x2e8>
 8000e46:	1879      	adds	r1, r7, r1
 8000e48:	f108 3cff 	add.w	ip, r8, #4294967295
 8000e4c:	d201      	bcs.n	8000e52 <__udivmoddi4+0x276>
 8000e4e:	4589      	cmp	r9, r1
 8000e50:	d81f      	bhi.n	8000e92 <__udivmoddi4+0x2b6>
 8000e52:	eba1 0109 	sub.w	r1, r1, r9
 8000e56:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e5a:	fb09 f804 	mul.w	r8, r9, r4
 8000e5e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000e62:	b292      	uxth	r2, r2
 8000e64:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e68:	4542      	cmp	r2, r8
 8000e6a:	d229      	bcs.n	8000ec0 <__udivmoddi4+0x2e4>
 8000e6c:	18ba      	adds	r2, r7, r2
 8000e6e:	f109 31ff 	add.w	r1, r9, #4294967295
 8000e72:	d2c4      	bcs.n	8000dfe <__udivmoddi4+0x222>
 8000e74:	4542      	cmp	r2, r8
 8000e76:	d2c2      	bcs.n	8000dfe <__udivmoddi4+0x222>
 8000e78:	f1a9 0102 	sub.w	r1, r9, #2
 8000e7c:	443a      	add	r2, r7
 8000e7e:	e7be      	b.n	8000dfe <__udivmoddi4+0x222>
 8000e80:	45f0      	cmp	r8, lr
 8000e82:	d29d      	bcs.n	8000dc0 <__udivmoddi4+0x1e4>
 8000e84:	ebbe 0302 	subs.w	r3, lr, r2
 8000e88:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000e8c:	3801      	subs	r0, #1
 8000e8e:	46e1      	mov	r9, ip
 8000e90:	e796      	b.n	8000dc0 <__udivmoddi4+0x1e4>
 8000e92:	eba7 0909 	sub.w	r9, r7, r9
 8000e96:	4449      	add	r1, r9
 8000e98:	f1a8 0c02 	sub.w	ip, r8, #2
 8000e9c:	fbb1 f9fe 	udiv	r9, r1, lr
 8000ea0:	fb09 f804 	mul.w	r8, r9, r4
 8000ea4:	e7db      	b.n	8000e5e <__udivmoddi4+0x282>
 8000ea6:	4673      	mov	r3, lr
 8000ea8:	e77f      	b.n	8000daa <__udivmoddi4+0x1ce>
 8000eaa:	4650      	mov	r0, sl
 8000eac:	e766      	b.n	8000d7c <__udivmoddi4+0x1a0>
 8000eae:	4608      	mov	r0, r1
 8000eb0:	e6fd      	b.n	8000cae <__udivmoddi4+0xd2>
 8000eb2:	443b      	add	r3, r7
 8000eb4:	3a02      	subs	r2, #2
 8000eb6:	e733      	b.n	8000d20 <__udivmoddi4+0x144>
 8000eb8:	f1ac 0c02 	sub.w	ip, ip, #2
 8000ebc:	443b      	add	r3, r7
 8000ebe:	e71c      	b.n	8000cfa <__udivmoddi4+0x11e>
 8000ec0:	4649      	mov	r1, r9
 8000ec2:	e79c      	b.n	8000dfe <__udivmoddi4+0x222>
 8000ec4:	eba1 0109 	sub.w	r1, r1, r9
 8000ec8:	46c4      	mov	ip, r8
 8000eca:	fbb1 f9fe 	udiv	r9, r1, lr
 8000ece:	fb09 f804 	mul.w	r8, r9, r4
 8000ed2:	e7c4      	b.n	8000e5e <__udivmoddi4+0x282>

08000ed4 <__aeabi_idiv0>:
 8000ed4:	4770      	bx	lr
 8000ed6:	bf00      	nop

08000ed8 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void) {
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	b084      	sub	sp, #16
 8000edc:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN ADC1_Init 0 */

	/* USER CODE END ADC1_Init 0 */

	ADC_ChannelConfTypeDef sConfig = { 0 };
 8000ede:	463b      	mov	r3, r7
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	601a      	str	r2, [r3, #0]
 8000ee4:	605a      	str	r2, [r3, #4]
 8000ee6:	609a      	str	r2, [r3, #8]
 8000ee8:	60da      	str	r2, [r3, #12]

	/* USER CODE END ADC1_Init 1 */

	/** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
	 */
	hadc1.Instance = ADC1;
 8000eea:	4b22      	ldr	r3, [pc, #136]	@ (8000f74 <MX_ADC1_Init+0x9c>)
 8000eec:	4a22      	ldr	r2, [pc, #136]	@ (8000f78 <MX_ADC1_Init+0xa0>)
 8000eee:	601a      	str	r2, [r3, #0]
	hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000ef0:	4b20      	ldr	r3, [pc, #128]	@ (8000f74 <MX_ADC1_Init+0x9c>)
 8000ef2:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8000ef6:	605a      	str	r2, [r3, #4]
	hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000ef8:	4b1e      	ldr	r3, [pc, #120]	@ (8000f74 <MX_ADC1_Init+0x9c>)
 8000efa:	2200      	movs	r2, #0
 8000efc:	609a      	str	r2, [r3, #8]
	hadc1.Init.ScanConvMode = DISABLE;
 8000efe:	4b1d      	ldr	r3, [pc, #116]	@ (8000f74 <MX_ADC1_Init+0x9c>)
 8000f00:	2200      	movs	r2, #0
 8000f02:	611a      	str	r2, [r3, #16]
	hadc1.Init.ContinuousConvMode = ENABLE;
 8000f04:	4b1b      	ldr	r3, [pc, #108]	@ (8000f74 <MX_ADC1_Init+0x9c>)
 8000f06:	2201      	movs	r2, #1
 8000f08:	761a      	strb	r2, [r3, #24]
	hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000f0a:	4b1a      	ldr	r3, [pc, #104]	@ (8000f74 <MX_ADC1_Init+0x9c>)
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	f883 2020 	strb.w	r2, [r3, #32]
	hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8000f12:	4b18      	ldr	r3, [pc, #96]	@ (8000f74 <MX_ADC1_Init+0x9c>)
 8000f14:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8000f18:	62da      	str	r2, [r3, #44]	@ 0x2c
	hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T3_TRGO;
 8000f1a:	4b16      	ldr	r3, [pc, #88]	@ (8000f74 <MX_ADC1_Init+0x9c>)
 8000f1c:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8000f20:	629a      	str	r2, [r3, #40]	@ 0x28
	hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000f22:	4b14      	ldr	r3, [pc, #80]	@ (8000f74 <MX_ADC1_Init+0x9c>)
 8000f24:	2200      	movs	r2, #0
 8000f26:	60da      	str	r2, [r3, #12]
	hadc1.Init.NbrOfConversion = 1;
 8000f28:	4b12      	ldr	r3, [pc, #72]	@ (8000f74 <MX_ADC1_Init+0x9c>)
 8000f2a:	2201      	movs	r2, #1
 8000f2c:	61da      	str	r2, [r3, #28]
	hadc1.Init.DMAContinuousRequests = DISABLE;
 8000f2e:	4b11      	ldr	r3, [pc, #68]	@ (8000f74 <MX_ADC1_Init+0x9c>)
 8000f30:	2200      	movs	r2, #0
 8000f32:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
	hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000f36:	4b0f      	ldr	r3, [pc, #60]	@ (8000f74 <MX_ADC1_Init+0x9c>)
 8000f38:	2201      	movs	r2, #1
 8000f3a:	615a      	str	r2, [r3, #20]
	if (HAL_ADC_Init(&hadc1) != HAL_OK) {
 8000f3c:	480d      	ldr	r0, [pc, #52]	@ (8000f74 <MX_ADC1_Init+0x9c>)
 8000f3e:	f000 fefb 	bl	8001d38 <HAL_ADC_Init>
 8000f42:	4603      	mov	r3, r0
 8000f44:	2b00      	cmp	r3, #0
 8000f46:	d001      	beq.n	8000f4c <MX_ADC1_Init+0x74>
		Error_Handler();
 8000f48:	f000 fb94 	bl	8001674 <Error_Handler>
	}

	/** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	 */
	sConfig.Channel = ADC_CHANNEL_5;
 8000f4c:	2305      	movs	r3, #5
 8000f4e:	603b      	str	r3, [r7, #0]
	sConfig.Rank = 1;
 8000f50:	2301      	movs	r3, #1
 8000f52:	607b      	str	r3, [r7, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000f54:	2300      	movs	r3, #0
 8000f56:	60bb      	str	r3, [r7, #8]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 8000f58:	463b      	mov	r3, r7
 8000f5a:	4619      	mov	r1, r3
 8000f5c:	4805      	ldr	r0, [pc, #20]	@ (8000f74 <MX_ADC1_Init+0x9c>)
 8000f5e:	f000 ff2f 	bl	8001dc0 <HAL_ADC_ConfigChannel>
 8000f62:	4603      	mov	r3, r0
 8000f64:	2b00      	cmp	r3, #0
 8000f66:	d001      	beq.n	8000f6c <MX_ADC1_Init+0x94>
		Error_Handler();
 8000f68:	f000 fb84 	bl	8001674 <Error_Handler>
	}
	/* USER CODE BEGIN ADC1_Init 2 */

	/* USER CODE END ADC1_Init 2 */
}
 8000f6c:	bf00      	nop
 8000f6e:	3710      	adds	r7, #16
 8000f70:	46bd      	mov	sp, r7
 8000f72:	bd80      	pop	{r7, pc}
 8000f74:	20000090 	.word	0x20000090
 8000f78:	40012000 	.word	0x40012000

08000f7c <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef *adcHandle) {
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	b08a      	sub	sp, #40	@ 0x28
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	6078      	str	r0, [r7, #4]

	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8000f84:	f107 0314 	add.w	r3, r7, #20
 8000f88:	2200      	movs	r2, #0
 8000f8a:	601a      	str	r2, [r3, #0]
 8000f8c:	605a      	str	r2, [r3, #4]
 8000f8e:	609a      	str	r2, [r3, #8]
 8000f90:	60da      	str	r2, [r3, #12]
 8000f92:	611a      	str	r2, [r3, #16]
	if (adcHandle->Instance == ADC1) {
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	4a33      	ldr	r2, [pc, #204]	@ (8001068 <HAL_ADC_MspInit+0xec>)
 8000f9a:	4293      	cmp	r3, r2
 8000f9c:	d15f      	bne.n	800105e <HAL_ADC_MspInit+0xe2>
		/* USER CODE BEGIN ADC1_MspInit 0 */

		/* USER CODE END ADC1_MspInit 0 */
		/* ADC1 clock enable */
		__HAL_RCC_ADC1_CLK_ENABLE();
 8000f9e:	2300      	movs	r3, #0
 8000fa0:	613b      	str	r3, [r7, #16]
 8000fa2:	4b32      	ldr	r3, [pc, #200]	@ (800106c <HAL_ADC_MspInit+0xf0>)
 8000fa4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000fa6:	4a31      	ldr	r2, [pc, #196]	@ (800106c <HAL_ADC_MspInit+0xf0>)
 8000fa8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000fac:	6453      	str	r3, [r2, #68]	@ 0x44
 8000fae:	4b2f      	ldr	r3, [pc, #188]	@ (800106c <HAL_ADC_MspInit+0xf0>)
 8000fb0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000fb2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000fb6:	613b      	str	r3, [r7, #16]
 8000fb8:	693b      	ldr	r3, [r7, #16]

		__HAL_RCC_GPIOA_CLK_ENABLE();
 8000fba:	2300      	movs	r3, #0
 8000fbc:	60fb      	str	r3, [r7, #12]
 8000fbe:	4b2b      	ldr	r3, [pc, #172]	@ (800106c <HAL_ADC_MspInit+0xf0>)
 8000fc0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fc2:	4a2a      	ldr	r2, [pc, #168]	@ (800106c <HAL_ADC_MspInit+0xf0>)
 8000fc4:	f043 0301 	orr.w	r3, r3, #1
 8000fc8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000fca:	4b28      	ldr	r3, [pc, #160]	@ (800106c <HAL_ADC_MspInit+0xf0>)
 8000fcc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fce:	f003 0301 	and.w	r3, r3, #1
 8000fd2:	60fb      	str	r3, [r7, #12]
 8000fd4:	68fb      	ldr	r3, [r7, #12]
		/**ADC1 GPIO Configuration
		 PA5         ------> ADC1_IN5
		 */
		GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000fd6:	2320      	movs	r3, #32
 8000fd8:	617b      	str	r3, [r7, #20]
		GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000fda:	2303      	movs	r3, #3
 8000fdc:	61bb      	str	r3, [r7, #24]
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fde:	2300      	movs	r3, #0
 8000fe0:	61fb      	str	r3, [r7, #28]
		HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fe2:	f107 0314 	add.w	r3, r7, #20
 8000fe6:	4619      	mov	r1, r3
 8000fe8:	4821      	ldr	r0, [pc, #132]	@ (8001070 <HAL_ADC_MspInit+0xf4>)
 8000fea:	f002 f803 	bl	8002ff4 <HAL_GPIO_Init>

		/* ADC1 DMA Init */
		/* ADC1 Init */
		hdma_adc1.Instance = DMA2_Stream0;
 8000fee:	4b21      	ldr	r3, [pc, #132]	@ (8001074 <HAL_ADC_MspInit+0xf8>)
 8000ff0:	4a21      	ldr	r2, [pc, #132]	@ (8001078 <HAL_ADC_MspInit+0xfc>)
 8000ff2:	601a      	str	r2, [r3, #0]
		hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8000ff4:	4b1f      	ldr	r3, [pc, #124]	@ (8001074 <HAL_ADC_MspInit+0xf8>)
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	605a      	str	r2, [r3, #4]
		hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000ffa:	4b1e      	ldr	r3, [pc, #120]	@ (8001074 <HAL_ADC_MspInit+0xf8>)
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	609a      	str	r2, [r3, #8]
		hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001000:	4b1c      	ldr	r3, [pc, #112]	@ (8001074 <HAL_ADC_MspInit+0xf8>)
 8001002:	2200      	movs	r2, #0
 8001004:	60da      	str	r2, [r3, #12]
		hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001006:	4b1b      	ldr	r3, [pc, #108]	@ (8001074 <HAL_ADC_MspInit+0xf8>)
 8001008:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800100c:	611a      	str	r2, [r3, #16]
		hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800100e:	4b19      	ldr	r3, [pc, #100]	@ (8001074 <HAL_ADC_MspInit+0xf8>)
 8001010:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001014:	615a      	str	r2, [r3, #20]
		hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001016:	4b17      	ldr	r3, [pc, #92]	@ (8001074 <HAL_ADC_MspInit+0xf8>)
 8001018:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800101c:	619a      	str	r2, [r3, #24]
		hdma_adc1.Init.Mode = DMA_NORMAL;
 800101e:	4b15      	ldr	r3, [pc, #84]	@ (8001074 <HAL_ADC_MspInit+0xf8>)
 8001020:	2200      	movs	r2, #0
 8001022:	61da      	str	r2, [r3, #28]
		hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001024:	4b13      	ldr	r3, [pc, #76]	@ (8001074 <HAL_ADC_MspInit+0xf8>)
 8001026:	2200      	movs	r2, #0
 8001028:	621a      	str	r2, [r3, #32]
		hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 800102a:	4b12      	ldr	r3, [pc, #72]	@ (8001074 <HAL_ADC_MspInit+0xf8>)
 800102c:	2204      	movs	r2, #4
 800102e:	625a      	str	r2, [r3, #36]	@ 0x24
		hdma_adc1.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8001030:	4b10      	ldr	r3, [pc, #64]	@ (8001074 <HAL_ADC_MspInit+0xf8>)
 8001032:	2203      	movs	r2, #3
 8001034:	629a      	str	r2, [r3, #40]	@ 0x28
		hdma_adc1.Init.MemBurst = DMA_MBURST_SINGLE;
 8001036:	4b0f      	ldr	r3, [pc, #60]	@ (8001074 <HAL_ADC_MspInit+0xf8>)
 8001038:	2200      	movs	r2, #0
 800103a:	62da      	str	r2, [r3, #44]	@ 0x2c
		hdma_adc1.Init.PeriphBurst = DMA_PBURST_SINGLE;
 800103c:	4b0d      	ldr	r3, [pc, #52]	@ (8001074 <HAL_ADC_MspInit+0xf8>)
 800103e:	2200      	movs	r2, #0
 8001040:	631a      	str	r2, [r3, #48]	@ 0x30
		if (HAL_DMA_Init(&hdma_adc1) != HAL_OK) {
 8001042:	480c      	ldr	r0, [pc, #48]	@ (8001074 <HAL_ADC_MspInit+0xf8>)
 8001044:	f001 fbd4 	bl	80027f0 <HAL_DMA_Init>
 8001048:	4603      	mov	r3, r0
 800104a:	2b00      	cmp	r3, #0
 800104c:	d001      	beq.n	8001052 <HAL_ADC_MspInit+0xd6>
			Error_Handler();
 800104e:	f000 fb11 	bl	8001674 <Error_Handler>
		}

		__HAL_LINKDMA(adcHandle, DMA_Handle, hdma_adc1);
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	4a07      	ldr	r2, [pc, #28]	@ (8001074 <HAL_ADC_MspInit+0xf8>)
 8001056:	639a      	str	r2, [r3, #56]	@ 0x38
 8001058:	4a06      	ldr	r2, [pc, #24]	@ (8001074 <HAL_ADC_MspInit+0xf8>)
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	6393      	str	r3, [r2, #56]	@ 0x38

		/* USER CODE BEGIN ADC1_MspInit 1 */

		/* USER CODE END ADC1_MspInit 1 */
	}
}
 800105e:	bf00      	nop
 8001060:	3728      	adds	r7, #40	@ 0x28
 8001062:	46bd      	mov	sp, r7
 8001064:	bd80      	pop	{r7, pc}
 8001066:	bf00      	nop
 8001068:	40012000 	.word	0x40012000
 800106c:	40023800 	.word	0x40023800
 8001070:	40020000 	.word	0x40020000
 8001074:	200000d8 	.word	0x200000d8
 8001078:	40026410 	.word	0x40026410

0800107c <MX_DAC_Init>:

DAC_HandleTypeDef hdac;
DMA_HandleTypeDef hdma_dac1;

/* DAC init function */
void MX_DAC_Init(void) {
 800107c:	b580      	push	{r7, lr}
 800107e:	b082      	sub	sp, #8
 8001080:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN DAC_Init 0 */

	/* USER CODE END DAC_Init 0 */

	DAC_ChannelConfTypeDef sConfig = { 0 };
 8001082:	463b      	mov	r3, r7
 8001084:	2200      	movs	r2, #0
 8001086:	601a      	str	r2, [r3, #0]
 8001088:	605a      	str	r2, [r3, #4]

	/* USER CODE END DAC_Init 1 */

	/** DAC Initialization
	 */
	hdac.Instance = DAC;
 800108a:	4b0f      	ldr	r3, [pc, #60]	@ (80010c8 <MX_DAC_Init+0x4c>)
 800108c:	4a0f      	ldr	r2, [pc, #60]	@ (80010cc <MX_DAC_Init+0x50>)
 800108e:	601a      	str	r2, [r3, #0]
	if (HAL_DAC_Init(&hdac) != HAL_OK) {
 8001090:	480d      	ldr	r0, [pc, #52]	@ (80010c8 <MX_DAC_Init+0x4c>)
 8001092:	f001 f9c4 	bl	800241e <HAL_DAC_Init>
 8001096:	4603      	mov	r3, r0
 8001098:	2b00      	cmp	r3, #0
 800109a:	d001      	beq.n	80010a0 <MX_DAC_Init+0x24>
		Error_Handler();
 800109c:	f000 faea 	bl	8001674 <Error_Handler>
	}

	/** DAC channel OUT1 config
	 */
	sConfig.DAC_Trigger = DAC_TRIGGER_T2_TRGO;
 80010a0:	2324      	movs	r3, #36	@ 0x24
 80010a2:	603b      	str	r3, [r7, #0]
	sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_DISABLE;
 80010a4:	2302      	movs	r3, #2
 80010a6:	607b      	str	r3, [r7, #4]
	if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK) {
 80010a8:	463b      	mov	r3, r7
 80010aa:	2200      	movs	r2, #0
 80010ac:	4619      	mov	r1, r3
 80010ae:	4806      	ldr	r0, [pc, #24]	@ (80010c8 <MX_DAC_Init+0x4c>)
 80010b0:	f001 fac4 	bl	800263c <HAL_DAC_ConfigChannel>
 80010b4:	4603      	mov	r3, r0
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	d001      	beq.n	80010be <MX_DAC_Init+0x42>
		Error_Handler();
 80010ba:	f000 fadb 	bl	8001674 <Error_Handler>
	}
	/* USER CODE BEGIN DAC_Init 2 */

	/* USER CODE END DAC_Init 2 */
}
 80010be:	bf00      	nop
 80010c0:	3708      	adds	r7, #8
 80010c2:	46bd      	mov	sp, r7
 80010c4:	bd80      	pop	{r7, pc}
 80010c6:	bf00      	nop
 80010c8:	20000138 	.word	0x20000138
 80010cc:	40007400 	.word	0x40007400

080010d0 <HAL_DAC_MspInit>:

void HAL_DAC_MspInit(DAC_HandleTypeDef *dacHandle) {
 80010d0:	b580      	push	{r7, lr}
 80010d2:	b08a      	sub	sp, #40	@ 0x28
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	6078      	str	r0, [r7, #4]

	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 80010d8:	f107 0314 	add.w	r3, r7, #20
 80010dc:	2200      	movs	r2, #0
 80010de:	601a      	str	r2, [r3, #0]
 80010e0:	605a      	str	r2, [r3, #4]
 80010e2:	609a      	str	r2, [r3, #8]
 80010e4:	60da      	str	r2, [r3, #12]
 80010e6:	611a      	str	r2, [r3, #16]
	if (dacHandle->Instance == DAC) {
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	4a30      	ldr	r2, [pc, #192]	@ (80011b0 <HAL_DAC_MspInit+0xe0>)
 80010ee:	4293      	cmp	r3, r2
 80010f0:	d159      	bne.n	80011a6 <HAL_DAC_MspInit+0xd6>
		/* USER CODE BEGIN DAC_MspInit 0 */

		/* USER CODE END DAC_MspInit 0 */
		/* DAC clock enable */
		__HAL_RCC_DAC_CLK_ENABLE();
 80010f2:	2300      	movs	r3, #0
 80010f4:	613b      	str	r3, [r7, #16]
 80010f6:	4b2f      	ldr	r3, [pc, #188]	@ (80011b4 <HAL_DAC_MspInit+0xe4>)
 80010f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010fa:	4a2e      	ldr	r2, [pc, #184]	@ (80011b4 <HAL_DAC_MspInit+0xe4>)
 80010fc:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8001100:	6413      	str	r3, [r2, #64]	@ 0x40
 8001102:	4b2c      	ldr	r3, [pc, #176]	@ (80011b4 <HAL_DAC_MspInit+0xe4>)
 8001104:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001106:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800110a:	613b      	str	r3, [r7, #16]
 800110c:	693b      	ldr	r3, [r7, #16]

		__HAL_RCC_GPIOA_CLK_ENABLE();
 800110e:	2300      	movs	r3, #0
 8001110:	60fb      	str	r3, [r7, #12]
 8001112:	4b28      	ldr	r3, [pc, #160]	@ (80011b4 <HAL_DAC_MspInit+0xe4>)
 8001114:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001116:	4a27      	ldr	r2, [pc, #156]	@ (80011b4 <HAL_DAC_MspInit+0xe4>)
 8001118:	f043 0301 	orr.w	r3, r3, #1
 800111c:	6313      	str	r3, [r2, #48]	@ 0x30
 800111e:	4b25      	ldr	r3, [pc, #148]	@ (80011b4 <HAL_DAC_MspInit+0xe4>)
 8001120:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001122:	f003 0301 	and.w	r3, r3, #1
 8001126:	60fb      	str	r3, [r7, #12]
 8001128:	68fb      	ldr	r3, [r7, #12]
		/**DAC GPIO Configuration
		 PA4         ------> DAC_OUT1
		 */
		GPIO_InitStruct.Pin = GPIO_PIN_4;
 800112a:	2310      	movs	r3, #16
 800112c:	617b      	str	r3, [r7, #20]
		GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800112e:	2303      	movs	r3, #3
 8001130:	61bb      	str	r3, [r7, #24]
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001132:	2300      	movs	r3, #0
 8001134:	61fb      	str	r3, [r7, #28]
		HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001136:	f107 0314 	add.w	r3, r7, #20
 800113a:	4619      	mov	r1, r3
 800113c:	481e      	ldr	r0, [pc, #120]	@ (80011b8 <HAL_DAC_MspInit+0xe8>)
 800113e:	f001 ff59 	bl	8002ff4 <HAL_GPIO_Init>

		/* DAC DMA Init */
		/* DAC1 Init */
		hdma_dac1.Instance = DMA1_Stream5;
 8001142:	4b1e      	ldr	r3, [pc, #120]	@ (80011bc <HAL_DAC_MspInit+0xec>)
 8001144:	4a1e      	ldr	r2, [pc, #120]	@ (80011c0 <HAL_DAC_MspInit+0xf0>)
 8001146:	601a      	str	r2, [r3, #0]
		hdma_dac1.Init.Channel = DMA_CHANNEL_7;
 8001148:	4b1c      	ldr	r3, [pc, #112]	@ (80011bc <HAL_DAC_MspInit+0xec>)
 800114a:	f04f 6260 	mov.w	r2, #234881024	@ 0xe000000
 800114e:	605a      	str	r2, [r3, #4]
		hdma_dac1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001150:	4b1a      	ldr	r3, [pc, #104]	@ (80011bc <HAL_DAC_MspInit+0xec>)
 8001152:	2240      	movs	r2, #64	@ 0x40
 8001154:	609a      	str	r2, [r3, #8]
		hdma_dac1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001156:	4b19      	ldr	r3, [pc, #100]	@ (80011bc <HAL_DAC_MspInit+0xec>)
 8001158:	2200      	movs	r2, #0
 800115a:	60da      	str	r2, [r3, #12]
		hdma_dac1.Init.MemInc = DMA_MINC_ENABLE;
 800115c:	4b17      	ldr	r3, [pc, #92]	@ (80011bc <HAL_DAC_MspInit+0xec>)
 800115e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001162:	611a      	str	r2, [r3, #16]
		hdma_dac1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001164:	4b15      	ldr	r3, [pc, #84]	@ (80011bc <HAL_DAC_MspInit+0xec>)
 8001166:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800116a:	615a      	str	r2, [r3, #20]
		hdma_dac1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800116c:	4b13      	ldr	r3, [pc, #76]	@ (80011bc <HAL_DAC_MspInit+0xec>)
 800116e:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001172:	619a      	str	r2, [r3, #24]
		hdma_dac1.Init.Mode = DMA_CIRCULAR;
 8001174:	4b11      	ldr	r3, [pc, #68]	@ (80011bc <HAL_DAC_MspInit+0xec>)
 8001176:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800117a:	61da      	str	r2, [r3, #28]
		hdma_dac1.Init.Priority = DMA_PRIORITY_HIGH;
 800117c:	4b0f      	ldr	r3, [pc, #60]	@ (80011bc <HAL_DAC_MspInit+0xec>)
 800117e:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001182:	621a      	str	r2, [r3, #32]
		hdma_dac1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001184:	4b0d      	ldr	r3, [pc, #52]	@ (80011bc <HAL_DAC_MspInit+0xec>)
 8001186:	2200      	movs	r2, #0
 8001188:	625a      	str	r2, [r3, #36]	@ 0x24
		if (HAL_DMA_Init(&hdma_dac1) != HAL_OK) {
 800118a:	480c      	ldr	r0, [pc, #48]	@ (80011bc <HAL_DAC_MspInit+0xec>)
 800118c:	f001 fb30 	bl	80027f0 <HAL_DMA_Init>
 8001190:	4603      	mov	r3, r0
 8001192:	2b00      	cmp	r3, #0
 8001194:	d001      	beq.n	800119a <HAL_DAC_MspInit+0xca>
			Error_Handler();
 8001196:	f000 fa6d 	bl	8001674 <Error_Handler>
		}

		__HAL_LINKDMA(dacHandle, DMA_Handle1, hdma_dac1);
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	4a07      	ldr	r2, [pc, #28]	@ (80011bc <HAL_DAC_MspInit+0xec>)
 800119e:	609a      	str	r2, [r3, #8]
 80011a0:	4a06      	ldr	r2, [pc, #24]	@ (80011bc <HAL_DAC_MspInit+0xec>)
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	6393      	str	r3, [r2, #56]	@ 0x38

		/* USER CODE BEGIN DAC_MspInit 1 */

		/* USER CODE END DAC_MspInit 1 */
	}
}
 80011a6:	bf00      	nop
 80011a8:	3728      	adds	r7, #40	@ 0x28
 80011aa:	46bd      	mov	sp, r7
 80011ac:	bd80      	pop	{r7, pc}
 80011ae:	bf00      	nop
 80011b0:	40007400 	.word	0x40007400
 80011b4:	40023800 	.word	0x40023800
 80011b8:	40020000 	.word	0x40020000
 80011bc:	2000014c 	.word	0x2000014c
 80011c0:	40026088 	.word	0x40026088

080011c4 <MX_DMA_Init>:
/* USER CODE END 1 */

/**
 * Enable DMA controller clock
 */
void MX_DMA_Init(void) {
 80011c4:	b580      	push	{r7, lr}
 80011c6:	b082      	sub	sp, #8
 80011c8:	af00      	add	r7, sp, #0

	/* DMA controller clock enable */
	__HAL_RCC_DMA1_CLK_ENABLE();
 80011ca:	2300      	movs	r3, #0
 80011cc:	607b      	str	r3, [r7, #4]
 80011ce:	4b1f      	ldr	r3, [pc, #124]	@ (800124c <MX_DMA_Init+0x88>)
 80011d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011d2:	4a1e      	ldr	r2, [pc, #120]	@ (800124c <MX_DMA_Init+0x88>)
 80011d4:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80011d8:	6313      	str	r3, [r2, #48]	@ 0x30
 80011da:	4b1c      	ldr	r3, [pc, #112]	@ (800124c <MX_DMA_Init+0x88>)
 80011dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011de:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80011e2:	607b      	str	r3, [r7, #4]
 80011e4:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_DMA2_CLK_ENABLE();
 80011e6:	2300      	movs	r3, #0
 80011e8:	603b      	str	r3, [r7, #0]
 80011ea:	4b18      	ldr	r3, [pc, #96]	@ (800124c <MX_DMA_Init+0x88>)
 80011ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011ee:	4a17      	ldr	r2, [pc, #92]	@ (800124c <MX_DMA_Init+0x88>)
 80011f0:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80011f4:	6313      	str	r3, [r2, #48]	@ 0x30
 80011f6:	4b15      	ldr	r3, [pc, #84]	@ (800124c <MX_DMA_Init+0x88>)
 80011f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011fa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80011fe:	603b      	str	r3, [r7, #0]
 8001200:	683b      	ldr	r3, [r7, #0]

	/* DMA interrupt init */
	/* DMA2_Stream2_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 8001202:	2200      	movs	r2, #0
 8001204:	2100      	movs	r1, #0
 8001206:	203a      	movs	r0, #58	@ 0x3a
 8001208:	f001 f8d3 	bl	80023b2 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 800120c:	203a      	movs	r0, #58	@ 0x3a
 800120e:	f001 f8ec 	bl	80023ea <HAL_NVIC_EnableIRQ>
	/* DMA2_Stream7_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 0, 0);
 8001212:	2200      	movs	r2, #0
 8001214:	2100      	movs	r1, #0
 8001216:	2046      	movs	r0, #70	@ 0x46
 8001218:	f001 f8cb 	bl	80023b2 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 800121c:	2046      	movs	r0, #70	@ 0x46
 800121e:	f001 f8e4 	bl	80023ea <HAL_NVIC_EnableIRQ>
	/* DMA controller clock enable */

	/* DMA1_Stream5_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8001222:	2200      	movs	r2, #0
 8001224:	2100      	movs	r1, #0
 8001226:	2010      	movs	r0, #16
 8001228:	f001 f8c3 	bl	80023b2 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 800122c:	2010      	movs	r0, #16
 800122e:	f001 f8dc 	bl	80023ea <HAL_NVIC_EnableIRQ>
	/* DMA2_Stream0_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8001232:	2200      	movs	r2, #0
 8001234:	2100      	movs	r1, #0
 8001236:	2038      	movs	r0, #56	@ 0x38
 8001238:	f001 f8bb 	bl	80023b2 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 800123c:	2038      	movs	r0, #56	@ 0x38
 800123e:	f001 f8d4 	bl	80023ea <HAL_NVIC_EnableIRQ>

}
 8001242:	bf00      	nop
 8001244:	3708      	adds	r7, #8
 8001246:	46bd      	mov	sp, r7
 8001248:	bd80      	pop	{r7, pc}
 800124a:	bf00      	nop
 800124c:	40023800 	.word	0x40023800

08001250 <MX_GPIO_Init>:
 * Input
 * Output
 * EVENT_OUT
 * EXTI
 */
void MX_GPIO_Init(void) {
 8001250:	b480      	push	{r7}
 8001252:	b083      	sub	sp, #12
 8001254:	af00      	add	r7, sp, #0

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8001256:	2300      	movs	r3, #0
 8001258:	607b      	str	r3, [r7, #4]
 800125a:	4b09      	ldr	r3, [pc, #36]	@ (8001280 <MX_GPIO_Init+0x30>)
 800125c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800125e:	4a08      	ldr	r2, [pc, #32]	@ (8001280 <MX_GPIO_Init+0x30>)
 8001260:	f043 0301 	orr.w	r3, r3, #1
 8001264:	6313      	str	r3, [r2, #48]	@ 0x30
 8001266:	4b06      	ldr	r3, [pc, #24]	@ (8001280 <MX_GPIO_Init+0x30>)
 8001268:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800126a:	f003 0301 	and.w	r3, r3, #1
 800126e:	607b      	str	r3, [r7, #4]
 8001270:	687b      	ldr	r3, [r7, #4]

}
 8001272:	bf00      	nop
 8001274:	370c      	adds	r7, #12
 8001276:	46bd      	mov	sp, r7
 8001278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800127c:	4770      	bx	lr
 800127e:	bf00      	nop
 8001280:	40023800 	.word	0x40023800
 8001284:	00000000 	.word	0x00000000

08001288 <main>:
float IMinA = 78.1;
float t_freq = 200.0;
float single_freq = 300.0;

int main(void)
{
 8001288:	b590      	push	{r4, r7, lr}
 800128a:	b087      	sub	sp, #28
 800128c:	af02      	add	r7, sp, #8
	HAL_Init();
 800128e:	f000 fce1 	bl	8001c54 <HAL_Init>
	SystemClock_Config();
 8001292:	f000 f8dd 	bl	8001450 <SystemClock_Config>
	MX_GPIO_Init();
 8001296:	f7ff ffdb 	bl	8001250 <MX_GPIO_Init>
	MX_DMA_Init();
 800129a:	f7ff ff93 	bl	80011c4 <MX_DMA_Init>
	MX_ADC1_Init();
 800129e:	f7ff fe1b 	bl	8000ed8 <MX_ADC1_Init>
	MX_DAC_Init();
 80012a2:	f7ff feeb 	bl	800107c <MX_DAC_Init>
	MX_TIM2_Init();
 80012a6:	f000 fabd 	bl	8001824 <MX_TIM2_Init>
	MX_TIM3_Init();
 80012aa:	f000 fb07 	bl	80018bc <MX_TIM3_Init>
	MX_GPIO_Init();
 80012ae:	f7ff ffcf 	bl	8001250 <MX_GPIO_Init>
	MX_USART1_UART_Init();
 80012b2:	f000 fbc3 	bl	8001a3c <MX_USART1_UART_Init>

	HAL_TIM_Base_Start(&htim2);
 80012b6:	4852      	ldr	r0, [pc, #328]	@ (8001400 <main+0x178>)
 80012b8:	f002 fce0 	bl	8003c7c <HAL_TIM_Base_Start>
	HAL_TIM_Base_Start(&htim3);
 80012bc:	4851      	ldr	r0, [pc, #324]	@ (8001404 <main+0x17c>)
 80012be:	f002 fcdd 	bl	8003c7c <HAL_TIM_Base_Start>
	htim3.Instance->ARR = 84e6 / adc_fs - 1;
 80012c2:	4b51      	ldr	r3, [pc, #324]	@ (8001408 <main+0x180>)
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	4618      	mov	r0, r3
 80012c8:	f7ff f914 	bl	80004f4 <__aeabi_ui2d>
 80012cc:	4602      	mov	r2, r0
 80012ce:	460b      	mov	r3, r1
 80012d0:	a149      	add	r1, pc, #292	@ (adr r1, 80013f8 <main+0x170>)
 80012d2:	e9d1 0100 	ldrd	r0, r1, [r1]
 80012d6:	f7ff fab1 	bl	800083c <__aeabi_ddiv>
 80012da:	4602      	mov	r2, r0
 80012dc:	460b      	mov	r3, r1
 80012de:	4610      	mov	r0, r2
 80012e0:	4619      	mov	r1, r3
 80012e2:	f04f 0200 	mov.w	r2, #0
 80012e6:	4b49      	ldr	r3, [pc, #292]	@ (800140c <main+0x184>)
 80012e8:	f7fe ffc6 	bl	8000278 <__aeabi_dsub>
 80012ec:	4602      	mov	r2, r0
 80012ee:	460b      	mov	r3, r1
 80012f0:	4944      	ldr	r1, [pc, #272]	@ (8001404 <main+0x17c>)
 80012f2:	680c      	ldr	r4, [r1, #0]
 80012f4:	4610      	mov	r0, r2
 80012f6:	4619      	mov	r1, r3
 80012f8:	f7ff fc38 	bl	8000b6c <__aeabi_d2uiz>
 80012fc:	4603      	mov	r3, r0
 80012fe:	62e3      	str	r3, [r4, #44]	@ 0x2c
	Sign_samplingOver = 0;
 8001300:	4b43      	ldr	r3, [pc, #268]	@ (8001410 <main+0x188>)
 8001302:	2200      	movs	r2, #0
 8001304:	701a      	strb	r2, [r3, #0]
	spwm_table();
 8001306:	f000 f90f 	bl	8001528 <spwm_table>
	generateWave(200);
 800130a:	20c8      	movs	r0, #200	@ 0xc8
 800130c:	f000 f96c 	bl	80015e8 <generateWave>
	HAL_DAC_Start_DMA(&hdac, DAC1_CHANNEL_1, (uint32_t *)spwm, 50000,
 8001310:	2300      	movs	r3, #0
 8001312:	9300      	str	r3, [sp, #0]
 8001314:	f24c 3350 	movw	r3, #50000	@ 0xc350
 8001318:	4a3e      	ldr	r2, [pc, #248]	@ (8001414 <main+0x18c>)
 800131a:	2100      	movs	r1, #0
 800131c:	483e      	ldr	r0, [pc, #248]	@ (8001418 <main+0x190>)
 800131e:	f001 f8a1 	bl	8002464 <HAL_DAC_Start_DMA>
					  DAC_ALIGN_12B_R);

	HAL_UART_Receive_IT(&TJC_UART, RxBuffer, 1);
 8001322:	2201      	movs	r2, #1
 8001324:	493d      	ldr	r1, [pc, #244]	@ (800141c <main+0x194>)
 8001326:	483e      	ldr	r0, [pc, #248]	@ (8001420 <main+0x198>)
 8001328:	f003 f820 	bl	800436c <HAL_UART_Receive_IT>

	while (1)
	{
		char str[10];
		sprintf(str, "x3.val=%d", (int)(single_freq * 100));
 800132c:	4b3d      	ldr	r3, [pc, #244]	@ (8001424 <main+0x19c>)
 800132e:	edd3 7a00 	vldr	s15, [r3]
 8001332:	ed9f 7a3d 	vldr	s14, [pc, #244]	@ 8001428 <main+0x1a0>
 8001336:	ee67 7a87 	vmul.f32	s15, s15, s14
 800133a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800133e:	1d3b      	adds	r3, r7, #4
 8001340:	ee17 2a90 	vmov	r2, s15
 8001344:	4939      	ldr	r1, [pc, #228]	@ (800142c <main+0x1a4>)
 8001346:	4618      	mov	r0, r3
 8001348:	f003 ff44 	bl	80051d4 <siprintf>
		tjc_send_string(str);
 800134c:	1d3b      	adds	r3, r7, #4
 800134e:	4618      	mov	r0, r3
 8001350:	f000 fb54 	bl	80019fc <tjc_send_string>

		sprintf(str, "x0.val=%d", (int)(Center_freq * 100));
 8001354:	4b36      	ldr	r3, [pc, #216]	@ (8001430 <main+0x1a8>)
 8001356:	edd3 7a00 	vldr	s15, [r3]
 800135a:	ed9f 7a33 	vldr	s14, [pc, #204]	@ 8001428 <main+0x1a0>
 800135e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001362:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001366:	1d3b      	adds	r3, r7, #4
 8001368:	ee17 2a90 	vmov	r2, s15
 800136c:	4931      	ldr	r1, [pc, #196]	@ (8001434 <main+0x1ac>)
 800136e:	4618      	mov	r0, r3
 8001370:	f003 ff30 	bl	80051d4 <siprintf>
		tjc_send_string(str);
 8001374:	1d3b      	adds	r3, r7, #4
 8001376:	4618      	mov	r0, r3
 8001378:	f000 fb40 	bl	80019fc <tjc_send_string>
		sprintf(str, "x1.val=%d", (int)(Bandwith * 100));
 800137c:	4b2e      	ldr	r3, [pc, #184]	@ (8001438 <main+0x1b0>)
 800137e:	edd3 7a00 	vldr	s15, [r3]
 8001382:	ed9f 7a29 	vldr	s14, [pc, #164]	@ 8001428 <main+0x1a0>
 8001386:	ee67 7a87 	vmul.f32	s15, s15, s14
 800138a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800138e:	1d3b      	adds	r3, r7, #4
 8001390:	ee17 2a90 	vmov	r2, s15
 8001394:	4929      	ldr	r1, [pc, #164]	@ (800143c <main+0x1b4>)
 8001396:	4618      	mov	r0, r3
 8001398:	f003 ff1c 	bl	80051d4 <siprintf>
		tjc_send_string(str);
 800139c:	1d3b      	adds	r3, r7, #4
 800139e:	4618      	mov	r0, r3
 80013a0:	f000 fb2c 	bl	80019fc <tjc_send_string>
		sprintf(str, "x2.val=%d", (int)(IMinA * 100));
 80013a4:	4b26      	ldr	r3, [pc, #152]	@ (8001440 <main+0x1b8>)
 80013a6:	edd3 7a00 	vldr	s15, [r3]
 80013aa:	ed9f 7a1f 	vldr	s14, [pc, #124]	@ 8001428 <main+0x1a0>
 80013ae:	ee67 7a87 	vmul.f32	s15, s15, s14
 80013b2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80013b6:	1d3b      	adds	r3, r7, #4
 80013b8:	ee17 2a90 	vmov	r2, s15
 80013bc:	4921      	ldr	r1, [pc, #132]	@ (8001444 <main+0x1bc>)
 80013be:	4618      	mov	r0, r3
 80013c0:	f003 ff08 	bl	80051d4 <siprintf>
		tjc_send_string(str);
 80013c4:	1d3b      	adds	r3, r7, #4
 80013c6:	4618      	mov	r0, r3
 80013c8:	f000 fb18 	bl	80019fc <tjc_send_string>

		sprintf(str, "x4.val=%d", (int)(t_freq * 100));
 80013cc:	4b1e      	ldr	r3, [pc, #120]	@ (8001448 <main+0x1c0>)
 80013ce:	edd3 7a00 	vldr	s15, [r3]
 80013d2:	ed9f 7a15 	vldr	s14, [pc, #84]	@ 8001428 <main+0x1a0>
 80013d6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80013da:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80013de:	1d3b      	adds	r3, r7, #4
 80013e0:	ee17 2a90 	vmov	r2, s15
 80013e4:	4919      	ldr	r1, [pc, #100]	@ (800144c <main+0x1c4>)
 80013e6:	4618      	mov	r0, r3
 80013e8:	f003 fef4 	bl	80051d4 <siprintf>
		tjc_send_string(str);
 80013ec:	1d3b      	adds	r3, r7, #4
 80013ee:	4618      	mov	r0, r3
 80013f0:	f000 fb04 	bl	80019fc <tjc_send_string>
	{
 80013f4:	bf00      	nop
 80013f6:	e799      	b.n	800132c <main+0xa4>
 80013f8:	00000000 	.word	0x00000000
 80013fc:	419406f4 	.word	0x419406f4
 8001400:	20000d6c 	.word	0x20000d6c
 8001404:	20000db4 	.word	0x20000db4
 8001408:	20000000 	.word	0x20000000
 800140c:	3ff00000 	.word	0x3ff00000
 8001410:	20000d64 	.word	0x20000d64
 8001414:	2000097c 	.word	0x2000097c
 8001418:	20000138 	.word	0x20000138
 800141c:	20000dfc 	.word	0x20000dfc
 8001420:	20000e00 	.word	0x20000e00
 8001424:	20000014 	.word	0x20000014
 8001428:	42c80000 	.word	0x42c80000
 800142c:	08006c08 	.word	0x08006c08
 8001430:	20000004 	.word	0x20000004
 8001434:	08006c14 	.word	0x08006c14
 8001438:	20000008 	.word	0x20000008
 800143c:	08006c20 	.word	0x08006c20
 8001440:	2000000c 	.word	0x2000000c
 8001444:	08006c2c 	.word	0x08006c2c
 8001448:	20000010 	.word	0x20000010
 800144c:	08006c38 	.word	0x08006c38

08001450 <SystemClock_Config>:
	}
}

void SystemClock_Config(void)
{
 8001450:	b580      	push	{r7, lr}
 8001452:	b094      	sub	sp, #80	@ 0x50
 8001454:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001456:	f107 0320 	add.w	r3, r7, #32
 800145a:	2230      	movs	r2, #48	@ 0x30
 800145c:	2100      	movs	r1, #0
 800145e:	4618      	mov	r0, r3
 8001460:	f003 feda 	bl	8005218 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001464:	f107 030c 	add.w	r3, r7, #12
 8001468:	2200      	movs	r2, #0
 800146a:	601a      	str	r2, [r3, #0]
 800146c:	605a      	str	r2, [r3, #4]
 800146e:	609a      	str	r2, [r3, #8]
 8001470:	60da      	str	r2, [r3, #12]
 8001472:	611a      	str	r2, [r3, #16]

	__HAL_RCC_PWR_CLK_ENABLE();
 8001474:	2300      	movs	r3, #0
 8001476:	60bb      	str	r3, [r7, #8]
 8001478:	4b28      	ldr	r3, [pc, #160]	@ (800151c <SystemClock_Config+0xcc>)
 800147a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800147c:	4a27      	ldr	r2, [pc, #156]	@ (800151c <SystemClock_Config+0xcc>)
 800147e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001482:	6413      	str	r3, [r2, #64]	@ 0x40
 8001484:	4b25      	ldr	r3, [pc, #148]	@ (800151c <SystemClock_Config+0xcc>)
 8001486:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001488:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800148c:	60bb      	str	r3, [r7, #8]
 800148e:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001490:	2300      	movs	r3, #0
 8001492:	607b      	str	r3, [r7, #4]
 8001494:	4b22      	ldr	r3, [pc, #136]	@ (8001520 <SystemClock_Config+0xd0>)
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	4a21      	ldr	r2, [pc, #132]	@ (8001520 <SystemClock_Config+0xd0>)
 800149a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800149e:	6013      	str	r3, [r2, #0]
 80014a0:	4b1f      	ldr	r3, [pc, #124]	@ (8001520 <SystemClock_Config+0xd0>)
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80014a8:	607b      	str	r3, [r7, #4]
 80014aa:	687b      	ldr	r3, [r7, #4]

	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80014ac:	2302      	movs	r3, #2
 80014ae:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80014b0:	2301      	movs	r3, #1
 80014b2:	62fb      	str	r3, [r7, #44]	@ 0x2c
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80014b4:	2310      	movs	r3, #16
 80014b6:	633b      	str	r3, [r7, #48]	@ 0x30
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80014b8:	2302      	movs	r3, #2
 80014ba:	63bb      	str	r3, [r7, #56]	@ 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80014bc:	2300      	movs	r3, #0
 80014be:	63fb      	str	r3, [r7, #60]	@ 0x3c
	RCC_OscInitStruct.PLL.PLLM = 8;
 80014c0:	2308      	movs	r3, #8
 80014c2:	643b      	str	r3, [r7, #64]	@ 0x40
	RCC_OscInitStruct.PLL.PLLN = 168;
 80014c4:	23a8      	movs	r3, #168	@ 0xa8
 80014c6:	647b      	str	r3, [r7, #68]	@ 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80014c8:	2302      	movs	r3, #2
 80014ca:	64bb      	str	r3, [r7, #72]	@ 0x48
	RCC_OscInitStruct.PLL.PLLQ = 4;
 80014cc:	2304      	movs	r3, #4
 80014ce:	64fb      	str	r3, [r7, #76]	@ 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80014d0:	f107 0320 	add.w	r3, r7, #32
 80014d4:	4618      	mov	r0, r3
 80014d6:	f001 ff29 	bl	800332c <HAL_RCC_OscConfig>
 80014da:	4603      	mov	r3, r0
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d001      	beq.n	80014e4 <SystemClock_Config+0x94>
	{
		Error_Handler();
 80014e0:	f000 f8c8 	bl	8001674 <Error_Handler>
	}

	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80014e4:	230f      	movs	r3, #15
 80014e6:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80014e8:	2302      	movs	r3, #2
 80014ea:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80014ec:	2300      	movs	r3, #0
 80014ee:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80014f0:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80014f4:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80014f6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80014fa:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80014fc:	f107 030c 	add.w	r3, r7, #12
 8001500:	2105      	movs	r1, #5
 8001502:	4618      	mov	r0, r3
 8001504:	f002 f98a 	bl	800381c <HAL_RCC_ClockConfig>
 8001508:	4603      	mov	r3, r0
 800150a:	2b00      	cmp	r3, #0
 800150c:	d001      	beq.n	8001512 <SystemClock_Config+0xc2>
	{
		Error_Handler();
 800150e:	f000 f8b1 	bl	8001674 <Error_Handler>
	}
}
 8001512:	bf00      	nop
 8001514:	3750      	adds	r7, #80	@ 0x50
 8001516:	46bd      	mov	sp, r7
 8001518:	bd80      	pop	{r7, pc}
 800151a:	bf00      	nop
 800151c:	40023800 	.word	0x40023800
 8001520:	40007000 	.word	0x40007000
 8001524:	00000000 	.word	0x00000000

08001528 <spwm_table>:
void spwm_table()
{
 8001528:	b580      	push	{r7, lr}
 800152a:	b086      	sub	sp, #24
 800152c:	af00      	add	r7, sp, #0
	for (int i = 0; i < SAMPLES; ++i)
 800152e:	2300      	movs	r3, #0
 8001530:	617b      	str	r3, [r7, #20]
 8001532:	e043      	b.n	80015bc <spwm_table+0x94>
	{
		double angle = 2 * M_PI * i / SAMPLES; // 计算当前样本点的角度
 8001534:	6978      	ldr	r0, [r7, #20]
 8001536:	f7fe ffed 	bl	8000514 <__aeabi_i2d>
 800153a:	a329      	add	r3, pc, #164	@ (adr r3, 80015e0 <spwm_table+0xb8>)
 800153c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001540:	f7ff f852 	bl	80005e8 <__aeabi_dmul>
 8001544:	4602      	mov	r2, r0
 8001546:	460b      	mov	r3, r1
 8001548:	4610      	mov	r0, r2
 800154a:	4619      	mov	r1, r3
 800154c:	f04f 0200 	mov.w	r2, #0
 8001550:	4b1f      	ldr	r3, [pc, #124]	@ (80015d0 <spwm_table+0xa8>)
 8001552:	f7ff f973 	bl	800083c <__aeabi_ddiv>
 8001556:	4602      	mov	r2, r0
 8001558:	460b      	mov	r3, r1
 800155a:	e9c7 2302 	strd	r2, r3, [r7, #8]
		double sine_value = cos(angle);		   // 计算正弦值（范围：-1到1）
 800155e:	ed97 0b02 	vldr	d0, [r7, #8]
 8001562:	f004 fad9 	bl	8005b18 <cos>
 8001566:	ed87 0b00 	vstr	d0, [r7]
		pwm[i] = round((sine_value + 1.0) * (PWM_MAX / 2));
 800156a:	f04f 0200 	mov.w	r2, #0
 800156e:	4b19      	ldr	r3, [pc, #100]	@ (80015d4 <spwm_table+0xac>)
 8001570:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001574:	f7fe fe82 	bl	800027c <__adddf3>
 8001578:	4602      	mov	r2, r0
 800157a:	460b      	mov	r3, r1
 800157c:	4610      	mov	r0, r2
 800157e:	4619      	mov	r1, r3
 8001580:	f04f 0200 	mov.w	r2, #0
 8001584:	4b14      	ldr	r3, [pc, #80]	@ (80015d8 <spwm_table+0xb0>)
 8001586:	f7ff f82f 	bl	80005e8 <__aeabi_dmul>
 800158a:	4602      	mov	r2, r0
 800158c:	460b      	mov	r3, r1
 800158e:	ec43 2b17 	vmov	d7, r2, r3
 8001592:	eeb0 0a47 	vmov.f32	s0, s14
 8001596:	eef0 0a67 	vmov.f32	s1, s15
 800159a:	f004 fb11 	bl	8005bc0 <round>
 800159e:	ec53 2b10 	vmov	r2, r3, d0
 80015a2:	4610      	mov	r0, r2
 80015a4:	4619      	mov	r1, r3
 80015a6:	f7ff fae1 	bl	8000b6c <__aeabi_d2uiz>
 80015aa:	4603      	mov	r3, r0
 80015ac:	b299      	uxth	r1, r3
 80015ae:	4a0b      	ldr	r2, [pc, #44]	@ (80015dc <spwm_table+0xb4>)
 80015b0:	697b      	ldr	r3, [r7, #20]
 80015b2:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for (int i = 0; i < SAMPLES; ++i)
 80015b6:	697b      	ldr	r3, [r7, #20]
 80015b8:	3301      	adds	r3, #1
 80015ba:	617b      	str	r3, [r7, #20]
 80015bc:	697b      	ldr	r3, [r7, #20]
 80015be:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80015c2:	dbb7      	blt.n	8001534 <spwm_table+0xc>
	}
}
 80015c4:	bf00      	nop
 80015c6:	bf00      	nop
 80015c8:	3718      	adds	r7, #24
 80015ca:	46bd      	mov	sp, r7
 80015cc:	bd80      	pop	{r7, pc}
 80015ce:	bf00      	nop
 80015d0:	408f4000 	.word	0x408f4000
 80015d4:	3ff00000 	.word	0x3ff00000
 80015d8:	40490000 	.word	0x40490000
 80015dc:	200001ac 	.word	0x200001ac
 80015e0:	54442d18 	.word	0x54442d18
 80015e4:	401921fb 	.word	0x401921fb

080015e8 <generateWave>:
void generateWave(int freq)
{
 80015e8:	b480      	push	{r7}
 80015ea:	b087      	sub	sp, #28
 80015ec:	af00      	add	r7, sp, #0
 80015ee:	6078      	str	r0, [r7, #4]
	const int period = SAMPLERATE / freq; // 计算一个周期的采样点数
 80015f0:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	fb92 f3f3 	sdiv	r3, r2, r3
 80015fa:	613b      	str	r3, [r7, #16]

	for (int i = 0; i < SAMPLERATE; ++i)
 80015fc:	2300      	movs	r3, #0
 80015fe:	617b      	str	r3, [r7, #20]
 8001600:	e026      	b.n	8001650 <generateWave+0x68>
	{
		int pwmIndex = (i % period) * (sizeof(pwm) / sizeof(pwm[0]) - 1) / period; // 计算当前采样点对应的pwm索引
 8001602:	697b      	ldr	r3, [r7, #20]
 8001604:	693a      	ldr	r2, [r7, #16]
 8001606:	fb93 f2f2 	sdiv	r2, r3, r2
 800160a:	6939      	ldr	r1, [r7, #16]
 800160c:	fb01 f202 	mul.w	r2, r1, r2
 8001610:	1a9b      	subs	r3, r3, r2
 8001612:	461a      	mov	r2, r3
 8001614:	f240 33e7 	movw	r3, #999	@ 0x3e7
 8001618:	fb03 f202 	mul.w	r2, r3, r2
 800161c:	693b      	ldr	r3, [r7, #16]
 800161e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001622:	60fb      	str	r3, [r7, #12]
		spwm[i] = pwm[pwmIndex] * 4095 / 100;
 8001624:	4a10      	ldr	r2, [pc, #64]	@ (8001668 <generateWave+0x80>)
 8001626:	68fb      	ldr	r3, [r7, #12]
 8001628:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800162c:	461a      	mov	r2, r3
 800162e:	4613      	mov	r3, r2
 8001630:	031b      	lsls	r3, r3, #12
 8001632:	1a9b      	subs	r3, r3, r2
 8001634:	4a0d      	ldr	r2, [pc, #52]	@ (800166c <generateWave+0x84>)
 8001636:	fb82 1203 	smull	r1, r2, r2, r3
 800163a:	1152      	asrs	r2, r2, #5
 800163c:	17db      	asrs	r3, r3, #31
 800163e:	1ad3      	subs	r3, r2, r3
 8001640:	b299      	uxth	r1, r3
 8001642:	4a0b      	ldr	r2, [pc, #44]	@ (8001670 <generateWave+0x88>)
 8001644:	697b      	ldr	r3, [r7, #20]
 8001646:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for (int i = 0; i < SAMPLERATE; ++i)
 800164a:	697b      	ldr	r3, [r7, #20]
 800164c:	3301      	adds	r3, #1
 800164e:	617b      	str	r3, [r7, #20]
 8001650:	697b      	ldr	r3, [r7, #20]
 8001652:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8001656:	dbd4      	blt.n	8001602 <generateWave+0x1a>
	}
}
 8001658:	bf00      	nop
 800165a:	bf00      	nop
 800165c:	371c      	adds	r7, #28
 800165e:	46bd      	mov	sp, r7
 8001660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001664:	4770      	bx	lr
 8001666:	bf00      	nop
 8001668:	200001ac 	.word	0x200001ac
 800166c:	51eb851f 	.word	0x51eb851f
 8001670:	2000097c 	.word	0x2000097c

08001674 <Error_Handler>:
	arm_max_f32(FFT_OUTPUT, adc_cache_size, &FFT_OUTPUT_MAX,
				&FFT_OUTPUT_MAX_index);
}

void Error_Handler(void)
{
 8001674:	b480      	push	{r7}
 8001676:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001678:	b672      	cpsid	i
}
 800167a:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 800167c:	bf00      	nop
 800167e:	e7fd      	b.n	800167c <Error_Handler+0x8>

08001680 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001680:	b480      	push	{r7}
 8001682:	b083      	sub	sp, #12
 8001684:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001686:	2300      	movs	r3, #0
 8001688:	607b      	str	r3, [r7, #4]
 800168a:	4b10      	ldr	r3, [pc, #64]	@ (80016cc <HAL_MspInit+0x4c>)
 800168c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800168e:	4a0f      	ldr	r2, [pc, #60]	@ (80016cc <HAL_MspInit+0x4c>)
 8001690:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001694:	6453      	str	r3, [r2, #68]	@ 0x44
 8001696:	4b0d      	ldr	r3, [pc, #52]	@ (80016cc <HAL_MspInit+0x4c>)
 8001698:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800169a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800169e:	607b      	str	r3, [r7, #4]
 80016a0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80016a2:	2300      	movs	r3, #0
 80016a4:	603b      	str	r3, [r7, #0]
 80016a6:	4b09      	ldr	r3, [pc, #36]	@ (80016cc <HAL_MspInit+0x4c>)
 80016a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016aa:	4a08      	ldr	r2, [pc, #32]	@ (80016cc <HAL_MspInit+0x4c>)
 80016ac:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80016b0:	6413      	str	r3, [r2, #64]	@ 0x40
 80016b2:	4b06      	ldr	r3, [pc, #24]	@ (80016cc <HAL_MspInit+0x4c>)
 80016b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016b6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80016ba:	603b      	str	r3, [r7, #0]
 80016bc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80016be:	bf00      	nop
 80016c0:	370c      	adds	r7, #12
 80016c2:	46bd      	mov	sp, r7
 80016c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c8:	4770      	bx	lr
 80016ca:	bf00      	nop
 80016cc:	40023800 	.word	0x40023800

080016d0 <NMI_Handler>:
/*           Cortex-M4 Processor Interruption and Exception Handlers          */
/******************************************************************************/
/**
 * @brief This function handles Non maskable interrupt.
 */
void NMI_Handler(void) {
 80016d0:	b480      	push	{r7}
 80016d2:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN NonMaskableInt_IRQn 0 */

	/* USER CODE END NonMaskableInt_IRQn 0 */
	/* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1) {
 80016d4:	bf00      	nop
 80016d6:	e7fd      	b.n	80016d4 <NMI_Handler+0x4>

080016d8 <HardFault_Handler>:
}

/**
 * @brief This function handles Hard fault interrupt.
 */
void HardFault_Handler(void) {
 80016d8:	b480      	push	{r7}
 80016da:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN HardFault_IRQn 0 */

	/* USER CODE END HardFault_IRQn 0 */
	while (1) {
 80016dc:	bf00      	nop
 80016de:	e7fd      	b.n	80016dc <HardFault_Handler+0x4>

080016e0 <MemManage_Handler>:
}

/**
 * @brief This function handles Memory management fault.
 */
void MemManage_Handler(void) {
 80016e0:	b480      	push	{r7}
 80016e2:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN MemoryManagement_IRQn 0 */

	/* USER CODE END MemoryManagement_IRQn 0 */
	while (1) {
 80016e4:	bf00      	nop
 80016e6:	e7fd      	b.n	80016e4 <MemManage_Handler+0x4>

080016e8 <BusFault_Handler>:
}

/**
 * @brief This function handles Pre-fetch fault, memory access fault.
 */
void BusFault_Handler(void) {
 80016e8:	b480      	push	{r7}
 80016ea:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN BusFault_IRQn 0 */

	/* USER CODE END BusFault_IRQn 0 */
	while (1) {
 80016ec:	bf00      	nop
 80016ee:	e7fd      	b.n	80016ec <BusFault_Handler+0x4>

080016f0 <UsageFault_Handler>:
}

/**
 * @brief This function handles Undefined instruction or illegal state.
 */
void UsageFault_Handler(void) {
 80016f0:	b480      	push	{r7}
 80016f2:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN UsageFault_IRQn 0 */

	/* USER CODE END UsageFault_IRQn 0 */
	while (1) {
 80016f4:	bf00      	nop
 80016f6:	e7fd      	b.n	80016f4 <UsageFault_Handler+0x4>

080016f8 <SVC_Handler>:
}

/**
 * @brief This function handles System service call via SWI instruction.
 */
void SVC_Handler(void) {
 80016f8:	b480      	push	{r7}
 80016fa:	af00      	add	r7, sp, #0

	/* USER CODE END SVCall_IRQn 0 */
	/* USER CODE BEGIN SVCall_IRQn 1 */

	/* USER CODE END SVCall_IRQn 1 */
}
 80016fc:	bf00      	nop
 80016fe:	46bd      	mov	sp, r7
 8001700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001704:	4770      	bx	lr

08001706 <DebugMon_Handler>:

/**
 * @brief This function handles Debug monitor.
 */
void DebugMon_Handler(void) {
 8001706:	b480      	push	{r7}
 8001708:	af00      	add	r7, sp, #0

	/* USER CODE END DebugMonitor_IRQn 0 */
	/* USER CODE BEGIN DebugMonitor_IRQn 1 */

	/* USER CODE END DebugMonitor_IRQn 1 */
}
 800170a:	bf00      	nop
 800170c:	46bd      	mov	sp, r7
 800170e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001712:	4770      	bx	lr

08001714 <PendSV_Handler>:

/**
 * @brief This function handles Pendable request for system service.
 */
void PendSV_Handler(void) {
 8001714:	b480      	push	{r7}
 8001716:	af00      	add	r7, sp, #0

	/* USER CODE END PendSV_IRQn 0 */
	/* USER CODE BEGIN PendSV_IRQn 1 */

	/* USER CODE END PendSV_IRQn 1 */
}
 8001718:	bf00      	nop
 800171a:	46bd      	mov	sp, r7
 800171c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001720:	4770      	bx	lr

08001722 <SysTick_Handler>:

/**
 * @brief This function handles System tick timer.
 */
void SysTick_Handler(void) {
 8001722:	b580      	push	{r7, lr}
 8001724:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN SysTick_IRQn 0 */

	/* USER CODE END SysTick_IRQn 0 */
	HAL_IncTick();
 8001726:	f000 fae7 	bl	8001cf8 <HAL_IncTick>
	/* USER CODE BEGIN SysTick_IRQn 1 */

	/* USER CODE END SysTick_IRQn 1 */
}
 800172a:	bf00      	nop
 800172c:	bd80      	pop	{r7, pc}
	...

08001730 <USART1_IRQHandler>:
/******************************************************************************/

/**
 * @brief This function handles USART1 global interrupt.
 */
void USART1_IRQHandler(void) {
 8001730:	b580      	push	{r7, lr}
 8001732:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN USART1_IRQn 0 */

	/* USER CODE END USART1_IRQn 0 */
	HAL_UART_IRQHandler(&huart1);
 8001734:	4802      	ldr	r0, [pc, #8]	@ (8001740 <USART1_IRQHandler+0x10>)
 8001736:	f002 fe49 	bl	80043cc <HAL_UART_IRQHandler>
	/* USER CODE BEGIN USART1_IRQn 1 */

	/* USER CODE END USART1_IRQn 1 */
}
 800173a:	bf00      	nop
 800173c:	bd80      	pop	{r7, pc}
 800173e:	bf00      	nop
 8001740:	20000e00 	.word	0x20000e00

08001744 <DMA2_Stream2_IRQHandler>:

/**
 * @brief This function handles DMA2 stream2 global interrupt.
 */
void DMA2_Stream2_IRQHandler(void) {
 8001744:	b580      	push	{r7, lr}
 8001746:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

	/* USER CODE END DMA2_Stream2_IRQn 0 */
	HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8001748:	4802      	ldr	r0, [pc, #8]	@ (8001754 <DMA2_Stream2_IRQHandler+0x10>)
 800174a:	f001 f9e9 	bl	8002b20 <HAL_DMA_IRQHandler>
	/* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

	/* USER CODE END DMA2_Stream2_IRQn 1 */
}
 800174e:	bf00      	nop
 8001750:	bd80      	pop	{r7, pc}
 8001752:	bf00      	nop
 8001754:	20000e44 	.word	0x20000e44

08001758 <DMA2_Stream7_IRQHandler>:

/**
 * @brief This function handles DMA2 stream7 global interrupt.
 */
void DMA2_Stream7_IRQHandler(void) {
 8001758:	b580      	push	{r7, lr}
 800175a:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN DMA2_Stream7_IRQn 0 */

	/* USER CODE END DMA2_Stream7_IRQn 0 */
	HAL_DMA_IRQHandler(&hdma_usart1_tx);
 800175c:	4802      	ldr	r0, [pc, #8]	@ (8001768 <DMA2_Stream7_IRQHandler+0x10>)
 800175e:	f001 f9df 	bl	8002b20 <HAL_DMA_IRQHandler>
	/* USER CODE BEGIN DMA2_Stream7_IRQn 1 */

	/* USER CODE END DMA2_Stream7_IRQn 1 */
}
 8001762:	bf00      	nop
 8001764:	bd80      	pop	{r7, pc}
 8001766:	bf00      	nop
 8001768:	20000ea4 	.word	0x20000ea4

0800176c <DMA1_Stream5_IRQHandler>:

void DMA1_Stream5_IRQHandler(void) {
 800176c:	b580      	push	{r7, lr}
 800176e:	af00      	add	r7, sp, #0

	HAL_DMA_IRQHandler(&hdma_dac1);
 8001770:	4802      	ldr	r0, [pc, #8]	@ (800177c <DMA1_Stream5_IRQHandler+0x10>)
 8001772:	f001 f9d5 	bl	8002b20 <HAL_DMA_IRQHandler>

}
 8001776:	bf00      	nop
 8001778:	bd80      	pop	{r7, pc}
 800177a:	bf00      	nop
 800177c:	2000014c 	.word	0x2000014c

08001780 <DMA2_Stream0_IRQHandler>:

void DMA2_Stream0_IRQHandler(void) {
 8001780:	b580      	push	{r7, lr}
 8001782:	af00      	add	r7, sp, #0
	HAL_DMA_IRQHandler(&hdma_adc1);
 8001784:	4802      	ldr	r0, [pc, #8]	@ (8001790 <DMA2_Stream0_IRQHandler+0x10>)
 8001786:	f001 f9cb 	bl	8002b20 <HAL_DMA_IRQHandler>
}
 800178a:	bf00      	nop
 800178c:	bd80      	pop	{r7, pc}
 800178e:	bf00      	nop
 8001790:	200000d8 	.word	0x200000d8

08001794 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001794:	b580      	push	{r7, lr}
 8001796:	b086      	sub	sp, #24
 8001798:	af00      	add	r7, sp, #0
 800179a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800179c:	4a14      	ldr	r2, [pc, #80]	@ (80017f0 <_sbrk+0x5c>)
 800179e:	4b15      	ldr	r3, [pc, #84]	@ (80017f4 <_sbrk+0x60>)
 80017a0:	1ad3      	subs	r3, r2, r3
 80017a2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80017a4:	697b      	ldr	r3, [r7, #20]
 80017a6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80017a8:	4b13      	ldr	r3, [pc, #76]	@ (80017f8 <_sbrk+0x64>)
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d102      	bne.n	80017b6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80017b0:	4b11      	ldr	r3, [pc, #68]	@ (80017f8 <_sbrk+0x64>)
 80017b2:	4a12      	ldr	r2, [pc, #72]	@ (80017fc <_sbrk+0x68>)
 80017b4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80017b6:	4b10      	ldr	r3, [pc, #64]	@ (80017f8 <_sbrk+0x64>)
 80017b8:	681a      	ldr	r2, [r3, #0]
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	4413      	add	r3, r2
 80017be:	693a      	ldr	r2, [r7, #16]
 80017c0:	429a      	cmp	r2, r3
 80017c2:	d207      	bcs.n	80017d4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80017c4:	f003 fd30 	bl	8005228 <__errno>
 80017c8:	4603      	mov	r3, r0
 80017ca:	220c      	movs	r2, #12
 80017cc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80017ce:	f04f 33ff 	mov.w	r3, #4294967295
 80017d2:	e009      	b.n	80017e8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80017d4:	4b08      	ldr	r3, [pc, #32]	@ (80017f8 <_sbrk+0x64>)
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80017da:	4b07      	ldr	r3, [pc, #28]	@ (80017f8 <_sbrk+0x64>)
 80017dc:	681a      	ldr	r2, [r3, #0]
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	4413      	add	r3, r2
 80017e2:	4a05      	ldr	r2, [pc, #20]	@ (80017f8 <_sbrk+0x64>)
 80017e4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80017e6:	68fb      	ldr	r3, [r7, #12]
}
 80017e8:	4618      	mov	r0, r3
 80017ea:	3718      	adds	r7, #24
 80017ec:	46bd      	mov	sp, r7
 80017ee:	bd80      	pop	{r7, pc}
 80017f0:	20020000 	.word	0x20020000
 80017f4:	00000400 	.word	0x00000400
 80017f8:	20000d68 	.word	0x20000d68
 80017fc:	20001050 	.word	0x20001050

08001800 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001800:	b480      	push	{r7}
 8001802:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001804:	4b06      	ldr	r3, [pc, #24]	@ (8001820 <SystemInit+0x20>)
 8001806:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800180a:	4a05      	ldr	r2, [pc, #20]	@ (8001820 <SystemInit+0x20>)
 800180c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001810:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001814:	bf00      	nop
 8001816:	46bd      	mov	sp, r7
 8001818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800181c:	4770      	bx	lr
 800181e:	bf00      	nop
 8001820:	e000ed00 	.word	0xe000ed00

08001824 <MX_TIM2_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim3;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001824:	b580      	push	{r7, lr}
 8001826:	b086      	sub	sp, #24
 8001828:	af00      	add	r7, sp, #0

    /* USER CODE BEGIN TIM2_Init 0 */

    /* USER CODE END TIM2_Init 0 */

    TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800182a:	f107 0308 	add.w	r3, r7, #8
 800182e:	2200      	movs	r2, #0
 8001830:	601a      	str	r2, [r3, #0]
 8001832:	605a      	str	r2, [r3, #4]
 8001834:	609a      	str	r2, [r3, #8]
 8001836:	60da      	str	r2, [r3, #12]
    TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001838:	463b      	mov	r3, r7
 800183a:	2200      	movs	r2, #0
 800183c:	601a      	str	r2, [r3, #0]
 800183e:	605a      	str	r2, [r3, #4]

    /* USER CODE BEGIN TIM2_Init 1 */

    /* USER CODE END TIM2_Init 1 */
    htim2.Instance = TIM2;
 8001840:	4b1d      	ldr	r3, [pc, #116]	@ (80018b8 <MX_TIM2_Init+0x94>)
 8001842:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001846:	601a      	str	r2, [r3, #0]
    htim2.Init.Prescaler = 0;
 8001848:	4b1b      	ldr	r3, [pc, #108]	@ (80018b8 <MX_TIM2_Init+0x94>)
 800184a:	2200      	movs	r2, #0
 800184c:	605a      	str	r2, [r3, #4]
    htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800184e:	4b1a      	ldr	r3, [pc, #104]	@ (80018b8 <MX_TIM2_Init+0x94>)
 8001850:	2200      	movs	r2, #0
 8001852:	609a      	str	r2, [r3, #8]
    htim2.Init.Period = 840-1;
 8001854:	4b18      	ldr	r3, [pc, #96]	@ (80018b8 <MX_TIM2_Init+0x94>)
 8001856:	f240 3247 	movw	r2, #839	@ 0x347
 800185a:	60da      	str	r2, [r3, #12]
    htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800185c:	4b16      	ldr	r3, [pc, #88]	@ (80018b8 <MX_TIM2_Init+0x94>)
 800185e:	2200      	movs	r2, #0
 8001860:	611a      	str	r2, [r3, #16]
    htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001862:	4b15      	ldr	r3, [pc, #84]	@ (80018b8 <MX_TIM2_Init+0x94>)
 8001864:	2280      	movs	r2, #128	@ 0x80
 8001866:	619a      	str	r2, [r3, #24]
    if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001868:	4813      	ldr	r0, [pc, #76]	@ (80018b8 <MX_TIM2_Init+0x94>)
 800186a:	f002 f9b7 	bl	8003bdc <HAL_TIM_Base_Init>
 800186e:	4603      	mov	r3, r0
 8001870:	2b00      	cmp	r3, #0
 8001872:	d001      	beq.n	8001878 <MX_TIM2_Init+0x54>
    {
        Error_Handler();
 8001874:	f7ff fefe 	bl	8001674 <Error_Handler>
    }
    sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001878:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800187c:	60bb      	str	r3, [r7, #8]
    if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800187e:	f107 0308 	add.w	r3, r7, #8
 8001882:	4619      	mov	r1, r3
 8001884:	480c      	ldr	r0, [pc, #48]	@ (80018b8 <MX_TIM2_Init+0x94>)
 8001886:	f002 fa61 	bl	8003d4c <HAL_TIM_ConfigClockSource>
 800188a:	4603      	mov	r3, r0
 800188c:	2b00      	cmp	r3, #0
 800188e:	d001      	beq.n	8001894 <MX_TIM2_Init+0x70>
    {
        Error_Handler();
 8001890:	f7ff fef0 	bl	8001674 <Error_Handler>
    }
    sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001894:	2320      	movs	r3, #32
 8001896:	603b      	str	r3, [r7, #0]
    sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001898:	2300      	movs	r3, #0
 800189a:	607b      	str	r3, [r7, #4]
    if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800189c:	463b      	mov	r3, r7
 800189e:	4619      	mov	r1, r3
 80018a0:	4805      	ldr	r0, [pc, #20]	@ (80018b8 <MX_TIM2_Init+0x94>)
 80018a2:	f002 fc55 	bl	8004150 <HAL_TIMEx_MasterConfigSynchronization>
 80018a6:	4603      	mov	r3, r0
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d001      	beq.n	80018b0 <MX_TIM2_Init+0x8c>
    {
        Error_Handler();
 80018ac:	f7ff fee2 	bl	8001674 <Error_Handler>
    }
    /* USER CODE BEGIN TIM2_Init 2 */

    /* USER CODE END TIM2_Init 2 */

}
 80018b0:	bf00      	nop
 80018b2:	3718      	adds	r7, #24
 80018b4:	46bd      	mov	sp, r7
 80018b6:	bd80      	pop	{r7, pc}
 80018b8:	20000d6c 	.word	0x20000d6c

080018bc <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80018bc:	b580      	push	{r7, lr}
 80018be:	b086      	sub	sp, #24
 80018c0:	af00      	add	r7, sp, #0

    /* USER CODE BEGIN TIM3_Init 0 */

    /* USER CODE END TIM3_Init 0 */

    TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80018c2:	f107 0308 	add.w	r3, r7, #8
 80018c6:	2200      	movs	r2, #0
 80018c8:	601a      	str	r2, [r3, #0]
 80018ca:	605a      	str	r2, [r3, #4]
 80018cc:	609a      	str	r2, [r3, #8]
 80018ce:	60da      	str	r2, [r3, #12]
    TIM_MasterConfigTypeDef sMasterConfig = {0};
 80018d0:	463b      	mov	r3, r7
 80018d2:	2200      	movs	r2, #0
 80018d4:	601a      	str	r2, [r3, #0]
 80018d6:	605a      	str	r2, [r3, #4]

    /* USER CODE BEGIN TIM3_Init 1 */

    /* USER CODE END TIM3_Init 1 */
    htim3.Instance = TIM3;
 80018d8:	4b1d      	ldr	r3, [pc, #116]	@ (8001950 <MX_TIM3_Init+0x94>)
 80018da:	4a1e      	ldr	r2, [pc, #120]	@ (8001954 <MX_TIM3_Init+0x98>)
 80018dc:	601a      	str	r2, [r3, #0]
    htim3.Init.Prescaler = 0;
 80018de:	4b1c      	ldr	r3, [pc, #112]	@ (8001950 <MX_TIM3_Init+0x94>)
 80018e0:	2200      	movs	r2, #0
 80018e2:	605a      	str	r2, [r3, #4]
    htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80018e4:	4b1a      	ldr	r3, [pc, #104]	@ (8001950 <MX_TIM3_Init+0x94>)
 80018e6:	2200      	movs	r2, #0
 80018e8:	609a      	str	r2, [r3, #8]
    htim3.Init.Period = 2100-1;
 80018ea:	4b19      	ldr	r3, [pc, #100]	@ (8001950 <MX_TIM3_Init+0x94>)
 80018ec:	f640 0233 	movw	r2, #2099	@ 0x833
 80018f0:	60da      	str	r2, [r3, #12]
    htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80018f2:	4b17      	ldr	r3, [pc, #92]	@ (8001950 <MX_TIM3_Init+0x94>)
 80018f4:	2200      	movs	r2, #0
 80018f6:	611a      	str	r2, [r3, #16]
    htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80018f8:	4b15      	ldr	r3, [pc, #84]	@ (8001950 <MX_TIM3_Init+0x94>)
 80018fa:	2280      	movs	r2, #128	@ 0x80
 80018fc:	619a      	str	r2, [r3, #24]
    if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80018fe:	4814      	ldr	r0, [pc, #80]	@ (8001950 <MX_TIM3_Init+0x94>)
 8001900:	f002 f96c 	bl	8003bdc <HAL_TIM_Base_Init>
 8001904:	4603      	mov	r3, r0
 8001906:	2b00      	cmp	r3, #0
 8001908:	d001      	beq.n	800190e <MX_TIM3_Init+0x52>
    {
        Error_Handler();
 800190a:	f7ff feb3 	bl	8001674 <Error_Handler>
    }
    sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800190e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001912:	60bb      	str	r3, [r7, #8]
    if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001914:	f107 0308 	add.w	r3, r7, #8
 8001918:	4619      	mov	r1, r3
 800191a:	480d      	ldr	r0, [pc, #52]	@ (8001950 <MX_TIM3_Init+0x94>)
 800191c:	f002 fa16 	bl	8003d4c <HAL_TIM_ConfigClockSource>
 8001920:	4603      	mov	r3, r0
 8001922:	2b00      	cmp	r3, #0
 8001924:	d001      	beq.n	800192a <MX_TIM3_Init+0x6e>
    {
        Error_Handler();
 8001926:	f7ff fea5 	bl	8001674 <Error_Handler>
    }
    sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800192a:	2320      	movs	r3, #32
 800192c:	603b      	str	r3, [r7, #0]
    sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800192e:	2300      	movs	r3, #0
 8001930:	607b      	str	r3, [r7, #4]
    if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001932:	463b      	mov	r3, r7
 8001934:	4619      	mov	r1, r3
 8001936:	4806      	ldr	r0, [pc, #24]	@ (8001950 <MX_TIM3_Init+0x94>)
 8001938:	f002 fc0a 	bl	8004150 <HAL_TIMEx_MasterConfigSynchronization>
 800193c:	4603      	mov	r3, r0
 800193e:	2b00      	cmp	r3, #0
 8001940:	d001      	beq.n	8001946 <MX_TIM3_Init+0x8a>
    {
        Error_Handler();
 8001942:	f7ff fe97 	bl	8001674 <Error_Handler>
    }
    /* USER CODE BEGIN TIM3_Init 2 */

    /* USER CODE END TIM3_Init 2 */

}
 8001946:	bf00      	nop
 8001948:	3718      	adds	r7, #24
 800194a:	46bd      	mov	sp, r7
 800194c:	bd80      	pop	{r7, pc}
 800194e:	bf00      	nop
 8001950:	20000db4 	.word	0x20000db4
 8001954:	40000400 	.word	0x40000400

08001958 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001958:	b480      	push	{r7}
 800195a:	b085      	sub	sp, #20
 800195c:	af00      	add	r7, sp, #0
 800195e:	6078      	str	r0, [r7, #4]

    if(tim_baseHandle->Instance==TIM2)
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001968:	d10e      	bne.n	8001988 <HAL_TIM_Base_MspInit+0x30>
    {
    /* USER CODE BEGIN TIM2_MspInit 0 */

    /* USER CODE END TIM2_MspInit 0 */
        /* TIM2 clock enable */
        __HAL_RCC_TIM2_CLK_ENABLE();
 800196a:	2300      	movs	r3, #0
 800196c:	60fb      	str	r3, [r7, #12]
 800196e:	4b13      	ldr	r3, [pc, #76]	@ (80019bc <HAL_TIM_Base_MspInit+0x64>)
 8001970:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001972:	4a12      	ldr	r2, [pc, #72]	@ (80019bc <HAL_TIM_Base_MspInit+0x64>)
 8001974:	f043 0301 	orr.w	r3, r3, #1
 8001978:	6413      	str	r3, [r2, #64]	@ 0x40
 800197a:	4b10      	ldr	r3, [pc, #64]	@ (80019bc <HAL_TIM_Base_MspInit+0x64>)
 800197c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800197e:	f003 0301 	and.w	r3, r3, #1
 8001982:	60fb      	str	r3, [r7, #12]
 8001984:	68fb      	ldr	r3, [r7, #12]
        __HAL_RCC_TIM3_CLK_ENABLE();
    /* USER CODE BEGIN TIM3_MspInit 1 */

    /* USER CODE END TIM3_MspInit 1 */
    }
}
 8001986:	e012      	b.n	80019ae <HAL_TIM_Base_MspInit+0x56>
    else if(tim_baseHandle->Instance==TIM3)
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	4a0c      	ldr	r2, [pc, #48]	@ (80019c0 <HAL_TIM_Base_MspInit+0x68>)
 800198e:	4293      	cmp	r3, r2
 8001990:	d10d      	bne.n	80019ae <HAL_TIM_Base_MspInit+0x56>
        __HAL_RCC_TIM3_CLK_ENABLE();
 8001992:	2300      	movs	r3, #0
 8001994:	60bb      	str	r3, [r7, #8]
 8001996:	4b09      	ldr	r3, [pc, #36]	@ (80019bc <HAL_TIM_Base_MspInit+0x64>)
 8001998:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800199a:	4a08      	ldr	r2, [pc, #32]	@ (80019bc <HAL_TIM_Base_MspInit+0x64>)
 800199c:	f043 0302 	orr.w	r3, r3, #2
 80019a0:	6413      	str	r3, [r2, #64]	@ 0x40
 80019a2:	4b06      	ldr	r3, [pc, #24]	@ (80019bc <HAL_TIM_Base_MspInit+0x64>)
 80019a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019a6:	f003 0302 	and.w	r3, r3, #2
 80019aa:	60bb      	str	r3, [r7, #8]
 80019ac:	68bb      	ldr	r3, [r7, #8]
}
 80019ae:	bf00      	nop
 80019b0:	3714      	adds	r7, #20
 80019b2:	46bd      	mov	sp, r7
 80019b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b8:	4770      	bx	lr
 80019ba:	bf00      	nop
 80019bc:	40023800 	.word	0x40023800
 80019c0:	40000400 	.word	0x40000400

080019c4 <uart_send_char>:
		end--;
	}
	return;
}

void uart_send_char(char ch) {
 80019c4:	b580      	push	{r7, lr}
 80019c6:	b084      	sub	sp, #16
 80019c8:	af00      	add	r7, sp, #0
 80019ca:	4603      	mov	r3, r0
 80019cc:	71fb      	strb	r3, [r7, #7]
	uint8_t ch2 = (uint8_t) ch;
 80019ce:	79fb      	ldrb	r3, [r7, #7]
 80019d0:	73fb      	strb	r3, [r7, #15]
//    while (__HAL_UART_GET_FLAG(&TJC_UART, UART_FLAG_TXE) == RESET)
	;
	while (__HAL_UART_GET_FLAG(&TJC_UART, UART_FLAG_TC) == RESET)
 80019d2:	bf00      	nop
 80019d4:	4b08      	ldr	r3, [pc, #32]	@ (80019f8 <uart_send_char+0x34>)
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80019de:	2b40      	cmp	r3, #64	@ 0x40
 80019e0:	d1f8      	bne.n	80019d4 <uart_send_char+0x10>
		;
	HAL_UART_Transmit_IT(&TJC_UART, &ch2, 1);
 80019e2:	f107 030f 	add.w	r3, r7, #15
 80019e6:	2201      	movs	r2, #1
 80019e8:	4619      	mov	r1, r3
 80019ea:	4803      	ldr	r0, [pc, #12]	@ (80019f8 <uart_send_char+0x34>)
 80019ec:	f002 fc79 	bl	80042e2 <HAL_UART_Transmit_IT>
	return;
 80019f0:	bf00      	nop
}
 80019f2:	3710      	adds	r7, #16
 80019f4:	46bd      	mov	sp, r7
 80019f6:	bd80      	pop	{r7, pc}
 80019f8:	20000e00 	.word	0x20000e00

080019fc <tjc_send_string>:
		uart_send_char(*str++);
	}
	return;
}

void tjc_send_string(char *str) {
 80019fc:	b580      	push	{r7, lr}
 80019fe:	b082      	sub	sp, #8
 8001a00:	af00      	add	r7, sp, #0
 8001a02:	6078      	str	r0, [r7, #4]
	while (*str != 0 && str != 0) {
 8001a04:	e006      	b.n	8001a14 <tjc_send_string+0x18>
		uart_send_char(*str++);
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	1c5a      	adds	r2, r3, #1
 8001a0a:	607a      	str	r2, [r7, #4]
 8001a0c:	781b      	ldrb	r3, [r3, #0]
 8001a0e:	4618      	mov	r0, r3
 8001a10:	f7ff ffd8 	bl	80019c4 <uart_send_char>
	while (*str != 0 && str != 0) {
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	781b      	ldrb	r3, [r3, #0]
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d002      	beq.n	8001a22 <tjc_send_string+0x26>
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d1f1      	bne.n	8001a06 <tjc_send_string+0xa>
	}
	uart_send_char(0xff);
 8001a22:	20ff      	movs	r0, #255	@ 0xff
 8001a24:	f7ff ffce 	bl	80019c4 <uart_send_char>
	uart_send_char(0xff);
 8001a28:	20ff      	movs	r0, #255	@ 0xff
 8001a2a:	f7ff ffcb 	bl	80019c4 <uart_send_char>
	uart_send_char(0xff);
 8001a2e:	20ff      	movs	r0, #255	@ 0xff
 8001a30:	f7ff ffc8 	bl	80019c4 <uart_send_char>
	return;
 8001a34:	bf00      	nop
}
 8001a36:	3708      	adds	r7, #8
 8001a38:	46bd      	mov	sp, r7
 8001a3a:	bd80      	pop	{r7, pc}

08001a3c <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_tx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001a3c:	b580      	push	{r7, lr}
 8001a3e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001a40:	4b11      	ldr	r3, [pc, #68]	@ (8001a88 <MX_USART1_UART_Init+0x4c>)
 8001a42:	4a12      	ldr	r2, [pc, #72]	@ (8001a8c <MX_USART1_UART_Init+0x50>)
 8001a44:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001a46:	4b10      	ldr	r3, [pc, #64]	@ (8001a88 <MX_USART1_UART_Init+0x4c>)
 8001a48:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001a4c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001a4e:	4b0e      	ldr	r3, [pc, #56]	@ (8001a88 <MX_USART1_UART_Init+0x4c>)
 8001a50:	2200      	movs	r2, #0
 8001a52:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001a54:	4b0c      	ldr	r3, [pc, #48]	@ (8001a88 <MX_USART1_UART_Init+0x4c>)
 8001a56:	2200      	movs	r2, #0
 8001a58:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001a5a:	4b0b      	ldr	r3, [pc, #44]	@ (8001a88 <MX_USART1_UART_Init+0x4c>)
 8001a5c:	2200      	movs	r2, #0
 8001a5e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001a60:	4b09      	ldr	r3, [pc, #36]	@ (8001a88 <MX_USART1_UART_Init+0x4c>)
 8001a62:	220c      	movs	r2, #12
 8001a64:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001a66:	4b08      	ldr	r3, [pc, #32]	@ (8001a88 <MX_USART1_UART_Init+0x4c>)
 8001a68:	2200      	movs	r2, #0
 8001a6a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001a6c:	4b06      	ldr	r3, [pc, #24]	@ (8001a88 <MX_USART1_UART_Init+0x4c>)
 8001a6e:	2200      	movs	r2, #0
 8001a70:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001a72:	4805      	ldr	r0, [pc, #20]	@ (8001a88 <MX_USART1_UART_Init+0x4c>)
 8001a74:	f002 fbe8 	bl	8004248 <HAL_UART_Init>
 8001a78:	4603      	mov	r3, r0
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d001      	beq.n	8001a82 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001a7e:	f7ff fdf9 	bl	8001674 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001a82:	bf00      	nop
 8001a84:	bd80      	pop	{r7, pc}
 8001a86:	bf00      	nop
 8001a88:	20000e00 	.word	0x20000e00
 8001a8c:	40011000 	.word	0x40011000

08001a90 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001a90:	b580      	push	{r7, lr}
 8001a92:	b08a      	sub	sp, #40	@ 0x28
 8001a94:	af00      	add	r7, sp, #0
 8001a96:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a98:	f107 0314 	add.w	r3, r7, #20
 8001a9c:	2200      	movs	r2, #0
 8001a9e:	601a      	str	r2, [r3, #0]
 8001aa0:	605a      	str	r2, [r3, #4]
 8001aa2:	609a      	str	r2, [r3, #8]
 8001aa4:	60da      	str	r2, [r3, #12]
 8001aa6:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	4a4d      	ldr	r2, [pc, #308]	@ (8001be4 <HAL_UART_MspInit+0x154>)
 8001aae:	4293      	cmp	r3, r2
 8001ab0:	f040 8093 	bne.w	8001bda <HAL_UART_MspInit+0x14a>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001ab4:	2300      	movs	r3, #0
 8001ab6:	613b      	str	r3, [r7, #16]
 8001ab8:	4b4b      	ldr	r3, [pc, #300]	@ (8001be8 <HAL_UART_MspInit+0x158>)
 8001aba:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001abc:	4a4a      	ldr	r2, [pc, #296]	@ (8001be8 <HAL_UART_MspInit+0x158>)
 8001abe:	f043 0310 	orr.w	r3, r3, #16
 8001ac2:	6453      	str	r3, [r2, #68]	@ 0x44
 8001ac4:	4b48      	ldr	r3, [pc, #288]	@ (8001be8 <HAL_UART_MspInit+0x158>)
 8001ac6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ac8:	f003 0310 	and.w	r3, r3, #16
 8001acc:	613b      	str	r3, [r7, #16]
 8001ace:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ad0:	2300      	movs	r3, #0
 8001ad2:	60fb      	str	r3, [r7, #12]
 8001ad4:	4b44      	ldr	r3, [pc, #272]	@ (8001be8 <HAL_UART_MspInit+0x158>)
 8001ad6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ad8:	4a43      	ldr	r2, [pc, #268]	@ (8001be8 <HAL_UART_MspInit+0x158>)
 8001ada:	f043 0301 	orr.w	r3, r3, #1
 8001ade:	6313      	str	r3, [r2, #48]	@ 0x30
 8001ae0:	4b41      	ldr	r3, [pc, #260]	@ (8001be8 <HAL_UART_MspInit+0x158>)
 8001ae2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ae4:	f003 0301 	and.w	r3, r3, #1
 8001ae8:	60fb      	str	r3, [r7, #12]
 8001aea:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001aec:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8001af0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001af2:	2302      	movs	r3, #2
 8001af4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001af6:	2300      	movs	r3, #0
 8001af8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001afa:	2303      	movs	r3, #3
 8001afc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001afe:	2307      	movs	r3, #7
 8001b00:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b02:	f107 0314 	add.w	r3, r7, #20
 8001b06:	4619      	mov	r1, r3
 8001b08:	4838      	ldr	r0, [pc, #224]	@ (8001bec <HAL_UART_MspInit+0x15c>)
 8001b0a:	f001 fa73 	bl	8002ff4 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream2;
 8001b0e:	4b38      	ldr	r3, [pc, #224]	@ (8001bf0 <HAL_UART_MspInit+0x160>)
 8001b10:	4a38      	ldr	r2, [pc, #224]	@ (8001bf4 <HAL_UART_MspInit+0x164>)
 8001b12:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 8001b14:	4b36      	ldr	r3, [pc, #216]	@ (8001bf0 <HAL_UART_MspInit+0x160>)
 8001b16:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8001b1a:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001b1c:	4b34      	ldr	r3, [pc, #208]	@ (8001bf0 <HAL_UART_MspInit+0x160>)
 8001b1e:	2200      	movs	r2, #0
 8001b20:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001b22:	4b33      	ldr	r3, [pc, #204]	@ (8001bf0 <HAL_UART_MspInit+0x160>)
 8001b24:	2200      	movs	r2, #0
 8001b26:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001b28:	4b31      	ldr	r3, [pc, #196]	@ (8001bf0 <HAL_UART_MspInit+0x160>)
 8001b2a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001b2e:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001b30:	4b2f      	ldr	r3, [pc, #188]	@ (8001bf0 <HAL_UART_MspInit+0x160>)
 8001b32:	2200      	movs	r2, #0
 8001b34:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001b36:	4b2e      	ldr	r3, [pc, #184]	@ (8001bf0 <HAL_UART_MspInit+0x160>)
 8001b38:	2200      	movs	r2, #0
 8001b3a:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8001b3c:	4b2c      	ldr	r3, [pc, #176]	@ (8001bf0 <HAL_UART_MspInit+0x160>)
 8001b3e:	2200      	movs	r2, #0
 8001b40:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8001b42:	4b2b      	ldr	r3, [pc, #172]	@ (8001bf0 <HAL_UART_MspInit+0x160>)
 8001b44:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001b48:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001b4a:	4b29      	ldr	r3, [pc, #164]	@ (8001bf0 <HAL_UART_MspInit+0x160>)
 8001b4c:	2200      	movs	r2, #0
 8001b4e:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8001b50:	4827      	ldr	r0, [pc, #156]	@ (8001bf0 <HAL_UART_MspInit+0x160>)
 8001b52:	f000 fe4d 	bl	80027f0 <HAL_DMA_Init>
 8001b56:	4603      	mov	r3, r0
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d001      	beq.n	8001b60 <HAL_UART_MspInit+0xd0>
    {
      Error_Handler();
 8001b5c:	f7ff fd8a 	bl	8001674 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	4a23      	ldr	r2, [pc, #140]	@ (8001bf0 <HAL_UART_MspInit+0x160>)
 8001b64:	639a      	str	r2, [r3, #56]	@ 0x38
 8001b66:	4a22      	ldr	r2, [pc, #136]	@ (8001bf0 <HAL_UART_MspInit+0x160>)
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA2_Stream7;
 8001b6c:	4b22      	ldr	r3, [pc, #136]	@ (8001bf8 <HAL_UART_MspInit+0x168>)
 8001b6e:	4a23      	ldr	r2, [pc, #140]	@ (8001bfc <HAL_UART_MspInit+0x16c>)
 8001b70:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Channel = DMA_CHANNEL_4;
 8001b72:	4b21      	ldr	r3, [pc, #132]	@ (8001bf8 <HAL_UART_MspInit+0x168>)
 8001b74:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8001b78:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001b7a:	4b1f      	ldr	r3, [pc, #124]	@ (8001bf8 <HAL_UART_MspInit+0x168>)
 8001b7c:	2240      	movs	r2, #64	@ 0x40
 8001b7e:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001b80:	4b1d      	ldr	r3, [pc, #116]	@ (8001bf8 <HAL_UART_MspInit+0x168>)
 8001b82:	2200      	movs	r2, #0
 8001b84:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001b86:	4b1c      	ldr	r3, [pc, #112]	@ (8001bf8 <HAL_UART_MspInit+0x168>)
 8001b88:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001b8c:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001b8e:	4b1a      	ldr	r3, [pc, #104]	@ (8001bf8 <HAL_UART_MspInit+0x168>)
 8001b90:	2200      	movs	r2, #0
 8001b92:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001b94:	4b18      	ldr	r3, [pc, #96]	@ (8001bf8 <HAL_UART_MspInit+0x168>)
 8001b96:	2200      	movs	r2, #0
 8001b98:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8001b9a:	4b17      	ldr	r3, [pc, #92]	@ (8001bf8 <HAL_UART_MspInit+0x168>)
 8001b9c:	2200      	movs	r2, #0
 8001b9e:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_HIGH;
 8001ba0:	4b15      	ldr	r3, [pc, #84]	@ (8001bf8 <HAL_UART_MspInit+0x168>)
 8001ba2:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001ba6:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001ba8:	4b13      	ldr	r3, [pc, #76]	@ (8001bf8 <HAL_UART_MspInit+0x168>)
 8001baa:	2200      	movs	r2, #0
 8001bac:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8001bae:	4812      	ldr	r0, [pc, #72]	@ (8001bf8 <HAL_UART_MspInit+0x168>)
 8001bb0:	f000 fe1e 	bl	80027f0 <HAL_DMA_Init>
 8001bb4:	4603      	mov	r3, r0
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d001      	beq.n	8001bbe <HAL_UART_MspInit+0x12e>
    {
      Error_Handler();
 8001bba:	f7ff fd5b 	bl	8001674 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	4a0d      	ldr	r2, [pc, #52]	@ (8001bf8 <HAL_UART_MspInit+0x168>)
 8001bc2:	635a      	str	r2, [r3, #52]	@ 0x34
 8001bc4:	4a0c      	ldr	r2, [pc, #48]	@ (8001bf8 <HAL_UART_MspInit+0x168>)
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001bca:	2200      	movs	r2, #0
 8001bcc:	2100      	movs	r1, #0
 8001bce:	2025      	movs	r0, #37	@ 0x25
 8001bd0:	f000 fbef 	bl	80023b2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001bd4:	2025      	movs	r0, #37	@ 0x25
 8001bd6:	f000 fc08 	bl	80023ea <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8001bda:	bf00      	nop
 8001bdc:	3728      	adds	r7, #40	@ 0x28
 8001bde:	46bd      	mov	sp, r7
 8001be0:	bd80      	pop	{r7, pc}
 8001be2:	bf00      	nop
 8001be4:	40011000 	.word	0x40011000
 8001be8:	40023800 	.word	0x40023800
 8001bec:	40020000 	.word	0x40020000
 8001bf0:	20000e44 	.word	0x20000e44
 8001bf4:	40026440 	.word	0x40026440
 8001bf8:	20000ea4 	.word	0x20000ea4
 8001bfc:	400264b8 	.word	0x400264b8

08001c00 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001c00:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001c38 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001c04:	480d      	ldr	r0, [pc, #52]	@ (8001c3c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001c06:	490e      	ldr	r1, [pc, #56]	@ (8001c40 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001c08:	4a0e      	ldr	r2, [pc, #56]	@ (8001c44 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001c0a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001c0c:	e002      	b.n	8001c14 <LoopCopyDataInit>

08001c0e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001c0e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001c10:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001c12:	3304      	adds	r3, #4

08001c14 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001c14:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001c16:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001c18:	d3f9      	bcc.n	8001c0e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001c1a:	4a0b      	ldr	r2, [pc, #44]	@ (8001c48 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001c1c:	4c0b      	ldr	r4, [pc, #44]	@ (8001c4c <LoopFillZerobss+0x26>)
  movs r3, #0
 8001c1e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001c20:	e001      	b.n	8001c26 <LoopFillZerobss>

08001c22 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001c22:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001c24:	3204      	adds	r2, #4

08001c26 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001c26:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001c28:	d3fb      	bcc.n	8001c22 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001c2a:	f7ff fde9 	bl	8001800 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001c2e:	f003 fb01 	bl	8005234 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001c32:	f7ff fb29 	bl	8001288 <main>
  bx  lr    
 8001c36:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001c38:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001c3c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001c40:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8001c44:	08006e80 	.word	0x08006e80
  ldr r2, =_sbss
 8001c48:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8001c4c:	20001050 	.word	0x20001050

08001c50 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001c50:	e7fe      	b.n	8001c50 <ADC_IRQHandler>
	...

08001c54 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001c54:	b580      	push	{r7, lr}
 8001c56:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001c58:	4b0e      	ldr	r3, [pc, #56]	@ (8001c94 <HAL_Init+0x40>)
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	4a0d      	ldr	r2, [pc, #52]	@ (8001c94 <HAL_Init+0x40>)
 8001c5e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001c62:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001c64:	4b0b      	ldr	r3, [pc, #44]	@ (8001c94 <HAL_Init+0x40>)
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	4a0a      	ldr	r2, [pc, #40]	@ (8001c94 <HAL_Init+0x40>)
 8001c6a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001c6e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001c70:	4b08      	ldr	r3, [pc, #32]	@ (8001c94 <HAL_Init+0x40>)
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	4a07      	ldr	r2, [pc, #28]	@ (8001c94 <HAL_Init+0x40>)
 8001c76:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001c7a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001c7c:	2003      	movs	r0, #3
 8001c7e:	f000 fb8d 	bl	800239c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001c82:	200f      	movs	r0, #15
 8001c84:	f000 f808 	bl	8001c98 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001c88:	f7ff fcfa 	bl	8001680 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001c8c:	2300      	movs	r3, #0
}
 8001c8e:	4618      	mov	r0, r3
 8001c90:	bd80      	pop	{r7, pc}
 8001c92:	bf00      	nop
 8001c94:	40023c00 	.word	0x40023c00

08001c98 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001c98:	b580      	push	{r7, lr}
 8001c9a:	b082      	sub	sp, #8
 8001c9c:	af00      	add	r7, sp, #0
 8001c9e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001ca0:	4b12      	ldr	r3, [pc, #72]	@ (8001cec <HAL_InitTick+0x54>)
 8001ca2:	681a      	ldr	r2, [r3, #0]
 8001ca4:	4b12      	ldr	r3, [pc, #72]	@ (8001cf0 <HAL_InitTick+0x58>)
 8001ca6:	781b      	ldrb	r3, [r3, #0]
 8001ca8:	4619      	mov	r1, r3
 8001caa:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001cae:	fbb3 f3f1 	udiv	r3, r3, r1
 8001cb2:	fbb2 f3f3 	udiv	r3, r2, r3
 8001cb6:	4618      	mov	r0, r3
 8001cb8:	f000 fba5 	bl	8002406 <HAL_SYSTICK_Config>
 8001cbc:	4603      	mov	r3, r0
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d001      	beq.n	8001cc6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001cc2:	2301      	movs	r3, #1
 8001cc4:	e00e      	b.n	8001ce4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	2b0f      	cmp	r3, #15
 8001cca:	d80a      	bhi.n	8001ce2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001ccc:	2200      	movs	r2, #0
 8001cce:	6879      	ldr	r1, [r7, #4]
 8001cd0:	f04f 30ff 	mov.w	r0, #4294967295
 8001cd4:	f000 fb6d 	bl	80023b2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001cd8:	4a06      	ldr	r2, [pc, #24]	@ (8001cf4 <HAL_InitTick+0x5c>)
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001cde:	2300      	movs	r3, #0
 8001ce0:	e000      	b.n	8001ce4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001ce2:	2301      	movs	r3, #1
}
 8001ce4:	4618      	mov	r0, r3
 8001ce6:	3708      	adds	r7, #8
 8001ce8:	46bd      	mov	sp, r7
 8001cea:	bd80      	pop	{r7, pc}
 8001cec:	20000018 	.word	0x20000018
 8001cf0:	20000020 	.word	0x20000020
 8001cf4:	2000001c 	.word	0x2000001c

08001cf8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001cf8:	b480      	push	{r7}
 8001cfa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001cfc:	4b06      	ldr	r3, [pc, #24]	@ (8001d18 <HAL_IncTick+0x20>)
 8001cfe:	781b      	ldrb	r3, [r3, #0]
 8001d00:	461a      	mov	r2, r3
 8001d02:	4b06      	ldr	r3, [pc, #24]	@ (8001d1c <HAL_IncTick+0x24>)
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	4413      	add	r3, r2
 8001d08:	4a04      	ldr	r2, [pc, #16]	@ (8001d1c <HAL_IncTick+0x24>)
 8001d0a:	6013      	str	r3, [r2, #0]
}
 8001d0c:	bf00      	nop
 8001d0e:	46bd      	mov	sp, r7
 8001d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d14:	4770      	bx	lr
 8001d16:	bf00      	nop
 8001d18:	20000020 	.word	0x20000020
 8001d1c:	20000f04 	.word	0x20000f04

08001d20 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001d20:	b480      	push	{r7}
 8001d22:	af00      	add	r7, sp, #0
  return uwTick;
 8001d24:	4b03      	ldr	r3, [pc, #12]	@ (8001d34 <HAL_GetTick+0x14>)
 8001d26:	681b      	ldr	r3, [r3, #0]
}
 8001d28:	4618      	mov	r0, r3
 8001d2a:	46bd      	mov	sp, r7
 8001d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d30:	4770      	bx	lr
 8001d32:	bf00      	nop
 8001d34:	20000f04 	.word	0x20000f04

08001d38 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001d38:	b580      	push	{r7, lr}
 8001d3a:	b084      	sub	sp, #16
 8001d3c:	af00      	add	r7, sp, #0
 8001d3e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001d40:	2300      	movs	r3, #0
 8001d42:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d101      	bne.n	8001d4e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001d4a:	2301      	movs	r3, #1
 8001d4c:	e033      	b.n	8001db6 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d109      	bne.n	8001d6a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001d56:	6878      	ldr	r0, [r7, #4]
 8001d58:	f7ff f910 	bl	8000f7c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	2200      	movs	r2, #0
 8001d60:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	2200      	movs	r2, #0
 8001d66:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d6e:	f003 0310 	and.w	r3, r3, #16
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d118      	bne.n	8001da8 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d7a:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8001d7e:	f023 0302 	bic.w	r3, r3, #2
 8001d82:	f043 0202 	orr.w	r2, r3, #2
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001d8a:	6878      	ldr	r0, [r7, #4]
 8001d8c:	f000 f93a 	bl	8002004 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	2200      	movs	r2, #0
 8001d94:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d9a:	f023 0303 	bic.w	r3, r3, #3
 8001d9e:	f043 0201 	orr.w	r2, r3, #1
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	641a      	str	r2, [r3, #64]	@ 0x40
 8001da6:	e001      	b.n	8001dac <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001da8:	2301      	movs	r3, #1
 8001daa:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	2200      	movs	r2, #0
 8001db0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001db4:	7bfb      	ldrb	r3, [r7, #15]
}
 8001db6:	4618      	mov	r0, r3
 8001db8:	3710      	adds	r7, #16
 8001dba:	46bd      	mov	sp, r7
 8001dbc:	bd80      	pop	{r7, pc}
	...

08001dc0 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001dc0:	b480      	push	{r7}
 8001dc2:	b085      	sub	sp, #20
 8001dc4:	af00      	add	r7, sp, #0
 8001dc6:	6078      	str	r0, [r7, #4]
 8001dc8:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001dca:	2300      	movs	r3, #0
 8001dcc:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001dd4:	2b01      	cmp	r3, #1
 8001dd6:	d101      	bne.n	8001ddc <HAL_ADC_ConfigChannel+0x1c>
 8001dd8:	2302      	movs	r3, #2
 8001dda:	e105      	b.n	8001fe8 <HAL_ADC_ConfigChannel+0x228>
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	2201      	movs	r2, #1
 8001de0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001de4:	683b      	ldr	r3, [r7, #0]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	2b09      	cmp	r3, #9
 8001dea:	d925      	bls.n	8001e38 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	68d9      	ldr	r1, [r3, #12]
 8001df2:	683b      	ldr	r3, [r7, #0]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	b29b      	uxth	r3, r3
 8001df8:	461a      	mov	r2, r3
 8001dfa:	4613      	mov	r3, r2
 8001dfc:	005b      	lsls	r3, r3, #1
 8001dfe:	4413      	add	r3, r2
 8001e00:	3b1e      	subs	r3, #30
 8001e02:	2207      	movs	r2, #7
 8001e04:	fa02 f303 	lsl.w	r3, r2, r3
 8001e08:	43da      	mvns	r2, r3
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	400a      	ands	r2, r1
 8001e10:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	68d9      	ldr	r1, [r3, #12]
 8001e18:	683b      	ldr	r3, [r7, #0]
 8001e1a:	689a      	ldr	r2, [r3, #8]
 8001e1c:	683b      	ldr	r3, [r7, #0]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	b29b      	uxth	r3, r3
 8001e22:	4618      	mov	r0, r3
 8001e24:	4603      	mov	r3, r0
 8001e26:	005b      	lsls	r3, r3, #1
 8001e28:	4403      	add	r3, r0
 8001e2a:	3b1e      	subs	r3, #30
 8001e2c:	409a      	lsls	r2, r3
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	430a      	orrs	r2, r1
 8001e34:	60da      	str	r2, [r3, #12]
 8001e36:	e022      	b.n	8001e7e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	6919      	ldr	r1, [r3, #16]
 8001e3e:	683b      	ldr	r3, [r7, #0]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	b29b      	uxth	r3, r3
 8001e44:	461a      	mov	r2, r3
 8001e46:	4613      	mov	r3, r2
 8001e48:	005b      	lsls	r3, r3, #1
 8001e4a:	4413      	add	r3, r2
 8001e4c:	2207      	movs	r2, #7
 8001e4e:	fa02 f303 	lsl.w	r3, r2, r3
 8001e52:	43da      	mvns	r2, r3
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	400a      	ands	r2, r1
 8001e5a:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	6919      	ldr	r1, [r3, #16]
 8001e62:	683b      	ldr	r3, [r7, #0]
 8001e64:	689a      	ldr	r2, [r3, #8]
 8001e66:	683b      	ldr	r3, [r7, #0]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	b29b      	uxth	r3, r3
 8001e6c:	4618      	mov	r0, r3
 8001e6e:	4603      	mov	r3, r0
 8001e70:	005b      	lsls	r3, r3, #1
 8001e72:	4403      	add	r3, r0
 8001e74:	409a      	lsls	r2, r3
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	430a      	orrs	r2, r1
 8001e7c:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001e7e:	683b      	ldr	r3, [r7, #0]
 8001e80:	685b      	ldr	r3, [r3, #4]
 8001e82:	2b06      	cmp	r3, #6
 8001e84:	d824      	bhi.n	8001ed0 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001e8c:	683b      	ldr	r3, [r7, #0]
 8001e8e:	685a      	ldr	r2, [r3, #4]
 8001e90:	4613      	mov	r3, r2
 8001e92:	009b      	lsls	r3, r3, #2
 8001e94:	4413      	add	r3, r2
 8001e96:	3b05      	subs	r3, #5
 8001e98:	221f      	movs	r2, #31
 8001e9a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e9e:	43da      	mvns	r2, r3
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	400a      	ands	r2, r1
 8001ea6:	635a      	str	r2, [r3, #52]	@ 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001eae:	683b      	ldr	r3, [r7, #0]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	b29b      	uxth	r3, r3
 8001eb4:	4618      	mov	r0, r3
 8001eb6:	683b      	ldr	r3, [r7, #0]
 8001eb8:	685a      	ldr	r2, [r3, #4]
 8001eba:	4613      	mov	r3, r2
 8001ebc:	009b      	lsls	r3, r3, #2
 8001ebe:	4413      	add	r3, r2
 8001ec0:	3b05      	subs	r3, #5
 8001ec2:	fa00 f203 	lsl.w	r2, r0, r3
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	430a      	orrs	r2, r1
 8001ecc:	635a      	str	r2, [r3, #52]	@ 0x34
 8001ece:	e04c      	b.n	8001f6a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001ed0:	683b      	ldr	r3, [r7, #0]
 8001ed2:	685b      	ldr	r3, [r3, #4]
 8001ed4:	2b0c      	cmp	r3, #12
 8001ed6:	d824      	bhi.n	8001f22 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001ede:	683b      	ldr	r3, [r7, #0]
 8001ee0:	685a      	ldr	r2, [r3, #4]
 8001ee2:	4613      	mov	r3, r2
 8001ee4:	009b      	lsls	r3, r3, #2
 8001ee6:	4413      	add	r3, r2
 8001ee8:	3b23      	subs	r3, #35	@ 0x23
 8001eea:	221f      	movs	r2, #31
 8001eec:	fa02 f303 	lsl.w	r3, r2, r3
 8001ef0:	43da      	mvns	r2, r3
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	400a      	ands	r2, r1
 8001ef8:	631a      	str	r2, [r3, #48]	@ 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001f00:	683b      	ldr	r3, [r7, #0]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	b29b      	uxth	r3, r3
 8001f06:	4618      	mov	r0, r3
 8001f08:	683b      	ldr	r3, [r7, #0]
 8001f0a:	685a      	ldr	r2, [r3, #4]
 8001f0c:	4613      	mov	r3, r2
 8001f0e:	009b      	lsls	r3, r3, #2
 8001f10:	4413      	add	r3, r2
 8001f12:	3b23      	subs	r3, #35	@ 0x23
 8001f14:	fa00 f203 	lsl.w	r2, r0, r3
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	430a      	orrs	r2, r1
 8001f1e:	631a      	str	r2, [r3, #48]	@ 0x30
 8001f20:	e023      	b.n	8001f6a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001f28:	683b      	ldr	r3, [r7, #0]
 8001f2a:	685a      	ldr	r2, [r3, #4]
 8001f2c:	4613      	mov	r3, r2
 8001f2e:	009b      	lsls	r3, r3, #2
 8001f30:	4413      	add	r3, r2
 8001f32:	3b41      	subs	r3, #65	@ 0x41
 8001f34:	221f      	movs	r2, #31
 8001f36:	fa02 f303 	lsl.w	r3, r2, r3
 8001f3a:	43da      	mvns	r2, r3
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	400a      	ands	r2, r1
 8001f42:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001f4a:	683b      	ldr	r3, [r7, #0]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	b29b      	uxth	r3, r3
 8001f50:	4618      	mov	r0, r3
 8001f52:	683b      	ldr	r3, [r7, #0]
 8001f54:	685a      	ldr	r2, [r3, #4]
 8001f56:	4613      	mov	r3, r2
 8001f58:	009b      	lsls	r3, r3, #2
 8001f5a:	4413      	add	r3, r2
 8001f5c:	3b41      	subs	r3, #65	@ 0x41
 8001f5e:	fa00 f203 	lsl.w	r2, r0, r3
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	430a      	orrs	r2, r1
 8001f68:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001f6a:	4b22      	ldr	r3, [pc, #136]	@ (8001ff4 <HAL_ADC_ConfigChannel+0x234>)
 8001f6c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	4a21      	ldr	r2, [pc, #132]	@ (8001ff8 <HAL_ADC_ConfigChannel+0x238>)
 8001f74:	4293      	cmp	r3, r2
 8001f76:	d109      	bne.n	8001f8c <HAL_ADC_ConfigChannel+0x1cc>
 8001f78:	683b      	ldr	r3, [r7, #0]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	2b12      	cmp	r3, #18
 8001f7e:	d105      	bne.n	8001f8c <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	685b      	ldr	r3, [r3, #4]
 8001f84:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	4a19      	ldr	r2, [pc, #100]	@ (8001ff8 <HAL_ADC_ConfigChannel+0x238>)
 8001f92:	4293      	cmp	r3, r2
 8001f94:	d123      	bne.n	8001fde <HAL_ADC_ConfigChannel+0x21e>
 8001f96:	683b      	ldr	r3, [r7, #0]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	2b10      	cmp	r3, #16
 8001f9c:	d003      	beq.n	8001fa6 <HAL_ADC_ConfigChannel+0x1e6>
 8001f9e:	683b      	ldr	r3, [r7, #0]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	2b11      	cmp	r3, #17
 8001fa4:	d11b      	bne.n	8001fde <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001fa6:	68fb      	ldr	r3, [r7, #12]
 8001fa8:	685b      	ldr	r3, [r3, #4]
 8001faa:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001fb2:	683b      	ldr	r3, [r7, #0]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	2b10      	cmp	r3, #16
 8001fb8:	d111      	bne.n	8001fde <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001fba:	4b10      	ldr	r3, [pc, #64]	@ (8001ffc <HAL_ADC_ConfigChannel+0x23c>)
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	4a10      	ldr	r2, [pc, #64]	@ (8002000 <HAL_ADC_ConfigChannel+0x240>)
 8001fc0:	fba2 2303 	umull	r2, r3, r2, r3
 8001fc4:	0c9a      	lsrs	r2, r3, #18
 8001fc6:	4613      	mov	r3, r2
 8001fc8:	009b      	lsls	r3, r3, #2
 8001fca:	4413      	add	r3, r2
 8001fcc:	005b      	lsls	r3, r3, #1
 8001fce:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001fd0:	e002      	b.n	8001fd8 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8001fd2:	68bb      	ldr	r3, [r7, #8]
 8001fd4:	3b01      	subs	r3, #1
 8001fd6:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001fd8:	68bb      	ldr	r3, [r7, #8]
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d1f9      	bne.n	8001fd2 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	2200      	movs	r2, #0
 8001fe2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001fe6:	2300      	movs	r3, #0
}
 8001fe8:	4618      	mov	r0, r3
 8001fea:	3714      	adds	r7, #20
 8001fec:	46bd      	mov	sp, r7
 8001fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff2:	4770      	bx	lr
 8001ff4:	40012300 	.word	0x40012300
 8001ff8:	40012000 	.word	0x40012000
 8001ffc:	20000018 	.word	0x20000018
 8002000:	431bde83 	.word	0x431bde83

08002004 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002004:	b480      	push	{r7}
 8002006:	b085      	sub	sp, #20
 8002008:	af00      	add	r7, sp, #0
 800200a:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800200c:	4b79      	ldr	r3, [pc, #484]	@ (80021f4 <ADC_Init+0x1f0>)
 800200e:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	685b      	ldr	r3, [r3, #4]
 8002014:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	685a      	ldr	r2, [r3, #4]
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	685b      	ldr	r3, [r3, #4]
 8002024:	431a      	orrs	r2, r3
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	685a      	ldr	r2, [r3, #4]
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002038:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	6859      	ldr	r1, [r3, #4]
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	691b      	ldr	r3, [r3, #16]
 8002044:	021a      	lsls	r2, r3, #8
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	430a      	orrs	r2, r1
 800204c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	685a      	ldr	r2, [r3, #4]
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 800205c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	6859      	ldr	r1, [r3, #4]
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	689a      	ldr	r2, [r3, #8]
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	430a      	orrs	r2, r1
 800206e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	689a      	ldr	r2, [r3, #8]
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800207e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	6899      	ldr	r1, [r3, #8]
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	68da      	ldr	r2, [r3, #12]
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	430a      	orrs	r2, r1
 8002090:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002096:	4a58      	ldr	r2, [pc, #352]	@ (80021f8 <ADC_Init+0x1f4>)
 8002098:	4293      	cmp	r3, r2
 800209a:	d022      	beq.n	80020e2 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	689a      	ldr	r2, [r3, #8]
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80020aa:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	6899      	ldr	r1, [r3, #8]
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	430a      	orrs	r2, r1
 80020bc:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	689a      	ldr	r2, [r3, #8]
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80020cc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	6899      	ldr	r1, [r3, #8]
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	430a      	orrs	r2, r1
 80020de:	609a      	str	r2, [r3, #8]
 80020e0:	e00f      	b.n	8002102 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	689a      	ldr	r2, [r3, #8]
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80020f0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	689a      	ldr	r2, [r3, #8]
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8002100:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	689a      	ldr	r2, [r3, #8]
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	f022 0202 	bic.w	r2, r2, #2
 8002110:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	6899      	ldr	r1, [r3, #8]
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	7e1b      	ldrb	r3, [r3, #24]
 800211c:	005a      	lsls	r2, r3, #1
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	430a      	orrs	r2, r1
 8002124:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	f893 3020 	ldrb.w	r3, [r3, #32]
 800212c:	2b00      	cmp	r3, #0
 800212e:	d01b      	beq.n	8002168 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	685a      	ldr	r2, [r3, #4]
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800213e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	685a      	ldr	r2, [r3, #4]
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 800214e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	6859      	ldr	r1, [r3, #4]
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800215a:	3b01      	subs	r3, #1
 800215c:	035a      	lsls	r2, r3, #13
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	430a      	orrs	r2, r1
 8002164:	605a      	str	r2, [r3, #4]
 8002166:	e007      	b.n	8002178 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	685a      	ldr	r2, [r3, #4]
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002176:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8002186:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	69db      	ldr	r3, [r3, #28]
 8002192:	3b01      	subs	r3, #1
 8002194:	051a      	lsls	r2, r3, #20
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	430a      	orrs	r2, r1
 800219c:	62da      	str	r2, [r3, #44]	@ 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	689a      	ldr	r2, [r3, #8]
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 80021ac:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	6899      	ldr	r1, [r3, #8]
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80021ba:	025a      	lsls	r2, r3, #9
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	430a      	orrs	r2, r1
 80021c2:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	689a      	ldr	r2, [r3, #8]
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80021d2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	6899      	ldr	r1, [r3, #8]
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	695b      	ldr	r3, [r3, #20]
 80021de:	029a      	lsls	r2, r3, #10
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	430a      	orrs	r2, r1
 80021e6:	609a      	str	r2, [r3, #8]
}
 80021e8:	bf00      	nop
 80021ea:	3714      	adds	r7, #20
 80021ec:	46bd      	mov	sp, r7
 80021ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f2:	4770      	bx	lr
 80021f4:	40012300 	.word	0x40012300
 80021f8:	0f000001 	.word	0x0f000001

080021fc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80021fc:	b480      	push	{r7}
 80021fe:	b085      	sub	sp, #20
 8002200:	af00      	add	r7, sp, #0
 8002202:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	f003 0307 	and.w	r3, r3, #7
 800220a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800220c:	4b0c      	ldr	r3, [pc, #48]	@ (8002240 <__NVIC_SetPriorityGrouping+0x44>)
 800220e:	68db      	ldr	r3, [r3, #12]
 8002210:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002212:	68ba      	ldr	r2, [r7, #8]
 8002214:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002218:	4013      	ands	r3, r2
 800221a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002220:	68bb      	ldr	r3, [r7, #8]
 8002222:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002224:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002228:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800222c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800222e:	4a04      	ldr	r2, [pc, #16]	@ (8002240 <__NVIC_SetPriorityGrouping+0x44>)
 8002230:	68bb      	ldr	r3, [r7, #8]
 8002232:	60d3      	str	r3, [r2, #12]
}
 8002234:	bf00      	nop
 8002236:	3714      	adds	r7, #20
 8002238:	46bd      	mov	sp, r7
 800223a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800223e:	4770      	bx	lr
 8002240:	e000ed00 	.word	0xe000ed00

08002244 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002244:	b480      	push	{r7}
 8002246:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002248:	4b04      	ldr	r3, [pc, #16]	@ (800225c <__NVIC_GetPriorityGrouping+0x18>)
 800224a:	68db      	ldr	r3, [r3, #12]
 800224c:	0a1b      	lsrs	r3, r3, #8
 800224e:	f003 0307 	and.w	r3, r3, #7
}
 8002252:	4618      	mov	r0, r3
 8002254:	46bd      	mov	sp, r7
 8002256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800225a:	4770      	bx	lr
 800225c:	e000ed00 	.word	0xe000ed00

08002260 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002260:	b480      	push	{r7}
 8002262:	b083      	sub	sp, #12
 8002264:	af00      	add	r7, sp, #0
 8002266:	4603      	mov	r3, r0
 8002268:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800226a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800226e:	2b00      	cmp	r3, #0
 8002270:	db0b      	blt.n	800228a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002272:	79fb      	ldrb	r3, [r7, #7]
 8002274:	f003 021f 	and.w	r2, r3, #31
 8002278:	4907      	ldr	r1, [pc, #28]	@ (8002298 <__NVIC_EnableIRQ+0x38>)
 800227a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800227e:	095b      	lsrs	r3, r3, #5
 8002280:	2001      	movs	r0, #1
 8002282:	fa00 f202 	lsl.w	r2, r0, r2
 8002286:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800228a:	bf00      	nop
 800228c:	370c      	adds	r7, #12
 800228e:	46bd      	mov	sp, r7
 8002290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002294:	4770      	bx	lr
 8002296:	bf00      	nop
 8002298:	e000e100 	.word	0xe000e100

0800229c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800229c:	b480      	push	{r7}
 800229e:	b083      	sub	sp, #12
 80022a0:	af00      	add	r7, sp, #0
 80022a2:	4603      	mov	r3, r0
 80022a4:	6039      	str	r1, [r7, #0]
 80022a6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80022a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	db0a      	blt.n	80022c6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80022b0:	683b      	ldr	r3, [r7, #0]
 80022b2:	b2da      	uxtb	r2, r3
 80022b4:	490c      	ldr	r1, [pc, #48]	@ (80022e8 <__NVIC_SetPriority+0x4c>)
 80022b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022ba:	0112      	lsls	r2, r2, #4
 80022bc:	b2d2      	uxtb	r2, r2
 80022be:	440b      	add	r3, r1
 80022c0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80022c4:	e00a      	b.n	80022dc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80022c6:	683b      	ldr	r3, [r7, #0]
 80022c8:	b2da      	uxtb	r2, r3
 80022ca:	4908      	ldr	r1, [pc, #32]	@ (80022ec <__NVIC_SetPriority+0x50>)
 80022cc:	79fb      	ldrb	r3, [r7, #7]
 80022ce:	f003 030f 	and.w	r3, r3, #15
 80022d2:	3b04      	subs	r3, #4
 80022d4:	0112      	lsls	r2, r2, #4
 80022d6:	b2d2      	uxtb	r2, r2
 80022d8:	440b      	add	r3, r1
 80022da:	761a      	strb	r2, [r3, #24]
}
 80022dc:	bf00      	nop
 80022de:	370c      	adds	r7, #12
 80022e0:	46bd      	mov	sp, r7
 80022e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e6:	4770      	bx	lr
 80022e8:	e000e100 	.word	0xe000e100
 80022ec:	e000ed00 	.word	0xe000ed00

080022f0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80022f0:	b480      	push	{r7}
 80022f2:	b089      	sub	sp, #36	@ 0x24
 80022f4:	af00      	add	r7, sp, #0
 80022f6:	60f8      	str	r0, [r7, #12]
 80022f8:	60b9      	str	r1, [r7, #8]
 80022fa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	f003 0307 	and.w	r3, r3, #7
 8002302:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002304:	69fb      	ldr	r3, [r7, #28]
 8002306:	f1c3 0307 	rsb	r3, r3, #7
 800230a:	2b04      	cmp	r3, #4
 800230c:	bf28      	it	cs
 800230e:	2304      	movcs	r3, #4
 8002310:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002312:	69fb      	ldr	r3, [r7, #28]
 8002314:	3304      	adds	r3, #4
 8002316:	2b06      	cmp	r3, #6
 8002318:	d902      	bls.n	8002320 <NVIC_EncodePriority+0x30>
 800231a:	69fb      	ldr	r3, [r7, #28]
 800231c:	3b03      	subs	r3, #3
 800231e:	e000      	b.n	8002322 <NVIC_EncodePriority+0x32>
 8002320:	2300      	movs	r3, #0
 8002322:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002324:	f04f 32ff 	mov.w	r2, #4294967295
 8002328:	69bb      	ldr	r3, [r7, #24]
 800232a:	fa02 f303 	lsl.w	r3, r2, r3
 800232e:	43da      	mvns	r2, r3
 8002330:	68bb      	ldr	r3, [r7, #8]
 8002332:	401a      	ands	r2, r3
 8002334:	697b      	ldr	r3, [r7, #20]
 8002336:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002338:	f04f 31ff 	mov.w	r1, #4294967295
 800233c:	697b      	ldr	r3, [r7, #20]
 800233e:	fa01 f303 	lsl.w	r3, r1, r3
 8002342:	43d9      	mvns	r1, r3
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002348:	4313      	orrs	r3, r2
         );
}
 800234a:	4618      	mov	r0, r3
 800234c:	3724      	adds	r7, #36	@ 0x24
 800234e:	46bd      	mov	sp, r7
 8002350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002354:	4770      	bx	lr
	...

08002358 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002358:	b580      	push	{r7, lr}
 800235a:	b082      	sub	sp, #8
 800235c:	af00      	add	r7, sp, #0
 800235e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	3b01      	subs	r3, #1
 8002364:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002368:	d301      	bcc.n	800236e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800236a:	2301      	movs	r3, #1
 800236c:	e00f      	b.n	800238e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800236e:	4a0a      	ldr	r2, [pc, #40]	@ (8002398 <SysTick_Config+0x40>)
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	3b01      	subs	r3, #1
 8002374:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002376:	210f      	movs	r1, #15
 8002378:	f04f 30ff 	mov.w	r0, #4294967295
 800237c:	f7ff ff8e 	bl	800229c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002380:	4b05      	ldr	r3, [pc, #20]	@ (8002398 <SysTick_Config+0x40>)
 8002382:	2200      	movs	r2, #0
 8002384:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002386:	4b04      	ldr	r3, [pc, #16]	@ (8002398 <SysTick_Config+0x40>)
 8002388:	2207      	movs	r2, #7
 800238a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800238c:	2300      	movs	r3, #0
}
 800238e:	4618      	mov	r0, r3
 8002390:	3708      	adds	r7, #8
 8002392:	46bd      	mov	sp, r7
 8002394:	bd80      	pop	{r7, pc}
 8002396:	bf00      	nop
 8002398:	e000e010 	.word	0xe000e010

0800239c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800239c:	b580      	push	{r7, lr}
 800239e:	b082      	sub	sp, #8
 80023a0:	af00      	add	r7, sp, #0
 80023a2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80023a4:	6878      	ldr	r0, [r7, #4]
 80023a6:	f7ff ff29 	bl	80021fc <__NVIC_SetPriorityGrouping>
}
 80023aa:	bf00      	nop
 80023ac:	3708      	adds	r7, #8
 80023ae:	46bd      	mov	sp, r7
 80023b0:	bd80      	pop	{r7, pc}

080023b2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80023b2:	b580      	push	{r7, lr}
 80023b4:	b086      	sub	sp, #24
 80023b6:	af00      	add	r7, sp, #0
 80023b8:	4603      	mov	r3, r0
 80023ba:	60b9      	str	r1, [r7, #8]
 80023bc:	607a      	str	r2, [r7, #4]
 80023be:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80023c0:	2300      	movs	r3, #0
 80023c2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80023c4:	f7ff ff3e 	bl	8002244 <__NVIC_GetPriorityGrouping>
 80023c8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80023ca:	687a      	ldr	r2, [r7, #4]
 80023cc:	68b9      	ldr	r1, [r7, #8]
 80023ce:	6978      	ldr	r0, [r7, #20]
 80023d0:	f7ff ff8e 	bl	80022f0 <NVIC_EncodePriority>
 80023d4:	4602      	mov	r2, r0
 80023d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80023da:	4611      	mov	r1, r2
 80023dc:	4618      	mov	r0, r3
 80023de:	f7ff ff5d 	bl	800229c <__NVIC_SetPriority>
}
 80023e2:	bf00      	nop
 80023e4:	3718      	adds	r7, #24
 80023e6:	46bd      	mov	sp, r7
 80023e8:	bd80      	pop	{r7, pc}

080023ea <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80023ea:	b580      	push	{r7, lr}
 80023ec:	b082      	sub	sp, #8
 80023ee:	af00      	add	r7, sp, #0
 80023f0:	4603      	mov	r3, r0
 80023f2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80023f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023f8:	4618      	mov	r0, r3
 80023fa:	f7ff ff31 	bl	8002260 <__NVIC_EnableIRQ>
}
 80023fe:	bf00      	nop
 8002400:	3708      	adds	r7, #8
 8002402:	46bd      	mov	sp, r7
 8002404:	bd80      	pop	{r7, pc}

08002406 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002406:	b580      	push	{r7, lr}
 8002408:	b082      	sub	sp, #8
 800240a:	af00      	add	r7, sp, #0
 800240c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800240e:	6878      	ldr	r0, [r7, #4]
 8002410:	f7ff ffa2 	bl	8002358 <SysTick_Config>
 8002414:	4603      	mov	r3, r0
}
 8002416:	4618      	mov	r0, r3
 8002418:	3708      	adds	r7, #8
 800241a:	46bd      	mov	sp, r7
 800241c:	bd80      	pop	{r7, pc}

0800241e <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 800241e:	b580      	push	{r7, lr}
 8002420:	b082      	sub	sp, #8
 8002422:	af00      	add	r7, sp, #0
 8002424:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	2b00      	cmp	r3, #0
 800242a:	d101      	bne.n	8002430 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 800242c:	2301      	movs	r3, #1
 800242e:	e014      	b.n	800245a <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	791b      	ldrb	r3, [r3, #4]
 8002434:	b2db      	uxtb	r3, r3
 8002436:	2b00      	cmp	r3, #0
 8002438:	d105      	bne.n	8002446 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	2200      	movs	r2, #0
 800243e:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8002440:	6878      	ldr	r0, [r7, #4]
 8002442:	f7fe fe45 	bl	80010d0 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	2202      	movs	r2, #2
 800244a:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	2200      	movs	r2, #0
 8002450:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	2201      	movs	r2, #1
 8002456:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8002458:	2300      	movs	r3, #0
}
 800245a:	4618      	mov	r0, r3
 800245c:	3708      	adds	r7, #8
 800245e:	46bd      	mov	sp, r7
 8002460:	bd80      	pop	{r7, pc}
	...

08002464 <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t *pData, uint32_t Length,
                                    uint32_t Alignment)
{
 8002464:	b580      	push	{r7, lr}
 8002466:	b086      	sub	sp, #24
 8002468:	af00      	add	r7, sp, #0
 800246a:	60f8      	str	r0, [r7, #12]
 800246c:	60b9      	str	r1, [r7, #8]
 800246e:	607a      	str	r2, [r7, #4]
 8002470:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002472:	2300      	movs	r3, #0
 8002474:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpreg = 0U;
 8002476:	2300      	movs	r3, #0
 8002478:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));

  /* Process locked */
  __HAL_LOCK(hdac);
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	795b      	ldrb	r3, [r3, #5]
 800247e:	2b01      	cmp	r3, #1
 8002480:	d101      	bne.n	8002486 <HAL_DAC_Start_DMA+0x22>
 8002482:	2302      	movs	r3, #2
 8002484:	e0ab      	b.n	80025de <HAL_DAC_Start_DMA+0x17a>
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	2201      	movs	r2, #1
 800248a:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	2202      	movs	r2, #2
 8002490:	711a      	strb	r2, [r3, #4]

  if (Channel == DAC_CHANNEL_1)
 8002492:	68bb      	ldr	r3, [r7, #8]
 8002494:	2b00      	cmp	r3, #0
 8002496:	d12f      	bne.n	80024f8 <HAL_DAC_Start_DMA+0x94>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	689b      	ldr	r3, [r3, #8]
 800249c:	4a52      	ldr	r2, [pc, #328]	@ (80025e8 <HAL_DAC_Start_DMA+0x184>)
 800249e:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	689b      	ldr	r3, [r3, #8]
 80024a4:	4a51      	ldr	r2, [pc, #324]	@ (80025ec <HAL_DAC_Start_DMA+0x188>)
 80024a6:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	689b      	ldr	r3, [r3, #8]
 80024ac:	4a50      	ldr	r2, [pc, #320]	@ (80025f0 <HAL_DAC_Start_DMA+0x18c>)
 80024ae:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	681a      	ldr	r2, [r3, #0]
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80024be:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 1 */
    switch (Alignment)
 80024c0:	6a3b      	ldr	r3, [r7, #32]
 80024c2:	2b08      	cmp	r3, #8
 80024c4:	d013      	beq.n	80024ee <HAL_DAC_Start_DMA+0x8a>
 80024c6:	6a3b      	ldr	r3, [r7, #32]
 80024c8:	2b08      	cmp	r3, #8
 80024ca:	d845      	bhi.n	8002558 <HAL_DAC_Start_DMA+0xf4>
 80024cc:	6a3b      	ldr	r3, [r7, #32]
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d003      	beq.n	80024da <HAL_DAC_Start_DMA+0x76>
 80024d2:	6a3b      	ldr	r3, [r7, #32]
 80024d4:	2b04      	cmp	r3, #4
 80024d6:	d005      	beq.n	80024e4 <HAL_DAC_Start_DMA+0x80>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
        break;
      default:
        break;
 80024d8:	e03e      	b.n	8002558 <HAL_DAC_Start_DMA+0xf4>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	3308      	adds	r3, #8
 80024e0:	613b      	str	r3, [r7, #16]
        break;
 80024e2:	e03c      	b.n	800255e <HAL_DAC_Start_DMA+0xfa>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	330c      	adds	r3, #12
 80024ea:	613b      	str	r3, [r7, #16]
        break;
 80024ec:	e037      	b.n	800255e <HAL_DAC_Start_DMA+0xfa>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	3310      	adds	r3, #16
 80024f4:	613b      	str	r3, [r7, #16]
        break;
 80024f6:	e032      	b.n	800255e <HAL_DAC_Start_DMA+0xfa>
  }
#if defined(DAC_CHANNEL2_SUPPORT)
  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	68db      	ldr	r3, [r3, #12]
 80024fc:	4a3d      	ldr	r2, [pc, #244]	@ (80025f4 <HAL_DAC_Start_DMA+0x190>)
 80024fe:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	68db      	ldr	r3, [r3, #12]
 8002504:	4a3c      	ldr	r2, [pc, #240]	@ (80025f8 <HAL_DAC_Start_DMA+0x194>)
 8002506:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	68db      	ldr	r3, [r3, #12]
 800250c:	4a3b      	ldr	r2, [pc, #236]	@ (80025fc <HAL_DAC_Start_DMA+0x198>)
 800250e:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Enable the selected DAC channel2 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	681a      	ldr	r2, [r3, #0]
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 800251e:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 2 */
    switch (Alignment)
 8002520:	6a3b      	ldr	r3, [r7, #32]
 8002522:	2b08      	cmp	r3, #8
 8002524:	d013      	beq.n	800254e <HAL_DAC_Start_DMA+0xea>
 8002526:	6a3b      	ldr	r3, [r7, #32]
 8002528:	2b08      	cmp	r3, #8
 800252a:	d817      	bhi.n	800255c <HAL_DAC_Start_DMA+0xf8>
 800252c:	6a3b      	ldr	r3, [r7, #32]
 800252e:	2b00      	cmp	r3, #0
 8002530:	d003      	beq.n	800253a <HAL_DAC_Start_DMA+0xd6>
 8002532:	6a3b      	ldr	r3, [r7, #32]
 8002534:	2b04      	cmp	r3, #4
 8002536:	d005      	beq.n	8002544 <HAL_DAC_Start_DMA+0xe0>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
        break;
      default:
        break;
 8002538:	e010      	b.n	800255c <HAL_DAC_Start_DMA+0xf8>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	3314      	adds	r3, #20
 8002540:	613b      	str	r3, [r7, #16]
        break;
 8002542:	e00c      	b.n	800255e <HAL_DAC_Start_DMA+0xfa>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	3318      	adds	r3, #24
 800254a:	613b      	str	r3, [r7, #16]
        break;
 800254c:	e007      	b.n	800255e <HAL_DAC_Start_DMA+0xfa>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	331c      	adds	r3, #28
 8002554:	613b      	str	r3, [r7, #16]
        break;
 8002556:	e002      	b.n	800255e <HAL_DAC_Start_DMA+0xfa>
        break;
 8002558:	bf00      	nop
 800255a:	e000      	b.n	800255e <HAL_DAC_Start_DMA+0xfa>
        break;
 800255c:	bf00      	nop
    }
  }
#endif /* DAC_CHANNEL2_SUPPORT */

  /* Enable the DMA Stream */
  if (Channel == DAC_CHANNEL_1)
 800255e:	68bb      	ldr	r3, [r7, #8]
 8002560:	2b00      	cmp	r3, #0
 8002562:	d111      	bne.n	8002588 <HAL_DAC_Start_DMA+0x124>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	681a      	ldr	r2, [r3, #0]
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002572:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Stream */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	6898      	ldr	r0, [r3, #8]
 8002578:	6879      	ldr	r1, [r7, #4]
 800257a:	683b      	ldr	r3, [r7, #0]
 800257c:	693a      	ldr	r2, [r7, #16]
 800257e:	f000 f9e5 	bl	800294c <HAL_DMA_Start_IT>
 8002582:	4603      	mov	r3, r0
 8002584:	75fb      	strb	r3, [r7, #23]
 8002586:	e010      	b.n	80025aa <HAL_DAC_Start_DMA+0x146>
  }
#if defined(DAC_CHANNEL2_SUPPORT)
  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	681a      	ldr	r2, [r3, #0]
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	f042 5200 	orr.w	r2, r2, #536870912	@ 0x20000000
 8002596:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Stream */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	68d8      	ldr	r0, [r3, #12]
 800259c:	6879      	ldr	r1, [r7, #4]
 800259e:	683b      	ldr	r3, [r7, #0]
 80025a0:	693a      	ldr	r2, [r7, #16]
 80025a2:	f000 f9d3 	bl	800294c <HAL_DMA_Start_IT>
 80025a6:	4603      	mov	r3, r0
 80025a8:	75fb      	strb	r3, [r7, #23]
  }
#endif /* DAC_CHANNEL2_SUPPORT */

  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	2200      	movs	r2, #0
 80025ae:	715a      	strb	r2, [r3, #5]

  if (status == HAL_OK)
 80025b0:	7dfb      	ldrb	r3, [r7, #23]
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d10c      	bne.n	80025d0 <HAL_DAC_Start_DMA+0x16c>
  {
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, Channel);
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	6819      	ldr	r1, [r3, #0]
 80025bc:	68bb      	ldr	r3, [r7, #8]
 80025be:	f003 0310 	and.w	r3, r3, #16
 80025c2:	2201      	movs	r2, #1
 80025c4:	409a      	lsls	r2, r3
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	430a      	orrs	r2, r1
 80025cc:	601a      	str	r2, [r3, #0]
 80025ce:	e005      	b.n	80025dc <HAL_DAC_Start_DMA+0x178>
  }
  else
  {
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	691b      	ldr	r3, [r3, #16]
 80025d4:	f043 0204 	orr.w	r2, r3, #4
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	611a      	str	r2, [r3, #16]
  }

  /* Return function status */
  return status;
 80025dc:	7dfb      	ldrb	r3, [r7, #23]
}
 80025de:	4618      	mov	r0, r3
 80025e0:	3718      	adds	r7, #24
 80025e2:	46bd      	mov	sp, r7
 80025e4:	bd80      	pop	{r7, pc}
 80025e6:	bf00      	nop
 80025e8:	080026db 	.word	0x080026db
 80025ec:	080026fd 	.word	0x080026fd
 80025f0:	08002719 	.word	0x08002719
 80025f4:	08002783 	.word	0x08002783
 80025f8:	080027a5 	.word	0x080027a5
 80025fc:	080027c1 	.word	0x080027c1

08002600 <HAL_DAC_ConvCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8002600:	b480      	push	{r7}
 8002602:	b083      	sub	sp, #12
 8002604:	af00      	add	r7, sp, #0
 8002606:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvCpltCallbackCh1 could be implemented in the user file
   */
}
 8002608:	bf00      	nop
 800260a:	370c      	adds	r7, #12
 800260c:	46bd      	mov	sp, r7
 800260e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002612:	4770      	bx	lr

08002614 <HAL_DAC_ConvHalfCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8002614:	b480      	push	{r7}
 8002616:	b083      	sub	sp, #12
 8002618:	af00      	add	r7, sp, #0
 800261a:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh1 could be implemented in the user file
   */
}
 800261c:	bf00      	nop
 800261e:	370c      	adds	r7, #12
 8002620:	46bd      	mov	sp, r7
 8002622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002626:	4770      	bx	lr

08002628 <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8002628:	b480      	push	{r7}
 800262a:	b083      	sub	sp, #12
 800262c:	af00      	add	r7, sp, #0
 800262e:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallbackCh1 could be implemented in the user file
   */
}
 8002630:	bf00      	nop
 8002632:	370c      	adds	r7, #12
 8002634:	46bd      	mov	sp, r7
 8002636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800263a:	4770      	bx	lr

0800263c <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 800263c:	b480      	push	{r7}
 800263e:	b087      	sub	sp, #28
 8002640:	af00      	add	r7, sp, #0
 8002642:	60f8      	str	r0, [r7, #12]
 8002644:	60b9      	str	r1, [r7, #8]
 8002646:	607a      	str	r2, [r7, #4]
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	795b      	ldrb	r3, [r3, #5]
 800264c:	2b01      	cmp	r3, #1
 800264e:	d101      	bne.n	8002654 <HAL_DAC_ConfigChannel+0x18>
 8002650:	2302      	movs	r3, #2
 8002652:	e03c      	b.n	80026ce <HAL_DAC_ConfigChannel+0x92>
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	2201      	movs	r2, #1
 8002658:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	2202      	movs	r2, #2
 800265e:	711a      	strb	r2, [r3, #4]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << (Channel & 0x10UL));
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	f003 0310 	and.w	r3, r3, #16
 800266e:	f640 72fe 	movw	r2, #4094	@ 0xffe
 8002672:	fa02 f303 	lsl.w	r3, r2, r3
 8002676:	43db      	mvns	r3, r3
 8002678:	697a      	ldr	r2, [r7, #20]
 800267a:	4013      	ands	r3, r2
 800267c:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 800267e:	68bb      	ldr	r3, [r7, #8]
 8002680:	681a      	ldr	r2, [r3, #0]
 8002682:	68bb      	ldr	r3, [r7, #8]
 8002684:	685b      	ldr	r3, [r3, #4]
 8002686:	4313      	orrs	r3, r2
 8002688:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	f003 0310 	and.w	r3, r3, #16
 8002690:	693a      	ldr	r2, [r7, #16]
 8002692:	fa02 f303 	lsl.w	r3, r2, r3
 8002696:	697a      	ldr	r2, [r7, #20]
 8002698:	4313      	orrs	r3, r2
 800269a:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	697a      	ldr	r2, [r7, #20]
 80026a2:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	6819      	ldr	r1, [r3, #0]
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	f003 0310 	and.w	r3, r3, #16
 80026b0:	22c0      	movs	r2, #192	@ 0xc0
 80026b2:	fa02 f303 	lsl.w	r3, r2, r3
 80026b6:	43da      	mvns	r2, r3
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	400a      	ands	r2, r1
 80026be:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	2201      	movs	r2, #1
 80026c4:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	2200      	movs	r2, #0
 80026ca:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80026cc:	2300      	movs	r3, #0
}
 80026ce:	4618      	mov	r0, r3
 80026d0:	371c      	adds	r7, #28
 80026d2:	46bd      	mov	sp, r7
 80026d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d8:	4770      	bx	lr

080026da <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 80026da:	b580      	push	{r7, lr}
 80026dc:	b084      	sub	sp, #16
 80026de:	af00      	add	r7, sp, #0
 80026e0:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80026e6:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac);
 80026e8:	68f8      	ldr	r0, [r7, #12]
 80026ea:	f7ff ff89 	bl	8002600 <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	2201      	movs	r2, #1
 80026f2:	711a      	strb	r2, [r3, #4]
}
 80026f4:	bf00      	nop
 80026f6:	3710      	adds	r7, #16
 80026f8:	46bd      	mov	sp, r7
 80026fa:	bd80      	pop	{r7, pc}

080026fc <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 80026fc:	b580      	push	{r7, lr}
 80026fe:	b084      	sub	sp, #16
 8002700:	af00      	add	r7, sp, #0
 8002702:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002708:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 800270a:	68f8      	ldr	r0, [r7, #12]
 800270c:	f7ff ff82 	bl	8002614 <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8002710:	bf00      	nop
 8002712:	3710      	adds	r7, #16
 8002714:	46bd      	mov	sp, r7
 8002716:	bd80      	pop	{r7, pc}

08002718 <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 8002718:	b580      	push	{r7, lr}
 800271a:	b084      	sub	sp, #16
 800271c:	af00      	add	r7, sp, #0
 800271e:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002724:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	691b      	ldr	r3, [r3, #16]
 800272a:	f043 0204 	orr.w	r2, r3, #4
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
 8002732:	68f8      	ldr	r0, [r7, #12]
 8002734:	f7ff ff78 	bl	8002628 <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	2201      	movs	r2, #1
 800273c:	711a      	strb	r2, [r3, #4]
}
 800273e:	bf00      	nop
 8002740:	3710      	adds	r7, #16
 8002742:	46bd      	mov	sp, r7
 8002744:	bd80      	pop	{r7, pc}

08002746 <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8002746:	b480      	push	{r7}
 8002748:	b083      	sub	sp, #12
 800274a:	af00      	add	r7, sp, #0
 800274c:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 800274e:	bf00      	nop
 8002750:	370c      	adds	r7, #12
 8002752:	46bd      	mov	sp, r7
 8002754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002758:	4770      	bx	lr

0800275a <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 800275a:	b480      	push	{r7}
 800275c:	b083      	sub	sp, #12
 800275e:	af00      	add	r7, sp, #0
 8002760:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 8002762:	bf00      	nop
 8002764:	370c      	adds	r7, #12
 8002766:	46bd      	mov	sp, r7
 8002768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800276c:	4770      	bx	lr

0800276e <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 800276e:	b480      	push	{r7}
 8002770:	b083      	sub	sp, #12
 8002772:	af00      	add	r7, sp, #0
 8002774:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ErrorCallbackCh2 could be implemented in the user file
   */
}
 8002776:	bf00      	nop
 8002778:	370c      	adds	r7, #12
 800277a:	46bd      	mov	sp, r7
 800277c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002780:	4770      	bx	lr

08002782 <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8002782:	b580      	push	{r7, lr}
 8002784:	b084      	sub	sp, #16
 8002786:	af00      	add	r7, sp, #0
 8002788:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800278e:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
 8002790:	68f8      	ldr	r0, [r7, #12]
 8002792:	f7ff ffd8 	bl	8002746 <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	2201      	movs	r2, #1
 800279a:	711a      	strb	r2, [r3, #4]
}
 800279c:	bf00      	nop
 800279e:	3710      	adds	r7, #16
 80027a0:	46bd      	mov	sp, r7
 80027a2:	bd80      	pop	{r7, pc}

080027a4 <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 80027a4:	b580      	push	{r7, lr}
 80027a6:	b084      	sub	sp, #16
 80027a8:	af00      	add	r7, sp, #0
 80027aa:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80027b0:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 80027b2:	68f8      	ldr	r0, [r7, #12]
 80027b4:	f7ff ffd1 	bl	800275a <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 80027b8:	bf00      	nop
 80027ba:	3710      	adds	r7, #16
 80027bc:	46bd      	mov	sp, r7
 80027be:	bd80      	pop	{r7, pc}

080027c0 <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)
{
 80027c0:	b580      	push	{r7, lr}
 80027c2:	b084      	sub	sp, #16
 80027c4:	af00      	add	r7, sp, #0
 80027c6:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80027cc:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	691b      	ldr	r3, [r3, #16]
 80027d2:	f043 0204 	orr.w	r2, r3, #4
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac);
 80027da:	68f8      	ldr	r0, [r7, #12]
 80027dc:	f7ff ffc7 	bl	800276e <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	2201      	movs	r2, #1
 80027e4:	711a      	strb	r2, [r3, #4]
}
 80027e6:	bf00      	nop
 80027e8:	3710      	adds	r7, #16
 80027ea:	46bd      	mov	sp, r7
 80027ec:	bd80      	pop	{r7, pc}
	...

080027f0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80027f0:	b580      	push	{r7, lr}
 80027f2:	b086      	sub	sp, #24
 80027f4:	af00      	add	r7, sp, #0
 80027f6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80027f8:	2300      	movs	r3, #0
 80027fa:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80027fc:	f7ff fa90 	bl	8001d20 <HAL_GetTick>
 8002800:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	2b00      	cmp	r3, #0
 8002806:	d101      	bne.n	800280c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002808:	2301      	movs	r3, #1
 800280a:	e099      	b.n	8002940 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	2202      	movs	r2, #2
 8002810:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	2200      	movs	r2, #0
 8002818:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	681a      	ldr	r2, [r3, #0]
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	f022 0201 	bic.w	r2, r2, #1
 800282a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800282c:	e00f      	b.n	800284e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800282e:	f7ff fa77 	bl	8001d20 <HAL_GetTick>
 8002832:	4602      	mov	r2, r0
 8002834:	693b      	ldr	r3, [r7, #16]
 8002836:	1ad3      	subs	r3, r2, r3
 8002838:	2b05      	cmp	r3, #5
 800283a:	d908      	bls.n	800284e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	2220      	movs	r2, #32
 8002840:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	2203      	movs	r2, #3
 8002846:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 800284a:	2303      	movs	r3, #3
 800284c:	e078      	b.n	8002940 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	f003 0301 	and.w	r3, r3, #1
 8002858:	2b00      	cmp	r3, #0
 800285a:	d1e8      	bne.n	800282e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002864:	697a      	ldr	r2, [r7, #20]
 8002866:	4b38      	ldr	r3, [pc, #224]	@ (8002948 <HAL_DMA_Init+0x158>)
 8002868:	4013      	ands	r3, r2
 800286a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	685a      	ldr	r2, [r3, #4]
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	689b      	ldr	r3, [r3, #8]
 8002874:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800287a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	691b      	ldr	r3, [r3, #16]
 8002880:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002886:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	699b      	ldr	r3, [r3, #24]
 800288c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002892:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	6a1b      	ldr	r3, [r3, #32]
 8002898:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800289a:	697a      	ldr	r2, [r7, #20]
 800289c:	4313      	orrs	r3, r2
 800289e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028a4:	2b04      	cmp	r3, #4
 80028a6:	d107      	bne.n	80028b8 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028b0:	4313      	orrs	r3, r2
 80028b2:	697a      	ldr	r2, [r7, #20]
 80028b4:	4313      	orrs	r3, r2
 80028b6:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	697a      	ldr	r2, [r7, #20]
 80028be:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	695b      	ldr	r3, [r3, #20]
 80028c6:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80028c8:	697b      	ldr	r3, [r7, #20]
 80028ca:	f023 0307 	bic.w	r3, r3, #7
 80028ce:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028d4:	697a      	ldr	r2, [r7, #20]
 80028d6:	4313      	orrs	r3, r2
 80028d8:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028de:	2b04      	cmp	r3, #4
 80028e0:	d117      	bne.n	8002912 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80028e6:	697a      	ldr	r2, [r7, #20]
 80028e8:	4313      	orrs	r3, r2
 80028ea:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d00e      	beq.n	8002912 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80028f4:	6878      	ldr	r0, [r7, #4]
 80028f6:	f000 fb01 	bl	8002efc <DMA_CheckFifoParam>
 80028fa:	4603      	mov	r3, r0
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d008      	beq.n	8002912 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	2240      	movs	r2, #64	@ 0x40
 8002904:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	2201      	movs	r2, #1
 800290a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 800290e:	2301      	movs	r3, #1
 8002910:	e016      	b.n	8002940 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	697a      	ldr	r2, [r7, #20]
 8002918:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800291a:	6878      	ldr	r0, [r7, #4]
 800291c:	f000 fab8 	bl	8002e90 <DMA_CalcBaseAndBitshift>
 8002920:	4603      	mov	r3, r0
 8002922:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002928:	223f      	movs	r2, #63	@ 0x3f
 800292a:	409a      	lsls	r2, r3
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	2200      	movs	r2, #0
 8002934:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	2201      	movs	r2, #1
 800293a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 800293e:	2300      	movs	r3, #0
}
 8002940:	4618      	mov	r0, r3
 8002942:	3718      	adds	r7, #24
 8002944:	46bd      	mov	sp, r7
 8002946:	bd80      	pop	{r7, pc}
 8002948:	f010803f 	.word	0xf010803f

0800294c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800294c:	b580      	push	{r7, lr}
 800294e:	b086      	sub	sp, #24
 8002950:	af00      	add	r7, sp, #0
 8002952:	60f8      	str	r0, [r7, #12]
 8002954:	60b9      	str	r1, [r7, #8]
 8002956:	607a      	str	r2, [r7, #4]
 8002958:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800295a:	2300      	movs	r3, #0
 800295c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002962:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800296a:	2b01      	cmp	r3, #1
 800296c:	d101      	bne.n	8002972 <HAL_DMA_Start_IT+0x26>
 800296e:	2302      	movs	r3, #2
 8002970:	e040      	b.n	80029f4 <HAL_DMA_Start_IT+0xa8>
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	2201      	movs	r2, #1
 8002976:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002980:	b2db      	uxtb	r3, r3
 8002982:	2b01      	cmp	r3, #1
 8002984:	d12f      	bne.n	80029e6 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	2202      	movs	r2, #2
 800298a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	2200      	movs	r2, #0
 8002992:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002994:	683b      	ldr	r3, [r7, #0]
 8002996:	687a      	ldr	r2, [r7, #4]
 8002998:	68b9      	ldr	r1, [r7, #8]
 800299a:	68f8      	ldr	r0, [r7, #12]
 800299c:	f000 fa4a 	bl	8002e34 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80029a4:	223f      	movs	r2, #63	@ 0x3f
 80029a6:	409a      	lsls	r2, r3
 80029a8:	693b      	ldr	r3, [r7, #16]
 80029aa:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	681a      	ldr	r2, [r3, #0]
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	f042 0216 	orr.w	r2, r2, #22
 80029ba:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d007      	beq.n	80029d4 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	681a      	ldr	r2, [r3, #0]
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	f042 0208 	orr.w	r2, r2, #8
 80029d2:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	681a      	ldr	r2, [r3, #0]
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	f042 0201 	orr.w	r2, r2, #1
 80029e2:	601a      	str	r2, [r3, #0]
 80029e4:	e005      	b.n	80029f2 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	2200      	movs	r2, #0
 80029ea:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80029ee:	2302      	movs	r3, #2
 80029f0:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80029f2:	7dfb      	ldrb	r3, [r7, #23]
}
 80029f4:	4618      	mov	r0, r3
 80029f6:	3718      	adds	r7, #24
 80029f8:	46bd      	mov	sp, r7
 80029fa:	bd80      	pop	{r7, pc}

080029fc <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80029fc:	b580      	push	{r7, lr}
 80029fe:	b084      	sub	sp, #16
 8002a00:	af00      	add	r7, sp, #0
 8002a02:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a08:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002a0a:	f7ff f989 	bl	8001d20 <HAL_GetTick>
 8002a0e:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002a16:	b2db      	uxtb	r3, r3
 8002a18:	2b02      	cmp	r3, #2
 8002a1a:	d008      	beq.n	8002a2e <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	2280      	movs	r2, #128	@ 0x80
 8002a20:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	2200      	movs	r2, #0
 8002a26:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8002a2a:	2301      	movs	r3, #1
 8002a2c:	e052      	b.n	8002ad4 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	681a      	ldr	r2, [r3, #0]
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	f022 0216 	bic.w	r2, r2, #22
 8002a3c:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	695a      	ldr	r2, [r3, #20]
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002a4c:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d103      	bne.n	8002a5e <HAL_DMA_Abort+0x62>
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d007      	beq.n	8002a6e <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	681a      	ldr	r2, [r3, #0]
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	f022 0208 	bic.w	r2, r2, #8
 8002a6c:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	681a      	ldr	r2, [r3, #0]
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	f022 0201 	bic.w	r2, r2, #1
 8002a7c:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002a7e:	e013      	b.n	8002aa8 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002a80:	f7ff f94e 	bl	8001d20 <HAL_GetTick>
 8002a84:	4602      	mov	r2, r0
 8002a86:	68bb      	ldr	r3, [r7, #8]
 8002a88:	1ad3      	subs	r3, r2, r3
 8002a8a:	2b05      	cmp	r3, #5
 8002a8c:	d90c      	bls.n	8002aa8 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	2220      	movs	r2, #32
 8002a92:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	2203      	movs	r2, #3
 8002a98:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	2200      	movs	r2, #0
 8002aa0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8002aa4:	2303      	movs	r3, #3
 8002aa6:	e015      	b.n	8002ad4 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	f003 0301 	and.w	r3, r3, #1
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d1e4      	bne.n	8002a80 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002aba:	223f      	movs	r2, #63	@ 0x3f
 8002abc:	409a      	lsls	r2, r3
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	2201      	movs	r2, #1
 8002ac6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	2200      	movs	r2, #0
 8002ace:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8002ad2:	2300      	movs	r3, #0
}
 8002ad4:	4618      	mov	r0, r3
 8002ad6:	3710      	adds	r7, #16
 8002ad8:	46bd      	mov	sp, r7
 8002ada:	bd80      	pop	{r7, pc}

08002adc <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002adc:	b480      	push	{r7}
 8002ade:	b083      	sub	sp, #12
 8002ae0:	af00      	add	r7, sp, #0
 8002ae2:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002aea:	b2db      	uxtb	r3, r3
 8002aec:	2b02      	cmp	r3, #2
 8002aee:	d004      	beq.n	8002afa <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	2280      	movs	r2, #128	@ 0x80
 8002af4:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8002af6:	2301      	movs	r3, #1
 8002af8:	e00c      	b.n	8002b14 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	2205      	movs	r2, #5
 8002afe:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	681a      	ldr	r2, [r3, #0]
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	f022 0201 	bic.w	r2, r2, #1
 8002b10:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002b12:	2300      	movs	r3, #0
}
 8002b14:	4618      	mov	r0, r3
 8002b16:	370c      	adds	r7, #12
 8002b18:	46bd      	mov	sp, r7
 8002b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b1e:	4770      	bx	lr

08002b20 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002b20:	b580      	push	{r7, lr}
 8002b22:	b086      	sub	sp, #24
 8002b24:	af00      	add	r7, sp, #0
 8002b26:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002b28:	2300      	movs	r3, #0
 8002b2a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002b2c:	4b8e      	ldr	r3, [pc, #568]	@ (8002d68 <HAL_DMA_IRQHandler+0x248>)
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	4a8e      	ldr	r2, [pc, #568]	@ (8002d6c <HAL_DMA_IRQHandler+0x24c>)
 8002b32:	fba2 2303 	umull	r2, r3, r2, r3
 8002b36:	0a9b      	lsrs	r3, r3, #10
 8002b38:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b3e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002b40:	693b      	ldr	r3, [r7, #16]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002b4a:	2208      	movs	r2, #8
 8002b4c:	409a      	lsls	r2, r3
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	4013      	ands	r3, r2
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d01a      	beq.n	8002b8c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	f003 0304 	and.w	r3, r3, #4
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d013      	beq.n	8002b8c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	681a      	ldr	r2, [r3, #0]
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	f022 0204 	bic.w	r2, r2, #4
 8002b72:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002b78:	2208      	movs	r2, #8
 8002b7a:	409a      	lsls	r2, r3
 8002b7c:	693b      	ldr	r3, [r7, #16]
 8002b7e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002b84:	f043 0201 	orr.w	r2, r3, #1
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002b90:	2201      	movs	r2, #1
 8002b92:	409a      	lsls	r2, r3
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	4013      	ands	r3, r2
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d012      	beq.n	8002bc2 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	695b      	ldr	r3, [r3, #20]
 8002ba2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d00b      	beq.n	8002bc2 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002bae:	2201      	movs	r2, #1
 8002bb0:	409a      	lsls	r2, r3
 8002bb2:	693b      	ldr	r3, [r7, #16]
 8002bb4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002bba:	f043 0202 	orr.w	r2, r3, #2
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002bc6:	2204      	movs	r2, #4
 8002bc8:	409a      	lsls	r2, r3
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	4013      	ands	r3, r2
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d012      	beq.n	8002bf8 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	f003 0302 	and.w	r3, r3, #2
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d00b      	beq.n	8002bf8 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002be4:	2204      	movs	r2, #4
 8002be6:	409a      	lsls	r2, r3
 8002be8:	693b      	ldr	r3, [r7, #16]
 8002bea:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002bf0:	f043 0204 	orr.w	r2, r3, #4
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002bfc:	2210      	movs	r2, #16
 8002bfe:	409a      	lsls	r2, r3
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	4013      	ands	r3, r2
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d043      	beq.n	8002c90 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	f003 0308 	and.w	r3, r3, #8
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d03c      	beq.n	8002c90 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002c1a:	2210      	movs	r2, #16
 8002c1c:	409a      	lsls	r2, r3
 8002c1e:	693b      	ldr	r3, [r7, #16]
 8002c20:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d018      	beq.n	8002c62 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d108      	bne.n	8002c50 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d024      	beq.n	8002c90 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c4a:	6878      	ldr	r0, [r7, #4]
 8002c4c:	4798      	blx	r3
 8002c4e:	e01f      	b.n	8002c90 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d01b      	beq.n	8002c90 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002c5c:	6878      	ldr	r0, [r7, #4]
 8002c5e:	4798      	blx	r3
 8002c60:	e016      	b.n	8002c90 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d107      	bne.n	8002c80 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	681a      	ldr	r2, [r3, #0]
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	f022 0208 	bic.w	r2, r2, #8
 8002c7e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d003      	beq.n	8002c90 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c8c:	6878      	ldr	r0, [r7, #4]
 8002c8e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002c94:	2220      	movs	r2, #32
 8002c96:	409a      	lsls	r2, r3
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	4013      	ands	r3, r2
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	f000 808f 	beq.w	8002dc0 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	f003 0310 	and.w	r3, r3, #16
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	f000 8087 	beq.w	8002dc0 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002cb6:	2220      	movs	r2, #32
 8002cb8:	409a      	lsls	r2, r3
 8002cba:	693b      	ldr	r3, [r7, #16]
 8002cbc:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002cc4:	b2db      	uxtb	r3, r3
 8002cc6:	2b05      	cmp	r3, #5
 8002cc8:	d136      	bne.n	8002d38 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	681a      	ldr	r2, [r3, #0]
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	f022 0216 	bic.w	r2, r2, #22
 8002cd8:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	695a      	ldr	r2, [r3, #20]
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002ce8:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d103      	bne.n	8002cfa <HAL_DMA_IRQHandler+0x1da>
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d007      	beq.n	8002d0a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	681a      	ldr	r2, [r3, #0]
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	f022 0208 	bic.w	r2, r2, #8
 8002d08:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d0e:	223f      	movs	r2, #63	@ 0x3f
 8002d10:	409a      	lsls	r2, r3
 8002d12:	693b      	ldr	r3, [r7, #16]
 8002d14:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	2201      	movs	r2, #1
 8002d1a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	2200      	movs	r2, #0
 8002d22:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d07e      	beq.n	8002e2c <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002d32:	6878      	ldr	r0, [r7, #4]
 8002d34:	4798      	blx	r3
        }
        return;
 8002d36:	e079      	b.n	8002e2c <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d01d      	beq.n	8002d82 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d10d      	bne.n	8002d70 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d031      	beq.n	8002dc0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d60:	6878      	ldr	r0, [r7, #4]
 8002d62:	4798      	blx	r3
 8002d64:	e02c      	b.n	8002dc0 <HAL_DMA_IRQHandler+0x2a0>
 8002d66:	bf00      	nop
 8002d68:	20000018 	.word	0x20000018
 8002d6c:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d023      	beq.n	8002dc0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002d7c:	6878      	ldr	r0, [r7, #4]
 8002d7e:	4798      	blx	r3
 8002d80:	e01e      	b.n	8002dc0 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d10f      	bne.n	8002db0 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	681a      	ldr	r2, [r3, #0]
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	f022 0210 	bic.w	r2, r2, #16
 8002d9e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	2201      	movs	r2, #1
 8002da4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	2200      	movs	r2, #0
 8002dac:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d003      	beq.n	8002dc0 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002dbc:	6878      	ldr	r0, [r7, #4]
 8002dbe:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d032      	beq.n	8002e2e <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002dcc:	f003 0301 	and.w	r3, r3, #1
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d022      	beq.n	8002e1a <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	2205      	movs	r2, #5
 8002dd8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	681a      	ldr	r2, [r3, #0]
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	f022 0201 	bic.w	r2, r2, #1
 8002dea:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002dec:	68bb      	ldr	r3, [r7, #8]
 8002dee:	3301      	adds	r3, #1
 8002df0:	60bb      	str	r3, [r7, #8]
 8002df2:	697a      	ldr	r2, [r7, #20]
 8002df4:	429a      	cmp	r2, r3
 8002df6:	d307      	bcc.n	8002e08 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	f003 0301 	and.w	r3, r3, #1
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d1f2      	bne.n	8002dec <HAL_DMA_IRQHandler+0x2cc>
 8002e06:	e000      	b.n	8002e0a <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002e08:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	2201      	movs	r2, #1
 8002e0e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	2200      	movs	r2, #0
 8002e16:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d005      	beq.n	8002e2e <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002e26:	6878      	ldr	r0, [r7, #4]
 8002e28:	4798      	blx	r3
 8002e2a:	e000      	b.n	8002e2e <HAL_DMA_IRQHandler+0x30e>
        return;
 8002e2c:	bf00      	nop
    }
  }
}
 8002e2e:	3718      	adds	r7, #24
 8002e30:	46bd      	mov	sp, r7
 8002e32:	bd80      	pop	{r7, pc}

08002e34 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002e34:	b480      	push	{r7}
 8002e36:	b085      	sub	sp, #20
 8002e38:	af00      	add	r7, sp, #0
 8002e3a:	60f8      	str	r0, [r7, #12]
 8002e3c:	60b9      	str	r1, [r7, #8]
 8002e3e:	607a      	str	r2, [r7, #4]
 8002e40:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	681a      	ldr	r2, [r3, #0]
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8002e50:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	683a      	ldr	r2, [r7, #0]
 8002e58:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	689b      	ldr	r3, [r3, #8]
 8002e5e:	2b40      	cmp	r3, #64	@ 0x40
 8002e60:	d108      	bne.n	8002e74 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	687a      	ldr	r2, [r7, #4]
 8002e68:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	68ba      	ldr	r2, [r7, #8]
 8002e70:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002e72:	e007      	b.n	8002e84 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	68ba      	ldr	r2, [r7, #8]
 8002e7a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	687a      	ldr	r2, [r7, #4]
 8002e82:	60da      	str	r2, [r3, #12]
}
 8002e84:	bf00      	nop
 8002e86:	3714      	adds	r7, #20
 8002e88:	46bd      	mov	sp, r7
 8002e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e8e:	4770      	bx	lr

08002e90 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002e90:	b480      	push	{r7}
 8002e92:	b085      	sub	sp, #20
 8002e94:	af00      	add	r7, sp, #0
 8002e96:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	b2db      	uxtb	r3, r3
 8002e9e:	3b10      	subs	r3, #16
 8002ea0:	4a14      	ldr	r2, [pc, #80]	@ (8002ef4 <DMA_CalcBaseAndBitshift+0x64>)
 8002ea2:	fba2 2303 	umull	r2, r3, r2, r3
 8002ea6:	091b      	lsrs	r3, r3, #4
 8002ea8:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002eaa:	4a13      	ldr	r2, [pc, #76]	@ (8002ef8 <DMA_CalcBaseAndBitshift+0x68>)
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	4413      	add	r3, r2
 8002eb0:	781b      	ldrb	r3, [r3, #0]
 8002eb2:	461a      	mov	r2, r3
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	2b03      	cmp	r3, #3
 8002ebc:	d909      	bls.n	8002ed2 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8002ec6:	f023 0303 	bic.w	r3, r3, #3
 8002eca:	1d1a      	adds	r2, r3, #4
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	659a      	str	r2, [r3, #88]	@ 0x58
 8002ed0:	e007      	b.n	8002ee2 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8002eda:	f023 0303 	bic.w	r3, r3, #3
 8002ede:	687a      	ldr	r2, [r7, #4]
 8002ee0:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8002ee6:	4618      	mov	r0, r3
 8002ee8:	3714      	adds	r7, #20
 8002eea:	46bd      	mov	sp, r7
 8002eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef0:	4770      	bx	lr
 8002ef2:	bf00      	nop
 8002ef4:	aaaaaaab 	.word	0xaaaaaaab
 8002ef8:	08006c5c 	.word	0x08006c5c

08002efc <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002efc:	b480      	push	{r7}
 8002efe:	b085      	sub	sp, #20
 8002f00:	af00      	add	r7, sp, #0
 8002f02:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002f04:	2300      	movs	r3, #0
 8002f06:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f0c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	699b      	ldr	r3, [r3, #24]
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d11f      	bne.n	8002f56 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002f16:	68bb      	ldr	r3, [r7, #8]
 8002f18:	2b03      	cmp	r3, #3
 8002f1a:	d856      	bhi.n	8002fca <DMA_CheckFifoParam+0xce>
 8002f1c:	a201      	add	r2, pc, #4	@ (adr r2, 8002f24 <DMA_CheckFifoParam+0x28>)
 8002f1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f22:	bf00      	nop
 8002f24:	08002f35 	.word	0x08002f35
 8002f28:	08002f47 	.word	0x08002f47
 8002f2c:	08002f35 	.word	0x08002f35
 8002f30:	08002fcb 	.word	0x08002fcb
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f38:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d046      	beq.n	8002fce <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002f40:	2301      	movs	r3, #1
 8002f42:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002f44:	e043      	b.n	8002fce <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f4a:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002f4e:	d140      	bne.n	8002fd2 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002f50:	2301      	movs	r3, #1
 8002f52:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002f54:	e03d      	b.n	8002fd2 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	699b      	ldr	r3, [r3, #24]
 8002f5a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002f5e:	d121      	bne.n	8002fa4 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002f60:	68bb      	ldr	r3, [r7, #8]
 8002f62:	2b03      	cmp	r3, #3
 8002f64:	d837      	bhi.n	8002fd6 <DMA_CheckFifoParam+0xda>
 8002f66:	a201      	add	r2, pc, #4	@ (adr r2, 8002f6c <DMA_CheckFifoParam+0x70>)
 8002f68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f6c:	08002f7d 	.word	0x08002f7d
 8002f70:	08002f83 	.word	0x08002f83
 8002f74:	08002f7d 	.word	0x08002f7d
 8002f78:	08002f95 	.word	0x08002f95
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002f7c:	2301      	movs	r3, #1
 8002f7e:	73fb      	strb	r3, [r7, #15]
      break;
 8002f80:	e030      	b.n	8002fe4 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f86:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d025      	beq.n	8002fda <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002f8e:	2301      	movs	r3, #1
 8002f90:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002f92:	e022      	b.n	8002fda <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f98:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002f9c:	d11f      	bne.n	8002fde <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002f9e:	2301      	movs	r3, #1
 8002fa0:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002fa2:	e01c      	b.n	8002fde <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002fa4:	68bb      	ldr	r3, [r7, #8]
 8002fa6:	2b02      	cmp	r3, #2
 8002fa8:	d903      	bls.n	8002fb2 <DMA_CheckFifoParam+0xb6>
 8002faa:	68bb      	ldr	r3, [r7, #8]
 8002fac:	2b03      	cmp	r3, #3
 8002fae:	d003      	beq.n	8002fb8 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002fb0:	e018      	b.n	8002fe4 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002fb2:	2301      	movs	r3, #1
 8002fb4:	73fb      	strb	r3, [r7, #15]
      break;
 8002fb6:	e015      	b.n	8002fe4 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002fbc:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d00e      	beq.n	8002fe2 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002fc4:	2301      	movs	r3, #1
 8002fc6:	73fb      	strb	r3, [r7, #15]
      break;
 8002fc8:	e00b      	b.n	8002fe2 <DMA_CheckFifoParam+0xe6>
      break;
 8002fca:	bf00      	nop
 8002fcc:	e00a      	b.n	8002fe4 <DMA_CheckFifoParam+0xe8>
      break;
 8002fce:	bf00      	nop
 8002fd0:	e008      	b.n	8002fe4 <DMA_CheckFifoParam+0xe8>
      break;
 8002fd2:	bf00      	nop
 8002fd4:	e006      	b.n	8002fe4 <DMA_CheckFifoParam+0xe8>
      break;
 8002fd6:	bf00      	nop
 8002fd8:	e004      	b.n	8002fe4 <DMA_CheckFifoParam+0xe8>
      break;
 8002fda:	bf00      	nop
 8002fdc:	e002      	b.n	8002fe4 <DMA_CheckFifoParam+0xe8>
      break;   
 8002fde:	bf00      	nop
 8002fe0:	e000      	b.n	8002fe4 <DMA_CheckFifoParam+0xe8>
      break;
 8002fe2:	bf00      	nop
    }
  } 
  
  return status; 
 8002fe4:	7bfb      	ldrb	r3, [r7, #15]
}
 8002fe6:	4618      	mov	r0, r3
 8002fe8:	3714      	adds	r7, #20
 8002fea:	46bd      	mov	sp, r7
 8002fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ff0:	4770      	bx	lr
 8002ff2:	bf00      	nop

08002ff4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002ff4:	b480      	push	{r7}
 8002ff6:	b089      	sub	sp, #36	@ 0x24
 8002ff8:	af00      	add	r7, sp, #0
 8002ffa:	6078      	str	r0, [r7, #4]
 8002ffc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002ffe:	2300      	movs	r3, #0
 8003000:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003002:	2300      	movs	r3, #0
 8003004:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003006:	2300      	movs	r3, #0
 8003008:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800300a:	2300      	movs	r3, #0
 800300c:	61fb      	str	r3, [r7, #28]
 800300e:	e16b      	b.n	80032e8 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003010:	2201      	movs	r2, #1
 8003012:	69fb      	ldr	r3, [r7, #28]
 8003014:	fa02 f303 	lsl.w	r3, r2, r3
 8003018:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800301a:	683b      	ldr	r3, [r7, #0]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	697a      	ldr	r2, [r7, #20]
 8003020:	4013      	ands	r3, r2
 8003022:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003024:	693a      	ldr	r2, [r7, #16]
 8003026:	697b      	ldr	r3, [r7, #20]
 8003028:	429a      	cmp	r2, r3
 800302a:	f040 815a 	bne.w	80032e2 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800302e:	683b      	ldr	r3, [r7, #0]
 8003030:	685b      	ldr	r3, [r3, #4]
 8003032:	f003 0303 	and.w	r3, r3, #3
 8003036:	2b01      	cmp	r3, #1
 8003038:	d005      	beq.n	8003046 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800303a:	683b      	ldr	r3, [r7, #0]
 800303c:	685b      	ldr	r3, [r3, #4]
 800303e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003042:	2b02      	cmp	r3, #2
 8003044:	d130      	bne.n	80030a8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	689b      	ldr	r3, [r3, #8]
 800304a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800304c:	69fb      	ldr	r3, [r7, #28]
 800304e:	005b      	lsls	r3, r3, #1
 8003050:	2203      	movs	r2, #3
 8003052:	fa02 f303 	lsl.w	r3, r2, r3
 8003056:	43db      	mvns	r3, r3
 8003058:	69ba      	ldr	r2, [r7, #24]
 800305a:	4013      	ands	r3, r2
 800305c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800305e:	683b      	ldr	r3, [r7, #0]
 8003060:	68da      	ldr	r2, [r3, #12]
 8003062:	69fb      	ldr	r3, [r7, #28]
 8003064:	005b      	lsls	r3, r3, #1
 8003066:	fa02 f303 	lsl.w	r3, r2, r3
 800306a:	69ba      	ldr	r2, [r7, #24]
 800306c:	4313      	orrs	r3, r2
 800306e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	69ba      	ldr	r2, [r7, #24]
 8003074:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	685b      	ldr	r3, [r3, #4]
 800307a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800307c:	2201      	movs	r2, #1
 800307e:	69fb      	ldr	r3, [r7, #28]
 8003080:	fa02 f303 	lsl.w	r3, r2, r3
 8003084:	43db      	mvns	r3, r3
 8003086:	69ba      	ldr	r2, [r7, #24]
 8003088:	4013      	ands	r3, r2
 800308a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800308c:	683b      	ldr	r3, [r7, #0]
 800308e:	685b      	ldr	r3, [r3, #4]
 8003090:	091b      	lsrs	r3, r3, #4
 8003092:	f003 0201 	and.w	r2, r3, #1
 8003096:	69fb      	ldr	r3, [r7, #28]
 8003098:	fa02 f303 	lsl.w	r3, r2, r3
 800309c:	69ba      	ldr	r2, [r7, #24]
 800309e:	4313      	orrs	r3, r2
 80030a0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	69ba      	ldr	r2, [r7, #24]
 80030a6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80030a8:	683b      	ldr	r3, [r7, #0]
 80030aa:	685b      	ldr	r3, [r3, #4]
 80030ac:	f003 0303 	and.w	r3, r3, #3
 80030b0:	2b03      	cmp	r3, #3
 80030b2:	d017      	beq.n	80030e4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	68db      	ldr	r3, [r3, #12]
 80030b8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80030ba:	69fb      	ldr	r3, [r7, #28]
 80030bc:	005b      	lsls	r3, r3, #1
 80030be:	2203      	movs	r2, #3
 80030c0:	fa02 f303 	lsl.w	r3, r2, r3
 80030c4:	43db      	mvns	r3, r3
 80030c6:	69ba      	ldr	r2, [r7, #24]
 80030c8:	4013      	ands	r3, r2
 80030ca:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80030cc:	683b      	ldr	r3, [r7, #0]
 80030ce:	689a      	ldr	r2, [r3, #8]
 80030d0:	69fb      	ldr	r3, [r7, #28]
 80030d2:	005b      	lsls	r3, r3, #1
 80030d4:	fa02 f303 	lsl.w	r3, r2, r3
 80030d8:	69ba      	ldr	r2, [r7, #24]
 80030da:	4313      	orrs	r3, r2
 80030dc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	69ba      	ldr	r2, [r7, #24]
 80030e2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80030e4:	683b      	ldr	r3, [r7, #0]
 80030e6:	685b      	ldr	r3, [r3, #4]
 80030e8:	f003 0303 	and.w	r3, r3, #3
 80030ec:	2b02      	cmp	r3, #2
 80030ee:	d123      	bne.n	8003138 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80030f0:	69fb      	ldr	r3, [r7, #28]
 80030f2:	08da      	lsrs	r2, r3, #3
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	3208      	adds	r2, #8
 80030f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80030fc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80030fe:	69fb      	ldr	r3, [r7, #28]
 8003100:	f003 0307 	and.w	r3, r3, #7
 8003104:	009b      	lsls	r3, r3, #2
 8003106:	220f      	movs	r2, #15
 8003108:	fa02 f303 	lsl.w	r3, r2, r3
 800310c:	43db      	mvns	r3, r3
 800310e:	69ba      	ldr	r2, [r7, #24]
 8003110:	4013      	ands	r3, r2
 8003112:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003114:	683b      	ldr	r3, [r7, #0]
 8003116:	691a      	ldr	r2, [r3, #16]
 8003118:	69fb      	ldr	r3, [r7, #28]
 800311a:	f003 0307 	and.w	r3, r3, #7
 800311e:	009b      	lsls	r3, r3, #2
 8003120:	fa02 f303 	lsl.w	r3, r2, r3
 8003124:	69ba      	ldr	r2, [r7, #24]
 8003126:	4313      	orrs	r3, r2
 8003128:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800312a:	69fb      	ldr	r3, [r7, #28]
 800312c:	08da      	lsrs	r2, r3, #3
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	3208      	adds	r2, #8
 8003132:	69b9      	ldr	r1, [r7, #24]
 8003134:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800313e:	69fb      	ldr	r3, [r7, #28]
 8003140:	005b      	lsls	r3, r3, #1
 8003142:	2203      	movs	r2, #3
 8003144:	fa02 f303 	lsl.w	r3, r2, r3
 8003148:	43db      	mvns	r3, r3
 800314a:	69ba      	ldr	r2, [r7, #24]
 800314c:	4013      	ands	r3, r2
 800314e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003150:	683b      	ldr	r3, [r7, #0]
 8003152:	685b      	ldr	r3, [r3, #4]
 8003154:	f003 0203 	and.w	r2, r3, #3
 8003158:	69fb      	ldr	r3, [r7, #28]
 800315a:	005b      	lsls	r3, r3, #1
 800315c:	fa02 f303 	lsl.w	r3, r2, r3
 8003160:	69ba      	ldr	r2, [r7, #24]
 8003162:	4313      	orrs	r3, r2
 8003164:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	69ba      	ldr	r2, [r7, #24]
 800316a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800316c:	683b      	ldr	r3, [r7, #0]
 800316e:	685b      	ldr	r3, [r3, #4]
 8003170:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003174:	2b00      	cmp	r3, #0
 8003176:	f000 80b4 	beq.w	80032e2 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800317a:	2300      	movs	r3, #0
 800317c:	60fb      	str	r3, [r7, #12]
 800317e:	4b60      	ldr	r3, [pc, #384]	@ (8003300 <HAL_GPIO_Init+0x30c>)
 8003180:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003182:	4a5f      	ldr	r2, [pc, #380]	@ (8003300 <HAL_GPIO_Init+0x30c>)
 8003184:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003188:	6453      	str	r3, [r2, #68]	@ 0x44
 800318a:	4b5d      	ldr	r3, [pc, #372]	@ (8003300 <HAL_GPIO_Init+0x30c>)
 800318c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800318e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003192:	60fb      	str	r3, [r7, #12]
 8003194:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003196:	4a5b      	ldr	r2, [pc, #364]	@ (8003304 <HAL_GPIO_Init+0x310>)
 8003198:	69fb      	ldr	r3, [r7, #28]
 800319a:	089b      	lsrs	r3, r3, #2
 800319c:	3302      	adds	r3, #2
 800319e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80031a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80031a4:	69fb      	ldr	r3, [r7, #28]
 80031a6:	f003 0303 	and.w	r3, r3, #3
 80031aa:	009b      	lsls	r3, r3, #2
 80031ac:	220f      	movs	r2, #15
 80031ae:	fa02 f303 	lsl.w	r3, r2, r3
 80031b2:	43db      	mvns	r3, r3
 80031b4:	69ba      	ldr	r2, [r7, #24]
 80031b6:	4013      	ands	r3, r2
 80031b8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	4a52      	ldr	r2, [pc, #328]	@ (8003308 <HAL_GPIO_Init+0x314>)
 80031be:	4293      	cmp	r3, r2
 80031c0:	d02b      	beq.n	800321a <HAL_GPIO_Init+0x226>
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	4a51      	ldr	r2, [pc, #324]	@ (800330c <HAL_GPIO_Init+0x318>)
 80031c6:	4293      	cmp	r3, r2
 80031c8:	d025      	beq.n	8003216 <HAL_GPIO_Init+0x222>
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	4a50      	ldr	r2, [pc, #320]	@ (8003310 <HAL_GPIO_Init+0x31c>)
 80031ce:	4293      	cmp	r3, r2
 80031d0:	d01f      	beq.n	8003212 <HAL_GPIO_Init+0x21e>
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	4a4f      	ldr	r2, [pc, #316]	@ (8003314 <HAL_GPIO_Init+0x320>)
 80031d6:	4293      	cmp	r3, r2
 80031d8:	d019      	beq.n	800320e <HAL_GPIO_Init+0x21a>
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	4a4e      	ldr	r2, [pc, #312]	@ (8003318 <HAL_GPIO_Init+0x324>)
 80031de:	4293      	cmp	r3, r2
 80031e0:	d013      	beq.n	800320a <HAL_GPIO_Init+0x216>
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	4a4d      	ldr	r2, [pc, #308]	@ (800331c <HAL_GPIO_Init+0x328>)
 80031e6:	4293      	cmp	r3, r2
 80031e8:	d00d      	beq.n	8003206 <HAL_GPIO_Init+0x212>
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	4a4c      	ldr	r2, [pc, #304]	@ (8003320 <HAL_GPIO_Init+0x32c>)
 80031ee:	4293      	cmp	r3, r2
 80031f0:	d007      	beq.n	8003202 <HAL_GPIO_Init+0x20e>
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	4a4b      	ldr	r2, [pc, #300]	@ (8003324 <HAL_GPIO_Init+0x330>)
 80031f6:	4293      	cmp	r3, r2
 80031f8:	d101      	bne.n	80031fe <HAL_GPIO_Init+0x20a>
 80031fa:	2307      	movs	r3, #7
 80031fc:	e00e      	b.n	800321c <HAL_GPIO_Init+0x228>
 80031fe:	2308      	movs	r3, #8
 8003200:	e00c      	b.n	800321c <HAL_GPIO_Init+0x228>
 8003202:	2306      	movs	r3, #6
 8003204:	e00a      	b.n	800321c <HAL_GPIO_Init+0x228>
 8003206:	2305      	movs	r3, #5
 8003208:	e008      	b.n	800321c <HAL_GPIO_Init+0x228>
 800320a:	2304      	movs	r3, #4
 800320c:	e006      	b.n	800321c <HAL_GPIO_Init+0x228>
 800320e:	2303      	movs	r3, #3
 8003210:	e004      	b.n	800321c <HAL_GPIO_Init+0x228>
 8003212:	2302      	movs	r3, #2
 8003214:	e002      	b.n	800321c <HAL_GPIO_Init+0x228>
 8003216:	2301      	movs	r3, #1
 8003218:	e000      	b.n	800321c <HAL_GPIO_Init+0x228>
 800321a:	2300      	movs	r3, #0
 800321c:	69fa      	ldr	r2, [r7, #28]
 800321e:	f002 0203 	and.w	r2, r2, #3
 8003222:	0092      	lsls	r2, r2, #2
 8003224:	4093      	lsls	r3, r2
 8003226:	69ba      	ldr	r2, [r7, #24]
 8003228:	4313      	orrs	r3, r2
 800322a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800322c:	4935      	ldr	r1, [pc, #212]	@ (8003304 <HAL_GPIO_Init+0x310>)
 800322e:	69fb      	ldr	r3, [r7, #28]
 8003230:	089b      	lsrs	r3, r3, #2
 8003232:	3302      	adds	r3, #2
 8003234:	69ba      	ldr	r2, [r7, #24]
 8003236:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800323a:	4b3b      	ldr	r3, [pc, #236]	@ (8003328 <HAL_GPIO_Init+0x334>)
 800323c:	689b      	ldr	r3, [r3, #8]
 800323e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003240:	693b      	ldr	r3, [r7, #16]
 8003242:	43db      	mvns	r3, r3
 8003244:	69ba      	ldr	r2, [r7, #24]
 8003246:	4013      	ands	r3, r2
 8003248:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800324a:	683b      	ldr	r3, [r7, #0]
 800324c:	685b      	ldr	r3, [r3, #4]
 800324e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003252:	2b00      	cmp	r3, #0
 8003254:	d003      	beq.n	800325e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8003256:	69ba      	ldr	r2, [r7, #24]
 8003258:	693b      	ldr	r3, [r7, #16]
 800325a:	4313      	orrs	r3, r2
 800325c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800325e:	4a32      	ldr	r2, [pc, #200]	@ (8003328 <HAL_GPIO_Init+0x334>)
 8003260:	69bb      	ldr	r3, [r7, #24]
 8003262:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003264:	4b30      	ldr	r3, [pc, #192]	@ (8003328 <HAL_GPIO_Init+0x334>)
 8003266:	68db      	ldr	r3, [r3, #12]
 8003268:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800326a:	693b      	ldr	r3, [r7, #16]
 800326c:	43db      	mvns	r3, r3
 800326e:	69ba      	ldr	r2, [r7, #24]
 8003270:	4013      	ands	r3, r2
 8003272:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003274:	683b      	ldr	r3, [r7, #0]
 8003276:	685b      	ldr	r3, [r3, #4]
 8003278:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800327c:	2b00      	cmp	r3, #0
 800327e:	d003      	beq.n	8003288 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8003280:	69ba      	ldr	r2, [r7, #24]
 8003282:	693b      	ldr	r3, [r7, #16]
 8003284:	4313      	orrs	r3, r2
 8003286:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003288:	4a27      	ldr	r2, [pc, #156]	@ (8003328 <HAL_GPIO_Init+0x334>)
 800328a:	69bb      	ldr	r3, [r7, #24]
 800328c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800328e:	4b26      	ldr	r3, [pc, #152]	@ (8003328 <HAL_GPIO_Init+0x334>)
 8003290:	685b      	ldr	r3, [r3, #4]
 8003292:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003294:	693b      	ldr	r3, [r7, #16]
 8003296:	43db      	mvns	r3, r3
 8003298:	69ba      	ldr	r2, [r7, #24]
 800329a:	4013      	ands	r3, r2
 800329c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800329e:	683b      	ldr	r3, [r7, #0]
 80032a0:	685b      	ldr	r3, [r3, #4]
 80032a2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d003      	beq.n	80032b2 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80032aa:	69ba      	ldr	r2, [r7, #24]
 80032ac:	693b      	ldr	r3, [r7, #16]
 80032ae:	4313      	orrs	r3, r2
 80032b0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80032b2:	4a1d      	ldr	r2, [pc, #116]	@ (8003328 <HAL_GPIO_Init+0x334>)
 80032b4:	69bb      	ldr	r3, [r7, #24]
 80032b6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80032b8:	4b1b      	ldr	r3, [pc, #108]	@ (8003328 <HAL_GPIO_Init+0x334>)
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80032be:	693b      	ldr	r3, [r7, #16]
 80032c0:	43db      	mvns	r3, r3
 80032c2:	69ba      	ldr	r2, [r7, #24]
 80032c4:	4013      	ands	r3, r2
 80032c6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80032c8:	683b      	ldr	r3, [r7, #0]
 80032ca:	685b      	ldr	r3, [r3, #4]
 80032cc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d003      	beq.n	80032dc <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80032d4:	69ba      	ldr	r2, [r7, #24]
 80032d6:	693b      	ldr	r3, [r7, #16]
 80032d8:	4313      	orrs	r3, r2
 80032da:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80032dc:	4a12      	ldr	r2, [pc, #72]	@ (8003328 <HAL_GPIO_Init+0x334>)
 80032de:	69bb      	ldr	r3, [r7, #24]
 80032e0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80032e2:	69fb      	ldr	r3, [r7, #28]
 80032e4:	3301      	adds	r3, #1
 80032e6:	61fb      	str	r3, [r7, #28]
 80032e8:	69fb      	ldr	r3, [r7, #28]
 80032ea:	2b0f      	cmp	r3, #15
 80032ec:	f67f ae90 	bls.w	8003010 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80032f0:	bf00      	nop
 80032f2:	bf00      	nop
 80032f4:	3724      	adds	r7, #36	@ 0x24
 80032f6:	46bd      	mov	sp, r7
 80032f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032fc:	4770      	bx	lr
 80032fe:	bf00      	nop
 8003300:	40023800 	.word	0x40023800
 8003304:	40013800 	.word	0x40013800
 8003308:	40020000 	.word	0x40020000
 800330c:	40020400 	.word	0x40020400
 8003310:	40020800 	.word	0x40020800
 8003314:	40020c00 	.word	0x40020c00
 8003318:	40021000 	.word	0x40021000
 800331c:	40021400 	.word	0x40021400
 8003320:	40021800 	.word	0x40021800
 8003324:	40021c00 	.word	0x40021c00
 8003328:	40013c00 	.word	0x40013c00

0800332c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800332c:	b580      	push	{r7, lr}
 800332e:	b086      	sub	sp, #24
 8003330:	af00      	add	r7, sp, #0
 8003332:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	2b00      	cmp	r3, #0
 8003338:	d101      	bne.n	800333e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800333a:	2301      	movs	r3, #1
 800333c:	e267      	b.n	800380e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	f003 0301 	and.w	r3, r3, #1
 8003346:	2b00      	cmp	r3, #0
 8003348:	d075      	beq.n	8003436 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800334a:	4b88      	ldr	r3, [pc, #544]	@ (800356c <HAL_RCC_OscConfig+0x240>)
 800334c:	689b      	ldr	r3, [r3, #8]
 800334e:	f003 030c 	and.w	r3, r3, #12
 8003352:	2b04      	cmp	r3, #4
 8003354:	d00c      	beq.n	8003370 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003356:	4b85      	ldr	r3, [pc, #532]	@ (800356c <HAL_RCC_OscConfig+0x240>)
 8003358:	689b      	ldr	r3, [r3, #8]
 800335a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800335e:	2b08      	cmp	r3, #8
 8003360:	d112      	bne.n	8003388 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003362:	4b82      	ldr	r3, [pc, #520]	@ (800356c <HAL_RCC_OscConfig+0x240>)
 8003364:	685b      	ldr	r3, [r3, #4]
 8003366:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800336a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800336e:	d10b      	bne.n	8003388 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003370:	4b7e      	ldr	r3, [pc, #504]	@ (800356c <HAL_RCC_OscConfig+0x240>)
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003378:	2b00      	cmp	r3, #0
 800337a:	d05b      	beq.n	8003434 <HAL_RCC_OscConfig+0x108>
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	685b      	ldr	r3, [r3, #4]
 8003380:	2b00      	cmp	r3, #0
 8003382:	d157      	bne.n	8003434 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003384:	2301      	movs	r3, #1
 8003386:	e242      	b.n	800380e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	685b      	ldr	r3, [r3, #4]
 800338c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003390:	d106      	bne.n	80033a0 <HAL_RCC_OscConfig+0x74>
 8003392:	4b76      	ldr	r3, [pc, #472]	@ (800356c <HAL_RCC_OscConfig+0x240>)
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	4a75      	ldr	r2, [pc, #468]	@ (800356c <HAL_RCC_OscConfig+0x240>)
 8003398:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800339c:	6013      	str	r3, [r2, #0]
 800339e:	e01d      	b.n	80033dc <HAL_RCC_OscConfig+0xb0>
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	685b      	ldr	r3, [r3, #4]
 80033a4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80033a8:	d10c      	bne.n	80033c4 <HAL_RCC_OscConfig+0x98>
 80033aa:	4b70      	ldr	r3, [pc, #448]	@ (800356c <HAL_RCC_OscConfig+0x240>)
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	4a6f      	ldr	r2, [pc, #444]	@ (800356c <HAL_RCC_OscConfig+0x240>)
 80033b0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80033b4:	6013      	str	r3, [r2, #0]
 80033b6:	4b6d      	ldr	r3, [pc, #436]	@ (800356c <HAL_RCC_OscConfig+0x240>)
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	4a6c      	ldr	r2, [pc, #432]	@ (800356c <HAL_RCC_OscConfig+0x240>)
 80033bc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80033c0:	6013      	str	r3, [r2, #0]
 80033c2:	e00b      	b.n	80033dc <HAL_RCC_OscConfig+0xb0>
 80033c4:	4b69      	ldr	r3, [pc, #420]	@ (800356c <HAL_RCC_OscConfig+0x240>)
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	4a68      	ldr	r2, [pc, #416]	@ (800356c <HAL_RCC_OscConfig+0x240>)
 80033ca:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80033ce:	6013      	str	r3, [r2, #0]
 80033d0:	4b66      	ldr	r3, [pc, #408]	@ (800356c <HAL_RCC_OscConfig+0x240>)
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	4a65      	ldr	r2, [pc, #404]	@ (800356c <HAL_RCC_OscConfig+0x240>)
 80033d6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80033da:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	685b      	ldr	r3, [r3, #4]
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d013      	beq.n	800340c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033e4:	f7fe fc9c 	bl	8001d20 <HAL_GetTick>
 80033e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80033ea:	e008      	b.n	80033fe <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80033ec:	f7fe fc98 	bl	8001d20 <HAL_GetTick>
 80033f0:	4602      	mov	r2, r0
 80033f2:	693b      	ldr	r3, [r7, #16]
 80033f4:	1ad3      	subs	r3, r2, r3
 80033f6:	2b64      	cmp	r3, #100	@ 0x64
 80033f8:	d901      	bls.n	80033fe <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80033fa:	2303      	movs	r3, #3
 80033fc:	e207      	b.n	800380e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80033fe:	4b5b      	ldr	r3, [pc, #364]	@ (800356c <HAL_RCC_OscConfig+0x240>)
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003406:	2b00      	cmp	r3, #0
 8003408:	d0f0      	beq.n	80033ec <HAL_RCC_OscConfig+0xc0>
 800340a:	e014      	b.n	8003436 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800340c:	f7fe fc88 	bl	8001d20 <HAL_GetTick>
 8003410:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003412:	e008      	b.n	8003426 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003414:	f7fe fc84 	bl	8001d20 <HAL_GetTick>
 8003418:	4602      	mov	r2, r0
 800341a:	693b      	ldr	r3, [r7, #16]
 800341c:	1ad3      	subs	r3, r2, r3
 800341e:	2b64      	cmp	r3, #100	@ 0x64
 8003420:	d901      	bls.n	8003426 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003422:	2303      	movs	r3, #3
 8003424:	e1f3      	b.n	800380e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003426:	4b51      	ldr	r3, [pc, #324]	@ (800356c <HAL_RCC_OscConfig+0x240>)
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800342e:	2b00      	cmp	r3, #0
 8003430:	d1f0      	bne.n	8003414 <HAL_RCC_OscConfig+0xe8>
 8003432:	e000      	b.n	8003436 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003434:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	f003 0302 	and.w	r3, r3, #2
 800343e:	2b00      	cmp	r3, #0
 8003440:	d063      	beq.n	800350a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003442:	4b4a      	ldr	r3, [pc, #296]	@ (800356c <HAL_RCC_OscConfig+0x240>)
 8003444:	689b      	ldr	r3, [r3, #8]
 8003446:	f003 030c 	and.w	r3, r3, #12
 800344a:	2b00      	cmp	r3, #0
 800344c:	d00b      	beq.n	8003466 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800344e:	4b47      	ldr	r3, [pc, #284]	@ (800356c <HAL_RCC_OscConfig+0x240>)
 8003450:	689b      	ldr	r3, [r3, #8]
 8003452:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003456:	2b08      	cmp	r3, #8
 8003458:	d11c      	bne.n	8003494 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800345a:	4b44      	ldr	r3, [pc, #272]	@ (800356c <HAL_RCC_OscConfig+0x240>)
 800345c:	685b      	ldr	r3, [r3, #4]
 800345e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003462:	2b00      	cmp	r3, #0
 8003464:	d116      	bne.n	8003494 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003466:	4b41      	ldr	r3, [pc, #260]	@ (800356c <HAL_RCC_OscConfig+0x240>)
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	f003 0302 	and.w	r3, r3, #2
 800346e:	2b00      	cmp	r3, #0
 8003470:	d005      	beq.n	800347e <HAL_RCC_OscConfig+0x152>
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	68db      	ldr	r3, [r3, #12]
 8003476:	2b01      	cmp	r3, #1
 8003478:	d001      	beq.n	800347e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800347a:	2301      	movs	r3, #1
 800347c:	e1c7      	b.n	800380e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800347e:	4b3b      	ldr	r3, [pc, #236]	@ (800356c <HAL_RCC_OscConfig+0x240>)
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	691b      	ldr	r3, [r3, #16]
 800348a:	00db      	lsls	r3, r3, #3
 800348c:	4937      	ldr	r1, [pc, #220]	@ (800356c <HAL_RCC_OscConfig+0x240>)
 800348e:	4313      	orrs	r3, r2
 8003490:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003492:	e03a      	b.n	800350a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	68db      	ldr	r3, [r3, #12]
 8003498:	2b00      	cmp	r3, #0
 800349a:	d020      	beq.n	80034de <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800349c:	4b34      	ldr	r3, [pc, #208]	@ (8003570 <HAL_RCC_OscConfig+0x244>)
 800349e:	2201      	movs	r2, #1
 80034a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034a2:	f7fe fc3d 	bl	8001d20 <HAL_GetTick>
 80034a6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80034a8:	e008      	b.n	80034bc <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80034aa:	f7fe fc39 	bl	8001d20 <HAL_GetTick>
 80034ae:	4602      	mov	r2, r0
 80034b0:	693b      	ldr	r3, [r7, #16]
 80034b2:	1ad3      	subs	r3, r2, r3
 80034b4:	2b02      	cmp	r3, #2
 80034b6:	d901      	bls.n	80034bc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80034b8:	2303      	movs	r3, #3
 80034ba:	e1a8      	b.n	800380e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80034bc:	4b2b      	ldr	r3, [pc, #172]	@ (800356c <HAL_RCC_OscConfig+0x240>)
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	f003 0302 	and.w	r3, r3, #2
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d0f0      	beq.n	80034aa <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80034c8:	4b28      	ldr	r3, [pc, #160]	@ (800356c <HAL_RCC_OscConfig+0x240>)
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	691b      	ldr	r3, [r3, #16]
 80034d4:	00db      	lsls	r3, r3, #3
 80034d6:	4925      	ldr	r1, [pc, #148]	@ (800356c <HAL_RCC_OscConfig+0x240>)
 80034d8:	4313      	orrs	r3, r2
 80034da:	600b      	str	r3, [r1, #0]
 80034dc:	e015      	b.n	800350a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80034de:	4b24      	ldr	r3, [pc, #144]	@ (8003570 <HAL_RCC_OscConfig+0x244>)
 80034e0:	2200      	movs	r2, #0
 80034e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034e4:	f7fe fc1c 	bl	8001d20 <HAL_GetTick>
 80034e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80034ea:	e008      	b.n	80034fe <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80034ec:	f7fe fc18 	bl	8001d20 <HAL_GetTick>
 80034f0:	4602      	mov	r2, r0
 80034f2:	693b      	ldr	r3, [r7, #16]
 80034f4:	1ad3      	subs	r3, r2, r3
 80034f6:	2b02      	cmp	r3, #2
 80034f8:	d901      	bls.n	80034fe <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80034fa:	2303      	movs	r3, #3
 80034fc:	e187      	b.n	800380e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80034fe:	4b1b      	ldr	r3, [pc, #108]	@ (800356c <HAL_RCC_OscConfig+0x240>)
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	f003 0302 	and.w	r3, r3, #2
 8003506:	2b00      	cmp	r3, #0
 8003508:	d1f0      	bne.n	80034ec <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	f003 0308 	and.w	r3, r3, #8
 8003512:	2b00      	cmp	r3, #0
 8003514:	d036      	beq.n	8003584 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	695b      	ldr	r3, [r3, #20]
 800351a:	2b00      	cmp	r3, #0
 800351c:	d016      	beq.n	800354c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800351e:	4b15      	ldr	r3, [pc, #84]	@ (8003574 <HAL_RCC_OscConfig+0x248>)
 8003520:	2201      	movs	r2, #1
 8003522:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003524:	f7fe fbfc 	bl	8001d20 <HAL_GetTick>
 8003528:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800352a:	e008      	b.n	800353e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800352c:	f7fe fbf8 	bl	8001d20 <HAL_GetTick>
 8003530:	4602      	mov	r2, r0
 8003532:	693b      	ldr	r3, [r7, #16]
 8003534:	1ad3      	subs	r3, r2, r3
 8003536:	2b02      	cmp	r3, #2
 8003538:	d901      	bls.n	800353e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800353a:	2303      	movs	r3, #3
 800353c:	e167      	b.n	800380e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800353e:	4b0b      	ldr	r3, [pc, #44]	@ (800356c <HAL_RCC_OscConfig+0x240>)
 8003540:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003542:	f003 0302 	and.w	r3, r3, #2
 8003546:	2b00      	cmp	r3, #0
 8003548:	d0f0      	beq.n	800352c <HAL_RCC_OscConfig+0x200>
 800354a:	e01b      	b.n	8003584 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800354c:	4b09      	ldr	r3, [pc, #36]	@ (8003574 <HAL_RCC_OscConfig+0x248>)
 800354e:	2200      	movs	r2, #0
 8003550:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003552:	f7fe fbe5 	bl	8001d20 <HAL_GetTick>
 8003556:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003558:	e00e      	b.n	8003578 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800355a:	f7fe fbe1 	bl	8001d20 <HAL_GetTick>
 800355e:	4602      	mov	r2, r0
 8003560:	693b      	ldr	r3, [r7, #16]
 8003562:	1ad3      	subs	r3, r2, r3
 8003564:	2b02      	cmp	r3, #2
 8003566:	d907      	bls.n	8003578 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003568:	2303      	movs	r3, #3
 800356a:	e150      	b.n	800380e <HAL_RCC_OscConfig+0x4e2>
 800356c:	40023800 	.word	0x40023800
 8003570:	42470000 	.word	0x42470000
 8003574:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003578:	4b88      	ldr	r3, [pc, #544]	@ (800379c <HAL_RCC_OscConfig+0x470>)
 800357a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800357c:	f003 0302 	and.w	r3, r3, #2
 8003580:	2b00      	cmp	r3, #0
 8003582:	d1ea      	bne.n	800355a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	f003 0304 	and.w	r3, r3, #4
 800358c:	2b00      	cmp	r3, #0
 800358e:	f000 8097 	beq.w	80036c0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003592:	2300      	movs	r3, #0
 8003594:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003596:	4b81      	ldr	r3, [pc, #516]	@ (800379c <HAL_RCC_OscConfig+0x470>)
 8003598:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800359a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d10f      	bne.n	80035c2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80035a2:	2300      	movs	r3, #0
 80035a4:	60bb      	str	r3, [r7, #8]
 80035a6:	4b7d      	ldr	r3, [pc, #500]	@ (800379c <HAL_RCC_OscConfig+0x470>)
 80035a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035aa:	4a7c      	ldr	r2, [pc, #496]	@ (800379c <HAL_RCC_OscConfig+0x470>)
 80035ac:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80035b0:	6413      	str	r3, [r2, #64]	@ 0x40
 80035b2:	4b7a      	ldr	r3, [pc, #488]	@ (800379c <HAL_RCC_OscConfig+0x470>)
 80035b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035b6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80035ba:	60bb      	str	r3, [r7, #8]
 80035bc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80035be:	2301      	movs	r3, #1
 80035c0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80035c2:	4b77      	ldr	r3, [pc, #476]	@ (80037a0 <HAL_RCC_OscConfig+0x474>)
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d118      	bne.n	8003600 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80035ce:	4b74      	ldr	r3, [pc, #464]	@ (80037a0 <HAL_RCC_OscConfig+0x474>)
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	4a73      	ldr	r2, [pc, #460]	@ (80037a0 <HAL_RCC_OscConfig+0x474>)
 80035d4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80035d8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80035da:	f7fe fba1 	bl	8001d20 <HAL_GetTick>
 80035de:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80035e0:	e008      	b.n	80035f4 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80035e2:	f7fe fb9d 	bl	8001d20 <HAL_GetTick>
 80035e6:	4602      	mov	r2, r0
 80035e8:	693b      	ldr	r3, [r7, #16]
 80035ea:	1ad3      	subs	r3, r2, r3
 80035ec:	2b02      	cmp	r3, #2
 80035ee:	d901      	bls.n	80035f4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80035f0:	2303      	movs	r3, #3
 80035f2:	e10c      	b.n	800380e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80035f4:	4b6a      	ldr	r3, [pc, #424]	@ (80037a0 <HAL_RCC_OscConfig+0x474>)
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d0f0      	beq.n	80035e2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	689b      	ldr	r3, [r3, #8]
 8003604:	2b01      	cmp	r3, #1
 8003606:	d106      	bne.n	8003616 <HAL_RCC_OscConfig+0x2ea>
 8003608:	4b64      	ldr	r3, [pc, #400]	@ (800379c <HAL_RCC_OscConfig+0x470>)
 800360a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800360c:	4a63      	ldr	r2, [pc, #396]	@ (800379c <HAL_RCC_OscConfig+0x470>)
 800360e:	f043 0301 	orr.w	r3, r3, #1
 8003612:	6713      	str	r3, [r2, #112]	@ 0x70
 8003614:	e01c      	b.n	8003650 <HAL_RCC_OscConfig+0x324>
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	689b      	ldr	r3, [r3, #8]
 800361a:	2b05      	cmp	r3, #5
 800361c:	d10c      	bne.n	8003638 <HAL_RCC_OscConfig+0x30c>
 800361e:	4b5f      	ldr	r3, [pc, #380]	@ (800379c <HAL_RCC_OscConfig+0x470>)
 8003620:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003622:	4a5e      	ldr	r2, [pc, #376]	@ (800379c <HAL_RCC_OscConfig+0x470>)
 8003624:	f043 0304 	orr.w	r3, r3, #4
 8003628:	6713      	str	r3, [r2, #112]	@ 0x70
 800362a:	4b5c      	ldr	r3, [pc, #368]	@ (800379c <HAL_RCC_OscConfig+0x470>)
 800362c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800362e:	4a5b      	ldr	r2, [pc, #364]	@ (800379c <HAL_RCC_OscConfig+0x470>)
 8003630:	f043 0301 	orr.w	r3, r3, #1
 8003634:	6713      	str	r3, [r2, #112]	@ 0x70
 8003636:	e00b      	b.n	8003650 <HAL_RCC_OscConfig+0x324>
 8003638:	4b58      	ldr	r3, [pc, #352]	@ (800379c <HAL_RCC_OscConfig+0x470>)
 800363a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800363c:	4a57      	ldr	r2, [pc, #348]	@ (800379c <HAL_RCC_OscConfig+0x470>)
 800363e:	f023 0301 	bic.w	r3, r3, #1
 8003642:	6713      	str	r3, [r2, #112]	@ 0x70
 8003644:	4b55      	ldr	r3, [pc, #340]	@ (800379c <HAL_RCC_OscConfig+0x470>)
 8003646:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003648:	4a54      	ldr	r2, [pc, #336]	@ (800379c <HAL_RCC_OscConfig+0x470>)
 800364a:	f023 0304 	bic.w	r3, r3, #4
 800364e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	689b      	ldr	r3, [r3, #8]
 8003654:	2b00      	cmp	r3, #0
 8003656:	d015      	beq.n	8003684 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003658:	f7fe fb62 	bl	8001d20 <HAL_GetTick>
 800365c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800365e:	e00a      	b.n	8003676 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003660:	f7fe fb5e 	bl	8001d20 <HAL_GetTick>
 8003664:	4602      	mov	r2, r0
 8003666:	693b      	ldr	r3, [r7, #16]
 8003668:	1ad3      	subs	r3, r2, r3
 800366a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800366e:	4293      	cmp	r3, r2
 8003670:	d901      	bls.n	8003676 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003672:	2303      	movs	r3, #3
 8003674:	e0cb      	b.n	800380e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003676:	4b49      	ldr	r3, [pc, #292]	@ (800379c <HAL_RCC_OscConfig+0x470>)
 8003678:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800367a:	f003 0302 	and.w	r3, r3, #2
 800367e:	2b00      	cmp	r3, #0
 8003680:	d0ee      	beq.n	8003660 <HAL_RCC_OscConfig+0x334>
 8003682:	e014      	b.n	80036ae <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003684:	f7fe fb4c 	bl	8001d20 <HAL_GetTick>
 8003688:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800368a:	e00a      	b.n	80036a2 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800368c:	f7fe fb48 	bl	8001d20 <HAL_GetTick>
 8003690:	4602      	mov	r2, r0
 8003692:	693b      	ldr	r3, [r7, #16]
 8003694:	1ad3      	subs	r3, r2, r3
 8003696:	f241 3288 	movw	r2, #5000	@ 0x1388
 800369a:	4293      	cmp	r3, r2
 800369c:	d901      	bls.n	80036a2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800369e:	2303      	movs	r3, #3
 80036a0:	e0b5      	b.n	800380e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80036a2:	4b3e      	ldr	r3, [pc, #248]	@ (800379c <HAL_RCC_OscConfig+0x470>)
 80036a4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80036a6:	f003 0302 	and.w	r3, r3, #2
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d1ee      	bne.n	800368c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80036ae:	7dfb      	ldrb	r3, [r7, #23]
 80036b0:	2b01      	cmp	r3, #1
 80036b2:	d105      	bne.n	80036c0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80036b4:	4b39      	ldr	r3, [pc, #228]	@ (800379c <HAL_RCC_OscConfig+0x470>)
 80036b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036b8:	4a38      	ldr	r2, [pc, #224]	@ (800379c <HAL_RCC_OscConfig+0x470>)
 80036ba:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80036be:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	699b      	ldr	r3, [r3, #24]
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	f000 80a1 	beq.w	800380c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80036ca:	4b34      	ldr	r3, [pc, #208]	@ (800379c <HAL_RCC_OscConfig+0x470>)
 80036cc:	689b      	ldr	r3, [r3, #8]
 80036ce:	f003 030c 	and.w	r3, r3, #12
 80036d2:	2b08      	cmp	r3, #8
 80036d4:	d05c      	beq.n	8003790 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	699b      	ldr	r3, [r3, #24]
 80036da:	2b02      	cmp	r3, #2
 80036dc:	d141      	bne.n	8003762 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80036de:	4b31      	ldr	r3, [pc, #196]	@ (80037a4 <HAL_RCC_OscConfig+0x478>)
 80036e0:	2200      	movs	r2, #0
 80036e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036e4:	f7fe fb1c 	bl	8001d20 <HAL_GetTick>
 80036e8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80036ea:	e008      	b.n	80036fe <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80036ec:	f7fe fb18 	bl	8001d20 <HAL_GetTick>
 80036f0:	4602      	mov	r2, r0
 80036f2:	693b      	ldr	r3, [r7, #16]
 80036f4:	1ad3      	subs	r3, r2, r3
 80036f6:	2b02      	cmp	r3, #2
 80036f8:	d901      	bls.n	80036fe <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80036fa:	2303      	movs	r3, #3
 80036fc:	e087      	b.n	800380e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80036fe:	4b27      	ldr	r3, [pc, #156]	@ (800379c <HAL_RCC_OscConfig+0x470>)
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003706:	2b00      	cmp	r3, #0
 8003708:	d1f0      	bne.n	80036ec <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	69da      	ldr	r2, [r3, #28]
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	6a1b      	ldr	r3, [r3, #32]
 8003712:	431a      	orrs	r2, r3
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003718:	019b      	lsls	r3, r3, #6
 800371a:	431a      	orrs	r2, r3
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003720:	085b      	lsrs	r3, r3, #1
 8003722:	3b01      	subs	r3, #1
 8003724:	041b      	lsls	r3, r3, #16
 8003726:	431a      	orrs	r2, r3
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800372c:	061b      	lsls	r3, r3, #24
 800372e:	491b      	ldr	r1, [pc, #108]	@ (800379c <HAL_RCC_OscConfig+0x470>)
 8003730:	4313      	orrs	r3, r2
 8003732:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003734:	4b1b      	ldr	r3, [pc, #108]	@ (80037a4 <HAL_RCC_OscConfig+0x478>)
 8003736:	2201      	movs	r2, #1
 8003738:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800373a:	f7fe faf1 	bl	8001d20 <HAL_GetTick>
 800373e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003740:	e008      	b.n	8003754 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003742:	f7fe faed 	bl	8001d20 <HAL_GetTick>
 8003746:	4602      	mov	r2, r0
 8003748:	693b      	ldr	r3, [r7, #16]
 800374a:	1ad3      	subs	r3, r2, r3
 800374c:	2b02      	cmp	r3, #2
 800374e:	d901      	bls.n	8003754 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003750:	2303      	movs	r3, #3
 8003752:	e05c      	b.n	800380e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003754:	4b11      	ldr	r3, [pc, #68]	@ (800379c <HAL_RCC_OscConfig+0x470>)
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800375c:	2b00      	cmp	r3, #0
 800375e:	d0f0      	beq.n	8003742 <HAL_RCC_OscConfig+0x416>
 8003760:	e054      	b.n	800380c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003762:	4b10      	ldr	r3, [pc, #64]	@ (80037a4 <HAL_RCC_OscConfig+0x478>)
 8003764:	2200      	movs	r2, #0
 8003766:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003768:	f7fe fada 	bl	8001d20 <HAL_GetTick>
 800376c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800376e:	e008      	b.n	8003782 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003770:	f7fe fad6 	bl	8001d20 <HAL_GetTick>
 8003774:	4602      	mov	r2, r0
 8003776:	693b      	ldr	r3, [r7, #16]
 8003778:	1ad3      	subs	r3, r2, r3
 800377a:	2b02      	cmp	r3, #2
 800377c:	d901      	bls.n	8003782 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800377e:	2303      	movs	r3, #3
 8003780:	e045      	b.n	800380e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003782:	4b06      	ldr	r3, [pc, #24]	@ (800379c <HAL_RCC_OscConfig+0x470>)
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800378a:	2b00      	cmp	r3, #0
 800378c:	d1f0      	bne.n	8003770 <HAL_RCC_OscConfig+0x444>
 800378e:	e03d      	b.n	800380c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	699b      	ldr	r3, [r3, #24]
 8003794:	2b01      	cmp	r3, #1
 8003796:	d107      	bne.n	80037a8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003798:	2301      	movs	r3, #1
 800379a:	e038      	b.n	800380e <HAL_RCC_OscConfig+0x4e2>
 800379c:	40023800 	.word	0x40023800
 80037a0:	40007000 	.word	0x40007000
 80037a4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80037a8:	4b1b      	ldr	r3, [pc, #108]	@ (8003818 <HAL_RCC_OscConfig+0x4ec>)
 80037aa:	685b      	ldr	r3, [r3, #4]
 80037ac:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	699b      	ldr	r3, [r3, #24]
 80037b2:	2b01      	cmp	r3, #1
 80037b4:	d028      	beq.n	8003808 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80037c0:	429a      	cmp	r2, r3
 80037c2:	d121      	bne.n	8003808 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80037ce:	429a      	cmp	r2, r3
 80037d0:	d11a      	bne.n	8003808 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80037d2:	68fa      	ldr	r2, [r7, #12]
 80037d4:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80037d8:	4013      	ands	r3, r2
 80037da:	687a      	ldr	r2, [r7, #4]
 80037dc:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80037de:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80037e0:	4293      	cmp	r3, r2
 80037e2:	d111      	bne.n	8003808 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80037ee:	085b      	lsrs	r3, r3, #1
 80037f0:	3b01      	subs	r3, #1
 80037f2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80037f4:	429a      	cmp	r2, r3
 80037f6:	d107      	bne.n	8003808 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003802:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003804:	429a      	cmp	r2, r3
 8003806:	d001      	beq.n	800380c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003808:	2301      	movs	r3, #1
 800380a:	e000      	b.n	800380e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800380c:	2300      	movs	r3, #0
}
 800380e:	4618      	mov	r0, r3
 8003810:	3718      	adds	r7, #24
 8003812:	46bd      	mov	sp, r7
 8003814:	bd80      	pop	{r7, pc}
 8003816:	bf00      	nop
 8003818:	40023800 	.word	0x40023800

0800381c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800381c:	b580      	push	{r7, lr}
 800381e:	b084      	sub	sp, #16
 8003820:	af00      	add	r7, sp, #0
 8003822:	6078      	str	r0, [r7, #4]
 8003824:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	2b00      	cmp	r3, #0
 800382a:	d101      	bne.n	8003830 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800382c:	2301      	movs	r3, #1
 800382e:	e0cc      	b.n	80039ca <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003830:	4b68      	ldr	r3, [pc, #416]	@ (80039d4 <HAL_RCC_ClockConfig+0x1b8>)
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	f003 0307 	and.w	r3, r3, #7
 8003838:	683a      	ldr	r2, [r7, #0]
 800383a:	429a      	cmp	r2, r3
 800383c:	d90c      	bls.n	8003858 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800383e:	4b65      	ldr	r3, [pc, #404]	@ (80039d4 <HAL_RCC_ClockConfig+0x1b8>)
 8003840:	683a      	ldr	r2, [r7, #0]
 8003842:	b2d2      	uxtb	r2, r2
 8003844:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003846:	4b63      	ldr	r3, [pc, #396]	@ (80039d4 <HAL_RCC_ClockConfig+0x1b8>)
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	f003 0307 	and.w	r3, r3, #7
 800384e:	683a      	ldr	r2, [r7, #0]
 8003850:	429a      	cmp	r2, r3
 8003852:	d001      	beq.n	8003858 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003854:	2301      	movs	r3, #1
 8003856:	e0b8      	b.n	80039ca <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	f003 0302 	and.w	r3, r3, #2
 8003860:	2b00      	cmp	r3, #0
 8003862:	d020      	beq.n	80038a6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	f003 0304 	and.w	r3, r3, #4
 800386c:	2b00      	cmp	r3, #0
 800386e:	d005      	beq.n	800387c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003870:	4b59      	ldr	r3, [pc, #356]	@ (80039d8 <HAL_RCC_ClockConfig+0x1bc>)
 8003872:	689b      	ldr	r3, [r3, #8]
 8003874:	4a58      	ldr	r2, [pc, #352]	@ (80039d8 <HAL_RCC_ClockConfig+0x1bc>)
 8003876:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800387a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	f003 0308 	and.w	r3, r3, #8
 8003884:	2b00      	cmp	r3, #0
 8003886:	d005      	beq.n	8003894 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003888:	4b53      	ldr	r3, [pc, #332]	@ (80039d8 <HAL_RCC_ClockConfig+0x1bc>)
 800388a:	689b      	ldr	r3, [r3, #8]
 800388c:	4a52      	ldr	r2, [pc, #328]	@ (80039d8 <HAL_RCC_ClockConfig+0x1bc>)
 800388e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8003892:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003894:	4b50      	ldr	r3, [pc, #320]	@ (80039d8 <HAL_RCC_ClockConfig+0x1bc>)
 8003896:	689b      	ldr	r3, [r3, #8]
 8003898:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	689b      	ldr	r3, [r3, #8]
 80038a0:	494d      	ldr	r1, [pc, #308]	@ (80039d8 <HAL_RCC_ClockConfig+0x1bc>)
 80038a2:	4313      	orrs	r3, r2
 80038a4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	f003 0301 	and.w	r3, r3, #1
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d044      	beq.n	800393c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	685b      	ldr	r3, [r3, #4]
 80038b6:	2b01      	cmp	r3, #1
 80038b8:	d107      	bne.n	80038ca <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80038ba:	4b47      	ldr	r3, [pc, #284]	@ (80039d8 <HAL_RCC_ClockConfig+0x1bc>)
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d119      	bne.n	80038fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80038c6:	2301      	movs	r3, #1
 80038c8:	e07f      	b.n	80039ca <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	685b      	ldr	r3, [r3, #4]
 80038ce:	2b02      	cmp	r3, #2
 80038d0:	d003      	beq.n	80038da <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80038d6:	2b03      	cmp	r3, #3
 80038d8:	d107      	bne.n	80038ea <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80038da:	4b3f      	ldr	r3, [pc, #252]	@ (80039d8 <HAL_RCC_ClockConfig+0x1bc>)
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d109      	bne.n	80038fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80038e6:	2301      	movs	r3, #1
 80038e8:	e06f      	b.n	80039ca <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80038ea:	4b3b      	ldr	r3, [pc, #236]	@ (80039d8 <HAL_RCC_ClockConfig+0x1bc>)
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	f003 0302 	and.w	r3, r3, #2
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d101      	bne.n	80038fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80038f6:	2301      	movs	r3, #1
 80038f8:	e067      	b.n	80039ca <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80038fa:	4b37      	ldr	r3, [pc, #220]	@ (80039d8 <HAL_RCC_ClockConfig+0x1bc>)
 80038fc:	689b      	ldr	r3, [r3, #8]
 80038fe:	f023 0203 	bic.w	r2, r3, #3
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	685b      	ldr	r3, [r3, #4]
 8003906:	4934      	ldr	r1, [pc, #208]	@ (80039d8 <HAL_RCC_ClockConfig+0x1bc>)
 8003908:	4313      	orrs	r3, r2
 800390a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800390c:	f7fe fa08 	bl	8001d20 <HAL_GetTick>
 8003910:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003912:	e00a      	b.n	800392a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003914:	f7fe fa04 	bl	8001d20 <HAL_GetTick>
 8003918:	4602      	mov	r2, r0
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	1ad3      	subs	r3, r2, r3
 800391e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003922:	4293      	cmp	r3, r2
 8003924:	d901      	bls.n	800392a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003926:	2303      	movs	r3, #3
 8003928:	e04f      	b.n	80039ca <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800392a:	4b2b      	ldr	r3, [pc, #172]	@ (80039d8 <HAL_RCC_ClockConfig+0x1bc>)
 800392c:	689b      	ldr	r3, [r3, #8]
 800392e:	f003 020c 	and.w	r2, r3, #12
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	685b      	ldr	r3, [r3, #4]
 8003936:	009b      	lsls	r3, r3, #2
 8003938:	429a      	cmp	r2, r3
 800393a:	d1eb      	bne.n	8003914 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800393c:	4b25      	ldr	r3, [pc, #148]	@ (80039d4 <HAL_RCC_ClockConfig+0x1b8>)
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	f003 0307 	and.w	r3, r3, #7
 8003944:	683a      	ldr	r2, [r7, #0]
 8003946:	429a      	cmp	r2, r3
 8003948:	d20c      	bcs.n	8003964 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800394a:	4b22      	ldr	r3, [pc, #136]	@ (80039d4 <HAL_RCC_ClockConfig+0x1b8>)
 800394c:	683a      	ldr	r2, [r7, #0]
 800394e:	b2d2      	uxtb	r2, r2
 8003950:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003952:	4b20      	ldr	r3, [pc, #128]	@ (80039d4 <HAL_RCC_ClockConfig+0x1b8>)
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	f003 0307 	and.w	r3, r3, #7
 800395a:	683a      	ldr	r2, [r7, #0]
 800395c:	429a      	cmp	r2, r3
 800395e:	d001      	beq.n	8003964 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003960:	2301      	movs	r3, #1
 8003962:	e032      	b.n	80039ca <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	f003 0304 	and.w	r3, r3, #4
 800396c:	2b00      	cmp	r3, #0
 800396e:	d008      	beq.n	8003982 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003970:	4b19      	ldr	r3, [pc, #100]	@ (80039d8 <HAL_RCC_ClockConfig+0x1bc>)
 8003972:	689b      	ldr	r3, [r3, #8]
 8003974:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	68db      	ldr	r3, [r3, #12]
 800397c:	4916      	ldr	r1, [pc, #88]	@ (80039d8 <HAL_RCC_ClockConfig+0x1bc>)
 800397e:	4313      	orrs	r3, r2
 8003980:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	f003 0308 	and.w	r3, r3, #8
 800398a:	2b00      	cmp	r3, #0
 800398c:	d009      	beq.n	80039a2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800398e:	4b12      	ldr	r3, [pc, #72]	@ (80039d8 <HAL_RCC_ClockConfig+0x1bc>)
 8003990:	689b      	ldr	r3, [r3, #8]
 8003992:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	691b      	ldr	r3, [r3, #16]
 800399a:	00db      	lsls	r3, r3, #3
 800399c:	490e      	ldr	r1, [pc, #56]	@ (80039d8 <HAL_RCC_ClockConfig+0x1bc>)
 800399e:	4313      	orrs	r3, r2
 80039a0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80039a2:	f000 f821 	bl	80039e8 <HAL_RCC_GetSysClockFreq>
 80039a6:	4602      	mov	r2, r0
 80039a8:	4b0b      	ldr	r3, [pc, #44]	@ (80039d8 <HAL_RCC_ClockConfig+0x1bc>)
 80039aa:	689b      	ldr	r3, [r3, #8]
 80039ac:	091b      	lsrs	r3, r3, #4
 80039ae:	f003 030f 	and.w	r3, r3, #15
 80039b2:	490a      	ldr	r1, [pc, #40]	@ (80039dc <HAL_RCC_ClockConfig+0x1c0>)
 80039b4:	5ccb      	ldrb	r3, [r1, r3]
 80039b6:	fa22 f303 	lsr.w	r3, r2, r3
 80039ba:	4a09      	ldr	r2, [pc, #36]	@ (80039e0 <HAL_RCC_ClockConfig+0x1c4>)
 80039bc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80039be:	4b09      	ldr	r3, [pc, #36]	@ (80039e4 <HAL_RCC_ClockConfig+0x1c8>)
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	4618      	mov	r0, r3
 80039c4:	f7fe f968 	bl	8001c98 <HAL_InitTick>

  return HAL_OK;
 80039c8:	2300      	movs	r3, #0
}
 80039ca:	4618      	mov	r0, r3
 80039cc:	3710      	adds	r7, #16
 80039ce:	46bd      	mov	sp, r7
 80039d0:	bd80      	pop	{r7, pc}
 80039d2:	bf00      	nop
 80039d4:	40023c00 	.word	0x40023c00
 80039d8:	40023800 	.word	0x40023800
 80039dc:	08006c44 	.word	0x08006c44
 80039e0:	20000018 	.word	0x20000018
 80039e4:	2000001c 	.word	0x2000001c

080039e8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80039e8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80039ec:	b090      	sub	sp, #64	@ 0x40
 80039ee:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80039f0:	2300      	movs	r3, #0
 80039f2:	637b      	str	r3, [r7, #52]	@ 0x34
 80039f4:	2300      	movs	r3, #0
 80039f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80039f8:	2300      	movs	r3, #0
 80039fa:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 80039fc:	2300      	movs	r3, #0
 80039fe:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003a00:	4b59      	ldr	r3, [pc, #356]	@ (8003b68 <HAL_RCC_GetSysClockFreq+0x180>)
 8003a02:	689b      	ldr	r3, [r3, #8]
 8003a04:	f003 030c 	and.w	r3, r3, #12
 8003a08:	2b08      	cmp	r3, #8
 8003a0a:	d00d      	beq.n	8003a28 <HAL_RCC_GetSysClockFreq+0x40>
 8003a0c:	2b08      	cmp	r3, #8
 8003a0e:	f200 80a1 	bhi.w	8003b54 <HAL_RCC_GetSysClockFreq+0x16c>
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d002      	beq.n	8003a1c <HAL_RCC_GetSysClockFreq+0x34>
 8003a16:	2b04      	cmp	r3, #4
 8003a18:	d003      	beq.n	8003a22 <HAL_RCC_GetSysClockFreq+0x3a>
 8003a1a:	e09b      	b.n	8003b54 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003a1c:	4b53      	ldr	r3, [pc, #332]	@ (8003b6c <HAL_RCC_GetSysClockFreq+0x184>)
 8003a1e:	63bb      	str	r3, [r7, #56]	@ 0x38
       break;
 8003a20:	e09b      	b.n	8003b5a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003a22:	4b53      	ldr	r3, [pc, #332]	@ (8003b70 <HAL_RCC_GetSysClockFreq+0x188>)
 8003a24:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003a26:	e098      	b.n	8003b5a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003a28:	4b4f      	ldr	r3, [pc, #316]	@ (8003b68 <HAL_RCC_GetSysClockFreq+0x180>)
 8003a2a:	685b      	ldr	r3, [r3, #4]
 8003a2c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003a30:	637b      	str	r3, [r7, #52]	@ 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003a32:	4b4d      	ldr	r3, [pc, #308]	@ (8003b68 <HAL_RCC_GetSysClockFreq+0x180>)
 8003a34:	685b      	ldr	r3, [r3, #4]
 8003a36:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d028      	beq.n	8003a90 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003a3e:	4b4a      	ldr	r3, [pc, #296]	@ (8003b68 <HAL_RCC_GetSysClockFreq+0x180>)
 8003a40:	685b      	ldr	r3, [r3, #4]
 8003a42:	099b      	lsrs	r3, r3, #6
 8003a44:	2200      	movs	r2, #0
 8003a46:	623b      	str	r3, [r7, #32]
 8003a48:	627a      	str	r2, [r7, #36]	@ 0x24
 8003a4a:	6a3b      	ldr	r3, [r7, #32]
 8003a4c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8003a50:	2100      	movs	r1, #0
 8003a52:	4b47      	ldr	r3, [pc, #284]	@ (8003b70 <HAL_RCC_GetSysClockFreq+0x188>)
 8003a54:	fb03 f201 	mul.w	r2, r3, r1
 8003a58:	2300      	movs	r3, #0
 8003a5a:	fb00 f303 	mul.w	r3, r0, r3
 8003a5e:	4413      	add	r3, r2
 8003a60:	4a43      	ldr	r2, [pc, #268]	@ (8003b70 <HAL_RCC_GetSysClockFreq+0x188>)
 8003a62:	fba0 1202 	umull	r1, r2, r0, r2
 8003a66:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003a68:	460a      	mov	r2, r1
 8003a6a:	62ba      	str	r2, [r7, #40]	@ 0x28
 8003a6c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003a6e:	4413      	add	r3, r2
 8003a70:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003a72:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003a74:	2200      	movs	r2, #0
 8003a76:	61bb      	str	r3, [r7, #24]
 8003a78:	61fa      	str	r2, [r7, #28]
 8003a7a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003a7e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8003a82:	f7fd f893 	bl	8000bac <__aeabi_uldivmod>
 8003a86:	4602      	mov	r2, r0
 8003a88:	460b      	mov	r3, r1
 8003a8a:	4613      	mov	r3, r2
 8003a8c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003a8e:	e053      	b.n	8003b38 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003a90:	4b35      	ldr	r3, [pc, #212]	@ (8003b68 <HAL_RCC_GetSysClockFreq+0x180>)
 8003a92:	685b      	ldr	r3, [r3, #4]
 8003a94:	099b      	lsrs	r3, r3, #6
 8003a96:	2200      	movs	r2, #0
 8003a98:	613b      	str	r3, [r7, #16]
 8003a9a:	617a      	str	r2, [r7, #20]
 8003a9c:	693b      	ldr	r3, [r7, #16]
 8003a9e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8003aa2:	f04f 0b00 	mov.w	fp, #0
 8003aa6:	4652      	mov	r2, sl
 8003aa8:	465b      	mov	r3, fp
 8003aaa:	f04f 0000 	mov.w	r0, #0
 8003aae:	f04f 0100 	mov.w	r1, #0
 8003ab2:	0159      	lsls	r1, r3, #5
 8003ab4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003ab8:	0150      	lsls	r0, r2, #5
 8003aba:	4602      	mov	r2, r0
 8003abc:	460b      	mov	r3, r1
 8003abe:	ebb2 080a 	subs.w	r8, r2, sl
 8003ac2:	eb63 090b 	sbc.w	r9, r3, fp
 8003ac6:	f04f 0200 	mov.w	r2, #0
 8003aca:	f04f 0300 	mov.w	r3, #0
 8003ace:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8003ad2:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8003ad6:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8003ada:	ebb2 0408 	subs.w	r4, r2, r8
 8003ade:	eb63 0509 	sbc.w	r5, r3, r9
 8003ae2:	f04f 0200 	mov.w	r2, #0
 8003ae6:	f04f 0300 	mov.w	r3, #0
 8003aea:	00eb      	lsls	r3, r5, #3
 8003aec:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003af0:	00e2      	lsls	r2, r4, #3
 8003af2:	4614      	mov	r4, r2
 8003af4:	461d      	mov	r5, r3
 8003af6:	eb14 030a 	adds.w	r3, r4, sl
 8003afa:	603b      	str	r3, [r7, #0]
 8003afc:	eb45 030b 	adc.w	r3, r5, fp
 8003b00:	607b      	str	r3, [r7, #4]
 8003b02:	f04f 0200 	mov.w	r2, #0
 8003b06:	f04f 0300 	mov.w	r3, #0
 8003b0a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003b0e:	4629      	mov	r1, r5
 8003b10:	028b      	lsls	r3, r1, #10
 8003b12:	4621      	mov	r1, r4
 8003b14:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003b18:	4621      	mov	r1, r4
 8003b1a:	028a      	lsls	r2, r1, #10
 8003b1c:	4610      	mov	r0, r2
 8003b1e:	4619      	mov	r1, r3
 8003b20:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003b22:	2200      	movs	r2, #0
 8003b24:	60bb      	str	r3, [r7, #8]
 8003b26:	60fa      	str	r2, [r7, #12]
 8003b28:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003b2c:	f7fd f83e 	bl	8000bac <__aeabi_uldivmod>
 8003b30:	4602      	mov	r2, r0
 8003b32:	460b      	mov	r3, r1
 8003b34:	4613      	mov	r3, r2
 8003b36:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003b38:	4b0b      	ldr	r3, [pc, #44]	@ (8003b68 <HAL_RCC_GetSysClockFreq+0x180>)
 8003b3a:	685b      	ldr	r3, [r3, #4]
 8003b3c:	0c1b      	lsrs	r3, r3, #16
 8003b3e:	f003 0303 	and.w	r3, r3, #3
 8003b42:	3301      	adds	r3, #1
 8003b44:	005b      	lsls	r3, r3, #1
 8003b46:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco/pllp;
 8003b48:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8003b4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b4c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b50:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003b52:	e002      	b.n	8003b5a <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003b54:	4b05      	ldr	r3, [pc, #20]	@ (8003b6c <HAL_RCC_GetSysClockFreq+0x184>)
 8003b56:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003b58:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003b5a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8003b5c:	4618      	mov	r0, r3
 8003b5e:	3740      	adds	r7, #64	@ 0x40
 8003b60:	46bd      	mov	sp, r7
 8003b62:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003b66:	bf00      	nop
 8003b68:	40023800 	.word	0x40023800
 8003b6c:	00f42400 	.word	0x00f42400
 8003b70:	017d7840 	.word	0x017d7840

08003b74 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003b74:	b480      	push	{r7}
 8003b76:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003b78:	4b03      	ldr	r3, [pc, #12]	@ (8003b88 <HAL_RCC_GetHCLKFreq+0x14>)
 8003b7a:	681b      	ldr	r3, [r3, #0]
}
 8003b7c:	4618      	mov	r0, r3
 8003b7e:	46bd      	mov	sp, r7
 8003b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b84:	4770      	bx	lr
 8003b86:	bf00      	nop
 8003b88:	20000018 	.word	0x20000018

08003b8c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003b8c:	b580      	push	{r7, lr}
 8003b8e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003b90:	f7ff fff0 	bl	8003b74 <HAL_RCC_GetHCLKFreq>
 8003b94:	4602      	mov	r2, r0
 8003b96:	4b05      	ldr	r3, [pc, #20]	@ (8003bac <HAL_RCC_GetPCLK1Freq+0x20>)
 8003b98:	689b      	ldr	r3, [r3, #8]
 8003b9a:	0a9b      	lsrs	r3, r3, #10
 8003b9c:	f003 0307 	and.w	r3, r3, #7
 8003ba0:	4903      	ldr	r1, [pc, #12]	@ (8003bb0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003ba2:	5ccb      	ldrb	r3, [r1, r3]
 8003ba4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003ba8:	4618      	mov	r0, r3
 8003baa:	bd80      	pop	{r7, pc}
 8003bac:	40023800 	.word	0x40023800
 8003bb0:	08006c54 	.word	0x08006c54

08003bb4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003bb4:	b580      	push	{r7, lr}
 8003bb6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003bb8:	f7ff ffdc 	bl	8003b74 <HAL_RCC_GetHCLKFreq>
 8003bbc:	4602      	mov	r2, r0
 8003bbe:	4b05      	ldr	r3, [pc, #20]	@ (8003bd4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003bc0:	689b      	ldr	r3, [r3, #8]
 8003bc2:	0b5b      	lsrs	r3, r3, #13
 8003bc4:	f003 0307 	and.w	r3, r3, #7
 8003bc8:	4903      	ldr	r1, [pc, #12]	@ (8003bd8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003bca:	5ccb      	ldrb	r3, [r1, r3]
 8003bcc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003bd0:	4618      	mov	r0, r3
 8003bd2:	bd80      	pop	{r7, pc}
 8003bd4:	40023800 	.word	0x40023800
 8003bd8:	08006c54 	.word	0x08006c54

08003bdc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003bdc:	b580      	push	{r7, lr}
 8003bde:	b082      	sub	sp, #8
 8003be0:	af00      	add	r7, sp, #0
 8003be2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d101      	bne.n	8003bee <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003bea:	2301      	movs	r3, #1
 8003bec:	e041      	b.n	8003c72 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003bf4:	b2db      	uxtb	r3, r3
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d106      	bne.n	8003c08 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	2200      	movs	r2, #0
 8003bfe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003c02:	6878      	ldr	r0, [r7, #4]
 8003c04:	f7fd fea8 	bl	8001958 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	2202      	movs	r2, #2
 8003c0c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681a      	ldr	r2, [r3, #0]
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	3304      	adds	r3, #4
 8003c18:	4619      	mov	r1, r3
 8003c1a:	4610      	mov	r0, r2
 8003c1c:	f000 f95e 	bl	8003edc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	2201      	movs	r2, #1
 8003c24:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	2201      	movs	r2, #1
 8003c2c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	2201      	movs	r2, #1
 8003c34:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	2201      	movs	r2, #1
 8003c3c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	2201      	movs	r2, #1
 8003c44:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	2201      	movs	r2, #1
 8003c4c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	2201      	movs	r2, #1
 8003c54:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	2201      	movs	r2, #1
 8003c5c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	2201      	movs	r2, #1
 8003c64:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	2201      	movs	r2, #1
 8003c6c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003c70:	2300      	movs	r3, #0
}
 8003c72:	4618      	mov	r0, r3
 8003c74:	3708      	adds	r7, #8
 8003c76:	46bd      	mov	sp, r7
 8003c78:	bd80      	pop	{r7, pc}
	...

08003c7c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8003c7c:	b480      	push	{r7}
 8003c7e:	b085      	sub	sp, #20
 8003c80:	af00      	add	r7, sp, #0
 8003c82:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003c8a:	b2db      	uxtb	r3, r3
 8003c8c:	2b01      	cmp	r3, #1
 8003c8e:	d001      	beq.n	8003c94 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8003c90:	2301      	movs	r3, #1
 8003c92:	e046      	b.n	8003d22 <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	2202      	movs	r2, #2
 8003c98:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	4a23      	ldr	r2, [pc, #140]	@ (8003d30 <HAL_TIM_Base_Start+0xb4>)
 8003ca2:	4293      	cmp	r3, r2
 8003ca4:	d022      	beq.n	8003cec <HAL_TIM_Base_Start+0x70>
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003cae:	d01d      	beq.n	8003cec <HAL_TIM_Base_Start+0x70>
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	4a1f      	ldr	r2, [pc, #124]	@ (8003d34 <HAL_TIM_Base_Start+0xb8>)
 8003cb6:	4293      	cmp	r3, r2
 8003cb8:	d018      	beq.n	8003cec <HAL_TIM_Base_Start+0x70>
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	4a1e      	ldr	r2, [pc, #120]	@ (8003d38 <HAL_TIM_Base_Start+0xbc>)
 8003cc0:	4293      	cmp	r3, r2
 8003cc2:	d013      	beq.n	8003cec <HAL_TIM_Base_Start+0x70>
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	4a1c      	ldr	r2, [pc, #112]	@ (8003d3c <HAL_TIM_Base_Start+0xc0>)
 8003cca:	4293      	cmp	r3, r2
 8003ccc:	d00e      	beq.n	8003cec <HAL_TIM_Base_Start+0x70>
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	4a1b      	ldr	r2, [pc, #108]	@ (8003d40 <HAL_TIM_Base_Start+0xc4>)
 8003cd4:	4293      	cmp	r3, r2
 8003cd6:	d009      	beq.n	8003cec <HAL_TIM_Base_Start+0x70>
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	4a19      	ldr	r2, [pc, #100]	@ (8003d44 <HAL_TIM_Base_Start+0xc8>)
 8003cde:	4293      	cmp	r3, r2
 8003ce0:	d004      	beq.n	8003cec <HAL_TIM_Base_Start+0x70>
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	4a18      	ldr	r2, [pc, #96]	@ (8003d48 <HAL_TIM_Base_Start+0xcc>)
 8003ce8:	4293      	cmp	r3, r2
 8003cea:	d111      	bne.n	8003d10 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	689b      	ldr	r3, [r3, #8]
 8003cf2:	f003 0307 	and.w	r3, r3, #7
 8003cf6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	2b06      	cmp	r3, #6
 8003cfc:	d010      	beq.n	8003d20 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	681a      	ldr	r2, [r3, #0]
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	f042 0201 	orr.w	r2, r2, #1
 8003d0c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003d0e:	e007      	b.n	8003d20 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	681a      	ldr	r2, [r3, #0]
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	f042 0201 	orr.w	r2, r2, #1
 8003d1e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003d20:	2300      	movs	r3, #0
}
 8003d22:	4618      	mov	r0, r3
 8003d24:	3714      	adds	r7, #20
 8003d26:	46bd      	mov	sp, r7
 8003d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d2c:	4770      	bx	lr
 8003d2e:	bf00      	nop
 8003d30:	40010000 	.word	0x40010000
 8003d34:	40000400 	.word	0x40000400
 8003d38:	40000800 	.word	0x40000800
 8003d3c:	40000c00 	.word	0x40000c00
 8003d40:	40010400 	.word	0x40010400
 8003d44:	40014000 	.word	0x40014000
 8003d48:	40001800 	.word	0x40001800

08003d4c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003d4c:	b580      	push	{r7, lr}
 8003d4e:	b084      	sub	sp, #16
 8003d50:	af00      	add	r7, sp, #0
 8003d52:	6078      	str	r0, [r7, #4]
 8003d54:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003d56:	2300      	movs	r3, #0
 8003d58:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003d60:	2b01      	cmp	r3, #1
 8003d62:	d101      	bne.n	8003d68 <HAL_TIM_ConfigClockSource+0x1c>
 8003d64:	2302      	movs	r3, #2
 8003d66:	e0b4      	b.n	8003ed2 <HAL_TIM_ConfigClockSource+0x186>
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	2201      	movs	r2, #1
 8003d6c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	2202      	movs	r2, #2
 8003d74:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	689b      	ldr	r3, [r3, #8]
 8003d7e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003d80:	68bb      	ldr	r3, [r7, #8]
 8003d82:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8003d86:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003d88:	68bb      	ldr	r3, [r7, #8]
 8003d8a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003d8e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	68ba      	ldr	r2, [r7, #8]
 8003d96:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003d98:	683b      	ldr	r3, [r7, #0]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003da0:	d03e      	beq.n	8003e20 <HAL_TIM_ConfigClockSource+0xd4>
 8003da2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003da6:	f200 8087 	bhi.w	8003eb8 <HAL_TIM_ConfigClockSource+0x16c>
 8003daa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003dae:	f000 8086 	beq.w	8003ebe <HAL_TIM_ConfigClockSource+0x172>
 8003db2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003db6:	d87f      	bhi.n	8003eb8 <HAL_TIM_ConfigClockSource+0x16c>
 8003db8:	2b70      	cmp	r3, #112	@ 0x70
 8003dba:	d01a      	beq.n	8003df2 <HAL_TIM_ConfigClockSource+0xa6>
 8003dbc:	2b70      	cmp	r3, #112	@ 0x70
 8003dbe:	d87b      	bhi.n	8003eb8 <HAL_TIM_ConfigClockSource+0x16c>
 8003dc0:	2b60      	cmp	r3, #96	@ 0x60
 8003dc2:	d050      	beq.n	8003e66 <HAL_TIM_ConfigClockSource+0x11a>
 8003dc4:	2b60      	cmp	r3, #96	@ 0x60
 8003dc6:	d877      	bhi.n	8003eb8 <HAL_TIM_ConfigClockSource+0x16c>
 8003dc8:	2b50      	cmp	r3, #80	@ 0x50
 8003dca:	d03c      	beq.n	8003e46 <HAL_TIM_ConfigClockSource+0xfa>
 8003dcc:	2b50      	cmp	r3, #80	@ 0x50
 8003dce:	d873      	bhi.n	8003eb8 <HAL_TIM_ConfigClockSource+0x16c>
 8003dd0:	2b40      	cmp	r3, #64	@ 0x40
 8003dd2:	d058      	beq.n	8003e86 <HAL_TIM_ConfigClockSource+0x13a>
 8003dd4:	2b40      	cmp	r3, #64	@ 0x40
 8003dd6:	d86f      	bhi.n	8003eb8 <HAL_TIM_ConfigClockSource+0x16c>
 8003dd8:	2b30      	cmp	r3, #48	@ 0x30
 8003dda:	d064      	beq.n	8003ea6 <HAL_TIM_ConfigClockSource+0x15a>
 8003ddc:	2b30      	cmp	r3, #48	@ 0x30
 8003dde:	d86b      	bhi.n	8003eb8 <HAL_TIM_ConfigClockSource+0x16c>
 8003de0:	2b20      	cmp	r3, #32
 8003de2:	d060      	beq.n	8003ea6 <HAL_TIM_ConfigClockSource+0x15a>
 8003de4:	2b20      	cmp	r3, #32
 8003de6:	d867      	bhi.n	8003eb8 <HAL_TIM_ConfigClockSource+0x16c>
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d05c      	beq.n	8003ea6 <HAL_TIM_ConfigClockSource+0x15a>
 8003dec:	2b10      	cmp	r3, #16
 8003dee:	d05a      	beq.n	8003ea6 <HAL_TIM_ConfigClockSource+0x15a>
 8003df0:	e062      	b.n	8003eb8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	6818      	ldr	r0, [r3, #0]
 8003df6:	683b      	ldr	r3, [r7, #0]
 8003df8:	6899      	ldr	r1, [r3, #8]
 8003dfa:	683b      	ldr	r3, [r7, #0]
 8003dfc:	685a      	ldr	r2, [r3, #4]
 8003dfe:	683b      	ldr	r3, [r7, #0]
 8003e00:	68db      	ldr	r3, [r3, #12]
 8003e02:	f000 f985 	bl	8004110 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	689b      	ldr	r3, [r3, #8]
 8003e0c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003e0e:	68bb      	ldr	r3, [r7, #8]
 8003e10:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8003e14:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	68ba      	ldr	r2, [r7, #8]
 8003e1c:	609a      	str	r2, [r3, #8]
      break;
 8003e1e:	e04f      	b.n	8003ec0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	6818      	ldr	r0, [r3, #0]
 8003e24:	683b      	ldr	r3, [r7, #0]
 8003e26:	6899      	ldr	r1, [r3, #8]
 8003e28:	683b      	ldr	r3, [r7, #0]
 8003e2a:	685a      	ldr	r2, [r3, #4]
 8003e2c:	683b      	ldr	r3, [r7, #0]
 8003e2e:	68db      	ldr	r3, [r3, #12]
 8003e30:	f000 f96e 	bl	8004110 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	689a      	ldr	r2, [r3, #8]
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003e42:	609a      	str	r2, [r3, #8]
      break;
 8003e44:	e03c      	b.n	8003ec0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	6818      	ldr	r0, [r3, #0]
 8003e4a:	683b      	ldr	r3, [r7, #0]
 8003e4c:	6859      	ldr	r1, [r3, #4]
 8003e4e:	683b      	ldr	r3, [r7, #0]
 8003e50:	68db      	ldr	r3, [r3, #12]
 8003e52:	461a      	mov	r2, r3
 8003e54:	f000 f8e2 	bl	800401c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	2150      	movs	r1, #80	@ 0x50
 8003e5e:	4618      	mov	r0, r3
 8003e60:	f000 f93b 	bl	80040da <TIM_ITRx_SetConfig>
      break;
 8003e64:	e02c      	b.n	8003ec0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	6818      	ldr	r0, [r3, #0]
 8003e6a:	683b      	ldr	r3, [r7, #0]
 8003e6c:	6859      	ldr	r1, [r3, #4]
 8003e6e:	683b      	ldr	r3, [r7, #0]
 8003e70:	68db      	ldr	r3, [r3, #12]
 8003e72:	461a      	mov	r2, r3
 8003e74:	f000 f901 	bl	800407a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	2160      	movs	r1, #96	@ 0x60
 8003e7e:	4618      	mov	r0, r3
 8003e80:	f000 f92b 	bl	80040da <TIM_ITRx_SetConfig>
      break;
 8003e84:	e01c      	b.n	8003ec0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	6818      	ldr	r0, [r3, #0]
 8003e8a:	683b      	ldr	r3, [r7, #0]
 8003e8c:	6859      	ldr	r1, [r3, #4]
 8003e8e:	683b      	ldr	r3, [r7, #0]
 8003e90:	68db      	ldr	r3, [r3, #12]
 8003e92:	461a      	mov	r2, r3
 8003e94:	f000 f8c2 	bl	800401c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	2140      	movs	r1, #64	@ 0x40
 8003e9e:	4618      	mov	r0, r3
 8003ea0:	f000 f91b 	bl	80040da <TIM_ITRx_SetConfig>
      break;
 8003ea4:	e00c      	b.n	8003ec0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681a      	ldr	r2, [r3, #0]
 8003eaa:	683b      	ldr	r3, [r7, #0]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	4619      	mov	r1, r3
 8003eb0:	4610      	mov	r0, r2
 8003eb2:	f000 f912 	bl	80040da <TIM_ITRx_SetConfig>
      break;
 8003eb6:	e003      	b.n	8003ec0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003eb8:	2301      	movs	r3, #1
 8003eba:	73fb      	strb	r3, [r7, #15]
      break;
 8003ebc:	e000      	b.n	8003ec0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003ebe:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	2201      	movs	r2, #1
 8003ec4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	2200      	movs	r2, #0
 8003ecc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003ed0:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ed2:	4618      	mov	r0, r3
 8003ed4:	3710      	adds	r7, #16
 8003ed6:	46bd      	mov	sp, r7
 8003ed8:	bd80      	pop	{r7, pc}
	...

08003edc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003edc:	b480      	push	{r7}
 8003ede:	b085      	sub	sp, #20
 8003ee0:	af00      	add	r7, sp, #0
 8003ee2:	6078      	str	r0, [r7, #4]
 8003ee4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	4a40      	ldr	r2, [pc, #256]	@ (8003ff0 <TIM_Base_SetConfig+0x114>)
 8003ef0:	4293      	cmp	r3, r2
 8003ef2:	d013      	beq.n	8003f1c <TIM_Base_SetConfig+0x40>
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003efa:	d00f      	beq.n	8003f1c <TIM_Base_SetConfig+0x40>
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	4a3d      	ldr	r2, [pc, #244]	@ (8003ff4 <TIM_Base_SetConfig+0x118>)
 8003f00:	4293      	cmp	r3, r2
 8003f02:	d00b      	beq.n	8003f1c <TIM_Base_SetConfig+0x40>
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	4a3c      	ldr	r2, [pc, #240]	@ (8003ff8 <TIM_Base_SetConfig+0x11c>)
 8003f08:	4293      	cmp	r3, r2
 8003f0a:	d007      	beq.n	8003f1c <TIM_Base_SetConfig+0x40>
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	4a3b      	ldr	r2, [pc, #236]	@ (8003ffc <TIM_Base_SetConfig+0x120>)
 8003f10:	4293      	cmp	r3, r2
 8003f12:	d003      	beq.n	8003f1c <TIM_Base_SetConfig+0x40>
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	4a3a      	ldr	r2, [pc, #232]	@ (8004000 <TIM_Base_SetConfig+0x124>)
 8003f18:	4293      	cmp	r3, r2
 8003f1a:	d108      	bne.n	8003f2e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003f22:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003f24:	683b      	ldr	r3, [r7, #0]
 8003f26:	685b      	ldr	r3, [r3, #4]
 8003f28:	68fa      	ldr	r2, [r7, #12]
 8003f2a:	4313      	orrs	r3, r2
 8003f2c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	4a2f      	ldr	r2, [pc, #188]	@ (8003ff0 <TIM_Base_SetConfig+0x114>)
 8003f32:	4293      	cmp	r3, r2
 8003f34:	d02b      	beq.n	8003f8e <TIM_Base_SetConfig+0xb2>
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003f3c:	d027      	beq.n	8003f8e <TIM_Base_SetConfig+0xb2>
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	4a2c      	ldr	r2, [pc, #176]	@ (8003ff4 <TIM_Base_SetConfig+0x118>)
 8003f42:	4293      	cmp	r3, r2
 8003f44:	d023      	beq.n	8003f8e <TIM_Base_SetConfig+0xb2>
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	4a2b      	ldr	r2, [pc, #172]	@ (8003ff8 <TIM_Base_SetConfig+0x11c>)
 8003f4a:	4293      	cmp	r3, r2
 8003f4c:	d01f      	beq.n	8003f8e <TIM_Base_SetConfig+0xb2>
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	4a2a      	ldr	r2, [pc, #168]	@ (8003ffc <TIM_Base_SetConfig+0x120>)
 8003f52:	4293      	cmp	r3, r2
 8003f54:	d01b      	beq.n	8003f8e <TIM_Base_SetConfig+0xb2>
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	4a29      	ldr	r2, [pc, #164]	@ (8004000 <TIM_Base_SetConfig+0x124>)
 8003f5a:	4293      	cmp	r3, r2
 8003f5c:	d017      	beq.n	8003f8e <TIM_Base_SetConfig+0xb2>
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	4a28      	ldr	r2, [pc, #160]	@ (8004004 <TIM_Base_SetConfig+0x128>)
 8003f62:	4293      	cmp	r3, r2
 8003f64:	d013      	beq.n	8003f8e <TIM_Base_SetConfig+0xb2>
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	4a27      	ldr	r2, [pc, #156]	@ (8004008 <TIM_Base_SetConfig+0x12c>)
 8003f6a:	4293      	cmp	r3, r2
 8003f6c:	d00f      	beq.n	8003f8e <TIM_Base_SetConfig+0xb2>
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	4a26      	ldr	r2, [pc, #152]	@ (800400c <TIM_Base_SetConfig+0x130>)
 8003f72:	4293      	cmp	r3, r2
 8003f74:	d00b      	beq.n	8003f8e <TIM_Base_SetConfig+0xb2>
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	4a25      	ldr	r2, [pc, #148]	@ (8004010 <TIM_Base_SetConfig+0x134>)
 8003f7a:	4293      	cmp	r3, r2
 8003f7c:	d007      	beq.n	8003f8e <TIM_Base_SetConfig+0xb2>
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	4a24      	ldr	r2, [pc, #144]	@ (8004014 <TIM_Base_SetConfig+0x138>)
 8003f82:	4293      	cmp	r3, r2
 8003f84:	d003      	beq.n	8003f8e <TIM_Base_SetConfig+0xb2>
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	4a23      	ldr	r2, [pc, #140]	@ (8004018 <TIM_Base_SetConfig+0x13c>)
 8003f8a:	4293      	cmp	r3, r2
 8003f8c:	d108      	bne.n	8003fa0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003f94:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003f96:	683b      	ldr	r3, [r7, #0]
 8003f98:	68db      	ldr	r3, [r3, #12]
 8003f9a:	68fa      	ldr	r2, [r7, #12]
 8003f9c:	4313      	orrs	r3, r2
 8003f9e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003fa6:	683b      	ldr	r3, [r7, #0]
 8003fa8:	695b      	ldr	r3, [r3, #20]
 8003faa:	4313      	orrs	r3, r2
 8003fac:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	68fa      	ldr	r2, [r7, #12]
 8003fb2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003fb4:	683b      	ldr	r3, [r7, #0]
 8003fb6:	689a      	ldr	r2, [r3, #8]
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003fbc:	683b      	ldr	r3, [r7, #0]
 8003fbe:	681a      	ldr	r2, [r3, #0]
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	4a0a      	ldr	r2, [pc, #40]	@ (8003ff0 <TIM_Base_SetConfig+0x114>)
 8003fc8:	4293      	cmp	r3, r2
 8003fca:	d003      	beq.n	8003fd4 <TIM_Base_SetConfig+0xf8>
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	4a0c      	ldr	r2, [pc, #48]	@ (8004000 <TIM_Base_SetConfig+0x124>)
 8003fd0:	4293      	cmp	r3, r2
 8003fd2:	d103      	bne.n	8003fdc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003fd4:	683b      	ldr	r3, [r7, #0]
 8003fd6:	691a      	ldr	r2, [r3, #16]
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	2201      	movs	r2, #1
 8003fe0:	615a      	str	r2, [r3, #20]
}
 8003fe2:	bf00      	nop
 8003fe4:	3714      	adds	r7, #20
 8003fe6:	46bd      	mov	sp, r7
 8003fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fec:	4770      	bx	lr
 8003fee:	bf00      	nop
 8003ff0:	40010000 	.word	0x40010000
 8003ff4:	40000400 	.word	0x40000400
 8003ff8:	40000800 	.word	0x40000800
 8003ffc:	40000c00 	.word	0x40000c00
 8004000:	40010400 	.word	0x40010400
 8004004:	40014000 	.word	0x40014000
 8004008:	40014400 	.word	0x40014400
 800400c:	40014800 	.word	0x40014800
 8004010:	40001800 	.word	0x40001800
 8004014:	40001c00 	.word	0x40001c00
 8004018:	40002000 	.word	0x40002000

0800401c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800401c:	b480      	push	{r7}
 800401e:	b087      	sub	sp, #28
 8004020:	af00      	add	r7, sp, #0
 8004022:	60f8      	str	r0, [r7, #12]
 8004024:	60b9      	str	r1, [r7, #8]
 8004026:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	6a1b      	ldr	r3, [r3, #32]
 800402c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	6a1b      	ldr	r3, [r3, #32]
 8004032:	f023 0201 	bic.w	r2, r3, #1
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	699b      	ldr	r3, [r3, #24]
 800403e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004040:	693b      	ldr	r3, [r7, #16]
 8004042:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004046:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	011b      	lsls	r3, r3, #4
 800404c:	693a      	ldr	r2, [r7, #16]
 800404e:	4313      	orrs	r3, r2
 8004050:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004052:	697b      	ldr	r3, [r7, #20]
 8004054:	f023 030a 	bic.w	r3, r3, #10
 8004058:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800405a:	697a      	ldr	r2, [r7, #20]
 800405c:	68bb      	ldr	r3, [r7, #8]
 800405e:	4313      	orrs	r3, r2
 8004060:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	693a      	ldr	r2, [r7, #16]
 8004066:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	697a      	ldr	r2, [r7, #20]
 800406c:	621a      	str	r2, [r3, #32]
}
 800406e:	bf00      	nop
 8004070:	371c      	adds	r7, #28
 8004072:	46bd      	mov	sp, r7
 8004074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004078:	4770      	bx	lr

0800407a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800407a:	b480      	push	{r7}
 800407c:	b087      	sub	sp, #28
 800407e:	af00      	add	r7, sp, #0
 8004080:	60f8      	str	r0, [r7, #12]
 8004082:	60b9      	str	r1, [r7, #8]
 8004084:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	6a1b      	ldr	r3, [r3, #32]
 800408a:	f023 0210 	bic.w	r2, r3, #16
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	699b      	ldr	r3, [r3, #24]
 8004096:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	6a1b      	ldr	r3, [r3, #32]
 800409c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800409e:	697b      	ldr	r3, [r7, #20]
 80040a0:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80040a4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	031b      	lsls	r3, r3, #12
 80040aa:	697a      	ldr	r2, [r7, #20]
 80040ac:	4313      	orrs	r3, r2
 80040ae:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80040b0:	693b      	ldr	r3, [r7, #16]
 80040b2:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80040b6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80040b8:	68bb      	ldr	r3, [r7, #8]
 80040ba:	011b      	lsls	r3, r3, #4
 80040bc:	693a      	ldr	r2, [r7, #16]
 80040be:	4313      	orrs	r3, r2
 80040c0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	697a      	ldr	r2, [r7, #20]
 80040c6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	693a      	ldr	r2, [r7, #16]
 80040cc:	621a      	str	r2, [r3, #32]
}
 80040ce:	bf00      	nop
 80040d0:	371c      	adds	r7, #28
 80040d2:	46bd      	mov	sp, r7
 80040d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040d8:	4770      	bx	lr

080040da <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80040da:	b480      	push	{r7}
 80040dc:	b085      	sub	sp, #20
 80040de:	af00      	add	r7, sp, #0
 80040e0:	6078      	str	r0, [r7, #4]
 80040e2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	689b      	ldr	r3, [r3, #8]
 80040e8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80040f0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80040f2:	683a      	ldr	r2, [r7, #0]
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	4313      	orrs	r3, r2
 80040f8:	f043 0307 	orr.w	r3, r3, #7
 80040fc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	68fa      	ldr	r2, [r7, #12]
 8004102:	609a      	str	r2, [r3, #8]
}
 8004104:	bf00      	nop
 8004106:	3714      	adds	r7, #20
 8004108:	46bd      	mov	sp, r7
 800410a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800410e:	4770      	bx	lr

08004110 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004110:	b480      	push	{r7}
 8004112:	b087      	sub	sp, #28
 8004114:	af00      	add	r7, sp, #0
 8004116:	60f8      	str	r0, [r7, #12]
 8004118:	60b9      	str	r1, [r7, #8]
 800411a:	607a      	str	r2, [r7, #4]
 800411c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	689b      	ldr	r3, [r3, #8]
 8004122:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004124:	697b      	ldr	r3, [r7, #20]
 8004126:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800412a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800412c:	683b      	ldr	r3, [r7, #0]
 800412e:	021a      	lsls	r2, r3, #8
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	431a      	orrs	r2, r3
 8004134:	68bb      	ldr	r3, [r7, #8]
 8004136:	4313      	orrs	r3, r2
 8004138:	697a      	ldr	r2, [r7, #20]
 800413a:	4313      	orrs	r3, r2
 800413c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	697a      	ldr	r2, [r7, #20]
 8004142:	609a      	str	r2, [r3, #8]
}
 8004144:	bf00      	nop
 8004146:	371c      	adds	r7, #28
 8004148:	46bd      	mov	sp, r7
 800414a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800414e:	4770      	bx	lr

08004150 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004150:	b480      	push	{r7}
 8004152:	b085      	sub	sp, #20
 8004154:	af00      	add	r7, sp, #0
 8004156:	6078      	str	r0, [r7, #4]
 8004158:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004160:	2b01      	cmp	r3, #1
 8004162:	d101      	bne.n	8004168 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004164:	2302      	movs	r3, #2
 8004166:	e05a      	b.n	800421e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	2201      	movs	r2, #1
 800416c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	2202      	movs	r2, #2
 8004174:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	685b      	ldr	r3, [r3, #4]
 800417e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	689b      	ldr	r3, [r3, #8]
 8004186:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800418e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004190:	683b      	ldr	r3, [r7, #0]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	68fa      	ldr	r2, [r7, #12]
 8004196:	4313      	orrs	r3, r2
 8004198:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	68fa      	ldr	r2, [r7, #12]
 80041a0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	4a21      	ldr	r2, [pc, #132]	@ (800422c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80041a8:	4293      	cmp	r3, r2
 80041aa:	d022      	beq.n	80041f2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80041b4:	d01d      	beq.n	80041f2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	4a1d      	ldr	r2, [pc, #116]	@ (8004230 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80041bc:	4293      	cmp	r3, r2
 80041be:	d018      	beq.n	80041f2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	4a1b      	ldr	r2, [pc, #108]	@ (8004234 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80041c6:	4293      	cmp	r3, r2
 80041c8:	d013      	beq.n	80041f2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	4a1a      	ldr	r2, [pc, #104]	@ (8004238 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80041d0:	4293      	cmp	r3, r2
 80041d2:	d00e      	beq.n	80041f2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	4a18      	ldr	r2, [pc, #96]	@ (800423c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80041da:	4293      	cmp	r3, r2
 80041dc:	d009      	beq.n	80041f2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	4a17      	ldr	r2, [pc, #92]	@ (8004240 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80041e4:	4293      	cmp	r3, r2
 80041e6:	d004      	beq.n	80041f2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	4a15      	ldr	r2, [pc, #84]	@ (8004244 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80041ee:	4293      	cmp	r3, r2
 80041f0:	d10c      	bne.n	800420c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80041f2:	68bb      	ldr	r3, [r7, #8]
 80041f4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80041f8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80041fa:	683b      	ldr	r3, [r7, #0]
 80041fc:	685b      	ldr	r3, [r3, #4]
 80041fe:	68ba      	ldr	r2, [r7, #8]
 8004200:	4313      	orrs	r3, r2
 8004202:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	68ba      	ldr	r2, [r7, #8]
 800420a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	2201      	movs	r2, #1
 8004210:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	2200      	movs	r2, #0
 8004218:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800421c:	2300      	movs	r3, #0
}
 800421e:	4618      	mov	r0, r3
 8004220:	3714      	adds	r7, #20
 8004222:	46bd      	mov	sp, r7
 8004224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004228:	4770      	bx	lr
 800422a:	bf00      	nop
 800422c:	40010000 	.word	0x40010000
 8004230:	40000400 	.word	0x40000400
 8004234:	40000800 	.word	0x40000800
 8004238:	40000c00 	.word	0x40000c00
 800423c:	40010400 	.word	0x40010400
 8004240:	40014000 	.word	0x40014000
 8004244:	40001800 	.word	0x40001800

08004248 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004248:	b580      	push	{r7, lr}
 800424a:	b082      	sub	sp, #8
 800424c:	af00      	add	r7, sp, #0
 800424e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	2b00      	cmp	r3, #0
 8004254:	d101      	bne.n	800425a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004256:	2301      	movs	r3, #1
 8004258:	e03f      	b.n	80042da <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004260:	b2db      	uxtb	r3, r3
 8004262:	2b00      	cmp	r3, #0
 8004264:	d106      	bne.n	8004274 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	2200      	movs	r2, #0
 800426a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800426e:	6878      	ldr	r0, [r7, #4]
 8004270:	f7fd fc0e 	bl	8001a90 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	2224      	movs	r2, #36	@ 0x24
 8004278:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	68da      	ldr	r2, [r3, #12]
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800428a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800428c:	6878      	ldr	r0, [r7, #4]
 800428e:	f000 fd2d 	bl	8004cec <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	691a      	ldr	r2, [r3, #16]
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80042a0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	695a      	ldr	r2, [r3, #20]
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80042b0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	68da      	ldr	r2, [r3, #12]
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80042c0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	2200      	movs	r2, #0
 80042c6:	641a      	str	r2, [r3, #64]	@ 0x40
  huart->gState = HAL_UART_STATE_READY;
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	2220      	movs	r2, #32
 80042cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	2220      	movs	r2, #32
 80042d4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80042d8:	2300      	movs	r3, #0
}
 80042da:	4618      	mov	r0, r3
 80042dc:	3708      	adds	r7, #8
 80042de:	46bd      	mov	sp, r7
 80042e0:	bd80      	pop	{r7, pc}

080042e2 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 80042e2:	b480      	push	{r7}
 80042e4:	b085      	sub	sp, #20
 80042e6:	af00      	add	r7, sp, #0
 80042e8:	60f8      	str	r0, [r7, #12]
 80042ea:	60b9      	str	r1, [r7, #8]
 80042ec:	4613      	mov	r3, r2
 80042ee:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80042f6:	b2db      	uxtb	r3, r3
 80042f8:	2b20      	cmp	r3, #32
 80042fa:	d130      	bne.n	800435e <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 80042fc:	68bb      	ldr	r3, [r7, #8]
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d002      	beq.n	8004308 <HAL_UART_Transmit_IT+0x26>
 8004302:	88fb      	ldrh	r3, [r7, #6]
 8004304:	2b00      	cmp	r3, #0
 8004306:	d101      	bne.n	800430c <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8004308:	2301      	movs	r3, #1
 800430a:	e029      	b.n	8004360 <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004312:	2b01      	cmp	r3, #1
 8004314:	d101      	bne.n	800431a <HAL_UART_Transmit_IT+0x38>
 8004316:	2302      	movs	r3, #2
 8004318:	e022      	b.n	8004360 <HAL_UART_Transmit_IT+0x7e>
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	2201      	movs	r2, #1
 800431e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    huart->pTxBuffPtr = pData;
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	68ba      	ldr	r2, [r7, #8]
 8004326:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	88fa      	ldrh	r2, [r7, #6]
 800432c:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	88fa      	ldrh	r2, [r7, #6]
 8004332:	84da      	strh	r2, [r3, #38]	@ 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	2200      	movs	r2, #0
 8004338:	641a      	str	r2, [r3, #64]	@ 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	2221      	movs	r2, #33	@ 0x21
 800433e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	2200      	movs	r2, #0
 8004346:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	68da      	ldr	r2, [r3, #12]
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8004358:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 800435a:	2300      	movs	r3, #0
 800435c:	e000      	b.n	8004360 <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 800435e:	2302      	movs	r3, #2
  }
}
 8004360:	4618      	mov	r0, r3
 8004362:	3714      	adds	r7, #20
 8004364:	46bd      	mov	sp, r7
 8004366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800436a:	4770      	bx	lr

0800436c <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800436c:	b580      	push	{r7, lr}
 800436e:	b084      	sub	sp, #16
 8004370:	af00      	add	r7, sp, #0
 8004372:	60f8      	str	r0, [r7, #12]
 8004374:	60b9      	str	r1, [r7, #8]
 8004376:	4613      	mov	r3, r2
 8004378:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004380:	b2db      	uxtb	r3, r3
 8004382:	2b20      	cmp	r3, #32
 8004384:	d11d      	bne.n	80043c2 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8004386:	68bb      	ldr	r3, [r7, #8]
 8004388:	2b00      	cmp	r3, #0
 800438a:	d002      	beq.n	8004392 <HAL_UART_Receive_IT+0x26>
 800438c:	88fb      	ldrh	r3, [r7, #6]
 800438e:	2b00      	cmp	r3, #0
 8004390:	d101      	bne.n	8004396 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8004392:	2301      	movs	r3, #1
 8004394:	e016      	b.n	80043c4 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800439c:	2b01      	cmp	r3, #1
 800439e:	d101      	bne.n	80043a4 <HAL_UART_Receive_IT+0x38>
 80043a0:	2302      	movs	r3, #2
 80043a2:	e00f      	b.n	80043c4 <HAL_UART_Receive_IT+0x58>
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	2201      	movs	r2, #1
 80043a8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	2200      	movs	r2, #0
 80043b0:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 80043b2:	88fb      	ldrh	r3, [r7, #6]
 80043b4:	461a      	mov	r2, r3
 80043b6:	68b9      	ldr	r1, [r7, #8]
 80043b8:	68f8      	ldr	r0, [r7, #12]
 80043ba:	f000 fabf 	bl	800493c <UART_Start_Receive_IT>
 80043be:	4603      	mov	r3, r0
 80043c0:	e000      	b.n	80043c4 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 80043c2:	2302      	movs	r3, #2
  }
}
 80043c4:	4618      	mov	r0, r3
 80043c6:	3710      	adds	r7, #16
 80043c8:	46bd      	mov	sp, r7
 80043ca:	bd80      	pop	{r7, pc}

080043cc <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80043cc:	b580      	push	{r7, lr}
 80043ce:	b0ba      	sub	sp, #232	@ 0xe8
 80043d0:	af00      	add	r7, sp, #0
 80043d2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	68db      	ldr	r3, [r3, #12]
 80043e4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	695b      	ldr	r3, [r3, #20]
 80043ee:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 80043f2:	2300      	movs	r3, #0
 80043f4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 80043f8:	2300      	movs	r3, #0
 80043fa:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80043fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004402:	f003 030f 	and.w	r3, r3, #15
 8004406:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 800440a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800440e:	2b00      	cmp	r3, #0
 8004410:	d10f      	bne.n	8004432 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004412:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004416:	f003 0320 	and.w	r3, r3, #32
 800441a:	2b00      	cmp	r3, #0
 800441c:	d009      	beq.n	8004432 <HAL_UART_IRQHandler+0x66>
 800441e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004422:	f003 0320 	and.w	r3, r3, #32
 8004426:	2b00      	cmp	r3, #0
 8004428:	d003      	beq.n	8004432 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800442a:	6878      	ldr	r0, [r7, #4]
 800442c:	f000 fba3 	bl	8004b76 <UART_Receive_IT>
      return;
 8004430:	e256      	b.n	80048e0 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8004432:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004436:	2b00      	cmp	r3, #0
 8004438:	f000 80de 	beq.w	80045f8 <HAL_UART_IRQHandler+0x22c>
 800443c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004440:	f003 0301 	and.w	r3, r3, #1
 8004444:	2b00      	cmp	r3, #0
 8004446:	d106      	bne.n	8004456 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004448:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800444c:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8004450:	2b00      	cmp	r3, #0
 8004452:	f000 80d1 	beq.w	80045f8 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004456:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800445a:	f003 0301 	and.w	r3, r3, #1
 800445e:	2b00      	cmp	r3, #0
 8004460:	d00b      	beq.n	800447a <HAL_UART_IRQHandler+0xae>
 8004462:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004466:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800446a:	2b00      	cmp	r3, #0
 800446c:	d005      	beq.n	800447a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004472:	f043 0201 	orr.w	r2, r3, #1
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800447a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800447e:	f003 0304 	and.w	r3, r3, #4
 8004482:	2b00      	cmp	r3, #0
 8004484:	d00b      	beq.n	800449e <HAL_UART_IRQHandler+0xd2>
 8004486:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800448a:	f003 0301 	and.w	r3, r3, #1
 800448e:	2b00      	cmp	r3, #0
 8004490:	d005      	beq.n	800449e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004496:	f043 0202 	orr.w	r2, r3, #2
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800449e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80044a2:	f003 0302 	and.w	r3, r3, #2
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d00b      	beq.n	80044c2 <HAL_UART_IRQHandler+0xf6>
 80044aa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80044ae:	f003 0301 	and.w	r3, r3, #1
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d005      	beq.n	80044c2 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044ba:	f043 0204 	orr.w	r2, r3, #4
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80044c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80044c6:	f003 0308 	and.w	r3, r3, #8
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d011      	beq.n	80044f2 <HAL_UART_IRQHandler+0x126>
 80044ce:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80044d2:	f003 0320 	and.w	r3, r3, #32
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d105      	bne.n	80044e6 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80044da:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80044de:	f003 0301 	and.w	r3, r3, #1
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d005      	beq.n	80044f2 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044ea:	f043 0208 	orr.w	r2, r3, #8
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	f000 81ed 	beq.w	80048d6 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80044fc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004500:	f003 0320 	and.w	r3, r3, #32
 8004504:	2b00      	cmp	r3, #0
 8004506:	d008      	beq.n	800451a <HAL_UART_IRQHandler+0x14e>
 8004508:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800450c:	f003 0320 	and.w	r3, r3, #32
 8004510:	2b00      	cmp	r3, #0
 8004512:	d002      	beq.n	800451a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8004514:	6878      	ldr	r0, [r7, #4]
 8004516:	f000 fb2e 	bl	8004b76 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	695b      	ldr	r3, [r3, #20]
 8004520:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004524:	2b40      	cmp	r3, #64	@ 0x40
 8004526:	bf0c      	ite	eq
 8004528:	2301      	moveq	r3, #1
 800452a:	2300      	movne	r3, #0
 800452c:	b2db      	uxtb	r3, r3
 800452e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004536:	f003 0308 	and.w	r3, r3, #8
 800453a:	2b00      	cmp	r3, #0
 800453c:	d103      	bne.n	8004546 <HAL_UART_IRQHandler+0x17a>
 800453e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004542:	2b00      	cmp	r3, #0
 8004544:	d04f      	beq.n	80045e6 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004546:	6878      	ldr	r0, [r7, #4]
 8004548:	f000 fa36 	bl	80049b8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	695b      	ldr	r3, [r3, #20]
 8004552:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004556:	2b40      	cmp	r3, #64	@ 0x40
 8004558:	d141      	bne.n	80045de <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	3314      	adds	r3, #20
 8004560:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004564:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8004568:	e853 3f00 	ldrex	r3, [r3]
 800456c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8004570:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004574:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004578:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	3314      	adds	r3, #20
 8004582:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8004586:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800458a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800458e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8004592:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8004596:	e841 2300 	strex	r3, r2, [r1]
 800459a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800459e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d1d9      	bne.n	800455a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d013      	beq.n	80045d6 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80045b2:	4a7d      	ldr	r2, [pc, #500]	@ (80047a8 <HAL_UART_IRQHandler+0x3dc>)
 80045b4:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80045ba:	4618      	mov	r0, r3
 80045bc:	f7fe fa8e 	bl	8002adc <HAL_DMA_Abort_IT>
 80045c0:	4603      	mov	r3, r0
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d016      	beq.n	80045f4 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80045ca:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80045cc:	687a      	ldr	r2, [r7, #4]
 80045ce:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80045d0:	4610      	mov	r0, r2
 80045d2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80045d4:	e00e      	b.n	80045f4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80045d6:	6878      	ldr	r0, [r7, #4]
 80045d8:	f000 f99a 	bl	8004910 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80045dc:	e00a      	b.n	80045f4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80045de:	6878      	ldr	r0, [r7, #4]
 80045e0:	f000 f996 	bl	8004910 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80045e4:	e006      	b.n	80045f4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80045e6:	6878      	ldr	r0, [r7, #4]
 80045e8:	f000 f992 	bl	8004910 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	2200      	movs	r2, #0
 80045f0:	641a      	str	r2, [r3, #64]	@ 0x40
      }
    }
    return;
 80045f2:	e170      	b.n	80048d6 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80045f4:	bf00      	nop
    return;
 80045f6:	e16e      	b.n	80048d6 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80045fc:	2b01      	cmp	r3, #1
 80045fe:	f040 814a 	bne.w	8004896 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8004602:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004606:	f003 0310 	and.w	r3, r3, #16
 800460a:	2b00      	cmp	r3, #0
 800460c:	f000 8143 	beq.w	8004896 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8004610:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004614:	f003 0310 	and.w	r3, r3, #16
 8004618:	2b00      	cmp	r3, #0
 800461a:	f000 813c 	beq.w	8004896 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800461e:	2300      	movs	r3, #0
 8004620:	60bb      	str	r3, [r7, #8]
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	60bb      	str	r3, [r7, #8]
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	685b      	ldr	r3, [r3, #4]
 8004630:	60bb      	str	r3, [r7, #8]
 8004632:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	695b      	ldr	r3, [r3, #20]
 800463a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800463e:	2b40      	cmp	r3, #64	@ 0x40
 8004640:	f040 80b4 	bne.w	80047ac <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	685b      	ldr	r3, [r3, #4]
 800464c:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004650:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8004654:	2b00      	cmp	r3, #0
 8004656:	f000 8140 	beq.w	80048da <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800465e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004662:	429a      	cmp	r2, r3
 8004664:	f080 8139 	bcs.w	80048da <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800466e:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004674:	69db      	ldr	r3, [r3, #28]
 8004676:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800467a:	f000 8088 	beq.w	800478e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	330c      	adds	r3, #12
 8004684:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004688:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800468c:	e853 3f00 	ldrex	r3, [r3]
 8004690:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8004694:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004698:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800469c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	330c      	adds	r3, #12
 80046a6:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 80046aa:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80046ae:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046b2:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80046b6:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80046ba:	e841 2300 	strex	r3, r2, [r1]
 80046be:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80046c2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d1d9      	bne.n	800467e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	3314      	adds	r3, #20
 80046d0:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046d2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80046d4:	e853 3f00 	ldrex	r3, [r3]
 80046d8:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80046da:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80046dc:	f023 0301 	bic.w	r3, r3, #1
 80046e0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	3314      	adds	r3, #20
 80046ea:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80046ee:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80046f2:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046f4:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80046f6:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80046fa:	e841 2300 	strex	r3, r2, [r1]
 80046fe:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8004700:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004702:	2b00      	cmp	r3, #0
 8004704:	d1e1      	bne.n	80046ca <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	3314      	adds	r3, #20
 800470c:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800470e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004710:	e853 3f00 	ldrex	r3, [r3]
 8004714:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8004716:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004718:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800471c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	3314      	adds	r3, #20
 8004726:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800472a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800472c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800472e:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8004730:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8004732:	e841 2300 	strex	r3, r2, [r1]
 8004736:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8004738:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800473a:	2b00      	cmp	r3, #0
 800473c:	d1e3      	bne.n	8004706 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	2220      	movs	r2, #32
 8004742:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	2200      	movs	r2, #0
 800474a:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	330c      	adds	r3, #12
 8004752:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004754:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004756:	e853 3f00 	ldrex	r3, [r3]
 800475a:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800475c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800475e:	f023 0310 	bic.w	r3, r3, #16
 8004762:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	330c      	adds	r3, #12
 800476c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8004770:	65ba      	str	r2, [r7, #88]	@ 0x58
 8004772:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004774:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004776:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8004778:	e841 2300 	strex	r3, r2, [r1]
 800477c:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800477e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004780:	2b00      	cmp	r3, #0
 8004782:	d1e3      	bne.n	800474c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004788:	4618      	mov	r0, r3
 800478a:	f7fe f937 	bl	80029fc <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004796:	b29b      	uxth	r3, r3
 8004798:	1ad3      	subs	r3, r2, r3
 800479a:	b29b      	uxth	r3, r3
 800479c:	4619      	mov	r1, r3
 800479e:	6878      	ldr	r0, [r7, #4]
 80047a0:	f000 f8c0 	bl	8004924 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80047a4:	e099      	b.n	80048da <HAL_UART_IRQHandler+0x50e>
 80047a6:	bf00      	nop
 80047a8:	08004a7f 	.word	0x08004a7f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80047b4:	b29b      	uxth	r3, r3
 80047b6:	1ad3      	subs	r3, r2, r3
 80047b8:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80047c0:	b29b      	uxth	r3, r3
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	f000 808b 	beq.w	80048de <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 80047c8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	f000 8086 	beq.w	80048de <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	330c      	adds	r3, #12
 80047d8:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80047dc:	e853 3f00 	ldrex	r3, [r3]
 80047e0:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80047e2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80047e4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80047e8:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	330c      	adds	r3, #12
 80047f2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 80047f6:	647a      	str	r2, [r7, #68]	@ 0x44
 80047f8:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047fa:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80047fc:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80047fe:	e841 2300 	strex	r3, r2, [r1]
 8004802:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004804:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004806:	2b00      	cmp	r3, #0
 8004808:	d1e3      	bne.n	80047d2 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	3314      	adds	r3, #20
 8004810:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004812:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004814:	e853 3f00 	ldrex	r3, [r3]
 8004818:	623b      	str	r3, [r7, #32]
   return(result);
 800481a:	6a3b      	ldr	r3, [r7, #32]
 800481c:	f023 0301 	bic.w	r3, r3, #1
 8004820:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	3314      	adds	r3, #20
 800482a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800482e:	633a      	str	r2, [r7, #48]	@ 0x30
 8004830:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004832:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004834:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004836:	e841 2300 	strex	r3, r2, [r1]
 800483a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800483c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800483e:	2b00      	cmp	r3, #0
 8004840:	d1e3      	bne.n	800480a <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	2220      	movs	r2, #32
 8004846:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	2200      	movs	r2, #0
 800484e:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	330c      	adds	r3, #12
 8004856:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004858:	693b      	ldr	r3, [r7, #16]
 800485a:	e853 3f00 	ldrex	r3, [r3]
 800485e:	60fb      	str	r3, [r7, #12]
   return(result);
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	f023 0310 	bic.w	r3, r3, #16
 8004866:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	330c      	adds	r3, #12
 8004870:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8004874:	61fa      	str	r2, [r7, #28]
 8004876:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004878:	69b9      	ldr	r1, [r7, #24]
 800487a:	69fa      	ldr	r2, [r7, #28]
 800487c:	e841 2300 	strex	r3, r2, [r1]
 8004880:	617b      	str	r3, [r7, #20]
   return(result);
 8004882:	697b      	ldr	r3, [r7, #20]
 8004884:	2b00      	cmp	r3, #0
 8004886:	d1e3      	bne.n	8004850 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004888:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800488c:	4619      	mov	r1, r3
 800488e:	6878      	ldr	r0, [r7, #4]
 8004890:	f000 f848 	bl	8004924 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004894:	e023      	b.n	80048de <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004896:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800489a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d009      	beq.n	80048b6 <HAL_UART_IRQHandler+0x4ea>
 80048a2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80048a6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d003      	beq.n	80048b6 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 80048ae:	6878      	ldr	r0, [r7, #4]
 80048b0:	f000 f8f9 	bl	8004aa6 <UART_Transmit_IT>
    return;
 80048b4:	e014      	b.n	80048e0 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80048b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80048ba:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d00e      	beq.n	80048e0 <HAL_UART_IRQHandler+0x514>
 80048c2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80048c6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d008      	beq.n	80048e0 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 80048ce:	6878      	ldr	r0, [r7, #4]
 80048d0:	f000 f939 	bl	8004b46 <UART_EndTransmit_IT>
    return;
 80048d4:	e004      	b.n	80048e0 <HAL_UART_IRQHandler+0x514>
    return;
 80048d6:	bf00      	nop
 80048d8:	e002      	b.n	80048e0 <HAL_UART_IRQHandler+0x514>
      return;
 80048da:	bf00      	nop
 80048dc:	e000      	b.n	80048e0 <HAL_UART_IRQHandler+0x514>
      return;
 80048de:	bf00      	nop
  }
}
 80048e0:	37e8      	adds	r7, #232	@ 0xe8
 80048e2:	46bd      	mov	sp, r7
 80048e4:	bd80      	pop	{r7, pc}
 80048e6:	bf00      	nop

080048e8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80048e8:	b480      	push	{r7}
 80048ea:	b083      	sub	sp, #12
 80048ec:	af00      	add	r7, sp, #0
 80048ee:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80048f0:	bf00      	nop
 80048f2:	370c      	adds	r7, #12
 80048f4:	46bd      	mov	sp, r7
 80048f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048fa:	4770      	bx	lr

080048fc <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80048fc:	b480      	push	{r7}
 80048fe:	b083      	sub	sp, #12
 8004900:	af00      	add	r7, sp, #0
 8004902:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8004904:	bf00      	nop
 8004906:	370c      	adds	r7, #12
 8004908:	46bd      	mov	sp, r7
 800490a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800490e:	4770      	bx	lr

08004910 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004910:	b480      	push	{r7}
 8004912:	b083      	sub	sp, #12
 8004914:	af00      	add	r7, sp, #0
 8004916:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004918:	bf00      	nop
 800491a:	370c      	adds	r7, #12
 800491c:	46bd      	mov	sp, r7
 800491e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004922:	4770      	bx	lr

08004924 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004924:	b480      	push	{r7}
 8004926:	b083      	sub	sp, #12
 8004928:	af00      	add	r7, sp, #0
 800492a:	6078      	str	r0, [r7, #4]
 800492c:	460b      	mov	r3, r1
 800492e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004930:	bf00      	nop
 8004932:	370c      	adds	r7, #12
 8004934:	46bd      	mov	sp, r7
 8004936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800493a:	4770      	bx	lr

0800493c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800493c:	b480      	push	{r7}
 800493e:	b085      	sub	sp, #20
 8004940:	af00      	add	r7, sp, #0
 8004942:	60f8      	str	r0, [r7, #12]
 8004944:	60b9      	str	r1, [r7, #8]
 8004946:	4613      	mov	r3, r2
 8004948:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	68ba      	ldr	r2, [r7, #8]
 800494e:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	88fa      	ldrh	r2, [r7, #6]
 8004954:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	88fa      	ldrh	r2, [r7, #6]
 800495a:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	2200      	movs	r2, #0
 8004960:	641a      	str	r2, [r3, #64]	@ 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	2222      	movs	r2, #34	@ 0x22
 8004966:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	2200      	movs	r2, #0
 800496e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	691b      	ldr	r3, [r3, #16]
 8004976:	2b00      	cmp	r3, #0
 8004978:	d007      	beq.n	800498a <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	68da      	ldr	r2, [r3, #12]
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004988:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	695a      	ldr	r2, [r3, #20]
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	f042 0201 	orr.w	r2, r2, #1
 8004998:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	68da      	ldr	r2, [r3, #12]
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	f042 0220 	orr.w	r2, r2, #32
 80049a8:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80049aa:	2300      	movs	r3, #0
}
 80049ac:	4618      	mov	r0, r3
 80049ae:	3714      	adds	r7, #20
 80049b0:	46bd      	mov	sp, r7
 80049b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049b6:	4770      	bx	lr

080049b8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80049b8:	b480      	push	{r7}
 80049ba:	b095      	sub	sp, #84	@ 0x54
 80049bc:	af00      	add	r7, sp, #0
 80049be:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	330c      	adds	r3, #12
 80049c6:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049c8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80049ca:	e853 3f00 	ldrex	r3, [r3]
 80049ce:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80049d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80049d2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80049d6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	330c      	adds	r3, #12
 80049de:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80049e0:	643a      	str	r2, [r7, #64]	@ 0x40
 80049e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049e4:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80049e6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80049e8:	e841 2300 	strex	r3, r2, [r1]
 80049ec:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80049ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d1e5      	bne.n	80049c0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	3314      	adds	r3, #20
 80049fa:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049fc:	6a3b      	ldr	r3, [r7, #32]
 80049fe:	e853 3f00 	ldrex	r3, [r3]
 8004a02:	61fb      	str	r3, [r7, #28]
   return(result);
 8004a04:	69fb      	ldr	r3, [r7, #28]
 8004a06:	f023 0301 	bic.w	r3, r3, #1
 8004a0a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	3314      	adds	r3, #20
 8004a12:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004a14:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004a16:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a18:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004a1a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004a1c:	e841 2300 	strex	r3, r2, [r1]
 8004a20:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004a22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d1e5      	bne.n	80049f4 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a2c:	2b01      	cmp	r3, #1
 8004a2e:	d119      	bne.n	8004a64 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	330c      	adds	r3, #12
 8004a36:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	e853 3f00 	ldrex	r3, [r3]
 8004a3e:	60bb      	str	r3, [r7, #8]
   return(result);
 8004a40:	68bb      	ldr	r3, [r7, #8]
 8004a42:	f023 0310 	bic.w	r3, r3, #16
 8004a46:	647b      	str	r3, [r7, #68]	@ 0x44
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	330c      	adds	r3, #12
 8004a4e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004a50:	61ba      	str	r2, [r7, #24]
 8004a52:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a54:	6979      	ldr	r1, [r7, #20]
 8004a56:	69ba      	ldr	r2, [r7, #24]
 8004a58:	e841 2300 	strex	r3, r2, [r1]
 8004a5c:	613b      	str	r3, [r7, #16]
   return(result);
 8004a5e:	693b      	ldr	r3, [r7, #16]
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d1e5      	bne.n	8004a30 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	2220      	movs	r2, #32
 8004a68:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	2200      	movs	r2, #0
 8004a70:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8004a72:	bf00      	nop
 8004a74:	3754      	adds	r7, #84	@ 0x54
 8004a76:	46bd      	mov	sp, r7
 8004a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a7c:	4770      	bx	lr

08004a7e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004a7e:	b580      	push	{r7, lr}
 8004a80:	b084      	sub	sp, #16
 8004a82:	af00      	add	r7, sp, #0
 8004a84:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004a8a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	2200      	movs	r2, #0
 8004a90:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	2200      	movs	r2, #0
 8004a96:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004a98:	68f8      	ldr	r0, [r7, #12]
 8004a9a:	f7ff ff39 	bl	8004910 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004a9e:	bf00      	nop
 8004aa0:	3710      	adds	r7, #16
 8004aa2:	46bd      	mov	sp, r7
 8004aa4:	bd80      	pop	{r7, pc}

08004aa6 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004aa6:	b480      	push	{r7}
 8004aa8:	b085      	sub	sp, #20
 8004aaa:	af00      	add	r7, sp, #0
 8004aac:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004ab4:	b2db      	uxtb	r3, r3
 8004ab6:	2b21      	cmp	r3, #33	@ 0x21
 8004ab8:	d13e      	bne.n	8004b38 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	689b      	ldr	r3, [r3, #8]
 8004abe:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004ac2:	d114      	bne.n	8004aee <UART_Transmit_IT+0x48>
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	691b      	ldr	r3, [r3, #16]
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d110      	bne.n	8004aee <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	6a1b      	ldr	r3, [r3, #32]
 8004ad0:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	881b      	ldrh	r3, [r3, #0]
 8004ad6:	461a      	mov	r2, r3
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004ae0:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	6a1b      	ldr	r3, [r3, #32]
 8004ae6:	1c9a      	adds	r2, r3, #2
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	621a      	str	r2, [r3, #32]
 8004aec:	e008      	b.n	8004b00 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	6a1b      	ldr	r3, [r3, #32]
 8004af2:	1c59      	adds	r1, r3, #1
 8004af4:	687a      	ldr	r2, [r7, #4]
 8004af6:	6211      	str	r1, [r2, #32]
 8004af8:	781a      	ldrb	r2, [r3, #0]
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004b04:	b29b      	uxth	r3, r3
 8004b06:	3b01      	subs	r3, #1
 8004b08:	b29b      	uxth	r3, r3
 8004b0a:	687a      	ldr	r2, [r7, #4]
 8004b0c:	4619      	mov	r1, r3
 8004b0e:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	d10f      	bne.n	8004b34 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	68da      	ldr	r2, [r3, #12]
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004b22:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	68da      	ldr	r2, [r3, #12]
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004b32:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004b34:	2300      	movs	r3, #0
 8004b36:	e000      	b.n	8004b3a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004b38:	2302      	movs	r3, #2
  }
}
 8004b3a:	4618      	mov	r0, r3
 8004b3c:	3714      	adds	r7, #20
 8004b3e:	46bd      	mov	sp, r7
 8004b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b44:	4770      	bx	lr

08004b46 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004b46:	b580      	push	{r7, lr}
 8004b48:	b082      	sub	sp, #8
 8004b4a:	af00      	add	r7, sp, #0
 8004b4c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	68da      	ldr	r2, [r3, #12]
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004b5c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	2220      	movs	r2, #32
 8004b62:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004b66:	6878      	ldr	r0, [r7, #4]
 8004b68:	f7ff febe 	bl	80048e8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004b6c:	2300      	movs	r3, #0
}
 8004b6e:	4618      	mov	r0, r3
 8004b70:	3708      	adds	r7, #8
 8004b72:	46bd      	mov	sp, r7
 8004b74:	bd80      	pop	{r7, pc}

08004b76 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004b76:	b580      	push	{r7, lr}
 8004b78:	b08c      	sub	sp, #48	@ 0x30
 8004b7a:	af00      	add	r7, sp, #0
 8004b7c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004b84:	b2db      	uxtb	r3, r3
 8004b86:	2b22      	cmp	r3, #34	@ 0x22
 8004b88:	f040 80ab 	bne.w	8004ce2 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	689b      	ldr	r3, [r3, #8]
 8004b90:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004b94:	d117      	bne.n	8004bc6 <UART_Receive_IT+0x50>
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	691b      	ldr	r3, [r3, #16]
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d113      	bne.n	8004bc6 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004b9e:	2300      	movs	r3, #0
 8004ba0:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ba6:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	685b      	ldr	r3, [r3, #4]
 8004bae:	b29b      	uxth	r3, r3
 8004bb0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004bb4:	b29a      	uxth	r2, r3
 8004bb6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004bb8:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004bbe:	1c9a      	adds	r2, r3, #2
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	629a      	str	r2, [r3, #40]	@ 0x28
 8004bc4:	e026      	b.n	8004c14 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004bca:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8004bcc:	2300      	movs	r3, #0
 8004bce:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	689b      	ldr	r3, [r3, #8]
 8004bd4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004bd8:	d007      	beq.n	8004bea <UART_Receive_IT+0x74>
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	689b      	ldr	r3, [r3, #8]
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d10a      	bne.n	8004bf8 <UART_Receive_IT+0x82>
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	691b      	ldr	r3, [r3, #16]
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d106      	bne.n	8004bf8 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	685b      	ldr	r3, [r3, #4]
 8004bf0:	b2da      	uxtb	r2, r3
 8004bf2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004bf4:	701a      	strb	r2, [r3, #0]
 8004bf6:	e008      	b.n	8004c0a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	685b      	ldr	r3, [r3, #4]
 8004bfe:	b2db      	uxtb	r3, r3
 8004c00:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004c04:	b2da      	uxtb	r2, r3
 8004c06:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004c08:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c0e:	1c5a      	adds	r2, r3, #1
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004c18:	b29b      	uxth	r3, r3
 8004c1a:	3b01      	subs	r3, #1
 8004c1c:	b29b      	uxth	r3, r3
 8004c1e:	687a      	ldr	r2, [r7, #4]
 8004c20:	4619      	mov	r1, r3
 8004c22:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	d15a      	bne.n	8004cde <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	68da      	ldr	r2, [r3, #12]
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	f022 0220 	bic.w	r2, r2, #32
 8004c36:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	68da      	ldr	r2, [r3, #12]
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004c46:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	695a      	ldr	r2, [r3, #20]
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	f022 0201 	bic.w	r2, r2, #1
 8004c56:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	2220      	movs	r2, #32
 8004c5c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004c64:	2b01      	cmp	r3, #1
 8004c66:	d135      	bne.n	8004cd4 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	2200      	movs	r2, #0
 8004c6c:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	330c      	adds	r3, #12
 8004c74:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c76:	697b      	ldr	r3, [r7, #20]
 8004c78:	e853 3f00 	ldrex	r3, [r3]
 8004c7c:	613b      	str	r3, [r7, #16]
   return(result);
 8004c7e:	693b      	ldr	r3, [r7, #16]
 8004c80:	f023 0310 	bic.w	r3, r3, #16
 8004c84:	627b      	str	r3, [r7, #36]	@ 0x24
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	330c      	adds	r3, #12
 8004c8c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004c8e:	623a      	str	r2, [r7, #32]
 8004c90:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c92:	69f9      	ldr	r1, [r7, #28]
 8004c94:	6a3a      	ldr	r2, [r7, #32]
 8004c96:	e841 2300 	strex	r3, r2, [r1]
 8004c9a:	61bb      	str	r3, [r7, #24]
   return(result);
 8004c9c:	69bb      	ldr	r3, [r7, #24]
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d1e5      	bne.n	8004c6e <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	f003 0310 	and.w	r3, r3, #16
 8004cac:	2b10      	cmp	r3, #16
 8004cae:	d10a      	bne.n	8004cc6 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004cb0:	2300      	movs	r3, #0
 8004cb2:	60fb      	str	r3, [r7, #12]
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	60fb      	str	r3, [r7, #12]
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	685b      	ldr	r3, [r3, #4]
 8004cc2:	60fb      	str	r3, [r7, #12]
 8004cc4:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004cca:	4619      	mov	r1, r3
 8004ccc:	6878      	ldr	r0, [r7, #4]
 8004cce:	f7ff fe29 	bl	8004924 <HAL_UARTEx_RxEventCallback>
 8004cd2:	e002      	b.n	8004cda <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004cd4:	6878      	ldr	r0, [r7, #4]
 8004cd6:	f7ff fe11 	bl	80048fc <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004cda:	2300      	movs	r3, #0
 8004cdc:	e002      	b.n	8004ce4 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8004cde:	2300      	movs	r3, #0
 8004ce0:	e000      	b.n	8004ce4 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8004ce2:	2302      	movs	r3, #2
  }
}
 8004ce4:	4618      	mov	r0, r3
 8004ce6:	3730      	adds	r7, #48	@ 0x30
 8004ce8:	46bd      	mov	sp, r7
 8004cea:	bd80      	pop	{r7, pc}

08004cec <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004cec:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004cf0:	b0c0      	sub	sp, #256	@ 0x100
 8004cf2:	af00      	add	r7, sp, #0
 8004cf4:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004cf8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	691b      	ldr	r3, [r3, #16]
 8004d00:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8004d04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004d08:	68d9      	ldr	r1, [r3, #12]
 8004d0a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004d0e:	681a      	ldr	r2, [r3, #0]
 8004d10:	ea40 0301 	orr.w	r3, r0, r1
 8004d14:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004d16:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004d1a:	689a      	ldr	r2, [r3, #8]
 8004d1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004d20:	691b      	ldr	r3, [r3, #16]
 8004d22:	431a      	orrs	r2, r3
 8004d24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004d28:	695b      	ldr	r3, [r3, #20]
 8004d2a:	431a      	orrs	r2, r3
 8004d2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004d30:	69db      	ldr	r3, [r3, #28]
 8004d32:	4313      	orrs	r3, r2
 8004d34:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004d38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	68db      	ldr	r3, [r3, #12]
 8004d40:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8004d44:	f021 010c 	bic.w	r1, r1, #12
 8004d48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004d4c:	681a      	ldr	r2, [r3, #0]
 8004d4e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8004d52:	430b      	orrs	r3, r1
 8004d54:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004d56:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	695b      	ldr	r3, [r3, #20]
 8004d5e:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8004d62:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004d66:	6999      	ldr	r1, [r3, #24]
 8004d68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004d6c:	681a      	ldr	r2, [r3, #0]
 8004d6e:	ea40 0301 	orr.w	r3, r0, r1
 8004d72:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004d74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004d78:	681a      	ldr	r2, [r3, #0]
 8004d7a:	4b8f      	ldr	r3, [pc, #572]	@ (8004fb8 <UART_SetConfig+0x2cc>)
 8004d7c:	429a      	cmp	r2, r3
 8004d7e:	d005      	beq.n	8004d8c <UART_SetConfig+0xa0>
 8004d80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004d84:	681a      	ldr	r2, [r3, #0]
 8004d86:	4b8d      	ldr	r3, [pc, #564]	@ (8004fbc <UART_SetConfig+0x2d0>)
 8004d88:	429a      	cmp	r2, r3
 8004d8a:	d104      	bne.n	8004d96 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004d8c:	f7fe ff12 	bl	8003bb4 <HAL_RCC_GetPCLK2Freq>
 8004d90:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8004d94:	e003      	b.n	8004d9e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004d96:	f7fe fef9 	bl	8003b8c <HAL_RCC_GetPCLK1Freq>
 8004d9a:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004d9e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004da2:	69db      	ldr	r3, [r3, #28]
 8004da4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004da8:	f040 810c 	bne.w	8004fc4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004dac:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004db0:	2200      	movs	r2, #0
 8004db2:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8004db6:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8004dba:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8004dbe:	4622      	mov	r2, r4
 8004dc0:	462b      	mov	r3, r5
 8004dc2:	1891      	adds	r1, r2, r2
 8004dc4:	65b9      	str	r1, [r7, #88]	@ 0x58
 8004dc6:	415b      	adcs	r3, r3
 8004dc8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004dca:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8004dce:	4621      	mov	r1, r4
 8004dd0:	eb12 0801 	adds.w	r8, r2, r1
 8004dd4:	4629      	mov	r1, r5
 8004dd6:	eb43 0901 	adc.w	r9, r3, r1
 8004dda:	f04f 0200 	mov.w	r2, #0
 8004dde:	f04f 0300 	mov.w	r3, #0
 8004de2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004de6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004dea:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004dee:	4690      	mov	r8, r2
 8004df0:	4699      	mov	r9, r3
 8004df2:	4623      	mov	r3, r4
 8004df4:	eb18 0303 	adds.w	r3, r8, r3
 8004df8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8004dfc:	462b      	mov	r3, r5
 8004dfe:	eb49 0303 	adc.w	r3, r9, r3
 8004e02:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8004e06:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004e0a:	685b      	ldr	r3, [r3, #4]
 8004e0c:	2200      	movs	r2, #0
 8004e0e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8004e12:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8004e16:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8004e1a:	460b      	mov	r3, r1
 8004e1c:	18db      	adds	r3, r3, r3
 8004e1e:	653b      	str	r3, [r7, #80]	@ 0x50
 8004e20:	4613      	mov	r3, r2
 8004e22:	eb42 0303 	adc.w	r3, r2, r3
 8004e26:	657b      	str	r3, [r7, #84]	@ 0x54
 8004e28:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8004e2c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8004e30:	f7fb febc 	bl	8000bac <__aeabi_uldivmod>
 8004e34:	4602      	mov	r2, r0
 8004e36:	460b      	mov	r3, r1
 8004e38:	4b61      	ldr	r3, [pc, #388]	@ (8004fc0 <UART_SetConfig+0x2d4>)
 8004e3a:	fba3 2302 	umull	r2, r3, r3, r2
 8004e3e:	095b      	lsrs	r3, r3, #5
 8004e40:	011c      	lsls	r4, r3, #4
 8004e42:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004e46:	2200      	movs	r2, #0
 8004e48:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004e4c:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8004e50:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8004e54:	4642      	mov	r2, r8
 8004e56:	464b      	mov	r3, r9
 8004e58:	1891      	adds	r1, r2, r2
 8004e5a:	64b9      	str	r1, [r7, #72]	@ 0x48
 8004e5c:	415b      	adcs	r3, r3
 8004e5e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004e60:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8004e64:	4641      	mov	r1, r8
 8004e66:	eb12 0a01 	adds.w	sl, r2, r1
 8004e6a:	4649      	mov	r1, r9
 8004e6c:	eb43 0b01 	adc.w	fp, r3, r1
 8004e70:	f04f 0200 	mov.w	r2, #0
 8004e74:	f04f 0300 	mov.w	r3, #0
 8004e78:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004e7c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004e80:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004e84:	4692      	mov	sl, r2
 8004e86:	469b      	mov	fp, r3
 8004e88:	4643      	mov	r3, r8
 8004e8a:	eb1a 0303 	adds.w	r3, sl, r3
 8004e8e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004e92:	464b      	mov	r3, r9
 8004e94:	eb4b 0303 	adc.w	r3, fp, r3
 8004e98:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8004e9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004ea0:	685b      	ldr	r3, [r3, #4]
 8004ea2:	2200      	movs	r2, #0
 8004ea4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004ea8:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8004eac:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8004eb0:	460b      	mov	r3, r1
 8004eb2:	18db      	adds	r3, r3, r3
 8004eb4:	643b      	str	r3, [r7, #64]	@ 0x40
 8004eb6:	4613      	mov	r3, r2
 8004eb8:	eb42 0303 	adc.w	r3, r2, r3
 8004ebc:	647b      	str	r3, [r7, #68]	@ 0x44
 8004ebe:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8004ec2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8004ec6:	f7fb fe71 	bl	8000bac <__aeabi_uldivmod>
 8004eca:	4602      	mov	r2, r0
 8004ecc:	460b      	mov	r3, r1
 8004ece:	4611      	mov	r1, r2
 8004ed0:	4b3b      	ldr	r3, [pc, #236]	@ (8004fc0 <UART_SetConfig+0x2d4>)
 8004ed2:	fba3 2301 	umull	r2, r3, r3, r1
 8004ed6:	095b      	lsrs	r3, r3, #5
 8004ed8:	2264      	movs	r2, #100	@ 0x64
 8004eda:	fb02 f303 	mul.w	r3, r2, r3
 8004ede:	1acb      	subs	r3, r1, r3
 8004ee0:	00db      	lsls	r3, r3, #3
 8004ee2:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8004ee6:	4b36      	ldr	r3, [pc, #216]	@ (8004fc0 <UART_SetConfig+0x2d4>)
 8004ee8:	fba3 2302 	umull	r2, r3, r3, r2
 8004eec:	095b      	lsrs	r3, r3, #5
 8004eee:	005b      	lsls	r3, r3, #1
 8004ef0:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8004ef4:	441c      	add	r4, r3
 8004ef6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004efa:	2200      	movs	r2, #0
 8004efc:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004f00:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8004f04:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8004f08:	4642      	mov	r2, r8
 8004f0a:	464b      	mov	r3, r9
 8004f0c:	1891      	adds	r1, r2, r2
 8004f0e:	63b9      	str	r1, [r7, #56]	@ 0x38
 8004f10:	415b      	adcs	r3, r3
 8004f12:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004f14:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8004f18:	4641      	mov	r1, r8
 8004f1a:	1851      	adds	r1, r2, r1
 8004f1c:	6339      	str	r1, [r7, #48]	@ 0x30
 8004f1e:	4649      	mov	r1, r9
 8004f20:	414b      	adcs	r3, r1
 8004f22:	637b      	str	r3, [r7, #52]	@ 0x34
 8004f24:	f04f 0200 	mov.w	r2, #0
 8004f28:	f04f 0300 	mov.w	r3, #0
 8004f2c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8004f30:	4659      	mov	r1, fp
 8004f32:	00cb      	lsls	r3, r1, #3
 8004f34:	4651      	mov	r1, sl
 8004f36:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004f3a:	4651      	mov	r1, sl
 8004f3c:	00ca      	lsls	r2, r1, #3
 8004f3e:	4610      	mov	r0, r2
 8004f40:	4619      	mov	r1, r3
 8004f42:	4603      	mov	r3, r0
 8004f44:	4642      	mov	r2, r8
 8004f46:	189b      	adds	r3, r3, r2
 8004f48:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004f4c:	464b      	mov	r3, r9
 8004f4e:	460a      	mov	r2, r1
 8004f50:	eb42 0303 	adc.w	r3, r2, r3
 8004f54:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004f58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004f5c:	685b      	ldr	r3, [r3, #4]
 8004f5e:	2200      	movs	r2, #0
 8004f60:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8004f64:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8004f68:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8004f6c:	460b      	mov	r3, r1
 8004f6e:	18db      	adds	r3, r3, r3
 8004f70:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004f72:	4613      	mov	r3, r2
 8004f74:	eb42 0303 	adc.w	r3, r2, r3
 8004f78:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004f7a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004f7e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8004f82:	f7fb fe13 	bl	8000bac <__aeabi_uldivmod>
 8004f86:	4602      	mov	r2, r0
 8004f88:	460b      	mov	r3, r1
 8004f8a:	4b0d      	ldr	r3, [pc, #52]	@ (8004fc0 <UART_SetConfig+0x2d4>)
 8004f8c:	fba3 1302 	umull	r1, r3, r3, r2
 8004f90:	095b      	lsrs	r3, r3, #5
 8004f92:	2164      	movs	r1, #100	@ 0x64
 8004f94:	fb01 f303 	mul.w	r3, r1, r3
 8004f98:	1ad3      	subs	r3, r2, r3
 8004f9a:	00db      	lsls	r3, r3, #3
 8004f9c:	3332      	adds	r3, #50	@ 0x32
 8004f9e:	4a08      	ldr	r2, [pc, #32]	@ (8004fc0 <UART_SetConfig+0x2d4>)
 8004fa0:	fba2 2303 	umull	r2, r3, r2, r3
 8004fa4:	095b      	lsrs	r3, r3, #5
 8004fa6:	f003 0207 	and.w	r2, r3, #7
 8004faa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	4422      	add	r2, r4
 8004fb2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004fb4:	e106      	b.n	80051c4 <UART_SetConfig+0x4d8>
 8004fb6:	bf00      	nop
 8004fb8:	40011000 	.word	0x40011000
 8004fbc:	40011400 	.word	0x40011400
 8004fc0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004fc4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004fc8:	2200      	movs	r2, #0
 8004fca:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8004fce:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8004fd2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8004fd6:	4642      	mov	r2, r8
 8004fd8:	464b      	mov	r3, r9
 8004fda:	1891      	adds	r1, r2, r2
 8004fdc:	6239      	str	r1, [r7, #32]
 8004fde:	415b      	adcs	r3, r3
 8004fe0:	627b      	str	r3, [r7, #36]	@ 0x24
 8004fe2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004fe6:	4641      	mov	r1, r8
 8004fe8:	1854      	adds	r4, r2, r1
 8004fea:	4649      	mov	r1, r9
 8004fec:	eb43 0501 	adc.w	r5, r3, r1
 8004ff0:	f04f 0200 	mov.w	r2, #0
 8004ff4:	f04f 0300 	mov.w	r3, #0
 8004ff8:	00eb      	lsls	r3, r5, #3
 8004ffa:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004ffe:	00e2      	lsls	r2, r4, #3
 8005000:	4614      	mov	r4, r2
 8005002:	461d      	mov	r5, r3
 8005004:	4643      	mov	r3, r8
 8005006:	18e3      	adds	r3, r4, r3
 8005008:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800500c:	464b      	mov	r3, r9
 800500e:	eb45 0303 	adc.w	r3, r5, r3
 8005012:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8005016:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800501a:	685b      	ldr	r3, [r3, #4]
 800501c:	2200      	movs	r2, #0
 800501e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8005022:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8005026:	f04f 0200 	mov.w	r2, #0
 800502a:	f04f 0300 	mov.w	r3, #0
 800502e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8005032:	4629      	mov	r1, r5
 8005034:	008b      	lsls	r3, r1, #2
 8005036:	4621      	mov	r1, r4
 8005038:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800503c:	4621      	mov	r1, r4
 800503e:	008a      	lsls	r2, r1, #2
 8005040:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8005044:	f7fb fdb2 	bl	8000bac <__aeabi_uldivmod>
 8005048:	4602      	mov	r2, r0
 800504a:	460b      	mov	r3, r1
 800504c:	4b60      	ldr	r3, [pc, #384]	@ (80051d0 <UART_SetConfig+0x4e4>)
 800504e:	fba3 2302 	umull	r2, r3, r3, r2
 8005052:	095b      	lsrs	r3, r3, #5
 8005054:	011c      	lsls	r4, r3, #4
 8005056:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800505a:	2200      	movs	r2, #0
 800505c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8005060:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8005064:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8005068:	4642      	mov	r2, r8
 800506a:	464b      	mov	r3, r9
 800506c:	1891      	adds	r1, r2, r2
 800506e:	61b9      	str	r1, [r7, #24]
 8005070:	415b      	adcs	r3, r3
 8005072:	61fb      	str	r3, [r7, #28]
 8005074:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005078:	4641      	mov	r1, r8
 800507a:	1851      	adds	r1, r2, r1
 800507c:	6139      	str	r1, [r7, #16]
 800507e:	4649      	mov	r1, r9
 8005080:	414b      	adcs	r3, r1
 8005082:	617b      	str	r3, [r7, #20]
 8005084:	f04f 0200 	mov.w	r2, #0
 8005088:	f04f 0300 	mov.w	r3, #0
 800508c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005090:	4659      	mov	r1, fp
 8005092:	00cb      	lsls	r3, r1, #3
 8005094:	4651      	mov	r1, sl
 8005096:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800509a:	4651      	mov	r1, sl
 800509c:	00ca      	lsls	r2, r1, #3
 800509e:	4610      	mov	r0, r2
 80050a0:	4619      	mov	r1, r3
 80050a2:	4603      	mov	r3, r0
 80050a4:	4642      	mov	r2, r8
 80050a6:	189b      	adds	r3, r3, r2
 80050a8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80050ac:	464b      	mov	r3, r9
 80050ae:	460a      	mov	r2, r1
 80050b0:	eb42 0303 	adc.w	r3, r2, r3
 80050b4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80050b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80050bc:	685b      	ldr	r3, [r3, #4]
 80050be:	2200      	movs	r2, #0
 80050c0:	67bb      	str	r3, [r7, #120]	@ 0x78
 80050c2:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80050c4:	f04f 0200 	mov.w	r2, #0
 80050c8:	f04f 0300 	mov.w	r3, #0
 80050cc:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80050d0:	4649      	mov	r1, r9
 80050d2:	008b      	lsls	r3, r1, #2
 80050d4:	4641      	mov	r1, r8
 80050d6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80050da:	4641      	mov	r1, r8
 80050dc:	008a      	lsls	r2, r1, #2
 80050de:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80050e2:	f7fb fd63 	bl	8000bac <__aeabi_uldivmod>
 80050e6:	4602      	mov	r2, r0
 80050e8:	460b      	mov	r3, r1
 80050ea:	4611      	mov	r1, r2
 80050ec:	4b38      	ldr	r3, [pc, #224]	@ (80051d0 <UART_SetConfig+0x4e4>)
 80050ee:	fba3 2301 	umull	r2, r3, r3, r1
 80050f2:	095b      	lsrs	r3, r3, #5
 80050f4:	2264      	movs	r2, #100	@ 0x64
 80050f6:	fb02 f303 	mul.w	r3, r2, r3
 80050fa:	1acb      	subs	r3, r1, r3
 80050fc:	011b      	lsls	r3, r3, #4
 80050fe:	3332      	adds	r3, #50	@ 0x32
 8005100:	4a33      	ldr	r2, [pc, #204]	@ (80051d0 <UART_SetConfig+0x4e4>)
 8005102:	fba2 2303 	umull	r2, r3, r2, r3
 8005106:	095b      	lsrs	r3, r3, #5
 8005108:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800510c:	441c      	add	r4, r3
 800510e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005112:	2200      	movs	r2, #0
 8005114:	673b      	str	r3, [r7, #112]	@ 0x70
 8005116:	677a      	str	r2, [r7, #116]	@ 0x74
 8005118:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 800511c:	4642      	mov	r2, r8
 800511e:	464b      	mov	r3, r9
 8005120:	1891      	adds	r1, r2, r2
 8005122:	60b9      	str	r1, [r7, #8]
 8005124:	415b      	adcs	r3, r3
 8005126:	60fb      	str	r3, [r7, #12]
 8005128:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800512c:	4641      	mov	r1, r8
 800512e:	1851      	adds	r1, r2, r1
 8005130:	6039      	str	r1, [r7, #0]
 8005132:	4649      	mov	r1, r9
 8005134:	414b      	adcs	r3, r1
 8005136:	607b      	str	r3, [r7, #4]
 8005138:	f04f 0200 	mov.w	r2, #0
 800513c:	f04f 0300 	mov.w	r3, #0
 8005140:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005144:	4659      	mov	r1, fp
 8005146:	00cb      	lsls	r3, r1, #3
 8005148:	4651      	mov	r1, sl
 800514a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800514e:	4651      	mov	r1, sl
 8005150:	00ca      	lsls	r2, r1, #3
 8005152:	4610      	mov	r0, r2
 8005154:	4619      	mov	r1, r3
 8005156:	4603      	mov	r3, r0
 8005158:	4642      	mov	r2, r8
 800515a:	189b      	adds	r3, r3, r2
 800515c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800515e:	464b      	mov	r3, r9
 8005160:	460a      	mov	r2, r1
 8005162:	eb42 0303 	adc.w	r3, r2, r3
 8005166:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005168:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800516c:	685b      	ldr	r3, [r3, #4]
 800516e:	2200      	movs	r2, #0
 8005170:	663b      	str	r3, [r7, #96]	@ 0x60
 8005172:	667a      	str	r2, [r7, #100]	@ 0x64
 8005174:	f04f 0200 	mov.w	r2, #0
 8005178:	f04f 0300 	mov.w	r3, #0
 800517c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8005180:	4649      	mov	r1, r9
 8005182:	008b      	lsls	r3, r1, #2
 8005184:	4641      	mov	r1, r8
 8005186:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800518a:	4641      	mov	r1, r8
 800518c:	008a      	lsls	r2, r1, #2
 800518e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8005192:	f7fb fd0b 	bl	8000bac <__aeabi_uldivmod>
 8005196:	4602      	mov	r2, r0
 8005198:	460b      	mov	r3, r1
 800519a:	4b0d      	ldr	r3, [pc, #52]	@ (80051d0 <UART_SetConfig+0x4e4>)
 800519c:	fba3 1302 	umull	r1, r3, r3, r2
 80051a0:	095b      	lsrs	r3, r3, #5
 80051a2:	2164      	movs	r1, #100	@ 0x64
 80051a4:	fb01 f303 	mul.w	r3, r1, r3
 80051a8:	1ad3      	subs	r3, r2, r3
 80051aa:	011b      	lsls	r3, r3, #4
 80051ac:	3332      	adds	r3, #50	@ 0x32
 80051ae:	4a08      	ldr	r2, [pc, #32]	@ (80051d0 <UART_SetConfig+0x4e4>)
 80051b0:	fba2 2303 	umull	r2, r3, r2, r3
 80051b4:	095b      	lsrs	r3, r3, #5
 80051b6:	f003 020f 	and.w	r2, r3, #15
 80051ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	4422      	add	r2, r4
 80051c2:	609a      	str	r2, [r3, #8]
}
 80051c4:	bf00      	nop
 80051c6:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80051ca:	46bd      	mov	sp, r7
 80051cc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80051d0:	51eb851f 	.word	0x51eb851f

080051d4 <siprintf>:
 80051d4:	b40e      	push	{r1, r2, r3}
 80051d6:	b510      	push	{r4, lr}
 80051d8:	b09d      	sub	sp, #116	@ 0x74
 80051da:	ab1f      	add	r3, sp, #124	@ 0x7c
 80051dc:	9002      	str	r0, [sp, #8]
 80051de:	9006      	str	r0, [sp, #24]
 80051e0:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80051e4:	480a      	ldr	r0, [pc, #40]	@ (8005210 <siprintf+0x3c>)
 80051e6:	9107      	str	r1, [sp, #28]
 80051e8:	9104      	str	r1, [sp, #16]
 80051ea:	490a      	ldr	r1, [pc, #40]	@ (8005214 <siprintf+0x40>)
 80051ec:	f853 2b04 	ldr.w	r2, [r3], #4
 80051f0:	9105      	str	r1, [sp, #20]
 80051f2:	2400      	movs	r4, #0
 80051f4:	a902      	add	r1, sp, #8
 80051f6:	6800      	ldr	r0, [r0, #0]
 80051f8:	9301      	str	r3, [sp, #4]
 80051fa:	941b      	str	r4, [sp, #108]	@ 0x6c
 80051fc:	f000 f994 	bl	8005528 <_svfiprintf_r>
 8005200:	9b02      	ldr	r3, [sp, #8]
 8005202:	701c      	strb	r4, [r3, #0]
 8005204:	b01d      	add	sp, #116	@ 0x74
 8005206:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800520a:	b003      	add	sp, #12
 800520c:	4770      	bx	lr
 800520e:	bf00      	nop
 8005210:	20000024 	.word	0x20000024
 8005214:	ffff0208 	.word	0xffff0208

08005218 <memset>:
 8005218:	4402      	add	r2, r0
 800521a:	4603      	mov	r3, r0
 800521c:	4293      	cmp	r3, r2
 800521e:	d100      	bne.n	8005222 <memset+0xa>
 8005220:	4770      	bx	lr
 8005222:	f803 1b01 	strb.w	r1, [r3], #1
 8005226:	e7f9      	b.n	800521c <memset+0x4>

08005228 <__errno>:
 8005228:	4b01      	ldr	r3, [pc, #4]	@ (8005230 <__errno+0x8>)
 800522a:	6818      	ldr	r0, [r3, #0]
 800522c:	4770      	bx	lr
 800522e:	bf00      	nop
 8005230:	20000024 	.word	0x20000024

08005234 <__libc_init_array>:
 8005234:	b570      	push	{r4, r5, r6, lr}
 8005236:	4d0d      	ldr	r5, [pc, #52]	@ (800526c <__libc_init_array+0x38>)
 8005238:	4c0d      	ldr	r4, [pc, #52]	@ (8005270 <__libc_init_array+0x3c>)
 800523a:	1b64      	subs	r4, r4, r5
 800523c:	10a4      	asrs	r4, r4, #2
 800523e:	2600      	movs	r6, #0
 8005240:	42a6      	cmp	r6, r4
 8005242:	d109      	bne.n	8005258 <__libc_init_array+0x24>
 8005244:	4d0b      	ldr	r5, [pc, #44]	@ (8005274 <__libc_init_array+0x40>)
 8005246:	4c0c      	ldr	r4, [pc, #48]	@ (8005278 <__libc_init_array+0x44>)
 8005248:	f001 fcd2 	bl	8006bf0 <_init>
 800524c:	1b64      	subs	r4, r4, r5
 800524e:	10a4      	asrs	r4, r4, #2
 8005250:	2600      	movs	r6, #0
 8005252:	42a6      	cmp	r6, r4
 8005254:	d105      	bne.n	8005262 <__libc_init_array+0x2e>
 8005256:	bd70      	pop	{r4, r5, r6, pc}
 8005258:	f855 3b04 	ldr.w	r3, [r5], #4
 800525c:	4798      	blx	r3
 800525e:	3601      	adds	r6, #1
 8005260:	e7ee      	b.n	8005240 <__libc_init_array+0xc>
 8005262:	f855 3b04 	ldr.w	r3, [r5], #4
 8005266:	4798      	blx	r3
 8005268:	3601      	adds	r6, #1
 800526a:	e7f2      	b.n	8005252 <__libc_init_array+0x1e>
 800526c:	08006e78 	.word	0x08006e78
 8005270:	08006e78 	.word	0x08006e78
 8005274:	08006e78 	.word	0x08006e78
 8005278:	08006e7c 	.word	0x08006e7c

0800527c <__retarget_lock_acquire_recursive>:
 800527c:	4770      	bx	lr

0800527e <__retarget_lock_release_recursive>:
 800527e:	4770      	bx	lr

08005280 <_free_r>:
 8005280:	b538      	push	{r3, r4, r5, lr}
 8005282:	4605      	mov	r5, r0
 8005284:	2900      	cmp	r1, #0
 8005286:	d041      	beq.n	800530c <_free_r+0x8c>
 8005288:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800528c:	1f0c      	subs	r4, r1, #4
 800528e:	2b00      	cmp	r3, #0
 8005290:	bfb8      	it	lt
 8005292:	18e4      	addlt	r4, r4, r3
 8005294:	f000 f8e0 	bl	8005458 <__malloc_lock>
 8005298:	4a1d      	ldr	r2, [pc, #116]	@ (8005310 <_free_r+0x90>)
 800529a:	6813      	ldr	r3, [r2, #0]
 800529c:	b933      	cbnz	r3, 80052ac <_free_r+0x2c>
 800529e:	6063      	str	r3, [r4, #4]
 80052a0:	6014      	str	r4, [r2, #0]
 80052a2:	4628      	mov	r0, r5
 80052a4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80052a8:	f000 b8dc 	b.w	8005464 <__malloc_unlock>
 80052ac:	42a3      	cmp	r3, r4
 80052ae:	d908      	bls.n	80052c2 <_free_r+0x42>
 80052b0:	6820      	ldr	r0, [r4, #0]
 80052b2:	1821      	adds	r1, r4, r0
 80052b4:	428b      	cmp	r3, r1
 80052b6:	bf01      	itttt	eq
 80052b8:	6819      	ldreq	r1, [r3, #0]
 80052ba:	685b      	ldreq	r3, [r3, #4]
 80052bc:	1809      	addeq	r1, r1, r0
 80052be:	6021      	streq	r1, [r4, #0]
 80052c0:	e7ed      	b.n	800529e <_free_r+0x1e>
 80052c2:	461a      	mov	r2, r3
 80052c4:	685b      	ldr	r3, [r3, #4]
 80052c6:	b10b      	cbz	r3, 80052cc <_free_r+0x4c>
 80052c8:	42a3      	cmp	r3, r4
 80052ca:	d9fa      	bls.n	80052c2 <_free_r+0x42>
 80052cc:	6811      	ldr	r1, [r2, #0]
 80052ce:	1850      	adds	r0, r2, r1
 80052d0:	42a0      	cmp	r0, r4
 80052d2:	d10b      	bne.n	80052ec <_free_r+0x6c>
 80052d4:	6820      	ldr	r0, [r4, #0]
 80052d6:	4401      	add	r1, r0
 80052d8:	1850      	adds	r0, r2, r1
 80052da:	4283      	cmp	r3, r0
 80052dc:	6011      	str	r1, [r2, #0]
 80052de:	d1e0      	bne.n	80052a2 <_free_r+0x22>
 80052e0:	6818      	ldr	r0, [r3, #0]
 80052e2:	685b      	ldr	r3, [r3, #4]
 80052e4:	6053      	str	r3, [r2, #4]
 80052e6:	4408      	add	r0, r1
 80052e8:	6010      	str	r0, [r2, #0]
 80052ea:	e7da      	b.n	80052a2 <_free_r+0x22>
 80052ec:	d902      	bls.n	80052f4 <_free_r+0x74>
 80052ee:	230c      	movs	r3, #12
 80052f0:	602b      	str	r3, [r5, #0]
 80052f2:	e7d6      	b.n	80052a2 <_free_r+0x22>
 80052f4:	6820      	ldr	r0, [r4, #0]
 80052f6:	1821      	adds	r1, r4, r0
 80052f8:	428b      	cmp	r3, r1
 80052fa:	bf04      	itt	eq
 80052fc:	6819      	ldreq	r1, [r3, #0]
 80052fe:	685b      	ldreq	r3, [r3, #4]
 8005300:	6063      	str	r3, [r4, #4]
 8005302:	bf04      	itt	eq
 8005304:	1809      	addeq	r1, r1, r0
 8005306:	6021      	streq	r1, [r4, #0]
 8005308:	6054      	str	r4, [r2, #4]
 800530a:	e7ca      	b.n	80052a2 <_free_r+0x22>
 800530c:	bd38      	pop	{r3, r4, r5, pc}
 800530e:	bf00      	nop
 8005310:	2000104c 	.word	0x2000104c

08005314 <sbrk_aligned>:
 8005314:	b570      	push	{r4, r5, r6, lr}
 8005316:	4e0f      	ldr	r6, [pc, #60]	@ (8005354 <sbrk_aligned+0x40>)
 8005318:	460c      	mov	r4, r1
 800531a:	6831      	ldr	r1, [r6, #0]
 800531c:	4605      	mov	r5, r0
 800531e:	b911      	cbnz	r1, 8005326 <sbrk_aligned+0x12>
 8005320:	f000 fba4 	bl	8005a6c <_sbrk_r>
 8005324:	6030      	str	r0, [r6, #0]
 8005326:	4621      	mov	r1, r4
 8005328:	4628      	mov	r0, r5
 800532a:	f000 fb9f 	bl	8005a6c <_sbrk_r>
 800532e:	1c43      	adds	r3, r0, #1
 8005330:	d103      	bne.n	800533a <sbrk_aligned+0x26>
 8005332:	f04f 34ff 	mov.w	r4, #4294967295
 8005336:	4620      	mov	r0, r4
 8005338:	bd70      	pop	{r4, r5, r6, pc}
 800533a:	1cc4      	adds	r4, r0, #3
 800533c:	f024 0403 	bic.w	r4, r4, #3
 8005340:	42a0      	cmp	r0, r4
 8005342:	d0f8      	beq.n	8005336 <sbrk_aligned+0x22>
 8005344:	1a21      	subs	r1, r4, r0
 8005346:	4628      	mov	r0, r5
 8005348:	f000 fb90 	bl	8005a6c <_sbrk_r>
 800534c:	3001      	adds	r0, #1
 800534e:	d1f2      	bne.n	8005336 <sbrk_aligned+0x22>
 8005350:	e7ef      	b.n	8005332 <sbrk_aligned+0x1e>
 8005352:	bf00      	nop
 8005354:	20001048 	.word	0x20001048

08005358 <_malloc_r>:
 8005358:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800535c:	1ccd      	adds	r5, r1, #3
 800535e:	f025 0503 	bic.w	r5, r5, #3
 8005362:	3508      	adds	r5, #8
 8005364:	2d0c      	cmp	r5, #12
 8005366:	bf38      	it	cc
 8005368:	250c      	movcc	r5, #12
 800536a:	2d00      	cmp	r5, #0
 800536c:	4606      	mov	r6, r0
 800536e:	db01      	blt.n	8005374 <_malloc_r+0x1c>
 8005370:	42a9      	cmp	r1, r5
 8005372:	d904      	bls.n	800537e <_malloc_r+0x26>
 8005374:	230c      	movs	r3, #12
 8005376:	6033      	str	r3, [r6, #0]
 8005378:	2000      	movs	r0, #0
 800537a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800537e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8005454 <_malloc_r+0xfc>
 8005382:	f000 f869 	bl	8005458 <__malloc_lock>
 8005386:	f8d8 3000 	ldr.w	r3, [r8]
 800538a:	461c      	mov	r4, r3
 800538c:	bb44      	cbnz	r4, 80053e0 <_malloc_r+0x88>
 800538e:	4629      	mov	r1, r5
 8005390:	4630      	mov	r0, r6
 8005392:	f7ff ffbf 	bl	8005314 <sbrk_aligned>
 8005396:	1c43      	adds	r3, r0, #1
 8005398:	4604      	mov	r4, r0
 800539a:	d158      	bne.n	800544e <_malloc_r+0xf6>
 800539c:	f8d8 4000 	ldr.w	r4, [r8]
 80053a0:	4627      	mov	r7, r4
 80053a2:	2f00      	cmp	r7, #0
 80053a4:	d143      	bne.n	800542e <_malloc_r+0xd6>
 80053a6:	2c00      	cmp	r4, #0
 80053a8:	d04b      	beq.n	8005442 <_malloc_r+0xea>
 80053aa:	6823      	ldr	r3, [r4, #0]
 80053ac:	4639      	mov	r1, r7
 80053ae:	4630      	mov	r0, r6
 80053b0:	eb04 0903 	add.w	r9, r4, r3
 80053b4:	f000 fb5a 	bl	8005a6c <_sbrk_r>
 80053b8:	4581      	cmp	r9, r0
 80053ba:	d142      	bne.n	8005442 <_malloc_r+0xea>
 80053bc:	6821      	ldr	r1, [r4, #0]
 80053be:	1a6d      	subs	r5, r5, r1
 80053c0:	4629      	mov	r1, r5
 80053c2:	4630      	mov	r0, r6
 80053c4:	f7ff ffa6 	bl	8005314 <sbrk_aligned>
 80053c8:	3001      	adds	r0, #1
 80053ca:	d03a      	beq.n	8005442 <_malloc_r+0xea>
 80053cc:	6823      	ldr	r3, [r4, #0]
 80053ce:	442b      	add	r3, r5
 80053d0:	6023      	str	r3, [r4, #0]
 80053d2:	f8d8 3000 	ldr.w	r3, [r8]
 80053d6:	685a      	ldr	r2, [r3, #4]
 80053d8:	bb62      	cbnz	r2, 8005434 <_malloc_r+0xdc>
 80053da:	f8c8 7000 	str.w	r7, [r8]
 80053de:	e00f      	b.n	8005400 <_malloc_r+0xa8>
 80053e0:	6822      	ldr	r2, [r4, #0]
 80053e2:	1b52      	subs	r2, r2, r5
 80053e4:	d420      	bmi.n	8005428 <_malloc_r+0xd0>
 80053e6:	2a0b      	cmp	r2, #11
 80053e8:	d917      	bls.n	800541a <_malloc_r+0xc2>
 80053ea:	1961      	adds	r1, r4, r5
 80053ec:	42a3      	cmp	r3, r4
 80053ee:	6025      	str	r5, [r4, #0]
 80053f0:	bf18      	it	ne
 80053f2:	6059      	strne	r1, [r3, #4]
 80053f4:	6863      	ldr	r3, [r4, #4]
 80053f6:	bf08      	it	eq
 80053f8:	f8c8 1000 	streq.w	r1, [r8]
 80053fc:	5162      	str	r2, [r4, r5]
 80053fe:	604b      	str	r3, [r1, #4]
 8005400:	4630      	mov	r0, r6
 8005402:	f000 f82f 	bl	8005464 <__malloc_unlock>
 8005406:	f104 000b 	add.w	r0, r4, #11
 800540a:	1d23      	adds	r3, r4, #4
 800540c:	f020 0007 	bic.w	r0, r0, #7
 8005410:	1ac2      	subs	r2, r0, r3
 8005412:	bf1c      	itt	ne
 8005414:	1a1b      	subne	r3, r3, r0
 8005416:	50a3      	strne	r3, [r4, r2]
 8005418:	e7af      	b.n	800537a <_malloc_r+0x22>
 800541a:	6862      	ldr	r2, [r4, #4]
 800541c:	42a3      	cmp	r3, r4
 800541e:	bf0c      	ite	eq
 8005420:	f8c8 2000 	streq.w	r2, [r8]
 8005424:	605a      	strne	r2, [r3, #4]
 8005426:	e7eb      	b.n	8005400 <_malloc_r+0xa8>
 8005428:	4623      	mov	r3, r4
 800542a:	6864      	ldr	r4, [r4, #4]
 800542c:	e7ae      	b.n	800538c <_malloc_r+0x34>
 800542e:	463c      	mov	r4, r7
 8005430:	687f      	ldr	r7, [r7, #4]
 8005432:	e7b6      	b.n	80053a2 <_malloc_r+0x4a>
 8005434:	461a      	mov	r2, r3
 8005436:	685b      	ldr	r3, [r3, #4]
 8005438:	42a3      	cmp	r3, r4
 800543a:	d1fb      	bne.n	8005434 <_malloc_r+0xdc>
 800543c:	2300      	movs	r3, #0
 800543e:	6053      	str	r3, [r2, #4]
 8005440:	e7de      	b.n	8005400 <_malloc_r+0xa8>
 8005442:	230c      	movs	r3, #12
 8005444:	6033      	str	r3, [r6, #0]
 8005446:	4630      	mov	r0, r6
 8005448:	f000 f80c 	bl	8005464 <__malloc_unlock>
 800544c:	e794      	b.n	8005378 <_malloc_r+0x20>
 800544e:	6005      	str	r5, [r0, #0]
 8005450:	e7d6      	b.n	8005400 <_malloc_r+0xa8>
 8005452:	bf00      	nop
 8005454:	2000104c 	.word	0x2000104c

08005458 <__malloc_lock>:
 8005458:	4801      	ldr	r0, [pc, #4]	@ (8005460 <__malloc_lock+0x8>)
 800545a:	f7ff bf0f 	b.w	800527c <__retarget_lock_acquire_recursive>
 800545e:	bf00      	nop
 8005460:	20001044 	.word	0x20001044

08005464 <__malloc_unlock>:
 8005464:	4801      	ldr	r0, [pc, #4]	@ (800546c <__malloc_unlock+0x8>)
 8005466:	f7ff bf0a 	b.w	800527e <__retarget_lock_release_recursive>
 800546a:	bf00      	nop
 800546c:	20001044 	.word	0x20001044

08005470 <__ssputs_r>:
 8005470:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005474:	688e      	ldr	r6, [r1, #8]
 8005476:	461f      	mov	r7, r3
 8005478:	42be      	cmp	r6, r7
 800547a:	680b      	ldr	r3, [r1, #0]
 800547c:	4682      	mov	sl, r0
 800547e:	460c      	mov	r4, r1
 8005480:	4690      	mov	r8, r2
 8005482:	d82d      	bhi.n	80054e0 <__ssputs_r+0x70>
 8005484:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8005488:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800548c:	d026      	beq.n	80054dc <__ssputs_r+0x6c>
 800548e:	6965      	ldr	r5, [r4, #20]
 8005490:	6909      	ldr	r1, [r1, #16]
 8005492:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005496:	eba3 0901 	sub.w	r9, r3, r1
 800549a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800549e:	1c7b      	adds	r3, r7, #1
 80054a0:	444b      	add	r3, r9
 80054a2:	106d      	asrs	r5, r5, #1
 80054a4:	429d      	cmp	r5, r3
 80054a6:	bf38      	it	cc
 80054a8:	461d      	movcc	r5, r3
 80054aa:	0553      	lsls	r3, r2, #21
 80054ac:	d527      	bpl.n	80054fe <__ssputs_r+0x8e>
 80054ae:	4629      	mov	r1, r5
 80054b0:	f7ff ff52 	bl	8005358 <_malloc_r>
 80054b4:	4606      	mov	r6, r0
 80054b6:	b360      	cbz	r0, 8005512 <__ssputs_r+0xa2>
 80054b8:	6921      	ldr	r1, [r4, #16]
 80054ba:	464a      	mov	r2, r9
 80054bc:	f000 fae6 	bl	8005a8c <memcpy>
 80054c0:	89a3      	ldrh	r3, [r4, #12]
 80054c2:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80054c6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80054ca:	81a3      	strh	r3, [r4, #12]
 80054cc:	6126      	str	r6, [r4, #16]
 80054ce:	6165      	str	r5, [r4, #20]
 80054d0:	444e      	add	r6, r9
 80054d2:	eba5 0509 	sub.w	r5, r5, r9
 80054d6:	6026      	str	r6, [r4, #0]
 80054d8:	60a5      	str	r5, [r4, #8]
 80054da:	463e      	mov	r6, r7
 80054dc:	42be      	cmp	r6, r7
 80054de:	d900      	bls.n	80054e2 <__ssputs_r+0x72>
 80054e0:	463e      	mov	r6, r7
 80054e2:	6820      	ldr	r0, [r4, #0]
 80054e4:	4632      	mov	r2, r6
 80054e6:	4641      	mov	r1, r8
 80054e8:	f000 faa6 	bl	8005a38 <memmove>
 80054ec:	68a3      	ldr	r3, [r4, #8]
 80054ee:	1b9b      	subs	r3, r3, r6
 80054f0:	60a3      	str	r3, [r4, #8]
 80054f2:	6823      	ldr	r3, [r4, #0]
 80054f4:	4433      	add	r3, r6
 80054f6:	6023      	str	r3, [r4, #0]
 80054f8:	2000      	movs	r0, #0
 80054fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80054fe:	462a      	mov	r2, r5
 8005500:	f000 fad2 	bl	8005aa8 <_realloc_r>
 8005504:	4606      	mov	r6, r0
 8005506:	2800      	cmp	r0, #0
 8005508:	d1e0      	bne.n	80054cc <__ssputs_r+0x5c>
 800550a:	6921      	ldr	r1, [r4, #16]
 800550c:	4650      	mov	r0, sl
 800550e:	f7ff feb7 	bl	8005280 <_free_r>
 8005512:	230c      	movs	r3, #12
 8005514:	f8ca 3000 	str.w	r3, [sl]
 8005518:	89a3      	ldrh	r3, [r4, #12]
 800551a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800551e:	81a3      	strh	r3, [r4, #12]
 8005520:	f04f 30ff 	mov.w	r0, #4294967295
 8005524:	e7e9      	b.n	80054fa <__ssputs_r+0x8a>
	...

08005528 <_svfiprintf_r>:
 8005528:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800552c:	4698      	mov	r8, r3
 800552e:	898b      	ldrh	r3, [r1, #12]
 8005530:	061b      	lsls	r3, r3, #24
 8005532:	b09d      	sub	sp, #116	@ 0x74
 8005534:	4607      	mov	r7, r0
 8005536:	460d      	mov	r5, r1
 8005538:	4614      	mov	r4, r2
 800553a:	d510      	bpl.n	800555e <_svfiprintf_r+0x36>
 800553c:	690b      	ldr	r3, [r1, #16]
 800553e:	b973      	cbnz	r3, 800555e <_svfiprintf_r+0x36>
 8005540:	2140      	movs	r1, #64	@ 0x40
 8005542:	f7ff ff09 	bl	8005358 <_malloc_r>
 8005546:	6028      	str	r0, [r5, #0]
 8005548:	6128      	str	r0, [r5, #16]
 800554a:	b930      	cbnz	r0, 800555a <_svfiprintf_r+0x32>
 800554c:	230c      	movs	r3, #12
 800554e:	603b      	str	r3, [r7, #0]
 8005550:	f04f 30ff 	mov.w	r0, #4294967295
 8005554:	b01d      	add	sp, #116	@ 0x74
 8005556:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800555a:	2340      	movs	r3, #64	@ 0x40
 800555c:	616b      	str	r3, [r5, #20]
 800555e:	2300      	movs	r3, #0
 8005560:	9309      	str	r3, [sp, #36]	@ 0x24
 8005562:	2320      	movs	r3, #32
 8005564:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8005568:	f8cd 800c 	str.w	r8, [sp, #12]
 800556c:	2330      	movs	r3, #48	@ 0x30
 800556e:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800570c <_svfiprintf_r+0x1e4>
 8005572:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8005576:	f04f 0901 	mov.w	r9, #1
 800557a:	4623      	mov	r3, r4
 800557c:	469a      	mov	sl, r3
 800557e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005582:	b10a      	cbz	r2, 8005588 <_svfiprintf_r+0x60>
 8005584:	2a25      	cmp	r2, #37	@ 0x25
 8005586:	d1f9      	bne.n	800557c <_svfiprintf_r+0x54>
 8005588:	ebba 0b04 	subs.w	fp, sl, r4
 800558c:	d00b      	beq.n	80055a6 <_svfiprintf_r+0x7e>
 800558e:	465b      	mov	r3, fp
 8005590:	4622      	mov	r2, r4
 8005592:	4629      	mov	r1, r5
 8005594:	4638      	mov	r0, r7
 8005596:	f7ff ff6b 	bl	8005470 <__ssputs_r>
 800559a:	3001      	adds	r0, #1
 800559c:	f000 80a7 	beq.w	80056ee <_svfiprintf_r+0x1c6>
 80055a0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80055a2:	445a      	add	r2, fp
 80055a4:	9209      	str	r2, [sp, #36]	@ 0x24
 80055a6:	f89a 3000 	ldrb.w	r3, [sl]
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	f000 809f 	beq.w	80056ee <_svfiprintf_r+0x1c6>
 80055b0:	2300      	movs	r3, #0
 80055b2:	f04f 32ff 	mov.w	r2, #4294967295
 80055b6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80055ba:	f10a 0a01 	add.w	sl, sl, #1
 80055be:	9304      	str	r3, [sp, #16]
 80055c0:	9307      	str	r3, [sp, #28]
 80055c2:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80055c6:	931a      	str	r3, [sp, #104]	@ 0x68
 80055c8:	4654      	mov	r4, sl
 80055ca:	2205      	movs	r2, #5
 80055cc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80055d0:	484e      	ldr	r0, [pc, #312]	@ (800570c <_svfiprintf_r+0x1e4>)
 80055d2:	f7fa fdfd 	bl	80001d0 <memchr>
 80055d6:	9a04      	ldr	r2, [sp, #16]
 80055d8:	b9d8      	cbnz	r0, 8005612 <_svfiprintf_r+0xea>
 80055da:	06d0      	lsls	r0, r2, #27
 80055dc:	bf44      	itt	mi
 80055de:	2320      	movmi	r3, #32
 80055e0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80055e4:	0711      	lsls	r1, r2, #28
 80055e6:	bf44      	itt	mi
 80055e8:	232b      	movmi	r3, #43	@ 0x2b
 80055ea:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80055ee:	f89a 3000 	ldrb.w	r3, [sl]
 80055f2:	2b2a      	cmp	r3, #42	@ 0x2a
 80055f4:	d015      	beq.n	8005622 <_svfiprintf_r+0xfa>
 80055f6:	9a07      	ldr	r2, [sp, #28]
 80055f8:	4654      	mov	r4, sl
 80055fa:	2000      	movs	r0, #0
 80055fc:	f04f 0c0a 	mov.w	ip, #10
 8005600:	4621      	mov	r1, r4
 8005602:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005606:	3b30      	subs	r3, #48	@ 0x30
 8005608:	2b09      	cmp	r3, #9
 800560a:	d94b      	bls.n	80056a4 <_svfiprintf_r+0x17c>
 800560c:	b1b0      	cbz	r0, 800563c <_svfiprintf_r+0x114>
 800560e:	9207      	str	r2, [sp, #28]
 8005610:	e014      	b.n	800563c <_svfiprintf_r+0x114>
 8005612:	eba0 0308 	sub.w	r3, r0, r8
 8005616:	fa09 f303 	lsl.w	r3, r9, r3
 800561a:	4313      	orrs	r3, r2
 800561c:	9304      	str	r3, [sp, #16]
 800561e:	46a2      	mov	sl, r4
 8005620:	e7d2      	b.n	80055c8 <_svfiprintf_r+0xa0>
 8005622:	9b03      	ldr	r3, [sp, #12]
 8005624:	1d19      	adds	r1, r3, #4
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	9103      	str	r1, [sp, #12]
 800562a:	2b00      	cmp	r3, #0
 800562c:	bfbb      	ittet	lt
 800562e:	425b      	neglt	r3, r3
 8005630:	f042 0202 	orrlt.w	r2, r2, #2
 8005634:	9307      	strge	r3, [sp, #28]
 8005636:	9307      	strlt	r3, [sp, #28]
 8005638:	bfb8      	it	lt
 800563a:	9204      	strlt	r2, [sp, #16]
 800563c:	7823      	ldrb	r3, [r4, #0]
 800563e:	2b2e      	cmp	r3, #46	@ 0x2e
 8005640:	d10a      	bne.n	8005658 <_svfiprintf_r+0x130>
 8005642:	7863      	ldrb	r3, [r4, #1]
 8005644:	2b2a      	cmp	r3, #42	@ 0x2a
 8005646:	d132      	bne.n	80056ae <_svfiprintf_r+0x186>
 8005648:	9b03      	ldr	r3, [sp, #12]
 800564a:	1d1a      	adds	r2, r3, #4
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	9203      	str	r2, [sp, #12]
 8005650:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8005654:	3402      	adds	r4, #2
 8005656:	9305      	str	r3, [sp, #20]
 8005658:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800571c <_svfiprintf_r+0x1f4>
 800565c:	7821      	ldrb	r1, [r4, #0]
 800565e:	2203      	movs	r2, #3
 8005660:	4650      	mov	r0, sl
 8005662:	f7fa fdb5 	bl	80001d0 <memchr>
 8005666:	b138      	cbz	r0, 8005678 <_svfiprintf_r+0x150>
 8005668:	9b04      	ldr	r3, [sp, #16]
 800566a:	eba0 000a 	sub.w	r0, r0, sl
 800566e:	2240      	movs	r2, #64	@ 0x40
 8005670:	4082      	lsls	r2, r0
 8005672:	4313      	orrs	r3, r2
 8005674:	3401      	adds	r4, #1
 8005676:	9304      	str	r3, [sp, #16]
 8005678:	f814 1b01 	ldrb.w	r1, [r4], #1
 800567c:	4824      	ldr	r0, [pc, #144]	@ (8005710 <_svfiprintf_r+0x1e8>)
 800567e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8005682:	2206      	movs	r2, #6
 8005684:	f7fa fda4 	bl	80001d0 <memchr>
 8005688:	2800      	cmp	r0, #0
 800568a:	d036      	beq.n	80056fa <_svfiprintf_r+0x1d2>
 800568c:	4b21      	ldr	r3, [pc, #132]	@ (8005714 <_svfiprintf_r+0x1ec>)
 800568e:	bb1b      	cbnz	r3, 80056d8 <_svfiprintf_r+0x1b0>
 8005690:	9b03      	ldr	r3, [sp, #12]
 8005692:	3307      	adds	r3, #7
 8005694:	f023 0307 	bic.w	r3, r3, #7
 8005698:	3308      	adds	r3, #8
 800569a:	9303      	str	r3, [sp, #12]
 800569c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800569e:	4433      	add	r3, r6
 80056a0:	9309      	str	r3, [sp, #36]	@ 0x24
 80056a2:	e76a      	b.n	800557a <_svfiprintf_r+0x52>
 80056a4:	fb0c 3202 	mla	r2, ip, r2, r3
 80056a8:	460c      	mov	r4, r1
 80056aa:	2001      	movs	r0, #1
 80056ac:	e7a8      	b.n	8005600 <_svfiprintf_r+0xd8>
 80056ae:	2300      	movs	r3, #0
 80056b0:	3401      	adds	r4, #1
 80056b2:	9305      	str	r3, [sp, #20]
 80056b4:	4619      	mov	r1, r3
 80056b6:	f04f 0c0a 	mov.w	ip, #10
 80056ba:	4620      	mov	r0, r4
 80056bc:	f810 2b01 	ldrb.w	r2, [r0], #1
 80056c0:	3a30      	subs	r2, #48	@ 0x30
 80056c2:	2a09      	cmp	r2, #9
 80056c4:	d903      	bls.n	80056ce <_svfiprintf_r+0x1a6>
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d0c6      	beq.n	8005658 <_svfiprintf_r+0x130>
 80056ca:	9105      	str	r1, [sp, #20]
 80056cc:	e7c4      	b.n	8005658 <_svfiprintf_r+0x130>
 80056ce:	fb0c 2101 	mla	r1, ip, r1, r2
 80056d2:	4604      	mov	r4, r0
 80056d4:	2301      	movs	r3, #1
 80056d6:	e7f0      	b.n	80056ba <_svfiprintf_r+0x192>
 80056d8:	ab03      	add	r3, sp, #12
 80056da:	9300      	str	r3, [sp, #0]
 80056dc:	462a      	mov	r2, r5
 80056de:	4b0e      	ldr	r3, [pc, #56]	@ (8005718 <_svfiprintf_r+0x1f0>)
 80056e0:	a904      	add	r1, sp, #16
 80056e2:	4638      	mov	r0, r7
 80056e4:	f3af 8000 	nop.w
 80056e8:	1c42      	adds	r2, r0, #1
 80056ea:	4606      	mov	r6, r0
 80056ec:	d1d6      	bne.n	800569c <_svfiprintf_r+0x174>
 80056ee:	89ab      	ldrh	r3, [r5, #12]
 80056f0:	065b      	lsls	r3, r3, #25
 80056f2:	f53f af2d 	bmi.w	8005550 <_svfiprintf_r+0x28>
 80056f6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80056f8:	e72c      	b.n	8005554 <_svfiprintf_r+0x2c>
 80056fa:	ab03      	add	r3, sp, #12
 80056fc:	9300      	str	r3, [sp, #0]
 80056fe:	462a      	mov	r2, r5
 8005700:	4b05      	ldr	r3, [pc, #20]	@ (8005718 <_svfiprintf_r+0x1f0>)
 8005702:	a904      	add	r1, sp, #16
 8005704:	4638      	mov	r0, r7
 8005706:	f000 f879 	bl	80057fc <_printf_i>
 800570a:	e7ed      	b.n	80056e8 <_svfiprintf_r+0x1c0>
 800570c:	08006c64 	.word	0x08006c64
 8005710:	08006c6e 	.word	0x08006c6e
 8005714:	00000000 	.word	0x00000000
 8005718:	08005471 	.word	0x08005471
 800571c:	08006c6a 	.word	0x08006c6a

08005720 <_printf_common>:
 8005720:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005724:	4616      	mov	r6, r2
 8005726:	4698      	mov	r8, r3
 8005728:	688a      	ldr	r2, [r1, #8]
 800572a:	690b      	ldr	r3, [r1, #16]
 800572c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005730:	4293      	cmp	r3, r2
 8005732:	bfb8      	it	lt
 8005734:	4613      	movlt	r3, r2
 8005736:	6033      	str	r3, [r6, #0]
 8005738:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800573c:	4607      	mov	r7, r0
 800573e:	460c      	mov	r4, r1
 8005740:	b10a      	cbz	r2, 8005746 <_printf_common+0x26>
 8005742:	3301      	adds	r3, #1
 8005744:	6033      	str	r3, [r6, #0]
 8005746:	6823      	ldr	r3, [r4, #0]
 8005748:	0699      	lsls	r1, r3, #26
 800574a:	bf42      	ittt	mi
 800574c:	6833      	ldrmi	r3, [r6, #0]
 800574e:	3302      	addmi	r3, #2
 8005750:	6033      	strmi	r3, [r6, #0]
 8005752:	6825      	ldr	r5, [r4, #0]
 8005754:	f015 0506 	ands.w	r5, r5, #6
 8005758:	d106      	bne.n	8005768 <_printf_common+0x48>
 800575a:	f104 0a19 	add.w	sl, r4, #25
 800575e:	68e3      	ldr	r3, [r4, #12]
 8005760:	6832      	ldr	r2, [r6, #0]
 8005762:	1a9b      	subs	r3, r3, r2
 8005764:	42ab      	cmp	r3, r5
 8005766:	dc26      	bgt.n	80057b6 <_printf_common+0x96>
 8005768:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800576c:	6822      	ldr	r2, [r4, #0]
 800576e:	3b00      	subs	r3, #0
 8005770:	bf18      	it	ne
 8005772:	2301      	movne	r3, #1
 8005774:	0692      	lsls	r2, r2, #26
 8005776:	d42b      	bmi.n	80057d0 <_printf_common+0xb0>
 8005778:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800577c:	4641      	mov	r1, r8
 800577e:	4638      	mov	r0, r7
 8005780:	47c8      	blx	r9
 8005782:	3001      	adds	r0, #1
 8005784:	d01e      	beq.n	80057c4 <_printf_common+0xa4>
 8005786:	6823      	ldr	r3, [r4, #0]
 8005788:	6922      	ldr	r2, [r4, #16]
 800578a:	f003 0306 	and.w	r3, r3, #6
 800578e:	2b04      	cmp	r3, #4
 8005790:	bf02      	ittt	eq
 8005792:	68e5      	ldreq	r5, [r4, #12]
 8005794:	6833      	ldreq	r3, [r6, #0]
 8005796:	1aed      	subeq	r5, r5, r3
 8005798:	68a3      	ldr	r3, [r4, #8]
 800579a:	bf0c      	ite	eq
 800579c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80057a0:	2500      	movne	r5, #0
 80057a2:	4293      	cmp	r3, r2
 80057a4:	bfc4      	itt	gt
 80057a6:	1a9b      	subgt	r3, r3, r2
 80057a8:	18ed      	addgt	r5, r5, r3
 80057aa:	2600      	movs	r6, #0
 80057ac:	341a      	adds	r4, #26
 80057ae:	42b5      	cmp	r5, r6
 80057b0:	d11a      	bne.n	80057e8 <_printf_common+0xc8>
 80057b2:	2000      	movs	r0, #0
 80057b4:	e008      	b.n	80057c8 <_printf_common+0xa8>
 80057b6:	2301      	movs	r3, #1
 80057b8:	4652      	mov	r2, sl
 80057ba:	4641      	mov	r1, r8
 80057bc:	4638      	mov	r0, r7
 80057be:	47c8      	blx	r9
 80057c0:	3001      	adds	r0, #1
 80057c2:	d103      	bne.n	80057cc <_printf_common+0xac>
 80057c4:	f04f 30ff 	mov.w	r0, #4294967295
 80057c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80057cc:	3501      	adds	r5, #1
 80057ce:	e7c6      	b.n	800575e <_printf_common+0x3e>
 80057d0:	18e1      	adds	r1, r4, r3
 80057d2:	1c5a      	adds	r2, r3, #1
 80057d4:	2030      	movs	r0, #48	@ 0x30
 80057d6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80057da:	4422      	add	r2, r4
 80057dc:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80057e0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80057e4:	3302      	adds	r3, #2
 80057e6:	e7c7      	b.n	8005778 <_printf_common+0x58>
 80057e8:	2301      	movs	r3, #1
 80057ea:	4622      	mov	r2, r4
 80057ec:	4641      	mov	r1, r8
 80057ee:	4638      	mov	r0, r7
 80057f0:	47c8      	blx	r9
 80057f2:	3001      	adds	r0, #1
 80057f4:	d0e6      	beq.n	80057c4 <_printf_common+0xa4>
 80057f6:	3601      	adds	r6, #1
 80057f8:	e7d9      	b.n	80057ae <_printf_common+0x8e>
	...

080057fc <_printf_i>:
 80057fc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005800:	7e0f      	ldrb	r7, [r1, #24]
 8005802:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8005804:	2f78      	cmp	r7, #120	@ 0x78
 8005806:	4691      	mov	r9, r2
 8005808:	4680      	mov	r8, r0
 800580a:	460c      	mov	r4, r1
 800580c:	469a      	mov	sl, r3
 800580e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8005812:	d807      	bhi.n	8005824 <_printf_i+0x28>
 8005814:	2f62      	cmp	r7, #98	@ 0x62
 8005816:	d80a      	bhi.n	800582e <_printf_i+0x32>
 8005818:	2f00      	cmp	r7, #0
 800581a:	f000 80d1 	beq.w	80059c0 <_printf_i+0x1c4>
 800581e:	2f58      	cmp	r7, #88	@ 0x58
 8005820:	f000 80b8 	beq.w	8005994 <_printf_i+0x198>
 8005824:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005828:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800582c:	e03a      	b.n	80058a4 <_printf_i+0xa8>
 800582e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8005832:	2b15      	cmp	r3, #21
 8005834:	d8f6      	bhi.n	8005824 <_printf_i+0x28>
 8005836:	a101      	add	r1, pc, #4	@ (adr r1, 800583c <_printf_i+0x40>)
 8005838:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800583c:	08005895 	.word	0x08005895
 8005840:	080058a9 	.word	0x080058a9
 8005844:	08005825 	.word	0x08005825
 8005848:	08005825 	.word	0x08005825
 800584c:	08005825 	.word	0x08005825
 8005850:	08005825 	.word	0x08005825
 8005854:	080058a9 	.word	0x080058a9
 8005858:	08005825 	.word	0x08005825
 800585c:	08005825 	.word	0x08005825
 8005860:	08005825 	.word	0x08005825
 8005864:	08005825 	.word	0x08005825
 8005868:	080059a7 	.word	0x080059a7
 800586c:	080058d3 	.word	0x080058d3
 8005870:	08005961 	.word	0x08005961
 8005874:	08005825 	.word	0x08005825
 8005878:	08005825 	.word	0x08005825
 800587c:	080059c9 	.word	0x080059c9
 8005880:	08005825 	.word	0x08005825
 8005884:	080058d3 	.word	0x080058d3
 8005888:	08005825 	.word	0x08005825
 800588c:	08005825 	.word	0x08005825
 8005890:	08005969 	.word	0x08005969
 8005894:	6833      	ldr	r3, [r6, #0]
 8005896:	1d1a      	adds	r2, r3, #4
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	6032      	str	r2, [r6, #0]
 800589c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80058a0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80058a4:	2301      	movs	r3, #1
 80058a6:	e09c      	b.n	80059e2 <_printf_i+0x1e6>
 80058a8:	6833      	ldr	r3, [r6, #0]
 80058aa:	6820      	ldr	r0, [r4, #0]
 80058ac:	1d19      	adds	r1, r3, #4
 80058ae:	6031      	str	r1, [r6, #0]
 80058b0:	0606      	lsls	r6, r0, #24
 80058b2:	d501      	bpl.n	80058b8 <_printf_i+0xbc>
 80058b4:	681d      	ldr	r5, [r3, #0]
 80058b6:	e003      	b.n	80058c0 <_printf_i+0xc4>
 80058b8:	0645      	lsls	r5, r0, #25
 80058ba:	d5fb      	bpl.n	80058b4 <_printf_i+0xb8>
 80058bc:	f9b3 5000 	ldrsh.w	r5, [r3]
 80058c0:	2d00      	cmp	r5, #0
 80058c2:	da03      	bge.n	80058cc <_printf_i+0xd0>
 80058c4:	232d      	movs	r3, #45	@ 0x2d
 80058c6:	426d      	negs	r5, r5
 80058c8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80058cc:	4858      	ldr	r0, [pc, #352]	@ (8005a30 <_printf_i+0x234>)
 80058ce:	230a      	movs	r3, #10
 80058d0:	e011      	b.n	80058f6 <_printf_i+0xfa>
 80058d2:	6821      	ldr	r1, [r4, #0]
 80058d4:	6833      	ldr	r3, [r6, #0]
 80058d6:	0608      	lsls	r0, r1, #24
 80058d8:	f853 5b04 	ldr.w	r5, [r3], #4
 80058dc:	d402      	bmi.n	80058e4 <_printf_i+0xe8>
 80058de:	0649      	lsls	r1, r1, #25
 80058e0:	bf48      	it	mi
 80058e2:	b2ad      	uxthmi	r5, r5
 80058e4:	2f6f      	cmp	r7, #111	@ 0x6f
 80058e6:	4852      	ldr	r0, [pc, #328]	@ (8005a30 <_printf_i+0x234>)
 80058e8:	6033      	str	r3, [r6, #0]
 80058ea:	bf14      	ite	ne
 80058ec:	230a      	movne	r3, #10
 80058ee:	2308      	moveq	r3, #8
 80058f0:	2100      	movs	r1, #0
 80058f2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80058f6:	6866      	ldr	r6, [r4, #4]
 80058f8:	60a6      	str	r6, [r4, #8]
 80058fa:	2e00      	cmp	r6, #0
 80058fc:	db05      	blt.n	800590a <_printf_i+0x10e>
 80058fe:	6821      	ldr	r1, [r4, #0]
 8005900:	432e      	orrs	r6, r5
 8005902:	f021 0104 	bic.w	r1, r1, #4
 8005906:	6021      	str	r1, [r4, #0]
 8005908:	d04b      	beq.n	80059a2 <_printf_i+0x1a6>
 800590a:	4616      	mov	r6, r2
 800590c:	fbb5 f1f3 	udiv	r1, r5, r3
 8005910:	fb03 5711 	mls	r7, r3, r1, r5
 8005914:	5dc7      	ldrb	r7, [r0, r7]
 8005916:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800591a:	462f      	mov	r7, r5
 800591c:	42bb      	cmp	r3, r7
 800591e:	460d      	mov	r5, r1
 8005920:	d9f4      	bls.n	800590c <_printf_i+0x110>
 8005922:	2b08      	cmp	r3, #8
 8005924:	d10b      	bne.n	800593e <_printf_i+0x142>
 8005926:	6823      	ldr	r3, [r4, #0]
 8005928:	07df      	lsls	r7, r3, #31
 800592a:	d508      	bpl.n	800593e <_printf_i+0x142>
 800592c:	6923      	ldr	r3, [r4, #16]
 800592e:	6861      	ldr	r1, [r4, #4]
 8005930:	4299      	cmp	r1, r3
 8005932:	bfde      	ittt	le
 8005934:	2330      	movle	r3, #48	@ 0x30
 8005936:	f806 3c01 	strble.w	r3, [r6, #-1]
 800593a:	f106 36ff 	addle.w	r6, r6, #4294967295
 800593e:	1b92      	subs	r2, r2, r6
 8005940:	6122      	str	r2, [r4, #16]
 8005942:	f8cd a000 	str.w	sl, [sp]
 8005946:	464b      	mov	r3, r9
 8005948:	aa03      	add	r2, sp, #12
 800594a:	4621      	mov	r1, r4
 800594c:	4640      	mov	r0, r8
 800594e:	f7ff fee7 	bl	8005720 <_printf_common>
 8005952:	3001      	adds	r0, #1
 8005954:	d14a      	bne.n	80059ec <_printf_i+0x1f0>
 8005956:	f04f 30ff 	mov.w	r0, #4294967295
 800595a:	b004      	add	sp, #16
 800595c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005960:	6823      	ldr	r3, [r4, #0]
 8005962:	f043 0320 	orr.w	r3, r3, #32
 8005966:	6023      	str	r3, [r4, #0]
 8005968:	4832      	ldr	r0, [pc, #200]	@ (8005a34 <_printf_i+0x238>)
 800596a:	2778      	movs	r7, #120	@ 0x78
 800596c:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8005970:	6823      	ldr	r3, [r4, #0]
 8005972:	6831      	ldr	r1, [r6, #0]
 8005974:	061f      	lsls	r7, r3, #24
 8005976:	f851 5b04 	ldr.w	r5, [r1], #4
 800597a:	d402      	bmi.n	8005982 <_printf_i+0x186>
 800597c:	065f      	lsls	r7, r3, #25
 800597e:	bf48      	it	mi
 8005980:	b2ad      	uxthmi	r5, r5
 8005982:	6031      	str	r1, [r6, #0]
 8005984:	07d9      	lsls	r1, r3, #31
 8005986:	bf44      	itt	mi
 8005988:	f043 0320 	orrmi.w	r3, r3, #32
 800598c:	6023      	strmi	r3, [r4, #0]
 800598e:	b11d      	cbz	r5, 8005998 <_printf_i+0x19c>
 8005990:	2310      	movs	r3, #16
 8005992:	e7ad      	b.n	80058f0 <_printf_i+0xf4>
 8005994:	4826      	ldr	r0, [pc, #152]	@ (8005a30 <_printf_i+0x234>)
 8005996:	e7e9      	b.n	800596c <_printf_i+0x170>
 8005998:	6823      	ldr	r3, [r4, #0]
 800599a:	f023 0320 	bic.w	r3, r3, #32
 800599e:	6023      	str	r3, [r4, #0]
 80059a0:	e7f6      	b.n	8005990 <_printf_i+0x194>
 80059a2:	4616      	mov	r6, r2
 80059a4:	e7bd      	b.n	8005922 <_printf_i+0x126>
 80059a6:	6833      	ldr	r3, [r6, #0]
 80059a8:	6825      	ldr	r5, [r4, #0]
 80059aa:	6961      	ldr	r1, [r4, #20]
 80059ac:	1d18      	adds	r0, r3, #4
 80059ae:	6030      	str	r0, [r6, #0]
 80059b0:	062e      	lsls	r6, r5, #24
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	d501      	bpl.n	80059ba <_printf_i+0x1be>
 80059b6:	6019      	str	r1, [r3, #0]
 80059b8:	e002      	b.n	80059c0 <_printf_i+0x1c4>
 80059ba:	0668      	lsls	r0, r5, #25
 80059bc:	d5fb      	bpl.n	80059b6 <_printf_i+0x1ba>
 80059be:	8019      	strh	r1, [r3, #0]
 80059c0:	2300      	movs	r3, #0
 80059c2:	6123      	str	r3, [r4, #16]
 80059c4:	4616      	mov	r6, r2
 80059c6:	e7bc      	b.n	8005942 <_printf_i+0x146>
 80059c8:	6833      	ldr	r3, [r6, #0]
 80059ca:	1d1a      	adds	r2, r3, #4
 80059cc:	6032      	str	r2, [r6, #0]
 80059ce:	681e      	ldr	r6, [r3, #0]
 80059d0:	6862      	ldr	r2, [r4, #4]
 80059d2:	2100      	movs	r1, #0
 80059d4:	4630      	mov	r0, r6
 80059d6:	f7fa fbfb 	bl	80001d0 <memchr>
 80059da:	b108      	cbz	r0, 80059e0 <_printf_i+0x1e4>
 80059dc:	1b80      	subs	r0, r0, r6
 80059de:	6060      	str	r0, [r4, #4]
 80059e0:	6863      	ldr	r3, [r4, #4]
 80059e2:	6123      	str	r3, [r4, #16]
 80059e4:	2300      	movs	r3, #0
 80059e6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80059ea:	e7aa      	b.n	8005942 <_printf_i+0x146>
 80059ec:	6923      	ldr	r3, [r4, #16]
 80059ee:	4632      	mov	r2, r6
 80059f0:	4649      	mov	r1, r9
 80059f2:	4640      	mov	r0, r8
 80059f4:	47d0      	blx	sl
 80059f6:	3001      	adds	r0, #1
 80059f8:	d0ad      	beq.n	8005956 <_printf_i+0x15a>
 80059fa:	6823      	ldr	r3, [r4, #0]
 80059fc:	079b      	lsls	r3, r3, #30
 80059fe:	d413      	bmi.n	8005a28 <_printf_i+0x22c>
 8005a00:	68e0      	ldr	r0, [r4, #12]
 8005a02:	9b03      	ldr	r3, [sp, #12]
 8005a04:	4298      	cmp	r0, r3
 8005a06:	bfb8      	it	lt
 8005a08:	4618      	movlt	r0, r3
 8005a0a:	e7a6      	b.n	800595a <_printf_i+0x15e>
 8005a0c:	2301      	movs	r3, #1
 8005a0e:	4632      	mov	r2, r6
 8005a10:	4649      	mov	r1, r9
 8005a12:	4640      	mov	r0, r8
 8005a14:	47d0      	blx	sl
 8005a16:	3001      	adds	r0, #1
 8005a18:	d09d      	beq.n	8005956 <_printf_i+0x15a>
 8005a1a:	3501      	adds	r5, #1
 8005a1c:	68e3      	ldr	r3, [r4, #12]
 8005a1e:	9903      	ldr	r1, [sp, #12]
 8005a20:	1a5b      	subs	r3, r3, r1
 8005a22:	42ab      	cmp	r3, r5
 8005a24:	dcf2      	bgt.n	8005a0c <_printf_i+0x210>
 8005a26:	e7eb      	b.n	8005a00 <_printf_i+0x204>
 8005a28:	2500      	movs	r5, #0
 8005a2a:	f104 0619 	add.w	r6, r4, #25
 8005a2e:	e7f5      	b.n	8005a1c <_printf_i+0x220>
 8005a30:	08006c75 	.word	0x08006c75
 8005a34:	08006c86 	.word	0x08006c86

08005a38 <memmove>:
 8005a38:	4288      	cmp	r0, r1
 8005a3a:	b510      	push	{r4, lr}
 8005a3c:	eb01 0402 	add.w	r4, r1, r2
 8005a40:	d902      	bls.n	8005a48 <memmove+0x10>
 8005a42:	4284      	cmp	r4, r0
 8005a44:	4623      	mov	r3, r4
 8005a46:	d807      	bhi.n	8005a58 <memmove+0x20>
 8005a48:	1e43      	subs	r3, r0, #1
 8005a4a:	42a1      	cmp	r1, r4
 8005a4c:	d008      	beq.n	8005a60 <memmove+0x28>
 8005a4e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005a52:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005a56:	e7f8      	b.n	8005a4a <memmove+0x12>
 8005a58:	4402      	add	r2, r0
 8005a5a:	4601      	mov	r1, r0
 8005a5c:	428a      	cmp	r2, r1
 8005a5e:	d100      	bne.n	8005a62 <memmove+0x2a>
 8005a60:	bd10      	pop	{r4, pc}
 8005a62:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005a66:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005a6a:	e7f7      	b.n	8005a5c <memmove+0x24>

08005a6c <_sbrk_r>:
 8005a6c:	b538      	push	{r3, r4, r5, lr}
 8005a6e:	4d06      	ldr	r5, [pc, #24]	@ (8005a88 <_sbrk_r+0x1c>)
 8005a70:	2300      	movs	r3, #0
 8005a72:	4604      	mov	r4, r0
 8005a74:	4608      	mov	r0, r1
 8005a76:	602b      	str	r3, [r5, #0]
 8005a78:	f7fb fe8c 	bl	8001794 <_sbrk>
 8005a7c:	1c43      	adds	r3, r0, #1
 8005a7e:	d102      	bne.n	8005a86 <_sbrk_r+0x1a>
 8005a80:	682b      	ldr	r3, [r5, #0]
 8005a82:	b103      	cbz	r3, 8005a86 <_sbrk_r+0x1a>
 8005a84:	6023      	str	r3, [r4, #0]
 8005a86:	bd38      	pop	{r3, r4, r5, pc}
 8005a88:	20001040 	.word	0x20001040

08005a8c <memcpy>:
 8005a8c:	440a      	add	r2, r1
 8005a8e:	4291      	cmp	r1, r2
 8005a90:	f100 33ff 	add.w	r3, r0, #4294967295
 8005a94:	d100      	bne.n	8005a98 <memcpy+0xc>
 8005a96:	4770      	bx	lr
 8005a98:	b510      	push	{r4, lr}
 8005a9a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005a9e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005aa2:	4291      	cmp	r1, r2
 8005aa4:	d1f9      	bne.n	8005a9a <memcpy+0xe>
 8005aa6:	bd10      	pop	{r4, pc}

08005aa8 <_realloc_r>:
 8005aa8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005aac:	4607      	mov	r7, r0
 8005aae:	4614      	mov	r4, r2
 8005ab0:	460d      	mov	r5, r1
 8005ab2:	b921      	cbnz	r1, 8005abe <_realloc_r+0x16>
 8005ab4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005ab8:	4611      	mov	r1, r2
 8005aba:	f7ff bc4d 	b.w	8005358 <_malloc_r>
 8005abe:	b92a      	cbnz	r2, 8005acc <_realloc_r+0x24>
 8005ac0:	f7ff fbde 	bl	8005280 <_free_r>
 8005ac4:	4625      	mov	r5, r4
 8005ac6:	4628      	mov	r0, r5
 8005ac8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005acc:	f000 f81a 	bl	8005b04 <_malloc_usable_size_r>
 8005ad0:	4284      	cmp	r4, r0
 8005ad2:	4606      	mov	r6, r0
 8005ad4:	d802      	bhi.n	8005adc <_realloc_r+0x34>
 8005ad6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8005ada:	d8f4      	bhi.n	8005ac6 <_realloc_r+0x1e>
 8005adc:	4621      	mov	r1, r4
 8005ade:	4638      	mov	r0, r7
 8005ae0:	f7ff fc3a 	bl	8005358 <_malloc_r>
 8005ae4:	4680      	mov	r8, r0
 8005ae6:	b908      	cbnz	r0, 8005aec <_realloc_r+0x44>
 8005ae8:	4645      	mov	r5, r8
 8005aea:	e7ec      	b.n	8005ac6 <_realloc_r+0x1e>
 8005aec:	42b4      	cmp	r4, r6
 8005aee:	4622      	mov	r2, r4
 8005af0:	4629      	mov	r1, r5
 8005af2:	bf28      	it	cs
 8005af4:	4632      	movcs	r2, r6
 8005af6:	f7ff ffc9 	bl	8005a8c <memcpy>
 8005afa:	4629      	mov	r1, r5
 8005afc:	4638      	mov	r0, r7
 8005afe:	f7ff fbbf 	bl	8005280 <_free_r>
 8005b02:	e7f1      	b.n	8005ae8 <_realloc_r+0x40>

08005b04 <_malloc_usable_size_r>:
 8005b04:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005b08:	1f18      	subs	r0, r3, #4
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	bfbc      	itt	lt
 8005b0e:	580b      	ldrlt	r3, [r1, r0]
 8005b10:	18c0      	addlt	r0, r0, r3
 8005b12:	4770      	bx	lr
 8005b14:	0000      	movs	r0, r0
	...

08005b18 <cos>:
 8005b18:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8005b1a:	ec53 2b10 	vmov	r2, r3, d0
 8005b1e:	4826      	ldr	r0, [pc, #152]	@ (8005bb8 <cos+0xa0>)
 8005b20:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8005b24:	4281      	cmp	r1, r0
 8005b26:	d806      	bhi.n	8005b36 <cos+0x1e>
 8005b28:	ed9f 1b21 	vldr	d1, [pc, #132]	@ 8005bb0 <cos+0x98>
 8005b2c:	b005      	add	sp, #20
 8005b2e:	f85d eb04 	ldr.w	lr, [sp], #4
 8005b32:	f000 b88d 	b.w	8005c50 <__kernel_cos>
 8005b36:	4821      	ldr	r0, [pc, #132]	@ (8005bbc <cos+0xa4>)
 8005b38:	4281      	cmp	r1, r0
 8005b3a:	d908      	bls.n	8005b4e <cos+0x36>
 8005b3c:	4610      	mov	r0, r2
 8005b3e:	4619      	mov	r1, r3
 8005b40:	f7fa fb9a 	bl	8000278 <__aeabi_dsub>
 8005b44:	ec41 0b10 	vmov	d0, r0, r1
 8005b48:	b005      	add	sp, #20
 8005b4a:	f85d fb04 	ldr.w	pc, [sp], #4
 8005b4e:	4668      	mov	r0, sp
 8005b50:	f000 fa02 	bl	8005f58 <__ieee754_rem_pio2>
 8005b54:	f000 0003 	and.w	r0, r0, #3
 8005b58:	2801      	cmp	r0, #1
 8005b5a:	d00b      	beq.n	8005b74 <cos+0x5c>
 8005b5c:	2802      	cmp	r0, #2
 8005b5e:	d015      	beq.n	8005b8c <cos+0x74>
 8005b60:	b9d8      	cbnz	r0, 8005b9a <cos+0x82>
 8005b62:	ed9d 1b02 	vldr	d1, [sp, #8]
 8005b66:	ed9d 0b00 	vldr	d0, [sp]
 8005b6a:	f000 f871 	bl	8005c50 <__kernel_cos>
 8005b6e:	ec51 0b10 	vmov	r0, r1, d0
 8005b72:	e7e7      	b.n	8005b44 <cos+0x2c>
 8005b74:	ed9d 1b02 	vldr	d1, [sp, #8]
 8005b78:	ed9d 0b00 	vldr	d0, [sp]
 8005b7c:	f000 f930 	bl	8005de0 <__kernel_sin>
 8005b80:	ec53 2b10 	vmov	r2, r3, d0
 8005b84:	4610      	mov	r0, r2
 8005b86:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 8005b8a:	e7db      	b.n	8005b44 <cos+0x2c>
 8005b8c:	ed9d 1b02 	vldr	d1, [sp, #8]
 8005b90:	ed9d 0b00 	vldr	d0, [sp]
 8005b94:	f000 f85c 	bl	8005c50 <__kernel_cos>
 8005b98:	e7f2      	b.n	8005b80 <cos+0x68>
 8005b9a:	ed9d 1b02 	vldr	d1, [sp, #8]
 8005b9e:	ed9d 0b00 	vldr	d0, [sp]
 8005ba2:	2001      	movs	r0, #1
 8005ba4:	f000 f91c 	bl	8005de0 <__kernel_sin>
 8005ba8:	e7e1      	b.n	8005b6e <cos+0x56>
 8005baa:	bf00      	nop
 8005bac:	f3af 8000 	nop.w
	...
 8005bb8:	3fe921fb 	.word	0x3fe921fb
 8005bbc:	7fefffff 	.word	0x7fefffff

08005bc0 <round>:
 8005bc0:	ec51 0b10 	vmov	r0, r1, d0
 8005bc4:	b570      	push	{r4, r5, r6, lr}
 8005bc6:	f3c1 540a 	ubfx	r4, r1, #20, #11
 8005bca:	f2a4 32ff 	subw	r2, r4, #1023	@ 0x3ff
 8005bce:	2a13      	cmp	r2, #19
 8005bd0:	460b      	mov	r3, r1
 8005bd2:	4605      	mov	r5, r0
 8005bd4:	dc1b      	bgt.n	8005c0e <round+0x4e>
 8005bd6:	2a00      	cmp	r2, #0
 8005bd8:	da0b      	bge.n	8005bf2 <round+0x32>
 8005bda:	f001 4300 	and.w	r3, r1, #2147483648	@ 0x80000000
 8005bde:	3201      	adds	r2, #1
 8005be0:	bf04      	itt	eq
 8005be2:	f043 537f 	orreq.w	r3, r3, #1069547520	@ 0x3fc00000
 8005be6:	f443 1340 	orreq.w	r3, r3, #3145728	@ 0x300000
 8005bea:	2200      	movs	r2, #0
 8005bec:	4619      	mov	r1, r3
 8005bee:	4610      	mov	r0, r2
 8005bf0:	e015      	b.n	8005c1e <round+0x5e>
 8005bf2:	4c15      	ldr	r4, [pc, #84]	@ (8005c48 <round+0x88>)
 8005bf4:	4114      	asrs	r4, r2
 8005bf6:	ea04 0601 	and.w	r6, r4, r1
 8005bfa:	4306      	orrs	r6, r0
 8005bfc:	d00f      	beq.n	8005c1e <round+0x5e>
 8005bfe:	f44f 2100 	mov.w	r1, #524288	@ 0x80000
 8005c02:	fa41 f202 	asr.w	r2, r1, r2
 8005c06:	4413      	add	r3, r2
 8005c08:	ea23 0304 	bic.w	r3, r3, r4
 8005c0c:	e7ed      	b.n	8005bea <round+0x2a>
 8005c0e:	2a33      	cmp	r2, #51	@ 0x33
 8005c10:	dd08      	ble.n	8005c24 <round+0x64>
 8005c12:	f5b2 6f80 	cmp.w	r2, #1024	@ 0x400
 8005c16:	d102      	bne.n	8005c1e <round+0x5e>
 8005c18:	4602      	mov	r2, r0
 8005c1a:	f7fa fb2f 	bl	800027c <__adddf3>
 8005c1e:	ec41 0b10 	vmov	d0, r0, r1
 8005c22:	bd70      	pop	{r4, r5, r6, pc}
 8005c24:	f2a4 4613 	subw	r6, r4, #1043	@ 0x413
 8005c28:	f04f 34ff 	mov.w	r4, #4294967295
 8005c2c:	40f4      	lsrs	r4, r6
 8005c2e:	4204      	tst	r4, r0
 8005c30:	d0f5      	beq.n	8005c1e <round+0x5e>
 8005c32:	f1c2 0133 	rsb	r1, r2, #51	@ 0x33
 8005c36:	2201      	movs	r2, #1
 8005c38:	408a      	lsls	r2, r1
 8005c3a:	1952      	adds	r2, r2, r5
 8005c3c:	bf28      	it	cs
 8005c3e:	3301      	addcs	r3, #1
 8005c40:	ea22 0204 	bic.w	r2, r2, r4
 8005c44:	e7d2      	b.n	8005bec <round+0x2c>
 8005c46:	bf00      	nop
 8005c48:	000fffff 	.word	0x000fffff
 8005c4c:	00000000 	.word	0x00000000

08005c50 <__kernel_cos>:
 8005c50:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005c54:	ec57 6b10 	vmov	r6, r7, d0
 8005c58:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 8005c5c:	f1b8 5f79 	cmp.w	r8, #1044381696	@ 0x3e400000
 8005c60:	ed8d 1b00 	vstr	d1, [sp]
 8005c64:	d206      	bcs.n	8005c74 <__kernel_cos+0x24>
 8005c66:	4630      	mov	r0, r6
 8005c68:	4639      	mov	r1, r7
 8005c6a:	f7fa ff57 	bl	8000b1c <__aeabi_d2iz>
 8005c6e:	2800      	cmp	r0, #0
 8005c70:	f000 8088 	beq.w	8005d84 <__kernel_cos+0x134>
 8005c74:	4632      	mov	r2, r6
 8005c76:	463b      	mov	r3, r7
 8005c78:	4630      	mov	r0, r6
 8005c7a:	4639      	mov	r1, r7
 8005c7c:	f7fa fcb4 	bl	80005e8 <__aeabi_dmul>
 8005c80:	4b51      	ldr	r3, [pc, #324]	@ (8005dc8 <__kernel_cos+0x178>)
 8005c82:	2200      	movs	r2, #0
 8005c84:	4604      	mov	r4, r0
 8005c86:	460d      	mov	r5, r1
 8005c88:	f7fa fcae 	bl	80005e8 <__aeabi_dmul>
 8005c8c:	a340      	add	r3, pc, #256	@ (adr r3, 8005d90 <__kernel_cos+0x140>)
 8005c8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c92:	4682      	mov	sl, r0
 8005c94:	468b      	mov	fp, r1
 8005c96:	4620      	mov	r0, r4
 8005c98:	4629      	mov	r1, r5
 8005c9a:	f7fa fca5 	bl	80005e8 <__aeabi_dmul>
 8005c9e:	a33e      	add	r3, pc, #248	@ (adr r3, 8005d98 <__kernel_cos+0x148>)
 8005ca0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ca4:	f7fa faea 	bl	800027c <__adddf3>
 8005ca8:	4622      	mov	r2, r4
 8005caa:	462b      	mov	r3, r5
 8005cac:	f7fa fc9c 	bl	80005e8 <__aeabi_dmul>
 8005cb0:	a33b      	add	r3, pc, #236	@ (adr r3, 8005da0 <__kernel_cos+0x150>)
 8005cb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005cb6:	f7fa fadf 	bl	8000278 <__aeabi_dsub>
 8005cba:	4622      	mov	r2, r4
 8005cbc:	462b      	mov	r3, r5
 8005cbe:	f7fa fc93 	bl	80005e8 <__aeabi_dmul>
 8005cc2:	a339      	add	r3, pc, #228	@ (adr r3, 8005da8 <__kernel_cos+0x158>)
 8005cc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005cc8:	f7fa fad8 	bl	800027c <__adddf3>
 8005ccc:	4622      	mov	r2, r4
 8005cce:	462b      	mov	r3, r5
 8005cd0:	f7fa fc8a 	bl	80005e8 <__aeabi_dmul>
 8005cd4:	a336      	add	r3, pc, #216	@ (adr r3, 8005db0 <__kernel_cos+0x160>)
 8005cd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005cda:	f7fa facd 	bl	8000278 <__aeabi_dsub>
 8005cde:	4622      	mov	r2, r4
 8005ce0:	462b      	mov	r3, r5
 8005ce2:	f7fa fc81 	bl	80005e8 <__aeabi_dmul>
 8005ce6:	a334      	add	r3, pc, #208	@ (adr r3, 8005db8 <__kernel_cos+0x168>)
 8005ce8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005cec:	f7fa fac6 	bl	800027c <__adddf3>
 8005cf0:	4622      	mov	r2, r4
 8005cf2:	462b      	mov	r3, r5
 8005cf4:	f7fa fc78 	bl	80005e8 <__aeabi_dmul>
 8005cf8:	4622      	mov	r2, r4
 8005cfa:	462b      	mov	r3, r5
 8005cfc:	f7fa fc74 	bl	80005e8 <__aeabi_dmul>
 8005d00:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005d04:	4604      	mov	r4, r0
 8005d06:	460d      	mov	r5, r1
 8005d08:	4630      	mov	r0, r6
 8005d0a:	4639      	mov	r1, r7
 8005d0c:	f7fa fc6c 	bl	80005e8 <__aeabi_dmul>
 8005d10:	460b      	mov	r3, r1
 8005d12:	4602      	mov	r2, r0
 8005d14:	4629      	mov	r1, r5
 8005d16:	4620      	mov	r0, r4
 8005d18:	f7fa faae 	bl	8000278 <__aeabi_dsub>
 8005d1c:	4b2b      	ldr	r3, [pc, #172]	@ (8005dcc <__kernel_cos+0x17c>)
 8005d1e:	4598      	cmp	r8, r3
 8005d20:	4606      	mov	r6, r0
 8005d22:	460f      	mov	r7, r1
 8005d24:	d810      	bhi.n	8005d48 <__kernel_cos+0xf8>
 8005d26:	4602      	mov	r2, r0
 8005d28:	460b      	mov	r3, r1
 8005d2a:	4650      	mov	r0, sl
 8005d2c:	4659      	mov	r1, fp
 8005d2e:	f7fa faa3 	bl	8000278 <__aeabi_dsub>
 8005d32:	460b      	mov	r3, r1
 8005d34:	4926      	ldr	r1, [pc, #152]	@ (8005dd0 <__kernel_cos+0x180>)
 8005d36:	4602      	mov	r2, r0
 8005d38:	2000      	movs	r0, #0
 8005d3a:	f7fa fa9d 	bl	8000278 <__aeabi_dsub>
 8005d3e:	ec41 0b10 	vmov	d0, r0, r1
 8005d42:	b003      	add	sp, #12
 8005d44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005d48:	4b22      	ldr	r3, [pc, #136]	@ (8005dd4 <__kernel_cos+0x184>)
 8005d4a:	4921      	ldr	r1, [pc, #132]	@ (8005dd0 <__kernel_cos+0x180>)
 8005d4c:	4598      	cmp	r8, r3
 8005d4e:	bf8c      	ite	hi
 8005d50:	4d21      	ldrhi	r5, [pc, #132]	@ (8005dd8 <__kernel_cos+0x188>)
 8005d52:	f5a8 1500 	subls.w	r5, r8, #2097152	@ 0x200000
 8005d56:	2400      	movs	r4, #0
 8005d58:	4622      	mov	r2, r4
 8005d5a:	462b      	mov	r3, r5
 8005d5c:	2000      	movs	r0, #0
 8005d5e:	f7fa fa8b 	bl	8000278 <__aeabi_dsub>
 8005d62:	4622      	mov	r2, r4
 8005d64:	4680      	mov	r8, r0
 8005d66:	4689      	mov	r9, r1
 8005d68:	462b      	mov	r3, r5
 8005d6a:	4650      	mov	r0, sl
 8005d6c:	4659      	mov	r1, fp
 8005d6e:	f7fa fa83 	bl	8000278 <__aeabi_dsub>
 8005d72:	4632      	mov	r2, r6
 8005d74:	463b      	mov	r3, r7
 8005d76:	f7fa fa7f 	bl	8000278 <__aeabi_dsub>
 8005d7a:	4602      	mov	r2, r0
 8005d7c:	460b      	mov	r3, r1
 8005d7e:	4640      	mov	r0, r8
 8005d80:	4649      	mov	r1, r9
 8005d82:	e7da      	b.n	8005d3a <__kernel_cos+0xea>
 8005d84:	ed9f 0b0e 	vldr	d0, [pc, #56]	@ 8005dc0 <__kernel_cos+0x170>
 8005d88:	e7db      	b.n	8005d42 <__kernel_cos+0xf2>
 8005d8a:	bf00      	nop
 8005d8c:	f3af 8000 	nop.w
 8005d90:	be8838d4 	.word	0xbe8838d4
 8005d94:	bda8fae9 	.word	0xbda8fae9
 8005d98:	bdb4b1c4 	.word	0xbdb4b1c4
 8005d9c:	3e21ee9e 	.word	0x3e21ee9e
 8005da0:	809c52ad 	.word	0x809c52ad
 8005da4:	3e927e4f 	.word	0x3e927e4f
 8005da8:	19cb1590 	.word	0x19cb1590
 8005dac:	3efa01a0 	.word	0x3efa01a0
 8005db0:	16c15177 	.word	0x16c15177
 8005db4:	3f56c16c 	.word	0x3f56c16c
 8005db8:	5555554c 	.word	0x5555554c
 8005dbc:	3fa55555 	.word	0x3fa55555
 8005dc0:	00000000 	.word	0x00000000
 8005dc4:	3ff00000 	.word	0x3ff00000
 8005dc8:	3fe00000 	.word	0x3fe00000
 8005dcc:	3fd33332 	.word	0x3fd33332
 8005dd0:	3ff00000 	.word	0x3ff00000
 8005dd4:	3fe90000 	.word	0x3fe90000
 8005dd8:	3fd20000 	.word	0x3fd20000
 8005ddc:	00000000 	.word	0x00000000

08005de0 <__kernel_sin>:
 8005de0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005de4:	ec55 4b10 	vmov	r4, r5, d0
 8005de8:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 8005dec:	b085      	sub	sp, #20
 8005dee:	f1b3 5f79 	cmp.w	r3, #1044381696	@ 0x3e400000
 8005df2:	ed8d 1b02 	vstr	d1, [sp, #8]
 8005df6:	4680      	mov	r8, r0
 8005df8:	d205      	bcs.n	8005e06 <__kernel_sin+0x26>
 8005dfa:	4620      	mov	r0, r4
 8005dfc:	4629      	mov	r1, r5
 8005dfe:	f7fa fe8d 	bl	8000b1c <__aeabi_d2iz>
 8005e02:	2800      	cmp	r0, #0
 8005e04:	d052      	beq.n	8005eac <__kernel_sin+0xcc>
 8005e06:	4622      	mov	r2, r4
 8005e08:	462b      	mov	r3, r5
 8005e0a:	4620      	mov	r0, r4
 8005e0c:	4629      	mov	r1, r5
 8005e0e:	f7fa fbeb 	bl	80005e8 <__aeabi_dmul>
 8005e12:	4682      	mov	sl, r0
 8005e14:	468b      	mov	fp, r1
 8005e16:	4602      	mov	r2, r0
 8005e18:	460b      	mov	r3, r1
 8005e1a:	4620      	mov	r0, r4
 8005e1c:	4629      	mov	r1, r5
 8005e1e:	f7fa fbe3 	bl	80005e8 <__aeabi_dmul>
 8005e22:	a342      	add	r3, pc, #264	@ (adr r3, 8005f2c <__kernel_sin+0x14c>)
 8005e24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e28:	e9cd 0100 	strd	r0, r1, [sp]
 8005e2c:	4650      	mov	r0, sl
 8005e2e:	4659      	mov	r1, fp
 8005e30:	f7fa fbda 	bl	80005e8 <__aeabi_dmul>
 8005e34:	a33f      	add	r3, pc, #252	@ (adr r3, 8005f34 <__kernel_sin+0x154>)
 8005e36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e3a:	f7fa fa1d 	bl	8000278 <__aeabi_dsub>
 8005e3e:	4652      	mov	r2, sl
 8005e40:	465b      	mov	r3, fp
 8005e42:	f7fa fbd1 	bl	80005e8 <__aeabi_dmul>
 8005e46:	a33d      	add	r3, pc, #244	@ (adr r3, 8005f3c <__kernel_sin+0x15c>)
 8005e48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e4c:	f7fa fa16 	bl	800027c <__adddf3>
 8005e50:	4652      	mov	r2, sl
 8005e52:	465b      	mov	r3, fp
 8005e54:	f7fa fbc8 	bl	80005e8 <__aeabi_dmul>
 8005e58:	a33a      	add	r3, pc, #232	@ (adr r3, 8005f44 <__kernel_sin+0x164>)
 8005e5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e5e:	f7fa fa0b 	bl	8000278 <__aeabi_dsub>
 8005e62:	4652      	mov	r2, sl
 8005e64:	465b      	mov	r3, fp
 8005e66:	f7fa fbbf 	bl	80005e8 <__aeabi_dmul>
 8005e6a:	a338      	add	r3, pc, #224	@ (adr r3, 8005f4c <__kernel_sin+0x16c>)
 8005e6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e70:	f7fa fa04 	bl	800027c <__adddf3>
 8005e74:	4606      	mov	r6, r0
 8005e76:	460f      	mov	r7, r1
 8005e78:	f1b8 0f00 	cmp.w	r8, #0
 8005e7c:	d11b      	bne.n	8005eb6 <__kernel_sin+0xd6>
 8005e7e:	4602      	mov	r2, r0
 8005e80:	460b      	mov	r3, r1
 8005e82:	4650      	mov	r0, sl
 8005e84:	4659      	mov	r1, fp
 8005e86:	f7fa fbaf 	bl	80005e8 <__aeabi_dmul>
 8005e8a:	a325      	add	r3, pc, #148	@ (adr r3, 8005f20 <__kernel_sin+0x140>)
 8005e8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e90:	f7fa f9f2 	bl	8000278 <__aeabi_dsub>
 8005e94:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005e98:	f7fa fba6 	bl	80005e8 <__aeabi_dmul>
 8005e9c:	4602      	mov	r2, r0
 8005e9e:	460b      	mov	r3, r1
 8005ea0:	4620      	mov	r0, r4
 8005ea2:	4629      	mov	r1, r5
 8005ea4:	f7fa f9ea 	bl	800027c <__adddf3>
 8005ea8:	4604      	mov	r4, r0
 8005eaa:	460d      	mov	r5, r1
 8005eac:	ec45 4b10 	vmov	d0, r4, r5
 8005eb0:	b005      	add	sp, #20
 8005eb2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005eb6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005eba:	4b1b      	ldr	r3, [pc, #108]	@ (8005f28 <__kernel_sin+0x148>)
 8005ebc:	2200      	movs	r2, #0
 8005ebe:	f7fa fb93 	bl	80005e8 <__aeabi_dmul>
 8005ec2:	4632      	mov	r2, r6
 8005ec4:	4680      	mov	r8, r0
 8005ec6:	4689      	mov	r9, r1
 8005ec8:	463b      	mov	r3, r7
 8005eca:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005ece:	f7fa fb8b 	bl	80005e8 <__aeabi_dmul>
 8005ed2:	4602      	mov	r2, r0
 8005ed4:	460b      	mov	r3, r1
 8005ed6:	4640      	mov	r0, r8
 8005ed8:	4649      	mov	r1, r9
 8005eda:	f7fa f9cd 	bl	8000278 <__aeabi_dsub>
 8005ede:	4652      	mov	r2, sl
 8005ee0:	465b      	mov	r3, fp
 8005ee2:	f7fa fb81 	bl	80005e8 <__aeabi_dmul>
 8005ee6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005eea:	f7fa f9c5 	bl	8000278 <__aeabi_dsub>
 8005eee:	a30c      	add	r3, pc, #48	@ (adr r3, 8005f20 <__kernel_sin+0x140>)
 8005ef0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ef4:	4606      	mov	r6, r0
 8005ef6:	460f      	mov	r7, r1
 8005ef8:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005efc:	f7fa fb74 	bl	80005e8 <__aeabi_dmul>
 8005f00:	4602      	mov	r2, r0
 8005f02:	460b      	mov	r3, r1
 8005f04:	4630      	mov	r0, r6
 8005f06:	4639      	mov	r1, r7
 8005f08:	f7fa f9b8 	bl	800027c <__adddf3>
 8005f0c:	4602      	mov	r2, r0
 8005f0e:	460b      	mov	r3, r1
 8005f10:	4620      	mov	r0, r4
 8005f12:	4629      	mov	r1, r5
 8005f14:	f7fa f9b0 	bl	8000278 <__aeabi_dsub>
 8005f18:	e7c6      	b.n	8005ea8 <__kernel_sin+0xc8>
 8005f1a:	bf00      	nop
 8005f1c:	f3af 8000 	nop.w
 8005f20:	55555549 	.word	0x55555549
 8005f24:	3fc55555 	.word	0x3fc55555
 8005f28:	3fe00000 	.word	0x3fe00000
 8005f2c:	5acfd57c 	.word	0x5acfd57c
 8005f30:	3de5d93a 	.word	0x3de5d93a
 8005f34:	8a2b9ceb 	.word	0x8a2b9ceb
 8005f38:	3e5ae5e6 	.word	0x3e5ae5e6
 8005f3c:	57b1fe7d 	.word	0x57b1fe7d
 8005f40:	3ec71de3 	.word	0x3ec71de3
 8005f44:	19c161d5 	.word	0x19c161d5
 8005f48:	3f2a01a0 	.word	0x3f2a01a0
 8005f4c:	1110f8a6 	.word	0x1110f8a6
 8005f50:	3f811111 	.word	0x3f811111
 8005f54:	00000000 	.word	0x00000000

08005f58 <__ieee754_rem_pio2>:
 8005f58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005f5c:	ec57 6b10 	vmov	r6, r7, d0
 8005f60:	4bc5      	ldr	r3, [pc, #788]	@ (8006278 <__ieee754_rem_pio2+0x320>)
 8005f62:	b08d      	sub	sp, #52	@ 0x34
 8005f64:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 8005f68:	4598      	cmp	r8, r3
 8005f6a:	4604      	mov	r4, r0
 8005f6c:	9704      	str	r7, [sp, #16]
 8005f6e:	d807      	bhi.n	8005f80 <__ieee754_rem_pio2+0x28>
 8005f70:	2200      	movs	r2, #0
 8005f72:	2300      	movs	r3, #0
 8005f74:	ed80 0b00 	vstr	d0, [r0]
 8005f78:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8005f7c:	2500      	movs	r5, #0
 8005f7e:	e028      	b.n	8005fd2 <__ieee754_rem_pio2+0x7a>
 8005f80:	4bbe      	ldr	r3, [pc, #760]	@ (800627c <__ieee754_rem_pio2+0x324>)
 8005f82:	4598      	cmp	r8, r3
 8005f84:	d878      	bhi.n	8006078 <__ieee754_rem_pio2+0x120>
 8005f86:	9b04      	ldr	r3, [sp, #16]
 8005f88:	4dbd      	ldr	r5, [pc, #756]	@ (8006280 <__ieee754_rem_pio2+0x328>)
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	4630      	mov	r0, r6
 8005f8e:	a3ac      	add	r3, pc, #688	@ (adr r3, 8006240 <__ieee754_rem_pio2+0x2e8>)
 8005f90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f94:	4639      	mov	r1, r7
 8005f96:	dd38      	ble.n	800600a <__ieee754_rem_pio2+0xb2>
 8005f98:	f7fa f96e 	bl	8000278 <__aeabi_dsub>
 8005f9c:	45a8      	cmp	r8, r5
 8005f9e:	4606      	mov	r6, r0
 8005fa0:	460f      	mov	r7, r1
 8005fa2:	d01a      	beq.n	8005fda <__ieee754_rem_pio2+0x82>
 8005fa4:	a3a8      	add	r3, pc, #672	@ (adr r3, 8006248 <__ieee754_rem_pio2+0x2f0>)
 8005fa6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005faa:	f7fa f965 	bl	8000278 <__aeabi_dsub>
 8005fae:	4602      	mov	r2, r0
 8005fb0:	460b      	mov	r3, r1
 8005fb2:	4680      	mov	r8, r0
 8005fb4:	4689      	mov	r9, r1
 8005fb6:	4630      	mov	r0, r6
 8005fb8:	4639      	mov	r1, r7
 8005fba:	f7fa f95d 	bl	8000278 <__aeabi_dsub>
 8005fbe:	a3a2      	add	r3, pc, #648	@ (adr r3, 8006248 <__ieee754_rem_pio2+0x2f0>)
 8005fc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005fc4:	f7fa f958 	bl	8000278 <__aeabi_dsub>
 8005fc8:	e9c4 8900 	strd	r8, r9, [r4]
 8005fcc:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8005fd0:	2501      	movs	r5, #1
 8005fd2:	4628      	mov	r0, r5
 8005fd4:	b00d      	add	sp, #52	@ 0x34
 8005fd6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005fda:	a39d      	add	r3, pc, #628	@ (adr r3, 8006250 <__ieee754_rem_pio2+0x2f8>)
 8005fdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005fe0:	f7fa f94a 	bl	8000278 <__aeabi_dsub>
 8005fe4:	a39c      	add	r3, pc, #624	@ (adr r3, 8006258 <__ieee754_rem_pio2+0x300>)
 8005fe6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005fea:	4606      	mov	r6, r0
 8005fec:	460f      	mov	r7, r1
 8005fee:	f7fa f943 	bl	8000278 <__aeabi_dsub>
 8005ff2:	4602      	mov	r2, r0
 8005ff4:	460b      	mov	r3, r1
 8005ff6:	4680      	mov	r8, r0
 8005ff8:	4689      	mov	r9, r1
 8005ffa:	4630      	mov	r0, r6
 8005ffc:	4639      	mov	r1, r7
 8005ffe:	f7fa f93b 	bl	8000278 <__aeabi_dsub>
 8006002:	a395      	add	r3, pc, #596	@ (adr r3, 8006258 <__ieee754_rem_pio2+0x300>)
 8006004:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006008:	e7dc      	b.n	8005fc4 <__ieee754_rem_pio2+0x6c>
 800600a:	f7fa f937 	bl	800027c <__adddf3>
 800600e:	45a8      	cmp	r8, r5
 8006010:	4606      	mov	r6, r0
 8006012:	460f      	mov	r7, r1
 8006014:	d018      	beq.n	8006048 <__ieee754_rem_pio2+0xf0>
 8006016:	a38c      	add	r3, pc, #560	@ (adr r3, 8006248 <__ieee754_rem_pio2+0x2f0>)
 8006018:	e9d3 2300 	ldrd	r2, r3, [r3]
 800601c:	f7fa f92e 	bl	800027c <__adddf3>
 8006020:	4602      	mov	r2, r0
 8006022:	460b      	mov	r3, r1
 8006024:	4680      	mov	r8, r0
 8006026:	4689      	mov	r9, r1
 8006028:	4630      	mov	r0, r6
 800602a:	4639      	mov	r1, r7
 800602c:	f7fa f924 	bl	8000278 <__aeabi_dsub>
 8006030:	a385      	add	r3, pc, #532	@ (adr r3, 8006248 <__ieee754_rem_pio2+0x2f0>)
 8006032:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006036:	f7fa f921 	bl	800027c <__adddf3>
 800603a:	f04f 35ff 	mov.w	r5, #4294967295
 800603e:	e9c4 8900 	strd	r8, r9, [r4]
 8006042:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8006046:	e7c4      	b.n	8005fd2 <__ieee754_rem_pio2+0x7a>
 8006048:	a381      	add	r3, pc, #516	@ (adr r3, 8006250 <__ieee754_rem_pio2+0x2f8>)
 800604a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800604e:	f7fa f915 	bl	800027c <__adddf3>
 8006052:	a381      	add	r3, pc, #516	@ (adr r3, 8006258 <__ieee754_rem_pio2+0x300>)
 8006054:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006058:	4606      	mov	r6, r0
 800605a:	460f      	mov	r7, r1
 800605c:	f7fa f90e 	bl	800027c <__adddf3>
 8006060:	4602      	mov	r2, r0
 8006062:	460b      	mov	r3, r1
 8006064:	4680      	mov	r8, r0
 8006066:	4689      	mov	r9, r1
 8006068:	4630      	mov	r0, r6
 800606a:	4639      	mov	r1, r7
 800606c:	f7fa f904 	bl	8000278 <__aeabi_dsub>
 8006070:	a379      	add	r3, pc, #484	@ (adr r3, 8006258 <__ieee754_rem_pio2+0x300>)
 8006072:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006076:	e7de      	b.n	8006036 <__ieee754_rem_pio2+0xde>
 8006078:	4b82      	ldr	r3, [pc, #520]	@ (8006284 <__ieee754_rem_pio2+0x32c>)
 800607a:	4598      	cmp	r8, r3
 800607c:	f200 80d1 	bhi.w	8006222 <__ieee754_rem_pio2+0x2ca>
 8006080:	f000 f966 	bl	8006350 <fabs>
 8006084:	ec57 6b10 	vmov	r6, r7, d0
 8006088:	a375      	add	r3, pc, #468	@ (adr r3, 8006260 <__ieee754_rem_pio2+0x308>)
 800608a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800608e:	4630      	mov	r0, r6
 8006090:	4639      	mov	r1, r7
 8006092:	f7fa faa9 	bl	80005e8 <__aeabi_dmul>
 8006096:	4b7c      	ldr	r3, [pc, #496]	@ (8006288 <__ieee754_rem_pio2+0x330>)
 8006098:	2200      	movs	r2, #0
 800609a:	f7fa f8ef 	bl	800027c <__adddf3>
 800609e:	f7fa fd3d 	bl	8000b1c <__aeabi_d2iz>
 80060a2:	4605      	mov	r5, r0
 80060a4:	f7fa fa36 	bl	8000514 <__aeabi_i2d>
 80060a8:	4602      	mov	r2, r0
 80060aa:	460b      	mov	r3, r1
 80060ac:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80060b0:	a363      	add	r3, pc, #396	@ (adr r3, 8006240 <__ieee754_rem_pio2+0x2e8>)
 80060b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060b6:	f7fa fa97 	bl	80005e8 <__aeabi_dmul>
 80060ba:	4602      	mov	r2, r0
 80060bc:	460b      	mov	r3, r1
 80060be:	4630      	mov	r0, r6
 80060c0:	4639      	mov	r1, r7
 80060c2:	f7fa f8d9 	bl	8000278 <__aeabi_dsub>
 80060c6:	a360      	add	r3, pc, #384	@ (adr r3, 8006248 <__ieee754_rem_pio2+0x2f0>)
 80060c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060cc:	4682      	mov	sl, r0
 80060ce:	468b      	mov	fp, r1
 80060d0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80060d4:	f7fa fa88 	bl	80005e8 <__aeabi_dmul>
 80060d8:	2d1f      	cmp	r5, #31
 80060da:	4606      	mov	r6, r0
 80060dc:	460f      	mov	r7, r1
 80060de:	dc0c      	bgt.n	80060fa <__ieee754_rem_pio2+0x1a2>
 80060e0:	4b6a      	ldr	r3, [pc, #424]	@ (800628c <__ieee754_rem_pio2+0x334>)
 80060e2:	1e6a      	subs	r2, r5, #1
 80060e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80060e8:	4543      	cmp	r3, r8
 80060ea:	d006      	beq.n	80060fa <__ieee754_rem_pio2+0x1a2>
 80060ec:	4632      	mov	r2, r6
 80060ee:	463b      	mov	r3, r7
 80060f0:	4650      	mov	r0, sl
 80060f2:	4659      	mov	r1, fp
 80060f4:	f7fa f8c0 	bl	8000278 <__aeabi_dsub>
 80060f8:	e00e      	b.n	8006118 <__ieee754_rem_pio2+0x1c0>
 80060fa:	463b      	mov	r3, r7
 80060fc:	4632      	mov	r2, r6
 80060fe:	4650      	mov	r0, sl
 8006100:	4659      	mov	r1, fp
 8006102:	f7fa f8b9 	bl	8000278 <__aeabi_dsub>
 8006106:	ea4f 5328 	mov.w	r3, r8, asr #20
 800610a:	9305      	str	r3, [sp, #20]
 800610c:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8006110:	ebc3 5318 	rsb	r3, r3, r8, lsr #20
 8006114:	2b10      	cmp	r3, #16
 8006116:	dc02      	bgt.n	800611e <__ieee754_rem_pio2+0x1c6>
 8006118:	e9c4 0100 	strd	r0, r1, [r4]
 800611c:	e039      	b.n	8006192 <__ieee754_rem_pio2+0x23a>
 800611e:	a34c      	add	r3, pc, #304	@ (adr r3, 8006250 <__ieee754_rem_pio2+0x2f8>)
 8006120:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006124:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006128:	f7fa fa5e 	bl	80005e8 <__aeabi_dmul>
 800612c:	4606      	mov	r6, r0
 800612e:	460f      	mov	r7, r1
 8006130:	4602      	mov	r2, r0
 8006132:	460b      	mov	r3, r1
 8006134:	4650      	mov	r0, sl
 8006136:	4659      	mov	r1, fp
 8006138:	f7fa f89e 	bl	8000278 <__aeabi_dsub>
 800613c:	4602      	mov	r2, r0
 800613e:	460b      	mov	r3, r1
 8006140:	4680      	mov	r8, r0
 8006142:	4689      	mov	r9, r1
 8006144:	4650      	mov	r0, sl
 8006146:	4659      	mov	r1, fp
 8006148:	f7fa f896 	bl	8000278 <__aeabi_dsub>
 800614c:	4632      	mov	r2, r6
 800614e:	463b      	mov	r3, r7
 8006150:	f7fa f892 	bl	8000278 <__aeabi_dsub>
 8006154:	a340      	add	r3, pc, #256	@ (adr r3, 8006258 <__ieee754_rem_pio2+0x300>)
 8006156:	e9d3 2300 	ldrd	r2, r3, [r3]
 800615a:	4606      	mov	r6, r0
 800615c:	460f      	mov	r7, r1
 800615e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006162:	f7fa fa41 	bl	80005e8 <__aeabi_dmul>
 8006166:	4632      	mov	r2, r6
 8006168:	463b      	mov	r3, r7
 800616a:	f7fa f885 	bl	8000278 <__aeabi_dsub>
 800616e:	4602      	mov	r2, r0
 8006170:	460b      	mov	r3, r1
 8006172:	4606      	mov	r6, r0
 8006174:	460f      	mov	r7, r1
 8006176:	4640      	mov	r0, r8
 8006178:	4649      	mov	r1, r9
 800617a:	f7fa f87d 	bl	8000278 <__aeabi_dsub>
 800617e:	9a05      	ldr	r2, [sp, #20]
 8006180:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8006184:	1ad3      	subs	r3, r2, r3
 8006186:	2b31      	cmp	r3, #49	@ 0x31
 8006188:	dc20      	bgt.n	80061cc <__ieee754_rem_pio2+0x274>
 800618a:	e9c4 0100 	strd	r0, r1, [r4]
 800618e:	46c2      	mov	sl, r8
 8006190:	46cb      	mov	fp, r9
 8006192:	e9d4 8900 	ldrd	r8, r9, [r4]
 8006196:	4650      	mov	r0, sl
 8006198:	4642      	mov	r2, r8
 800619a:	464b      	mov	r3, r9
 800619c:	4659      	mov	r1, fp
 800619e:	f7fa f86b 	bl	8000278 <__aeabi_dsub>
 80061a2:	463b      	mov	r3, r7
 80061a4:	4632      	mov	r2, r6
 80061a6:	f7fa f867 	bl	8000278 <__aeabi_dsub>
 80061aa:	9b04      	ldr	r3, [sp, #16]
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80061b2:	f6bf af0e 	bge.w	8005fd2 <__ieee754_rem_pio2+0x7a>
 80061b6:	f109 4300 	add.w	r3, r9, #2147483648	@ 0x80000000
 80061ba:	6063      	str	r3, [r4, #4]
 80061bc:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80061c0:	f8c4 8000 	str.w	r8, [r4]
 80061c4:	60a0      	str	r0, [r4, #8]
 80061c6:	60e3      	str	r3, [r4, #12]
 80061c8:	426d      	negs	r5, r5
 80061ca:	e702      	b.n	8005fd2 <__ieee754_rem_pio2+0x7a>
 80061cc:	a326      	add	r3, pc, #152	@ (adr r3, 8006268 <__ieee754_rem_pio2+0x310>)
 80061ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061d2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80061d6:	f7fa fa07 	bl	80005e8 <__aeabi_dmul>
 80061da:	4606      	mov	r6, r0
 80061dc:	460f      	mov	r7, r1
 80061de:	4602      	mov	r2, r0
 80061e0:	460b      	mov	r3, r1
 80061e2:	4640      	mov	r0, r8
 80061e4:	4649      	mov	r1, r9
 80061e6:	f7fa f847 	bl	8000278 <__aeabi_dsub>
 80061ea:	4602      	mov	r2, r0
 80061ec:	460b      	mov	r3, r1
 80061ee:	4682      	mov	sl, r0
 80061f0:	468b      	mov	fp, r1
 80061f2:	4640      	mov	r0, r8
 80061f4:	4649      	mov	r1, r9
 80061f6:	f7fa f83f 	bl	8000278 <__aeabi_dsub>
 80061fa:	4632      	mov	r2, r6
 80061fc:	463b      	mov	r3, r7
 80061fe:	f7fa f83b 	bl	8000278 <__aeabi_dsub>
 8006202:	a31b      	add	r3, pc, #108	@ (adr r3, 8006270 <__ieee754_rem_pio2+0x318>)
 8006204:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006208:	4606      	mov	r6, r0
 800620a:	460f      	mov	r7, r1
 800620c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006210:	f7fa f9ea 	bl	80005e8 <__aeabi_dmul>
 8006214:	4632      	mov	r2, r6
 8006216:	463b      	mov	r3, r7
 8006218:	f7fa f82e 	bl	8000278 <__aeabi_dsub>
 800621c:	4606      	mov	r6, r0
 800621e:	460f      	mov	r7, r1
 8006220:	e764      	b.n	80060ec <__ieee754_rem_pio2+0x194>
 8006222:	4b1b      	ldr	r3, [pc, #108]	@ (8006290 <__ieee754_rem_pio2+0x338>)
 8006224:	4598      	cmp	r8, r3
 8006226:	d935      	bls.n	8006294 <__ieee754_rem_pio2+0x33c>
 8006228:	4632      	mov	r2, r6
 800622a:	463b      	mov	r3, r7
 800622c:	4630      	mov	r0, r6
 800622e:	4639      	mov	r1, r7
 8006230:	f7fa f822 	bl	8000278 <__aeabi_dsub>
 8006234:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8006238:	e9c4 0100 	strd	r0, r1, [r4]
 800623c:	e69e      	b.n	8005f7c <__ieee754_rem_pio2+0x24>
 800623e:	bf00      	nop
 8006240:	54400000 	.word	0x54400000
 8006244:	3ff921fb 	.word	0x3ff921fb
 8006248:	1a626331 	.word	0x1a626331
 800624c:	3dd0b461 	.word	0x3dd0b461
 8006250:	1a600000 	.word	0x1a600000
 8006254:	3dd0b461 	.word	0x3dd0b461
 8006258:	2e037073 	.word	0x2e037073
 800625c:	3ba3198a 	.word	0x3ba3198a
 8006260:	6dc9c883 	.word	0x6dc9c883
 8006264:	3fe45f30 	.word	0x3fe45f30
 8006268:	2e000000 	.word	0x2e000000
 800626c:	3ba3198a 	.word	0x3ba3198a
 8006270:	252049c1 	.word	0x252049c1
 8006274:	397b839a 	.word	0x397b839a
 8006278:	3fe921fb 	.word	0x3fe921fb
 800627c:	4002d97b 	.word	0x4002d97b
 8006280:	3ff921fb 	.word	0x3ff921fb
 8006284:	413921fb 	.word	0x413921fb
 8006288:	3fe00000 	.word	0x3fe00000
 800628c:	08006c98 	.word	0x08006c98
 8006290:	7fefffff 	.word	0x7fefffff
 8006294:	ea4f 5528 	mov.w	r5, r8, asr #20
 8006298:	f2a5 4516 	subw	r5, r5, #1046	@ 0x416
 800629c:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 80062a0:	4630      	mov	r0, r6
 80062a2:	460f      	mov	r7, r1
 80062a4:	f7fa fc3a 	bl	8000b1c <__aeabi_d2iz>
 80062a8:	f7fa f934 	bl	8000514 <__aeabi_i2d>
 80062ac:	4602      	mov	r2, r0
 80062ae:	460b      	mov	r3, r1
 80062b0:	4630      	mov	r0, r6
 80062b2:	4639      	mov	r1, r7
 80062b4:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80062b8:	f7f9 ffde 	bl	8000278 <__aeabi_dsub>
 80062bc:	4b22      	ldr	r3, [pc, #136]	@ (8006348 <__ieee754_rem_pio2+0x3f0>)
 80062be:	2200      	movs	r2, #0
 80062c0:	f7fa f992 	bl	80005e8 <__aeabi_dmul>
 80062c4:	460f      	mov	r7, r1
 80062c6:	4606      	mov	r6, r0
 80062c8:	f7fa fc28 	bl	8000b1c <__aeabi_d2iz>
 80062cc:	f7fa f922 	bl	8000514 <__aeabi_i2d>
 80062d0:	4602      	mov	r2, r0
 80062d2:	460b      	mov	r3, r1
 80062d4:	4630      	mov	r0, r6
 80062d6:	4639      	mov	r1, r7
 80062d8:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80062dc:	f7f9 ffcc 	bl	8000278 <__aeabi_dsub>
 80062e0:	4b19      	ldr	r3, [pc, #100]	@ (8006348 <__ieee754_rem_pio2+0x3f0>)
 80062e2:	2200      	movs	r2, #0
 80062e4:	f7fa f980 	bl	80005e8 <__aeabi_dmul>
 80062e8:	e9cd 010a 	strd	r0, r1, [sp, #40]	@ 0x28
 80062ec:	f10d 0930 	add.w	r9, sp, #48	@ 0x30
 80062f0:	f04f 0803 	mov.w	r8, #3
 80062f4:	2600      	movs	r6, #0
 80062f6:	2700      	movs	r7, #0
 80062f8:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 80062fc:	4632      	mov	r2, r6
 80062fe:	463b      	mov	r3, r7
 8006300:	46c2      	mov	sl, r8
 8006302:	f108 38ff 	add.w	r8, r8, #4294967295
 8006306:	f7fa fbd7 	bl	8000ab8 <__aeabi_dcmpeq>
 800630a:	2800      	cmp	r0, #0
 800630c:	d1f4      	bne.n	80062f8 <__ieee754_rem_pio2+0x3a0>
 800630e:	4b0f      	ldr	r3, [pc, #60]	@ (800634c <__ieee754_rem_pio2+0x3f4>)
 8006310:	9301      	str	r3, [sp, #4]
 8006312:	2302      	movs	r3, #2
 8006314:	9300      	str	r3, [sp, #0]
 8006316:	462a      	mov	r2, r5
 8006318:	4653      	mov	r3, sl
 800631a:	4621      	mov	r1, r4
 800631c:	a806      	add	r0, sp, #24
 800631e:	f000 f81f 	bl	8006360 <__kernel_rem_pio2>
 8006322:	9b04      	ldr	r3, [sp, #16]
 8006324:	2b00      	cmp	r3, #0
 8006326:	4605      	mov	r5, r0
 8006328:	f6bf ae53 	bge.w	8005fd2 <__ieee754_rem_pio2+0x7a>
 800632c:	e9d4 2100 	ldrd	r2, r1, [r4]
 8006330:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8006334:	e9c4 2300 	strd	r2, r3, [r4]
 8006338:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
 800633c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8006340:	e9c4 2302 	strd	r2, r3, [r4, #8]
 8006344:	e740      	b.n	80061c8 <__ieee754_rem_pio2+0x270>
 8006346:	bf00      	nop
 8006348:	41700000 	.word	0x41700000
 800634c:	08006d18 	.word	0x08006d18

08006350 <fabs>:
 8006350:	ec51 0b10 	vmov	r0, r1, d0
 8006354:	4602      	mov	r2, r0
 8006356:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800635a:	ec43 2b10 	vmov	d0, r2, r3
 800635e:	4770      	bx	lr

08006360 <__kernel_rem_pio2>:
 8006360:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006364:	ed2d 8b02 	vpush	{d8}
 8006368:	f5ad 7d19 	sub.w	sp, sp, #612	@ 0x264
 800636c:	f112 0f14 	cmn.w	r2, #20
 8006370:	9306      	str	r3, [sp, #24]
 8006372:	9104      	str	r1, [sp, #16]
 8006374:	4bc2      	ldr	r3, [pc, #776]	@ (8006680 <__kernel_rem_pio2+0x320>)
 8006376:	99a4      	ldr	r1, [sp, #656]	@ 0x290
 8006378:	9008      	str	r0, [sp, #32]
 800637a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800637e:	9300      	str	r3, [sp, #0]
 8006380:	9b06      	ldr	r3, [sp, #24]
 8006382:	f103 33ff 	add.w	r3, r3, #4294967295
 8006386:	bfa8      	it	ge
 8006388:	1ed4      	subge	r4, r2, #3
 800638a:	9305      	str	r3, [sp, #20]
 800638c:	bfb2      	itee	lt
 800638e:	2400      	movlt	r4, #0
 8006390:	2318      	movge	r3, #24
 8006392:	fb94 f4f3 	sdivge	r4, r4, r3
 8006396:	f06f 0317 	mvn.w	r3, #23
 800639a:	fb04 3303 	mla	r3, r4, r3, r3
 800639e:	eb03 0b02 	add.w	fp, r3, r2
 80063a2:	9b00      	ldr	r3, [sp, #0]
 80063a4:	9a05      	ldr	r2, [sp, #20]
 80063a6:	ed9f 8bb2 	vldr	d8, [pc, #712]	@ 8006670 <__kernel_rem_pio2+0x310>
 80063aa:	eb03 0802 	add.w	r8, r3, r2
 80063ae:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 80063b0:	1aa7      	subs	r7, r4, r2
 80063b2:	ae20      	add	r6, sp, #128	@ 0x80
 80063b4:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 80063b8:	2500      	movs	r5, #0
 80063ba:	4545      	cmp	r5, r8
 80063bc:	dd12      	ble.n	80063e4 <__kernel_rem_pio2+0x84>
 80063be:	9b06      	ldr	r3, [sp, #24]
 80063c0:	aa20      	add	r2, sp, #128	@ 0x80
 80063c2:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 80063c6:	f50d 7ae0 	add.w	sl, sp, #448	@ 0x1c0
 80063ca:	2700      	movs	r7, #0
 80063cc:	9b00      	ldr	r3, [sp, #0]
 80063ce:	429f      	cmp	r7, r3
 80063d0:	dc2e      	bgt.n	8006430 <__kernel_rem_pio2+0xd0>
 80063d2:	ed9f 7ba7 	vldr	d7, [pc, #668]	@ 8006670 <__kernel_rem_pio2+0x310>
 80063d6:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80063da:	ed8d 7b02 	vstr	d7, [sp, #8]
 80063de:	46a8      	mov	r8, r5
 80063e0:	2600      	movs	r6, #0
 80063e2:	e01b      	b.n	800641c <__kernel_rem_pio2+0xbc>
 80063e4:	42ef      	cmn	r7, r5
 80063e6:	d407      	bmi.n	80063f8 <__kernel_rem_pio2+0x98>
 80063e8:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 80063ec:	f7fa f892 	bl	8000514 <__aeabi_i2d>
 80063f0:	e8e6 0102 	strd	r0, r1, [r6], #8
 80063f4:	3501      	adds	r5, #1
 80063f6:	e7e0      	b.n	80063ba <__kernel_rem_pio2+0x5a>
 80063f8:	ec51 0b18 	vmov	r0, r1, d8
 80063fc:	e7f8      	b.n	80063f0 <__kernel_rem_pio2+0x90>
 80063fe:	e978 2302 	ldrd	r2, r3, [r8, #-8]!
 8006402:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8006406:	f7fa f8ef 	bl	80005e8 <__aeabi_dmul>
 800640a:	4602      	mov	r2, r0
 800640c:	460b      	mov	r3, r1
 800640e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006412:	f7f9 ff33 	bl	800027c <__adddf3>
 8006416:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800641a:	3601      	adds	r6, #1
 800641c:	9b05      	ldr	r3, [sp, #20]
 800641e:	429e      	cmp	r6, r3
 8006420:	dded      	ble.n	80063fe <__kernel_rem_pio2+0x9e>
 8006422:	ed9d 7b02 	vldr	d7, [sp, #8]
 8006426:	3701      	adds	r7, #1
 8006428:	ecaa 7b02 	vstmia	sl!, {d7}
 800642c:	3508      	adds	r5, #8
 800642e:	e7cd      	b.n	80063cc <__kernel_rem_pio2+0x6c>
 8006430:	9b00      	ldr	r3, [sp, #0]
 8006432:	f8dd 8000 	ldr.w	r8, [sp]
 8006436:	aa0c      	add	r2, sp, #48	@ 0x30
 8006438:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800643c:	930a      	str	r3, [sp, #40]	@ 0x28
 800643e:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 8006440:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8006444:	9309      	str	r3, [sp, #36]	@ 0x24
 8006446:	ea4f 03c8 	mov.w	r3, r8, lsl #3
 800644a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800644c:	ab98      	add	r3, sp, #608	@ 0x260
 800644e:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8006452:	ed13 7b28 	vldr	d7, [r3, #-160]	@ 0xffffff60
 8006456:	ed8d 7b02 	vstr	d7, [sp, #8]
 800645a:	ac0c      	add	r4, sp, #48	@ 0x30
 800645c:	ab70      	add	r3, sp, #448	@ 0x1c0
 800645e:	eb03 05c8 	add.w	r5, r3, r8, lsl #3
 8006462:	46a1      	mov	r9, r4
 8006464:	46c2      	mov	sl, r8
 8006466:	f1ba 0f00 	cmp.w	sl, #0
 800646a:	dc77      	bgt.n	800655c <__kernel_rem_pio2+0x1fc>
 800646c:	4658      	mov	r0, fp
 800646e:	ed9d 0b02 	vldr	d0, [sp, #8]
 8006472:	f000 fac5 	bl	8006a00 <scalbn>
 8006476:	ec57 6b10 	vmov	r6, r7, d0
 800647a:	2200      	movs	r2, #0
 800647c:	f04f 537f 	mov.w	r3, #1069547520	@ 0x3fc00000
 8006480:	4630      	mov	r0, r6
 8006482:	4639      	mov	r1, r7
 8006484:	f7fa f8b0 	bl	80005e8 <__aeabi_dmul>
 8006488:	ec41 0b10 	vmov	d0, r0, r1
 800648c:	f000 fb34 	bl	8006af8 <floor>
 8006490:	4b7c      	ldr	r3, [pc, #496]	@ (8006684 <__kernel_rem_pio2+0x324>)
 8006492:	ec51 0b10 	vmov	r0, r1, d0
 8006496:	2200      	movs	r2, #0
 8006498:	f7fa f8a6 	bl	80005e8 <__aeabi_dmul>
 800649c:	4602      	mov	r2, r0
 800649e:	460b      	mov	r3, r1
 80064a0:	4630      	mov	r0, r6
 80064a2:	4639      	mov	r1, r7
 80064a4:	f7f9 fee8 	bl	8000278 <__aeabi_dsub>
 80064a8:	460f      	mov	r7, r1
 80064aa:	4606      	mov	r6, r0
 80064ac:	f7fa fb36 	bl	8000b1c <__aeabi_d2iz>
 80064b0:	9002      	str	r0, [sp, #8]
 80064b2:	f7fa f82f 	bl	8000514 <__aeabi_i2d>
 80064b6:	4602      	mov	r2, r0
 80064b8:	460b      	mov	r3, r1
 80064ba:	4630      	mov	r0, r6
 80064bc:	4639      	mov	r1, r7
 80064be:	f7f9 fedb 	bl	8000278 <__aeabi_dsub>
 80064c2:	f1bb 0f00 	cmp.w	fp, #0
 80064c6:	4606      	mov	r6, r0
 80064c8:	460f      	mov	r7, r1
 80064ca:	dd6c      	ble.n	80065a6 <__kernel_rem_pio2+0x246>
 80064cc:	f108 31ff 	add.w	r1, r8, #4294967295
 80064d0:	ab0c      	add	r3, sp, #48	@ 0x30
 80064d2:	9d02      	ldr	r5, [sp, #8]
 80064d4:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80064d8:	f1cb 0018 	rsb	r0, fp, #24
 80064dc:	fa43 f200 	asr.w	r2, r3, r0
 80064e0:	4415      	add	r5, r2
 80064e2:	4082      	lsls	r2, r0
 80064e4:	1a9b      	subs	r3, r3, r2
 80064e6:	aa0c      	add	r2, sp, #48	@ 0x30
 80064e8:	9502      	str	r5, [sp, #8]
 80064ea:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 80064ee:	f1cb 0217 	rsb	r2, fp, #23
 80064f2:	fa43 f902 	asr.w	r9, r3, r2
 80064f6:	f1b9 0f00 	cmp.w	r9, #0
 80064fa:	dd64      	ble.n	80065c6 <__kernel_rem_pio2+0x266>
 80064fc:	9b02      	ldr	r3, [sp, #8]
 80064fe:	2200      	movs	r2, #0
 8006500:	3301      	adds	r3, #1
 8006502:	9302      	str	r3, [sp, #8]
 8006504:	4615      	mov	r5, r2
 8006506:	f06f 417f 	mvn.w	r1, #4278190080	@ 0xff000000
 800650a:	4590      	cmp	r8, r2
 800650c:	f300 80a1 	bgt.w	8006652 <__kernel_rem_pio2+0x2f2>
 8006510:	f1bb 0f00 	cmp.w	fp, #0
 8006514:	dd07      	ble.n	8006526 <__kernel_rem_pio2+0x1c6>
 8006516:	f1bb 0f01 	cmp.w	fp, #1
 800651a:	f000 80c1 	beq.w	80066a0 <__kernel_rem_pio2+0x340>
 800651e:	f1bb 0f02 	cmp.w	fp, #2
 8006522:	f000 80c8 	beq.w	80066b6 <__kernel_rem_pio2+0x356>
 8006526:	f1b9 0f02 	cmp.w	r9, #2
 800652a:	d14c      	bne.n	80065c6 <__kernel_rem_pio2+0x266>
 800652c:	4632      	mov	r2, r6
 800652e:	463b      	mov	r3, r7
 8006530:	4955      	ldr	r1, [pc, #340]	@ (8006688 <__kernel_rem_pio2+0x328>)
 8006532:	2000      	movs	r0, #0
 8006534:	f7f9 fea0 	bl	8000278 <__aeabi_dsub>
 8006538:	4606      	mov	r6, r0
 800653a:	460f      	mov	r7, r1
 800653c:	2d00      	cmp	r5, #0
 800653e:	d042      	beq.n	80065c6 <__kernel_rem_pio2+0x266>
 8006540:	4658      	mov	r0, fp
 8006542:	ed9f 0b4d 	vldr	d0, [pc, #308]	@ 8006678 <__kernel_rem_pio2+0x318>
 8006546:	f000 fa5b 	bl	8006a00 <scalbn>
 800654a:	4630      	mov	r0, r6
 800654c:	4639      	mov	r1, r7
 800654e:	ec53 2b10 	vmov	r2, r3, d0
 8006552:	f7f9 fe91 	bl	8000278 <__aeabi_dsub>
 8006556:	4606      	mov	r6, r0
 8006558:	460f      	mov	r7, r1
 800655a:	e034      	b.n	80065c6 <__kernel_rem_pio2+0x266>
 800655c:	4b4b      	ldr	r3, [pc, #300]	@ (800668c <__kernel_rem_pio2+0x32c>)
 800655e:	2200      	movs	r2, #0
 8006560:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006564:	f7fa f840 	bl	80005e8 <__aeabi_dmul>
 8006568:	f7fa fad8 	bl	8000b1c <__aeabi_d2iz>
 800656c:	f7f9 ffd2 	bl	8000514 <__aeabi_i2d>
 8006570:	4b47      	ldr	r3, [pc, #284]	@ (8006690 <__kernel_rem_pio2+0x330>)
 8006572:	2200      	movs	r2, #0
 8006574:	4606      	mov	r6, r0
 8006576:	460f      	mov	r7, r1
 8006578:	f7fa f836 	bl	80005e8 <__aeabi_dmul>
 800657c:	4602      	mov	r2, r0
 800657e:	460b      	mov	r3, r1
 8006580:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006584:	f7f9 fe78 	bl	8000278 <__aeabi_dsub>
 8006588:	f7fa fac8 	bl	8000b1c <__aeabi_d2iz>
 800658c:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 8006590:	f849 0b04 	str.w	r0, [r9], #4
 8006594:	4639      	mov	r1, r7
 8006596:	4630      	mov	r0, r6
 8006598:	f7f9 fe70 	bl	800027c <__adddf3>
 800659c:	f10a 3aff 	add.w	sl, sl, #4294967295
 80065a0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80065a4:	e75f      	b.n	8006466 <__kernel_rem_pio2+0x106>
 80065a6:	d107      	bne.n	80065b8 <__kernel_rem_pio2+0x258>
 80065a8:	f108 33ff 	add.w	r3, r8, #4294967295
 80065ac:	aa0c      	add	r2, sp, #48	@ 0x30
 80065ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80065b2:	ea4f 59e3 	mov.w	r9, r3, asr #23
 80065b6:	e79e      	b.n	80064f6 <__kernel_rem_pio2+0x196>
 80065b8:	4b36      	ldr	r3, [pc, #216]	@ (8006694 <__kernel_rem_pio2+0x334>)
 80065ba:	2200      	movs	r2, #0
 80065bc:	f7fa fa9a 	bl	8000af4 <__aeabi_dcmpge>
 80065c0:	2800      	cmp	r0, #0
 80065c2:	d143      	bne.n	800664c <__kernel_rem_pio2+0x2ec>
 80065c4:	4681      	mov	r9, r0
 80065c6:	2200      	movs	r2, #0
 80065c8:	2300      	movs	r3, #0
 80065ca:	4630      	mov	r0, r6
 80065cc:	4639      	mov	r1, r7
 80065ce:	f7fa fa73 	bl	8000ab8 <__aeabi_dcmpeq>
 80065d2:	2800      	cmp	r0, #0
 80065d4:	f000 80c1 	beq.w	800675a <__kernel_rem_pio2+0x3fa>
 80065d8:	f108 33ff 	add.w	r3, r8, #4294967295
 80065dc:	2200      	movs	r2, #0
 80065de:	9900      	ldr	r1, [sp, #0]
 80065e0:	428b      	cmp	r3, r1
 80065e2:	da70      	bge.n	80066c6 <__kernel_rem_pio2+0x366>
 80065e4:	2a00      	cmp	r2, #0
 80065e6:	f000 808b 	beq.w	8006700 <__kernel_rem_pio2+0x3a0>
 80065ea:	f108 38ff 	add.w	r8, r8, #4294967295
 80065ee:	ab0c      	add	r3, sp, #48	@ 0x30
 80065f0:	f1ab 0b18 	sub.w	fp, fp, #24
 80065f4:	f853 3028 	ldr.w	r3, [r3, r8, lsl #2]
 80065f8:	2b00      	cmp	r3, #0
 80065fa:	d0f6      	beq.n	80065ea <__kernel_rem_pio2+0x28a>
 80065fc:	4658      	mov	r0, fp
 80065fe:	ed9f 0b1e 	vldr	d0, [pc, #120]	@ 8006678 <__kernel_rem_pio2+0x318>
 8006602:	f000 f9fd 	bl	8006a00 <scalbn>
 8006606:	f108 0301 	add.w	r3, r8, #1
 800660a:	00da      	lsls	r2, r3, #3
 800660c:	9205      	str	r2, [sp, #20]
 800660e:	ec55 4b10 	vmov	r4, r5, d0
 8006612:	aa70      	add	r2, sp, #448	@ 0x1c0
 8006614:	f8df b074 	ldr.w	fp, [pc, #116]	@ 800668c <__kernel_rem_pio2+0x32c>
 8006618:	eb02 07c3 	add.w	r7, r2, r3, lsl #3
 800661c:	4646      	mov	r6, r8
 800661e:	f04f 0a00 	mov.w	sl, #0
 8006622:	2e00      	cmp	r6, #0
 8006624:	f280 80d1 	bge.w	80067ca <__kernel_rem_pio2+0x46a>
 8006628:	4644      	mov	r4, r8
 800662a:	2c00      	cmp	r4, #0
 800662c:	f2c0 80ff 	blt.w	800682e <__kernel_rem_pio2+0x4ce>
 8006630:	4b19      	ldr	r3, [pc, #100]	@ (8006698 <__kernel_rem_pio2+0x338>)
 8006632:	461f      	mov	r7, r3
 8006634:	ab70      	add	r3, sp, #448	@ 0x1c0
 8006636:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800663a:	9306      	str	r3, [sp, #24]
 800663c:	f04f 0a00 	mov.w	sl, #0
 8006640:	f04f 0b00 	mov.w	fp, #0
 8006644:	2600      	movs	r6, #0
 8006646:	eba8 0504 	sub.w	r5, r8, r4
 800664a:	e0e4      	b.n	8006816 <__kernel_rem_pio2+0x4b6>
 800664c:	f04f 0902 	mov.w	r9, #2
 8006650:	e754      	b.n	80064fc <__kernel_rem_pio2+0x19c>
 8006652:	f854 3b04 	ldr.w	r3, [r4], #4
 8006656:	bb0d      	cbnz	r5, 800669c <__kernel_rem_pio2+0x33c>
 8006658:	b123      	cbz	r3, 8006664 <__kernel_rem_pio2+0x304>
 800665a:	f1c3 7380 	rsb	r3, r3, #16777216	@ 0x1000000
 800665e:	f844 3c04 	str.w	r3, [r4, #-4]
 8006662:	2301      	movs	r3, #1
 8006664:	3201      	adds	r2, #1
 8006666:	461d      	mov	r5, r3
 8006668:	e74f      	b.n	800650a <__kernel_rem_pio2+0x1aa>
 800666a:	bf00      	nop
 800666c:	f3af 8000 	nop.w
	...
 800667c:	3ff00000 	.word	0x3ff00000
 8006680:	08006e60 	.word	0x08006e60
 8006684:	40200000 	.word	0x40200000
 8006688:	3ff00000 	.word	0x3ff00000
 800668c:	3e700000 	.word	0x3e700000
 8006690:	41700000 	.word	0x41700000
 8006694:	3fe00000 	.word	0x3fe00000
 8006698:	08006e20 	.word	0x08006e20
 800669c:	1acb      	subs	r3, r1, r3
 800669e:	e7de      	b.n	800665e <__kernel_rem_pio2+0x2fe>
 80066a0:	f108 32ff 	add.w	r2, r8, #4294967295
 80066a4:	ab0c      	add	r3, sp, #48	@ 0x30
 80066a6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80066aa:	f3c3 0316 	ubfx	r3, r3, #0, #23
 80066ae:	a90c      	add	r1, sp, #48	@ 0x30
 80066b0:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 80066b4:	e737      	b.n	8006526 <__kernel_rem_pio2+0x1c6>
 80066b6:	f108 32ff 	add.w	r2, r8, #4294967295
 80066ba:	ab0c      	add	r3, sp, #48	@ 0x30
 80066bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80066c0:	f3c3 0315 	ubfx	r3, r3, #0, #22
 80066c4:	e7f3      	b.n	80066ae <__kernel_rem_pio2+0x34e>
 80066c6:	a90c      	add	r1, sp, #48	@ 0x30
 80066c8:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 80066cc:	3b01      	subs	r3, #1
 80066ce:	430a      	orrs	r2, r1
 80066d0:	e785      	b.n	80065de <__kernel_rem_pio2+0x27e>
 80066d2:	3401      	adds	r4, #1
 80066d4:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 80066d8:	2a00      	cmp	r2, #0
 80066da:	d0fa      	beq.n	80066d2 <__kernel_rem_pio2+0x372>
 80066dc:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80066de:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 80066e2:	eb0d 0503 	add.w	r5, sp, r3
 80066e6:	9b06      	ldr	r3, [sp, #24]
 80066e8:	aa20      	add	r2, sp, #128	@ 0x80
 80066ea:	4443      	add	r3, r8
 80066ec:	f108 0701 	add.w	r7, r8, #1
 80066f0:	3d98      	subs	r5, #152	@ 0x98
 80066f2:	eb02 06c3 	add.w	r6, r2, r3, lsl #3
 80066f6:	4444      	add	r4, r8
 80066f8:	42bc      	cmp	r4, r7
 80066fa:	da04      	bge.n	8006706 <__kernel_rem_pio2+0x3a6>
 80066fc:	46a0      	mov	r8, r4
 80066fe:	e6a2      	b.n	8006446 <__kernel_rem_pio2+0xe6>
 8006700:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006702:	2401      	movs	r4, #1
 8006704:	e7e6      	b.n	80066d4 <__kernel_rem_pio2+0x374>
 8006706:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006708:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 800670c:	f7f9 ff02 	bl	8000514 <__aeabi_i2d>
 8006710:	ed9f 7baf 	vldr	d7, [pc, #700]	@ 80069d0 <__kernel_rem_pio2+0x670>
 8006714:	e8e6 0102 	strd	r0, r1, [r6], #8
 8006718:	ed8d 7b02 	vstr	d7, [sp, #8]
 800671c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006720:	46b2      	mov	sl, r6
 8006722:	f04f 0800 	mov.w	r8, #0
 8006726:	9b05      	ldr	r3, [sp, #20]
 8006728:	4598      	cmp	r8, r3
 800672a:	dd05      	ble.n	8006738 <__kernel_rem_pio2+0x3d8>
 800672c:	ed9d 7b02 	vldr	d7, [sp, #8]
 8006730:	3701      	adds	r7, #1
 8006732:	eca5 7b02 	vstmia	r5!, {d7}
 8006736:	e7df      	b.n	80066f8 <__kernel_rem_pio2+0x398>
 8006738:	e97a 2302 	ldrd	r2, r3, [sl, #-8]!
 800673c:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8006740:	f7f9 ff52 	bl	80005e8 <__aeabi_dmul>
 8006744:	4602      	mov	r2, r0
 8006746:	460b      	mov	r3, r1
 8006748:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800674c:	f7f9 fd96 	bl	800027c <__adddf3>
 8006750:	f108 0801 	add.w	r8, r8, #1
 8006754:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006758:	e7e5      	b.n	8006726 <__kernel_rem_pio2+0x3c6>
 800675a:	f1cb 0000 	rsb	r0, fp, #0
 800675e:	ec47 6b10 	vmov	d0, r6, r7
 8006762:	f000 f94d 	bl	8006a00 <scalbn>
 8006766:	ec55 4b10 	vmov	r4, r5, d0
 800676a:	4b9b      	ldr	r3, [pc, #620]	@ (80069d8 <__kernel_rem_pio2+0x678>)
 800676c:	2200      	movs	r2, #0
 800676e:	4620      	mov	r0, r4
 8006770:	4629      	mov	r1, r5
 8006772:	f7fa f9bf 	bl	8000af4 <__aeabi_dcmpge>
 8006776:	b300      	cbz	r0, 80067ba <__kernel_rem_pio2+0x45a>
 8006778:	4b98      	ldr	r3, [pc, #608]	@ (80069dc <__kernel_rem_pio2+0x67c>)
 800677a:	2200      	movs	r2, #0
 800677c:	4620      	mov	r0, r4
 800677e:	4629      	mov	r1, r5
 8006780:	f7f9 ff32 	bl	80005e8 <__aeabi_dmul>
 8006784:	f7fa f9ca 	bl	8000b1c <__aeabi_d2iz>
 8006788:	4606      	mov	r6, r0
 800678a:	f7f9 fec3 	bl	8000514 <__aeabi_i2d>
 800678e:	4b92      	ldr	r3, [pc, #584]	@ (80069d8 <__kernel_rem_pio2+0x678>)
 8006790:	2200      	movs	r2, #0
 8006792:	f7f9 ff29 	bl	80005e8 <__aeabi_dmul>
 8006796:	460b      	mov	r3, r1
 8006798:	4602      	mov	r2, r0
 800679a:	4629      	mov	r1, r5
 800679c:	4620      	mov	r0, r4
 800679e:	f7f9 fd6b 	bl	8000278 <__aeabi_dsub>
 80067a2:	f7fa f9bb 	bl	8000b1c <__aeabi_d2iz>
 80067a6:	ab0c      	add	r3, sp, #48	@ 0x30
 80067a8:	f10b 0b18 	add.w	fp, fp, #24
 80067ac:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 80067b0:	f108 0801 	add.w	r8, r8, #1
 80067b4:	f843 6028 	str.w	r6, [r3, r8, lsl #2]
 80067b8:	e720      	b.n	80065fc <__kernel_rem_pio2+0x29c>
 80067ba:	4620      	mov	r0, r4
 80067bc:	4629      	mov	r1, r5
 80067be:	f7fa f9ad 	bl	8000b1c <__aeabi_d2iz>
 80067c2:	ab0c      	add	r3, sp, #48	@ 0x30
 80067c4:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 80067c8:	e718      	b.n	80065fc <__kernel_rem_pio2+0x29c>
 80067ca:	ab0c      	add	r3, sp, #48	@ 0x30
 80067cc:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 80067d0:	f7f9 fea0 	bl	8000514 <__aeabi_i2d>
 80067d4:	4622      	mov	r2, r4
 80067d6:	462b      	mov	r3, r5
 80067d8:	f7f9 ff06 	bl	80005e8 <__aeabi_dmul>
 80067dc:	4652      	mov	r2, sl
 80067de:	e967 0102 	strd	r0, r1, [r7, #-8]!
 80067e2:	465b      	mov	r3, fp
 80067e4:	4620      	mov	r0, r4
 80067e6:	4629      	mov	r1, r5
 80067e8:	f7f9 fefe 	bl	80005e8 <__aeabi_dmul>
 80067ec:	3e01      	subs	r6, #1
 80067ee:	4604      	mov	r4, r0
 80067f0:	460d      	mov	r5, r1
 80067f2:	e716      	b.n	8006622 <__kernel_rem_pio2+0x2c2>
 80067f4:	9906      	ldr	r1, [sp, #24]
 80067f6:	e8f1 2302 	ldrd	r2, r3, [r1], #8
 80067fa:	9106      	str	r1, [sp, #24]
 80067fc:	e8f7 0102 	ldrd	r0, r1, [r7], #8
 8006800:	f7f9 fef2 	bl	80005e8 <__aeabi_dmul>
 8006804:	4602      	mov	r2, r0
 8006806:	460b      	mov	r3, r1
 8006808:	4650      	mov	r0, sl
 800680a:	4659      	mov	r1, fp
 800680c:	f7f9 fd36 	bl	800027c <__adddf3>
 8006810:	3601      	adds	r6, #1
 8006812:	4682      	mov	sl, r0
 8006814:	468b      	mov	fp, r1
 8006816:	9b00      	ldr	r3, [sp, #0]
 8006818:	429e      	cmp	r6, r3
 800681a:	dc01      	bgt.n	8006820 <__kernel_rem_pio2+0x4c0>
 800681c:	42ae      	cmp	r6, r5
 800681e:	dde9      	ble.n	80067f4 <__kernel_rem_pio2+0x494>
 8006820:	ab48      	add	r3, sp, #288	@ 0x120
 8006822:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8006826:	e9c5 ab00 	strd	sl, fp, [r5]
 800682a:	3c01      	subs	r4, #1
 800682c:	e6fd      	b.n	800662a <__kernel_rem_pio2+0x2ca>
 800682e:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 8006830:	2b02      	cmp	r3, #2
 8006832:	dc0b      	bgt.n	800684c <__kernel_rem_pio2+0x4ec>
 8006834:	2b00      	cmp	r3, #0
 8006836:	dc35      	bgt.n	80068a4 <__kernel_rem_pio2+0x544>
 8006838:	d059      	beq.n	80068ee <__kernel_rem_pio2+0x58e>
 800683a:	9b02      	ldr	r3, [sp, #8]
 800683c:	f003 0007 	and.w	r0, r3, #7
 8006840:	f50d 7d19 	add.w	sp, sp, #612	@ 0x264
 8006844:	ecbd 8b02 	vpop	{d8}
 8006848:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800684c:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 800684e:	2b03      	cmp	r3, #3
 8006850:	d1f3      	bne.n	800683a <__kernel_rem_pio2+0x4da>
 8006852:	9b05      	ldr	r3, [sp, #20]
 8006854:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8006858:	eb0d 0403 	add.w	r4, sp, r3
 800685c:	f5a4 74a4 	sub.w	r4, r4, #328	@ 0x148
 8006860:	4625      	mov	r5, r4
 8006862:	46c2      	mov	sl, r8
 8006864:	f1ba 0f00 	cmp.w	sl, #0
 8006868:	dc69      	bgt.n	800693e <__kernel_rem_pio2+0x5de>
 800686a:	4645      	mov	r5, r8
 800686c:	2d01      	cmp	r5, #1
 800686e:	f300 8087 	bgt.w	8006980 <__kernel_rem_pio2+0x620>
 8006872:	9c05      	ldr	r4, [sp, #20]
 8006874:	ab48      	add	r3, sp, #288	@ 0x120
 8006876:	441c      	add	r4, r3
 8006878:	2000      	movs	r0, #0
 800687a:	2100      	movs	r1, #0
 800687c:	f1b8 0f01 	cmp.w	r8, #1
 8006880:	f300 809c 	bgt.w	80069bc <__kernel_rem_pio2+0x65c>
 8006884:	e9dd 5648 	ldrd	r5, r6, [sp, #288]	@ 0x120
 8006888:	e9dd 784a 	ldrd	r7, r8, [sp, #296]	@ 0x128
 800688c:	f1b9 0f00 	cmp.w	r9, #0
 8006890:	f040 80a6 	bne.w	80069e0 <__kernel_rem_pio2+0x680>
 8006894:	9b04      	ldr	r3, [sp, #16]
 8006896:	e9c3 5600 	strd	r5, r6, [r3]
 800689a:	e9c3 7802 	strd	r7, r8, [r3, #8]
 800689e:	e9c3 0104 	strd	r0, r1, [r3, #16]
 80068a2:	e7ca      	b.n	800683a <__kernel_rem_pio2+0x4da>
 80068a4:	9d05      	ldr	r5, [sp, #20]
 80068a6:	ab48      	add	r3, sp, #288	@ 0x120
 80068a8:	441d      	add	r5, r3
 80068aa:	4644      	mov	r4, r8
 80068ac:	2000      	movs	r0, #0
 80068ae:	2100      	movs	r1, #0
 80068b0:	2c00      	cmp	r4, #0
 80068b2:	da35      	bge.n	8006920 <__kernel_rem_pio2+0x5c0>
 80068b4:	f1b9 0f00 	cmp.w	r9, #0
 80068b8:	d038      	beq.n	800692c <__kernel_rem_pio2+0x5cc>
 80068ba:	4602      	mov	r2, r0
 80068bc:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80068c0:	9c04      	ldr	r4, [sp, #16]
 80068c2:	e9c4 2300 	strd	r2, r3, [r4]
 80068c6:	4602      	mov	r2, r0
 80068c8:	460b      	mov	r3, r1
 80068ca:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	@ 0x120
 80068ce:	f7f9 fcd3 	bl	8000278 <__aeabi_dsub>
 80068d2:	ad4a      	add	r5, sp, #296	@ 0x128
 80068d4:	2401      	movs	r4, #1
 80068d6:	45a0      	cmp	r8, r4
 80068d8:	da2b      	bge.n	8006932 <__kernel_rem_pio2+0x5d2>
 80068da:	f1b9 0f00 	cmp.w	r9, #0
 80068de:	d002      	beq.n	80068e6 <__kernel_rem_pio2+0x586>
 80068e0:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80068e4:	4619      	mov	r1, r3
 80068e6:	9b04      	ldr	r3, [sp, #16]
 80068e8:	e9c3 0102 	strd	r0, r1, [r3, #8]
 80068ec:	e7a5      	b.n	800683a <__kernel_rem_pio2+0x4da>
 80068ee:	9c05      	ldr	r4, [sp, #20]
 80068f0:	ab48      	add	r3, sp, #288	@ 0x120
 80068f2:	441c      	add	r4, r3
 80068f4:	2000      	movs	r0, #0
 80068f6:	2100      	movs	r1, #0
 80068f8:	f1b8 0f00 	cmp.w	r8, #0
 80068fc:	da09      	bge.n	8006912 <__kernel_rem_pio2+0x5b2>
 80068fe:	f1b9 0f00 	cmp.w	r9, #0
 8006902:	d002      	beq.n	800690a <__kernel_rem_pio2+0x5aa>
 8006904:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8006908:	4619      	mov	r1, r3
 800690a:	9b04      	ldr	r3, [sp, #16]
 800690c:	e9c3 0100 	strd	r0, r1, [r3]
 8006910:	e793      	b.n	800683a <__kernel_rem_pio2+0x4da>
 8006912:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8006916:	f7f9 fcb1 	bl	800027c <__adddf3>
 800691a:	f108 38ff 	add.w	r8, r8, #4294967295
 800691e:	e7eb      	b.n	80068f8 <__kernel_rem_pio2+0x598>
 8006920:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 8006924:	f7f9 fcaa 	bl	800027c <__adddf3>
 8006928:	3c01      	subs	r4, #1
 800692a:	e7c1      	b.n	80068b0 <__kernel_rem_pio2+0x550>
 800692c:	4602      	mov	r2, r0
 800692e:	460b      	mov	r3, r1
 8006930:	e7c6      	b.n	80068c0 <__kernel_rem_pio2+0x560>
 8006932:	e8f5 2302 	ldrd	r2, r3, [r5], #8
 8006936:	f7f9 fca1 	bl	800027c <__adddf3>
 800693a:	3401      	adds	r4, #1
 800693c:	e7cb      	b.n	80068d6 <__kernel_rem_pio2+0x576>
 800693e:	ed35 7b02 	vldmdb	r5!, {d7}
 8006942:	ed8d 7b00 	vstr	d7, [sp]
 8006946:	ed95 7b02 	vldr	d7, [r5, #8]
 800694a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800694e:	ec53 2b17 	vmov	r2, r3, d7
 8006952:	ed8d 7b06 	vstr	d7, [sp, #24]
 8006956:	f7f9 fc91 	bl	800027c <__adddf3>
 800695a:	4602      	mov	r2, r0
 800695c:	460b      	mov	r3, r1
 800695e:	4606      	mov	r6, r0
 8006960:	460f      	mov	r7, r1
 8006962:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006966:	f7f9 fc87 	bl	8000278 <__aeabi_dsub>
 800696a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800696e:	f7f9 fc85 	bl	800027c <__adddf3>
 8006972:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006976:	e9c5 0102 	strd	r0, r1, [r5, #8]
 800697a:	e9c5 6700 	strd	r6, r7, [r5]
 800697e:	e771      	b.n	8006864 <__kernel_rem_pio2+0x504>
 8006980:	ed34 7b02 	vldmdb	r4!, {d7}
 8006984:	e9d4 ab02 	ldrd	sl, fp, [r4, #8]
 8006988:	ec51 0b17 	vmov	r0, r1, d7
 800698c:	4652      	mov	r2, sl
 800698e:	465b      	mov	r3, fp
 8006990:	ed8d 7b00 	vstr	d7, [sp]
 8006994:	f7f9 fc72 	bl	800027c <__adddf3>
 8006998:	4602      	mov	r2, r0
 800699a:	460b      	mov	r3, r1
 800699c:	4606      	mov	r6, r0
 800699e:	460f      	mov	r7, r1
 80069a0:	e9dd 0100 	ldrd	r0, r1, [sp]
 80069a4:	f7f9 fc68 	bl	8000278 <__aeabi_dsub>
 80069a8:	4652      	mov	r2, sl
 80069aa:	465b      	mov	r3, fp
 80069ac:	f7f9 fc66 	bl	800027c <__adddf3>
 80069b0:	3d01      	subs	r5, #1
 80069b2:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80069b6:	e9c4 6700 	strd	r6, r7, [r4]
 80069ba:	e757      	b.n	800686c <__kernel_rem_pio2+0x50c>
 80069bc:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 80069c0:	f7f9 fc5c 	bl	800027c <__adddf3>
 80069c4:	f108 38ff 	add.w	r8, r8, #4294967295
 80069c8:	e758      	b.n	800687c <__kernel_rem_pio2+0x51c>
 80069ca:	bf00      	nop
 80069cc:	f3af 8000 	nop.w
	...
 80069d8:	41700000 	.word	0x41700000
 80069dc:	3e700000 	.word	0x3e700000
 80069e0:	9b04      	ldr	r3, [sp, #16]
 80069e2:	9a04      	ldr	r2, [sp, #16]
 80069e4:	601d      	str	r5, [r3, #0]
 80069e6:	f106 4400 	add.w	r4, r6, #2147483648	@ 0x80000000
 80069ea:	605c      	str	r4, [r3, #4]
 80069ec:	609f      	str	r7, [r3, #8]
 80069ee:	f108 4300 	add.w	r3, r8, #2147483648	@ 0x80000000
 80069f2:	60d3      	str	r3, [r2, #12]
 80069f4:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80069f8:	6110      	str	r0, [r2, #16]
 80069fa:	6153      	str	r3, [r2, #20]
 80069fc:	e71d      	b.n	800683a <__kernel_rem_pio2+0x4da>
 80069fe:	bf00      	nop

08006a00 <scalbn>:
 8006a00:	b570      	push	{r4, r5, r6, lr}
 8006a02:	ec55 4b10 	vmov	r4, r5, d0
 8006a06:	f3c5 510a 	ubfx	r1, r5, #20, #11
 8006a0a:	4606      	mov	r6, r0
 8006a0c:	462b      	mov	r3, r5
 8006a0e:	b991      	cbnz	r1, 8006a36 <scalbn+0x36>
 8006a10:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 8006a14:	4323      	orrs	r3, r4
 8006a16:	d03b      	beq.n	8006a90 <scalbn+0x90>
 8006a18:	4b33      	ldr	r3, [pc, #204]	@ (8006ae8 <scalbn+0xe8>)
 8006a1a:	4620      	mov	r0, r4
 8006a1c:	4629      	mov	r1, r5
 8006a1e:	2200      	movs	r2, #0
 8006a20:	f7f9 fde2 	bl	80005e8 <__aeabi_dmul>
 8006a24:	4b31      	ldr	r3, [pc, #196]	@ (8006aec <scalbn+0xec>)
 8006a26:	429e      	cmp	r6, r3
 8006a28:	4604      	mov	r4, r0
 8006a2a:	460d      	mov	r5, r1
 8006a2c:	da0f      	bge.n	8006a4e <scalbn+0x4e>
 8006a2e:	a326      	add	r3, pc, #152	@ (adr r3, 8006ac8 <scalbn+0xc8>)
 8006a30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a34:	e01e      	b.n	8006a74 <scalbn+0x74>
 8006a36:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 8006a3a:	4291      	cmp	r1, r2
 8006a3c:	d10b      	bne.n	8006a56 <scalbn+0x56>
 8006a3e:	4622      	mov	r2, r4
 8006a40:	4620      	mov	r0, r4
 8006a42:	4629      	mov	r1, r5
 8006a44:	f7f9 fc1a 	bl	800027c <__adddf3>
 8006a48:	4604      	mov	r4, r0
 8006a4a:	460d      	mov	r5, r1
 8006a4c:	e020      	b.n	8006a90 <scalbn+0x90>
 8006a4e:	460b      	mov	r3, r1
 8006a50:	f3c1 510a 	ubfx	r1, r1, #20, #11
 8006a54:	3936      	subs	r1, #54	@ 0x36
 8006a56:	f24c 3250 	movw	r2, #50000	@ 0xc350
 8006a5a:	4296      	cmp	r6, r2
 8006a5c:	dd0d      	ble.n	8006a7a <scalbn+0x7a>
 8006a5e:	2d00      	cmp	r5, #0
 8006a60:	a11b      	add	r1, pc, #108	@ (adr r1, 8006ad0 <scalbn+0xd0>)
 8006a62:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006a66:	da02      	bge.n	8006a6e <scalbn+0x6e>
 8006a68:	a11b      	add	r1, pc, #108	@ (adr r1, 8006ad8 <scalbn+0xd8>)
 8006a6a:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006a6e:	a318      	add	r3, pc, #96	@ (adr r3, 8006ad0 <scalbn+0xd0>)
 8006a70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a74:	f7f9 fdb8 	bl	80005e8 <__aeabi_dmul>
 8006a78:	e7e6      	b.n	8006a48 <scalbn+0x48>
 8006a7a:	1872      	adds	r2, r6, r1
 8006a7c:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 8006a80:	428a      	cmp	r2, r1
 8006a82:	dcec      	bgt.n	8006a5e <scalbn+0x5e>
 8006a84:	2a00      	cmp	r2, #0
 8006a86:	dd06      	ble.n	8006a96 <scalbn+0x96>
 8006a88:	f36f 531e 	bfc	r3, #20, #11
 8006a8c:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8006a90:	ec45 4b10 	vmov	d0, r4, r5
 8006a94:	bd70      	pop	{r4, r5, r6, pc}
 8006a96:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 8006a9a:	da08      	bge.n	8006aae <scalbn+0xae>
 8006a9c:	2d00      	cmp	r5, #0
 8006a9e:	a10a      	add	r1, pc, #40	@ (adr r1, 8006ac8 <scalbn+0xc8>)
 8006aa0:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006aa4:	dac3      	bge.n	8006a2e <scalbn+0x2e>
 8006aa6:	a10e      	add	r1, pc, #56	@ (adr r1, 8006ae0 <scalbn+0xe0>)
 8006aa8:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006aac:	e7bf      	b.n	8006a2e <scalbn+0x2e>
 8006aae:	3236      	adds	r2, #54	@ 0x36
 8006ab0:	f36f 531e 	bfc	r3, #20, #11
 8006ab4:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8006ab8:	4620      	mov	r0, r4
 8006aba:	4b0d      	ldr	r3, [pc, #52]	@ (8006af0 <scalbn+0xf0>)
 8006abc:	4629      	mov	r1, r5
 8006abe:	2200      	movs	r2, #0
 8006ac0:	e7d8      	b.n	8006a74 <scalbn+0x74>
 8006ac2:	bf00      	nop
 8006ac4:	f3af 8000 	nop.w
 8006ac8:	c2f8f359 	.word	0xc2f8f359
 8006acc:	01a56e1f 	.word	0x01a56e1f
 8006ad0:	8800759c 	.word	0x8800759c
 8006ad4:	7e37e43c 	.word	0x7e37e43c
 8006ad8:	8800759c 	.word	0x8800759c
 8006adc:	fe37e43c 	.word	0xfe37e43c
 8006ae0:	c2f8f359 	.word	0xc2f8f359
 8006ae4:	81a56e1f 	.word	0x81a56e1f
 8006ae8:	43500000 	.word	0x43500000
 8006aec:	ffff3cb0 	.word	0xffff3cb0
 8006af0:	3c900000 	.word	0x3c900000
 8006af4:	00000000 	.word	0x00000000

08006af8 <floor>:
 8006af8:	ec51 0b10 	vmov	r0, r1, d0
 8006afc:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8006b00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006b04:	f2a3 36ff 	subw	r6, r3, #1023	@ 0x3ff
 8006b08:	2e13      	cmp	r6, #19
 8006b0a:	460c      	mov	r4, r1
 8006b0c:	4605      	mov	r5, r0
 8006b0e:	4680      	mov	r8, r0
 8006b10:	dc34      	bgt.n	8006b7c <floor+0x84>
 8006b12:	2e00      	cmp	r6, #0
 8006b14:	da17      	bge.n	8006b46 <floor+0x4e>
 8006b16:	a332      	add	r3, pc, #200	@ (adr r3, 8006be0 <floor+0xe8>)
 8006b18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b1c:	f7f9 fbae 	bl	800027c <__adddf3>
 8006b20:	2200      	movs	r2, #0
 8006b22:	2300      	movs	r3, #0
 8006b24:	f7f9 fff0 	bl	8000b08 <__aeabi_dcmpgt>
 8006b28:	b150      	cbz	r0, 8006b40 <floor+0x48>
 8006b2a:	2c00      	cmp	r4, #0
 8006b2c:	da55      	bge.n	8006bda <floor+0xe2>
 8006b2e:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
 8006b32:	432c      	orrs	r4, r5
 8006b34:	2500      	movs	r5, #0
 8006b36:	42ac      	cmp	r4, r5
 8006b38:	4c2b      	ldr	r4, [pc, #172]	@ (8006be8 <floor+0xf0>)
 8006b3a:	bf08      	it	eq
 8006b3c:	f04f 4400 	moveq.w	r4, #2147483648	@ 0x80000000
 8006b40:	4621      	mov	r1, r4
 8006b42:	4628      	mov	r0, r5
 8006b44:	e023      	b.n	8006b8e <floor+0x96>
 8006b46:	4f29      	ldr	r7, [pc, #164]	@ (8006bec <floor+0xf4>)
 8006b48:	4137      	asrs	r7, r6
 8006b4a:	ea01 0307 	and.w	r3, r1, r7
 8006b4e:	4303      	orrs	r3, r0
 8006b50:	d01d      	beq.n	8006b8e <floor+0x96>
 8006b52:	a323      	add	r3, pc, #140	@ (adr r3, 8006be0 <floor+0xe8>)
 8006b54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b58:	f7f9 fb90 	bl	800027c <__adddf3>
 8006b5c:	2200      	movs	r2, #0
 8006b5e:	2300      	movs	r3, #0
 8006b60:	f7f9 ffd2 	bl	8000b08 <__aeabi_dcmpgt>
 8006b64:	2800      	cmp	r0, #0
 8006b66:	d0eb      	beq.n	8006b40 <floor+0x48>
 8006b68:	2c00      	cmp	r4, #0
 8006b6a:	bfbe      	ittt	lt
 8006b6c:	f44f 1380 	movlt.w	r3, #1048576	@ 0x100000
 8006b70:	4133      	asrlt	r3, r6
 8006b72:	18e4      	addlt	r4, r4, r3
 8006b74:	ea24 0407 	bic.w	r4, r4, r7
 8006b78:	2500      	movs	r5, #0
 8006b7a:	e7e1      	b.n	8006b40 <floor+0x48>
 8006b7c:	2e33      	cmp	r6, #51	@ 0x33
 8006b7e:	dd0a      	ble.n	8006b96 <floor+0x9e>
 8006b80:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
 8006b84:	d103      	bne.n	8006b8e <floor+0x96>
 8006b86:	4602      	mov	r2, r0
 8006b88:	460b      	mov	r3, r1
 8006b8a:	f7f9 fb77 	bl	800027c <__adddf3>
 8006b8e:	ec41 0b10 	vmov	d0, r0, r1
 8006b92:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006b96:	f2a3 4313 	subw	r3, r3, #1043	@ 0x413
 8006b9a:	f04f 37ff 	mov.w	r7, #4294967295
 8006b9e:	40df      	lsrs	r7, r3
 8006ba0:	4207      	tst	r7, r0
 8006ba2:	d0f4      	beq.n	8006b8e <floor+0x96>
 8006ba4:	a30e      	add	r3, pc, #56	@ (adr r3, 8006be0 <floor+0xe8>)
 8006ba6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006baa:	f7f9 fb67 	bl	800027c <__adddf3>
 8006bae:	2200      	movs	r2, #0
 8006bb0:	2300      	movs	r3, #0
 8006bb2:	f7f9 ffa9 	bl	8000b08 <__aeabi_dcmpgt>
 8006bb6:	2800      	cmp	r0, #0
 8006bb8:	d0c2      	beq.n	8006b40 <floor+0x48>
 8006bba:	2c00      	cmp	r4, #0
 8006bbc:	da0a      	bge.n	8006bd4 <floor+0xdc>
 8006bbe:	2e14      	cmp	r6, #20
 8006bc0:	d101      	bne.n	8006bc6 <floor+0xce>
 8006bc2:	3401      	adds	r4, #1
 8006bc4:	e006      	b.n	8006bd4 <floor+0xdc>
 8006bc6:	f1c6 0634 	rsb	r6, r6, #52	@ 0x34
 8006bca:	2301      	movs	r3, #1
 8006bcc:	40b3      	lsls	r3, r6
 8006bce:	441d      	add	r5, r3
 8006bd0:	4545      	cmp	r5, r8
 8006bd2:	d3f6      	bcc.n	8006bc2 <floor+0xca>
 8006bd4:	ea25 0507 	bic.w	r5, r5, r7
 8006bd8:	e7b2      	b.n	8006b40 <floor+0x48>
 8006bda:	2500      	movs	r5, #0
 8006bdc:	462c      	mov	r4, r5
 8006bde:	e7af      	b.n	8006b40 <floor+0x48>
 8006be0:	8800759c 	.word	0x8800759c
 8006be4:	7e37e43c 	.word	0x7e37e43c
 8006be8:	bff00000 	.word	0xbff00000
 8006bec:	000fffff 	.word	0x000fffff

08006bf0 <_init>:
 8006bf0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006bf2:	bf00      	nop
 8006bf4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006bf6:	bc08      	pop	{r3}
 8006bf8:	469e      	mov	lr, r3
 8006bfa:	4770      	bx	lr

08006bfc <_fini>:
 8006bfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006bfe:	bf00      	nop
 8006c00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006c02:	bc08      	pop	{r3}
 8006c04:	469e      	mov	lr, r3
 8006c06:	4770      	bx	lr
