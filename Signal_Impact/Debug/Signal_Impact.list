
Signal_Impact.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b9c4  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00003500  0800bb58  0800bb58  0001bb58  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800f058  0800f058  000201f8  2**0
                  CONTENTS
  4 .ARM          00000008  0800f058  0800f058  0001f058  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800f060  0800f060  000201f8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800f060  0800f060  0001f060  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800f064  0800f064  0001f064  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f8  20000000  0800f068  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000201f8  2**0
                  CONTENTS
 10 .bss          000046b0  200001f8  200001f8  000201f8  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200048a8  200048a8  000201f8  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000201f8  2**0
                  CONTENTS, READONLY
 13 .debug_info   00015856  00000000  00000000  00020228  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000034c8  00000000  00000000  00035a7e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001148  00000000  00000000  00038f48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001020  00000000  00000000  0003a090  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000253e7  00000000  00000000  0003b0b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001658f  00000000  00000000  00060497  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000dfdcd  00000000  00000000  00076a26  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      000000be  00000000  00000000  001567f3  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005d2c  00000000  00000000  001568b4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_loc    00002178  00000000  00000000  0015c5e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001f8 	.word	0x200001f8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800bb3c 	.word	0x0800bb3c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001fc 	.word	0x200001fc
 80001cc:	0800bb3c 	.word	0x0800bb3c

080001d0 <arm_bitreversal_32>:
 80001d0:	1c4b      	adds	r3, r1, #1
 80001d2:	2b01      	cmp	r3, #1
 80001d4:	bf98      	it	ls
 80001d6:	4770      	bxls	lr
 80001d8:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
 80001dc:	1c91      	adds	r1, r2, #2
 80001de:	089b      	lsrs	r3, r3, #2

080001e0 <arm_bitreversal_32_0>:
 80001e0:	f8b1 8004 	ldrh.w	r8, [r1, #4]
 80001e4:	f8b1 9002 	ldrh.w	r9, [r1, #2]
 80001e8:	880a      	ldrh	r2, [r1, #0]
 80001ea:	f831 cc02 	ldrh.w	ip, [r1, #-2]
 80001ee:	4480      	add	r8, r0
 80001f0:	4481      	add	r9, r0
 80001f2:	4402      	add	r2, r0
 80001f4:	4484      	add	ip, r0
 80001f6:	f8d9 7000 	ldr.w	r7, [r9]
 80001fa:	f8d8 6000 	ldr.w	r6, [r8]
 80001fe:	6815      	ldr	r5, [r2, #0]
 8000200:	f8dc 4000 	ldr.w	r4, [ip]
 8000204:	f8c9 6000 	str.w	r6, [r9]
 8000208:	f8c8 7000 	str.w	r7, [r8]
 800020c:	f8cc 5000 	str.w	r5, [ip]
 8000210:	6014      	str	r4, [r2, #0]
 8000212:	f8d9 7004 	ldr.w	r7, [r9, #4]
 8000216:	f8d8 6004 	ldr.w	r6, [r8, #4]
 800021a:	6855      	ldr	r5, [r2, #4]
 800021c:	f8dc 4004 	ldr.w	r4, [ip, #4]
 8000220:	f8c9 6004 	str.w	r6, [r9, #4]
 8000224:	f8c8 7004 	str.w	r7, [r8, #4]
 8000228:	f8cc 5004 	str.w	r5, [ip, #4]
 800022c:	6054      	str	r4, [r2, #4]
 800022e:	3108      	adds	r1, #8
 8000230:	3b01      	subs	r3, #1
 8000232:	d1d5      	bne.n	80001e0 <arm_bitreversal_32_0>
 8000234:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
 8000238:	4770      	bx	lr

0800023a <arm_bitreversal_16>:
 800023a:	1c4b      	adds	r3, r1, #1
 800023c:	2b01      	cmp	r3, #1
 800023e:	bf98      	it	ls
 8000240:	4770      	bxls	lr
 8000242:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
 8000246:	1c91      	adds	r1, r2, #2
 8000248:	089b      	lsrs	r3, r3, #2

0800024a <arm_bitreversal_16_0>:
 800024a:	f8b1 8004 	ldrh.w	r8, [r1, #4]
 800024e:	f8b1 9002 	ldrh.w	r9, [r1, #2]
 8000252:	880a      	ldrh	r2, [r1, #0]
 8000254:	f831 cc02 	ldrh.w	ip, [r1, #-2]
 8000258:	eb00 0858 	add.w	r8, r0, r8, lsr #1
 800025c:	eb00 0959 	add.w	r9, r0, r9, lsr #1
 8000260:	eb00 0252 	add.w	r2, r0, r2, lsr #1
 8000264:	eb00 0c5c 	add.w	ip, r0, ip, lsr #1
 8000268:	f8d9 7000 	ldr.w	r7, [r9]
 800026c:	f8d8 6000 	ldr.w	r6, [r8]
 8000270:	6815      	ldr	r5, [r2, #0]
 8000272:	f8dc 4000 	ldr.w	r4, [ip]
 8000276:	f8c9 6000 	str.w	r6, [r9]
 800027a:	f8c8 7000 	str.w	r7, [r8]
 800027e:	f8cc 5000 	str.w	r5, [ip]
 8000282:	6014      	str	r4, [r2, #0]
 8000284:	3108      	adds	r1, #8
 8000286:	3b01      	subs	r3, #1
 8000288:	d1df      	bne.n	800024a <arm_bitreversal_16_0>
 800028a:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
 800028e:	4770      	bx	lr

08000290 <strlen>:
 8000290:	4603      	mov	r3, r0
 8000292:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000296:	2a00      	cmp	r2, #0
 8000298:	d1fb      	bne.n	8000292 <strlen+0x2>
 800029a:	1a18      	subs	r0, r3, r0
 800029c:	3801      	subs	r0, #1
 800029e:	4770      	bx	lr

080002a0 <memchr>:
 80002a0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002a4:	2a10      	cmp	r2, #16
 80002a6:	db2b      	blt.n	8000300 <memchr+0x60>
 80002a8:	f010 0f07 	tst.w	r0, #7
 80002ac:	d008      	beq.n	80002c0 <memchr+0x20>
 80002ae:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002b2:	3a01      	subs	r2, #1
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d02d      	beq.n	8000314 <memchr+0x74>
 80002b8:	f010 0f07 	tst.w	r0, #7
 80002bc:	b342      	cbz	r2, 8000310 <memchr+0x70>
 80002be:	d1f6      	bne.n	80002ae <memchr+0xe>
 80002c0:	b4f0      	push	{r4, r5, r6, r7}
 80002c2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80002c6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80002ca:	f022 0407 	bic.w	r4, r2, #7
 80002ce:	f07f 0700 	mvns.w	r7, #0
 80002d2:	2300      	movs	r3, #0
 80002d4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80002d8:	3c08      	subs	r4, #8
 80002da:	ea85 0501 	eor.w	r5, r5, r1
 80002de:	ea86 0601 	eor.w	r6, r6, r1
 80002e2:	fa85 f547 	uadd8	r5, r5, r7
 80002e6:	faa3 f587 	sel	r5, r3, r7
 80002ea:	fa86 f647 	uadd8	r6, r6, r7
 80002ee:	faa5 f687 	sel	r6, r5, r7
 80002f2:	b98e      	cbnz	r6, 8000318 <memchr+0x78>
 80002f4:	d1ee      	bne.n	80002d4 <memchr+0x34>
 80002f6:	bcf0      	pop	{r4, r5, r6, r7}
 80002f8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002fc:	f002 0207 	and.w	r2, r2, #7
 8000300:	b132      	cbz	r2, 8000310 <memchr+0x70>
 8000302:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000306:	3a01      	subs	r2, #1
 8000308:	ea83 0301 	eor.w	r3, r3, r1
 800030c:	b113      	cbz	r3, 8000314 <memchr+0x74>
 800030e:	d1f8      	bne.n	8000302 <memchr+0x62>
 8000310:	2000      	movs	r0, #0
 8000312:	4770      	bx	lr
 8000314:	3801      	subs	r0, #1
 8000316:	4770      	bx	lr
 8000318:	2d00      	cmp	r5, #0
 800031a:	bf06      	itte	eq
 800031c:	4635      	moveq	r5, r6
 800031e:	3803      	subeq	r0, #3
 8000320:	3807      	subne	r0, #7
 8000322:	f015 0f01 	tst.w	r5, #1
 8000326:	d107      	bne.n	8000338 <memchr+0x98>
 8000328:	3001      	adds	r0, #1
 800032a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800032e:	bf02      	ittt	eq
 8000330:	3001      	addeq	r0, #1
 8000332:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000336:	3001      	addeq	r0, #1
 8000338:	bcf0      	pop	{r4, r5, r6, r7}
 800033a:	3801      	subs	r0, #1
 800033c:	4770      	bx	lr
 800033e:	bf00      	nop

08000340 <__aeabi_drsub>:
 8000340:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000344:	e002      	b.n	800034c <__adddf3>
 8000346:	bf00      	nop

08000348 <__aeabi_dsub>:
 8000348:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800034c <__adddf3>:
 800034c:	b530      	push	{r4, r5, lr}
 800034e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000352:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000356:	ea94 0f05 	teq	r4, r5
 800035a:	bf08      	it	eq
 800035c:	ea90 0f02 	teqeq	r0, r2
 8000360:	bf1f      	itttt	ne
 8000362:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000366:	ea55 0c02 	orrsne.w	ip, r5, r2
 800036a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800036e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000372:	f000 80e2 	beq.w	800053a <__adddf3+0x1ee>
 8000376:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800037a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800037e:	bfb8      	it	lt
 8000380:	426d      	neglt	r5, r5
 8000382:	dd0c      	ble.n	800039e <__adddf3+0x52>
 8000384:	442c      	add	r4, r5
 8000386:	ea80 0202 	eor.w	r2, r0, r2
 800038a:	ea81 0303 	eor.w	r3, r1, r3
 800038e:	ea82 0000 	eor.w	r0, r2, r0
 8000392:	ea83 0101 	eor.w	r1, r3, r1
 8000396:	ea80 0202 	eor.w	r2, r0, r2
 800039a:	ea81 0303 	eor.w	r3, r1, r3
 800039e:	2d36      	cmp	r5, #54	; 0x36
 80003a0:	bf88      	it	hi
 80003a2:	bd30      	pophi	{r4, r5, pc}
 80003a4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80003a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80003ac:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80003b0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80003b4:	d002      	beq.n	80003bc <__adddf3+0x70>
 80003b6:	4240      	negs	r0, r0
 80003b8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80003bc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80003c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80003c4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80003c8:	d002      	beq.n	80003d0 <__adddf3+0x84>
 80003ca:	4252      	negs	r2, r2
 80003cc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80003d0:	ea94 0f05 	teq	r4, r5
 80003d4:	f000 80a7 	beq.w	8000526 <__adddf3+0x1da>
 80003d8:	f1a4 0401 	sub.w	r4, r4, #1
 80003dc:	f1d5 0e20 	rsbs	lr, r5, #32
 80003e0:	db0d      	blt.n	80003fe <__adddf3+0xb2>
 80003e2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80003e6:	fa22 f205 	lsr.w	r2, r2, r5
 80003ea:	1880      	adds	r0, r0, r2
 80003ec:	f141 0100 	adc.w	r1, r1, #0
 80003f0:	fa03 f20e 	lsl.w	r2, r3, lr
 80003f4:	1880      	adds	r0, r0, r2
 80003f6:	fa43 f305 	asr.w	r3, r3, r5
 80003fa:	4159      	adcs	r1, r3
 80003fc:	e00e      	b.n	800041c <__adddf3+0xd0>
 80003fe:	f1a5 0520 	sub.w	r5, r5, #32
 8000402:	f10e 0e20 	add.w	lr, lr, #32
 8000406:	2a01      	cmp	r2, #1
 8000408:	fa03 fc0e 	lsl.w	ip, r3, lr
 800040c:	bf28      	it	cs
 800040e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000412:	fa43 f305 	asr.w	r3, r3, r5
 8000416:	18c0      	adds	r0, r0, r3
 8000418:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800041c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000420:	d507      	bpl.n	8000432 <__adddf3+0xe6>
 8000422:	f04f 0e00 	mov.w	lr, #0
 8000426:	f1dc 0c00 	rsbs	ip, ip, #0
 800042a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800042e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000432:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000436:	d31b      	bcc.n	8000470 <__adddf3+0x124>
 8000438:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800043c:	d30c      	bcc.n	8000458 <__adddf3+0x10c>
 800043e:	0849      	lsrs	r1, r1, #1
 8000440:	ea5f 0030 	movs.w	r0, r0, rrx
 8000444:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000448:	f104 0401 	add.w	r4, r4, #1
 800044c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000450:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000454:	f080 809a 	bcs.w	800058c <__adddf3+0x240>
 8000458:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800045c:	bf08      	it	eq
 800045e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000462:	f150 0000 	adcs.w	r0, r0, #0
 8000466:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800046a:	ea41 0105 	orr.w	r1, r1, r5
 800046e:	bd30      	pop	{r4, r5, pc}
 8000470:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000474:	4140      	adcs	r0, r0
 8000476:	eb41 0101 	adc.w	r1, r1, r1
 800047a:	3c01      	subs	r4, #1
 800047c:	bf28      	it	cs
 800047e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000482:	d2e9      	bcs.n	8000458 <__adddf3+0x10c>
 8000484:	f091 0f00 	teq	r1, #0
 8000488:	bf04      	itt	eq
 800048a:	4601      	moveq	r1, r0
 800048c:	2000      	moveq	r0, #0
 800048e:	fab1 f381 	clz	r3, r1
 8000492:	bf08      	it	eq
 8000494:	3320      	addeq	r3, #32
 8000496:	f1a3 030b 	sub.w	r3, r3, #11
 800049a:	f1b3 0220 	subs.w	r2, r3, #32
 800049e:	da0c      	bge.n	80004ba <__adddf3+0x16e>
 80004a0:	320c      	adds	r2, #12
 80004a2:	dd08      	ble.n	80004b6 <__adddf3+0x16a>
 80004a4:	f102 0c14 	add.w	ip, r2, #20
 80004a8:	f1c2 020c 	rsb	r2, r2, #12
 80004ac:	fa01 f00c 	lsl.w	r0, r1, ip
 80004b0:	fa21 f102 	lsr.w	r1, r1, r2
 80004b4:	e00c      	b.n	80004d0 <__adddf3+0x184>
 80004b6:	f102 0214 	add.w	r2, r2, #20
 80004ba:	bfd8      	it	le
 80004bc:	f1c2 0c20 	rsble	ip, r2, #32
 80004c0:	fa01 f102 	lsl.w	r1, r1, r2
 80004c4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80004c8:	bfdc      	itt	le
 80004ca:	ea41 010c 	orrle.w	r1, r1, ip
 80004ce:	4090      	lslle	r0, r2
 80004d0:	1ae4      	subs	r4, r4, r3
 80004d2:	bfa2      	ittt	ge
 80004d4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80004d8:	4329      	orrge	r1, r5
 80004da:	bd30      	popge	{r4, r5, pc}
 80004dc:	ea6f 0404 	mvn.w	r4, r4
 80004e0:	3c1f      	subs	r4, #31
 80004e2:	da1c      	bge.n	800051e <__adddf3+0x1d2>
 80004e4:	340c      	adds	r4, #12
 80004e6:	dc0e      	bgt.n	8000506 <__adddf3+0x1ba>
 80004e8:	f104 0414 	add.w	r4, r4, #20
 80004ec:	f1c4 0220 	rsb	r2, r4, #32
 80004f0:	fa20 f004 	lsr.w	r0, r0, r4
 80004f4:	fa01 f302 	lsl.w	r3, r1, r2
 80004f8:	ea40 0003 	orr.w	r0, r0, r3
 80004fc:	fa21 f304 	lsr.w	r3, r1, r4
 8000500:	ea45 0103 	orr.w	r1, r5, r3
 8000504:	bd30      	pop	{r4, r5, pc}
 8000506:	f1c4 040c 	rsb	r4, r4, #12
 800050a:	f1c4 0220 	rsb	r2, r4, #32
 800050e:	fa20 f002 	lsr.w	r0, r0, r2
 8000512:	fa01 f304 	lsl.w	r3, r1, r4
 8000516:	ea40 0003 	orr.w	r0, r0, r3
 800051a:	4629      	mov	r1, r5
 800051c:	bd30      	pop	{r4, r5, pc}
 800051e:	fa21 f004 	lsr.w	r0, r1, r4
 8000522:	4629      	mov	r1, r5
 8000524:	bd30      	pop	{r4, r5, pc}
 8000526:	f094 0f00 	teq	r4, #0
 800052a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800052e:	bf06      	itte	eq
 8000530:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000534:	3401      	addeq	r4, #1
 8000536:	3d01      	subne	r5, #1
 8000538:	e74e      	b.n	80003d8 <__adddf3+0x8c>
 800053a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800053e:	bf18      	it	ne
 8000540:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000544:	d029      	beq.n	800059a <__adddf3+0x24e>
 8000546:	ea94 0f05 	teq	r4, r5
 800054a:	bf08      	it	eq
 800054c:	ea90 0f02 	teqeq	r0, r2
 8000550:	d005      	beq.n	800055e <__adddf3+0x212>
 8000552:	ea54 0c00 	orrs.w	ip, r4, r0
 8000556:	bf04      	itt	eq
 8000558:	4619      	moveq	r1, r3
 800055a:	4610      	moveq	r0, r2
 800055c:	bd30      	pop	{r4, r5, pc}
 800055e:	ea91 0f03 	teq	r1, r3
 8000562:	bf1e      	ittt	ne
 8000564:	2100      	movne	r1, #0
 8000566:	2000      	movne	r0, #0
 8000568:	bd30      	popne	{r4, r5, pc}
 800056a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800056e:	d105      	bne.n	800057c <__adddf3+0x230>
 8000570:	0040      	lsls	r0, r0, #1
 8000572:	4149      	adcs	r1, r1
 8000574:	bf28      	it	cs
 8000576:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800057a:	bd30      	pop	{r4, r5, pc}
 800057c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000580:	bf3c      	itt	cc
 8000582:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000586:	bd30      	popcc	{r4, r5, pc}
 8000588:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800058c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000590:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000594:	f04f 0000 	mov.w	r0, #0
 8000598:	bd30      	pop	{r4, r5, pc}
 800059a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800059e:	bf1a      	itte	ne
 80005a0:	4619      	movne	r1, r3
 80005a2:	4610      	movne	r0, r2
 80005a4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80005a8:	bf1c      	itt	ne
 80005aa:	460b      	movne	r3, r1
 80005ac:	4602      	movne	r2, r0
 80005ae:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80005b2:	bf06      	itte	eq
 80005b4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80005b8:	ea91 0f03 	teqeq	r1, r3
 80005bc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80005c0:	bd30      	pop	{r4, r5, pc}
 80005c2:	bf00      	nop

080005c4 <__aeabi_ui2d>:
 80005c4:	f090 0f00 	teq	r0, #0
 80005c8:	bf04      	itt	eq
 80005ca:	2100      	moveq	r1, #0
 80005cc:	4770      	bxeq	lr
 80005ce:	b530      	push	{r4, r5, lr}
 80005d0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005d8:	f04f 0500 	mov.w	r5, #0
 80005dc:	f04f 0100 	mov.w	r1, #0
 80005e0:	e750      	b.n	8000484 <__adddf3+0x138>
 80005e2:	bf00      	nop

080005e4 <__aeabi_i2d>:
 80005e4:	f090 0f00 	teq	r0, #0
 80005e8:	bf04      	itt	eq
 80005ea:	2100      	moveq	r1, #0
 80005ec:	4770      	bxeq	lr
 80005ee:	b530      	push	{r4, r5, lr}
 80005f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005f8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80005fc:	bf48      	it	mi
 80005fe:	4240      	negmi	r0, r0
 8000600:	f04f 0100 	mov.w	r1, #0
 8000604:	e73e      	b.n	8000484 <__adddf3+0x138>
 8000606:	bf00      	nop

08000608 <__aeabi_f2d>:
 8000608:	0042      	lsls	r2, r0, #1
 800060a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800060e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000612:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000616:	bf1f      	itttt	ne
 8000618:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800061c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000620:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000624:	4770      	bxne	lr
 8000626:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800062a:	bf08      	it	eq
 800062c:	4770      	bxeq	lr
 800062e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000632:	bf04      	itt	eq
 8000634:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000638:	4770      	bxeq	lr
 800063a:	b530      	push	{r4, r5, lr}
 800063c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000640:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000644:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000648:	e71c      	b.n	8000484 <__adddf3+0x138>
 800064a:	bf00      	nop

0800064c <__aeabi_ul2d>:
 800064c:	ea50 0201 	orrs.w	r2, r0, r1
 8000650:	bf08      	it	eq
 8000652:	4770      	bxeq	lr
 8000654:	b530      	push	{r4, r5, lr}
 8000656:	f04f 0500 	mov.w	r5, #0
 800065a:	e00a      	b.n	8000672 <__aeabi_l2d+0x16>

0800065c <__aeabi_l2d>:
 800065c:	ea50 0201 	orrs.w	r2, r0, r1
 8000660:	bf08      	it	eq
 8000662:	4770      	bxeq	lr
 8000664:	b530      	push	{r4, r5, lr}
 8000666:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800066a:	d502      	bpl.n	8000672 <__aeabi_l2d+0x16>
 800066c:	4240      	negs	r0, r0
 800066e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000672:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000676:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800067a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800067e:	f43f aed8 	beq.w	8000432 <__adddf3+0xe6>
 8000682:	f04f 0203 	mov.w	r2, #3
 8000686:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800068a:	bf18      	it	ne
 800068c:	3203      	addne	r2, #3
 800068e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000692:	bf18      	it	ne
 8000694:	3203      	addne	r2, #3
 8000696:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800069a:	f1c2 0320 	rsb	r3, r2, #32
 800069e:	fa00 fc03 	lsl.w	ip, r0, r3
 80006a2:	fa20 f002 	lsr.w	r0, r0, r2
 80006a6:	fa01 fe03 	lsl.w	lr, r1, r3
 80006aa:	ea40 000e 	orr.w	r0, r0, lr
 80006ae:	fa21 f102 	lsr.w	r1, r1, r2
 80006b2:	4414      	add	r4, r2
 80006b4:	e6bd      	b.n	8000432 <__adddf3+0xe6>
 80006b6:	bf00      	nop

080006b8 <__aeabi_dmul>:
 80006b8:	b570      	push	{r4, r5, r6, lr}
 80006ba:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80006be:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80006c2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80006c6:	bf1d      	ittte	ne
 80006c8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80006cc:	ea94 0f0c 	teqne	r4, ip
 80006d0:	ea95 0f0c 	teqne	r5, ip
 80006d4:	f000 f8de 	bleq	8000894 <__aeabi_dmul+0x1dc>
 80006d8:	442c      	add	r4, r5
 80006da:	ea81 0603 	eor.w	r6, r1, r3
 80006de:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80006e2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80006e6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80006ea:	bf18      	it	ne
 80006ec:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80006f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006f4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80006f8:	d038      	beq.n	800076c <__aeabi_dmul+0xb4>
 80006fa:	fba0 ce02 	umull	ip, lr, r0, r2
 80006fe:	f04f 0500 	mov.w	r5, #0
 8000702:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000706:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800070a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800070e:	f04f 0600 	mov.w	r6, #0
 8000712:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000716:	f09c 0f00 	teq	ip, #0
 800071a:	bf18      	it	ne
 800071c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000720:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000724:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000728:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800072c:	d204      	bcs.n	8000738 <__aeabi_dmul+0x80>
 800072e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000732:	416d      	adcs	r5, r5
 8000734:	eb46 0606 	adc.w	r6, r6, r6
 8000738:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800073c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000740:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000744:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000748:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800074c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000750:	bf88      	it	hi
 8000752:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000756:	d81e      	bhi.n	8000796 <__aeabi_dmul+0xde>
 8000758:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800075c:	bf08      	it	eq
 800075e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000762:	f150 0000 	adcs.w	r0, r0, #0
 8000766:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000770:	ea46 0101 	orr.w	r1, r6, r1
 8000774:	ea40 0002 	orr.w	r0, r0, r2
 8000778:	ea81 0103 	eor.w	r1, r1, r3
 800077c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000780:	bfc2      	ittt	gt
 8000782:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000786:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800078a:	bd70      	popgt	{r4, r5, r6, pc}
 800078c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000790:	f04f 0e00 	mov.w	lr, #0
 8000794:	3c01      	subs	r4, #1
 8000796:	f300 80ab 	bgt.w	80008f0 <__aeabi_dmul+0x238>
 800079a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800079e:	bfde      	ittt	le
 80007a0:	2000      	movle	r0, #0
 80007a2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80007a6:	bd70      	pople	{r4, r5, r6, pc}
 80007a8:	f1c4 0400 	rsb	r4, r4, #0
 80007ac:	3c20      	subs	r4, #32
 80007ae:	da35      	bge.n	800081c <__aeabi_dmul+0x164>
 80007b0:	340c      	adds	r4, #12
 80007b2:	dc1b      	bgt.n	80007ec <__aeabi_dmul+0x134>
 80007b4:	f104 0414 	add.w	r4, r4, #20
 80007b8:	f1c4 0520 	rsb	r5, r4, #32
 80007bc:	fa00 f305 	lsl.w	r3, r0, r5
 80007c0:	fa20 f004 	lsr.w	r0, r0, r4
 80007c4:	fa01 f205 	lsl.w	r2, r1, r5
 80007c8:	ea40 0002 	orr.w	r0, r0, r2
 80007cc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80007d0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80007d4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80007d8:	fa21 f604 	lsr.w	r6, r1, r4
 80007dc:	eb42 0106 	adc.w	r1, r2, r6
 80007e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007e4:	bf08      	it	eq
 80007e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007ea:	bd70      	pop	{r4, r5, r6, pc}
 80007ec:	f1c4 040c 	rsb	r4, r4, #12
 80007f0:	f1c4 0520 	rsb	r5, r4, #32
 80007f4:	fa00 f304 	lsl.w	r3, r0, r4
 80007f8:	fa20 f005 	lsr.w	r0, r0, r5
 80007fc:	fa01 f204 	lsl.w	r2, r1, r4
 8000800:	ea40 0002 	orr.w	r0, r0, r2
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800080c:	f141 0100 	adc.w	r1, r1, #0
 8000810:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000814:	bf08      	it	eq
 8000816:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800081a:	bd70      	pop	{r4, r5, r6, pc}
 800081c:	f1c4 0520 	rsb	r5, r4, #32
 8000820:	fa00 f205 	lsl.w	r2, r0, r5
 8000824:	ea4e 0e02 	orr.w	lr, lr, r2
 8000828:	fa20 f304 	lsr.w	r3, r0, r4
 800082c:	fa01 f205 	lsl.w	r2, r1, r5
 8000830:	ea43 0302 	orr.w	r3, r3, r2
 8000834:	fa21 f004 	lsr.w	r0, r1, r4
 8000838:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800083c:	fa21 f204 	lsr.w	r2, r1, r4
 8000840:	ea20 0002 	bic.w	r0, r0, r2
 8000844:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000848:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800084c:	bf08      	it	eq
 800084e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000852:	bd70      	pop	{r4, r5, r6, pc}
 8000854:	f094 0f00 	teq	r4, #0
 8000858:	d10f      	bne.n	800087a <__aeabi_dmul+0x1c2>
 800085a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800085e:	0040      	lsls	r0, r0, #1
 8000860:	eb41 0101 	adc.w	r1, r1, r1
 8000864:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000868:	bf08      	it	eq
 800086a:	3c01      	subeq	r4, #1
 800086c:	d0f7      	beq.n	800085e <__aeabi_dmul+0x1a6>
 800086e:	ea41 0106 	orr.w	r1, r1, r6
 8000872:	f095 0f00 	teq	r5, #0
 8000876:	bf18      	it	ne
 8000878:	4770      	bxne	lr
 800087a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800087e:	0052      	lsls	r2, r2, #1
 8000880:	eb43 0303 	adc.w	r3, r3, r3
 8000884:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000888:	bf08      	it	eq
 800088a:	3d01      	subeq	r5, #1
 800088c:	d0f7      	beq.n	800087e <__aeabi_dmul+0x1c6>
 800088e:	ea43 0306 	orr.w	r3, r3, r6
 8000892:	4770      	bx	lr
 8000894:	ea94 0f0c 	teq	r4, ip
 8000898:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089c:	bf18      	it	ne
 800089e:	ea95 0f0c 	teqne	r5, ip
 80008a2:	d00c      	beq.n	80008be <__aeabi_dmul+0x206>
 80008a4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008a8:	bf18      	it	ne
 80008aa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008ae:	d1d1      	bne.n	8000854 <__aeabi_dmul+0x19c>
 80008b0:	ea81 0103 	eor.w	r1, r1, r3
 80008b4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80008b8:	f04f 0000 	mov.w	r0, #0
 80008bc:	bd70      	pop	{r4, r5, r6, pc}
 80008be:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008c2:	bf06      	itte	eq
 80008c4:	4610      	moveq	r0, r2
 80008c6:	4619      	moveq	r1, r3
 80008c8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008cc:	d019      	beq.n	8000902 <__aeabi_dmul+0x24a>
 80008ce:	ea94 0f0c 	teq	r4, ip
 80008d2:	d102      	bne.n	80008da <__aeabi_dmul+0x222>
 80008d4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80008d8:	d113      	bne.n	8000902 <__aeabi_dmul+0x24a>
 80008da:	ea95 0f0c 	teq	r5, ip
 80008de:	d105      	bne.n	80008ec <__aeabi_dmul+0x234>
 80008e0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80008e4:	bf1c      	itt	ne
 80008e6:	4610      	movne	r0, r2
 80008e8:	4619      	movne	r1, r3
 80008ea:	d10a      	bne.n	8000902 <__aeabi_dmul+0x24a>
 80008ec:	ea81 0103 	eor.w	r1, r1, r3
 80008f0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80008f4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80008f8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80008fc:	f04f 0000 	mov.w	r0, #0
 8000900:	bd70      	pop	{r4, r5, r6, pc}
 8000902:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000906:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800090a:	bd70      	pop	{r4, r5, r6, pc}

0800090c <__aeabi_ddiv>:
 800090c:	b570      	push	{r4, r5, r6, lr}
 800090e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000912:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000916:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800091a:	bf1d      	ittte	ne
 800091c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000920:	ea94 0f0c 	teqne	r4, ip
 8000924:	ea95 0f0c 	teqne	r5, ip
 8000928:	f000 f8a7 	bleq	8000a7a <__aeabi_ddiv+0x16e>
 800092c:	eba4 0405 	sub.w	r4, r4, r5
 8000930:	ea81 0e03 	eor.w	lr, r1, r3
 8000934:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000938:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800093c:	f000 8088 	beq.w	8000a50 <__aeabi_ddiv+0x144>
 8000940:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000944:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000948:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800094c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000950:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000954:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000958:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800095c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000960:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000964:	429d      	cmp	r5, r3
 8000966:	bf08      	it	eq
 8000968:	4296      	cmpeq	r6, r2
 800096a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800096e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000972:	d202      	bcs.n	800097a <__aeabi_ddiv+0x6e>
 8000974:	085b      	lsrs	r3, r3, #1
 8000976:	ea4f 0232 	mov.w	r2, r2, rrx
 800097a:	1ab6      	subs	r6, r6, r2
 800097c:	eb65 0503 	sbc.w	r5, r5, r3
 8000980:	085b      	lsrs	r3, r3, #1
 8000982:	ea4f 0232 	mov.w	r2, r2, rrx
 8000986:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800098a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800098e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000992:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000996:	bf22      	ittt	cs
 8000998:	1ab6      	subcs	r6, r6, r2
 800099a:	4675      	movcs	r5, lr
 800099c:	ea40 000c 	orrcs.w	r0, r0, ip
 80009a0:	085b      	lsrs	r3, r3, #1
 80009a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80009a6:	ebb6 0e02 	subs.w	lr, r6, r2
 80009aa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80009ae:	bf22      	ittt	cs
 80009b0:	1ab6      	subcs	r6, r6, r2
 80009b2:	4675      	movcs	r5, lr
 80009b4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80009b8:	085b      	lsrs	r3, r3, #1
 80009ba:	ea4f 0232 	mov.w	r2, r2, rrx
 80009be:	ebb6 0e02 	subs.w	lr, r6, r2
 80009c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80009c6:	bf22      	ittt	cs
 80009c8:	1ab6      	subcs	r6, r6, r2
 80009ca:	4675      	movcs	r5, lr
 80009cc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80009d0:	085b      	lsrs	r3, r3, #1
 80009d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80009d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80009da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80009de:	bf22      	ittt	cs
 80009e0:	1ab6      	subcs	r6, r6, r2
 80009e2:	4675      	movcs	r5, lr
 80009e4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80009e8:	ea55 0e06 	orrs.w	lr, r5, r6
 80009ec:	d018      	beq.n	8000a20 <__aeabi_ddiv+0x114>
 80009ee:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80009f2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80009f6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80009fa:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80009fe:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000a02:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000a06:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000a0a:	d1c0      	bne.n	800098e <__aeabi_ddiv+0x82>
 8000a0c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000a10:	d10b      	bne.n	8000a2a <__aeabi_ddiv+0x11e>
 8000a12:	ea41 0100 	orr.w	r1, r1, r0
 8000a16:	f04f 0000 	mov.w	r0, #0
 8000a1a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000a1e:	e7b6      	b.n	800098e <__aeabi_ddiv+0x82>
 8000a20:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000a24:	bf04      	itt	eq
 8000a26:	4301      	orreq	r1, r0
 8000a28:	2000      	moveq	r0, #0
 8000a2a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000a2e:	bf88      	it	hi
 8000a30:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000a34:	f63f aeaf 	bhi.w	8000796 <__aeabi_dmul+0xde>
 8000a38:	ebb5 0c03 	subs.w	ip, r5, r3
 8000a3c:	bf04      	itt	eq
 8000a3e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000a42:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000a46:	f150 0000 	adcs.w	r0, r0, #0
 8000a4a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000a4e:	bd70      	pop	{r4, r5, r6, pc}
 8000a50:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000a54:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000a58:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000a5c:	bfc2      	ittt	gt
 8000a5e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000a62:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000a66:	bd70      	popgt	{r4, r5, r6, pc}
 8000a68:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a6c:	f04f 0e00 	mov.w	lr, #0
 8000a70:	3c01      	subs	r4, #1
 8000a72:	e690      	b.n	8000796 <__aeabi_dmul+0xde>
 8000a74:	ea45 0e06 	orr.w	lr, r5, r6
 8000a78:	e68d      	b.n	8000796 <__aeabi_dmul+0xde>
 8000a7a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a7e:	ea94 0f0c 	teq	r4, ip
 8000a82:	bf08      	it	eq
 8000a84:	ea95 0f0c 	teqeq	r5, ip
 8000a88:	f43f af3b 	beq.w	8000902 <__aeabi_dmul+0x24a>
 8000a8c:	ea94 0f0c 	teq	r4, ip
 8000a90:	d10a      	bne.n	8000aa8 <__aeabi_ddiv+0x19c>
 8000a92:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a96:	f47f af34 	bne.w	8000902 <__aeabi_dmul+0x24a>
 8000a9a:	ea95 0f0c 	teq	r5, ip
 8000a9e:	f47f af25 	bne.w	80008ec <__aeabi_dmul+0x234>
 8000aa2:	4610      	mov	r0, r2
 8000aa4:	4619      	mov	r1, r3
 8000aa6:	e72c      	b.n	8000902 <__aeabi_dmul+0x24a>
 8000aa8:	ea95 0f0c 	teq	r5, ip
 8000aac:	d106      	bne.n	8000abc <__aeabi_ddiv+0x1b0>
 8000aae:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000ab2:	f43f aefd 	beq.w	80008b0 <__aeabi_dmul+0x1f8>
 8000ab6:	4610      	mov	r0, r2
 8000ab8:	4619      	mov	r1, r3
 8000aba:	e722      	b.n	8000902 <__aeabi_dmul+0x24a>
 8000abc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000ac0:	bf18      	it	ne
 8000ac2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000ac6:	f47f aec5 	bne.w	8000854 <__aeabi_dmul+0x19c>
 8000aca:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000ace:	f47f af0d 	bne.w	80008ec <__aeabi_dmul+0x234>
 8000ad2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000ad6:	f47f aeeb 	bne.w	80008b0 <__aeabi_dmul+0x1f8>
 8000ada:	e712      	b.n	8000902 <__aeabi_dmul+0x24a>

08000adc <__gedf2>:
 8000adc:	f04f 3cff 	mov.w	ip, #4294967295
 8000ae0:	e006      	b.n	8000af0 <__cmpdf2+0x4>
 8000ae2:	bf00      	nop

08000ae4 <__ledf2>:
 8000ae4:	f04f 0c01 	mov.w	ip, #1
 8000ae8:	e002      	b.n	8000af0 <__cmpdf2+0x4>
 8000aea:	bf00      	nop

08000aec <__cmpdf2>:
 8000aec:	f04f 0c01 	mov.w	ip, #1
 8000af0:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000af4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000af8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000afc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b00:	bf18      	it	ne
 8000b02:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000b06:	d01b      	beq.n	8000b40 <__cmpdf2+0x54>
 8000b08:	b001      	add	sp, #4
 8000b0a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000b0e:	bf0c      	ite	eq
 8000b10:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000b14:	ea91 0f03 	teqne	r1, r3
 8000b18:	bf02      	ittt	eq
 8000b1a:	ea90 0f02 	teqeq	r0, r2
 8000b1e:	2000      	moveq	r0, #0
 8000b20:	4770      	bxeq	lr
 8000b22:	f110 0f00 	cmn.w	r0, #0
 8000b26:	ea91 0f03 	teq	r1, r3
 8000b2a:	bf58      	it	pl
 8000b2c:	4299      	cmppl	r1, r3
 8000b2e:	bf08      	it	eq
 8000b30:	4290      	cmpeq	r0, r2
 8000b32:	bf2c      	ite	cs
 8000b34:	17d8      	asrcs	r0, r3, #31
 8000b36:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000b3a:	f040 0001 	orr.w	r0, r0, #1
 8000b3e:	4770      	bx	lr
 8000b40:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b44:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b48:	d102      	bne.n	8000b50 <__cmpdf2+0x64>
 8000b4a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4e:	d107      	bne.n	8000b60 <__cmpdf2+0x74>
 8000b50:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b54:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b58:	d1d6      	bne.n	8000b08 <__cmpdf2+0x1c>
 8000b5a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5e:	d0d3      	beq.n	8000b08 <__cmpdf2+0x1c>
 8000b60:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop

08000b68 <__aeabi_cdrcmple>:
 8000b68:	4684      	mov	ip, r0
 8000b6a:	4610      	mov	r0, r2
 8000b6c:	4662      	mov	r2, ip
 8000b6e:	468c      	mov	ip, r1
 8000b70:	4619      	mov	r1, r3
 8000b72:	4663      	mov	r3, ip
 8000b74:	e000      	b.n	8000b78 <__aeabi_cdcmpeq>
 8000b76:	bf00      	nop

08000b78 <__aeabi_cdcmpeq>:
 8000b78:	b501      	push	{r0, lr}
 8000b7a:	f7ff ffb7 	bl	8000aec <__cmpdf2>
 8000b7e:	2800      	cmp	r0, #0
 8000b80:	bf48      	it	mi
 8000b82:	f110 0f00 	cmnmi.w	r0, #0
 8000b86:	bd01      	pop	{r0, pc}

08000b88 <__aeabi_dcmpeq>:
 8000b88:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b8c:	f7ff fff4 	bl	8000b78 <__aeabi_cdcmpeq>
 8000b90:	bf0c      	ite	eq
 8000b92:	2001      	moveq	r0, #1
 8000b94:	2000      	movne	r0, #0
 8000b96:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b9a:	bf00      	nop

08000b9c <__aeabi_dcmplt>:
 8000b9c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ba0:	f7ff ffea 	bl	8000b78 <__aeabi_cdcmpeq>
 8000ba4:	bf34      	ite	cc
 8000ba6:	2001      	movcc	r0, #1
 8000ba8:	2000      	movcs	r0, #0
 8000baa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000bae:	bf00      	nop

08000bb0 <__aeabi_dcmple>:
 8000bb0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000bb4:	f7ff ffe0 	bl	8000b78 <__aeabi_cdcmpeq>
 8000bb8:	bf94      	ite	ls
 8000bba:	2001      	movls	r0, #1
 8000bbc:	2000      	movhi	r0, #0
 8000bbe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000bc2:	bf00      	nop

08000bc4 <__aeabi_dcmpge>:
 8000bc4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000bc8:	f7ff ffce 	bl	8000b68 <__aeabi_cdrcmple>
 8000bcc:	bf94      	ite	ls
 8000bce:	2001      	movls	r0, #1
 8000bd0:	2000      	movhi	r0, #0
 8000bd2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_dcmpgt>:
 8000bd8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000bdc:	f7ff ffc4 	bl	8000b68 <__aeabi_cdrcmple>
 8000be0:	bf34      	ite	cc
 8000be2:	2001      	movcc	r0, #1
 8000be4:	2000      	movcs	r0, #0
 8000be6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000bea:	bf00      	nop

08000bec <__aeabi_dcmpun>:
 8000bec:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000bf0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000bf4:	d102      	bne.n	8000bfc <__aeabi_dcmpun+0x10>
 8000bf6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000bfa:	d10a      	bne.n	8000c12 <__aeabi_dcmpun+0x26>
 8000bfc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000c00:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000c04:	d102      	bne.n	8000c0c <__aeabi_dcmpun+0x20>
 8000c06:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000c0a:	d102      	bne.n	8000c12 <__aeabi_dcmpun+0x26>
 8000c0c:	f04f 0000 	mov.w	r0, #0
 8000c10:	4770      	bx	lr
 8000c12:	f04f 0001 	mov.w	r0, #1
 8000c16:	4770      	bx	lr

08000c18 <__aeabi_d2iz>:
 8000c18:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c1c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000c20:	d215      	bcs.n	8000c4e <__aeabi_d2iz+0x36>
 8000c22:	d511      	bpl.n	8000c48 <__aeabi_d2iz+0x30>
 8000c24:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000c28:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c2c:	d912      	bls.n	8000c54 <__aeabi_d2iz+0x3c>
 8000c2e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c32:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c36:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c3a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000c3e:	fa23 f002 	lsr.w	r0, r3, r2
 8000c42:	bf18      	it	ne
 8000c44:	4240      	negne	r0, r0
 8000c46:	4770      	bx	lr
 8000c48:	f04f 0000 	mov.w	r0, #0
 8000c4c:	4770      	bx	lr
 8000c4e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c52:	d105      	bne.n	8000c60 <__aeabi_d2iz+0x48>
 8000c54:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000c58:	bf08      	it	eq
 8000c5a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000c5e:	4770      	bx	lr
 8000c60:	f04f 0000 	mov.w	r0, #0
 8000c64:	4770      	bx	lr
 8000c66:	bf00      	nop

08000c68 <__aeabi_d2uiz>:
 8000c68:	004a      	lsls	r2, r1, #1
 8000c6a:	d211      	bcs.n	8000c90 <__aeabi_d2uiz+0x28>
 8000c6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000c70:	d211      	bcs.n	8000c96 <__aeabi_d2uiz+0x2e>
 8000c72:	d50d      	bpl.n	8000c90 <__aeabi_d2uiz+0x28>
 8000c74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000c78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c7c:	d40e      	bmi.n	8000c9c <__aeabi_d2uiz+0x34>
 8000c7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c8a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c8e:	4770      	bx	lr
 8000c90:	f04f 0000 	mov.w	r0, #0
 8000c94:	4770      	bx	lr
 8000c96:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c9a:	d102      	bne.n	8000ca2 <__aeabi_d2uiz+0x3a>
 8000c9c:	f04f 30ff 	mov.w	r0, #4294967295
 8000ca0:	4770      	bx	lr
 8000ca2:	f04f 0000 	mov.w	r0, #0
 8000ca6:	4770      	bx	lr

08000ca8 <__aeabi_d2f>:
 8000ca8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000cac:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000cb0:	bf24      	itt	cs
 8000cb2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000cb6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000cba:	d90d      	bls.n	8000cd8 <__aeabi_d2f+0x30>
 8000cbc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000cc0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000cc4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000cc8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000ccc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000cd0:	bf08      	it	eq
 8000cd2:	f020 0001 	biceq.w	r0, r0, #1
 8000cd6:	4770      	bx	lr
 8000cd8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000cdc:	d121      	bne.n	8000d22 <__aeabi_d2f+0x7a>
 8000cde:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000ce2:	bfbc      	itt	lt
 8000ce4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000ce8:	4770      	bxlt	lr
 8000cea:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000cee:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000cf2:	f1c2 0218 	rsb	r2, r2, #24
 8000cf6:	f1c2 0c20 	rsb	ip, r2, #32
 8000cfa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000cfe:	fa20 f002 	lsr.w	r0, r0, r2
 8000d02:	bf18      	it	ne
 8000d04:	f040 0001 	orrne.w	r0, r0, #1
 8000d08:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000d0c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000d10:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000d14:	ea40 000c 	orr.w	r0, r0, ip
 8000d18:	fa23 f302 	lsr.w	r3, r3, r2
 8000d1c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000d20:	e7cc      	b.n	8000cbc <__aeabi_d2f+0x14>
 8000d22:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000d26:	d107      	bne.n	8000d38 <__aeabi_d2f+0x90>
 8000d28:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000d2c:	bf1e      	ittt	ne
 8000d2e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000d32:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000d36:	4770      	bxne	lr
 8000d38:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000d3c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000d40:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d44:	4770      	bx	lr
 8000d46:	bf00      	nop

08000d48 <__aeabi_uldivmod>:
 8000d48:	b953      	cbnz	r3, 8000d60 <__aeabi_uldivmod+0x18>
 8000d4a:	b94a      	cbnz	r2, 8000d60 <__aeabi_uldivmod+0x18>
 8000d4c:	2900      	cmp	r1, #0
 8000d4e:	bf08      	it	eq
 8000d50:	2800      	cmpeq	r0, #0
 8000d52:	bf1c      	itt	ne
 8000d54:	f04f 31ff 	movne.w	r1, #4294967295
 8000d58:	f04f 30ff 	movne.w	r0, #4294967295
 8000d5c:	f000 b9aa 	b.w	80010b4 <__aeabi_idiv0>
 8000d60:	f1ad 0c08 	sub.w	ip, sp, #8
 8000d64:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000d68:	f000 f83c 	bl	8000de4 <__udivmoddi4>
 8000d6c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d70:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d74:	b004      	add	sp, #16
 8000d76:	4770      	bx	lr

08000d78 <__aeabi_d2lz>:
 8000d78:	b538      	push	{r3, r4, r5, lr}
 8000d7a:	2200      	movs	r2, #0
 8000d7c:	2300      	movs	r3, #0
 8000d7e:	4604      	mov	r4, r0
 8000d80:	460d      	mov	r5, r1
 8000d82:	f7ff ff0b 	bl	8000b9c <__aeabi_dcmplt>
 8000d86:	b928      	cbnz	r0, 8000d94 <__aeabi_d2lz+0x1c>
 8000d88:	4620      	mov	r0, r4
 8000d8a:	4629      	mov	r1, r5
 8000d8c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d90:	f000 b80a 	b.w	8000da8 <__aeabi_d2ulz>
 8000d94:	4620      	mov	r0, r4
 8000d96:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000d9a:	f000 f805 	bl	8000da8 <__aeabi_d2ulz>
 8000d9e:	4240      	negs	r0, r0
 8000da0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000da4:	bd38      	pop	{r3, r4, r5, pc}
 8000da6:	bf00      	nop

08000da8 <__aeabi_d2ulz>:
 8000da8:	b5d0      	push	{r4, r6, r7, lr}
 8000daa:	4b0c      	ldr	r3, [pc, #48]	; (8000ddc <__aeabi_d2ulz+0x34>)
 8000dac:	2200      	movs	r2, #0
 8000dae:	4606      	mov	r6, r0
 8000db0:	460f      	mov	r7, r1
 8000db2:	f7ff fc81 	bl	80006b8 <__aeabi_dmul>
 8000db6:	f7ff ff57 	bl	8000c68 <__aeabi_d2uiz>
 8000dba:	4604      	mov	r4, r0
 8000dbc:	f7ff fc02 	bl	80005c4 <__aeabi_ui2d>
 8000dc0:	4b07      	ldr	r3, [pc, #28]	; (8000de0 <__aeabi_d2ulz+0x38>)
 8000dc2:	2200      	movs	r2, #0
 8000dc4:	f7ff fc78 	bl	80006b8 <__aeabi_dmul>
 8000dc8:	4602      	mov	r2, r0
 8000dca:	460b      	mov	r3, r1
 8000dcc:	4630      	mov	r0, r6
 8000dce:	4639      	mov	r1, r7
 8000dd0:	f7ff faba 	bl	8000348 <__aeabi_dsub>
 8000dd4:	f7ff ff48 	bl	8000c68 <__aeabi_d2uiz>
 8000dd8:	4621      	mov	r1, r4
 8000dda:	bdd0      	pop	{r4, r6, r7, pc}
 8000ddc:	3df00000 	.word	0x3df00000
 8000de0:	41f00000 	.word	0x41f00000

08000de4 <__udivmoddi4>:
 8000de4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000de8:	9d08      	ldr	r5, [sp, #32]
 8000dea:	4604      	mov	r4, r0
 8000dec:	468e      	mov	lr, r1
 8000dee:	2b00      	cmp	r3, #0
 8000df0:	d14d      	bne.n	8000e8e <__udivmoddi4+0xaa>
 8000df2:	428a      	cmp	r2, r1
 8000df4:	4694      	mov	ip, r2
 8000df6:	d969      	bls.n	8000ecc <__udivmoddi4+0xe8>
 8000df8:	fab2 f282 	clz	r2, r2
 8000dfc:	b152      	cbz	r2, 8000e14 <__udivmoddi4+0x30>
 8000dfe:	fa01 f302 	lsl.w	r3, r1, r2
 8000e02:	f1c2 0120 	rsb	r1, r2, #32
 8000e06:	fa20 f101 	lsr.w	r1, r0, r1
 8000e0a:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e0e:	ea41 0e03 	orr.w	lr, r1, r3
 8000e12:	4094      	lsls	r4, r2
 8000e14:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e18:	0c21      	lsrs	r1, r4, #16
 8000e1a:	fbbe f6f8 	udiv	r6, lr, r8
 8000e1e:	fa1f f78c 	uxth.w	r7, ip
 8000e22:	fb08 e316 	mls	r3, r8, r6, lr
 8000e26:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000e2a:	fb06 f107 	mul.w	r1, r6, r7
 8000e2e:	4299      	cmp	r1, r3
 8000e30:	d90a      	bls.n	8000e48 <__udivmoddi4+0x64>
 8000e32:	eb1c 0303 	adds.w	r3, ip, r3
 8000e36:	f106 30ff 	add.w	r0, r6, #4294967295
 8000e3a:	f080 811f 	bcs.w	800107c <__udivmoddi4+0x298>
 8000e3e:	4299      	cmp	r1, r3
 8000e40:	f240 811c 	bls.w	800107c <__udivmoddi4+0x298>
 8000e44:	3e02      	subs	r6, #2
 8000e46:	4463      	add	r3, ip
 8000e48:	1a5b      	subs	r3, r3, r1
 8000e4a:	b2a4      	uxth	r4, r4
 8000e4c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e50:	fb08 3310 	mls	r3, r8, r0, r3
 8000e54:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e58:	fb00 f707 	mul.w	r7, r0, r7
 8000e5c:	42a7      	cmp	r7, r4
 8000e5e:	d90a      	bls.n	8000e76 <__udivmoddi4+0x92>
 8000e60:	eb1c 0404 	adds.w	r4, ip, r4
 8000e64:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e68:	f080 810a 	bcs.w	8001080 <__udivmoddi4+0x29c>
 8000e6c:	42a7      	cmp	r7, r4
 8000e6e:	f240 8107 	bls.w	8001080 <__udivmoddi4+0x29c>
 8000e72:	4464      	add	r4, ip
 8000e74:	3802      	subs	r0, #2
 8000e76:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e7a:	1be4      	subs	r4, r4, r7
 8000e7c:	2600      	movs	r6, #0
 8000e7e:	b11d      	cbz	r5, 8000e88 <__udivmoddi4+0xa4>
 8000e80:	40d4      	lsrs	r4, r2
 8000e82:	2300      	movs	r3, #0
 8000e84:	e9c5 4300 	strd	r4, r3, [r5]
 8000e88:	4631      	mov	r1, r6
 8000e8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e8e:	428b      	cmp	r3, r1
 8000e90:	d909      	bls.n	8000ea6 <__udivmoddi4+0xc2>
 8000e92:	2d00      	cmp	r5, #0
 8000e94:	f000 80ef 	beq.w	8001076 <__udivmoddi4+0x292>
 8000e98:	2600      	movs	r6, #0
 8000e9a:	e9c5 0100 	strd	r0, r1, [r5]
 8000e9e:	4630      	mov	r0, r6
 8000ea0:	4631      	mov	r1, r6
 8000ea2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ea6:	fab3 f683 	clz	r6, r3
 8000eaa:	2e00      	cmp	r6, #0
 8000eac:	d14a      	bne.n	8000f44 <__udivmoddi4+0x160>
 8000eae:	428b      	cmp	r3, r1
 8000eb0:	d302      	bcc.n	8000eb8 <__udivmoddi4+0xd4>
 8000eb2:	4282      	cmp	r2, r0
 8000eb4:	f200 80f9 	bhi.w	80010aa <__udivmoddi4+0x2c6>
 8000eb8:	1a84      	subs	r4, r0, r2
 8000eba:	eb61 0303 	sbc.w	r3, r1, r3
 8000ebe:	2001      	movs	r0, #1
 8000ec0:	469e      	mov	lr, r3
 8000ec2:	2d00      	cmp	r5, #0
 8000ec4:	d0e0      	beq.n	8000e88 <__udivmoddi4+0xa4>
 8000ec6:	e9c5 4e00 	strd	r4, lr, [r5]
 8000eca:	e7dd      	b.n	8000e88 <__udivmoddi4+0xa4>
 8000ecc:	b902      	cbnz	r2, 8000ed0 <__udivmoddi4+0xec>
 8000ece:	deff      	udf	#255	; 0xff
 8000ed0:	fab2 f282 	clz	r2, r2
 8000ed4:	2a00      	cmp	r2, #0
 8000ed6:	f040 8092 	bne.w	8000ffe <__udivmoddi4+0x21a>
 8000eda:	eba1 010c 	sub.w	r1, r1, ip
 8000ede:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ee2:	fa1f fe8c 	uxth.w	lr, ip
 8000ee6:	2601      	movs	r6, #1
 8000ee8:	0c20      	lsrs	r0, r4, #16
 8000eea:	fbb1 f3f7 	udiv	r3, r1, r7
 8000eee:	fb07 1113 	mls	r1, r7, r3, r1
 8000ef2:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000ef6:	fb0e f003 	mul.w	r0, lr, r3
 8000efa:	4288      	cmp	r0, r1
 8000efc:	d908      	bls.n	8000f10 <__udivmoddi4+0x12c>
 8000efe:	eb1c 0101 	adds.w	r1, ip, r1
 8000f02:	f103 38ff 	add.w	r8, r3, #4294967295
 8000f06:	d202      	bcs.n	8000f0e <__udivmoddi4+0x12a>
 8000f08:	4288      	cmp	r0, r1
 8000f0a:	f200 80cb 	bhi.w	80010a4 <__udivmoddi4+0x2c0>
 8000f0e:	4643      	mov	r3, r8
 8000f10:	1a09      	subs	r1, r1, r0
 8000f12:	b2a4      	uxth	r4, r4
 8000f14:	fbb1 f0f7 	udiv	r0, r1, r7
 8000f18:	fb07 1110 	mls	r1, r7, r0, r1
 8000f1c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000f20:	fb0e fe00 	mul.w	lr, lr, r0
 8000f24:	45a6      	cmp	lr, r4
 8000f26:	d908      	bls.n	8000f3a <__udivmoddi4+0x156>
 8000f28:	eb1c 0404 	adds.w	r4, ip, r4
 8000f2c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000f30:	d202      	bcs.n	8000f38 <__udivmoddi4+0x154>
 8000f32:	45a6      	cmp	lr, r4
 8000f34:	f200 80bb 	bhi.w	80010ae <__udivmoddi4+0x2ca>
 8000f38:	4608      	mov	r0, r1
 8000f3a:	eba4 040e 	sub.w	r4, r4, lr
 8000f3e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000f42:	e79c      	b.n	8000e7e <__udivmoddi4+0x9a>
 8000f44:	f1c6 0720 	rsb	r7, r6, #32
 8000f48:	40b3      	lsls	r3, r6
 8000f4a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000f4e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000f52:	fa20 f407 	lsr.w	r4, r0, r7
 8000f56:	fa01 f306 	lsl.w	r3, r1, r6
 8000f5a:	431c      	orrs	r4, r3
 8000f5c:	40f9      	lsrs	r1, r7
 8000f5e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000f62:	fa00 f306 	lsl.w	r3, r0, r6
 8000f66:	fbb1 f8f9 	udiv	r8, r1, r9
 8000f6a:	0c20      	lsrs	r0, r4, #16
 8000f6c:	fa1f fe8c 	uxth.w	lr, ip
 8000f70:	fb09 1118 	mls	r1, r9, r8, r1
 8000f74:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000f78:	fb08 f00e 	mul.w	r0, r8, lr
 8000f7c:	4288      	cmp	r0, r1
 8000f7e:	fa02 f206 	lsl.w	r2, r2, r6
 8000f82:	d90b      	bls.n	8000f9c <__udivmoddi4+0x1b8>
 8000f84:	eb1c 0101 	adds.w	r1, ip, r1
 8000f88:	f108 3aff 	add.w	sl, r8, #4294967295
 8000f8c:	f080 8088 	bcs.w	80010a0 <__udivmoddi4+0x2bc>
 8000f90:	4288      	cmp	r0, r1
 8000f92:	f240 8085 	bls.w	80010a0 <__udivmoddi4+0x2bc>
 8000f96:	f1a8 0802 	sub.w	r8, r8, #2
 8000f9a:	4461      	add	r1, ip
 8000f9c:	1a09      	subs	r1, r1, r0
 8000f9e:	b2a4      	uxth	r4, r4
 8000fa0:	fbb1 f0f9 	udiv	r0, r1, r9
 8000fa4:	fb09 1110 	mls	r1, r9, r0, r1
 8000fa8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000fac:	fb00 fe0e 	mul.w	lr, r0, lr
 8000fb0:	458e      	cmp	lr, r1
 8000fb2:	d908      	bls.n	8000fc6 <__udivmoddi4+0x1e2>
 8000fb4:	eb1c 0101 	adds.w	r1, ip, r1
 8000fb8:	f100 34ff 	add.w	r4, r0, #4294967295
 8000fbc:	d26c      	bcs.n	8001098 <__udivmoddi4+0x2b4>
 8000fbe:	458e      	cmp	lr, r1
 8000fc0:	d96a      	bls.n	8001098 <__udivmoddi4+0x2b4>
 8000fc2:	3802      	subs	r0, #2
 8000fc4:	4461      	add	r1, ip
 8000fc6:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000fca:	fba0 9402 	umull	r9, r4, r0, r2
 8000fce:	eba1 010e 	sub.w	r1, r1, lr
 8000fd2:	42a1      	cmp	r1, r4
 8000fd4:	46c8      	mov	r8, r9
 8000fd6:	46a6      	mov	lr, r4
 8000fd8:	d356      	bcc.n	8001088 <__udivmoddi4+0x2a4>
 8000fda:	d053      	beq.n	8001084 <__udivmoddi4+0x2a0>
 8000fdc:	b15d      	cbz	r5, 8000ff6 <__udivmoddi4+0x212>
 8000fde:	ebb3 0208 	subs.w	r2, r3, r8
 8000fe2:	eb61 010e 	sbc.w	r1, r1, lr
 8000fe6:	fa01 f707 	lsl.w	r7, r1, r7
 8000fea:	fa22 f306 	lsr.w	r3, r2, r6
 8000fee:	40f1      	lsrs	r1, r6
 8000ff0:	431f      	orrs	r7, r3
 8000ff2:	e9c5 7100 	strd	r7, r1, [r5]
 8000ff6:	2600      	movs	r6, #0
 8000ff8:	4631      	mov	r1, r6
 8000ffa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ffe:	f1c2 0320 	rsb	r3, r2, #32
 8001002:	40d8      	lsrs	r0, r3
 8001004:	fa0c fc02 	lsl.w	ip, ip, r2
 8001008:	fa21 f303 	lsr.w	r3, r1, r3
 800100c:	4091      	lsls	r1, r2
 800100e:	4301      	orrs	r1, r0
 8001010:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8001014:	fa1f fe8c 	uxth.w	lr, ip
 8001018:	fbb3 f0f7 	udiv	r0, r3, r7
 800101c:	fb07 3610 	mls	r6, r7, r0, r3
 8001020:	0c0b      	lsrs	r3, r1, #16
 8001022:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8001026:	fb00 f60e 	mul.w	r6, r0, lr
 800102a:	429e      	cmp	r6, r3
 800102c:	fa04 f402 	lsl.w	r4, r4, r2
 8001030:	d908      	bls.n	8001044 <__udivmoddi4+0x260>
 8001032:	eb1c 0303 	adds.w	r3, ip, r3
 8001036:	f100 38ff 	add.w	r8, r0, #4294967295
 800103a:	d22f      	bcs.n	800109c <__udivmoddi4+0x2b8>
 800103c:	429e      	cmp	r6, r3
 800103e:	d92d      	bls.n	800109c <__udivmoddi4+0x2b8>
 8001040:	3802      	subs	r0, #2
 8001042:	4463      	add	r3, ip
 8001044:	1b9b      	subs	r3, r3, r6
 8001046:	b289      	uxth	r1, r1
 8001048:	fbb3 f6f7 	udiv	r6, r3, r7
 800104c:	fb07 3316 	mls	r3, r7, r6, r3
 8001050:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8001054:	fb06 f30e 	mul.w	r3, r6, lr
 8001058:	428b      	cmp	r3, r1
 800105a:	d908      	bls.n	800106e <__udivmoddi4+0x28a>
 800105c:	eb1c 0101 	adds.w	r1, ip, r1
 8001060:	f106 38ff 	add.w	r8, r6, #4294967295
 8001064:	d216      	bcs.n	8001094 <__udivmoddi4+0x2b0>
 8001066:	428b      	cmp	r3, r1
 8001068:	d914      	bls.n	8001094 <__udivmoddi4+0x2b0>
 800106a:	3e02      	subs	r6, #2
 800106c:	4461      	add	r1, ip
 800106e:	1ac9      	subs	r1, r1, r3
 8001070:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8001074:	e738      	b.n	8000ee8 <__udivmoddi4+0x104>
 8001076:	462e      	mov	r6, r5
 8001078:	4628      	mov	r0, r5
 800107a:	e705      	b.n	8000e88 <__udivmoddi4+0xa4>
 800107c:	4606      	mov	r6, r0
 800107e:	e6e3      	b.n	8000e48 <__udivmoddi4+0x64>
 8001080:	4618      	mov	r0, r3
 8001082:	e6f8      	b.n	8000e76 <__udivmoddi4+0x92>
 8001084:	454b      	cmp	r3, r9
 8001086:	d2a9      	bcs.n	8000fdc <__udivmoddi4+0x1f8>
 8001088:	ebb9 0802 	subs.w	r8, r9, r2
 800108c:	eb64 0e0c 	sbc.w	lr, r4, ip
 8001090:	3801      	subs	r0, #1
 8001092:	e7a3      	b.n	8000fdc <__udivmoddi4+0x1f8>
 8001094:	4646      	mov	r6, r8
 8001096:	e7ea      	b.n	800106e <__udivmoddi4+0x28a>
 8001098:	4620      	mov	r0, r4
 800109a:	e794      	b.n	8000fc6 <__udivmoddi4+0x1e2>
 800109c:	4640      	mov	r0, r8
 800109e:	e7d1      	b.n	8001044 <__udivmoddi4+0x260>
 80010a0:	46d0      	mov	r8, sl
 80010a2:	e77b      	b.n	8000f9c <__udivmoddi4+0x1b8>
 80010a4:	3b02      	subs	r3, #2
 80010a6:	4461      	add	r1, ip
 80010a8:	e732      	b.n	8000f10 <__udivmoddi4+0x12c>
 80010aa:	4630      	mov	r0, r6
 80010ac:	e709      	b.n	8000ec2 <__udivmoddi4+0xde>
 80010ae:	4464      	add	r4, ip
 80010b0:	3802      	subs	r0, #2
 80010b2:	e742      	b.n	8000f3a <__udivmoddi4+0x156>

080010b4 <__aeabi_idiv0>:
 80010b4:	4770      	bx	lr
 80010b6:	bf00      	nop

080010b8 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void) {
 80010b8:	b580      	push	{r7, lr}
 80010ba:	b084      	sub	sp, #16
 80010bc:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN ADC1_Init 0 */

	/* USER CODE END ADC1_Init 0 */

	ADC_ChannelConfTypeDef sConfig = { 0 };
 80010be:	463b      	mov	r3, r7
 80010c0:	2200      	movs	r2, #0
 80010c2:	601a      	str	r2, [r3, #0]
 80010c4:	605a      	str	r2, [r3, #4]
 80010c6:	609a      	str	r2, [r3, #8]
 80010c8:	60da      	str	r2, [r3, #12]

	/* USER CODE END ADC1_Init 1 */

	/** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
	 */
	hadc1.Instance = ADC1;
 80010ca:	4b22      	ldr	r3, [pc, #136]	; (8001154 <MX_ADC1_Init+0x9c>)
 80010cc:	4a22      	ldr	r2, [pc, #136]	; (8001158 <MX_ADC1_Init+0xa0>)
 80010ce:	601a      	str	r2, [r3, #0]
	hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80010d0:	4b20      	ldr	r3, [pc, #128]	; (8001154 <MX_ADC1_Init+0x9c>)
 80010d2:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80010d6:	605a      	str	r2, [r3, #4]
	hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80010d8:	4b1e      	ldr	r3, [pc, #120]	; (8001154 <MX_ADC1_Init+0x9c>)
 80010da:	2200      	movs	r2, #0
 80010dc:	609a      	str	r2, [r3, #8]
	hadc1.Init.ScanConvMode = DISABLE;
 80010de:	4b1d      	ldr	r3, [pc, #116]	; (8001154 <MX_ADC1_Init+0x9c>)
 80010e0:	2200      	movs	r2, #0
 80010e2:	611a      	str	r2, [r3, #16]
	hadc1.Init.ContinuousConvMode = ENABLE;
 80010e4:	4b1b      	ldr	r3, [pc, #108]	; (8001154 <MX_ADC1_Init+0x9c>)
 80010e6:	2201      	movs	r2, #1
 80010e8:	761a      	strb	r2, [r3, #24]
	hadc1.Init.DiscontinuousConvMode = DISABLE;
 80010ea:	4b1a      	ldr	r3, [pc, #104]	; (8001154 <MX_ADC1_Init+0x9c>)
 80010ec:	2200      	movs	r2, #0
 80010ee:	f883 2020 	strb.w	r2, [r3, #32]
	hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 80010f2:	4b18      	ldr	r3, [pc, #96]	; (8001154 <MX_ADC1_Init+0x9c>)
 80010f4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80010f8:	62da      	str	r2, [r3, #44]	; 0x2c
	hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T3_TRGO;
 80010fa:	4b16      	ldr	r3, [pc, #88]	; (8001154 <MX_ADC1_Init+0x9c>)
 80010fc:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001100:	629a      	str	r2, [r3, #40]	; 0x28
	hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001102:	4b14      	ldr	r3, [pc, #80]	; (8001154 <MX_ADC1_Init+0x9c>)
 8001104:	2200      	movs	r2, #0
 8001106:	60da      	str	r2, [r3, #12]
	hadc1.Init.NbrOfConversion = 1;
 8001108:	4b12      	ldr	r3, [pc, #72]	; (8001154 <MX_ADC1_Init+0x9c>)
 800110a:	2201      	movs	r2, #1
 800110c:	61da      	str	r2, [r3, #28]
	hadc1.Init.DMAContinuousRequests = DISABLE;
 800110e:	4b11      	ldr	r3, [pc, #68]	; (8001154 <MX_ADC1_Init+0x9c>)
 8001110:	2200      	movs	r2, #0
 8001112:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001116:	4b0f      	ldr	r3, [pc, #60]	; (8001154 <MX_ADC1_Init+0x9c>)
 8001118:	2201      	movs	r2, #1
 800111a:	615a      	str	r2, [r3, #20]
	if (HAL_ADC_Init(&hadc1) != HAL_OK) {
 800111c:	480d      	ldr	r0, [pc, #52]	; (8001154 <MX_ADC1_Init+0x9c>)
 800111e:	f001 f885 	bl	800222c <HAL_ADC_Init>
 8001122:	4603      	mov	r3, r0
 8001124:	2b00      	cmp	r3, #0
 8001126:	d001      	beq.n	800112c <MX_ADC1_Init+0x74>
		Error_Handler();
 8001128:	f000 f95a 	bl	80013e0 <Error_Handler>
	}

	/** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	 */
	sConfig.Channel = ADC_CHANNEL_5;
 800112c:	2305      	movs	r3, #5
 800112e:	603b      	str	r3, [r7, #0]
	sConfig.Rank = 1;
 8001130:	2301      	movs	r3, #1
 8001132:	607b      	str	r3, [r7, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001134:	2300      	movs	r3, #0
 8001136:	60bb      	str	r3, [r7, #8]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 8001138:	463b      	mov	r3, r7
 800113a:	4619      	mov	r1, r3
 800113c:	4805      	ldr	r0, [pc, #20]	; (8001154 <MX_ADC1_Init+0x9c>)
 800113e:	f001 f9dd 	bl	80024fc <HAL_ADC_ConfigChannel>
 8001142:	4603      	mov	r3, r0
 8001144:	2b00      	cmp	r3, #0
 8001146:	d001      	beq.n	800114c <MX_ADC1_Init+0x94>
		Error_Handler();
 8001148:	f000 f94a 	bl	80013e0 <Error_Handler>
	}
	/* USER CODE BEGIN ADC1_Init 2 */

	/* USER CODE END ADC1_Init 2 */
}
 800114c:	bf00      	nop
 800114e:	3710      	adds	r7, #16
 8001150:	46bd      	mov	sp, r7
 8001152:	bd80      	pop	{r7, pc}
 8001154:	20000214 	.word	0x20000214
 8001158:	40012000 	.word	0x40012000

0800115c <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef *adcHandle) {
 800115c:	b580      	push	{r7, lr}
 800115e:	b08a      	sub	sp, #40	; 0x28
 8001160:	af00      	add	r7, sp, #0
 8001162:	6078      	str	r0, [r7, #4]

	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8001164:	f107 0314 	add.w	r3, r7, #20
 8001168:	2200      	movs	r2, #0
 800116a:	601a      	str	r2, [r3, #0]
 800116c:	605a      	str	r2, [r3, #4]
 800116e:	609a      	str	r2, [r3, #8]
 8001170:	60da      	str	r2, [r3, #12]
 8001172:	611a      	str	r2, [r3, #16]
	if (adcHandle->Instance == ADC1) {
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	4a33      	ldr	r2, [pc, #204]	; (8001248 <HAL_ADC_MspInit+0xec>)
 800117a:	4293      	cmp	r3, r2
 800117c:	d15f      	bne.n	800123e <HAL_ADC_MspInit+0xe2>
		/* USER CODE BEGIN ADC1_MspInit 0 */

		/* USER CODE END ADC1_MspInit 0 */
		/* ADC1 clock enable */
		__HAL_RCC_ADC1_CLK_ENABLE();
 800117e:	2300      	movs	r3, #0
 8001180:	613b      	str	r3, [r7, #16]
 8001182:	4b32      	ldr	r3, [pc, #200]	; (800124c <HAL_ADC_MspInit+0xf0>)
 8001184:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001186:	4a31      	ldr	r2, [pc, #196]	; (800124c <HAL_ADC_MspInit+0xf0>)
 8001188:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800118c:	6453      	str	r3, [r2, #68]	; 0x44
 800118e:	4b2f      	ldr	r3, [pc, #188]	; (800124c <HAL_ADC_MspInit+0xf0>)
 8001190:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001192:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001196:	613b      	str	r3, [r7, #16]
 8001198:	693b      	ldr	r3, [r7, #16]

		__HAL_RCC_GPIOA_CLK_ENABLE();
 800119a:	2300      	movs	r3, #0
 800119c:	60fb      	str	r3, [r7, #12]
 800119e:	4b2b      	ldr	r3, [pc, #172]	; (800124c <HAL_ADC_MspInit+0xf0>)
 80011a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011a2:	4a2a      	ldr	r2, [pc, #168]	; (800124c <HAL_ADC_MspInit+0xf0>)
 80011a4:	f043 0301 	orr.w	r3, r3, #1
 80011a8:	6313      	str	r3, [r2, #48]	; 0x30
 80011aa:	4b28      	ldr	r3, [pc, #160]	; (800124c <HAL_ADC_MspInit+0xf0>)
 80011ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ae:	f003 0301 	and.w	r3, r3, #1
 80011b2:	60fb      	str	r3, [r7, #12]
 80011b4:	68fb      	ldr	r3, [r7, #12]
		/**ADC1 GPIO Configuration
		 PA5         ------> ADC1_IN5
		 */
		GPIO_InitStruct.Pin = GPIO_PIN_5;
 80011b6:	2320      	movs	r3, #32
 80011b8:	617b      	str	r3, [r7, #20]
		GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80011ba:	2303      	movs	r3, #3
 80011bc:	61bb      	str	r3, [r7, #24]
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011be:	2300      	movs	r3, #0
 80011c0:	61fb      	str	r3, [r7, #28]
		HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011c2:	f107 0314 	add.w	r3, r7, #20
 80011c6:	4619      	mov	r1, r3
 80011c8:	4821      	ldr	r0, [pc, #132]	; (8001250 <HAL_ADC_MspInit+0xf4>)
 80011ca:	f002 faa1 	bl	8003710 <HAL_GPIO_Init>

		/* ADC1 DMA Init */
		/* ADC1 Init */
		hdma_adc1.Instance = DMA2_Stream0;
 80011ce:	4b21      	ldr	r3, [pc, #132]	; (8001254 <HAL_ADC_MspInit+0xf8>)
 80011d0:	4a21      	ldr	r2, [pc, #132]	; (8001258 <HAL_ADC_MspInit+0xfc>)
 80011d2:	601a      	str	r2, [r3, #0]
		hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 80011d4:	4b1f      	ldr	r3, [pc, #124]	; (8001254 <HAL_ADC_MspInit+0xf8>)
 80011d6:	2200      	movs	r2, #0
 80011d8:	605a      	str	r2, [r3, #4]
		hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80011da:	4b1e      	ldr	r3, [pc, #120]	; (8001254 <HAL_ADC_MspInit+0xf8>)
 80011dc:	2200      	movs	r2, #0
 80011de:	609a      	str	r2, [r3, #8]
		hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80011e0:	4b1c      	ldr	r3, [pc, #112]	; (8001254 <HAL_ADC_MspInit+0xf8>)
 80011e2:	2200      	movs	r2, #0
 80011e4:	60da      	str	r2, [r3, #12]
		hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80011e6:	4b1b      	ldr	r3, [pc, #108]	; (8001254 <HAL_ADC_MspInit+0xf8>)
 80011e8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80011ec:	611a      	str	r2, [r3, #16]
		hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80011ee:	4b19      	ldr	r3, [pc, #100]	; (8001254 <HAL_ADC_MspInit+0xf8>)
 80011f0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80011f4:	615a      	str	r2, [r3, #20]
		hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80011f6:	4b17      	ldr	r3, [pc, #92]	; (8001254 <HAL_ADC_MspInit+0xf8>)
 80011f8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80011fc:	619a      	str	r2, [r3, #24]
		hdma_adc1.Init.Mode = DMA_NORMAL;
 80011fe:	4b15      	ldr	r3, [pc, #84]	; (8001254 <HAL_ADC_MspInit+0xf8>)
 8001200:	2200      	movs	r2, #0
 8001202:	61da      	str	r2, [r3, #28]
		hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001204:	4b13      	ldr	r3, [pc, #76]	; (8001254 <HAL_ADC_MspInit+0xf8>)
 8001206:	2200      	movs	r2, #0
 8001208:	621a      	str	r2, [r3, #32]
		hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 800120a:	4b12      	ldr	r3, [pc, #72]	; (8001254 <HAL_ADC_MspInit+0xf8>)
 800120c:	2204      	movs	r2, #4
 800120e:	625a      	str	r2, [r3, #36]	; 0x24
		hdma_adc1.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8001210:	4b10      	ldr	r3, [pc, #64]	; (8001254 <HAL_ADC_MspInit+0xf8>)
 8001212:	2203      	movs	r2, #3
 8001214:	629a      	str	r2, [r3, #40]	; 0x28
		hdma_adc1.Init.MemBurst = DMA_MBURST_SINGLE;
 8001216:	4b0f      	ldr	r3, [pc, #60]	; (8001254 <HAL_ADC_MspInit+0xf8>)
 8001218:	2200      	movs	r2, #0
 800121a:	62da      	str	r2, [r3, #44]	; 0x2c
		hdma_adc1.Init.PeriphBurst = DMA_PBURST_SINGLE;
 800121c:	4b0d      	ldr	r3, [pc, #52]	; (8001254 <HAL_ADC_MspInit+0xf8>)
 800121e:	2200      	movs	r2, #0
 8001220:	631a      	str	r2, [r3, #48]	; 0x30
		if (HAL_DMA_Init(&hdma_adc1) != HAL_OK) {
 8001222:	480c      	ldr	r0, [pc, #48]	; (8001254 <HAL_ADC_MspInit+0xf8>)
 8001224:	f001 ff04 	bl	8003030 <HAL_DMA_Init>
 8001228:	4603      	mov	r3, r0
 800122a:	2b00      	cmp	r3, #0
 800122c:	d001      	beq.n	8001232 <HAL_ADC_MspInit+0xd6>
			Error_Handler();
 800122e:	f000 f8d7 	bl	80013e0 <Error_Handler>
		}

		__HAL_LINKDMA(adcHandle, DMA_Handle, hdma_adc1);
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	4a07      	ldr	r2, [pc, #28]	; (8001254 <HAL_ADC_MspInit+0xf8>)
 8001236:	639a      	str	r2, [r3, #56]	; 0x38
 8001238:	4a06      	ldr	r2, [pc, #24]	; (8001254 <HAL_ADC_MspInit+0xf8>)
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	6393      	str	r3, [r2, #56]	; 0x38

		/* USER CODE BEGIN ADC1_MspInit 1 */

		/* USER CODE END ADC1_MspInit 1 */
	}
}
 800123e:	bf00      	nop
 8001240:	3728      	adds	r7, #40	; 0x28
 8001242:	46bd      	mov	sp, r7
 8001244:	bd80      	pop	{r7, pc}
 8001246:	bf00      	nop
 8001248:	40012000 	.word	0x40012000
 800124c:	40023800 	.word	0x40023800
 8001250:	40020000 	.word	0x40020000
 8001254:	2000025c 	.word	0x2000025c
 8001258:	40026410 	.word	0x40026410

0800125c <HAL_ADC_ConvCpltCallback>:

/* USER CODE BEGIN 1 */
extern uint8_t Sign_readyDisplay;
extern uint8_t Sign_samplingOver;
extern uint16_t adc_cache[adc_cache_size];
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc) {
 800125c:	b580      	push	{r7, lr}
 800125e:	b082      	sub	sp, #8
 8001260:	af00      	add	r7, sp, #0
 8001262:	6078      	str	r0, [r7, #4]
	Sign_samplingOver = 1;
 8001264:	4b09      	ldr	r3, [pc, #36]	; (800128c <HAL_ADC_ConvCpltCallback+0x30>)
 8001266:	2201      	movs	r2, #1
 8001268:	701a      	strb	r2, [r3, #0]
	if (Sign_samplingOver == 1) {
 800126a:	4b08      	ldr	r3, [pc, #32]	; (800128c <HAL_ADC_ConvCpltCallback+0x30>)
 800126c:	781b      	ldrb	r3, [r3, #0]
 800126e:	2b01      	cmp	r3, #1
 8001270:	d008      	beq.n	8001284 <HAL_ADC_ConvCpltCallback+0x28>
		;
	} else {
		Sign_samplingOver = 0;
 8001272:	4b06      	ldr	r3, [pc, #24]	; (800128c <HAL_ADC_ConvCpltCallback+0x30>)
 8001274:	2200      	movs	r2, #0
 8001276:	701a      	strb	r2, [r3, #0]
		HAL_ADC_Start_DMA(&hadc1, (uint32_t*) adc_cache, adc_cache_size);
 8001278:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800127c:	4904      	ldr	r1, [pc, #16]	; (8001290 <HAL_ADC_ConvCpltCallback+0x34>)
 800127e:	4805      	ldr	r0, [pc, #20]	; (8001294 <HAL_ADC_ConvCpltCallback+0x38>)
 8001280:	f001 f818 	bl	80022b4 <HAL_ADC_Start_DMA>
	}
}
 8001284:	bf00      	nop
 8001286:	3708      	adds	r7, #8
 8001288:	46bd      	mov	sp, r7
 800128a:	bd80      	pop	{r7, pc}
 800128c:	20000330 	.word	0x20000330
 8001290:	20000334 	.word	0x20000334
 8001294:	20000214 	.word	0x20000214

08001298 <MX_DAC_Init>:
DAC_HandleTypeDef hdac;
DMA_HandleTypeDef hdma_dac1;

/* DAC init function */
void MX_DAC_Init(void)
{
 8001298:	b580      	push	{r7, lr}
 800129a:	b082      	sub	sp, #8
 800129c:	af00      	add	r7, sp, #0

    /* USER CODE BEGIN DAC_Init 0 */

    /* USER CODE END DAC_Init 0 */

    DAC_ChannelConfTypeDef sConfig = {0};
 800129e:	463b      	mov	r3, r7
 80012a0:	2200      	movs	r2, #0
 80012a2:	601a      	str	r2, [r3, #0]
 80012a4:	605a      	str	r2, [r3, #4]

    /* USER CODE END DAC_Init 1 */

    /** DAC Initialization
     */
    hdac.Instance = DAC;
 80012a6:	4b0f      	ldr	r3, [pc, #60]	; (80012e4 <MX_DAC_Init+0x4c>)
 80012a8:	4a0f      	ldr	r2, [pc, #60]	; (80012e8 <MX_DAC_Init+0x50>)
 80012aa:	601a      	str	r2, [r3, #0]
    if (HAL_DAC_Init(&hdac) != HAL_OK)
 80012ac:	480d      	ldr	r0, [pc, #52]	; (80012e4 <MX_DAC_Init+0x4c>)
 80012ae:	f001 fcd6 	bl	8002c5e <HAL_DAC_Init>
 80012b2:	4603      	mov	r3, r0
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	d001      	beq.n	80012bc <MX_DAC_Init+0x24>
    {
        Error_Handler();
 80012b8:	f000 f892 	bl	80013e0 <Error_Handler>
    }

    /** DAC channel OUT1 config
     */
    sConfig.DAC_Trigger = DAC_TRIGGER_T2_TRGO;
 80012bc:	2324      	movs	r3, #36	; 0x24
 80012be:	603b      	str	r3, [r7, #0]
    sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_DISABLE;
 80012c0:	2302      	movs	r3, #2
 80012c2:	607b      	str	r3, [r7, #4]
    if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 80012c4:	463b      	mov	r3, r7
 80012c6:	2200      	movs	r2, #0
 80012c8:	4619      	mov	r1, r3
 80012ca:	4806      	ldr	r0, [pc, #24]	; (80012e4 <MX_DAC_Init+0x4c>)
 80012cc:	f001 fdd6 	bl	8002e7c <HAL_DAC_ConfigChannel>
 80012d0:	4603      	mov	r3, r0
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d001      	beq.n	80012da <MX_DAC_Init+0x42>
    {
        Error_Handler();
 80012d6:	f000 f883 	bl	80013e0 <Error_Handler>
    }
    /* USER CODE BEGIN DAC_Init 2 */

    /* USER CODE END DAC_Init 2 */
}
 80012da:	bf00      	nop
 80012dc:	3708      	adds	r7, #8
 80012de:	46bd      	mov	sp, r7
 80012e0:	bd80      	pop	{r7, pc}
 80012e2:	bf00      	nop
 80012e4:	200002bc 	.word	0x200002bc
 80012e8:	40007400 	.word	0x40007400

080012ec <HAL_DAC_MspInit>:

void HAL_DAC_MspInit(DAC_HandleTypeDef *dacHandle)
{
 80012ec:	b580      	push	{r7, lr}
 80012ee:	b08a      	sub	sp, #40	; 0x28
 80012f0:	af00      	add	r7, sp, #0
 80012f2:	6078      	str	r0, [r7, #4]

    GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012f4:	f107 0314 	add.w	r3, r7, #20
 80012f8:	2200      	movs	r2, #0
 80012fa:	601a      	str	r2, [r3, #0]
 80012fc:	605a      	str	r2, [r3, #4]
 80012fe:	609a      	str	r2, [r3, #8]
 8001300:	60da      	str	r2, [r3, #12]
 8001302:	611a      	str	r2, [r3, #16]
    if (dacHandle->Instance == DAC)
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	4a30      	ldr	r2, [pc, #192]	; (80013cc <HAL_DAC_MspInit+0xe0>)
 800130a:	4293      	cmp	r3, r2
 800130c:	d159      	bne.n	80013c2 <HAL_DAC_MspInit+0xd6>
    {
        /* USER CODE BEGIN DAC_MspInit 0 */

        /* USER CODE END DAC_MspInit 0 */
        /* DAC clock enable */
        __HAL_RCC_DAC_CLK_ENABLE();
 800130e:	2300      	movs	r3, #0
 8001310:	613b      	str	r3, [r7, #16]
 8001312:	4b2f      	ldr	r3, [pc, #188]	; (80013d0 <HAL_DAC_MspInit+0xe4>)
 8001314:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001316:	4a2e      	ldr	r2, [pc, #184]	; (80013d0 <HAL_DAC_MspInit+0xe4>)
 8001318:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800131c:	6413      	str	r3, [r2, #64]	; 0x40
 800131e:	4b2c      	ldr	r3, [pc, #176]	; (80013d0 <HAL_DAC_MspInit+0xe4>)
 8001320:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001322:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001326:	613b      	str	r3, [r7, #16]
 8001328:	693b      	ldr	r3, [r7, #16]

        __HAL_RCC_GPIOA_CLK_ENABLE();
 800132a:	2300      	movs	r3, #0
 800132c:	60fb      	str	r3, [r7, #12]
 800132e:	4b28      	ldr	r3, [pc, #160]	; (80013d0 <HAL_DAC_MspInit+0xe4>)
 8001330:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001332:	4a27      	ldr	r2, [pc, #156]	; (80013d0 <HAL_DAC_MspInit+0xe4>)
 8001334:	f043 0301 	orr.w	r3, r3, #1
 8001338:	6313      	str	r3, [r2, #48]	; 0x30
 800133a:	4b25      	ldr	r3, [pc, #148]	; (80013d0 <HAL_DAC_MspInit+0xe4>)
 800133c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800133e:	f003 0301 	and.w	r3, r3, #1
 8001342:	60fb      	str	r3, [r7, #12]
 8001344:	68fb      	ldr	r3, [r7, #12]
        /**DAC GPIO Configuration
        PA4         ------> DAC_OUT1
        */
        GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001346:	2310      	movs	r3, #16
 8001348:	617b      	str	r3, [r7, #20]
        GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800134a:	2303      	movs	r3, #3
 800134c:	61bb      	str	r3, [r7, #24]
        GPIO_InitStruct.Pull = GPIO_NOPULL;
 800134e:	2300      	movs	r3, #0
 8001350:	61fb      	str	r3, [r7, #28]
        HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001352:	f107 0314 	add.w	r3, r7, #20
 8001356:	4619      	mov	r1, r3
 8001358:	481e      	ldr	r0, [pc, #120]	; (80013d4 <HAL_DAC_MspInit+0xe8>)
 800135a:	f002 f9d9 	bl	8003710 <HAL_GPIO_Init>

        /* DAC DMA Init */
        /* DAC1 Init */
        hdma_dac1.Instance = DMA1_Stream5;
 800135e:	4b1e      	ldr	r3, [pc, #120]	; (80013d8 <HAL_DAC_MspInit+0xec>)
 8001360:	4a1e      	ldr	r2, [pc, #120]	; (80013dc <HAL_DAC_MspInit+0xf0>)
 8001362:	601a      	str	r2, [r3, #0]
        hdma_dac1.Init.Channel = DMA_CHANNEL_7;
 8001364:	4b1c      	ldr	r3, [pc, #112]	; (80013d8 <HAL_DAC_MspInit+0xec>)
 8001366:	f04f 6260 	mov.w	r2, #234881024	; 0xe000000
 800136a:	605a      	str	r2, [r3, #4]
        hdma_dac1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800136c:	4b1a      	ldr	r3, [pc, #104]	; (80013d8 <HAL_DAC_MspInit+0xec>)
 800136e:	2240      	movs	r2, #64	; 0x40
 8001370:	609a      	str	r2, [r3, #8]
        hdma_dac1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001372:	4b19      	ldr	r3, [pc, #100]	; (80013d8 <HAL_DAC_MspInit+0xec>)
 8001374:	2200      	movs	r2, #0
 8001376:	60da      	str	r2, [r3, #12]
        hdma_dac1.Init.MemInc = DMA_MINC_ENABLE;
 8001378:	4b17      	ldr	r3, [pc, #92]	; (80013d8 <HAL_DAC_MspInit+0xec>)
 800137a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800137e:	611a      	str	r2, [r3, #16]
        hdma_dac1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001380:	4b15      	ldr	r3, [pc, #84]	; (80013d8 <HAL_DAC_MspInit+0xec>)
 8001382:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001386:	615a      	str	r2, [r3, #20]
        hdma_dac1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001388:	4b13      	ldr	r3, [pc, #76]	; (80013d8 <HAL_DAC_MspInit+0xec>)
 800138a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800138e:	619a      	str	r2, [r3, #24]
        hdma_dac1.Init.Mode = DMA_CIRCULAR;
 8001390:	4b11      	ldr	r3, [pc, #68]	; (80013d8 <HAL_DAC_MspInit+0xec>)
 8001392:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001396:	61da      	str	r2, [r3, #28]
        hdma_dac1.Init.Priority = DMA_PRIORITY_HIGH;
 8001398:	4b0f      	ldr	r3, [pc, #60]	; (80013d8 <HAL_DAC_MspInit+0xec>)
 800139a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800139e:	621a      	str	r2, [r3, #32]
        hdma_dac1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80013a0:	4b0d      	ldr	r3, [pc, #52]	; (80013d8 <HAL_DAC_MspInit+0xec>)
 80013a2:	2200      	movs	r2, #0
 80013a4:	625a      	str	r2, [r3, #36]	; 0x24
        if (HAL_DMA_Init(&hdma_dac1) != HAL_OK)
 80013a6:	480c      	ldr	r0, [pc, #48]	; (80013d8 <HAL_DAC_MspInit+0xec>)
 80013a8:	f001 fe42 	bl	8003030 <HAL_DMA_Init>
 80013ac:	4603      	mov	r3, r0
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d001      	beq.n	80013b6 <HAL_DAC_MspInit+0xca>
        {
            Error_Handler();
 80013b2:	f000 f815 	bl	80013e0 <Error_Handler>
        }

        __HAL_LINKDMA(dacHandle, DMA_Handle1, hdma_dac1);
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	4a07      	ldr	r2, [pc, #28]	; (80013d8 <HAL_DAC_MspInit+0xec>)
 80013ba:	609a      	str	r2, [r3, #8]
 80013bc:	4a06      	ldr	r2, [pc, #24]	; (80013d8 <HAL_DAC_MspInit+0xec>)
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	6393      	str	r3, [r2, #56]	; 0x38

        /* USER CODE BEGIN DAC_MspInit 1 */

        /* USER CODE END DAC_MspInit 1 */
    }
}
 80013c2:	bf00      	nop
 80013c4:	3728      	adds	r7, #40	; 0x28
 80013c6:	46bd      	mov	sp, r7
 80013c8:	bd80      	pop	{r7, pc}
 80013ca:	bf00      	nop
 80013cc:	40007400 	.word	0x40007400
 80013d0:	40023800 	.word	0x40023800
 80013d4:	40020000 	.word	0x40020000
 80013d8:	200002d0 	.word	0x200002d0
 80013dc:	40026088 	.word	0x40026088

080013e0 <Error_Handler>:
    }
}

/* USER CODE BEGIN 1 */
void Error_Handler(void)
{
 80013e0:	b480      	push	{r7}
 80013e2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80013e4:	b672      	cpsid	i
}
 80013e6:	bf00      	nop
    /* USER CODE BEGIN Error_Handler_Debug */
    /* User can add his own implementation to report the HAL error return state */
    __disable_irq();
    while (1)
 80013e8:	e7fe      	b.n	80013e8 <Error_Handler+0x8>
	...

080013ec <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80013ec:	b580      	push	{r7, lr}
 80013ee:	b082      	sub	sp, #8
 80013f0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80013f2:	2300      	movs	r3, #0
 80013f4:	607b      	str	r3, [r7, #4]
 80013f6:	4b1f      	ldr	r3, [pc, #124]	; (8001474 <MX_DMA_Init+0x88>)
 80013f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013fa:	4a1e      	ldr	r2, [pc, #120]	; (8001474 <MX_DMA_Init+0x88>)
 80013fc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001400:	6313      	str	r3, [r2, #48]	; 0x30
 8001402:	4b1c      	ldr	r3, [pc, #112]	; (8001474 <MX_DMA_Init+0x88>)
 8001404:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001406:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800140a:	607b      	str	r3, [r7, #4]
 800140c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 800140e:	2300      	movs	r3, #0
 8001410:	603b      	str	r3, [r7, #0]
 8001412:	4b18      	ldr	r3, [pc, #96]	; (8001474 <MX_DMA_Init+0x88>)
 8001414:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001416:	4a17      	ldr	r2, [pc, #92]	; (8001474 <MX_DMA_Init+0x88>)
 8001418:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800141c:	6313      	str	r3, [r2, #48]	; 0x30
 800141e:	4b15      	ldr	r3, [pc, #84]	; (8001474 <MX_DMA_Init+0x88>)
 8001420:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001422:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001426:	603b      	str	r3, [r7, #0]
 8001428:	683b      	ldr	r3, [r7, #0]

    /* DMA interrupt init */
    /* DMA1_Stream5_IRQn interrupt configuration */
    HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 800142a:	2200      	movs	r2, #0
 800142c:	2100      	movs	r1, #0
 800142e:	2010      	movs	r0, #16
 8001430:	f001 fbdf 	bl	8002bf2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8001434:	2010      	movs	r0, #16
 8001436:	f001 fbf8 	bl	8002c2a <HAL_NVIC_EnableIRQ>

    /* DMA2_Stream0_IRQn interrupt configuration */
    HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 800143a:	2200      	movs	r2, #0
 800143c:	2100      	movs	r1, #0
 800143e:	2038      	movs	r0, #56	; 0x38
 8001440:	f001 fbd7 	bl	8002bf2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8001444:	2038      	movs	r0, #56	; 0x38
 8001446:	f001 fbf0 	bl	8002c2a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 800144a:	2200      	movs	r2, #0
 800144c:	2100      	movs	r1, #0
 800144e:	203a      	movs	r0, #58	; 0x3a
 8001450:	f001 fbcf 	bl	8002bf2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8001454:	203a      	movs	r0, #58	; 0x3a
 8001456:	f001 fbe8 	bl	8002c2a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 0, 0);
 800145a:	2200      	movs	r2, #0
 800145c:	2100      	movs	r1, #0
 800145e:	2046      	movs	r0, #70	; 0x46
 8001460:	f001 fbc7 	bl	8002bf2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 8001464:	2046      	movs	r0, #70	; 0x46
 8001466:	f001 fbe0 	bl	8002c2a <HAL_NVIC_EnableIRQ>

}
 800146a:	bf00      	nop
 800146c:	3708      	adds	r7, #8
 800146e:	46bd      	mov	sp, r7
 8001470:	bd80      	pop	{r7, pc}
 8001472:	bf00      	nop
 8001474:	40023800 	.word	0x40023800

08001478 <MX_GPIO_Init>:

/* USER CODE END 1 */

/** Configure pins
 */
void MX_GPIO_Init(void) {
 8001478:	b580      	push	{r7, lr}
 800147a:	b08c      	sub	sp, #48	; 0x30
 800147c:	af00      	add	r7, sp, #0

	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 800147e:	f107 031c 	add.w	r3, r7, #28
 8001482:	2200      	movs	r2, #0
 8001484:	601a      	str	r2, [r3, #0]
 8001486:	605a      	str	r2, [r3, #4]
 8001488:	609a      	str	r2, [r3, #8]
 800148a:	60da      	str	r2, [r3, #12]
 800148c:	611a      	str	r2, [r3, #16]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOE_CLK_ENABLE();
 800148e:	2300      	movs	r3, #0
 8001490:	61bb      	str	r3, [r7, #24]
 8001492:	4b52      	ldr	r3, [pc, #328]	; (80015dc <MX_GPIO_Init+0x164>)
 8001494:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001496:	4a51      	ldr	r2, [pc, #324]	; (80015dc <MX_GPIO_Init+0x164>)
 8001498:	f043 0310 	orr.w	r3, r3, #16
 800149c:	6313      	str	r3, [r2, #48]	; 0x30
 800149e:	4b4f      	ldr	r3, [pc, #316]	; (80015dc <MX_GPIO_Init+0x164>)
 80014a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014a2:	f003 0310 	and.w	r3, r3, #16
 80014a6:	61bb      	str	r3, [r7, #24]
 80014a8:	69bb      	ldr	r3, [r7, #24]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80014aa:	2300      	movs	r3, #0
 80014ac:	617b      	str	r3, [r7, #20]
 80014ae:	4b4b      	ldr	r3, [pc, #300]	; (80015dc <MX_GPIO_Init+0x164>)
 80014b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014b2:	4a4a      	ldr	r2, [pc, #296]	; (80015dc <MX_GPIO_Init+0x164>)
 80014b4:	f043 0301 	orr.w	r3, r3, #1
 80014b8:	6313      	str	r3, [r2, #48]	; 0x30
 80014ba:	4b48      	ldr	r3, [pc, #288]	; (80015dc <MX_GPIO_Init+0x164>)
 80014bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014be:	f003 0301 	and.w	r3, r3, #1
 80014c2:	617b      	str	r3, [r7, #20]
 80014c4:	697b      	ldr	r3, [r7, #20]
	__HAL_RCC_GPIOF_CLK_ENABLE();
 80014c6:	2300      	movs	r3, #0
 80014c8:	613b      	str	r3, [r7, #16]
 80014ca:	4b44      	ldr	r3, [pc, #272]	; (80015dc <MX_GPIO_Init+0x164>)
 80014cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ce:	4a43      	ldr	r2, [pc, #268]	; (80015dc <MX_GPIO_Init+0x164>)
 80014d0:	f043 0320 	orr.w	r3, r3, #32
 80014d4:	6313      	str	r3, [r2, #48]	; 0x30
 80014d6:	4b41      	ldr	r3, [pc, #260]	; (80015dc <MX_GPIO_Init+0x164>)
 80014d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014da:	f003 0320 	and.w	r3, r3, #32
 80014de:	613b      	str	r3, [r7, #16]
 80014e0:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 80014e2:	2300      	movs	r3, #0
 80014e4:	60fb      	str	r3, [r7, #12]
 80014e6:	4b3d      	ldr	r3, [pc, #244]	; (80015dc <MX_GPIO_Init+0x164>)
 80014e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ea:	4a3c      	ldr	r2, [pc, #240]	; (80015dc <MX_GPIO_Init+0x164>)
 80014ec:	f043 0302 	orr.w	r3, r3, #2
 80014f0:	6313      	str	r3, [r2, #48]	; 0x30
 80014f2:	4b3a      	ldr	r3, [pc, #232]	; (80015dc <MX_GPIO_Init+0x164>)
 80014f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014f6:	f003 0302 	and.w	r3, r3, #2
 80014fa:	60fb      	str	r3, [r7, #12]
 80014fc:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 80014fe:	2300      	movs	r3, #0
 8001500:	60bb      	str	r3, [r7, #8]
 8001502:	4b36      	ldr	r3, [pc, #216]	; (80015dc <MX_GPIO_Init+0x164>)
 8001504:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001506:	4a35      	ldr	r2, [pc, #212]	; (80015dc <MX_GPIO_Init+0x164>)
 8001508:	f043 0308 	orr.w	r3, r3, #8
 800150c:	6313      	str	r3, [r2, #48]	; 0x30
 800150e:	4b33      	ldr	r3, [pc, #204]	; (80015dc <MX_GPIO_Init+0x164>)
 8001510:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001512:	f003 0308 	and.w	r3, r3, #8
 8001516:	60bb      	str	r3, [r7, #8]
 8001518:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOG_CLK_ENABLE();
 800151a:	2300      	movs	r3, #0
 800151c:	607b      	str	r3, [r7, #4]
 800151e:	4b2f      	ldr	r3, [pc, #188]	; (80015dc <MX_GPIO_Init+0x164>)
 8001520:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001522:	4a2e      	ldr	r2, [pc, #184]	; (80015dc <MX_GPIO_Init+0x164>)
 8001524:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001528:	6313      	str	r3, [r2, #48]	; 0x30
 800152a:	4b2c      	ldr	r3, [pc, #176]	; (80015dc <MX_GPIO_Init+0x164>)
 800152c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800152e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001532:	607b      	str	r3, [r7, #4]
 8001534:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(LCD_BL_GPIO_Port, LCD_BL_Pin, GPIO_PIN_SET);
 8001536:	2201      	movs	r2, #1
 8001538:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800153c:	4828      	ldr	r0, [pc, #160]	; (80015e0 <MX_GPIO_Init+0x168>)
 800153e:	f002 fa83 	bl	8003a48 <HAL_GPIO_WritePin>

	/*Configure GPIO pins : PEPin PEPin PEPin */
	GPIO_InitStruct.Pin = KEY2_toggleRoom_Pin | KEY1_ToggleSelect_Pin
 8001542:	231c      	movs	r3, #28
 8001544:	61fb      	str	r3, [r7, #28]
			| KEY0_stopDrawUpdate_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001546:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800154a:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 800154c:	2301      	movs	r3, #1
 800154e:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001550:	f107 031c 	add.w	r3, r7, #28
 8001554:	4619      	mov	r1, r3
 8001556:	4823      	ldr	r0, [pc, #140]	; (80015e4 <MX_GPIO_Init+0x16c>)
 8001558:	f002 f8da 	bl	8003710 <HAL_GPIO_Init>

	/*Configure GPIO pin : PtPin */
	GPIO_InitStruct.Pin = KEY_ToggleWaveTable_Pin;
 800155c:	2301      	movs	r3, #1
 800155e:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001560:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001564:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001566:	2302      	movs	r3, #2
 8001568:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(KEY_ToggleWaveTable_GPIO_Port, &GPIO_InitStruct);
 800156a:	f107 031c 	add.w	r3, r7, #28
 800156e:	4619      	mov	r1, r3
 8001570:	481d      	ldr	r0, [pc, #116]	; (80015e8 <MX_GPIO_Init+0x170>)
 8001572:	f002 f8cd 	bl	8003710 <HAL_GPIO_Init>

	/*Configure GPIO pin : PtPin */
	GPIO_InitStruct.Pin = LCD_BL_Pin;
 8001576:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800157a:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800157c:	2301      	movs	r3, #1
 800157e:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001580:	2301      	movs	r3, #1
 8001582:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001584:	2302      	movs	r3, #2
 8001586:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(LCD_BL_GPIO_Port, &GPIO_InitStruct);
 8001588:	f107 031c 	add.w	r3, r7, #28
 800158c:	4619      	mov	r1, r3
 800158e:	4814      	ldr	r0, [pc, #80]	; (80015e0 <MX_GPIO_Init+0x168>)
 8001590:	f002 f8be 	bl	8003710 <HAL_GPIO_Init>

	/* EXTI interrupt init*/
	HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8001594:	2200      	movs	r2, #0
 8001596:	2100      	movs	r1, #0
 8001598:	2006      	movs	r0, #6
 800159a:	f001 fb2a 	bl	8002bf2 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 800159e:	2006      	movs	r0, #6
 80015a0:	f001 fb43 	bl	8002c2a <HAL_NVIC_EnableIRQ>

	HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 80015a4:	2200      	movs	r2, #0
 80015a6:	2100      	movs	r1, #0
 80015a8:	2008      	movs	r0, #8
 80015aa:	f001 fb22 	bl	8002bf2 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 80015ae:	2008      	movs	r0, #8
 80015b0:	f001 fb3b 	bl	8002c2a <HAL_NVIC_EnableIRQ>

	HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 80015b4:	2200      	movs	r2, #0
 80015b6:	2100      	movs	r1, #0
 80015b8:	2009      	movs	r0, #9
 80015ba:	f001 fb1a 	bl	8002bf2 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 80015be:	2009      	movs	r0, #9
 80015c0:	f001 fb33 	bl	8002c2a <HAL_NVIC_EnableIRQ>

	HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 80015c4:	2200      	movs	r2, #0
 80015c6:	2100      	movs	r1, #0
 80015c8:	200a      	movs	r0, #10
 80015ca:	f001 fb12 	bl	8002bf2 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 80015ce:	200a      	movs	r0, #10
 80015d0:	f001 fb2b 	bl	8002c2a <HAL_NVIC_EnableIRQ>
}
 80015d4:	bf00      	nop
 80015d6:	3730      	adds	r7, #48	; 0x30
 80015d8:	46bd      	mov	sp, r7
 80015da:	bd80      	pop	{r7, pc}
 80015dc:	40023800 	.word	0x40023800
 80015e0:	40020400 	.word	0x40020400
 80015e4:	40021000 	.word	0x40021000
 80015e8:	40020000 	.word	0x40020000
 80015ec:	00000000 	.word	0x00000000

080015f0 <spwm_table>:
float IMinA = 78.1;//带内最小衰减
int t_freq = 200 ;//信号采样频率
int single_freq = 300;


void spwm_table() {
 80015f0:	b580      	push	{r7, lr}
 80015f2:	b086      	sub	sp, #24
 80015f4:	af00      	add	r7, sp, #0
	for (int i = 0; i < SAMPLES; ++i) {
 80015f6:	2300      	movs	r3, #0
 80015f8:	617b      	str	r3, [r7, #20]
 80015fa:	e043      	b.n	8001684 <spwm_table+0x94>
		double angle = 2 * M_PI * i / SAMPLES; // 计算当前样本点的角度
 80015fc:	6978      	ldr	r0, [r7, #20]
 80015fe:	f7fe fff1 	bl	80005e4 <__aeabi_i2d>
 8001602:	a329      	add	r3, pc, #164	; (adr r3, 80016a8 <spwm_table+0xb8>)
 8001604:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001608:	f7ff f856 	bl	80006b8 <__aeabi_dmul>
 800160c:	4602      	mov	r2, r0
 800160e:	460b      	mov	r3, r1
 8001610:	4610      	mov	r0, r2
 8001612:	4619      	mov	r1, r3
 8001614:	f04f 0200 	mov.w	r2, #0
 8001618:	4b1f      	ldr	r3, [pc, #124]	; (8001698 <spwm_table+0xa8>)
 800161a:	f7ff f977 	bl	800090c <__aeabi_ddiv>
 800161e:	4602      	mov	r2, r0
 8001620:	460b      	mov	r3, r1
 8001622:	e9c7 2302 	strd	r2, r3, [r7, #8]
		double sine_value = cos(angle);        // 计算正弦值（范围：-1到1）
 8001626:	ed97 0b02 	vldr	d0, [r7, #8]
 800162a:	f009 f9d9 	bl	800a9e0 <cos>
 800162e:	ed87 0b00 	vstr	d0, [r7]
		pwm[i] = round((sine_value + 1.0) * (PWM_MAX / 2));
 8001632:	f04f 0200 	mov.w	r2, #0
 8001636:	4b19      	ldr	r3, [pc, #100]	; (800169c <spwm_table+0xac>)
 8001638:	e9d7 0100 	ldrd	r0, r1, [r7]
 800163c:	f7fe fe86 	bl	800034c <__adddf3>
 8001640:	4602      	mov	r2, r0
 8001642:	460b      	mov	r3, r1
 8001644:	4610      	mov	r0, r2
 8001646:	4619      	mov	r1, r3
 8001648:	f04f 0200 	mov.w	r2, #0
 800164c:	4b14      	ldr	r3, [pc, #80]	; (80016a0 <spwm_table+0xb0>)
 800164e:	f7ff f833 	bl	80006b8 <__aeabi_dmul>
 8001652:	4602      	mov	r2, r0
 8001654:	460b      	mov	r3, r1
 8001656:	ec43 2b17 	vmov	d7, r2, r3
 800165a:	eeb0 0a47 	vmov.f32	s0, s14
 800165e:	eef0 0a67 	vmov.f32	s1, s15
 8001662:	f009 fa11 	bl	800aa88 <round>
 8001666:	ec53 2b10 	vmov	r2, r3, d0
 800166a:	4610      	mov	r0, r2
 800166c:	4619      	mov	r1, r3
 800166e:	f7ff fafb 	bl	8000c68 <__aeabi_d2uiz>
 8001672:	4603      	mov	r3, r0
 8001674:	b299      	uxth	r1, r3
 8001676:	4a0b      	ldr	r2, [pc, #44]	; (80016a4 <spwm_table+0xb4>)
 8001678:	697b      	ldr	r3, [r7, #20]
 800167a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for (int i = 0; i < SAMPLES; ++i) {
 800167e:	697b      	ldr	r3, [r7, #20]
 8001680:	3301      	adds	r3, #1
 8001682:	617b      	str	r3, [r7, #20]
 8001684:	697b      	ldr	r3, [r7, #20]
 8001686:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800168a:	dbb7      	blt.n	80015fc <spwm_table+0xc>
	}
}
 800168c:	bf00      	nop
 800168e:	bf00      	nop
 8001690:	3718      	adds	r7, #24
 8001692:	46bd      	mov	sp, r7
 8001694:	bd80      	pop	{r7, pc}
 8001696:	bf00      	nop
 8001698:	408f4000 	.word	0x408f4000
 800169c:	3ff00000 	.word	0x3ff00000
 80016a0:	40490000 	.word	0x40490000
 80016a4:	20003b40 	.word	0x20003b40
 80016a8:	54442d18 	.word	0x54442d18
 80016ac:	401921fb 	.word	0x401921fb

080016b0 <generateWave>:

void generateWave(int freq) {
 80016b0:	b480      	push	{r7}
 80016b2:	b087      	sub	sp, #28
 80016b4:	af00      	add	r7, sp, #0
 80016b6:	6078      	str	r0, [r7, #4]
	const int period = SAMPLERATE / freq; // 计算一个周期的采样点数
 80016b8:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	fb92 f3f3 	sdiv	r3, r2, r3
 80016c2:	613b      	str	r3, [r7, #16]

	for (int i = 0; i < SAMPLERATE; ++i) {
 80016c4:	2300      	movs	r3, #0
 80016c6:	617b      	str	r3, [r7, #20]
 80016c8:	e026      	b.n	8001718 <generateWave+0x68>
		int pwmIndex = (i % period) * (sizeof(pwm) / sizeof(pwm[0]) - 1)
 80016ca:	697b      	ldr	r3, [r7, #20]
 80016cc:	693a      	ldr	r2, [r7, #16]
 80016ce:	fb93 f2f2 	sdiv	r2, r3, r2
 80016d2:	6939      	ldr	r1, [r7, #16]
 80016d4:	fb01 f202 	mul.w	r2, r1, r2
 80016d8:	1a9b      	subs	r3, r3, r2
 80016da:	461a      	mov	r2, r3
 80016dc:	f240 33e7 	movw	r3, #999	; 0x3e7
 80016e0:	fb03 f202 	mul.w	r2, r3, r2
				/ period; // 计算当前采样点对应的pwm索引
 80016e4:	693b      	ldr	r3, [r7, #16]
 80016e6:	fbb2 f3f3 	udiv	r3, r2, r3
		int pwmIndex = (i % period) * (sizeof(pwm) / sizeof(pwm[0]) - 1)
 80016ea:	60fb      	str	r3, [r7, #12]
		spwm[i] = pwm[pwmIndex]*4095/100;
 80016ec:	4a10      	ldr	r2, [pc, #64]	; (8001730 <generateWave+0x80>)
 80016ee:	68fb      	ldr	r3, [r7, #12]
 80016f0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80016f4:	461a      	mov	r2, r3
 80016f6:	4613      	mov	r3, r2
 80016f8:	031b      	lsls	r3, r3, #12
 80016fa:	1a9b      	subs	r3, r3, r2
 80016fc:	4a0d      	ldr	r2, [pc, #52]	; (8001734 <generateWave+0x84>)
 80016fe:	fb82 1203 	smull	r1, r2, r2, r3
 8001702:	1152      	asrs	r2, r2, #5
 8001704:	17db      	asrs	r3, r3, #31
 8001706:	1ad3      	subs	r3, r2, r3
 8001708:	b299      	uxth	r1, r3
 800170a:	4a0b      	ldr	r2, [pc, #44]	; (8001738 <generateWave+0x88>)
 800170c:	697b      	ldr	r3, [r7, #20]
 800170e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for (int i = 0; i < SAMPLERATE; ++i) {
 8001712:	697b      	ldr	r3, [r7, #20]
 8001714:	3301      	adds	r3, #1
 8001716:	617b      	str	r3, [r7, #20]
 8001718:	697b      	ldr	r3, [r7, #20]
 800171a:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800171e:	dbd4      	blt.n	80016ca <generateWave+0x1a>
	}
}
 8001720:	bf00      	nop
 8001722:	bf00      	nop
 8001724:	371c      	adds	r7, #28
 8001726:	46bd      	mov	sp, r7
 8001728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800172c:	4770      	bx	lr
 800172e:	bf00      	nop
 8001730:	20003b40 	.word	0x20003b40
 8001734:	51eb851f 	.word	0x51eb851f
 8001738:	20004310 	.word	0x20004310

0800173c <SystemClock_Config>:

void SystemClock_Config(void) {
 800173c:	b580      	push	{r7, lr}
 800173e:	b094      	sub	sp, #80	; 0x50
 8001740:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8001742:	f107 0320 	add.w	r3, r7, #32
 8001746:	2230      	movs	r2, #48	; 0x30
 8001748:	2100      	movs	r1, #0
 800174a:	4618      	mov	r0, r3
 800174c:	f004 fcd0 	bl	80060f0 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8001750:	f107 030c 	add.w	r3, r7, #12
 8001754:	2200      	movs	r2, #0
 8001756:	601a      	str	r2, [r3, #0]
 8001758:	605a      	str	r2, [r3, #4]
 800175a:	609a      	str	r2, [r3, #8]
 800175c:	60da      	str	r2, [r3, #12]
 800175e:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8001760:	2300      	movs	r3, #0
 8001762:	60bb      	str	r3, [r7, #8]
 8001764:	4b28      	ldr	r3, [pc, #160]	; (8001808 <SystemClock_Config+0xcc>)
 8001766:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001768:	4a27      	ldr	r2, [pc, #156]	; (8001808 <SystemClock_Config+0xcc>)
 800176a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800176e:	6413      	str	r3, [r2, #64]	; 0x40
 8001770:	4b25      	ldr	r3, [pc, #148]	; (8001808 <SystemClock_Config+0xcc>)
 8001772:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001774:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001778:	60bb      	str	r3, [r7, #8]
 800177a:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800177c:	2300      	movs	r3, #0
 800177e:	607b      	str	r3, [r7, #4]
 8001780:	4b22      	ldr	r3, [pc, #136]	; (800180c <SystemClock_Config+0xd0>)
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	4a21      	ldr	r2, [pc, #132]	; (800180c <SystemClock_Config+0xd0>)
 8001786:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800178a:	6013      	str	r3, [r2, #0]
 800178c:	4b1f      	ldr	r3, [pc, #124]	; (800180c <SystemClock_Config+0xd0>)
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001794:	607b      	str	r3, [r7, #4]
 8001796:	687b      	ldr	r3, [r7, #4]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001798:	2302      	movs	r3, #2
 800179a:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800179c:	2301      	movs	r3, #1
 800179e:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80017a0:	2310      	movs	r3, #16
 80017a2:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80017a4:	2302      	movs	r3, #2
 80017a6:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80017a8:	2300      	movs	r3, #0
 80017aa:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLM = 8;
 80017ac:	2308      	movs	r3, #8
 80017ae:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLN = 168;
 80017b0:	23a8      	movs	r3, #168	; 0xa8
 80017b2:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80017b4:	2302      	movs	r3, #2
 80017b6:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLQ = 4;
 80017b8:	2304      	movs	r3, #4
 80017ba:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 80017bc:	f107 0320 	add.w	r3, r7, #32
 80017c0:	4618      	mov	r0, r3
 80017c2:	f002 f97f 	bl	8003ac4 <HAL_RCC_OscConfig>
 80017c6:	4603      	mov	r3, r0
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d001      	beq.n	80017d0 <SystemClock_Config+0x94>
		Error_Handler();
 80017cc:	f7ff fe08 	bl	80013e0 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 80017d0:	230f      	movs	r3, #15
 80017d2:	60fb      	str	r3, [r7, #12]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80017d4:	2302      	movs	r3, #2
 80017d6:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80017d8:	2300      	movs	r3, #0
 80017da:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80017dc:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80017e0:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80017e2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80017e6:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK) {
 80017e8:	f107 030c 	add.w	r3, r7, #12
 80017ec:	2105      	movs	r1, #5
 80017ee:	4618      	mov	r0, r3
 80017f0:	f002 fbe0 	bl	8003fb4 <HAL_RCC_ClockConfig>
 80017f4:	4603      	mov	r3, r0
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d001      	beq.n	80017fe <SystemClock_Config+0xc2>
		Error_Handler();
 80017fa:	f7ff fdf1 	bl	80013e0 <Error_Handler>
	}
}
 80017fe:	bf00      	nop
 8001800:	3750      	adds	r7, #80	; 0x50
 8001802:	46bd      	mov	sp, r7
 8001804:	bd80      	pop	{r7, pc}
 8001806:	bf00      	nop
 8001808:	40023800 	.word	0x40023800
 800180c:	40007000 	.word	0x40007000

08001810 <main>:

int main(void) {
 8001810:	b590      	push	{r4, r7, lr}
 8001812:	b087      	sub	sp, #28
 8001814:	af02      	add	r7, sp, #8
	HAL_Init();
 8001816:	f000 fc97 	bl	8002148 <HAL_Init>
	SystemClock_Config();
 800181a:	f7ff ff8f 	bl	800173c <SystemClock_Config>
	MX_GPIO_Init();
 800181e:	f7ff fe2b 	bl	8001478 <MX_GPIO_Init>
	MX_DMA_Init();
 8001822:	f7ff fde3 	bl	80013ec <MX_DMA_Init>
	MX_ADC1_Init();
 8001826:	f7ff fc47 	bl	80010b8 <MX_ADC1_Init>
	MX_DAC_Init();
 800182a:	f7ff fd35 	bl	8001298 <MX_DAC_Init>
	MX_TIM2_Init();
 800182e:	f000 fa73 	bl	8001d18 <MX_TIM2_Init>
	MX_TIM3_Init();
 8001832:	f000 fabd 	bl	8001db0 <MX_TIM3_Init>
	MX_USART1_UART_Init();
 8001836:	f000 fb7b 	bl	8001f30 <MX_USART1_UART_Init>

	HAL_TIM_Base_Start(&htim2);
 800183a:	486d      	ldr	r0, [pc, #436]	; (80019f0 <main+0x1e0>)
 800183c:	f002 fdea 	bl	8004414 <HAL_TIM_Base_Start>
	HAL_TIM_Base_Start(&htim3);
 8001840:	486c      	ldr	r0, [pc, #432]	; (80019f4 <main+0x1e4>)
 8001842:	f002 fde7 	bl	8004414 <HAL_TIM_Base_Start>
	htim3.Instance->ARR = 84e6 / adc_fs - 1;
 8001846:	4b6c      	ldr	r3, [pc, #432]	; (80019f8 <main+0x1e8>)
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	4618      	mov	r0, r3
 800184c:	f7fe feba 	bl	80005c4 <__aeabi_ui2d>
 8001850:	4602      	mov	r2, r0
 8001852:	460b      	mov	r3, r1
 8001854:	a164      	add	r1, pc, #400	; (adr r1, 80019e8 <main+0x1d8>)
 8001856:	e9d1 0100 	ldrd	r0, r1, [r1]
 800185a:	f7ff f857 	bl	800090c <__aeabi_ddiv>
 800185e:	4602      	mov	r2, r0
 8001860:	460b      	mov	r3, r1
 8001862:	4610      	mov	r0, r2
 8001864:	4619      	mov	r1, r3
 8001866:	f04f 0200 	mov.w	r2, #0
 800186a:	4b64      	ldr	r3, [pc, #400]	; (80019fc <main+0x1ec>)
 800186c:	f7fe fd6c 	bl	8000348 <__aeabi_dsub>
 8001870:	4602      	mov	r2, r0
 8001872:	460b      	mov	r3, r1
 8001874:	495f      	ldr	r1, [pc, #380]	; (80019f4 <main+0x1e4>)
 8001876:	680c      	ldr	r4, [r1, #0]
 8001878:	4610      	mov	r0, r2
 800187a:	4619      	mov	r1, r3
 800187c:	f7ff f9f4 	bl	8000c68 <__aeabi_d2uiz>
 8001880:	4603      	mov	r3, r0
 8001882:	62e3      	str	r3, [r4, #44]	; 0x2c
	Sign_samplingOver = 0;
 8001884:	4b5e      	ldr	r3, [pc, #376]	; (8001a00 <main+0x1f0>)
 8001886:	2200      	movs	r2, #0
 8001888:	701a      	strb	r2, [r3, #0]
	spwm_table();
 800188a:	f7ff feb1 	bl	80015f0 <spwm_table>
	generateWave(200);
 800188e:	20c8      	movs	r0, #200	; 0xc8
 8001890:	f7ff ff0e 	bl	80016b0 <generateWave>
	HAL_DAC_Start_DMA(&hdac, DAC1_CHANNEL_1, (uint32_t*) spwm, 50000,
 8001894:	2300      	movs	r3, #0
 8001896:	9300      	str	r3, [sp, #0]
 8001898:	f24c 3350 	movw	r3, #50000	; 0xc350
 800189c:	4a59      	ldr	r2, [pc, #356]	; (8001a04 <main+0x1f4>)
 800189e:	2100      	movs	r1, #0
 80018a0:	4859      	ldr	r0, [pc, #356]	; (8001a08 <main+0x1f8>)
 80018a2:	f001 f9ff 	bl	8002ca4 <HAL_DAC_Start_DMA>
	DAC_ALIGN_12B_R);

	HAL_UART_Receive_IT(&TJC_UART, RxBuffer, 1); 
 80018a6:	2201      	movs	r2, #1
 80018a8:	4958      	ldr	r1, [pc, #352]	; (8001a0c <main+0x1fc>)
 80018aa:	4859      	ldr	r0, [pc, #356]	; (8001a10 <main+0x200>)
 80018ac:	f003 f92a 	bl	8004b04 <HAL_UART_Receive_IT>

	while (1) {
		char str[10];
        sprintf(str, "n0.val=%d", single_freq);
 80018b0:	4b58      	ldr	r3, [pc, #352]	; (8001a14 <main+0x204>)
 80018b2:	681a      	ldr	r2, [r3, #0]
 80018b4:	1d3b      	adds	r3, r7, #4
 80018b6:	4958      	ldr	r1, [pc, #352]	; (8001a18 <main+0x208>)
 80018b8:	4618      	mov	r0, r3
 80018ba:	f005 faa1 	bl	8006e00 <siprintf>
		tjc_send_string(str);
 80018be:	1d3b      	adds	r3, r7, #4
 80018c0:	4618      	mov	r0, r3
 80018c2:	f000 fb15 	bl	8001ef0 <tjc_send_string>

		sprintf(str, "x0.val=%d", (int)(Center_freq * 100));
 80018c6:	4b55      	ldr	r3, [pc, #340]	; (8001a1c <main+0x20c>)
 80018c8:	edd3 7a00 	vldr	s15, [r3]
 80018cc:	ed9f 7a54 	vldr	s14, [pc, #336]	; 8001a20 <main+0x210>
 80018d0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80018d4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80018d8:	1d3b      	adds	r3, r7, #4
 80018da:	ee17 2a90 	vmov	r2, s15
 80018de:	4951      	ldr	r1, [pc, #324]	; (8001a24 <main+0x214>)
 80018e0:	4618      	mov	r0, r3
 80018e2:	f005 fa8d 	bl	8006e00 <siprintf>
		tjc_send_string(str);
 80018e6:	1d3b      	adds	r3, r7, #4
 80018e8:	4618      	mov	r0, r3
 80018ea:	f000 fb01 	bl	8001ef0 <tjc_send_string>
		sprintf(str, "x1.val=%d", (int)(Bandwith * 100));
 80018ee:	4b4e      	ldr	r3, [pc, #312]	; (8001a28 <main+0x218>)
 80018f0:	edd3 7a00 	vldr	s15, [r3]
 80018f4:	ed9f 7a4a 	vldr	s14, [pc, #296]	; 8001a20 <main+0x210>
 80018f8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80018fc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001900:	1d3b      	adds	r3, r7, #4
 8001902:	ee17 2a90 	vmov	r2, s15
 8001906:	4949      	ldr	r1, [pc, #292]	; (8001a2c <main+0x21c>)
 8001908:	4618      	mov	r0, r3
 800190a:	f005 fa79 	bl	8006e00 <siprintf>
		tjc_send_string(str);
 800190e:	1d3b      	adds	r3, r7, #4
 8001910:	4618      	mov	r0, r3
 8001912:	f000 faed 	bl	8001ef0 <tjc_send_string>
	    sprintf(str, "x2.val=%d", (int)(IMinA * 100));
 8001916:	4b46      	ldr	r3, [pc, #280]	; (8001a30 <main+0x220>)
 8001918:	edd3 7a00 	vldr	s15, [r3]
 800191c:	ed9f 7a40 	vldr	s14, [pc, #256]	; 8001a20 <main+0x210>
 8001920:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001924:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001928:	1d3b      	adds	r3, r7, #4
 800192a:	ee17 2a90 	vmov	r2, s15
 800192e:	4941      	ldr	r1, [pc, #260]	; (8001a34 <main+0x224>)
 8001930:	4618      	mov	r0, r3
 8001932:	f005 fa65 	bl	8006e00 <siprintf>
		tjc_send_string(str);
 8001936:	1d3b      	adds	r3, r7, #4
 8001938:	4618      	mov	r0, r3
 800193a:	f000 fad9 	bl	8001ef0 <tjc_send_string>

	    sprintf(str, "n1.val=%d", t_freq);
 800193e:	4b3e      	ldr	r3, [pc, #248]	; (8001a38 <main+0x228>)
 8001940:	681a      	ldr	r2, [r3, #0]
 8001942:	1d3b      	adds	r3, r7, #4
 8001944:	493d      	ldr	r1, [pc, #244]	; (8001a3c <main+0x22c>)
 8001946:	4618      	mov	r0, r3
 8001948:	f005 fa5a 	bl	8006e00 <siprintf>
		tjc_send_string(str);
 800194c:	1d3b      	adds	r3, r7, #4
 800194e:	4618      	mov	r0, r3
 8001950:	f000 face 	bl	8001ef0 <tjc_send_string>


		Sign_wave_exist = 0;
 8001954:	4b3a      	ldr	r3, [pc, #232]	; (8001a40 <main+0x230>)
 8001956:	2200      	movs	r2, #0
 8001958:	701a      	strb	r2, [r3, #0]
		while (!Sign_samplingOver)
 800195a:	bf00      	nop
 800195c:	4b28      	ldr	r3, [pc, #160]	; (8001a00 <main+0x1f0>)
 800195e:	781b      	ldrb	r3, [r3, #0]
 8001960:	2b00      	cmp	r3, #0
 8001962:	d0fb      	beq.n	800195c <main+0x14c>
			;
		i_trigger = adc_trigger_size;
 8001964:	4b37      	ldr	r3, [pc, #220]	; (8001a44 <main+0x234>)
 8001966:	f44f 7208 	mov.w	r2, #544	; 0x220
 800196a:	801a      	strh	r2, [r3, #0]
		uint8_t i;
		for (i = 0; i < adc_trigger_size; i++) {
 800196c:	2300      	movs	r3, #0
 800196e:	73fb      	strb	r3, [r7, #15]
			if (adc_cache[i] < 50 && adc_cache[i + 1] > 50) {
 8001970:	7bfb      	ldrb	r3, [r7, #15]
 8001972:	4a35      	ldr	r2, [pc, #212]	; (8001a48 <main+0x238>)
 8001974:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001978:	2b31      	cmp	r3, #49	; 0x31
 800197a:	d813      	bhi.n	80019a4 <main+0x194>
 800197c:	7bfb      	ldrb	r3, [r7, #15]
 800197e:	3301      	adds	r3, #1
 8001980:	4a31      	ldr	r2, [pc, #196]	; (8001a48 <main+0x238>)
 8001982:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001986:	2b32      	cmp	r3, #50	; 0x32
 8001988:	d90c      	bls.n	80019a4 <main+0x194>
				i_trigger = i;
 800198a:	7bfb      	ldrb	r3, [r7, #15]
 800198c:	b29a      	uxth	r2, r3
 800198e:	4b2d      	ldr	r3, [pc, #180]	; (8001a44 <main+0x234>)
 8001990:	801a      	strh	r2, [r3, #0]
				Sign_wave_exist = 1;
 8001992:	4b2b      	ldr	r3, [pc, #172]	; (8001a40 <main+0x230>)
 8001994:	2201      	movs	r2, #1
 8001996:	701a      	strb	r2, [r3, #0]
				break;
 8001998:	bf00      	nop
			}
		}
		if (!Sign_wave_exist) {
 800199a:	4b29      	ldr	r3, [pc, #164]	; (8001a40 <main+0x230>)
 800199c:	781b      	ldrb	r3, [r3, #0]
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d10e      	bne.n	80019c0 <main+0x1b0>
 80019a2:	e003      	b.n	80019ac <main+0x19c>
		for (i = 0; i < adc_trigger_size; i++) {
 80019a4:	7bfb      	ldrb	r3, [r7, #15]
 80019a6:	3301      	adds	r3, #1
 80019a8:	73fb      	strb	r3, [r7, #15]
			if (adc_cache[i] < 50 && adc_cache[i + 1] > 50) {
 80019aa:	e7e1      	b.n	8001970 <main+0x160>
			Sign_samplingOver = 0;
 80019ac:	4b14      	ldr	r3, [pc, #80]	; (8001a00 <main+0x1f0>)
 80019ae:	2200      	movs	r2, #0
 80019b0:	701a      	strb	r2, [r3, #0]
			HAL_ADC_Start_DMA(&hadc1, (uint32_t*) adc_cache, adc_cache_size);
 80019b2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80019b6:	4924      	ldr	r1, [pc, #144]	; (8001a48 <main+0x238>)
 80019b8:	4824      	ldr	r0, [pc, #144]	; (8001a4c <main+0x23c>)
 80019ba:	f000 fc7b 	bl	80022b4 <HAL_ADC_Start_DMA>
 80019be:	e777      	b.n	80018b0 <main+0xa0>
			continue;
		}
		arm_cfft_f32(&arm_cfft_sR_f32_len1024, FFT_INPUT, 0, 1);
 80019c0:	2301      	movs	r3, #1
 80019c2:	2200      	movs	r2, #0
 80019c4:	4922      	ldr	r1, [pc, #136]	; (8001a50 <main+0x240>)
 80019c6:	4823      	ldr	r0, [pc, #140]	; (8001a54 <main+0x244>)
 80019c8:	f003 ff14 	bl	80057f4 <arm_cfft_f32>
		arm_cmplx_mag_f32(FFT_INPUT, FFT_OUTPUT, adc_cache_size);
 80019cc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80019d0:	4921      	ldr	r1, [pc, #132]	; (8001a58 <main+0x248>)
 80019d2:	481f      	ldr	r0, [pc, #124]	; (8001a50 <main+0x240>)
 80019d4:	f003 ff88 	bl	80058e8 <arm_cmplx_mag_f32>
		arm_max_f32(FFT_OUTPUT, adc_cache_size, &FFT_OUTPUT_MAX,
 80019d8:	4b20      	ldr	r3, [pc, #128]	; (8001a5c <main+0x24c>)
 80019da:	4a21      	ldr	r2, [pc, #132]	; (8001a60 <main+0x250>)
 80019dc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80019e0:	481d      	ldr	r0, [pc, #116]	; (8001a58 <main+0x248>)
 80019e2:	f003 fb71 	bl	80050c8 <arm_max_f32>
	while (1) {
 80019e6:	e763      	b.n	80018b0 <main+0xa0>
 80019e8:	00000000 	.word	0x00000000
 80019ec:	419406f4 	.word	0x419406f4
 80019f0:	200046fc 	.word	0x200046fc
 80019f4:	20004744 	.word	0x20004744
 80019f8:	20000000 	.word	0x20000000
 80019fc:	3ff00000 	.word	0x3ff00000
 8001a00:	20000330 	.word	0x20000330
 8001a04:	20004310 	.word	0x20004310
 8001a08:	200002bc 	.word	0x200002bc
 8001a0c:	2000478c 	.word	0x2000478c
 8001a10:	20004790 	.word	0x20004790
 8001a14:	20000014 	.word	0x20000014
 8001a18:	0800bb58 	.word	0x0800bb58
 8001a1c:	20000004 	.word	0x20000004
 8001a20:	42c80000 	.word	0x42c80000
 8001a24:	0800bb64 	.word	0x0800bb64
 8001a28:	20000008 	.word	0x20000008
 8001a2c:	0800bb70 	.word	0x0800bb70
 8001a30:	2000000c 	.word	0x2000000c
 8001a34:	0800bb7c 	.word	0x0800bb7c
 8001a38:	20000010 	.word	0x20000010
 8001a3c:	0800bb88 	.word	0x0800bb88
 8001a40:	20000331 	.word	0x20000331
 8001a44:	20000b34 	.word	0x20000b34
 8001a48:	20000334 	.word	0x20000334
 8001a4c:	20000214 	.word	0x20000214
 8001a50:	20000b38 	.word	0x20000b38
 8001a54:	0800bbb4 	.word	0x0800bbb4
 8001a58:	20002b38 	.word	0x20002b38
 8001a5c:	20003b3c 	.word	0x20003b3c
 8001a60:	20003b38 	.word	0x20003b38

08001a64 <HAL_MspInit>:
/* USER CODE END 0 */
/**
    * Initializes the Global MSP.
    */
void HAL_MspInit(void)
{
 8001a64:	b480      	push	{r7}
 8001a66:	b083      	sub	sp, #12
 8001a68:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN MspInit 0 */

    /* USER CODE END MspInit 0 */

    __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a6a:	2300      	movs	r3, #0
 8001a6c:	607b      	str	r3, [r7, #4]
 8001a6e:	4b10      	ldr	r3, [pc, #64]	; (8001ab0 <HAL_MspInit+0x4c>)
 8001a70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a72:	4a0f      	ldr	r2, [pc, #60]	; (8001ab0 <HAL_MspInit+0x4c>)
 8001a74:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001a78:	6453      	str	r3, [r2, #68]	; 0x44
 8001a7a:	4b0d      	ldr	r3, [pc, #52]	; (8001ab0 <HAL_MspInit+0x4c>)
 8001a7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a7e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001a82:	607b      	str	r3, [r7, #4]
 8001a84:	687b      	ldr	r3, [r7, #4]
    __HAL_RCC_PWR_CLK_ENABLE();
 8001a86:	2300      	movs	r3, #0
 8001a88:	603b      	str	r3, [r7, #0]
 8001a8a:	4b09      	ldr	r3, [pc, #36]	; (8001ab0 <HAL_MspInit+0x4c>)
 8001a8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a8e:	4a08      	ldr	r2, [pc, #32]	; (8001ab0 <HAL_MspInit+0x4c>)
 8001a90:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a94:	6413      	str	r3, [r2, #64]	; 0x40
 8001a96:	4b06      	ldr	r3, [pc, #24]	; (8001ab0 <HAL_MspInit+0x4c>)
 8001a98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a9a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a9e:	603b      	str	r3, [r7, #0]
 8001aa0:	683b      	ldr	r3, [r7, #0]
    /* System interrupt init*/

    /* USER CODE BEGIN MspInit 1 */

    /* USER CODE END MspInit 1 */
}
 8001aa2:	bf00      	nop
 8001aa4:	370c      	adds	r7, #12
 8001aa6:	46bd      	mov	sp, r7
 8001aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aac:	4770      	bx	lr
 8001aae:	bf00      	nop
 8001ab0:	40023800 	.word	0x40023800

08001ab4 <NMI_Handler>:
/******************************************************************************/
/**
    * @brief This function handles Non maskable interrupt.
    */
void NMI_Handler(void)
{
 8001ab4:	b480      	push	{r7}
 8001ab6:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

    /* USER CODE END NonMaskableInt_IRQn 0 */
    /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
    while (1)
 8001ab8:	e7fe      	b.n	8001ab8 <NMI_Handler+0x4>

08001aba <HardFault_Handler>:

/**
    * @brief This function handles Hard fault interrupt.
    */
void HardFault_Handler(void)
{
 8001aba:	b480      	push	{r7}
 8001abc:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN HardFault_IRQn 0 */

    /* USER CODE END HardFault_IRQn 0 */
    while (1)
 8001abe:	e7fe      	b.n	8001abe <HardFault_Handler+0x4>

08001ac0 <MemManage_Handler>:

/**
    * @brief This function handles Memory management fault.
    */
void MemManage_Handler(void)
{
 8001ac0:	b480      	push	{r7}
 8001ac2:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN MemoryManagement_IRQn 0 */

    /* USER CODE END MemoryManagement_IRQn 0 */
    while (1)
 8001ac4:	e7fe      	b.n	8001ac4 <MemManage_Handler+0x4>

08001ac6 <BusFault_Handler>:

/**
    * @brief This function handles Pre-fetch fault, memory access fault.
    */
void BusFault_Handler(void)
{
 8001ac6:	b480      	push	{r7}
 8001ac8:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN BusFault_IRQn 0 */

    /* USER CODE END BusFault_IRQn 0 */
    while (1)
 8001aca:	e7fe      	b.n	8001aca <BusFault_Handler+0x4>

08001acc <UsageFault_Handler>:

/**
    * @brief This function handles Undefined instruction or illegal state.
    */
void UsageFault_Handler(void)
{
 8001acc:	b480      	push	{r7}
 8001ace:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN UsageFault_IRQn 0 */

    /* USER CODE END UsageFault_IRQn 0 */
    while (1)
 8001ad0:	e7fe      	b.n	8001ad0 <UsageFault_Handler+0x4>

08001ad2 <SVC_Handler>:

/**
    * @brief This function handles System service call via SWI instruction.
    */
void SVC_Handler(void)
{
 8001ad2:	b480      	push	{r7}
 8001ad4:	af00      	add	r7, sp, #0

    /* USER CODE END SVCall_IRQn 0 */
    /* USER CODE BEGIN SVCall_IRQn 1 */

    /* USER CODE END SVCall_IRQn 1 */
}
 8001ad6:	bf00      	nop
 8001ad8:	46bd      	mov	sp, r7
 8001ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ade:	4770      	bx	lr

08001ae0 <DebugMon_Handler>:

/**
    * @brief This function handles Debug monitor.
    */
void DebugMon_Handler(void)
{
 8001ae0:	b480      	push	{r7}
 8001ae2:	af00      	add	r7, sp, #0

    /* USER CODE END DebugMonitor_IRQn 0 */
    /* USER CODE BEGIN DebugMonitor_IRQn 1 */

    /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001ae4:	bf00      	nop
 8001ae6:	46bd      	mov	sp, r7
 8001ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aec:	4770      	bx	lr

08001aee <PendSV_Handler>:

/**
    * @brief This function handles Pendable request for system service.
    */
void PendSV_Handler(void)
{
 8001aee:	b480      	push	{r7}
 8001af0:	af00      	add	r7, sp, #0

    /* USER CODE END PendSV_IRQn 0 */
    /* USER CODE BEGIN PendSV_IRQn 1 */

    /* USER CODE END PendSV_IRQn 1 */
}
 8001af2:	bf00      	nop
 8001af4:	46bd      	mov	sp, r7
 8001af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001afa:	4770      	bx	lr

08001afc <SysTick_Handler>:

/**
    * @brief This function handles System tick timer.
    */
void SysTick_Handler(void)
{
 8001afc:	b580      	push	{r7, lr}
 8001afe:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN SysTick_IRQn 0 */

    /* USER CODE END SysTick_IRQn 0 */
    HAL_IncTick();
 8001b00:	f000 fb74 	bl	80021ec <HAL_IncTick>
    /* USER CODE BEGIN SysTick_IRQn 1 */

    /* USER CODE END SysTick_IRQn 1 */
}
 8001b04:	bf00      	nop
 8001b06:	bd80      	pop	{r7, pc}

08001b08 <EXTI0_IRQHandler>:

/**
    * @brief This function handles EXTI line0 interrupt.
    */
void EXTI0_IRQHandler(void)
{
 8001b08:	b580      	push	{r7, lr}
 8001b0a:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN EXTI0_IRQn 0 */

    /* USER CODE END EXTI0_IRQn 0 */
    HAL_GPIO_EXTI_IRQHandler(KEY_ToggleWaveTable_Pin);
 8001b0c:	2001      	movs	r0, #1
 8001b0e:	f001 ffb5 	bl	8003a7c <HAL_GPIO_EXTI_IRQHandler>
    /* USER CODE BEGIN EXTI0_IRQn 1 */

    /* USER CODE END EXTI0_IRQn 1 */
}
 8001b12:	bf00      	nop
 8001b14:	bd80      	pop	{r7, pc}

08001b16 <EXTI2_IRQHandler>:

/**
    * @brief This function handles EXTI line2 interrupt.
    */
void EXTI2_IRQHandler(void)
{
 8001b16:	b580      	push	{r7, lr}
 8001b18:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN EXTI2_IRQn 0 */

    /* USER CODE END EXTI2_IRQn 0 */
    HAL_GPIO_EXTI_IRQHandler(KEY2_toggleRoom_Pin);
 8001b1a:	2004      	movs	r0, #4
 8001b1c:	f001 ffae 	bl	8003a7c <HAL_GPIO_EXTI_IRQHandler>
    /* USER CODE BEGIN EXTI2_IRQn 1 */

    /* USER CODE END EXTI2_IRQn 1 */
}
 8001b20:	bf00      	nop
 8001b22:	bd80      	pop	{r7, pc}

08001b24 <EXTI3_IRQHandler>:

/**
    * @brief This function handles EXTI line3 interrupt.
    */
void EXTI3_IRQHandler(void)
{
 8001b24:	b580      	push	{r7, lr}
 8001b26:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN EXTI3_IRQn 0 */

    /* USER CODE END EXTI3_IRQn 0 */
    HAL_GPIO_EXTI_IRQHandler(KEY1_ToggleSelect_Pin);
 8001b28:	2008      	movs	r0, #8
 8001b2a:	f001 ffa7 	bl	8003a7c <HAL_GPIO_EXTI_IRQHandler>
    /* USER CODE BEGIN EXTI3_IRQn 1 */

    /* USER CODE END EXTI3_IRQn 1 */
}
 8001b2e:	bf00      	nop
 8001b30:	bd80      	pop	{r7, pc}

08001b32 <EXTI4_IRQHandler>:

/**
    * @brief This function handles EXTI line4 interrupt.
    */
void EXTI4_IRQHandler(void)
{
 8001b32:	b580      	push	{r7, lr}
 8001b34:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN EXTI4_IRQn 0 */

    /* USER CODE END EXTI4_IRQn 0 */
    HAL_GPIO_EXTI_IRQHandler(KEY0_stopDrawUpdate_Pin);
 8001b36:	2010      	movs	r0, #16
 8001b38:	f001 ffa0 	bl	8003a7c <HAL_GPIO_EXTI_IRQHandler>
    /* USER CODE BEGIN EXTI4_IRQn 1 */

    /* USER CODE END EXTI4_IRQn 1 */
}
 8001b3c:	bf00      	nop
 8001b3e:	bd80      	pop	{r7, pc}

08001b40 <DMA1_Stream5_IRQHandler>:

/**
    * @brief This function handles DMA1 stream5 global interrupt.
    */
void DMA1_Stream5_IRQHandler(void)
{
 8001b40:	b580      	push	{r7, lr}
 8001b42:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

    /* USER CODE END DMA1_Stream5_IRQn 0 */
    HAL_DMA_IRQHandler(&hdma_dac1);
 8001b44:	4802      	ldr	r0, [pc, #8]	; (8001b50 <DMA1_Stream5_IRQHandler+0x10>)
 8001b46:	f001 fb79 	bl	800323c <HAL_DMA_IRQHandler>
    /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

    /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8001b4a:	bf00      	nop
 8001b4c:	bd80      	pop	{r7, pc}
 8001b4e:	bf00      	nop
 8001b50:	200002d0 	.word	0x200002d0

08001b54 <DMA2_Stream0_IRQHandler>:

/**
    * @brief This function handles DMA2 stream0 global interrupt.
    */
void DMA2_Stream0_IRQHandler(void)
{
 8001b54:	b580      	push	{r7, lr}
 8001b56:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

    /* USER CODE END DMA2_Stream0_IRQn 0 */
    HAL_DMA_IRQHandler(&hdma_adc1);
 8001b58:	4802      	ldr	r0, [pc, #8]	; (8001b64 <DMA2_Stream0_IRQHandler+0x10>)
 8001b5a:	f001 fb6f 	bl	800323c <HAL_DMA_IRQHandler>
    /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

    /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8001b5e:	bf00      	nop
 8001b60:	bd80      	pop	{r7, pc}
 8001b62:	bf00      	nop
 8001b64:	2000025c 	.word	0x2000025c

08001b68 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001b68:	b480      	push	{r7}
 8001b6a:	af00      	add	r7, sp, #0
  return 1;
 8001b6c:	2301      	movs	r3, #1
}
 8001b6e:	4618      	mov	r0, r3
 8001b70:	46bd      	mov	sp, r7
 8001b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b76:	4770      	bx	lr

08001b78 <_kill>:

int _kill(int pid, int sig)
{
 8001b78:	b580      	push	{r7, lr}
 8001b7a:	b082      	sub	sp, #8
 8001b7c:	af00      	add	r7, sp, #0
 8001b7e:	6078      	str	r0, [r7, #4]
 8001b80:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001b82:	f004 fa8b 	bl	800609c <__errno>
 8001b86:	4603      	mov	r3, r0
 8001b88:	2216      	movs	r2, #22
 8001b8a:	601a      	str	r2, [r3, #0]
  return -1;
 8001b8c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001b90:	4618      	mov	r0, r3
 8001b92:	3708      	adds	r7, #8
 8001b94:	46bd      	mov	sp, r7
 8001b96:	bd80      	pop	{r7, pc}

08001b98 <_exit>:

void _exit (int status)
{
 8001b98:	b580      	push	{r7, lr}
 8001b9a:	b082      	sub	sp, #8
 8001b9c:	af00      	add	r7, sp, #0
 8001b9e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001ba0:	f04f 31ff 	mov.w	r1, #4294967295
 8001ba4:	6878      	ldr	r0, [r7, #4]
 8001ba6:	f7ff ffe7 	bl	8001b78 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001baa:	e7fe      	b.n	8001baa <_exit+0x12>

08001bac <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001bac:	b580      	push	{r7, lr}
 8001bae:	b086      	sub	sp, #24
 8001bb0:	af00      	add	r7, sp, #0
 8001bb2:	60f8      	str	r0, [r7, #12]
 8001bb4:	60b9      	str	r1, [r7, #8]
 8001bb6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001bb8:	2300      	movs	r3, #0
 8001bba:	617b      	str	r3, [r7, #20]
 8001bbc:	e00a      	b.n	8001bd4 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001bbe:	f3af 8000 	nop.w
 8001bc2:	4601      	mov	r1, r0
 8001bc4:	68bb      	ldr	r3, [r7, #8]
 8001bc6:	1c5a      	adds	r2, r3, #1
 8001bc8:	60ba      	str	r2, [r7, #8]
 8001bca:	b2ca      	uxtb	r2, r1
 8001bcc:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001bce:	697b      	ldr	r3, [r7, #20]
 8001bd0:	3301      	adds	r3, #1
 8001bd2:	617b      	str	r3, [r7, #20]
 8001bd4:	697a      	ldr	r2, [r7, #20]
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	429a      	cmp	r2, r3
 8001bda:	dbf0      	blt.n	8001bbe <_read+0x12>
  }

  return len;
 8001bdc:	687b      	ldr	r3, [r7, #4]
}
 8001bde:	4618      	mov	r0, r3
 8001be0:	3718      	adds	r7, #24
 8001be2:	46bd      	mov	sp, r7
 8001be4:	bd80      	pop	{r7, pc}

08001be6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001be6:	b580      	push	{r7, lr}
 8001be8:	b086      	sub	sp, #24
 8001bea:	af00      	add	r7, sp, #0
 8001bec:	60f8      	str	r0, [r7, #12]
 8001bee:	60b9      	str	r1, [r7, #8]
 8001bf0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001bf2:	2300      	movs	r3, #0
 8001bf4:	617b      	str	r3, [r7, #20]
 8001bf6:	e009      	b.n	8001c0c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001bf8:	68bb      	ldr	r3, [r7, #8]
 8001bfa:	1c5a      	adds	r2, r3, #1
 8001bfc:	60ba      	str	r2, [r7, #8]
 8001bfe:	781b      	ldrb	r3, [r3, #0]
 8001c00:	4618      	mov	r0, r3
 8001c02:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c06:	697b      	ldr	r3, [r7, #20]
 8001c08:	3301      	adds	r3, #1
 8001c0a:	617b      	str	r3, [r7, #20]
 8001c0c:	697a      	ldr	r2, [r7, #20]
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	429a      	cmp	r2, r3
 8001c12:	dbf1      	blt.n	8001bf8 <_write+0x12>
  }
  return len;
 8001c14:	687b      	ldr	r3, [r7, #4]
}
 8001c16:	4618      	mov	r0, r3
 8001c18:	3718      	adds	r7, #24
 8001c1a:	46bd      	mov	sp, r7
 8001c1c:	bd80      	pop	{r7, pc}

08001c1e <_close>:

int _close(int file)
{
 8001c1e:	b480      	push	{r7}
 8001c20:	b083      	sub	sp, #12
 8001c22:	af00      	add	r7, sp, #0
 8001c24:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001c26:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001c2a:	4618      	mov	r0, r3
 8001c2c:	370c      	adds	r7, #12
 8001c2e:	46bd      	mov	sp, r7
 8001c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c34:	4770      	bx	lr

08001c36 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001c36:	b480      	push	{r7}
 8001c38:	b083      	sub	sp, #12
 8001c3a:	af00      	add	r7, sp, #0
 8001c3c:	6078      	str	r0, [r7, #4]
 8001c3e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001c40:	683b      	ldr	r3, [r7, #0]
 8001c42:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001c46:	605a      	str	r2, [r3, #4]
  return 0;
 8001c48:	2300      	movs	r3, #0
}
 8001c4a:	4618      	mov	r0, r3
 8001c4c:	370c      	adds	r7, #12
 8001c4e:	46bd      	mov	sp, r7
 8001c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c54:	4770      	bx	lr

08001c56 <_isatty>:

int _isatty(int file)
{
 8001c56:	b480      	push	{r7}
 8001c58:	b083      	sub	sp, #12
 8001c5a:	af00      	add	r7, sp, #0
 8001c5c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001c5e:	2301      	movs	r3, #1
}
 8001c60:	4618      	mov	r0, r3
 8001c62:	370c      	adds	r7, #12
 8001c64:	46bd      	mov	sp, r7
 8001c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c6a:	4770      	bx	lr

08001c6c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001c6c:	b480      	push	{r7}
 8001c6e:	b085      	sub	sp, #20
 8001c70:	af00      	add	r7, sp, #0
 8001c72:	60f8      	str	r0, [r7, #12]
 8001c74:	60b9      	str	r1, [r7, #8]
 8001c76:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001c78:	2300      	movs	r3, #0
}
 8001c7a:	4618      	mov	r0, r3
 8001c7c:	3714      	adds	r7, #20
 8001c7e:	46bd      	mov	sp, r7
 8001c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c84:	4770      	bx	lr
	...

08001c88 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001c88:	b580      	push	{r7, lr}
 8001c8a:	b086      	sub	sp, #24
 8001c8c:	af00      	add	r7, sp, #0
 8001c8e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001c90:	4a14      	ldr	r2, [pc, #80]	; (8001ce4 <_sbrk+0x5c>)
 8001c92:	4b15      	ldr	r3, [pc, #84]	; (8001ce8 <_sbrk+0x60>)
 8001c94:	1ad3      	subs	r3, r2, r3
 8001c96:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001c98:	697b      	ldr	r3, [r7, #20]
 8001c9a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001c9c:	4b13      	ldr	r3, [pc, #76]	; (8001cec <_sbrk+0x64>)
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d102      	bne.n	8001caa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001ca4:	4b11      	ldr	r3, [pc, #68]	; (8001cec <_sbrk+0x64>)
 8001ca6:	4a12      	ldr	r2, [pc, #72]	; (8001cf0 <_sbrk+0x68>)
 8001ca8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001caa:	4b10      	ldr	r3, [pc, #64]	; (8001cec <_sbrk+0x64>)
 8001cac:	681a      	ldr	r2, [r3, #0]
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	4413      	add	r3, r2
 8001cb2:	693a      	ldr	r2, [r7, #16]
 8001cb4:	429a      	cmp	r2, r3
 8001cb6:	d207      	bcs.n	8001cc8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001cb8:	f004 f9f0 	bl	800609c <__errno>
 8001cbc:	4603      	mov	r3, r0
 8001cbe:	220c      	movs	r2, #12
 8001cc0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001cc2:	f04f 33ff 	mov.w	r3, #4294967295
 8001cc6:	e009      	b.n	8001cdc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001cc8:	4b08      	ldr	r3, [pc, #32]	; (8001cec <_sbrk+0x64>)
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001cce:	4b07      	ldr	r3, [pc, #28]	; (8001cec <_sbrk+0x64>)
 8001cd0:	681a      	ldr	r2, [r3, #0]
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	4413      	add	r3, r2
 8001cd6:	4a05      	ldr	r2, [pc, #20]	; (8001cec <_sbrk+0x64>)
 8001cd8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001cda:	68fb      	ldr	r3, [r7, #12]
}
 8001cdc:	4618      	mov	r0, r3
 8001cde:	3718      	adds	r7, #24
 8001ce0:	46bd      	mov	sp, r7
 8001ce2:	bd80      	pop	{r7, pc}
 8001ce4:	20020000 	.word	0x20020000
 8001ce8:	00000400 	.word	0x00000400
 8001cec:	200046f8 	.word	0x200046f8
 8001cf0:	200048a8 	.word	0x200048a8

08001cf4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001cf4:	b480      	push	{r7}
 8001cf6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001cf8:	4b06      	ldr	r3, [pc, #24]	; (8001d14 <SystemInit+0x20>)
 8001cfa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001cfe:	4a05      	ldr	r2, [pc, #20]	; (8001d14 <SystemInit+0x20>)
 8001d00:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001d04:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001d08:	bf00      	nop
 8001d0a:	46bd      	mov	sp, r7
 8001d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d10:	4770      	bx	lr
 8001d12:	bf00      	nop
 8001d14:	e000ed00 	.word	0xe000ed00

08001d18 <MX_TIM2_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim3;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001d18:	b580      	push	{r7, lr}
 8001d1a:	b086      	sub	sp, #24
 8001d1c:	af00      	add	r7, sp, #0

    /* USER CODE BEGIN TIM2_Init 0 */

    /* USER CODE END TIM2_Init 0 */

    TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001d1e:	f107 0308 	add.w	r3, r7, #8
 8001d22:	2200      	movs	r2, #0
 8001d24:	601a      	str	r2, [r3, #0]
 8001d26:	605a      	str	r2, [r3, #4]
 8001d28:	609a      	str	r2, [r3, #8]
 8001d2a:	60da      	str	r2, [r3, #12]
    TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001d2c:	463b      	mov	r3, r7
 8001d2e:	2200      	movs	r2, #0
 8001d30:	601a      	str	r2, [r3, #0]
 8001d32:	605a      	str	r2, [r3, #4]

    /* USER CODE BEGIN TIM2_Init 1 */

    /* USER CODE END TIM2_Init 1 */
    htim2.Instance = TIM2;
 8001d34:	4b1d      	ldr	r3, [pc, #116]	; (8001dac <MX_TIM2_Init+0x94>)
 8001d36:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001d3a:	601a      	str	r2, [r3, #0]
    htim2.Init.Prescaler = 0;
 8001d3c:	4b1b      	ldr	r3, [pc, #108]	; (8001dac <MX_TIM2_Init+0x94>)
 8001d3e:	2200      	movs	r2, #0
 8001d40:	605a      	str	r2, [r3, #4]
    htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d42:	4b1a      	ldr	r3, [pc, #104]	; (8001dac <MX_TIM2_Init+0x94>)
 8001d44:	2200      	movs	r2, #0
 8001d46:	609a      	str	r2, [r3, #8]
    htim2.Init.Period = 840-1;
 8001d48:	4b18      	ldr	r3, [pc, #96]	; (8001dac <MX_TIM2_Init+0x94>)
 8001d4a:	f240 3247 	movw	r2, #839	; 0x347
 8001d4e:	60da      	str	r2, [r3, #12]
    htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001d50:	4b16      	ldr	r3, [pc, #88]	; (8001dac <MX_TIM2_Init+0x94>)
 8001d52:	2200      	movs	r2, #0
 8001d54:	611a      	str	r2, [r3, #16]
    htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001d56:	4b15      	ldr	r3, [pc, #84]	; (8001dac <MX_TIM2_Init+0x94>)
 8001d58:	2280      	movs	r2, #128	; 0x80
 8001d5a:	619a      	str	r2, [r3, #24]
    if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001d5c:	4813      	ldr	r0, [pc, #76]	; (8001dac <MX_TIM2_Init+0x94>)
 8001d5e:	f002 fb09 	bl	8004374 <HAL_TIM_Base_Init>
 8001d62:	4603      	mov	r3, r0
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d001      	beq.n	8001d6c <MX_TIM2_Init+0x54>
    {
        Error_Handler();
 8001d68:	f7ff fb3a 	bl	80013e0 <Error_Handler>
    }
    sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001d6c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001d70:	60bb      	str	r3, [r7, #8]
    if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001d72:	f107 0308 	add.w	r3, r7, #8
 8001d76:	4619      	mov	r1, r3
 8001d78:	480c      	ldr	r0, [pc, #48]	; (8001dac <MX_TIM2_Init+0x94>)
 8001d7a:	f002 fbb3 	bl	80044e4 <HAL_TIM_ConfigClockSource>
 8001d7e:	4603      	mov	r3, r0
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d001      	beq.n	8001d88 <MX_TIM2_Init+0x70>
    {
        Error_Handler();
 8001d84:	f7ff fb2c 	bl	80013e0 <Error_Handler>
    }
    sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001d88:	2320      	movs	r3, #32
 8001d8a:	603b      	str	r3, [r7, #0]
    sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001d8c:	2300      	movs	r3, #0
 8001d8e:	607b      	str	r3, [r7, #4]
    if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001d90:	463b      	mov	r3, r7
 8001d92:	4619      	mov	r1, r3
 8001d94:	4805      	ldr	r0, [pc, #20]	; (8001dac <MX_TIM2_Init+0x94>)
 8001d96:	f002 fda7 	bl	80048e8 <HAL_TIMEx_MasterConfigSynchronization>
 8001d9a:	4603      	mov	r3, r0
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d001      	beq.n	8001da4 <MX_TIM2_Init+0x8c>
    {
        Error_Handler();
 8001da0:	f7ff fb1e 	bl	80013e0 <Error_Handler>
    }
    /* USER CODE BEGIN TIM2_Init 2 */

    /* USER CODE END TIM2_Init 2 */

}
 8001da4:	bf00      	nop
 8001da6:	3718      	adds	r7, #24
 8001da8:	46bd      	mov	sp, r7
 8001daa:	bd80      	pop	{r7, pc}
 8001dac:	200046fc 	.word	0x200046fc

08001db0 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001db0:	b580      	push	{r7, lr}
 8001db2:	b086      	sub	sp, #24
 8001db4:	af00      	add	r7, sp, #0

    /* USER CODE BEGIN TIM3_Init 0 */

    /* USER CODE END TIM3_Init 0 */

    TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001db6:	f107 0308 	add.w	r3, r7, #8
 8001dba:	2200      	movs	r2, #0
 8001dbc:	601a      	str	r2, [r3, #0]
 8001dbe:	605a      	str	r2, [r3, #4]
 8001dc0:	609a      	str	r2, [r3, #8]
 8001dc2:	60da      	str	r2, [r3, #12]
    TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001dc4:	463b      	mov	r3, r7
 8001dc6:	2200      	movs	r2, #0
 8001dc8:	601a      	str	r2, [r3, #0]
 8001dca:	605a      	str	r2, [r3, #4]

    /* USER CODE BEGIN TIM3_Init 1 */

    /* USER CODE END TIM3_Init 1 */
    htim3.Instance = TIM3;
 8001dcc:	4b1d      	ldr	r3, [pc, #116]	; (8001e44 <MX_TIM3_Init+0x94>)
 8001dce:	4a1e      	ldr	r2, [pc, #120]	; (8001e48 <MX_TIM3_Init+0x98>)
 8001dd0:	601a      	str	r2, [r3, #0]
    htim3.Init.Prescaler = 0;
 8001dd2:	4b1c      	ldr	r3, [pc, #112]	; (8001e44 <MX_TIM3_Init+0x94>)
 8001dd4:	2200      	movs	r2, #0
 8001dd6:	605a      	str	r2, [r3, #4]
    htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001dd8:	4b1a      	ldr	r3, [pc, #104]	; (8001e44 <MX_TIM3_Init+0x94>)
 8001dda:	2200      	movs	r2, #0
 8001ddc:	609a      	str	r2, [r3, #8]
    htim3.Init.Period = 2100-1;
 8001dde:	4b19      	ldr	r3, [pc, #100]	; (8001e44 <MX_TIM3_Init+0x94>)
 8001de0:	f640 0233 	movw	r2, #2099	; 0x833
 8001de4:	60da      	str	r2, [r3, #12]
    htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001de6:	4b17      	ldr	r3, [pc, #92]	; (8001e44 <MX_TIM3_Init+0x94>)
 8001de8:	2200      	movs	r2, #0
 8001dea:	611a      	str	r2, [r3, #16]
    htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001dec:	4b15      	ldr	r3, [pc, #84]	; (8001e44 <MX_TIM3_Init+0x94>)
 8001dee:	2280      	movs	r2, #128	; 0x80
 8001df0:	619a      	str	r2, [r3, #24]
    if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001df2:	4814      	ldr	r0, [pc, #80]	; (8001e44 <MX_TIM3_Init+0x94>)
 8001df4:	f002 fabe 	bl	8004374 <HAL_TIM_Base_Init>
 8001df8:	4603      	mov	r3, r0
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d001      	beq.n	8001e02 <MX_TIM3_Init+0x52>
    {
        Error_Handler();
 8001dfe:	f7ff faef 	bl	80013e0 <Error_Handler>
    }
    sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001e02:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001e06:	60bb      	str	r3, [r7, #8]
    if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001e08:	f107 0308 	add.w	r3, r7, #8
 8001e0c:	4619      	mov	r1, r3
 8001e0e:	480d      	ldr	r0, [pc, #52]	; (8001e44 <MX_TIM3_Init+0x94>)
 8001e10:	f002 fb68 	bl	80044e4 <HAL_TIM_ConfigClockSource>
 8001e14:	4603      	mov	r3, r0
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d001      	beq.n	8001e1e <MX_TIM3_Init+0x6e>
    {
        Error_Handler();
 8001e1a:	f7ff fae1 	bl	80013e0 <Error_Handler>
    }
    sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001e1e:	2320      	movs	r3, #32
 8001e20:	603b      	str	r3, [r7, #0]
    sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001e22:	2300      	movs	r3, #0
 8001e24:	607b      	str	r3, [r7, #4]
    if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001e26:	463b      	mov	r3, r7
 8001e28:	4619      	mov	r1, r3
 8001e2a:	4806      	ldr	r0, [pc, #24]	; (8001e44 <MX_TIM3_Init+0x94>)
 8001e2c:	f002 fd5c 	bl	80048e8 <HAL_TIMEx_MasterConfigSynchronization>
 8001e30:	4603      	mov	r3, r0
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d001      	beq.n	8001e3a <MX_TIM3_Init+0x8a>
    {
        Error_Handler();
 8001e36:	f7ff fad3 	bl	80013e0 <Error_Handler>
    }
    /* USER CODE BEGIN TIM3_Init 2 */

    /* USER CODE END TIM3_Init 2 */

}
 8001e3a:	bf00      	nop
 8001e3c:	3718      	adds	r7, #24
 8001e3e:	46bd      	mov	sp, r7
 8001e40:	bd80      	pop	{r7, pc}
 8001e42:	bf00      	nop
 8001e44:	20004744 	.word	0x20004744
 8001e48:	40000400 	.word	0x40000400

08001e4c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001e4c:	b480      	push	{r7}
 8001e4e:	b085      	sub	sp, #20
 8001e50:	af00      	add	r7, sp, #0
 8001e52:	6078      	str	r0, [r7, #4]

    if(tim_baseHandle->Instance==TIM2)
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001e5c:	d10e      	bne.n	8001e7c <HAL_TIM_Base_MspInit+0x30>
    {
    /* USER CODE BEGIN TIM2_MspInit 0 */

    /* USER CODE END TIM2_MspInit 0 */
        /* TIM2 clock enable */
        __HAL_RCC_TIM2_CLK_ENABLE();
 8001e5e:	2300      	movs	r3, #0
 8001e60:	60fb      	str	r3, [r7, #12]
 8001e62:	4b13      	ldr	r3, [pc, #76]	; (8001eb0 <HAL_TIM_Base_MspInit+0x64>)
 8001e64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e66:	4a12      	ldr	r2, [pc, #72]	; (8001eb0 <HAL_TIM_Base_MspInit+0x64>)
 8001e68:	f043 0301 	orr.w	r3, r3, #1
 8001e6c:	6413      	str	r3, [r2, #64]	; 0x40
 8001e6e:	4b10      	ldr	r3, [pc, #64]	; (8001eb0 <HAL_TIM_Base_MspInit+0x64>)
 8001e70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e72:	f003 0301 	and.w	r3, r3, #1
 8001e76:	60fb      	str	r3, [r7, #12]
 8001e78:	68fb      	ldr	r3, [r7, #12]
        __HAL_RCC_TIM3_CLK_ENABLE();
    /* USER CODE BEGIN TIM3_MspInit 1 */

    /* USER CODE END TIM3_MspInit 1 */
    }
}
 8001e7a:	e012      	b.n	8001ea2 <HAL_TIM_Base_MspInit+0x56>
    else if(tim_baseHandle->Instance==TIM3)
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	4a0c      	ldr	r2, [pc, #48]	; (8001eb4 <HAL_TIM_Base_MspInit+0x68>)
 8001e82:	4293      	cmp	r3, r2
 8001e84:	d10d      	bne.n	8001ea2 <HAL_TIM_Base_MspInit+0x56>
        __HAL_RCC_TIM3_CLK_ENABLE();
 8001e86:	2300      	movs	r3, #0
 8001e88:	60bb      	str	r3, [r7, #8]
 8001e8a:	4b09      	ldr	r3, [pc, #36]	; (8001eb0 <HAL_TIM_Base_MspInit+0x64>)
 8001e8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e8e:	4a08      	ldr	r2, [pc, #32]	; (8001eb0 <HAL_TIM_Base_MspInit+0x64>)
 8001e90:	f043 0302 	orr.w	r3, r3, #2
 8001e94:	6413      	str	r3, [r2, #64]	; 0x40
 8001e96:	4b06      	ldr	r3, [pc, #24]	; (8001eb0 <HAL_TIM_Base_MspInit+0x64>)
 8001e98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e9a:	f003 0302 	and.w	r3, r3, #2
 8001e9e:	60bb      	str	r3, [r7, #8]
 8001ea0:	68bb      	ldr	r3, [r7, #8]
}
 8001ea2:	bf00      	nop
 8001ea4:	3714      	adds	r7, #20
 8001ea6:	46bd      	mov	sp, r7
 8001ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eac:	4770      	bx	lr
 8001eae:	bf00      	nop
 8001eb0:	40023800 	.word	0x40023800
 8001eb4:	40000400 	.word	0x40000400

08001eb8 <uart_send_char>:
 ���ܣ�    	���ڷ��͵����ַ�
 ���������		Ҫ���͵ĵ����ַ�
 ����ֵ�� 		��
 �޸ļ�¼��
 **********************************************************/
void uart_send_char(char ch) {
 8001eb8:	b580      	push	{r7, lr}
 8001eba:	b084      	sub	sp, #16
 8001ebc:	af00      	add	r7, sp, #0
 8001ebe:	4603      	mov	r3, r0
 8001ec0:	71fb      	strb	r3, [r7, #7]
	uint8_t ch2 = (uint8_t) ch;
 8001ec2:	79fb      	ldrb	r3, [r7, #7]
 8001ec4:	73fb      	strb	r3, [r7, #15]
	// ������0æ��ʱ��ȴ�����æ��ʱ���ٷ��ʹ��������ַ�
//    while (__HAL_UART_GET_FLAG(&TJC_UART, UART_FLAG_TXE) == RESET)
	; // �ȴ��������
	while (__HAL_UART_GET_FLAG(&TJC_UART, UART_FLAG_TC) == RESET)
 8001ec6:	bf00      	nop
 8001ec8:	4b08      	ldr	r3, [pc, #32]	; (8001eec <uart_send_char+0x34>)
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001ed2:	2b40      	cmp	r3, #64	; 0x40
 8001ed4:	d1f8      	bne.n	8001ec8 <uart_send_char+0x10>
		;
	// ���͵����ַ�
	HAL_UART_Transmit_IT(&TJC_UART, &ch2, 1);
 8001ed6:	f107 030f 	add.w	r3, r7, #15
 8001eda:	2201      	movs	r2, #1
 8001edc:	4619      	mov	r1, r3
 8001ede:	4803      	ldr	r0, [pc, #12]	; (8001eec <uart_send_char+0x34>)
 8001ee0:	f002 fdcb 	bl	8004a7a <HAL_UART_Transmit_IT>
	return;
 8001ee4:	bf00      	nop
}
 8001ee6:	3710      	adds	r7, #16
 8001ee8:	46bd      	mov	sp, r7
 8001eea:	bd80      	pop	{r7, pc}
 8001eec:	20004790 	.word	0x20004790

08001ef0 <tjc_send_string>:
 ���������		Ҫ���͵��ַ���
 ����ֵ�� 		��
 ʾ��:			tjc_send_val("n0", "val", 100); ���������ݾ��� n0.val=100
 �޸ļ�¼��
 **********************************************************/
void tjc_send_string(char *str) {
 8001ef0:	b580      	push	{r7, lr}
 8001ef2:	b082      	sub	sp, #8
 8001ef4:	af00      	add	r7, sp, #0
 8001ef6:	6078      	str	r0, [r7, #4]
	// ��ǰ�ַ�����ַ���ڽ�β ���� �ַ����׵�ַ��Ϊ��
	while (*str != 0 && str != 0) {
 8001ef8:	e006      	b.n	8001f08 <tjc_send_string+0x18>
		// �����ַ����׵�ַ�е��ַ��������ڷ������֮���׵�ַ����
		uart_send_char(*str++);
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	1c5a      	adds	r2, r3, #1
 8001efe:	607a      	str	r2, [r7, #4]
 8001f00:	781b      	ldrb	r3, [r3, #0]
 8001f02:	4618      	mov	r0, r3
 8001f04:	f7ff ffd8 	bl	8001eb8 <uart_send_char>
	while (*str != 0 && str != 0) {
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	781b      	ldrb	r3, [r3, #0]
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d002      	beq.n	8001f16 <tjc_send_string+0x26>
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d1f1      	bne.n	8001efa <tjc_send_string+0xa>
	}
	uart_send_char(0xff);
 8001f16:	20ff      	movs	r0, #255	; 0xff
 8001f18:	f7ff ffce 	bl	8001eb8 <uart_send_char>
	uart_send_char(0xff);
 8001f1c:	20ff      	movs	r0, #255	; 0xff
 8001f1e:	f7ff ffcb 	bl	8001eb8 <uart_send_char>
	uart_send_char(0xff);
 8001f22:	20ff      	movs	r0, #255	; 0xff
 8001f24:	f7ff ffc8 	bl	8001eb8 <uart_send_char>
	return;
 8001f28:	bf00      	nop
}
 8001f2a:	3708      	adds	r7, #8
 8001f2c:	46bd      	mov	sp, r7
 8001f2e:	bd80      	pop	{r7, pc}

08001f30 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_tx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001f30:	b580      	push	{r7, lr}
 8001f32:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001f34:	4b11      	ldr	r3, [pc, #68]	; (8001f7c <MX_USART1_UART_Init+0x4c>)
 8001f36:	4a12      	ldr	r2, [pc, #72]	; (8001f80 <MX_USART1_UART_Init+0x50>)
 8001f38:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001f3a:	4b10      	ldr	r3, [pc, #64]	; (8001f7c <MX_USART1_UART_Init+0x4c>)
 8001f3c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001f40:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001f42:	4b0e      	ldr	r3, [pc, #56]	; (8001f7c <MX_USART1_UART_Init+0x4c>)
 8001f44:	2200      	movs	r2, #0
 8001f46:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001f48:	4b0c      	ldr	r3, [pc, #48]	; (8001f7c <MX_USART1_UART_Init+0x4c>)
 8001f4a:	2200      	movs	r2, #0
 8001f4c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001f4e:	4b0b      	ldr	r3, [pc, #44]	; (8001f7c <MX_USART1_UART_Init+0x4c>)
 8001f50:	2200      	movs	r2, #0
 8001f52:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001f54:	4b09      	ldr	r3, [pc, #36]	; (8001f7c <MX_USART1_UART_Init+0x4c>)
 8001f56:	220c      	movs	r2, #12
 8001f58:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001f5a:	4b08      	ldr	r3, [pc, #32]	; (8001f7c <MX_USART1_UART_Init+0x4c>)
 8001f5c:	2200      	movs	r2, #0
 8001f5e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001f60:	4b06      	ldr	r3, [pc, #24]	; (8001f7c <MX_USART1_UART_Init+0x4c>)
 8001f62:	2200      	movs	r2, #0
 8001f64:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001f66:	4805      	ldr	r0, [pc, #20]	; (8001f7c <MX_USART1_UART_Init+0x4c>)
 8001f68:	f002 fd3a 	bl	80049e0 <HAL_UART_Init>
 8001f6c:	4603      	mov	r3, r0
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d001      	beq.n	8001f76 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001f72:	f7ff fa35 	bl	80013e0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001f76:	bf00      	nop
 8001f78:	bd80      	pop	{r7, pc}
 8001f7a:	bf00      	nop
 8001f7c:	20004790 	.word	0x20004790
 8001f80:	40011000 	.word	0x40011000

08001f84 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001f84:	b580      	push	{r7, lr}
 8001f86:	b08a      	sub	sp, #40	; 0x28
 8001f88:	af00      	add	r7, sp, #0
 8001f8a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f8c:	f107 0314 	add.w	r3, r7, #20
 8001f90:	2200      	movs	r2, #0
 8001f92:	601a      	str	r2, [r3, #0]
 8001f94:	605a      	str	r2, [r3, #4]
 8001f96:	609a      	str	r2, [r3, #8]
 8001f98:	60da      	str	r2, [r3, #12]
 8001f9a:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	4a4d      	ldr	r2, [pc, #308]	; (80020d8 <HAL_UART_MspInit+0x154>)
 8001fa2:	4293      	cmp	r3, r2
 8001fa4:	f040 8093 	bne.w	80020ce <HAL_UART_MspInit+0x14a>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001fa8:	2300      	movs	r3, #0
 8001faa:	613b      	str	r3, [r7, #16]
 8001fac:	4b4b      	ldr	r3, [pc, #300]	; (80020dc <HAL_UART_MspInit+0x158>)
 8001fae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fb0:	4a4a      	ldr	r2, [pc, #296]	; (80020dc <HAL_UART_MspInit+0x158>)
 8001fb2:	f043 0310 	orr.w	r3, r3, #16
 8001fb6:	6453      	str	r3, [r2, #68]	; 0x44
 8001fb8:	4b48      	ldr	r3, [pc, #288]	; (80020dc <HAL_UART_MspInit+0x158>)
 8001fba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fbc:	f003 0310 	and.w	r3, r3, #16
 8001fc0:	613b      	str	r3, [r7, #16]
 8001fc2:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001fc4:	2300      	movs	r3, #0
 8001fc6:	60fb      	str	r3, [r7, #12]
 8001fc8:	4b44      	ldr	r3, [pc, #272]	; (80020dc <HAL_UART_MspInit+0x158>)
 8001fca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fcc:	4a43      	ldr	r2, [pc, #268]	; (80020dc <HAL_UART_MspInit+0x158>)
 8001fce:	f043 0301 	orr.w	r3, r3, #1
 8001fd2:	6313      	str	r3, [r2, #48]	; 0x30
 8001fd4:	4b41      	ldr	r3, [pc, #260]	; (80020dc <HAL_UART_MspInit+0x158>)
 8001fd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fd8:	f003 0301 	and.w	r3, r3, #1
 8001fdc:	60fb      	str	r3, [r7, #12]
 8001fde:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001fe0:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001fe4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fe6:	2302      	movs	r3, #2
 8001fe8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fea:	2300      	movs	r3, #0
 8001fec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001fee:	2303      	movs	r3, #3
 8001ff0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001ff2:	2307      	movs	r3, #7
 8001ff4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ff6:	f107 0314 	add.w	r3, r7, #20
 8001ffa:	4619      	mov	r1, r3
 8001ffc:	4838      	ldr	r0, [pc, #224]	; (80020e0 <HAL_UART_MspInit+0x15c>)
 8001ffe:	f001 fb87 	bl	8003710 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream2;
 8002002:	4b38      	ldr	r3, [pc, #224]	; (80020e4 <HAL_UART_MspInit+0x160>)
 8002004:	4a38      	ldr	r2, [pc, #224]	; (80020e8 <HAL_UART_MspInit+0x164>)
 8002006:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 8002008:	4b36      	ldr	r3, [pc, #216]	; (80020e4 <HAL_UART_MspInit+0x160>)
 800200a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800200e:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002010:	4b34      	ldr	r3, [pc, #208]	; (80020e4 <HAL_UART_MspInit+0x160>)
 8002012:	2200      	movs	r2, #0
 8002014:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002016:	4b33      	ldr	r3, [pc, #204]	; (80020e4 <HAL_UART_MspInit+0x160>)
 8002018:	2200      	movs	r2, #0
 800201a:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800201c:	4b31      	ldr	r3, [pc, #196]	; (80020e4 <HAL_UART_MspInit+0x160>)
 800201e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002022:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002024:	4b2f      	ldr	r3, [pc, #188]	; (80020e4 <HAL_UART_MspInit+0x160>)
 8002026:	2200      	movs	r2, #0
 8002028:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800202a:	4b2e      	ldr	r3, [pc, #184]	; (80020e4 <HAL_UART_MspInit+0x160>)
 800202c:	2200      	movs	r2, #0
 800202e:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8002030:	4b2c      	ldr	r3, [pc, #176]	; (80020e4 <HAL_UART_MspInit+0x160>)
 8002032:	2200      	movs	r2, #0
 8002034:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8002036:	4b2b      	ldr	r3, [pc, #172]	; (80020e4 <HAL_UART_MspInit+0x160>)
 8002038:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800203c:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800203e:	4b29      	ldr	r3, [pc, #164]	; (80020e4 <HAL_UART_MspInit+0x160>)
 8002040:	2200      	movs	r2, #0
 8002042:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8002044:	4827      	ldr	r0, [pc, #156]	; (80020e4 <HAL_UART_MspInit+0x160>)
 8002046:	f000 fff3 	bl	8003030 <HAL_DMA_Init>
 800204a:	4603      	mov	r3, r0
 800204c:	2b00      	cmp	r3, #0
 800204e:	d001      	beq.n	8002054 <HAL_UART_MspInit+0xd0>
    {
      Error_Handler();
 8002050:	f7ff f9c6 	bl	80013e0 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	4a23      	ldr	r2, [pc, #140]	; (80020e4 <HAL_UART_MspInit+0x160>)
 8002058:	639a      	str	r2, [r3, #56]	; 0x38
 800205a:	4a22      	ldr	r2, [pc, #136]	; (80020e4 <HAL_UART_MspInit+0x160>)
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA2_Stream7;
 8002060:	4b22      	ldr	r3, [pc, #136]	; (80020ec <HAL_UART_MspInit+0x168>)
 8002062:	4a23      	ldr	r2, [pc, #140]	; (80020f0 <HAL_UART_MspInit+0x16c>)
 8002064:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Channel = DMA_CHANNEL_4;
 8002066:	4b21      	ldr	r3, [pc, #132]	; (80020ec <HAL_UART_MspInit+0x168>)
 8002068:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800206c:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800206e:	4b1f      	ldr	r3, [pc, #124]	; (80020ec <HAL_UART_MspInit+0x168>)
 8002070:	2240      	movs	r2, #64	; 0x40
 8002072:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002074:	4b1d      	ldr	r3, [pc, #116]	; (80020ec <HAL_UART_MspInit+0x168>)
 8002076:	2200      	movs	r2, #0
 8002078:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800207a:	4b1c      	ldr	r3, [pc, #112]	; (80020ec <HAL_UART_MspInit+0x168>)
 800207c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002080:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002082:	4b1a      	ldr	r3, [pc, #104]	; (80020ec <HAL_UART_MspInit+0x168>)
 8002084:	2200      	movs	r2, #0
 8002086:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002088:	4b18      	ldr	r3, [pc, #96]	; (80020ec <HAL_UART_MspInit+0x168>)
 800208a:	2200      	movs	r2, #0
 800208c:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 800208e:	4b17      	ldr	r3, [pc, #92]	; (80020ec <HAL_UART_MspInit+0x168>)
 8002090:	2200      	movs	r2, #0
 8002092:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_HIGH;
 8002094:	4b15      	ldr	r3, [pc, #84]	; (80020ec <HAL_UART_MspInit+0x168>)
 8002096:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800209a:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800209c:	4b13      	ldr	r3, [pc, #76]	; (80020ec <HAL_UART_MspInit+0x168>)
 800209e:	2200      	movs	r2, #0
 80020a0:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 80020a2:	4812      	ldr	r0, [pc, #72]	; (80020ec <HAL_UART_MspInit+0x168>)
 80020a4:	f000 ffc4 	bl	8003030 <HAL_DMA_Init>
 80020a8:	4603      	mov	r3, r0
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d001      	beq.n	80020b2 <HAL_UART_MspInit+0x12e>
    {
      Error_Handler();
 80020ae:	f7ff f997 	bl	80013e0 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	4a0d      	ldr	r2, [pc, #52]	; (80020ec <HAL_UART_MspInit+0x168>)
 80020b6:	635a      	str	r2, [r3, #52]	; 0x34
 80020b8:	4a0c      	ldr	r2, [pc, #48]	; (80020ec <HAL_UART_MspInit+0x168>)
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80020be:	2200      	movs	r2, #0
 80020c0:	2100      	movs	r1, #0
 80020c2:	2025      	movs	r0, #37	; 0x25
 80020c4:	f000 fd95 	bl	8002bf2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80020c8:	2025      	movs	r0, #37	; 0x25
 80020ca:	f000 fdae 	bl	8002c2a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 80020ce:	bf00      	nop
 80020d0:	3728      	adds	r7, #40	; 0x28
 80020d2:	46bd      	mov	sp, r7
 80020d4:	bd80      	pop	{r7, pc}
 80020d6:	bf00      	nop
 80020d8:	40011000 	.word	0x40011000
 80020dc:	40023800 	.word	0x40023800
 80020e0:	40020000 	.word	0x40020000
 80020e4:	200047d4 	.word	0x200047d4
 80020e8:	40026440 	.word	0x40026440
 80020ec:	20004834 	.word	0x20004834
 80020f0:	400264b8 	.word	0x400264b8

080020f4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80020f4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800212c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80020f8:	480d      	ldr	r0, [pc, #52]	; (8002130 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80020fa:	490e      	ldr	r1, [pc, #56]	; (8002134 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80020fc:	4a0e      	ldr	r2, [pc, #56]	; (8002138 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80020fe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002100:	e002      	b.n	8002108 <LoopCopyDataInit>

08002102 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002102:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002104:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002106:	3304      	adds	r3, #4

08002108 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002108:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800210a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800210c:	d3f9      	bcc.n	8002102 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800210e:	4a0b      	ldr	r2, [pc, #44]	; (800213c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002110:	4c0b      	ldr	r4, [pc, #44]	; (8002140 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002112:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002114:	e001      	b.n	800211a <LoopFillZerobss>

08002116 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002116:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002118:	3204      	adds	r2, #4

0800211a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800211a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800211c:	d3fb      	bcc.n	8002116 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800211e:	f7ff fde9 	bl	8001cf4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002122:	f003 ffc1 	bl	80060a8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002126:	f7ff fb73 	bl	8001810 <main>
  bx  lr    
 800212a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800212c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002130:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002134:	200001f8 	.word	0x200001f8
  ldr r2, =_sidata
 8002138:	0800f068 	.word	0x0800f068
  ldr r2, =_sbss
 800213c:	200001f8 	.word	0x200001f8
  ldr r4, =_ebss
 8002140:	200048a8 	.word	0x200048a8

08002144 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002144:	e7fe      	b.n	8002144 <ADC_IRQHandler>
	...

08002148 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002148:	b580      	push	{r7, lr}
 800214a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800214c:	4b0e      	ldr	r3, [pc, #56]	; (8002188 <HAL_Init+0x40>)
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	4a0d      	ldr	r2, [pc, #52]	; (8002188 <HAL_Init+0x40>)
 8002152:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002156:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002158:	4b0b      	ldr	r3, [pc, #44]	; (8002188 <HAL_Init+0x40>)
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	4a0a      	ldr	r2, [pc, #40]	; (8002188 <HAL_Init+0x40>)
 800215e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002162:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002164:	4b08      	ldr	r3, [pc, #32]	; (8002188 <HAL_Init+0x40>)
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	4a07      	ldr	r2, [pc, #28]	; (8002188 <HAL_Init+0x40>)
 800216a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800216e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002170:	2003      	movs	r0, #3
 8002172:	f000 fd33 	bl	8002bdc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002176:	200f      	movs	r0, #15
 8002178:	f000 f808 	bl	800218c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800217c:	f7ff fc72 	bl	8001a64 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002180:	2300      	movs	r3, #0
}
 8002182:	4618      	mov	r0, r3
 8002184:	bd80      	pop	{r7, pc}
 8002186:	bf00      	nop
 8002188:	40023c00 	.word	0x40023c00

0800218c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800218c:	b580      	push	{r7, lr}
 800218e:	b082      	sub	sp, #8
 8002190:	af00      	add	r7, sp, #0
 8002192:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002194:	4b12      	ldr	r3, [pc, #72]	; (80021e0 <HAL_InitTick+0x54>)
 8002196:	681a      	ldr	r2, [r3, #0]
 8002198:	4b12      	ldr	r3, [pc, #72]	; (80021e4 <HAL_InitTick+0x58>)
 800219a:	781b      	ldrb	r3, [r3, #0]
 800219c:	4619      	mov	r1, r3
 800219e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80021a2:	fbb3 f3f1 	udiv	r3, r3, r1
 80021a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80021aa:	4618      	mov	r0, r3
 80021ac:	f000 fd4b 	bl	8002c46 <HAL_SYSTICK_Config>
 80021b0:	4603      	mov	r3, r0
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d001      	beq.n	80021ba <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80021b6:	2301      	movs	r3, #1
 80021b8:	e00e      	b.n	80021d8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	2b0f      	cmp	r3, #15
 80021be:	d80a      	bhi.n	80021d6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80021c0:	2200      	movs	r2, #0
 80021c2:	6879      	ldr	r1, [r7, #4]
 80021c4:	f04f 30ff 	mov.w	r0, #4294967295
 80021c8:	f000 fd13 	bl	8002bf2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80021cc:	4a06      	ldr	r2, [pc, #24]	; (80021e8 <HAL_InitTick+0x5c>)
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80021d2:	2300      	movs	r3, #0
 80021d4:	e000      	b.n	80021d8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80021d6:	2301      	movs	r3, #1
}
 80021d8:	4618      	mov	r0, r3
 80021da:	3708      	adds	r7, #8
 80021dc:	46bd      	mov	sp, r7
 80021de:	bd80      	pop	{r7, pc}
 80021e0:	20000018 	.word	0x20000018
 80021e4:	20000020 	.word	0x20000020
 80021e8:	2000001c 	.word	0x2000001c

080021ec <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80021ec:	b480      	push	{r7}
 80021ee:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80021f0:	4b06      	ldr	r3, [pc, #24]	; (800220c <HAL_IncTick+0x20>)
 80021f2:	781b      	ldrb	r3, [r3, #0]
 80021f4:	461a      	mov	r2, r3
 80021f6:	4b06      	ldr	r3, [pc, #24]	; (8002210 <HAL_IncTick+0x24>)
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	4413      	add	r3, r2
 80021fc:	4a04      	ldr	r2, [pc, #16]	; (8002210 <HAL_IncTick+0x24>)
 80021fe:	6013      	str	r3, [r2, #0]
}
 8002200:	bf00      	nop
 8002202:	46bd      	mov	sp, r7
 8002204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002208:	4770      	bx	lr
 800220a:	bf00      	nop
 800220c:	20000020 	.word	0x20000020
 8002210:	20004894 	.word	0x20004894

08002214 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002214:	b480      	push	{r7}
 8002216:	af00      	add	r7, sp, #0
  return uwTick;
 8002218:	4b03      	ldr	r3, [pc, #12]	; (8002228 <HAL_GetTick+0x14>)
 800221a:	681b      	ldr	r3, [r3, #0]
}
 800221c:	4618      	mov	r0, r3
 800221e:	46bd      	mov	sp, r7
 8002220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002224:	4770      	bx	lr
 8002226:	bf00      	nop
 8002228:	20004894 	.word	0x20004894

0800222c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800222c:	b580      	push	{r7, lr}
 800222e:	b084      	sub	sp, #16
 8002230:	af00      	add	r7, sp, #0
 8002232:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002234:	2300      	movs	r3, #0
 8002236:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	2b00      	cmp	r3, #0
 800223c:	d101      	bne.n	8002242 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800223e:	2301      	movs	r3, #1
 8002240:	e033      	b.n	80022aa <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002246:	2b00      	cmp	r3, #0
 8002248:	d109      	bne.n	800225e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800224a:	6878      	ldr	r0, [r7, #4]
 800224c:	f7fe ff86 	bl	800115c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	2200      	movs	r2, #0
 8002254:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	2200      	movs	r2, #0
 800225a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002262:	f003 0310 	and.w	r3, r3, #16
 8002266:	2b00      	cmp	r3, #0
 8002268:	d118      	bne.n	800229c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800226e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002272:	f023 0302 	bic.w	r3, r3, #2
 8002276:	f043 0202 	orr.w	r2, r3, #2
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800227e:	6878      	ldr	r0, [r7, #4]
 8002280:	f000 fa5e 	bl	8002740 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	2200      	movs	r2, #0
 8002288:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800228e:	f023 0303 	bic.w	r3, r3, #3
 8002292:	f043 0201 	orr.w	r2, r3, #1
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	641a      	str	r2, [r3, #64]	; 0x40
 800229a:	e001      	b.n	80022a0 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800229c:	2301      	movs	r3, #1
 800229e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	2200      	movs	r2, #0
 80022a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80022a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80022aa:	4618      	mov	r0, r3
 80022ac:	3710      	adds	r7, #16
 80022ae:	46bd      	mov	sp, r7
 80022b0:	bd80      	pop	{r7, pc}
	...

080022b4 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 80022b4:	b580      	push	{r7, lr}
 80022b6:	b086      	sub	sp, #24
 80022b8:	af00      	add	r7, sp, #0
 80022ba:	60f8      	str	r0, [r7, #12]
 80022bc:	60b9      	str	r1, [r7, #8]
 80022be:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 80022c0:	2300      	movs	r3, #0
 80022c2:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80022ca:	2b01      	cmp	r3, #1
 80022cc:	d101      	bne.n	80022d2 <HAL_ADC_Start_DMA+0x1e>
 80022ce:	2302      	movs	r3, #2
 80022d0:	e0e9      	b.n	80024a6 <HAL_ADC_Start_DMA+0x1f2>
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	2201      	movs	r2, #1
 80022d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	689b      	ldr	r3, [r3, #8]
 80022e0:	f003 0301 	and.w	r3, r3, #1
 80022e4:	2b01      	cmp	r3, #1
 80022e6:	d018      	beq.n	800231a <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	689a      	ldr	r2, [r3, #8]
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	f042 0201 	orr.w	r2, r2, #1
 80022f6:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80022f8:	4b6d      	ldr	r3, [pc, #436]	; (80024b0 <HAL_ADC_Start_DMA+0x1fc>)
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	4a6d      	ldr	r2, [pc, #436]	; (80024b4 <HAL_ADC_Start_DMA+0x200>)
 80022fe:	fba2 2303 	umull	r2, r3, r2, r3
 8002302:	0c9a      	lsrs	r2, r3, #18
 8002304:	4613      	mov	r3, r2
 8002306:	005b      	lsls	r3, r3, #1
 8002308:	4413      	add	r3, r2
 800230a:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 800230c:	e002      	b.n	8002314 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 800230e:	693b      	ldr	r3, [r7, #16]
 8002310:	3b01      	subs	r3, #1
 8002312:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8002314:	693b      	ldr	r3, [r7, #16]
 8002316:	2b00      	cmp	r3, #0
 8002318:	d1f9      	bne.n	800230e <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	689b      	ldr	r3, [r3, #8]
 8002320:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002324:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002328:	d107      	bne.n	800233a <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	689a      	ldr	r2, [r3, #8]
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002338:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	689b      	ldr	r3, [r3, #8]
 8002340:	f003 0301 	and.w	r3, r3, #1
 8002344:	2b01      	cmp	r3, #1
 8002346:	f040 80a1 	bne.w	800248c <HAL_ADC_Start_DMA+0x1d8>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800234e:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8002352:	f023 0301 	bic.w	r3, r3, #1
 8002356:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	685b      	ldr	r3, [r3, #4]
 8002364:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002368:	2b00      	cmp	r3, #0
 800236a:	d007      	beq.n	800237c <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002370:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002374:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002380:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002384:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002388:	d106      	bne.n	8002398 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800238e:	f023 0206 	bic.w	r2, r3, #6
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	645a      	str	r2, [r3, #68]	; 0x44
 8002396:	e002      	b.n	800239e <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	2200      	movs	r2, #0
 800239c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	2200      	movs	r2, #0
 80023a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80023a6:	4b44      	ldr	r3, [pc, #272]	; (80024b8 <HAL_ADC_Start_DMA+0x204>)
 80023a8:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023ae:	4a43      	ldr	r2, [pc, #268]	; (80024bc <HAL_ADC_Start_DMA+0x208>)
 80023b0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023b6:	4a42      	ldr	r2, [pc, #264]	; (80024c0 <HAL_ADC_Start_DMA+0x20c>)
 80023b8:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023be:	4a41      	ldr	r2, [pc, #260]	; (80024c4 <HAL_ADC_Start_DMA+0x210>)
 80023c0:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80023ca:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	685a      	ldr	r2, [r3, #4]
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 80023da:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	689a      	ldr	r2, [r3, #8]
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80023ea:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	334c      	adds	r3, #76	; 0x4c
 80023f6:	4619      	mov	r1, r3
 80023f8:	68ba      	ldr	r2, [r7, #8]
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	f000 fec6 	bl	800318c <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8002400:	697b      	ldr	r3, [r7, #20]
 8002402:	685b      	ldr	r3, [r3, #4]
 8002404:	f003 031f 	and.w	r3, r3, #31
 8002408:	2b00      	cmp	r3, #0
 800240a:	d12a      	bne.n	8002462 <HAL_ADC_Start_DMA+0x1ae>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	4a2d      	ldr	r2, [pc, #180]	; (80024c8 <HAL_ADC_Start_DMA+0x214>)
 8002412:	4293      	cmp	r3, r2
 8002414:	d015      	beq.n	8002442 <HAL_ADC_Start_DMA+0x18e>
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	4a2c      	ldr	r2, [pc, #176]	; (80024cc <HAL_ADC_Start_DMA+0x218>)
 800241c:	4293      	cmp	r3, r2
 800241e:	d105      	bne.n	800242c <HAL_ADC_Start_DMA+0x178>
 8002420:	4b25      	ldr	r3, [pc, #148]	; (80024b8 <HAL_ADC_Start_DMA+0x204>)
 8002422:	685b      	ldr	r3, [r3, #4]
 8002424:	f003 031f 	and.w	r3, r3, #31
 8002428:	2b00      	cmp	r3, #0
 800242a:	d00a      	beq.n	8002442 <HAL_ADC_Start_DMA+0x18e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	4a27      	ldr	r2, [pc, #156]	; (80024d0 <HAL_ADC_Start_DMA+0x21c>)
 8002432:	4293      	cmp	r3, r2
 8002434:	d136      	bne.n	80024a4 <HAL_ADC_Start_DMA+0x1f0>
 8002436:	4b20      	ldr	r3, [pc, #128]	; (80024b8 <HAL_ADC_Start_DMA+0x204>)
 8002438:	685b      	ldr	r3, [r3, #4]
 800243a:	f003 0310 	and.w	r3, r3, #16
 800243e:	2b00      	cmp	r3, #0
 8002440:	d130      	bne.n	80024a4 <HAL_ADC_Start_DMA+0x1f0>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	689b      	ldr	r3, [r3, #8]
 8002448:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800244c:	2b00      	cmp	r3, #0
 800244e:	d129      	bne.n	80024a4 <HAL_ADC_Start_DMA+0x1f0>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	689a      	ldr	r2, [r3, #8]
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800245e:	609a      	str	r2, [r3, #8]
 8002460:	e020      	b.n	80024a4 <HAL_ADC_Start_DMA+0x1f0>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	4a18      	ldr	r2, [pc, #96]	; (80024c8 <HAL_ADC_Start_DMA+0x214>)
 8002468:	4293      	cmp	r3, r2
 800246a:	d11b      	bne.n	80024a4 <HAL_ADC_Start_DMA+0x1f0>
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	689b      	ldr	r3, [r3, #8]
 8002472:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002476:	2b00      	cmp	r3, #0
 8002478:	d114      	bne.n	80024a4 <HAL_ADC_Start_DMA+0x1f0>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	689a      	ldr	r2, [r3, #8]
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002488:	609a      	str	r2, [r3, #8]
 800248a:	e00b      	b.n	80024a4 <HAL_ADC_Start_DMA+0x1f0>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002490:	f043 0210 	orr.w	r2, r3, #16
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800249c:	f043 0201 	orr.w	r2, r3, #1
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 80024a4:	2300      	movs	r3, #0
}
 80024a6:	4618      	mov	r0, r3
 80024a8:	3718      	adds	r7, #24
 80024aa:	46bd      	mov	sp, r7
 80024ac:	bd80      	pop	{r7, pc}
 80024ae:	bf00      	nop
 80024b0:	20000018 	.word	0x20000018
 80024b4:	431bde83 	.word	0x431bde83
 80024b8:	40012300 	.word	0x40012300
 80024bc:	08002939 	.word	0x08002939
 80024c0:	080029f3 	.word	0x080029f3
 80024c4:	08002a0f 	.word	0x08002a0f
 80024c8:	40012000 	.word	0x40012000
 80024cc:	40012100 	.word	0x40012100
 80024d0:	40012200 	.word	0x40012200

080024d4 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 80024d4:	b480      	push	{r7}
 80024d6:	b083      	sub	sp, #12
 80024d8:	af00      	add	r7, sp, #0
 80024da:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 80024dc:	bf00      	nop
 80024de:	370c      	adds	r7, #12
 80024e0:	46bd      	mov	sp, r7
 80024e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e6:	4770      	bx	lr

080024e8 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80024e8:	b480      	push	{r7}
 80024ea:	b083      	sub	sp, #12
 80024ec:	af00      	add	r7, sp, #0
 80024ee:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 80024f0:	bf00      	nop
 80024f2:	370c      	adds	r7, #12
 80024f4:	46bd      	mov	sp, r7
 80024f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024fa:	4770      	bx	lr

080024fc <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80024fc:	b480      	push	{r7}
 80024fe:	b085      	sub	sp, #20
 8002500:	af00      	add	r7, sp, #0
 8002502:	6078      	str	r0, [r7, #4]
 8002504:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8002506:	2300      	movs	r3, #0
 8002508:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002510:	2b01      	cmp	r3, #1
 8002512:	d101      	bne.n	8002518 <HAL_ADC_ConfigChannel+0x1c>
 8002514:	2302      	movs	r3, #2
 8002516:	e105      	b.n	8002724 <HAL_ADC_ConfigChannel+0x228>
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	2201      	movs	r2, #1
 800251c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002520:	683b      	ldr	r3, [r7, #0]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	2b09      	cmp	r3, #9
 8002526:	d925      	bls.n	8002574 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	68d9      	ldr	r1, [r3, #12]
 800252e:	683b      	ldr	r3, [r7, #0]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	b29b      	uxth	r3, r3
 8002534:	461a      	mov	r2, r3
 8002536:	4613      	mov	r3, r2
 8002538:	005b      	lsls	r3, r3, #1
 800253a:	4413      	add	r3, r2
 800253c:	3b1e      	subs	r3, #30
 800253e:	2207      	movs	r2, #7
 8002540:	fa02 f303 	lsl.w	r3, r2, r3
 8002544:	43da      	mvns	r2, r3
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	400a      	ands	r2, r1
 800254c:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	68d9      	ldr	r1, [r3, #12]
 8002554:	683b      	ldr	r3, [r7, #0]
 8002556:	689a      	ldr	r2, [r3, #8]
 8002558:	683b      	ldr	r3, [r7, #0]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	b29b      	uxth	r3, r3
 800255e:	4618      	mov	r0, r3
 8002560:	4603      	mov	r3, r0
 8002562:	005b      	lsls	r3, r3, #1
 8002564:	4403      	add	r3, r0
 8002566:	3b1e      	subs	r3, #30
 8002568:	409a      	lsls	r2, r3
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	430a      	orrs	r2, r1
 8002570:	60da      	str	r2, [r3, #12]
 8002572:	e022      	b.n	80025ba <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	6919      	ldr	r1, [r3, #16]
 800257a:	683b      	ldr	r3, [r7, #0]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	b29b      	uxth	r3, r3
 8002580:	461a      	mov	r2, r3
 8002582:	4613      	mov	r3, r2
 8002584:	005b      	lsls	r3, r3, #1
 8002586:	4413      	add	r3, r2
 8002588:	2207      	movs	r2, #7
 800258a:	fa02 f303 	lsl.w	r3, r2, r3
 800258e:	43da      	mvns	r2, r3
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	400a      	ands	r2, r1
 8002596:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	6919      	ldr	r1, [r3, #16]
 800259e:	683b      	ldr	r3, [r7, #0]
 80025a0:	689a      	ldr	r2, [r3, #8]
 80025a2:	683b      	ldr	r3, [r7, #0]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	b29b      	uxth	r3, r3
 80025a8:	4618      	mov	r0, r3
 80025aa:	4603      	mov	r3, r0
 80025ac:	005b      	lsls	r3, r3, #1
 80025ae:	4403      	add	r3, r0
 80025b0:	409a      	lsls	r2, r3
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	430a      	orrs	r2, r1
 80025b8:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80025ba:	683b      	ldr	r3, [r7, #0]
 80025bc:	685b      	ldr	r3, [r3, #4]
 80025be:	2b06      	cmp	r3, #6
 80025c0:	d824      	bhi.n	800260c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80025c8:	683b      	ldr	r3, [r7, #0]
 80025ca:	685a      	ldr	r2, [r3, #4]
 80025cc:	4613      	mov	r3, r2
 80025ce:	009b      	lsls	r3, r3, #2
 80025d0:	4413      	add	r3, r2
 80025d2:	3b05      	subs	r3, #5
 80025d4:	221f      	movs	r2, #31
 80025d6:	fa02 f303 	lsl.w	r3, r2, r3
 80025da:	43da      	mvns	r2, r3
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	400a      	ands	r2, r1
 80025e2:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80025ea:	683b      	ldr	r3, [r7, #0]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	b29b      	uxth	r3, r3
 80025f0:	4618      	mov	r0, r3
 80025f2:	683b      	ldr	r3, [r7, #0]
 80025f4:	685a      	ldr	r2, [r3, #4]
 80025f6:	4613      	mov	r3, r2
 80025f8:	009b      	lsls	r3, r3, #2
 80025fa:	4413      	add	r3, r2
 80025fc:	3b05      	subs	r3, #5
 80025fe:	fa00 f203 	lsl.w	r2, r0, r3
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	430a      	orrs	r2, r1
 8002608:	635a      	str	r2, [r3, #52]	; 0x34
 800260a:	e04c      	b.n	80026a6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800260c:	683b      	ldr	r3, [r7, #0]
 800260e:	685b      	ldr	r3, [r3, #4]
 8002610:	2b0c      	cmp	r3, #12
 8002612:	d824      	bhi.n	800265e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800261a:	683b      	ldr	r3, [r7, #0]
 800261c:	685a      	ldr	r2, [r3, #4]
 800261e:	4613      	mov	r3, r2
 8002620:	009b      	lsls	r3, r3, #2
 8002622:	4413      	add	r3, r2
 8002624:	3b23      	subs	r3, #35	; 0x23
 8002626:	221f      	movs	r2, #31
 8002628:	fa02 f303 	lsl.w	r3, r2, r3
 800262c:	43da      	mvns	r2, r3
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	400a      	ands	r2, r1
 8002634:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800263c:	683b      	ldr	r3, [r7, #0]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	b29b      	uxth	r3, r3
 8002642:	4618      	mov	r0, r3
 8002644:	683b      	ldr	r3, [r7, #0]
 8002646:	685a      	ldr	r2, [r3, #4]
 8002648:	4613      	mov	r3, r2
 800264a:	009b      	lsls	r3, r3, #2
 800264c:	4413      	add	r3, r2
 800264e:	3b23      	subs	r3, #35	; 0x23
 8002650:	fa00 f203 	lsl.w	r2, r0, r3
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	430a      	orrs	r2, r1
 800265a:	631a      	str	r2, [r3, #48]	; 0x30
 800265c:	e023      	b.n	80026a6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002664:	683b      	ldr	r3, [r7, #0]
 8002666:	685a      	ldr	r2, [r3, #4]
 8002668:	4613      	mov	r3, r2
 800266a:	009b      	lsls	r3, r3, #2
 800266c:	4413      	add	r3, r2
 800266e:	3b41      	subs	r3, #65	; 0x41
 8002670:	221f      	movs	r2, #31
 8002672:	fa02 f303 	lsl.w	r3, r2, r3
 8002676:	43da      	mvns	r2, r3
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	400a      	ands	r2, r1
 800267e:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002686:	683b      	ldr	r3, [r7, #0]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	b29b      	uxth	r3, r3
 800268c:	4618      	mov	r0, r3
 800268e:	683b      	ldr	r3, [r7, #0]
 8002690:	685a      	ldr	r2, [r3, #4]
 8002692:	4613      	mov	r3, r2
 8002694:	009b      	lsls	r3, r3, #2
 8002696:	4413      	add	r3, r2
 8002698:	3b41      	subs	r3, #65	; 0x41
 800269a:	fa00 f203 	lsl.w	r2, r0, r3
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	430a      	orrs	r2, r1
 80026a4:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80026a6:	4b22      	ldr	r3, [pc, #136]	; (8002730 <HAL_ADC_ConfigChannel+0x234>)
 80026a8:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	4a21      	ldr	r2, [pc, #132]	; (8002734 <HAL_ADC_ConfigChannel+0x238>)
 80026b0:	4293      	cmp	r3, r2
 80026b2:	d109      	bne.n	80026c8 <HAL_ADC_ConfigChannel+0x1cc>
 80026b4:	683b      	ldr	r3, [r7, #0]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	2b12      	cmp	r3, #18
 80026ba:	d105      	bne.n	80026c8 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	685b      	ldr	r3, [r3, #4]
 80026c0:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	4a19      	ldr	r2, [pc, #100]	; (8002734 <HAL_ADC_ConfigChannel+0x238>)
 80026ce:	4293      	cmp	r3, r2
 80026d0:	d123      	bne.n	800271a <HAL_ADC_ConfigChannel+0x21e>
 80026d2:	683b      	ldr	r3, [r7, #0]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	2b10      	cmp	r3, #16
 80026d8:	d003      	beq.n	80026e2 <HAL_ADC_ConfigChannel+0x1e6>
 80026da:	683b      	ldr	r3, [r7, #0]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	2b11      	cmp	r3, #17
 80026e0:	d11b      	bne.n	800271a <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	685b      	ldr	r3, [r3, #4]
 80026e6:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80026ee:	683b      	ldr	r3, [r7, #0]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	2b10      	cmp	r3, #16
 80026f4:	d111      	bne.n	800271a <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80026f6:	4b10      	ldr	r3, [pc, #64]	; (8002738 <HAL_ADC_ConfigChannel+0x23c>)
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	4a10      	ldr	r2, [pc, #64]	; (800273c <HAL_ADC_ConfigChannel+0x240>)
 80026fc:	fba2 2303 	umull	r2, r3, r2, r3
 8002700:	0c9a      	lsrs	r2, r3, #18
 8002702:	4613      	mov	r3, r2
 8002704:	009b      	lsls	r3, r3, #2
 8002706:	4413      	add	r3, r2
 8002708:	005b      	lsls	r3, r3, #1
 800270a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800270c:	e002      	b.n	8002714 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 800270e:	68bb      	ldr	r3, [r7, #8]
 8002710:	3b01      	subs	r3, #1
 8002712:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002714:	68bb      	ldr	r3, [r7, #8]
 8002716:	2b00      	cmp	r3, #0
 8002718:	d1f9      	bne.n	800270e <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	2200      	movs	r2, #0
 800271e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002722:	2300      	movs	r3, #0
}
 8002724:	4618      	mov	r0, r3
 8002726:	3714      	adds	r7, #20
 8002728:	46bd      	mov	sp, r7
 800272a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800272e:	4770      	bx	lr
 8002730:	40012300 	.word	0x40012300
 8002734:	40012000 	.word	0x40012000
 8002738:	20000018 	.word	0x20000018
 800273c:	431bde83 	.word	0x431bde83

08002740 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002740:	b480      	push	{r7}
 8002742:	b085      	sub	sp, #20
 8002744:	af00      	add	r7, sp, #0
 8002746:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002748:	4b79      	ldr	r3, [pc, #484]	; (8002930 <ADC_Init+0x1f0>)
 800274a:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	685b      	ldr	r3, [r3, #4]
 8002750:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	685a      	ldr	r2, [r3, #4]
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	685b      	ldr	r3, [r3, #4]
 8002760:	431a      	orrs	r2, r3
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	685a      	ldr	r2, [r3, #4]
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002774:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	6859      	ldr	r1, [r3, #4]
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	691b      	ldr	r3, [r3, #16]
 8002780:	021a      	lsls	r2, r3, #8
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	430a      	orrs	r2, r1
 8002788:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	685a      	ldr	r2, [r3, #4]
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002798:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	6859      	ldr	r1, [r3, #4]
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	689a      	ldr	r2, [r3, #8]
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	430a      	orrs	r2, r1
 80027aa:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	689a      	ldr	r2, [r3, #8]
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80027ba:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	6899      	ldr	r1, [r3, #8]
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	68da      	ldr	r2, [r3, #12]
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	430a      	orrs	r2, r1
 80027cc:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027d2:	4a58      	ldr	r2, [pc, #352]	; (8002934 <ADC_Init+0x1f4>)
 80027d4:	4293      	cmp	r3, r2
 80027d6:	d022      	beq.n	800281e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	689a      	ldr	r2, [r3, #8]
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80027e6:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	6899      	ldr	r1, [r3, #8]
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	430a      	orrs	r2, r1
 80027f8:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	689a      	ldr	r2, [r3, #8]
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002808:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	6899      	ldr	r1, [r3, #8]
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	430a      	orrs	r2, r1
 800281a:	609a      	str	r2, [r3, #8]
 800281c:	e00f      	b.n	800283e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	689a      	ldr	r2, [r3, #8]
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800282c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	689a      	ldr	r2, [r3, #8]
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800283c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	689a      	ldr	r2, [r3, #8]
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	f022 0202 	bic.w	r2, r2, #2
 800284c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	6899      	ldr	r1, [r3, #8]
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	7e1b      	ldrb	r3, [r3, #24]
 8002858:	005a      	lsls	r2, r3, #1
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	430a      	orrs	r2, r1
 8002860:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002868:	2b00      	cmp	r3, #0
 800286a:	d01b      	beq.n	80028a4 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	685a      	ldr	r2, [r3, #4]
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800287a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	685a      	ldr	r2, [r3, #4]
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800288a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	6859      	ldr	r1, [r3, #4]
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002896:	3b01      	subs	r3, #1
 8002898:	035a      	lsls	r2, r3, #13
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	430a      	orrs	r2, r1
 80028a0:	605a      	str	r2, [r3, #4]
 80028a2:	e007      	b.n	80028b4 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	685a      	ldr	r2, [r3, #4]
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80028b2:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80028c2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	69db      	ldr	r3, [r3, #28]
 80028ce:	3b01      	subs	r3, #1
 80028d0:	051a      	lsls	r2, r3, #20
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	430a      	orrs	r2, r1
 80028d8:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	689a      	ldr	r2, [r3, #8]
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80028e8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	6899      	ldr	r1, [r3, #8]
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80028f6:	025a      	lsls	r2, r3, #9
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	430a      	orrs	r2, r1
 80028fe:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	689a      	ldr	r2, [r3, #8]
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800290e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	6899      	ldr	r1, [r3, #8]
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	695b      	ldr	r3, [r3, #20]
 800291a:	029a      	lsls	r2, r3, #10
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	430a      	orrs	r2, r1
 8002922:	609a      	str	r2, [r3, #8]
}
 8002924:	bf00      	nop
 8002926:	3714      	adds	r7, #20
 8002928:	46bd      	mov	sp, r7
 800292a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800292e:	4770      	bx	lr
 8002930:	40012300 	.word	0x40012300
 8002934:	0f000001 	.word	0x0f000001

08002938 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8002938:	b580      	push	{r7, lr}
 800293a:	b084      	sub	sp, #16
 800293c:	af00      	add	r7, sp, #0
 800293e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002944:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800294a:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800294e:	2b00      	cmp	r3, #0
 8002950:	d13c      	bne.n	80029cc <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002956:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	689b      	ldr	r3, [r3, #8]
 8002964:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002968:	2b00      	cmp	r3, #0
 800296a:	d12b      	bne.n	80029c4 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002970:	2b00      	cmp	r3, #0
 8002972:	d127      	bne.n	80029c4 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800297a:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800297e:	2b00      	cmp	r3, #0
 8002980:	d006      	beq.n	8002990 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	689b      	ldr	r3, [r3, #8]
 8002988:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800298c:	2b00      	cmp	r3, #0
 800298e:	d119      	bne.n	80029c4 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	685a      	ldr	r2, [r3, #4]
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	f022 0220 	bic.w	r2, r2, #32
 800299e:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029a4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029b0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d105      	bne.n	80029c4 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029bc:	f043 0201 	orr.w	r2, r3, #1
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80029c4:	68f8      	ldr	r0, [r7, #12]
 80029c6:	f7fe fc49 	bl	800125c <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80029ca:	e00e      	b.n	80029ea <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029d0:	f003 0310 	and.w	r3, r3, #16
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d003      	beq.n	80029e0 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 80029d8:	68f8      	ldr	r0, [r7, #12]
 80029da:	f7ff fd85 	bl	80024e8 <HAL_ADC_ErrorCallback>
}
 80029de:	e004      	b.n	80029ea <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80029e6:	6878      	ldr	r0, [r7, #4]
 80029e8:	4798      	blx	r3
}
 80029ea:	bf00      	nop
 80029ec:	3710      	adds	r7, #16
 80029ee:	46bd      	mov	sp, r7
 80029f0:	bd80      	pop	{r7, pc}

080029f2 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 80029f2:	b580      	push	{r7, lr}
 80029f4:	b084      	sub	sp, #16
 80029f6:	af00      	add	r7, sp, #0
 80029f8:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029fe:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002a00:	68f8      	ldr	r0, [r7, #12]
 8002a02:	f7ff fd67 	bl	80024d4 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002a06:	bf00      	nop
 8002a08:	3710      	adds	r7, #16
 8002a0a:	46bd      	mov	sp, r7
 8002a0c:	bd80      	pop	{r7, pc}

08002a0e <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8002a0e:	b580      	push	{r7, lr}
 8002a10:	b084      	sub	sp, #16
 8002a12:	af00      	add	r7, sp, #0
 8002a14:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a1a:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	2240      	movs	r2, #64	; 0x40
 8002a20:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a26:	f043 0204 	orr.w	r2, r3, #4
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002a2e:	68f8      	ldr	r0, [r7, #12]
 8002a30:	f7ff fd5a 	bl	80024e8 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002a34:	bf00      	nop
 8002a36:	3710      	adds	r7, #16
 8002a38:	46bd      	mov	sp, r7
 8002a3a:	bd80      	pop	{r7, pc}

08002a3c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002a3c:	b480      	push	{r7}
 8002a3e:	b085      	sub	sp, #20
 8002a40:	af00      	add	r7, sp, #0
 8002a42:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	f003 0307 	and.w	r3, r3, #7
 8002a4a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002a4c:	4b0c      	ldr	r3, [pc, #48]	; (8002a80 <__NVIC_SetPriorityGrouping+0x44>)
 8002a4e:	68db      	ldr	r3, [r3, #12]
 8002a50:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002a52:	68ba      	ldr	r2, [r7, #8]
 8002a54:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002a58:	4013      	ands	r3, r2
 8002a5a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002a60:	68bb      	ldr	r3, [r7, #8]
 8002a62:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002a64:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002a68:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002a6c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002a6e:	4a04      	ldr	r2, [pc, #16]	; (8002a80 <__NVIC_SetPriorityGrouping+0x44>)
 8002a70:	68bb      	ldr	r3, [r7, #8]
 8002a72:	60d3      	str	r3, [r2, #12]
}
 8002a74:	bf00      	nop
 8002a76:	3714      	adds	r7, #20
 8002a78:	46bd      	mov	sp, r7
 8002a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a7e:	4770      	bx	lr
 8002a80:	e000ed00 	.word	0xe000ed00

08002a84 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002a84:	b480      	push	{r7}
 8002a86:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002a88:	4b04      	ldr	r3, [pc, #16]	; (8002a9c <__NVIC_GetPriorityGrouping+0x18>)
 8002a8a:	68db      	ldr	r3, [r3, #12]
 8002a8c:	0a1b      	lsrs	r3, r3, #8
 8002a8e:	f003 0307 	and.w	r3, r3, #7
}
 8002a92:	4618      	mov	r0, r3
 8002a94:	46bd      	mov	sp, r7
 8002a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a9a:	4770      	bx	lr
 8002a9c:	e000ed00 	.word	0xe000ed00

08002aa0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002aa0:	b480      	push	{r7}
 8002aa2:	b083      	sub	sp, #12
 8002aa4:	af00      	add	r7, sp, #0
 8002aa6:	4603      	mov	r3, r0
 8002aa8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002aaa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	db0b      	blt.n	8002aca <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002ab2:	79fb      	ldrb	r3, [r7, #7]
 8002ab4:	f003 021f 	and.w	r2, r3, #31
 8002ab8:	4907      	ldr	r1, [pc, #28]	; (8002ad8 <__NVIC_EnableIRQ+0x38>)
 8002aba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002abe:	095b      	lsrs	r3, r3, #5
 8002ac0:	2001      	movs	r0, #1
 8002ac2:	fa00 f202 	lsl.w	r2, r0, r2
 8002ac6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002aca:	bf00      	nop
 8002acc:	370c      	adds	r7, #12
 8002ace:	46bd      	mov	sp, r7
 8002ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad4:	4770      	bx	lr
 8002ad6:	bf00      	nop
 8002ad8:	e000e100 	.word	0xe000e100

08002adc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002adc:	b480      	push	{r7}
 8002ade:	b083      	sub	sp, #12
 8002ae0:	af00      	add	r7, sp, #0
 8002ae2:	4603      	mov	r3, r0
 8002ae4:	6039      	str	r1, [r7, #0]
 8002ae6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002ae8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	db0a      	blt.n	8002b06 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002af0:	683b      	ldr	r3, [r7, #0]
 8002af2:	b2da      	uxtb	r2, r3
 8002af4:	490c      	ldr	r1, [pc, #48]	; (8002b28 <__NVIC_SetPriority+0x4c>)
 8002af6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002afa:	0112      	lsls	r2, r2, #4
 8002afc:	b2d2      	uxtb	r2, r2
 8002afe:	440b      	add	r3, r1
 8002b00:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002b04:	e00a      	b.n	8002b1c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b06:	683b      	ldr	r3, [r7, #0]
 8002b08:	b2da      	uxtb	r2, r3
 8002b0a:	4908      	ldr	r1, [pc, #32]	; (8002b2c <__NVIC_SetPriority+0x50>)
 8002b0c:	79fb      	ldrb	r3, [r7, #7]
 8002b0e:	f003 030f 	and.w	r3, r3, #15
 8002b12:	3b04      	subs	r3, #4
 8002b14:	0112      	lsls	r2, r2, #4
 8002b16:	b2d2      	uxtb	r2, r2
 8002b18:	440b      	add	r3, r1
 8002b1a:	761a      	strb	r2, [r3, #24]
}
 8002b1c:	bf00      	nop
 8002b1e:	370c      	adds	r7, #12
 8002b20:	46bd      	mov	sp, r7
 8002b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b26:	4770      	bx	lr
 8002b28:	e000e100 	.word	0xe000e100
 8002b2c:	e000ed00 	.word	0xe000ed00

08002b30 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002b30:	b480      	push	{r7}
 8002b32:	b089      	sub	sp, #36	; 0x24
 8002b34:	af00      	add	r7, sp, #0
 8002b36:	60f8      	str	r0, [r7, #12]
 8002b38:	60b9      	str	r1, [r7, #8]
 8002b3a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	f003 0307 	and.w	r3, r3, #7
 8002b42:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002b44:	69fb      	ldr	r3, [r7, #28]
 8002b46:	f1c3 0307 	rsb	r3, r3, #7
 8002b4a:	2b04      	cmp	r3, #4
 8002b4c:	bf28      	it	cs
 8002b4e:	2304      	movcs	r3, #4
 8002b50:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002b52:	69fb      	ldr	r3, [r7, #28]
 8002b54:	3304      	adds	r3, #4
 8002b56:	2b06      	cmp	r3, #6
 8002b58:	d902      	bls.n	8002b60 <NVIC_EncodePriority+0x30>
 8002b5a:	69fb      	ldr	r3, [r7, #28]
 8002b5c:	3b03      	subs	r3, #3
 8002b5e:	e000      	b.n	8002b62 <NVIC_EncodePriority+0x32>
 8002b60:	2300      	movs	r3, #0
 8002b62:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b64:	f04f 32ff 	mov.w	r2, #4294967295
 8002b68:	69bb      	ldr	r3, [r7, #24]
 8002b6a:	fa02 f303 	lsl.w	r3, r2, r3
 8002b6e:	43da      	mvns	r2, r3
 8002b70:	68bb      	ldr	r3, [r7, #8]
 8002b72:	401a      	ands	r2, r3
 8002b74:	697b      	ldr	r3, [r7, #20]
 8002b76:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002b78:	f04f 31ff 	mov.w	r1, #4294967295
 8002b7c:	697b      	ldr	r3, [r7, #20]
 8002b7e:	fa01 f303 	lsl.w	r3, r1, r3
 8002b82:	43d9      	mvns	r1, r3
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b88:	4313      	orrs	r3, r2
         );
}
 8002b8a:	4618      	mov	r0, r3
 8002b8c:	3724      	adds	r7, #36	; 0x24
 8002b8e:	46bd      	mov	sp, r7
 8002b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b94:	4770      	bx	lr
	...

08002b98 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002b98:	b580      	push	{r7, lr}
 8002b9a:	b082      	sub	sp, #8
 8002b9c:	af00      	add	r7, sp, #0
 8002b9e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	3b01      	subs	r3, #1
 8002ba4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002ba8:	d301      	bcc.n	8002bae <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002baa:	2301      	movs	r3, #1
 8002bac:	e00f      	b.n	8002bce <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002bae:	4a0a      	ldr	r2, [pc, #40]	; (8002bd8 <SysTick_Config+0x40>)
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	3b01      	subs	r3, #1
 8002bb4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002bb6:	210f      	movs	r1, #15
 8002bb8:	f04f 30ff 	mov.w	r0, #4294967295
 8002bbc:	f7ff ff8e 	bl	8002adc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002bc0:	4b05      	ldr	r3, [pc, #20]	; (8002bd8 <SysTick_Config+0x40>)
 8002bc2:	2200      	movs	r2, #0
 8002bc4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002bc6:	4b04      	ldr	r3, [pc, #16]	; (8002bd8 <SysTick_Config+0x40>)
 8002bc8:	2207      	movs	r2, #7
 8002bca:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002bcc:	2300      	movs	r3, #0
}
 8002bce:	4618      	mov	r0, r3
 8002bd0:	3708      	adds	r7, #8
 8002bd2:	46bd      	mov	sp, r7
 8002bd4:	bd80      	pop	{r7, pc}
 8002bd6:	bf00      	nop
 8002bd8:	e000e010 	.word	0xe000e010

08002bdc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002bdc:	b580      	push	{r7, lr}
 8002bde:	b082      	sub	sp, #8
 8002be0:	af00      	add	r7, sp, #0
 8002be2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002be4:	6878      	ldr	r0, [r7, #4]
 8002be6:	f7ff ff29 	bl	8002a3c <__NVIC_SetPriorityGrouping>
}
 8002bea:	bf00      	nop
 8002bec:	3708      	adds	r7, #8
 8002bee:	46bd      	mov	sp, r7
 8002bf0:	bd80      	pop	{r7, pc}

08002bf2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002bf2:	b580      	push	{r7, lr}
 8002bf4:	b086      	sub	sp, #24
 8002bf6:	af00      	add	r7, sp, #0
 8002bf8:	4603      	mov	r3, r0
 8002bfa:	60b9      	str	r1, [r7, #8]
 8002bfc:	607a      	str	r2, [r7, #4]
 8002bfe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002c00:	2300      	movs	r3, #0
 8002c02:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002c04:	f7ff ff3e 	bl	8002a84 <__NVIC_GetPriorityGrouping>
 8002c08:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002c0a:	687a      	ldr	r2, [r7, #4]
 8002c0c:	68b9      	ldr	r1, [r7, #8]
 8002c0e:	6978      	ldr	r0, [r7, #20]
 8002c10:	f7ff ff8e 	bl	8002b30 <NVIC_EncodePriority>
 8002c14:	4602      	mov	r2, r0
 8002c16:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002c1a:	4611      	mov	r1, r2
 8002c1c:	4618      	mov	r0, r3
 8002c1e:	f7ff ff5d 	bl	8002adc <__NVIC_SetPriority>
}
 8002c22:	bf00      	nop
 8002c24:	3718      	adds	r7, #24
 8002c26:	46bd      	mov	sp, r7
 8002c28:	bd80      	pop	{r7, pc}

08002c2a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002c2a:	b580      	push	{r7, lr}
 8002c2c:	b082      	sub	sp, #8
 8002c2e:	af00      	add	r7, sp, #0
 8002c30:	4603      	mov	r3, r0
 8002c32:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002c34:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c38:	4618      	mov	r0, r3
 8002c3a:	f7ff ff31 	bl	8002aa0 <__NVIC_EnableIRQ>
}
 8002c3e:	bf00      	nop
 8002c40:	3708      	adds	r7, #8
 8002c42:	46bd      	mov	sp, r7
 8002c44:	bd80      	pop	{r7, pc}

08002c46 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002c46:	b580      	push	{r7, lr}
 8002c48:	b082      	sub	sp, #8
 8002c4a:	af00      	add	r7, sp, #0
 8002c4c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002c4e:	6878      	ldr	r0, [r7, #4]
 8002c50:	f7ff ffa2 	bl	8002b98 <SysTick_Config>
 8002c54:	4603      	mov	r3, r0
}
 8002c56:	4618      	mov	r0, r3
 8002c58:	3708      	adds	r7, #8
 8002c5a:	46bd      	mov	sp, r7
 8002c5c:	bd80      	pop	{r7, pc}

08002c5e <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8002c5e:	b580      	push	{r7, lr}
 8002c60:	b082      	sub	sp, #8
 8002c62:	af00      	add	r7, sp, #0
 8002c64:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d101      	bne.n	8002c70 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8002c6c:	2301      	movs	r3, #1
 8002c6e:	e014      	b.n	8002c9a <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	791b      	ldrb	r3, [r3, #4]
 8002c74:	b2db      	uxtb	r3, r3
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d105      	bne.n	8002c86 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	2200      	movs	r2, #0
 8002c7e:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8002c80:	6878      	ldr	r0, [r7, #4]
 8002c82:	f7fe fb33 	bl	80012ec <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	2202      	movs	r2, #2
 8002c8a:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	2200      	movs	r2, #0
 8002c90:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	2201      	movs	r2, #1
 8002c96:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8002c98:	2300      	movs	r3, #0
}
 8002c9a:	4618      	mov	r0, r3
 8002c9c:	3708      	adds	r7, #8
 8002c9e:	46bd      	mov	sp, r7
 8002ca0:	bd80      	pop	{r7, pc}
	...

08002ca4 <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t *pData, uint32_t Length,
                                    uint32_t Alignment)
{
 8002ca4:	b580      	push	{r7, lr}
 8002ca6:	b086      	sub	sp, #24
 8002ca8:	af00      	add	r7, sp, #0
 8002caa:	60f8      	str	r0, [r7, #12]
 8002cac:	60b9      	str	r1, [r7, #8]
 8002cae:	607a      	str	r2, [r7, #4]
 8002cb0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002cb2:	2300      	movs	r3, #0
 8002cb4:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpreg = 0U;
 8002cb6:	2300      	movs	r3, #0
 8002cb8:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));

  /* Process locked */
  __HAL_LOCK(hdac);
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	795b      	ldrb	r3, [r3, #5]
 8002cbe:	2b01      	cmp	r3, #1
 8002cc0:	d101      	bne.n	8002cc6 <HAL_DAC_Start_DMA+0x22>
 8002cc2:	2302      	movs	r3, #2
 8002cc4:	e0ab      	b.n	8002e1e <HAL_DAC_Start_DMA+0x17a>
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	2201      	movs	r2, #1
 8002cca:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	2202      	movs	r2, #2
 8002cd0:	711a      	strb	r2, [r3, #4]

  if (Channel == DAC_CHANNEL_1)
 8002cd2:	68bb      	ldr	r3, [r7, #8]
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d12f      	bne.n	8002d38 <HAL_DAC_Start_DMA+0x94>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	689b      	ldr	r3, [r3, #8]
 8002cdc:	4a52      	ldr	r2, [pc, #328]	; (8002e28 <HAL_DAC_Start_DMA+0x184>)
 8002cde:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	689b      	ldr	r3, [r3, #8]
 8002ce4:	4a51      	ldr	r2, [pc, #324]	; (8002e2c <HAL_DAC_Start_DMA+0x188>)
 8002ce6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	689b      	ldr	r3, [r3, #8]
 8002cec:	4a50      	ldr	r2, [pc, #320]	; (8002e30 <HAL_DAC_Start_DMA+0x18c>)
 8002cee:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	681a      	ldr	r2, [r3, #0]
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002cfe:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 1 */
    switch (Alignment)
 8002d00:	6a3b      	ldr	r3, [r7, #32]
 8002d02:	2b08      	cmp	r3, #8
 8002d04:	d013      	beq.n	8002d2e <HAL_DAC_Start_DMA+0x8a>
 8002d06:	6a3b      	ldr	r3, [r7, #32]
 8002d08:	2b08      	cmp	r3, #8
 8002d0a:	d845      	bhi.n	8002d98 <HAL_DAC_Start_DMA+0xf4>
 8002d0c:	6a3b      	ldr	r3, [r7, #32]
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d003      	beq.n	8002d1a <HAL_DAC_Start_DMA+0x76>
 8002d12:	6a3b      	ldr	r3, [r7, #32]
 8002d14:	2b04      	cmp	r3, #4
 8002d16:	d005      	beq.n	8002d24 <HAL_DAC_Start_DMA+0x80>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
        break;
      default:
        break;
 8002d18:	e03e      	b.n	8002d98 <HAL_DAC_Start_DMA+0xf4>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	3308      	adds	r3, #8
 8002d20:	613b      	str	r3, [r7, #16]
        break;
 8002d22:	e03c      	b.n	8002d9e <HAL_DAC_Start_DMA+0xfa>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	330c      	adds	r3, #12
 8002d2a:	613b      	str	r3, [r7, #16]
        break;
 8002d2c:	e037      	b.n	8002d9e <HAL_DAC_Start_DMA+0xfa>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	3310      	adds	r3, #16
 8002d34:	613b      	str	r3, [r7, #16]
        break;
 8002d36:	e032      	b.n	8002d9e <HAL_DAC_Start_DMA+0xfa>
  }
#if defined(DAC_CHANNEL2_SUPPORT)
  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	68db      	ldr	r3, [r3, #12]
 8002d3c:	4a3d      	ldr	r2, [pc, #244]	; (8002e34 <HAL_DAC_Start_DMA+0x190>)
 8002d3e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	68db      	ldr	r3, [r3, #12]
 8002d44:	4a3c      	ldr	r2, [pc, #240]	; (8002e38 <HAL_DAC_Start_DMA+0x194>)
 8002d46:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	68db      	ldr	r3, [r3, #12]
 8002d4c:	4a3b      	ldr	r2, [pc, #236]	; (8002e3c <HAL_DAC_Start_DMA+0x198>)
 8002d4e:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the selected DAC channel2 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	681a      	ldr	r2, [r3, #0]
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002d5e:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 2 */
    switch (Alignment)
 8002d60:	6a3b      	ldr	r3, [r7, #32]
 8002d62:	2b08      	cmp	r3, #8
 8002d64:	d013      	beq.n	8002d8e <HAL_DAC_Start_DMA+0xea>
 8002d66:	6a3b      	ldr	r3, [r7, #32]
 8002d68:	2b08      	cmp	r3, #8
 8002d6a:	d817      	bhi.n	8002d9c <HAL_DAC_Start_DMA+0xf8>
 8002d6c:	6a3b      	ldr	r3, [r7, #32]
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d003      	beq.n	8002d7a <HAL_DAC_Start_DMA+0xd6>
 8002d72:	6a3b      	ldr	r3, [r7, #32]
 8002d74:	2b04      	cmp	r3, #4
 8002d76:	d005      	beq.n	8002d84 <HAL_DAC_Start_DMA+0xe0>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
        break;
      default:
        break;
 8002d78:	e010      	b.n	8002d9c <HAL_DAC_Start_DMA+0xf8>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	3314      	adds	r3, #20
 8002d80:	613b      	str	r3, [r7, #16]
        break;
 8002d82:	e00c      	b.n	8002d9e <HAL_DAC_Start_DMA+0xfa>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	3318      	adds	r3, #24
 8002d8a:	613b      	str	r3, [r7, #16]
        break;
 8002d8c:	e007      	b.n	8002d9e <HAL_DAC_Start_DMA+0xfa>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	331c      	adds	r3, #28
 8002d94:	613b      	str	r3, [r7, #16]
        break;
 8002d96:	e002      	b.n	8002d9e <HAL_DAC_Start_DMA+0xfa>
        break;
 8002d98:	bf00      	nop
 8002d9a:	e000      	b.n	8002d9e <HAL_DAC_Start_DMA+0xfa>
        break;
 8002d9c:	bf00      	nop
    }
  }
#endif /* DAC_CHANNEL2_SUPPORT */

  /* Enable the DMA Stream */
  if (Channel == DAC_CHANNEL_1)
 8002d9e:	68bb      	ldr	r3, [r7, #8]
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d111      	bne.n	8002dc8 <HAL_DAC_Start_DMA+0x124>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	681a      	ldr	r2, [r3, #0]
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002db2:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Stream */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	6898      	ldr	r0, [r3, #8]
 8002db8:	6879      	ldr	r1, [r7, #4]
 8002dba:	683b      	ldr	r3, [r7, #0]
 8002dbc:	693a      	ldr	r2, [r7, #16]
 8002dbe:	f000 f9e5 	bl	800318c <HAL_DMA_Start_IT>
 8002dc2:	4603      	mov	r3, r0
 8002dc4:	75fb      	strb	r3, [r7, #23]
 8002dc6:	e010      	b.n	8002dea <HAL_DAC_Start_DMA+0x146>
  }
#if defined(DAC_CHANNEL2_SUPPORT)
  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	681a      	ldr	r2, [r3, #0]
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8002dd6:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Stream */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	68d8      	ldr	r0, [r3, #12]
 8002ddc:	6879      	ldr	r1, [r7, #4]
 8002dde:	683b      	ldr	r3, [r7, #0]
 8002de0:	693a      	ldr	r2, [r7, #16]
 8002de2:	f000 f9d3 	bl	800318c <HAL_DMA_Start_IT>
 8002de6:	4603      	mov	r3, r0
 8002de8:	75fb      	strb	r3, [r7, #23]
  }
#endif /* DAC_CHANNEL2_SUPPORT */

  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	2200      	movs	r2, #0
 8002dee:	715a      	strb	r2, [r3, #5]

  if (status == HAL_OK)
 8002df0:	7dfb      	ldrb	r3, [r7, #23]
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d10c      	bne.n	8002e10 <HAL_DAC_Start_DMA+0x16c>
  {
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, Channel);
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	6819      	ldr	r1, [r3, #0]
 8002dfc:	68bb      	ldr	r3, [r7, #8]
 8002dfe:	f003 0310 	and.w	r3, r3, #16
 8002e02:	2201      	movs	r2, #1
 8002e04:	409a      	lsls	r2, r3
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	430a      	orrs	r2, r1
 8002e0c:	601a      	str	r2, [r3, #0]
 8002e0e:	e005      	b.n	8002e1c <HAL_DAC_Start_DMA+0x178>
  }
  else
  {
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	691b      	ldr	r3, [r3, #16]
 8002e14:	f043 0204 	orr.w	r2, r3, #4
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	611a      	str	r2, [r3, #16]
  }

  /* Return function status */
  return status;
 8002e1c:	7dfb      	ldrb	r3, [r7, #23]
}
 8002e1e:	4618      	mov	r0, r3
 8002e20:	3718      	adds	r7, #24
 8002e22:	46bd      	mov	sp, r7
 8002e24:	bd80      	pop	{r7, pc}
 8002e26:	bf00      	nop
 8002e28:	08002f1b 	.word	0x08002f1b
 8002e2c:	08002f3d 	.word	0x08002f3d
 8002e30:	08002f59 	.word	0x08002f59
 8002e34:	08002fc3 	.word	0x08002fc3
 8002e38:	08002fe5 	.word	0x08002fe5
 8002e3c:	08003001 	.word	0x08003001

08002e40 <HAL_DAC_ConvCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8002e40:	b480      	push	{r7}
 8002e42:	b083      	sub	sp, #12
 8002e44:	af00      	add	r7, sp, #0
 8002e46:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvCpltCallbackCh1 could be implemented in the user file
   */
}
 8002e48:	bf00      	nop
 8002e4a:	370c      	adds	r7, #12
 8002e4c:	46bd      	mov	sp, r7
 8002e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e52:	4770      	bx	lr

08002e54 <HAL_DAC_ConvHalfCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8002e54:	b480      	push	{r7}
 8002e56:	b083      	sub	sp, #12
 8002e58:	af00      	add	r7, sp, #0
 8002e5a:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh1 could be implemented in the user file
   */
}
 8002e5c:	bf00      	nop
 8002e5e:	370c      	adds	r7, #12
 8002e60:	46bd      	mov	sp, r7
 8002e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e66:	4770      	bx	lr

08002e68 <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8002e68:	b480      	push	{r7}
 8002e6a:	b083      	sub	sp, #12
 8002e6c:	af00      	add	r7, sp, #0
 8002e6e:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallbackCh1 could be implemented in the user file
   */
}
 8002e70:	bf00      	nop
 8002e72:	370c      	adds	r7, #12
 8002e74:	46bd      	mov	sp, r7
 8002e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e7a:	4770      	bx	lr

08002e7c <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8002e7c:	b480      	push	{r7}
 8002e7e:	b087      	sub	sp, #28
 8002e80:	af00      	add	r7, sp, #0
 8002e82:	60f8      	str	r0, [r7, #12]
 8002e84:	60b9      	str	r1, [r7, #8]
 8002e86:	607a      	str	r2, [r7, #4]
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	795b      	ldrb	r3, [r3, #5]
 8002e8c:	2b01      	cmp	r3, #1
 8002e8e:	d101      	bne.n	8002e94 <HAL_DAC_ConfigChannel+0x18>
 8002e90:	2302      	movs	r3, #2
 8002e92:	e03c      	b.n	8002f0e <HAL_DAC_ConfigChannel+0x92>
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	2201      	movs	r2, #1
 8002e98:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	2202      	movs	r2, #2
 8002e9e:	711a      	strb	r2, [r3, #4]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << (Channel & 0x10UL));
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	f003 0310 	and.w	r3, r3, #16
 8002eae:	f640 72fe 	movw	r2, #4094	; 0xffe
 8002eb2:	fa02 f303 	lsl.w	r3, r2, r3
 8002eb6:	43db      	mvns	r3, r3
 8002eb8:	697a      	ldr	r2, [r7, #20]
 8002eba:	4013      	ands	r3, r2
 8002ebc:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8002ebe:	68bb      	ldr	r3, [r7, #8]
 8002ec0:	681a      	ldr	r2, [r3, #0]
 8002ec2:	68bb      	ldr	r3, [r7, #8]
 8002ec4:	685b      	ldr	r3, [r3, #4]
 8002ec6:	4313      	orrs	r3, r2
 8002ec8:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	f003 0310 	and.w	r3, r3, #16
 8002ed0:	693a      	ldr	r2, [r7, #16]
 8002ed2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ed6:	697a      	ldr	r2, [r7, #20]
 8002ed8:	4313      	orrs	r3, r2
 8002eda:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	697a      	ldr	r2, [r7, #20]
 8002ee2:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	6819      	ldr	r1, [r3, #0]
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	f003 0310 	and.w	r3, r3, #16
 8002ef0:	22c0      	movs	r2, #192	; 0xc0
 8002ef2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ef6:	43da      	mvns	r2, r3
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	400a      	ands	r2, r1
 8002efe:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	2201      	movs	r2, #1
 8002f04:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	2200      	movs	r2, #0
 8002f0a:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8002f0c:	2300      	movs	r3, #0
}
 8002f0e:	4618      	mov	r0, r3
 8002f10:	371c      	adds	r7, #28
 8002f12:	46bd      	mov	sp, r7
 8002f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f18:	4770      	bx	lr

08002f1a <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8002f1a:	b580      	push	{r7, lr}
 8002f1c:	b084      	sub	sp, #16
 8002f1e:	af00      	add	r7, sp, #0
 8002f20:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f26:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac);
 8002f28:	68f8      	ldr	r0, [r7, #12]
 8002f2a:	f7ff ff89 	bl	8002e40 <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	2201      	movs	r2, #1
 8002f32:	711a      	strb	r2, [r3, #4]
}
 8002f34:	bf00      	nop
 8002f36:	3710      	adds	r7, #16
 8002f38:	46bd      	mov	sp, r7
 8002f3a:	bd80      	pop	{r7, pc}

08002f3c <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8002f3c:	b580      	push	{r7, lr}
 8002f3e:	b084      	sub	sp, #16
 8002f40:	af00      	add	r7, sp, #0
 8002f42:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f48:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 8002f4a:	68f8      	ldr	r0, [r7, #12]
 8002f4c:	f7ff ff82 	bl	8002e54 <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8002f50:	bf00      	nop
 8002f52:	3710      	adds	r7, #16
 8002f54:	46bd      	mov	sp, r7
 8002f56:	bd80      	pop	{r7, pc}

08002f58 <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 8002f58:	b580      	push	{r7, lr}
 8002f5a:	b084      	sub	sp, #16
 8002f5c:	af00      	add	r7, sp, #0
 8002f5e:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f64:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	691b      	ldr	r3, [r3, #16]
 8002f6a:	f043 0204 	orr.w	r2, r3, #4
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
 8002f72:	68f8      	ldr	r0, [r7, #12]
 8002f74:	f7ff ff78 	bl	8002e68 <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	2201      	movs	r2, #1
 8002f7c:	711a      	strb	r2, [r3, #4]
}
 8002f7e:	bf00      	nop
 8002f80:	3710      	adds	r7, #16
 8002f82:	46bd      	mov	sp, r7
 8002f84:	bd80      	pop	{r7, pc}

08002f86 <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8002f86:	b480      	push	{r7}
 8002f88:	b083      	sub	sp, #12
 8002f8a:	af00      	add	r7, sp, #0
 8002f8c:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 8002f8e:	bf00      	nop
 8002f90:	370c      	adds	r7, #12
 8002f92:	46bd      	mov	sp, r7
 8002f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f98:	4770      	bx	lr

08002f9a <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8002f9a:	b480      	push	{r7}
 8002f9c:	b083      	sub	sp, #12
 8002f9e:	af00      	add	r7, sp, #0
 8002fa0:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 8002fa2:	bf00      	nop
 8002fa4:	370c      	adds	r7, #12
 8002fa6:	46bd      	mov	sp, r7
 8002fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fac:	4770      	bx	lr

08002fae <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8002fae:	b480      	push	{r7}
 8002fb0:	b083      	sub	sp, #12
 8002fb2:	af00      	add	r7, sp, #0
 8002fb4:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ErrorCallbackCh2 could be implemented in the user file
   */
}
 8002fb6:	bf00      	nop
 8002fb8:	370c      	adds	r7, #12
 8002fba:	46bd      	mov	sp, r7
 8002fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc0:	4770      	bx	lr

08002fc2 <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8002fc2:	b580      	push	{r7, lr}
 8002fc4:	b084      	sub	sp, #16
 8002fc6:	af00      	add	r7, sp, #0
 8002fc8:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fce:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
 8002fd0:	68f8      	ldr	r0, [r7, #12]
 8002fd2:	f7ff ffd8 	bl	8002f86 <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	2201      	movs	r2, #1
 8002fda:	711a      	strb	r2, [r3, #4]
}
 8002fdc:	bf00      	nop
 8002fde:	3710      	adds	r7, #16
 8002fe0:	46bd      	mov	sp, r7
 8002fe2:	bd80      	pop	{r7, pc}

08002fe4 <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8002fe4:	b580      	push	{r7, lr}
 8002fe6:	b084      	sub	sp, #16
 8002fe8:	af00      	add	r7, sp, #0
 8002fea:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ff0:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 8002ff2:	68f8      	ldr	r0, [r7, #12]
 8002ff4:	f7ff ffd1 	bl	8002f9a <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8002ff8:	bf00      	nop
 8002ffa:	3710      	adds	r7, #16
 8002ffc:	46bd      	mov	sp, r7
 8002ffe:	bd80      	pop	{r7, pc}

08003000 <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)
{
 8003000:	b580      	push	{r7, lr}
 8003002:	b084      	sub	sp, #16
 8003004:	af00      	add	r7, sp, #0
 8003006:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800300c:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	691b      	ldr	r3, [r3, #16]
 8003012:	f043 0204 	orr.w	r2, r3, #4
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac);
 800301a:	68f8      	ldr	r0, [r7, #12]
 800301c:	f7ff ffc7 	bl	8002fae <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	2201      	movs	r2, #1
 8003024:	711a      	strb	r2, [r3, #4]
}
 8003026:	bf00      	nop
 8003028:	3710      	adds	r7, #16
 800302a:	46bd      	mov	sp, r7
 800302c:	bd80      	pop	{r7, pc}
	...

08003030 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003030:	b580      	push	{r7, lr}
 8003032:	b086      	sub	sp, #24
 8003034:	af00      	add	r7, sp, #0
 8003036:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003038:	2300      	movs	r3, #0
 800303a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800303c:	f7ff f8ea 	bl	8002214 <HAL_GetTick>
 8003040:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	2b00      	cmp	r3, #0
 8003046:	d101      	bne.n	800304c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003048:	2301      	movs	r3, #1
 800304a:	e099      	b.n	8003180 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	2202      	movs	r2, #2
 8003050:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	2200      	movs	r2, #0
 8003058:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	681a      	ldr	r2, [r3, #0]
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	f022 0201 	bic.w	r2, r2, #1
 800306a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800306c:	e00f      	b.n	800308e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800306e:	f7ff f8d1 	bl	8002214 <HAL_GetTick>
 8003072:	4602      	mov	r2, r0
 8003074:	693b      	ldr	r3, [r7, #16]
 8003076:	1ad3      	subs	r3, r2, r3
 8003078:	2b05      	cmp	r3, #5
 800307a:	d908      	bls.n	800308e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	2220      	movs	r2, #32
 8003080:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	2203      	movs	r2, #3
 8003086:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800308a:	2303      	movs	r3, #3
 800308c:	e078      	b.n	8003180 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	f003 0301 	and.w	r3, r3, #1
 8003098:	2b00      	cmp	r3, #0
 800309a:	d1e8      	bne.n	800306e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80030a4:	697a      	ldr	r2, [r7, #20]
 80030a6:	4b38      	ldr	r3, [pc, #224]	; (8003188 <HAL_DMA_Init+0x158>)
 80030a8:	4013      	ands	r3, r2
 80030aa:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	685a      	ldr	r2, [r3, #4]
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	689b      	ldr	r3, [r3, #8]
 80030b4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80030ba:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	691b      	ldr	r3, [r3, #16]
 80030c0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80030c6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	699b      	ldr	r3, [r3, #24]
 80030cc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80030d2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	6a1b      	ldr	r3, [r3, #32]
 80030d8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80030da:	697a      	ldr	r2, [r7, #20]
 80030dc:	4313      	orrs	r3, r2
 80030de:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030e4:	2b04      	cmp	r3, #4
 80030e6:	d107      	bne.n	80030f8 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030f0:	4313      	orrs	r3, r2
 80030f2:	697a      	ldr	r2, [r7, #20]
 80030f4:	4313      	orrs	r3, r2
 80030f6:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	697a      	ldr	r2, [r7, #20]
 80030fe:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	695b      	ldr	r3, [r3, #20]
 8003106:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003108:	697b      	ldr	r3, [r7, #20]
 800310a:	f023 0307 	bic.w	r3, r3, #7
 800310e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003114:	697a      	ldr	r2, [r7, #20]
 8003116:	4313      	orrs	r3, r2
 8003118:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800311e:	2b04      	cmp	r3, #4
 8003120:	d117      	bne.n	8003152 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003126:	697a      	ldr	r2, [r7, #20]
 8003128:	4313      	orrs	r3, r2
 800312a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003130:	2b00      	cmp	r3, #0
 8003132:	d00e      	beq.n	8003152 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003134:	6878      	ldr	r0, [r7, #4]
 8003136:	f000 fa6f 	bl	8003618 <DMA_CheckFifoParam>
 800313a:	4603      	mov	r3, r0
 800313c:	2b00      	cmp	r3, #0
 800313e:	d008      	beq.n	8003152 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	2240      	movs	r2, #64	; 0x40
 8003144:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	2201      	movs	r2, #1
 800314a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800314e:	2301      	movs	r3, #1
 8003150:	e016      	b.n	8003180 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	697a      	ldr	r2, [r7, #20]
 8003158:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800315a:	6878      	ldr	r0, [r7, #4]
 800315c:	f000 fa26 	bl	80035ac <DMA_CalcBaseAndBitshift>
 8003160:	4603      	mov	r3, r0
 8003162:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003168:	223f      	movs	r2, #63	; 0x3f
 800316a:	409a      	lsls	r2, r3
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	2200      	movs	r2, #0
 8003174:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	2201      	movs	r2, #1
 800317a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800317e:	2300      	movs	r3, #0
}
 8003180:	4618      	mov	r0, r3
 8003182:	3718      	adds	r7, #24
 8003184:	46bd      	mov	sp, r7
 8003186:	bd80      	pop	{r7, pc}
 8003188:	f010803f 	.word	0xf010803f

0800318c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800318c:	b580      	push	{r7, lr}
 800318e:	b086      	sub	sp, #24
 8003190:	af00      	add	r7, sp, #0
 8003192:	60f8      	str	r0, [r7, #12]
 8003194:	60b9      	str	r1, [r7, #8]
 8003196:	607a      	str	r2, [r7, #4]
 8003198:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800319a:	2300      	movs	r3, #0
 800319c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031a2:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80031aa:	2b01      	cmp	r3, #1
 80031ac:	d101      	bne.n	80031b2 <HAL_DMA_Start_IT+0x26>
 80031ae:	2302      	movs	r3, #2
 80031b0:	e040      	b.n	8003234 <HAL_DMA_Start_IT+0xa8>
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	2201      	movs	r2, #1
 80031b6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80031c0:	b2db      	uxtb	r3, r3
 80031c2:	2b01      	cmp	r3, #1
 80031c4:	d12f      	bne.n	8003226 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	2202      	movs	r2, #2
 80031ca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	2200      	movs	r2, #0
 80031d2:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80031d4:	683b      	ldr	r3, [r7, #0]
 80031d6:	687a      	ldr	r2, [r7, #4]
 80031d8:	68b9      	ldr	r1, [r7, #8]
 80031da:	68f8      	ldr	r0, [r7, #12]
 80031dc:	f000 f9b8 	bl	8003550 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80031e4:	223f      	movs	r2, #63	; 0x3f
 80031e6:	409a      	lsls	r2, r3
 80031e8:	693b      	ldr	r3, [r7, #16]
 80031ea:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	681a      	ldr	r2, [r3, #0]
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	f042 0216 	orr.w	r2, r2, #22
 80031fa:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003200:	2b00      	cmp	r3, #0
 8003202:	d007      	beq.n	8003214 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	681a      	ldr	r2, [r3, #0]
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	f042 0208 	orr.w	r2, r2, #8
 8003212:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	681a      	ldr	r2, [r3, #0]
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	f042 0201 	orr.w	r2, r2, #1
 8003222:	601a      	str	r2, [r3, #0]
 8003224:	e005      	b.n	8003232 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	2200      	movs	r2, #0
 800322a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800322e:	2302      	movs	r3, #2
 8003230:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8003232:	7dfb      	ldrb	r3, [r7, #23]
}
 8003234:	4618      	mov	r0, r3
 8003236:	3718      	adds	r7, #24
 8003238:	46bd      	mov	sp, r7
 800323a:	bd80      	pop	{r7, pc}

0800323c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800323c:	b580      	push	{r7, lr}
 800323e:	b086      	sub	sp, #24
 8003240:	af00      	add	r7, sp, #0
 8003242:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003244:	2300      	movs	r3, #0
 8003246:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003248:	4b8e      	ldr	r3, [pc, #568]	; (8003484 <HAL_DMA_IRQHandler+0x248>)
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	4a8e      	ldr	r2, [pc, #568]	; (8003488 <HAL_DMA_IRQHandler+0x24c>)
 800324e:	fba2 2303 	umull	r2, r3, r2, r3
 8003252:	0a9b      	lsrs	r3, r3, #10
 8003254:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800325a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800325c:	693b      	ldr	r3, [r7, #16]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003266:	2208      	movs	r2, #8
 8003268:	409a      	lsls	r2, r3
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	4013      	ands	r3, r2
 800326e:	2b00      	cmp	r3, #0
 8003270:	d01a      	beq.n	80032a8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	f003 0304 	and.w	r3, r3, #4
 800327c:	2b00      	cmp	r3, #0
 800327e:	d013      	beq.n	80032a8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	681a      	ldr	r2, [r3, #0]
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	f022 0204 	bic.w	r2, r2, #4
 800328e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003294:	2208      	movs	r2, #8
 8003296:	409a      	lsls	r2, r3
 8003298:	693b      	ldr	r3, [r7, #16]
 800329a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032a0:	f043 0201 	orr.w	r2, r3, #1
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032ac:	2201      	movs	r2, #1
 80032ae:	409a      	lsls	r2, r3
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	4013      	ands	r3, r2
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d012      	beq.n	80032de <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	695b      	ldr	r3, [r3, #20]
 80032be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d00b      	beq.n	80032de <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032ca:	2201      	movs	r2, #1
 80032cc:	409a      	lsls	r2, r3
 80032ce:	693b      	ldr	r3, [r7, #16]
 80032d0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032d6:	f043 0202 	orr.w	r2, r3, #2
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032e2:	2204      	movs	r2, #4
 80032e4:	409a      	lsls	r2, r3
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	4013      	ands	r3, r2
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d012      	beq.n	8003314 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	f003 0302 	and.w	r3, r3, #2
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d00b      	beq.n	8003314 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003300:	2204      	movs	r2, #4
 8003302:	409a      	lsls	r2, r3
 8003304:	693b      	ldr	r3, [r7, #16]
 8003306:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800330c:	f043 0204 	orr.w	r2, r3, #4
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003318:	2210      	movs	r2, #16
 800331a:	409a      	lsls	r2, r3
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	4013      	ands	r3, r2
 8003320:	2b00      	cmp	r3, #0
 8003322:	d043      	beq.n	80033ac <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	f003 0308 	and.w	r3, r3, #8
 800332e:	2b00      	cmp	r3, #0
 8003330:	d03c      	beq.n	80033ac <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003336:	2210      	movs	r2, #16
 8003338:	409a      	lsls	r2, r3
 800333a:	693b      	ldr	r3, [r7, #16]
 800333c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003348:	2b00      	cmp	r3, #0
 800334a:	d018      	beq.n	800337e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003356:	2b00      	cmp	r3, #0
 8003358:	d108      	bne.n	800336c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800335e:	2b00      	cmp	r3, #0
 8003360:	d024      	beq.n	80033ac <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003366:	6878      	ldr	r0, [r7, #4]
 8003368:	4798      	blx	r3
 800336a:	e01f      	b.n	80033ac <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003370:	2b00      	cmp	r3, #0
 8003372:	d01b      	beq.n	80033ac <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003378:	6878      	ldr	r0, [r7, #4]
 800337a:	4798      	blx	r3
 800337c:	e016      	b.n	80033ac <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003388:	2b00      	cmp	r3, #0
 800338a:	d107      	bne.n	800339c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	681a      	ldr	r2, [r3, #0]
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	f022 0208 	bic.w	r2, r2, #8
 800339a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d003      	beq.n	80033ac <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033a8:	6878      	ldr	r0, [r7, #4]
 80033aa:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033b0:	2220      	movs	r2, #32
 80033b2:	409a      	lsls	r2, r3
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	4013      	ands	r3, r2
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	f000 808f 	beq.w	80034dc <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	f003 0310 	and.w	r3, r3, #16
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	f000 8087 	beq.w	80034dc <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033d2:	2220      	movs	r2, #32
 80033d4:	409a      	lsls	r2, r3
 80033d6:	693b      	ldr	r3, [r7, #16]
 80033d8:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80033e0:	b2db      	uxtb	r3, r3
 80033e2:	2b05      	cmp	r3, #5
 80033e4:	d136      	bne.n	8003454 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	681a      	ldr	r2, [r3, #0]
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	f022 0216 	bic.w	r2, r2, #22
 80033f4:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	695a      	ldr	r2, [r3, #20]
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003404:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800340a:	2b00      	cmp	r3, #0
 800340c:	d103      	bne.n	8003416 <HAL_DMA_IRQHandler+0x1da>
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003412:	2b00      	cmp	r3, #0
 8003414:	d007      	beq.n	8003426 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	681a      	ldr	r2, [r3, #0]
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	f022 0208 	bic.w	r2, r2, #8
 8003424:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800342a:	223f      	movs	r2, #63	; 0x3f
 800342c:	409a      	lsls	r2, r3
 800342e:	693b      	ldr	r3, [r7, #16]
 8003430:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	2201      	movs	r2, #1
 8003436:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	2200      	movs	r2, #0
 800343e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003446:	2b00      	cmp	r3, #0
 8003448:	d07e      	beq.n	8003548 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800344e:	6878      	ldr	r0, [r7, #4]
 8003450:	4798      	blx	r3
        }
        return;
 8003452:	e079      	b.n	8003548 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800345e:	2b00      	cmp	r3, #0
 8003460:	d01d      	beq.n	800349e <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800346c:	2b00      	cmp	r3, #0
 800346e:	d10d      	bne.n	800348c <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003474:	2b00      	cmp	r3, #0
 8003476:	d031      	beq.n	80034dc <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800347c:	6878      	ldr	r0, [r7, #4]
 800347e:	4798      	blx	r3
 8003480:	e02c      	b.n	80034dc <HAL_DMA_IRQHandler+0x2a0>
 8003482:	bf00      	nop
 8003484:	20000018 	.word	0x20000018
 8003488:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003490:	2b00      	cmp	r3, #0
 8003492:	d023      	beq.n	80034dc <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003498:	6878      	ldr	r0, [r7, #4]
 800349a:	4798      	blx	r3
 800349c:	e01e      	b.n	80034dc <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d10f      	bne.n	80034cc <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	681a      	ldr	r2, [r3, #0]
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	f022 0210 	bic.w	r2, r2, #16
 80034ba:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	2201      	movs	r2, #1
 80034c0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	2200      	movs	r2, #0
 80034c8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d003      	beq.n	80034dc <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80034d8:	6878      	ldr	r0, [r7, #4]
 80034da:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d032      	beq.n	800354a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80034e8:	f003 0301 	and.w	r3, r3, #1
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d022      	beq.n	8003536 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	2205      	movs	r2, #5
 80034f4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	681a      	ldr	r2, [r3, #0]
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	f022 0201 	bic.w	r2, r2, #1
 8003506:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003508:	68bb      	ldr	r3, [r7, #8]
 800350a:	3301      	adds	r3, #1
 800350c:	60bb      	str	r3, [r7, #8]
 800350e:	697a      	ldr	r2, [r7, #20]
 8003510:	429a      	cmp	r2, r3
 8003512:	d307      	bcc.n	8003524 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	f003 0301 	and.w	r3, r3, #1
 800351e:	2b00      	cmp	r3, #0
 8003520:	d1f2      	bne.n	8003508 <HAL_DMA_IRQHandler+0x2cc>
 8003522:	e000      	b.n	8003526 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8003524:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	2201      	movs	r2, #1
 800352a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	2200      	movs	r2, #0
 8003532:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800353a:	2b00      	cmp	r3, #0
 800353c:	d005      	beq.n	800354a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003542:	6878      	ldr	r0, [r7, #4]
 8003544:	4798      	blx	r3
 8003546:	e000      	b.n	800354a <HAL_DMA_IRQHandler+0x30e>
        return;
 8003548:	bf00      	nop
    }
  }
}
 800354a:	3718      	adds	r7, #24
 800354c:	46bd      	mov	sp, r7
 800354e:	bd80      	pop	{r7, pc}

08003550 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003550:	b480      	push	{r7}
 8003552:	b085      	sub	sp, #20
 8003554:	af00      	add	r7, sp, #0
 8003556:	60f8      	str	r0, [r7, #12]
 8003558:	60b9      	str	r1, [r7, #8]
 800355a:	607a      	str	r2, [r7, #4]
 800355c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	681a      	ldr	r2, [r3, #0]
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800356c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	683a      	ldr	r2, [r7, #0]
 8003574:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	689b      	ldr	r3, [r3, #8]
 800357a:	2b40      	cmp	r3, #64	; 0x40
 800357c:	d108      	bne.n	8003590 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	687a      	ldr	r2, [r7, #4]
 8003584:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	68ba      	ldr	r2, [r7, #8]
 800358c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800358e:	e007      	b.n	80035a0 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	68ba      	ldr	r2, [r7, #8]
 8003596:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	687a      	ldr	r2, [r7, #4]
 800359e:	60da      	str	r2, [r3, #12]
}
 80035a0:	bf00      	nop
 80035a2:	3714      	adds	r7, #20
 80035a4:	46bd      	mov	sp, r7
 80035a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035aa:	4770      	bx	lr

080035ac <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80035ac:	b480      	push	{r7}
 80035ae:	b085      	sub	sp, #20
 80035b0:	af00      	add	r7, sp, #0
 80035b2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	b2db      	uxtb	r3, r3
 80035ba:	3b10      	subs	r3, #16
 80035bc:	4a14      	ldr	r2, [pc, #80]	; (8003610 <DMA_CalcBaseAndBitshift+0x64>)
 80035be:	fba2 2303 	umull	r2, r3, r2, r3
 80035c2:	091b      	lsrs	r3, r3, #4
 80035c4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80035c6:	4a13      	ldr	r2, [pc, #76]	; (8003614 <DMA_CalcBaseAndBitshift+0x68>)
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	4413      	add	r3, r2
 80035cc:	781b      	ldrb	r3, [r3, #0]
 80035ce:	461a      	mov	r2, r3
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	2b03      	cmp	r3, #3
 80035d8:	d909      	bls.n	80035ee <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80035e2:	f023 0303 	bic.w	r3, r3, #3
 80035e6:	1d1a      	adds	r2, r3, #4
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	659a      	str	r2, [r3, #88]	; 0x58
 80035ec:	e007      	b.n	80035fe <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80035f6:	f023 0303 	bic.w	r3, r3, #3
 80035fa:	687a      	ldr	r2, [r7, #4]
 80035fc:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8003602:	4618      	mov	r0, r3
 8003604:	3714      	adds	r7, #20
 8003606:	46bd      	mov	sp, r7
 8003608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800360c:	4770      	bx	lr
 800360e:	bf00      	nop
 8003610:	aaaaaaab 	.word	0xaaaaaaab
 8003614:	0800bbac 	.word	0x0800bbac

08003618 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003618:	b480      	push	{r7}
 800361a:	b085      	sub	sp, #20
 800361c:	af00      	add	r7, sp, #0
 800361e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003620:	2300      	movs	r3, #0
 8003622:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003628:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	699b      	ldr	r3, [r3, #24]
 800362e:	2b00      	cmp	r3, #0
 8003630:	d11f      	bne.n	8003672 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003632:	68bb      	ldr	r3, [r7, #8]
 8003634:	2b03      	cmp	r3, #3
 8003636:	d856      	bhi.n	80036e6 <DMA_CheckFifoParam+0xce>
 8003638:	a201      	add	r2, pc, #4	; (adr r2, 8003640 <DMA_CheckFifoParam+0x28>)
 800363a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800363e:	bf00      	nop
 8003640:	08003651 	.word	0x08003651
 8003644:	08003663 	.word	0x08003663
 8003648:	08003651 	.word	0x08003651
 800364c:	080036e7 	.word	0x080036e7
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003654:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003658:	2b00      	cmp	r3, #0
 800365a:	d046      	beq.n	80036ea <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800365c:	2301      	movs	r3, #1
 800365e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003660:	e043      	b.n	80036ea <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003666:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800366a:	d140      	bne.n	80036ee <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800366c:	2301      	movs	r3, #1
 800366e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003670:	e03d      	b.n	80036ee <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	699b      	ldr	r3, [r3, #24]
 8003676:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800367a:	d121      	bne.n	80036c0 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800367c:	68bb      	ldr	r3, [r7, #8]
 800367e:	2b03      	cmp	r3, #3
 8003680:	d837      	bhi.n	80036f2 <DMA_CheckFifoParam+0xda>
 8003682:	a201      	add	r2, pc, #4	; (adr r2, 8003688 <DMA_CheckFifoParam+0x70>)
 8003684:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003688:	08003699 	.word	0x08003699
 800368c:	0800369f 	.word	0x0800369f
 8003690:	08003699 	.word	0x08003699
 8003694:	080036b1 	.word	0x080036b1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003698:	2301      	movs	r3, #1
 800369a:	73fb      	strb	r3, [r7, #15]
      break;
 800369c:	e030      	b.n	8003700 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036a2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d025      	beq.n	80036f6 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80036aa:	2301      	movs	r3, #1
 80036ac:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80036ae:	e022      	b.n	80036f6 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036b4:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80036b8:	d11f      	bne.n	80036fa <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80036ba:	2301      	movs	r3, #1
 80036bc:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80036be:	e01c      	b.n	80036fa <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80036c0:	68bb      	ldr	r3, [r7, #8]
 80036c2:	2b02      	cmp	r3, #2
 80036c4:	d903      	bls.n	80036ce <DMA_CheckFifoParam+0xb6>
 80036c6:	68bb      	ldr	r3, [r7, #8]
 80036c8:	2b03      	cmp	r3, #3
 80036ca:	d003      	beq.n	80036d4 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80036cc:	e018      	b.n	8003700 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80036ce:	2301      	movs	r3, #1
 80036d0:	73fb      	strb	r3, [r7, #15]
      break;
 80036d2:	e015      	b.n	8003700 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036d8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d00e      	beq.n	80036fe <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80036e0:	2301      	movs	r3, #1
 80036e2:	73fb      	strb	r3, [r7, #15]
      break;
 80036e4:	e00b      	b.n	80036fe <DMA_CheckFifoParam+0xe6>
      break;
 80036e6:	bf00      	nop
 80036e8:	e00a      	b.n	8003700 <DMA_CheckFifoParam+0xe8>
      break;
 80036ea:	bf00      	nop
 80036ec:	e008      	b.n	8003700 <DMA_CheckFifoParam+0xe8>
      break;
 80036ee:	bf00      	nop
 80036f0:	e006      	b.n	8003700 <DMA_CheckFifoParam+0xe8>
      break;
 80036f2:	bf00      	nop
 80036f4:	e004      	b.n	8003700 <DMA_CheckFifoParam+0xe8>
      break;
 80036f6:	bf00      	nop
 80036f8:	e002      	b.n	8003700 <DMA_CheckFifoParam+0xe8>
      break;   
 80036fa:	bf00      	nop
 80036fc:	e000      	b.n	8003700 <DMA_CheckFifoParam+0xe8>
      break;
 80036fe:	bf00      	nop
    }
  } 
  
  return status; 
 8003700:	7bfb      	ldrb	r3, [r7, #15]
}
 8003702:	4618      	mov	r0, r3
 8003704:	3714      	adds	r7, #20
 8003706:	46bd      	mov	sp, r7
 8003708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800370c:	4770      	bx	lr
 800370e:	bf00      	nop

08003710 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003710:	b480      	push	{r7}
 8003712:	b089      	sub	sp, #36	; 0x24
 8003714:	af00      	add	r7, sp, #0
 8003716:	6078      	str	r0, [r7, #4]
 8003718:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800371a:	2300      	movs	r3, #0
 800371c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800371e:	2300      	movs	r3, #0
 8003720:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003722:	2300      	movs	r3, #0
 8003724:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003726:	2300      	movs	r3, #0
 8003728:	61fb      	str	r3, [r7, #28]
 800372a:	e16b      	b.n	8003a04 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800372c:	2201      	movs	r2, #1
 800372e:	69fb      	ldr	r3, [r7, #28]
 8003730:	fa02 f303 	lsl.w	r3, r2, r3
 8003734:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003736:	683b      	ldr	r3, [r7, #0]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	697a      	ldr	r2, [r7, #20]
 800373c:	4013      	ands	r3, r2
 800373e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003740:	693a      	ldr	r2, [r7, #16]
 8003742:	697b      	ldr	r3, [r7, #20]
 8003744:	429a      	cmp	r2, r3
 8003746:	f040 815a 	bne.w	80039fe <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800374a:	683b      	ldr	r3, [r7, #0]
 800374c:	685b      	ldr	r3, [r3, #4]
 800374e:	f003 0303 	and.w	r3, r3, #3
 8003752:	2b01      	cmp	r3, #1
 8003754:	d005      	beq.n	8003762 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003756:	683b      	ldr	r3, [r7, #0]
 8003758:	685b      	ldr	r3, [r3, #4]
 800375a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800375e:	2b02      	cmp	r3, #2
 8003760:	d130      	bne.n	80037c4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	689b      	ldr	r3, [r3, #8]
 8003766:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003768:	69fb      	ldr	r3, [r7, #28]
 800376a:	005b      	lsls	r3, r3, #1
 800376c:	2203      	movs	r2, #3
 800376e:	fa02 f303 	lsl.w	r3, r2, r3
 8003772:	43db      	mvns	r3, r3
 8003774:	69ba      	ldr	r2, [r7, #24]
 8003776:	4013      	ands	r3, r2
 8003778:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800377a:	683b      	ldr	r3, [r7, #0]
 800377c:	68da      	ldr	r2, [r3, #12]
 800377e:	69fb      	ldr	r3, [r7, #28]
 8003780:	005b      	lsls	r3, r3, #1
 8003782:	fa02 f303 	lsl.w	r3, r2, r3
 8003786:	69ba      	ldr	r2, [r7, #24]
 8003788:	4313      	orrs	r3, r2
 800378a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	69ba      	ldr	r2, [r7, #24]
 8003790:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	685b      	ldr	r3, [r3, #4]
 8003796:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003798:	2201      	movs	r2, #1
 800379a:	69fb      	ldr	r3, [r7, #28]
 800379c:	fa02 f303 	lsl.w	r3, r2, r3
 80037a0:	43db      	mvns	r3, r3
 80037a2:	69ba      	ldr	r2, [r7, #24]
 80037a4:	4013      	ands	r3, r2
 80037a6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80037a8:	683b      	ldr	r3, [r7, #0]
 80037aa:	685b      	ldr	r3, [r3, #4]
 80037ac:	091b      	lsrs	r3, r3, #4
 80037ae:	f003 0201 	and.w	r2, r3, #1
 80037b2:	69fb      	ldr	r3, [r7, #28]
 80037b4:	fa02 f303 	lsl.w	r3, r2, r3
 80037b8:	69ba      	ldr	r2, [r7, #24]
 80037ba:	4313      	orrs	r3, r2
 80037bc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	69ba      	ldr	r2, [r7, #24]
 80037c2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80037c4:	683b      	ldr	r3, [r7, #0]
 80037c6:	685b      	ldr	r3, [r3, #4]
 80037c8:	f003 0303 	and.w	r3, r3, #3
 80037cc:	2b03      	cmp	r3, #3
 80037ce:	d017      	beq.n	8003800 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	68db      	ldr	r3, [r3, #12]
 80037d4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80037d6:	69fb      	ldr	r3, [r7, #28]
 80037d8:	005b      	lsls	r3, r3, #1
 80037da:	2203      	movs	r2, #3
 80037dc:	fa02 f303 	lsl.w	r3, r2, r3
 80037e0:	43db      	mvns	r3, r3
 80037e2:	69ba      	ldr	r2, [r7, #24]
 80037e4:	4013      	ands	r3, r2
 80037e6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80037e8:	683b      	ldr	r3, [r7, #0]
 80037ea:	689a      	ldr	r2, [r3, #8]
 80037ec:	69fb      	ldr	r3, [r7, #28]
 80037ee:	005b      	lsls	r3, r3, #1
 80037f0:	fa02 f303 	lsl.w	r3, r2, r3
 80037f4:	69ba      	ldr	r2, [r7, #24]
 80037f6:	4313      	orrs	r3, r2
 80037f8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	69ba      	ldr	r2, [r7, #24]
 80037fe:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003800:	683b      	ldr	r3, [r7, #0]
 8003802:	685b      	ldr	r3, [r3, #4]
 8003804:	f003 0303 	and.w	r3, r3, #3
 8003808:	2b02      	cmp	r3, #2
 800380a:	d123      	bne.n	8003854 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800380c:	69fb      	ldr	r3, [r7, #28]
 800380e:	08da      	lsrs	r2, r3, #3
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	3208      	adds	r2, #8
 8003814:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003818:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800381a:	69fb      	ldr	r3, [r7, #28]
 800381c:	f003 0307 	and.w	r3, r3, #7
 8003820:	009b      	lsls	r3, r3, #2
 8003822:	220f      	movs	r2, #15
 8003824:	fa02 f303 	lsl.w	r3, r2, r3
 8003828:	43db      	mvns	r3, r3
 800382a:	69ba      	ldr	r2, [r7, #24]
 800382c:	4013      	ands	r3, r2
 800382e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003830:	683b      	ldr	r3, [r7, #0]
 8003832:	691a      	ldr	r2, [r3, #16]
 8003834:	69fb      	ldr	r3, [r7, #28]
 8003836:	f003 0307 	and.w	r3, r3, #7
 800383a:	009b      	lsls	r3, r3, #2
 800383c:	fa02 f303 	lsl.w	r3, r2, r3
 8003840:	69ba      	ldr	r2, [r7, #24]
 8003842:	4313      	orrs	r3, r2
 8003844:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003846:	69fb      	ldr	r3, [r7, #28]
 8003848:	08da      	lsrs	r2, r3, #3
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	3208      	adds	r2, #8
 800384e:	69b9      	ldr	r1, [r7, #24]
 8003850:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800385a:	69fb      	ldr	r3, [r7, #28]
 800385c:	005b      	lsls	r3, r3, #1
 800385e:	2203      	movs	r2, #3
 8003860:	fa02 f303 	lsl.w	r3, r2, r3
 8003864:	43db      	mvns	r3, r3
 8003866:	69ba      	ldr	r2, [r7, #24]
 8003868:	4013      	ands	r3, r2
 800386a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800386c:	683b      	ldr	r3, [r7, #0]
 800386e:	685b      	ldr	r3, [r3, #4]
 8003870:	f003 0203 	and.w	r2, r3, #3
 8003874:	69fb      	ldr	r3, [r7, #28]
 8003876:	005b      	lsls	r3, r3, #1
 8003878:	fa02 f303 	lsl.w	r3, r2, r3
 800387c:	69ba      	ldr	r2, [r7, #24]
 800387e:	4313      	orrs	r3, r2
 8003880:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	69ba      	ldr	r2, [r7, #24]
 8003886:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003888:	683b      	ldr	r3, [r7, #0]
 800388a:	685b      	ldr	r3, [r3, #4]
 800388c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003890:	2b00      	cmp	r3, #0
 8003892:	f000 80b4 	beq.w	80039fe <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003896:	2300      	movs	r3, #0
 8003898:	60fb      	str	r3, [r7, #12]
 800389a:	4b60      	ldr	r3, [pc, #384]	; (8003a1c <HAL_GPIO_Init+0x30c>)
 800389c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800389e:	4a5f      	ldr	r2, [pc, #380]	; (8003a1c <HAL_GPIO_Init+0x30c>)
 80038a0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80038a4:	6453      	str	r3, [r2, #68]	; 0x44
 80038a6:	4b5d      	ldr	r3, [pc, #372]	; (8003a1c <HAL_GPIO_Init+0x30c>)
 80038a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038aa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80038ae:	60fb      	str	r3, [r7, #12]
 80038b0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80038b2:	4a5b      	ldr	r2, [pc, #364]	; (8003a20 <HAL_GPIO_Init+0x310>)
 80038b4:	69fb      	ldr	r3, [r7, #28]
 80038b6:	089b      	lsrs	r3, r3, #2
 80038b8:	3302      	adds	r3, #2
 80038ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80038be:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80038c0:	69fb      	ldr	r3, [r7, #28]
 80038c2:	f003 0303 	and.w	r3, r3, #3
 80038c6:	009b      	lsls	r3, r3, #2
 80038c8:	220f      	movs	r2, #15
 80038ca:	fa02 f303 	lsl.w	r3, r2, r3
 80038ce:	43db      	mvns	r3, r3
 80038d0:	69ba      	ldr	r2, [r7, #24]
 80038d2:	4013      	ands	r3, r2
 80038d4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	4a52      	ldr	r2, [pc, #328]	; (8003a24 <HAL_GPIO_Init+0x314>)
 80038da:	4293      	cmp	r3, r2
 80038dc:	d02b      	beq.n	8003936 <HAL_GPIO_Init+0x226>
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	4a51      	ldr	r2, [pc, #324]	; (8003a28 <HAL_GPIO_Init+0x318>)
 80038e2:	4293      	cmp	r3, r2
 80038e4:	d025      	beq.n	8003932 <HAL_GPIO_Init+0x222>
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	4a50      	ldr	r2, [pc, #320]	; (8003a2c <HAL_GPIO_Init+0x31c>)
 80038ea:	4293      	cmp	r3, r2
 80038ec:	d01f      	beq.n	800392e <HAL_GPIO_Init+0x21e>
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	4a4f      	ldr	r2, [pc, #316]	; (8003a30 <HAL_GPIO_Init+0x320>)
 80038f2:	4293      	cmp	r3, r2
 80038f4:	d019      	beq.n	800392a <HAL_GPIO_Init+0x21a>
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	4a4e      	ldr	r2, [pc, #312]	; (8003a34 <HAL_GPIO_Init+0x324>)
 80038fa:	4293      	cmp	r3, r2
 80038fc:	d013      	beq.n	8003926 <HAL_GPIO_Init+0x216>
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	4a4d      	ldr	r2, [pc, #308]	; (8003a38 <HAL_GPIO_Init+0x328>)
 8003902:	4293      	cmp	r3, r2
 8003904:	d00d      	beq.n	8003922 <HAL_GPIO_Init+0x212>
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	4a4c      	ldr	r2, [pc, #304]	; (8003a3c <HAL_GPIO_Init+0x32c>)
 800390a:	4293      	cmp	r3, r2
 800390c:	d007      	beq.n	800391e <HAL_GPIO_Init+0x20e>
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	4a4b      	ldr	r2, [pc, #300]	; (8003a40 <HAL_GPIO_Init+0x330>)
 8003912:	4293      	cmp	r3, r2
 8003914:	d101      	bne.n	800391a <HAL_GPIO_Init+0x20a>
 8003916:	2307      	movs	r3, #7
 8003918:	e00e      	b.n	8003938 <HAL_GPIO_Init+0x228>
 800391a:	2308      	movs	r3, #8
 800391c:	e00c      	b.n	8003938 <HAL_GPIO_Init+0x228>
 800391e:	2306      	movs	r3, #6
 8003920:	e00a      	b.n	8003938 <HAL_GPIO_Init+0x228>
 8003922:	2305      	movs	r3, #5
 8003924:	e008      	b.n	8003938 <HAL_GPIO_Init+0x228>
 8003926:	2304      	movs	r3, #4
 8003928:	e006      	b.n	8003938 <HAL_GPIO_Init+0x228>
 800392a:	2303      	movs	r3, #3
 800392c:	e004      	b.n	8003938 <HAL_GPIO_Init+0x228>
 800392e:	2302      	movs	r3, #2
 8003930:	e002      	b.n	8003938 <HAL_GPIO_Init+0x228>
 8003932:	2301      	movs	r3, #1
 8003934:	e000      	b.n	8003938 <HAL_GPIO_Init+0x228>
 8003936:	2300      	movs	r3, #0
 8003938:	69fa      	ldr	r2, [r7, #28]
 800393a:	f002 0203 	and.w	r2, r2, #3
 800393e:	0092      	lsls	r2, r2, #2
 8003940:	4093      	lsls	r3, r2
 8003942:	69ba      	ldr	r2, [r7, #24]
 8003944:	4313      	orrs	r3, r2
 8003946:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003948:	4935      	ldr	r1, [pc, #212]	; (8003a20 <HAL_GPIO_Init+0x310>)
 800394a:	69fb      	ldr	r3, [r7, #28]
 800394c:	089b      	lsrs	r3, r3, #2
 800394e:	3302      	adds	r3, #2
 8003950:	69ba      	ldr	r2, [r7, #24]
 8003952:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003956:	4b3b      	ldr	r3, [pc, #236]	; (8003a44 <HAL_GPIO_Init+0x334>)
 8003958:	689b      	ldr	r3, [r3, #8]
 800395a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800395c:	693b      	ldr	r3, [r7, #16]
 800395e:	43db      	mvns	r3, r3
 8003960:	69ba      	ldr	r2, [r7, #24]
 8003962:	4013      	ands	r3, r2
 8003964:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003966:	683b      	ldr	r3, [r7, #0]
 8003968:	685b      	ldr	r3, [r3, #4]
 800396a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800396e:	2b00      	cmp	r3, #0
 8003970:	d003      	beq.n	800397a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8003972:	69ba      	ldr	r2, [r7, #24]
 8003974:	693b      	ldr	r3, [r7, #16]
 8003976:	4313      	orrs	r3, r2
 8003978:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800397a:	4a32      	ldr	r2, [pc, #200]	; (8003a44 <HAL_GPIO_Init+0x334>)
 800397c:	69bb      	ldr	r3, [r7, #24]
 800397e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003980:	4b30      	ldr	r3, [pc, #192]	; (8003a44 <HAL_GPIO_Init+0x334>)
 8003982:	68db      	ldr	r3, [r3, #12]
 8003984:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003986:	693b      	ldr	r3, [r7, #16]
 8003988:	43db      	mvns	r3, r3
 800398a:	69ba      	ldr	r2, [r7, #24]
 800398c:	4013      	ands	r3, r2
 800398e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003990:	683b      	ldr	r3, [r7, #0]
 8003992:	685b      	ldr	r3, [r3, #4]
 8003994:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003998:	2b00      	cmp	r3, #0
 800399a:	d003      	beq.n	80039a4 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800399c:	69ba      	ldr	r2, [r7, #24]
 800399e:	693b      	ldr	r3, [r7, #16]
 80039a0:	4313      	orrs	r3, r2
 80039a2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80039a4:	4a27      	ldr	r2, [pc, #156]	; (8003a44 <HAL_GPIO_Init+0x334>)
 80039a6:	69bb      	ldr	r3, [r7, #24]
 80039a8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80039aa:	4b26      	ldr	r3, [pc, #152]	; (8003a44 <HAL_GPIO_Init+0x334>)
 80039ac:	685b      	ldr	r3, [r3, #4]
 80039ae:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80039b0:	693b      	ldr	r3, [r7, #16]
 80039b2:	43db      	mvns	r3, r3
 80039b4:	69ba      	ldr	r2, [r7, #24]
 80039b6:	4013      	ands	r3, r2
 80039b8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80039ba:	683b      	ldr	r3, [r7, #0]
 80039bc:	685b      	ldr	r3, [r3, #4]
 80039be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d003      	beq.n	80039ce <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80039c6:	69ba      	ldr	r2, [r7, #24]
 80039c8:	693b      	ldr	r3, [r7, #16]
 80039ca:	4313      	orrs	r3, r2
 80039cc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80039ce:	4a1d      	ldr	r2, [pc, #116]	; (8003a44 <HAL_GPIO_Init+0x334>)
 80039d0:	69bb      	ldr	r3, [r7, #24]
 80039d2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80039d4:	4b1b      	ldr	r3, [pc, #108]	; (8003a44 <HAL_GPIO_Init+0x334>)
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80039da:	693b      	ldr	r3, [r7, #16]
 80039dc:	43db      	mvns	r3, r3
 80039de:	69ba      	ldr	r2, [r7, #24]
 80039e0:	4013      	ands	r3, r2
 80039e2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80039e4:	683b      	ldr	r3, [r7, #0]
 80039e6:	685b      	ldr	r3, [r3, #4]
 80039e8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d003      	beq.n	80039f8 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80039f0:	69ba      	ldr	r2, [r7, #24]
 80039f2:	693b      	ldr	r3, [r7, #16]
 80039f4:	4313      	orrs	r3, r2
 80039f6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80039f8:	4a12      	ldr	r2, [pc, #72]	; (8003a44 <HAL_GPIO_Init+0x334>)
 80039fa:	69bb      	ldr	r3, [r7, #24]
 80039fc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80039fe:	69fb      	ldr	r3, [r7, #28]
 8003a00:	3301      	adds	r3, #1
 8003a02:	61fb      	str	r3, [r7, #28]
 8003a04:	69fb      	ldr	r3, [r7, #28]
 8003a06:	2b0f      	cmp	r3, #15
 8003a08:	f67f ae90 	bls.w	800372c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003a0c:	bf00      	nop
 8003a0e:	bf00      	nop
 8003a10:	3724      	adds	r7, #36	; 0x24
 8003a12:	46bd      	mov	sp, r7
 8003a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a18:	4770      	bx	lr
 8003a1a:	bf00      	nop
 8003a1c:	40023800 	.word	0x40023800
 8003a20:	40013800 	.word	0x40013800
 8003a24:	40020000 	.word	0x40020000
 8003a28:	40020400 	.word	0x40020400
 8003a2c:	40020800 	.word	0x40020800
 8003a30:	40020c00 	.word	0x40020c00
 8003a34:	40021000 	.word	0x40021000
 8003a38:	40021400 	.word	0x40021400
 8003a3c:	40021800 	.word	0x40021800
 8003a40:	40021c00 	.word	0x40021c00
 8003a44:	40013c00 	.word	0x40013c00

08003a48 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003a48:	b480      	push	{r7}
 8003a4a:	b083      	sub	sp, #12
 8003a4c:	af00      	add	r7, sp, #0
 8003a4e:	6078      	str	r0, [r7, #4]
 8003a50:	460b      	mov	r3, r1
 8003a52:	807b      	strh	r3, [r7, #2]
 8003a54:	4613      	mov	r3, r2
 8003a56:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003a58:	787b      	ldrb	r3, [r7, #1]
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d003      	beq.n	8003a66 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003a5e:	887a      	ldrh	r2, [r7, #2]
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003a64:	e003      	b.n	8003a6e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003a66:	887b      	ldrh	r3, [r7, #2]
 8003a68:	041a      	lsls	r2, r3, #16
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	619a      	str	r2, [r3, #24]
}
 8003a6e:	bf00      	nop
 8003a70:	370c      	adds	r7, #12
 8003a72:	46bd      	mov	sp, r7
 8003a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a78:	4770      	bx	lr
	...

08003a7c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003a7c:	b580      	push	{r7, lr}
 8003a7e:	b082      	sub	sp, #8
 8003a80:	af00      	add	r7, sp, #0
 8003a82:	4603      	mov	r3, r0
 8003a84:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8003a86:	4b08      	ldr	r3, [pc, #32]	; (8003aa8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003a88:	695a      	ldr	r2, [r3, #20]
 8003a8a:	88fb      	ldrh	r3, [r7, #6]
 8003a8c:	4013      	ands	r3, r2
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d006      	beq.n	8003aa0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003a92:	4a05      	ldr	r2, [pc, #20]	; (8003aa8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003a94:	88fb      	ldrh	r3, [r7, #6]
 8003a96:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003a98:	88fb      	ldrh	r3, [r7, #6]
 8003a9a:	4618      	mov	r0, r3
 8003a9c:	f000 f806 	bl	8003aac <HAL_GPIO_EXTI_Callback>
  }
}
 8003aa0:	bf00      	nop
 8003aa2:	3708      	adds	r7, #8
 8003aa4:	46bd      	mov	sp, r7
 8003aa6:	bd80      	pop	{r7, pc}
 8003aa8:	40013c00 	.word	0x40013c00

08003aac <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8003aac:	b480      	push	{r7}
 8003aae:	b083      	sub	sp, #12
 8003ab0:	af00      	add	r7, sp, #0
 8003ab2:	4603      	mov	r3, r0
 8003ab4:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8003ab6:	bf00      	nop
 8003ab8:	370c      	adds	r7, #12
 8003aba:	46bd      	mov	sp, r7
 8003abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ac0:	4770      	bx	lr
	...

08003ac4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003ac4:	b580      	push	{r7, lr}
 8003ac6:	b086      	sub	sp, #24
 8003ac8:	af00      	add	r7, sp, #0
 8003aca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d101      	bne.n	8003ad6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003ad2:	2301      	movs	r3, #1
 8003ad4:	e267      	b.n	8003fa6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	f003 0301 	and.w	r3, r3, #1
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d075      	beq.n	8003bce <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003ae2:	4b88      	ldr	r3, [pc, #544]	; (8003d04 <HAL_RCC_OscConfig+0x240>)
 8003ae4:	689b      	ldr	r3, [r3, #8]
 8003ae6:	f003 030c 	and.w	r3, r3, #12
 8003aea:	2b04      	cmp	r3, #4
 8003aec:	d00c      	beq.n	8003b08 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003aee:	4b85      	ldr	r3, [pc, #532]	; (8003d04 <HAL_RCC_OscConfig+0x240>)
 8003af0:	689b      	ldr	r3, [r3, #8]
 8003af2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003af6:	2b08      	cmp	r3, #8
 8003af8:	d112      	bne.n	8003b20 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003afa:	4b82      	ldr	r3, [pc, #520]	; (8003d04 <HAL_RCC_OscConfig+0x240>)
 8003afc:	685b      	ldr	r3, [r3, #4]
 8003afe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003b02:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003b06:	d10b      	bne.n	8003b20 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003b08:	4b7e      	ldr	r3, [pc, #504]	; (8003d04 <HAL_RCC_OscConfig+0x240>)
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d05b      	beq.n	8003bcc <HAL_RCC_OscConfig+0x108>
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	685b      	ldr	r3, [r3, #4]
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d157      	bne.n	8003bcc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003b1c:	2301      	movs	r3, #1
 8003b1e:	e242      	b.n	8003fa6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	685b      	ldr	r3, [r3, #4]
 8003b24:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003b28:	d106      	bne.n	8003b38 <HAL_RCC_OscConfig+0x74>
 8003b2a:	4b76      	ldr	r3, [pc, #472]	; (8003d04 <HAL_RCC_OscConfig+0x240>)
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	4a75      	ldr	r2, [pc, #468]	; (8003d04 <HAL_RCC_OscConfig+0x240>)
 8003b30:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003b34:	6013      	str	r3, [r2, #0]
 8003b36:	e01d      	b.n	8003b74 <HAL_RCC_OscConfig+0xb0>
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	685b      	ldr	r3, [r3, #4]
 8003b3c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003b40:	d10c      	bne.n	8003b5c <HAL_RCC_OscConfig+0x98>
 8003b42:	4b70      	ldr	r3, [pc, #448]	; (8003d04 <HAL_RCC_OscConfig+0x240>)
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	4a6f      	ldr	r2, [pc, #444]	; (8003d04 <HAL_RCC_OscConfig+0x240>)
 8003b48:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003b4c:	6013      	str	r3, [r2, #0]
 8003b4e:	4b6d      	ldr	r3, [pc, #436]	; (8003d04 <HAL_RCC_OscConfig+0x240>)
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	4a6c      	ldr	r2, [pc, #432]	; (8003d04 <HAL_RCC_OscConfig+0x240>)
 8003b54:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003b58:	6013      	str	r3, [r2, #0]
 8003b5a:	e00b      	b.n	8003b74 <HAL_RCC_OscConfig+0xb0>
 8003b5c:	4b69      	ldr	r3, [pc, #420]	; (8003d04 <HAL_RCC_OscConfig+0x240>)
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	4a68      	ldr	r2, [pc, #416]	; (8003d04 <HAL_RCC_OscConfig+0x240>)
 8003b62:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003b66:	6013      	str	r3, [r2, #0]
 8003b68:	4b66      	ldr	r3, [pc, #408]	; (8003d04 <HAL_RCC_OscConfig+0x240>)
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	4a65      	ldr	r2, [pc, #404]	; (8003d04 <HAL_RCC_OscConfig+0x240>)
 8003b6e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003b72:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	685b      	ldr	r3, [r3, #4]
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d013      	beq.n	8003ba4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b7c:	f7fe fb4a 	bl	8002214 <HAL_GetTick>
 8003b80:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003b82:	e008      	b.n	8003b96 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003b84:	f7fe fb46 	bl	8002214 <HAL_GetTick>
 8003b88:	4602      	mov	r2, r0
 8003b8a:	693b      	ldr	r3, [r7, #16]
 8003b8c:	1ad3      	subs	r3, r2, r3
 8003b8e:	2b64      	cmp	r3, #100	; 0x64
 8003b90:	d901      	bls.n	8003b96 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003b92:	2303      	movs	r3, #3
 8003b94:	e207      	b.n	8003fa6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003b96:	4b5b      	ldr	r3, [pc, #364]	; (8003d04 <HAL_RCC_OscConfig+0x240>)
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d0f0      	beq.n	8003b84 <HAL_RCC_OscConfig+0xc0>
 8003ba2:	e014      	b.n	8003bce <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ba4:	f7fe fb36 	bl	8002214 <HAL_GetTick>
 8003ba8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003baa:	e008      	b.n	8003bbe <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003bac:	f7fe fb32 	bl	8002214 <HAL_GetTick>
 8003bb0:	4602      	mov	r2, r0
 8003bb2:	693b      	ldr	r3, [r7, #16]
 8003bb4:	1ad3      	subs	r3, r2, r3
 8003bb6:	2b64      	cmp	r3, #100	; 0x64
 8003bb8:	d901      	bls.n	8003bbe <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003bba:	2303      	movs	r3, #3
 8003bbc:	e1f3      	b.n	8003fa6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003bbe:	4b51      	ldr	r3, [pc, #324]	; (8003d04 <HAL_RCC_OscConfig+0x240>)
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d1f0      	bne.n	8003bac <HAL_RCC_OscConfig+0xe8>
 8003bca:	e000      	b.n	8003bce <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003bcc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	f003 0302 	and.w	r3, r3, #2
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d063      	beq.n	8003ca2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003bda:	4b4a      	ldr	r3, [pc, #296]	; (8003d04 <HAL_RCC_OscConfig+0x240>)
 8003bdc:	689b      	ldr	r3, [r3, #8]
 8003bde:	f003 030c 	and.w	r3, r3, #12
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d00b      	beq.n	8003bfe <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003be6:	4b47      	ldr	r3, [pc, #284]	; (8003d04 <HAL_RCC_OscConfig+0x240>)
 8003be8:	689b      	ldr	r3, [r3, #8]
 8003bea:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003bee:	2b08      	cmp	r3, #8
 8003bf0:	d11c      	bne.n	8003c2c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003bf2:	4b44      	ldr	r3, [pc, #272]	; (8003d04 <HAL_RCC_OscConfig+0x240>)
 8003bf4:	685b      	ldr	r3, [r3, #4]
 8003bf6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d116      	bne.n	8003c2c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003bfe:	4b41      	ldr	r3, [pc, #260]	; (8003d04 <HAL_RCC_OscConfig+0x240>)
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	f003 0302 	and.w	r3, r3, #2
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d005      	beq.n	8003c16 <HAL_RCC_OscConfig+0x152>
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	68db      	ldr	r3, [r3, #12]
 8003c0e:	2b01      	cmp	r3, #1
 8003c10:	d001      	beq.n	8003c16 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003c12:	2301      	movs	r3, #1
 8003c14:	e1c7      	b.n	8003fa6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c16:	4b3b      	ldr	r3, [pc, #236]	; (8003d04 <HAL_RCC_OscConfig+0x240>)
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	691b      	ldr	r3, [r3, #16]
 8003c22:	00db      	lsls	r3, r3, #3
 8003c24:	4937      	ldr	r1, [pc, #220]	; (8003d04 <HAL_RCC_OscConfig+0x240>)
 8003c26:	4313      	orrs	r3, r2
 8003c28:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003c2a:	e03a      	b.n	8003ca2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	68db      	ldr	r3, [r3, #12]
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d020      	beq.n	8003c76 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003c34:	4b34      	ldr	r3, [pc, #208]	; (8003d08 <HAL_RCC_OscConfig+0x244>)
 8003c36:	2201      	movs	r2, #1
 8003c38:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c3a:	f7fe faeb 	bl	8002214 <HAL_GetTick>
 8003c3e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003c40:	e008      	b.n	8003c54 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003c42:	f7fe fae7 	bl	8002214 <HAL_GetTick>
 8003c46:	4602      	mov	r2, r0
 8003c48:	693b      	ldr	r3, [r7, #16]
 8003c4a:	1ad3      	subs	r3, r2, r3
 8003c4c:	2b02      	cmp	r3, #2
 8003c4e:	d901      	bls.n	8003c54 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003c50:	2303      	movs	r3, #3
 8003c52:	e1a8      	b.n	8003fa6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003c54:	4b2b      	ldr	r3, [pc, #172]	; (8003d04 <HAL_RCC_OscConfig+0x240>)
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	f003 0302 	and.w	r3, r3, #2
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d0f0      	beq.n	8003c42 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c60:	4b28      	ldr	r3, [pc, #160]	; (8003d04 <HAL_RCC_OscConfig+0x240>)
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	691b      	ldr	r3, [r3, #16]
 8003c6c:	00db      	lsls	r3, r3, #3
 8003c6e:	4925      	ldr	r1, [pc, #148]	; (8003d04 <HAL_RCC_OscConfig+0x240>)
 8003c70:	4313      	orrs	r3, r2
 8003c72:	600b      	str	r3, [r1, #0]
 8003c74:	e015      	b.n	8003ca2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003c76:	4b24      	ldr	r3, [pc, #144]	; (8003d08 <HAL_RCC_OscConfig+0x244>)
 8003c78:	2200      	movs	r2, #0
 8003c7a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c7c:	f7fe faca 	bl	8002214 <HAL_GetTick>
 8003c80:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003c82:	e008      	b.n	8003c96 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003c84:	f7fe fac6 	bl	8002214 <HAL_GetTick>
 8003c88:	4602      	mov	r2, r0
 8003c8a:	693b      	ldr	r3, [r7, #16]
 8003c8c:	1ad3      	subs	r3, r2, r3
 8003c8e:	2b02      	cmp	r3, #2
 8003c90:	d901      	bls.n	8003c96 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003c92:	2303      	movs	r3, #3
 8003c94:	e187      	b.n	8003fa6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003c96:	4b1b      	ldr	r3, [pc, #108]	; (8003d04 <HAL_RCC_OscConfig+0x240>)
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	f003 0302 	and.w	r3, r3, #2
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d1f0      	bne.n	8003c84 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	f003 0308 	and.w	r3, r3, #8
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d036      	beq.n	8003d1c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	695b      	ldr	r3, [r3, #20]
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d016      	beq.n	8003ce4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003cb6:	4b15      	ldr	r3, [pc, #84]	; (8003d0c <HAL_RCC_OscConfig+0x248>)
 8003cb8:	2201      	movs	r2, #1
 8003cba:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003cbc:	f7fe faaa 	bl	8002214 <HAL_GetTick>
 8003cc0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003cc2:	e008      	b.n	8003cd6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003cc4:	f7fe faa6 	bl	8002214 <HAL_GetTick>
 8003cc8:	4602      	mov	r2, r0
 8003cca:	693b      	ldr	r3, [r7, #16]
 8003ccc:	1ad3      	subs	r3, r2, r3
 8003cce:	2b02      	cmp	r3, #2
 8003cd0:	d901      	bls.n	8003cd6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003cd2:	2303      	movs	r3, #3
 8003cd4:	e167      	b.n	8003fa6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003cd6:	4b0b      	ldr	r3, [pc, #44]	; (8003d04 <HAL_RCC_OscConfig+0x240>)
 8003cd8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003cda:	f003 0302 	and.w	r3, r3, #2
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d0f0      	beq.n	8003cc4 <HAL_RCC_OscConfig+0x200>
 8003ce2:	e01b      	b.n	8003d1c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003ce4:	4b09      	ldr	r3, [pc, #36]	; (8003d0c <HAL_RCC_OscConfig+0x248>)
 8003ce6:	2200      	movs	r2, #0
 8003ce8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003cea:	f7fe fa93 	bl	8002214 <HAL_GetTick>
 8003cee:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003cf0:	e00e      	b.n	8003d10 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003cf2:	f7fe fa8f 	bl	8002214 <HAL_GetTick>
 8003cf6:	4602      	mov	r2, r0
 8003cf8:	693b      	ldr	r3, [r7, #16]
 8003cfa:	1ad3      	subs	r3, r2, r3
 8003cfc:	2b02      	cmp	r3, #2
 8003cfe:	d907      	bls.n	8003d10 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003d00:	2303      	movs	r3, #3
 8003d02:	e150      	b.n	8003fa6 <HAL_RCC_OscConfig+0x4e2>
 8003d04:	40023800 	.word	0x40023800
 8003d08:	42470000 	.word	0x42470000
 8003d0c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003d10:	4b88      	ldr	r3, [pc, #544]	; (8003f34 <HAL_RCC_OscConfig+0x470>)
 8003d12:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003d14:	f003 0302 	and.w	r3, r3, #2
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d1ea      	bne.n	8003cf2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	f003 0304 	and.w	r3, r3, #4
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	f000 8097 	beq.w	8003e58 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003d2a:	2300      	movs	r3, #0
 8003d2c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003d2e:	4b81      	ldr	r3, [pc, #516]	; (8003f34 <HAL_RCC_OscConfig+0x470>)
 8003d30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d32:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d10f      	bne.n	8003d5a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003d3a:	2300      	movs	r3, #0
 8003d3c:	60bb      	str	r3, [r7, #8]
 8003d3e:	4b7d      	ldr	r3, [pc, #500]	; (8003f34 <HAL_RCC_OscConfig+0x470>)
 8003d40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d42:	4a7c      	ldr	r2, [pc, #496]	; (8003f34 <HAL_RCC_OscConfig+0x470>)
 8003d44:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003d48:	6413      	str	r3, [r2, #64]	; 0x40
 8003d4a:	4b7a      	ldr	r3, [pc, #488]	; (8003f34 <HAL_RCC_OscConfig+0x470>)
 8003d4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d4e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d52:	60bb      	str	r3, [r7, #8]
 8003d54:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003d56:	2301      	movs	r3, #1
 8003d58:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d5a:	4b77      	ldr	r3, [pc, #476]	; (8003f38 <HAL_RCC_OscConfig+0x474>)
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d118      	bne.n	8003d98 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003d66:	4b74      	ldr	r3, [pc, #464]	; (8003f38 <HAL_RCC_OscConfig+0x474>)
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	4a73      	ldr	r2, [pc, #460]	; (8003f38 <HAL_RCC_OscConfig+0x474>)
 8003d6c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003d70:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003d72:	f7fe fa4f 	bl	8002214 <HAL_GetTick>
 8003d76:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d78:	e008      	b.n	8003d8c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003d7a:	f7fe fa4b 	bl	8002214 <HAL_GetTick>
 8003d7e:	4602      	mov	r2, r0
 8003d80:	693b      	ldr	r3, [r7, #16]
 8003d82:	1ad3      	subs	r3, r2, r3
 8003d84:	2b02      	cmp	r3, #2
 8003d86:	d901      	bls.n	8003d8c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003d88:	2303      	movs	r3, #3
 8003d8a:	e10c      	b.n	8003fa6 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d8c:	4b6a      	ldr	r3, [pc, #424]	; (8003f38 <HAL_RCC_OscConfig+0x474>)
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d0f0      	beq.n	8003d7a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	689b      	ldr	r3, [r3, #8]
 8003d9c:	2b01      	cmp	r3, #1
 8003d9e:	d106      	bne.n	8003dae <HAL_RCC_OscConfig+0x2ea>
 8003da0:	4b64      	ldr	r3, [pc, #400]	; (8003f34 <HAL_RCC_OscConfig+0x470>)
 8003da2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003da4:	4a63      	ldr	r2, [pc, #396]	; (8003f34 <HAL_RCC_OscConfig+0x470>)
 8003da6:	f043 0301 	orr.w	r3, r3, #1
 8003daa:	6713      	str	r3, [r2, #112]	; 0x70
 8003dac:	e01c      	b.n	8003de8 <HAL_RCC_OscConfig+0x324>
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	689b      	ldr	r3, [r3, #8]
 8003db2:	2b05      	cmp	r3, #5
 8003db4:	d10c      	bne.n	8003dd0 <HAL_RCC_OscConfig+0x30c>
 8003db6:	4b5f      	ldr	r3, [pc, #380]	; (8003f34 <HAL_RCC_OscConfig+0x470>)
 8003db8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003dba:	4a5e      	ldr	r2, [pc, #376]	; (8003f34 <HAL_RCC_OscConfig+0x470>)
 8003dbc:	f043 0304 	orr.w	r3, r3, #4
 8003dc0:	6713      	str	r3, [r2, #112]	; 0x70
 8003dc2:	4b5c      	ldr	r3, [pc, #368]	; (8003f34 <HAL_RCC_OscConfig+0x470>)
 8003dc4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003dc6:	4a5b      	ldr	r2, [pc, #364]	; (8003f34 <HAL_RCC_OscConfig+0x470>)
 8003dc8:	f043 0301 	orr.w	r3, r3, #1
 8003dcc:	6713      	str	r3, [r2, #112]	; 0x70
 8003dce:	e00b      	b.n	8003de8 <HAL_RCC_OscConfig+0x324>
 8003dd0:	4b58      	ldr	r3, [pc, #352]	; (8003f34 <HAL_RCC_OscConfig+0x470>)
 8003dd2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003dd4:	4a57      	ldr	r2, [pc, #348]	; (8003f34 <HAL_RCC_OscConfig+0x470>)
 8003dd6:	f023 0301 	bic.w	r3, r3, #1
 8003dda:	6713      	str	r3, [r2, #112]	; 0x70
 8003ddc:	4b55      	ldr	r3, [pc, #340]	; (8003f34 <HAL_RCC_OscConfig+0x470>)
 8003dde:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003de0:	4a54      	ldr	r2, [pc, #336]	; (8003f34 <HAL_RCC_OscConfig+0x470>)
 8003de2:	f023 0304 	bic.w	r3, r3, #4
 8003de6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	689b      	ldr	r3, [r3, #8]
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d015      	beq.n	8003e1c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003df0:	f7fe fa10 	bl	8002214 <HAL_GetTick>
 8003df4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003df6:	e00a      	b.n	8003e0e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003df8:	f7fe fa0c 	bl	8002214 <HAL_GetTick>
 8003dfc:	4602      	mov	r2, r0
 8003dfe:	693b      	ldr	r3, [r7, #16]
 8003e00:	1ad3      	subs	r3, r2, r3
 8003e02:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e06:	4293      	cmp	r3, r2
 8003e08:	d901      	bls.n	8003e0e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003e0a:	2303      	movs	r3, #3
 8003e0c:	e0cb      	b.n	8003fa6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003e0e:	4b49      	ldr	r3, [pc, #292]	; (8003f34 <HAL_RCC_OscConfig+0x470>)
 8003e10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e12:	f003 0302 	and.w	r3, r3, #2
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d0ee      	beq.n	8003df8 <HAL_RCC_OscConfig+0x334>
 8003e1a:	e014      	b.n	8003e46 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003e1c:	f7fe f9fa 	bl	8002214 <HAL_GetTick>
 8003e20:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003e22:	e00a      	b.n	8003e3a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003e24:	f7fe f9f6 	bl	8002214 <HAL_GetTick>
 8003e28:	4602      	mov	r2, r0
 8003e2a:	693b      	ldr	r3, [r7, #16]
 8003e2c:	1ad3      	subs	r3, r2, r3
 8003e2e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e32:	4293      	cmp	r3, r2
 8003e34:	d901      	bls.n	8003e3a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003e36:	2303      	movs	r3, #3
 8003e38:	e0b5      	b.n	8003fa6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003e3a:	4b3e      	ldr	r3, [pc, #248]	; (8003f34 <HAL_RCC_OscConfig+0x470>)
 8003e3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e3e:	f003 0302 	and.w	r3, r3, #2
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d1ee      	bne.n	8003e24 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003e46:	7dfb      	ldrb	r3, [r7, #23]
 8003e48:	2b01      	cmp	r3, #1
 8003e4a:	d105      	bne.n	8003e58 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003e4c:	4b39      	ldr	r3, [pc, #228]	; (8003f34 <HAL_RCC_OscConfig+0x470>)
 8003e4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e50:	4a38      	ldr	r2, [pc, #224]	; (8003f34 <HAL_RCC_OscConfig+0x470>)
 8003e52:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003e56:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	699b      	ldr	r3, [r3, #24]
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	f000 80a1 	beq.w	8003fa4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003e62:	4b34      	ldr	r3, [pc, #208]	; (8003f34 <HAL_RCC_OscConfig+0x470>)
 8003e64:	689b      	ldr	r3, [r3, #8]
 8003e66:	f003 030c 	and.w	r3, r3, #12
 8003e6a:	2b08      	cmp	r3, #8
 8003e6c:	d05c      	beq.n	8003f28 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	699b      	ldr	r3, [r3, #24]
 8003e72:	2b02      	cmp	r3, #2
 8003e74:	d141      	bne.n	8003efa <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003e76:	4b31      	ldr	r3, [pc, #196]	; (8003f3c <HAL_RCC_OscConfig+0x478>)
 8003e78:	2200      	movs	r2, #0
 8003e7a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e7c:	f7fe f9ca 	bl	8002214 <HAL_GetTick>
 8003e80:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003e82:	e008      	b.n	8003e96 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003e84:	f7fe f9c6 	bl	8002214 <HAL_GetTick>
 8003e88:	4602      	mov	r2, r0
 8003e8a:	693b      	ldr	r3, [r7, #16]
 8003e8c:	1ad3      	subs	r3, r2, r3
 8003e8e:	2b02      	cmp	r3, #2
 8003e90:	d901      	bls.n	8003e96 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003e92:	2303      	movs	r3, #3
 8003e94:	e087      	b.n	8003fa6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003e96:	4b27      	ldr	r3, [pc, #156]	; (8003f34 <HAL_RCC_OscConfig+0x470>)
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d1f0      	bne.n	8003e84 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	69da      	ldr	r2, [r3, #28]
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	6a1b      	ldr	r3, [r3, #32]
 8003eaa:	431a      	orrs	r2, r3
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003eb0:	019b      	lsls	r3, r3, #6
 8003eb2:	431a      	orrs	r2, r3
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003eb8:	085b      	lsrs	r3, r3, #1
 8003eba:	3b01      	subs	r3, #1
 8003ebc:	041b      	lsls	r3, r3, #16
 8003ebe:	431a      	orrs	r2, r3
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ec4:	061b      	lsls	r3, r3, #24
 8003ec6:	491b      	ldr	r1, [pc, #108]	; (8003f34 <HAL_RCC_OscConfig+0x470>)
 8003ec8:	4313      	orrs	r3, r2
 8003eca:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003ecc:	4b1b      	ldr	r3, [pc, #108]	; (8003f3c <HAL_RCC_OscConfig+0x478>)
 8003ece:	2201      	movs	r2, #1
 8003ed0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ed2:	f7fe f99f 	bl	8002214 <HAL_GetTick>
 8003ed6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003ed8:	e008      	b.n	8003eec <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003eda:	f7fe f99b 	bl	8002214 <HAL_GetTick>
 8003ede:	4602      	mov	r2, r0
 8003ee0:	693b      	ldr	r3, [r7, #16]
 8003ee2:	1ad3      	subs	r3, r2, r3
 8003ee4:	2b02      	cmp	r3, #2
 8003ee6:	d901      	bls.n	8003eec <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003ee8:	2303      	movs	r3, #3
 8003eea:	e05c      	b.n	8003fa6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003eec:	4b11      	ldr	r3, [pc, #68]	; (8003f34 <HAL_RCC_OscConfig+0x470>)
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d0f0      	beq.n	8003eda <HAL_RCC_OscConfig+0x416>
 8003ef8:	e054      	b.n	8003fa4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003efa:	4b10      	ldr	r3, [pc, #64]	; (8003f3c <HAL_RCC_OscConfig+0x478>)
 8003efc:	2200      	movs	r2, #0
 8003efe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f00:	f7fe f988 	bl	8002214 <HAL_GetTick>
 8003f04:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003f06:	e008      	b.n	8003f1a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003f08:	f7fe f984 	bl	8002214 <HAL_GetTick>
 8003f0c:	4602      	mov	r2, r0
 8003f0e:	693b      	ldr	r3, [r7, #16]
 8003f10:	1ad3      	subs	r3, r2, r3
 8003f12:	2b02      	cmp	r3, #2
 8003f14:	d901      	bls.n	8003f1a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003f16:	2303      	movs	r3, #3
 8003f18:	e045      	b.n	8003fa6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003f1a:	4b06      	ldr	r3, [pc, #24]	; (8003f34 <HAL_RCC_OscConfig+0x470>)
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d1f0      	bne.n	8003f08 <HAL_RCC_OscConfig+0x444>
 8003f26:	e03d      	b.n	8003fa4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	699b      	ldr	r3, [r3, #24]
 8003f2c:	2b01      	cmp	r3, #1
 8003f2e:	d107      	bne.n	8003f40 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003f30:	2301      	movs	r3, #1
 8003f32:	e038      	b.n	8003fa6 <HAL_RCC_OscConfig+0x4e2>
 8003f34:	40023800 	.word	0x40023800
 8003f38:	40007000 	.word	0x40007000
 8003f3c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003f40:	4b1b      	ldr	r3, [pc, #108]	; (8003fb0 <HAL_RCC_OscConfig+0x4ec>)
 8003f42:	685b      	ldr	r3, [r3, #4]
 8003f44:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	699b      	ldr	r3, [r3, #24]
 8003f4a:	2b01      	cmp	r3, #1
 8003f4c:	d028      	beq.n	8003fa0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003f58:	429a      	cmp	r2, r3
 8003f5a:	d121      	bne.n	8003fa0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003f66:	429a      	cmp	r2, r3
 8003f68:	d11a      	bne.n	8003fa0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003f6a:	68fa      	ldr	r2, [r7, #12]
 8003f6c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003f70:	4013      	ands	r3, r2
 8003f72:	687a      	ldr	r2, [r7, #4]
 8003f74:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003f76:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003f78:	4293      	cmp	r3, r2
 8003f7a:	d111      	bne.n	8003fa0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f86:	085b      	lsrs	r3, r3, #1
 8003f88:	3b01      	subs	r3, #1
 8003f8a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003f8c:	429a      	cmp	r2, r3
 8003f8e:	d107      	bne.n	8003fa0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f9a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003f9c:	429a      	cmp	r2, r3
 8003f9e:	d001      	beq.n	8003fa4 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003fa0:	2301      	movs	r3, #1
 8003fa2:	e000      	b.n	8003fa6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003fa4:	2300      	movs	r3, #0
}
 8003fa6:	4618      	mov	r0, r3
 8003fa8:	3718      	adds	r7, #24
 8003faa:	46bd      	mov	sp, r7
 8003fac:	bd80      	pop	{r7, pc}
 8003fae:	bf00      	nop
 8003fb0:	40023800 	.word	0x40023800

08003fb4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003fb4:	b580      	push	{r7, lr}
 8003fb6:	b084      	sub	sp, #16
 8003fb8:	af00      	add	r7, sp, #0
 8003fba:	6078      	str	r0, [r7, #4]
 8003fbc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d101      	bne.n	8003fc8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003fc4:	2301      	movs	r3, #1
 8003fc6:	e0cc      	b.n	8004162 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003fc8:	4b68      	ldr	r3, [pc, #416]	; (800416c <HAL_RCC_ClockConfig+0x1b8>)
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	f003 0307 	and.w	r3, r3, #7
 8003fd0:	683a      	ldr	r2, [r7, #0]
 8003fd2:	429a      	cmp	r2, r3
 8003fd4:	d90c      	bls.n	8003ff0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003fd6:	4b65      	ldr	r3, [pc, #404]	; (800416c <HAL_RCC_ClockConfig+0x1b8>)
 8003fd8:	683a      	ldr	r2, [r7, #0]
 8003fda:	b2d2      	uxtb	r2, r2
 8003fdc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003fde:	4b63      	ldr	r3, [pc, #396]	; (800416c <HAL_RCC_ClockConfig+0x1b8>)
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	f003 0307 	and.w	r3, r3, #7
 8003fe6:	683a      	ldr	r2, [r7, #0]
 8003fe8:	429a      	cmp	r2, r3
 8003fea:	d001      	beq.n	8003ff0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003fec:	2301      	movs	r3, #1
 8003fee:	e0b8      	b.n	8004162 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	f003 0302 	and.w	r3, r3, #2
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d020      	beq.n	800403e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	f003 0304 	and.w	r3, r3, #4
 8004004:	2b00      	cmp	r3, #0
 8004006:	d005      	beq.n	8004014 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004008:	4b59      	ldr	r3, [pc, #356]	; (8004170 <HAL_RCC_ClockConfig+0x1bc>)
 800400a:	689b      	ldr	r3, [r3, #8]
 800400c:	4a58      	ldr	r2, [pc, #352]	; (8004170 <HAL_RCC_ClockConfig+0x1bc>)
 800400e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004012:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	f003 0308 	and.w	r3, r3, #8
 800401c:	2b00      	cmp	r3, #0
 800401e:	d005      	beq.n	800402c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004020:	4b53      	ldr	r3, [pc, #332]	; (8004170 <HAL_RCC_ClockConfig+0x1bc>)
 8004022:	689b      	ldr	r3, [r3, #8]
 8004024:	4a52      	ldr	r2, [pc, #328]	; (8004170 <HAL_RCC_ClockConfig+0x1bc>)
 8004026:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800402a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800402c:	4b50      	ldr	r3, [pc, #320]	; (8004170 <HAL_RCC_ClockConfig+0x1bc>)
 800402e:	689b      	ldr	r3, [r3, #8]
 8004030:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	689b      	ldr	r3, [r3, #8]
 8004038:	494d      	ldr	r1, [pc, #308]	; (8004170 <HAL_RCC_ClockConfig+0x1bc>)
 800403a:	4313      	orrs	r3, r2
 800403c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	f003 0301 	and.w	r3, r3, #1
 8004046:	2b00      	cmp	r3, #0
 8004048:	d044      	beq.n	80040d4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	685b      	ldr	r3, [r3, #4]
 800404e:	2b01      	cmp	r3, #1
 8004050:	d107      	bne.n	8004062 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004052:	4b47      	ldr	r3, [pc, #284]	; (8004170 <HAL_RCC_ClockConfig+0x1bc>)
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800405a:	2b00      	cmp	r3, #0
 800405c:	d119      	bne.n	8004092 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800405e:	2301      	movs	r3, #1
 8004060:	e07f      	b.n	8004162 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	685b      	ldr	r3, [r3, #4]
 8004066:	2b02      	cmp	r3, #2
 8004068:	d003      	beq.n	8004072 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800406e:	2b03      	cmp	r3, #3
 8004070:	d107      	bne.n	8004082 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004072:	4b3f      	ldr	r3, [pc, #252]	; (8004170 <HAL_RCC_ClockConfig+0x1bc>)
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800407a:	2b00      	cmp	r3, #0
 800407c:	d109      	bne.n	8004092 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800407e:	2301      	movs	r3, #1
 8004080:	e06f      	b.n	8004162 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004082:	4b3b      	ldr	r3, [pc, #236]	; (8004170 <HAL_RCC_ClockConfig+0x1bc>)
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	f003 0302 	and.w	r3, r3, #2
 800408a:	2b00      	cmp	r3, #0
 800408c:	d101      	bne.n	8004092 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800408e:	2301      	movs	r3, #1
 8004090:	e067      	b.n	8004162 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004092:	4b37      	ldr	r3, [pc, #220]	; (8004170 <HAL_RCC_ClockConfig+0x1bc>)
 8004094:	689b      	ldr	r3, [r3, #8]
 8004096:	f023 0203 	bic.w	r2, r3, #3
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	685b      	ldr	r3, [r3, #4]
 800409e:	4934      	ldr	r1, [pc, #208]	; (8004170 <HAL_RCC_ClockConfig+0x1bc>)
 80040a0:	4313      	orrs	r3, r2
 80040a2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80040a4:	f7fe f8b6 	bl	8002214 <HAL_GetTick>
 80040a8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80040aa:	e00a      	b.n	80040c2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80040ac:	f7fe f8b2 	bl	8002214 <HAL_GetTick>
 80040b0:	4602      	mov	r2, r0
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	1ad3      	subs	r3, r2, r3
 80040b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80040ba:	4293      	cmp	r3, r2
 80040bc:	d901      	bls.n	80040c2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80040be:	2303      	movs	r3, #3
 80040c0:	e04f      	b.n	8004162 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80040c2:	4b2b      	ldr	r3, [pc, #172]	; (8004170 <HAL_RCC_ClockConfig+0x1bc>)
 80040c4:	689b      	ldr	r3, [r3, #8]
 80040c6:	f003 020c 	and.w	r2, r3, #12
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	685b      	ldr	r3, [r3, #4]
 80040ce:	009b      	lsls	r3, r3, #2
 80040d0:	429a      	cmp	r2, r3
 80040d2:	d1eb      	bne.n	80040ac <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80040d4:	4b25      	ldr	r3, [pc, #148]	; (800416c <HAL_RCC_ClockConfig+0x1b8>)
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	f003 0307 	and.w	r3, r3, #7
 80040dc:	683a      	ldr	r2, [r7, #0]
 80040de:	429a      	cmp	r2, r3
 80040e0:	d20c      	bcs.n	80040fc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80040e2:	4b22      	ldr	r3, [pc, #136]	; (800416c <HAL_RCC_ClockConfig+0x1b8>)
 80040e4:	683a      	ldr	r2, [r7, #0]
 80040e6:	b2d2      	uxtb	r2, r2
 80040e8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80040ea:	4b20      	ldr	r3, [pc, #128]	; (800416c <HAL_RCC_ClockConfig+0x1b8>)
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	f003 0307 	and.w	r3, r3, #7
 80040f2:	683a      	ldr	r2, [r7, #0]
 80040f4:	429a      	cmp	r2, r3
 80040f6:	d001      	beq.n	80040fc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80040f8:	2301      	movs	r3, #1
 80040fa:	e032      	b.n	8004162 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	f003 0304 	and.w	r3, r3, #4
 8004104:	2b00      	cmp	r3, #0
 8004106:	d008      	beq.n	800411a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004108:	4b19      	ldr	r3, [pc, #100]	; (8004170 <HAL_RCC_ClockConfig+0x1bc>)
 800410a:	689b      	ldr	r3, [r3, #8]
 800410c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	68db      	ldr	r3, [r3, #12]
 8004114:	4916      	ldr	r1, [pc, #88]	; (8004170 <HAL_RCC_ClockConfig+0x1bc>)
 8004116:	4313      	orrs	r3, r2
 8004118:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	f003 0308 	and.w	r3, r3, #8
 8004122:	2b00      	cmp	r3, #0
 8004124:	d009      	beq.n	800413a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004126:	4b12      	ldr	r3, [pc, #72]	; (8004170 <HAL_RCC_ClockConfig+0x1bc>)
 8004128:	689b      	ldr	r3, [r3, #8]
 800412a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	691b      	ldr	r3, [r3, #16]
 8004132:	00db      	lsls	r3, r3, #3
 8004134:	490e      	ldr	r1, [pc, #56]	; (8004170 <HAL_RCC_ClockConfig+0x1bc>)
 8004136:	4313      	orrs	r3, r2
 8004138:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800413a:	f000 f821 	bl	8004180 <HAL_RCC_GetSysClockFreq>
 800413e:	4602      	mov	r2, r0
 8004140:	4b0b      	ldr	r3, [pc, #44]	; (8004170 <HAL_RCC_ClockConfig+0x1bc>)
 8004142:	689b      	ldr	r3, [r3, #8]
 8004144:	091b      	lsrs	r3, r3, #4
 8004146:	f003 030f 	and.w	r3, r3, #15
 800414a:	490a      	ldr	r1, [pc, #40]	; (8004174 <HAL_RCC_ClockConfig+0x1c0>)
 800414c:	5ccb      	ldrb	r3, [r1, r3]
 800414e:	fa22 f303 	lsr.w	r3, r2, r3
 8004152:	4a09      	ldr	r2, [pc, #36]	; (8004178 <HAL_RCC_ClockConfig+0x1c4>)
 8004154:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004156:	4b09      	ldr	r3, [pc, #36]	; (800417c <HAL_RCC_ClockConfig+0x1c8>)
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	4618      	mov	r0, r3
 800415c:	f7fe f816 	bl	800218c <HAL_InitTick>

  return HAL_OK;
 8004160:	2300      	movs	r3, #0
}
 8004162:	4618      	mov	r0, r3
 8004164:	3710      	adds	r7, #16
 8004166:	46bd      	mov	sp, r7
 8004168:	bd80      	pop	{r7, pc}
 800416a:	bf00      	nop
 800416c:	40023c00 	.word	0x40023c00
 8004170:	40023800 	.word	0x40023800
 8004174:	0800bb94 	.word	0x0800bb94
 8004178:	20000018 	.word	0x20000018
 800417c:	2000001c 	.word	0x2000001c

08004180 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004180:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004184:	b090      	sub	sp, #64	; 0x40
 8004186:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004188:	2300      	movs	r3, #0
 800418a:	637b      	str	r3, [r7, #52]	; 0x34
 800418c:	2300      	movs	r3, #0
 800418e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004190:	2300      	movs	r3, #0
 8004192:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8004194:	2300      	movs	r3, #0
 8004196:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004198:	4b59      	ldr	r3, [pc, #356]	; (8004300 <HAL_RCC_GetSysClockFreq+0x180>)
 800419a:	689b      	ldr	r3, [r3, #8]
 800419c:	f003 030c 	and.w	r3, r3, #12
 80041a0:	2b08      	cmp	r3, #8
 80041a2:	d00d      	beq.n	80041c0 <HAL_RCC_GetSysClockFreq+0x40>
 80041a4:	2b08      	cmp	r3, #8
 80041a6:	f200 80a1 	bhi.w	80042ec <HAL_RCC_GetSysClockFreq+0x16c>
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d002      	beq.n	80041b4 <HAL_RCC_GetSysClockFreq+0x34>
 80041ae:	2b04      	cmp	r3, #4
 80041b0:	d003      	beq.n	80041ba <HAL_RCC_GetSysClockFreq+0x3a>
 80041b2:	e09b      	b.n	80042ec <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80041b4:	4b53      	ldr	r3, [pc, #332]	; (8004304 <HAL_RCC_GetSysClockFreq+0x184>)
 80041b6:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 80041b8:	e09b      	b.n	80042f2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80041ba:	4b53      	ldr	r3, [pc, #332]	; (8004308 <HAL_RCC_GetSysClockFreq+0x188>)
 80041bc:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80041be:	e098      	b.n	80042f2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80041c0:	4b4f      	ldr	r3, [pc, #316]	; (8004300 <HAL_RCC_GetSysClockFreq+0x180>)
 80041c2:	685b      	ldr	r3, [r3, #4]
 80041c4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80041c8:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80041ca:	4b4d      	ldr	r3, [pc, #308]	; (8004300 <HAL_RCC_GetSysClockFreq+0x180>)
 80041cc:	685b      	ldr	r3, [r3, #4]
 80041ce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d028      	beq.n	8004228 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80041d6:	4b4a      	ldr	r3, [pc, #296]	; (8004300 <HAL_RCC_GetSysClockFreq+0x180>)
 80041d8:	685b      	ldr	r3, [r3, #4]
 80041da:	099b      	lsrs	r3, r3, #6
 80041dc:	2200      	movs	r2, #0
 80041de:	623b      	str	r3, [r7, #32]
 80041e0:	627a      	str	r2, [r7, #36]	; 0x24
 80041e2:	6a3b      	ldr	r3, [r7, #32]
 80041e4:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80041e8:	2100      	movs	r1, #0
 80041ea:	4b47      	ldr	r3, [pc, #284]	; (8004308 <HAL_RCC_GetSysClockFreq+0x188>)
 80041ec:	fb03 f201 	mul.w	r2, r3, r1
 80041f0:	2300      	movs	r3, #0
 80041f2:	fb00 f303 	mul.w	r3, r0, r3
 80041f6:	4413      	add	r3, r2
 80041f8:	4a43      	ldr	r2, [pc, #268]	; (8004308 <HAL_RCC_GetSysClockFreq+0x188>)
 80041fa:	fba0 1202 	umull	r1, r2, r0, r2
 80041fe:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004200:	460a      	mov	r2, r1
 8004202:	62ba      	str	r2, [r7, #40]	; 0x28
 8004204:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004206:	4413      	add	r3, r2
 8004208:	62fb      	str	r3, [r7, #44]	; 0x2c
 800420a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800420c:	2200      	movs	r2, #0
 800420e:	61bb      	str	r3, [r7, #24]
 8004210:	61fa      	str	r2, [r7, #28]
 8004212:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004216:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800421a:	f7fc fd95 	bl	8000d48 <__aeabi_uldivmod>
 800421e:	4602      	mov	r2, r0
 8004220:	460b      	mov	r3, r1
 8004222:	4613      	mov	r3, r2
 8004224:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004226:	e053      	b.n	80042d0 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004228:	4b35      	ldr	r3, [pc, #212]	; (8004300 <HAL_RCC_GetSysClockFreq+0x180>)
 800422a:	685b      	ldr	r3, [r3, #4]
 800422c:	099b      	lsrs	r3, r3, #6
 800422e:	2200      	movs	r2, #0
 8004230:	613b      	str	r3, [r7, #16]
 8004232:	617a      	str	r2, [r7, #20]
 8004234:	693b      	ldr	r3, [r7, #16]
 8004236:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800423a:	f04f 0b00 	mov.w	fp, #0
 800423e:	4652      	mov	r2, sl
 8004240:	465b      	mov	r3, fp
 8004242:	f04f 0000 	mov.w	r0, #0
 8004246:	f04f 0100 	mov.w	r1, #0
 800424a:	0159      	lsls	r1, r3, #5
 800424c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004250:	0150      	lsls	r0, r2, #5
 8004252:	4602      	mov	r2, r0
 8004254:	460b      	mov	r3, r1
 8004256:	ebb2 080a 	subs.w	r8, r2, sl
 800425a:	eb63 090b 	sbc.w	r9, r3, fp
 800425e:	f04f 0200 	mov.w	r2, #0
 8004262:	f04f 0300 	mov.w	r3, #0
 8004266:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800426a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800426e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8004272:	ebb2 0408 	subs.w	r4, r2, r8
 8004276:	eb63 0509 	sbc.w	r5, r3, r9
 800427a:	f04f 0200 	mov.w	r2, #0
 800427e:	f04f 0300 	mov.w	r3, #0
 8004282:	00eb      	lsls	r3, r5, #3
 8004284:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004288:	00e2      	lsls	r2, r4, #3
 800428a:	4614      	mov	r4, r2
 800428c:	461d      	mov	r5, r3
 800428e:	eb14 030a 	adds.w	r3, r4, sl
 8004292:	603b      	str	r3, [r7, #0]
 8004294:	eb45 030b 	adc.w	r3, r5, fp
 8004298:	607b      	str	r3, [r7, #4]
 800429a:	f04f 0200 	mov.w	r2, #0
 800429e:	f04f 0300 	mov.w	r3, #0
 80042a2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80042a6:	4629      	mov	r1, r5
 80042a8:	028b      	lsls	r3, r1, #10
 80042aa:	4621      	mov	r1, r4
 80042ac:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80042b0:	4621      	mov	r1, r4
 80042b2:	028a      	lsls	r2, r1, #10
 80042b4:	4610      	mov	r0, r2
 80042b6:	4619      	mov	r1, r3
 80042b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80042ba:	2200      	movs	r2, #0
 80042bc:	60bb      	str	r3, [r7, #8]
 80042be:	60fa      	str	r2, [r7, #12]
 80042c0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80042c4:	f7fc fd40 	bl	8000d48 <__aeabi_uldivmod>
 80042c8:	4602      	mov	r2, r0
 80042ca:	460b      	mov	r3, r1
 80042cc:	4613      	mov	r3, r2
 80042ce:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80042d0:	4b0b      	ldr	r3, [pc, #44]	; (8004300 <HAL_RCC_GetSysClockFreq+0x180>)
 80042d2:	685b      	ldr	r3, [r3, #4]
 80042d4:	0c1b      	lsrs	r3, r3, #16
 80042d6:	f003 0303 	and.w	r3, r3, #3
 80042da:	3301      	adds	r3, #1
 80042dc:	005b      	lsls	r3, r3, #1
 80042de:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 80042e0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80042e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80042e8:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80042ea:	e002      	b.n	80042f2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80042ec:	4b05      	ldr	r3, [pc, #20]	; (8004304 <HAL_RCC_GetSysClockFreq+0x184>)
 80042ee:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80042f0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80042f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 80042f4:	4618      	mov	r0, r3
 80042f6:	3740      	adds	r7, #64	; 0x40
 80042f8:	46bd      	mov	sp, r7
 80042fa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80042fe:	bf00      	nop
 8004300:	40023800 	.word	0x40023800
 8004304:	00f42400 	.word	0x00f42400
 8004308:	017d7840 	.word	0x017d7840

0800430c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800430c:	b480      	push	{r7}
 800430e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004310:	4b03      	ldr	r3, [pc, #12]	; (8004320 <HAL_RCC_GetHCLKFreq+0x14>)
 8004312:	681b      	ldr	r3, [r3, #0]
}
 8004314:	4618      	mov	r0, r3
 8004316:	46bd      	mov	sp, r7
 8004318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800431c:	4770      	bx	lr
 800431e:	bf00      	nop
 8004320:	20000018 	.word	0x20000018

08004324 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004324:	b580      	push	{r7, lr}
 8004326:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004328:	f7ff fff0 	bl	800430c <HAL_RCC_GetHCLKFreq>
 800432c:	4602      	mov	r2, r0
 800432e:	4b05      	ldr	r3, [pc, #20]	; (8004344 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004330:	689b      	ldr	r3, [r3, #8]
 8004332:	0a9b      	lsrs	r3, r3, #10
 8004334:	f003 0307 	and.w	r3, r3, #7
 8004338:	4903      	ldr	r1, [pc, #12]	; (8004348 <HAL_RCC_GetPCLK1Freq+0x24>)
 800433a:	5ccb      	ldrb	r3, [r1, r3]
 800433c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004340:	4618      	mov	r0, r3
 8004342:	bd80      	pop	{r7, pc}
 8004344:	40023800 	.word	0x40023800
 8004348:	0800bba4 	.word	0x0800bba4

0800434c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800434c:	b580      	push	{r7, lr}
 800434e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004350:	f7ff ffdc 	bl	800430c <HAL_RCC_GetHCLKFreq>
 8004354:	4602      	mov	r2, r0
 8004356:	4b05      	ldr	r3, [pc, #20]	; (800436c <HAL_RCC_GetPCLK2Freq+0x20>)
 8004358:	689b      	ldr	r3, [r3, #8]
 800435a:	0b5b      	lsrs	r3, r3, #13
 800435c:	f003 0307 	and.w	r3, r3, #7
 8004360:	4903      	ldr	r1, [pc, #12]	; (8004370 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004362:	5ccb      	ldrb	r3, [r1, r3]
 8004364:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004368:	4618      	mov	r0, r3
 800436a:	bd80      	pop	{r7, pc}
 800436c:	40023800 	.word	0x40023800
 8004370:	0800bba4 	.word	0x0800bba4

08004374 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004374:	b580      	push	{r7, lr}
 8004376:	b082      	sub	sp, #8
 8004378:	af00      	add	r7, sp, #0
 800437a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	2b00      	cmp	r3, #0
 8004380:	d101      	bne.n	8004386 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004382:	2301      	movs	r3, #1
 8004384:	e041      	b.n	800440a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800438c:	b2db      	uxtb	r3, r3
 800438e:	2b00      	cmp	r3, #0
 8004390:	d106      	bne.n	80043a0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	2200      	movs	r2, #0
 8004396:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800439a:	6878      	ldr	r0, [r7, #4]
 800439c:	f7fd fd56 	bl	8001e4c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	2202      	movs	r2, #2
 80043a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681a      	ldr	r2, [r3, #0]
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	3304      	adds	r3, #4
 80043b0:	4619      	mov	r1, r3
 80043b2:	4610      	mov	r0, r2
 80043b4:	f000 f95e 	bl	8004674 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	2201      	movs	r2, #1
 80043bc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	2201      	movs	r2, #1
 80043c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	2201      	movs	r2, #1
 80043cc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	2201      	movs	r2, #1
 80043d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	2201      	movs	r2, #1
 80043dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	2201      	movs	r2, #1
 80043e4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	2201      	movs	r2, #1
 80043ec:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	2201      	movs	r2, #1
 80043f4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	2201      	movs	r2, #1
 80043fc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	2201      	movs	r2, #1
 8004404:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004408:	2300      	movs	r3, #0
}
 800440a:	4618      	mov	r0, r3
 800440c:	3708      	adds	r7, #8
 800440e:	46bd      	mov	sp, r7
 8004410:	bd80      	pop	{r7, pc}
	...

08004414 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8004414:	b480      	push	{r7}
 8004416:	b085      	sub	sp, #20
 8004418:	af00      	add	r7, sp, #0
 800441a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004422:	b2db      	uxtb	r3, r3
 8004424:	2b01      	cmp	r3, #1
 8004426:	d001      	beq.n	800442c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8004428:	2301      	movs	r3, #1
 800442a:	e046      	b.n	80044ba <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	2202      	movs	r2, #2
 8004430:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	4a23      	ldr	r2, [pc, #140]	; (80044c8 <HAL_TIM_Base_Start+0xb4>)
 800443a:	4293      	cmp	r3, r2
 800443c:	d022      	beq.n	8004484 <HAL_TIM_Base_Start+0x70>
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004446:	d01d      	beq.n	8004484 <HAL_TIM_Base_Start+0x70>
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	4a1f      	ldr	r2, [pc, #124]	; (80044cc <HAL_TIM_Base_Start+0xb8>)
 800444e:	4293      	cmp	r3, r2
 8004450:	d018      	beq.n	8004484 <HAL_TIM_Base_Start+0x70>
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	4a1e      	ldr	r2, [pc, #120]	; (80044d0 <HAL_TIM_Base_Start+0xbc>)
 8004458:	4293      	cmp	r3, r2
 800445a:	d013      	beq.n	8004484 <HAL_TIM_Base_Start+0x70>
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	4a1c      	ldr	r2, [pc, #112]	; (80044d4 <HAL_TIM_Base_Start+0xc0>)
 8004462:	4293      	cmp	r3, r2
 8004464:	d00e      	beq.n	8004484 <HAL_TIM_Base_Start+0x70>
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	4a1b      	ldr	r2, [pc, #108]	; (80044d8 <HAL_TIM_Base_Start+0xc4>)
 800446c:	4293      	cmp	r3, r2
 800446e:	d009      	beq.n	8004484 <HAL_TIM_Base_Start+0x70>
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	4a19      	ldr	r2, [pc, #100]	; (80044dc <HAL_TIM_Base_Start+0xc8>)
 8004476:	4293      	cmp	r3, r2
 8004478:	d004      	beq.n	8004484 <HAL_TIM_Base_Start+0x70>
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	4a18      	ldr	r2, [pc, #96]	; (80044e0 <HAL_TIM_Base_Start+0xcc>)
 8004480:	4293      	cmp	r3, r2
 8004482:	d111      	bne.n	80044a8 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	689b      	ldr	r3, [r3, #8]
 800448a:	f003 0307 	and.w	r3, r3, #7
 800448e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	2b06      	cmp	r3, #6
 8004494:	d010      	beq.n	80044b8 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	681a      	ldr	r2, [r3, #0]
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	f042 0201 	orr.w	r2, r2, #1
 80044a4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80044a6:	e007      	b.n	80044b8 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	681a      	ldr	r2, [r3, #0]
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	f042 0201 	orr.w	r2, r2, #1
 80044b6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80044b8:	2300      	movs	r3, #0
}
 80044ba:	4618      	mov	r0, r3
 80044bc:	3714      	adds	r7, #20
 80044be:	46bd      	mov	sp, r7
 80044c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044c4:	4770      	bx	lr
 80044c6:	bf00      	nop
 80044c8:	40010000 	.word	0x40010000
 80044cc:	40000400 	.word	0x40000400
 80044d0:	40000800 	.word	0x40000800
 80044d4:	40000c00 	.word	0x40000c00
 80044d8:	40010400 	.word	0x40010400
 80044dc:	40014000 	.word	0x40014000
 80044e0:	40001800 	.word	0x40001800

080044e4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80044e4:	b580      	push	{r7, lr}
 80044e6:	b084      	sub	sp, #16
 80044e8:	af00      	add	r7, sp, #0
 80044ea:	6078      	str	r0, [r7, #4]
 80044ec:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80044ee:	2300      	movs	r3, #0
 80044f0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80044f8:	2b01      	cmp	r3, #1
 80044fa:	d101      	bne.n	8004500 <HAL_TIM_ConfigClockSource+0x1c>
 80044fc:	2302      	movs	r3, #2
 80044fe:	e0b4      	b.n	800466a <HAL_TIM_ConfigClockSource+0x186>
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	2201      	movs	r2, #1
 8004504:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	2202      	movs	r2, #2
 800450c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	689b      	ldr	r3, [r3, #8]
 8004516:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004518:	68bb      	ldr	r3, [r7, #8]
 800451a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800451e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004520:	68bb      	ldr	r3, [r7, #8]
 8004522:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004526:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	68ba      	ldr	r2, [r7, #8]
 800452e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004530:	683b      	ldr	r3, [r7, #0]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004538:	d03e      	beq.n	80045b8 <HAL_TIM_ConfigClockSource+0xd4>
 800453a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800453e:	f200 8087 	bhi.w	8004650 <HAL_TIM_ConfigClockSource+0x16c>
 8004542:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004546:	f000 8086 	beq.w	8004656 <HAL_TIM_ConfigClockSource+0x172>
 800454a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800454e:	d87f      	bhi.n	8004650 <HAL_TIM_ConfigClockSource+0x16c>
 8004550:	2b70      	cmp	r3, #112	; 0x70
 8004552:	d01a      	beq.n	800458a <HAL_TIM_ConfigClockSource+0xa6>
 8004554:	2b70      	cmp	r3, #112	; 0x70
 8004556:	d87b      	bhi.n	8004650 <HAL_TIM_ConfigClockSource+0x16c>
 8004558:	2b60      	cmp	r3, #96	; 0x60
 800455a:	d050      	beq.n	80045fe <HAL_TIM_ConfigClockSource+0x11a>
 800455c:	2b60      	cmp	r3, #96	; 0x60
 800455e:	d877      	bhi.n	8004650 <HAL_TIM_ConfigClockSource+0x16c>
 8004560:	2b50      	cmp	r3, #80	; 0x50
 8004562:	d03c      	beq.n	80045de <HAL_TIM_ConfigClockSource+0xfa>
 8004564:	2b50      	cmp	r3, #80	; 0x50
 8004566:	d873      	bhi.n	8004650 <HAL_TIM_ConfigClockSource+0x16c>
 8004568:	2b40      	cmp	r3, #64	; 0x40
 800456a:	d058      	beq.n	800461e <HAL_TIM_ConfigClockSource+0x13a>
 800456c:	2b40      	cmp	r3, #64	; 0x40
 800456e:	d86f      	bhi.n	8004650 <HAL_TIM_ConfigClockSource+0x16c>
 8004570:	2b30      	cmp	r3, #48	; 0x30
 8004572:	d064      	beq.n	800463e <HAL_TIM_ConfigClockSource+0x15a>
 8004574:	2b30      	cmp	r3, #48	; 0x30
 8004576:	d86b      	bhi.n	8004650 <HAL_TIM_ConfigClockSource+0x16c>
 8004578:	2b20      	cmp	r3, #32
 800457a:	d060      	beq.n	800463e <HAL_TIM_ConfigClockSource+0x15a>
 800457c:	2b20      	cmp	r3, #32
 800457e:	d867      	bhi.n	8004650 <HAL_TIM_ConfigClockSource+0x16c>
 8004580:	2b00      	cmp	r3, #0
 8004582:	d05c      	beq.n	800463e <HAL_TIM_ConfigClockSource+0x15a>
 8004584:	2b10      	cmp	r3, #16
 8004586:	d05a      	beq.n	800463e <HAL_TIM_ConfigClockSource+0x15a>
 8004588:	e062      	b.n	8004650 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	6818      	ldr	r0, [r3, #0]
 800458e:	683b      	ldr	r3, [r7, #0]
 8004590:	6899      	ldr	r1, [r3, #8]
 8004592:	683b      	ldr	r3, [r7, #0]
 8004594:	685a      	ldr	r2, [r3, #4]
 8004596:	683b      	ldr	r3, [r7, #0]
 8004598:	68db      	ldr	r3, [r3, #12]
 800459a:	f000 f985 	bl	80048a8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	689b      	ldr	r3, [r3, #8]
 80045a4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80045a6:	68bb      	ldr	r3, [r7, #8]
 80045a8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80045ac:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	68ba      	ldr	r2, [r7, #8]
 80045b4:	609a      	str	r2, [r3, #8]
      break;
 80045b6:	e04f      	b.n	8004658 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	6818      	ldr	r0, [r3, #0]
 80045bc:	683b      	ldr	r3, [r7, #0]
 80045be:	6899      	ldr	r1, [r3, #8]
 80045c0:	683b      	ldr	r3, [r7, #0]
 80045c2:	685a      	ldr	r2, [r3, #4]
 80045c4:	683b      	ldr	r3, [r7, #0]
 80045c6:	68db      	ldr	r3, [r3, #12]
 80045c8:	f000 f96e 	bl	80048a8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	689a      	ldr	r2, [r3, #8]
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80045da:	609a      	str	r2, [r3, #8]
      break;
 80045dc:	e03c      	b.n	8004658 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	6818      	ldr	r0, [r3, #0]
 80045e2:	683b      	ldr	r3, [r7, #0]
 80045e4:	6859      	ldr	r1, [r3, #4]
 80045e6:	683b      	ldr	r3, [r7, #0]
 80045e8:	68db      	ldr	r3, [r3, #12]
 80045ea:	461a      	mov	r2, r3
 80045ec:	f000 f8e2 	bl	80047b4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	2150      	movs	r1, #80	; 0x50
 80045f6:	4618      	mov	r0, r3
 80045f8:	f000 f93b 	bl	8004872 <TIM_ITRx_SetConfig>
      break;
 80045fc:	e02c      	b.n	8004658 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	6818      	ldr	r0, [r3, #0]
 8004602:	683b      	ldr	r3, [r7, #0]
 8004604:	6859      	ldr	r1, [r3, #4]
 8004606:	683b      	ldr	r3, [r7, #0]
 8004608:	68db      	ldr	r3, [r3, #12]
 800460a:	461a      	mov	r2, r3
 800460c:	f000 f901 	bl	8004812 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	2160      	movs	r1, #96	; 0x60
 8004616:	4618      	mov	r0, r3
 8004618:	f000 f92b 	bl	8004872 <TIM_ITRx_SetConfig>
      break;
 800461c:	e01c      	b.n	8004658 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	6818      	ldr	r0, [r3, #0]
 8004622:	683b      	ldr	r3, [r7, #0]
 8004624:	6859      	ldr	r1, [r3, #4]
 8004626:	683b      	ldr	r3, [r7, #0]
 8004628:	68db      	ldr	r3, [r3, #12]
 800462a:	461a      	mov	r2, r3
 800462c:	f000 f8c2 	bl	80047b4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	2140      	movs	r1, #64	; 0x40
 8004636:	4618      	mov	r0, r3
 8004638:	f000 f91b 	bl	8004872 <TIM_ITRx_SetConfig>
      break;
 800463c:	e00c      	b.n	8004658 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681a      	ldr	r2, [r3, #0]
 8004642:	683b      	ldr	r3, [r7, #0]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	4619      	mov	r1, r3
 8004648:	4610      	mov	r0, r2
 800464a:	f000 f912 	bl	8004872 <TIM_ITRx_SetConfig>
      break;
 800464e:	e003      	b.n	8004658 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004650:	2301      	movs	r3, #1
 8004652:	73fb      	strb	r3, [r7, #15]
      break;
 8004654:	e000      	b.n	8004658 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004656:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	2201      	movs	r2, #1
 800465c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	2200      	movs	r2, #0
 8004664:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004668:	7bfb      	ldrb	r3, [r7, #15]
}
 800466a:	4618      	mov	r0, r3
 800466c:	3710      	adds	r7, #16
 800466e:	46bd      	mov	sp, r7
 8004670:	bd80      	pop	{r7, pc}
	...

08004674 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004674:	b480      	push	{r7}
 8004676:	b085      	sub	sp, #20
 8004678:	af00      	add	r7, sp, #0
 800467a:	6078      	str	r0, [r7, #4]
 800467c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	4a40      	ldr	r2, [pc, #256]	; (8004788 <TIM_Base_SetConfig+0x114>)
 8004688:	4293      	cmp	r3, r2
 800468a:	d013      	beq.n	80046b4 <TIM_Base_SetConfig+0x40>
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004692:	d00f      	beq.n	80046b4 <TIM_Base_SetConfig+0x40>
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	4a3d      	ldr	r2, [pc, #244]	; (800478c <TIM_Base_SetConfig+0x118>)
 8004698:	4293      	cmp	r3, r2
 800469a:	d00b      	beq.n	80046b4 <TIM_Base_SetConfig+0x40>
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	4a3c      	ldr	r2, [pc, #240]	; (8004790 <TIM_Base_SetConfig+0x11c>)
 80046a0:	4293      	cmp	r3, r2
 80046a2:	d007      	beq.n	80046b4 <TIM_Base_SetConfig+0x40>
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	4a3b      	ldr	r2, [pc, #236]	; (8004794 <TIM_Base_SetConfig+0x120>)
 80046a8:	4293      	cmp	r3, r2
 80046aa:	d003      	beq.n	80046b4 <TIM_Base_SetConfig+0x40>
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	4a3a      	ldr	r2, [pc, #232]	; (8004798 <TIM_Base_SetConfig+0x124>)
 80046b0:	4293      	cmp	r3, r2
 80046b2:	d108      	bne.n	80046c6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80046ba:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80046bc:	683b      	ldr	r3, [r7, #0]
 80046be:	685b      	ldr	r3, [r3, #4]
 80046c0:	68fa      	ldr	r2, [r7, #12]
 80046c2:	4313      	orrs	r3, r2
 80046c4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	4a2f      	ldr	r2, [pc, #188]	; (8004788 <TIM_Base_SetConfig+0x114>)
 80046ca:	4293      	cmp	r3, r2
 80046cc:	d02b      	beq.n	8004726 <TIM_Base_SetConfig+0xb2>
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80046d4:	d027      	beq.n	8004726 <TIM_Base_SetConfig+0xb2>
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	4a2c      	ldr	r2, [pc, #176]	; (800478c <TIM_Base_SetConfig+0x118>)
 80046da:	4293      	cmp	r3, r2
 80046dc:	d023      	beq.n	8004726 <TIM_Base_SetConfig+0xb2>
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	4a2b      	ldr	r2, [pc, #172]	; (8004790 <TIM_Base_SetConfig+0x11c>)
 80046e2:	4293      	cmp	r3, r2
 80046e4:	d01f      	beq.n	8004726 <TIM_Base_SetConfig+0xb2>
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	4a2a      	ldr	r2, [pc, #168]	; (8004794 <TIM_Base_SetConfig+0x120>)
 80046ea:	4293      	cmp	r3, r2
 80046ec:	d01b      	beq.n	8004726 <TIM_Base_SetConfig+0xb2>
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	4a29      	ldr	r2, [pc, #164]	; (8004798 <TIM_Base_SetConfig+0x124>)
 80046f2:	4293      	cmp	r3, r2
 80046f4:	d017      	beq.n	8004726 <TIM_Base_SetConfig+0xb2>
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	4a28      	ldr	r2, [pc, #160]	; (800479c <TIM_Base_SetConfig+0x128>)
 80046fa:	4293      	cmp	r3, r2
 80046fc:	d013      	beq.n	8004726 <TIM_Base_SetConfig+0xb2>
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	4a27      	ldr	r2, [pc, #156]	; (80047a0 <TIM_Base_SetConfig+0x12c>)
 8004702:	4293      	cmp	r3, r2
 8004704:	d00f      	beq.n	8004726 <TIM_Base_SetConfig+0xb2>
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	4a26      	ldr	r2, [pc, #152]	; (80047a4 <TIM_Base_SetConfig+0x130>)
 800470a:	4293      	cmp	r3, r2
 800470c:	d00b      	beq.n	8004726 <TIM_Base_SetConfig+0xb2>
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	4a25      	ldr	r2, [pc, #148]	; (80047a8 <TIM_Base_SetConfig+0x134>)
 8004712:	4293      	cmp	r3, r2
 8004714:	d007      	beq.n	8004726 <TIM_Base_SetConfig+0xb2>
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	4a24      	ldr	r2, [pc, #144]	; (80047ac <TIM_Base_SetConfig+0x138>)
 800471a:	4293      	cmp	r3, r2
 800471c:	d003      	beq.n	8004726 <TIM_Base_SetConfig+0xb2>
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	4a23      	ldr	r2, [pc, #140]	; (80047b0 <TIM_Base_SetConfig+0x13c>)
 8004722:	4293      	cmp	r3, r2
 8004724:	d108      	bne.n	8004738 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800472c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800472e:	683b      	ldr	r3, [r7, #0]
 8004730:	68db      	ldr	r3, [r3, #12]
 8004732:	68fa      	ldr	r2, [r7, #12]
 8004734:	4313      	orrs	r3, r2
 8004736:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800473e:	683b      	ldr	r3, [r7, #0]
 8004740:	695b      	ldr	r3, [r3, #20]
 8004742:	4313      	orrs	r3, r2
 8004744:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	68fa      	ldr	r2, [r7, #12]
 800474a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800474c:	683b      	ldr	r3, [r7, #0]
 800474e:	689a      	ldr	r2, [r3, #8]
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004754:	683b      	ldr	r3, [r7, #0]
 8004756:	681a      	ldr	r2, [r3, #0]
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	4a0a      	ldr	r2, [pc, #40]	; (8004788 <TIM_Base_SetConfig+0x114>)
 8004760:	4293      	cmp	r3, r2
 8004762:	d003      	beq.n	800476c <TIM_Base_SetConfig+0xf8>
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	4a0c      	ldr	r2, [pc, #48]	; (8004798 <TIM_Base_SetConfig+0x124>)
 8004768:	4293      	cmp	r3, r2
 800476a:	d103      	bne.n	8004774 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800476c:	683b      	ldr	r3, [r7, #0]
 800476e:	691a      	ldr	r2, [r3, #16]
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	2201      	movs	r2, #1
 8004778:	615a      	str	r2, [r3, #20]
}
 800477a:	bf00      	nop
 800477c:	3714      	adds	r7, #20
 800477e:	46bd      	mov	sp, r7
 8004780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004784:	4770      	bx	lr
 8004786:	bf00      	nop
 8004788:	40010000 	.word	0x40010000
 800478c:	40000400 	.word	0x40000400
 8004790:	40000800 	.word	0x40000800
 8004794:	40000c00 	.word	0x40000c00
 8004798:	40010400 	.word	0x40010400
 800479c:	40014000 	.word	0x40014000
 80047a0:	40014400 	.word	0x40014400
 80047a4:	40014800 	.word	0x40014800
 80047a8:	40001800 	.word	0x40001800
 80047ac:	40001c00 	.word	0x40001c00
 80047b0:	40002000 	.word	0x40002000

080047b4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80047b4:	b480      	push	{r7}
 80047b6:	b087      	sub	sp, #28
 80047b8:	af00      	add	r7, sp, #0
 80047ba:	60f8      	str	r0, [r7, #12]
 80047bc:	60b9      	str	r1, [r7, #8]
 80047be:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	6a1b      	ldr	r3, [r3, #32]
 80047c4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	6a1b      	ldr	r3, [r3, #32]
 80047ca:	f023 0201 	bic.w	r2, r3, #1
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	699b      	ldr	r3, [r3, #24]
 80047d6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80047d8:	693b      	ldr	r3, [r7, #16]
 80047da:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80047de:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	011b      	lsls	r3, r3, #4
 80047e4:	693a      	ldr	r2, [r7, #16]
 80047e6:	4313      	orrs	r3, r2
 80047e8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80047ea:	697b      	ldr	r3, [r7, #20]
 80047ec:	f023 030a 	bic.w	r3, r3, #10
 80047f0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80047f2:	697a      	ldr	r2, [r7, #20]
 80047f4:	68bb      	ldr	r3, [r7, #8]
 80047f6:	4313      	orrs	r3, r2
 80047f8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	693a      	ldr	r2, [r7, #16]
 80047fe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	697a      	ldr	r2, [r7, #20]
 8004804:	621a      	str	r2, [r3, #32]
}
 8004806:	bf00      	nop
 8004808:	371c      	adds	r7, #28
 800480a:	46bd      	mov	sp, r7
 800480c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004810:	4770      	bx	lr

08004812 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004812:	b480      	push	{r7}
 8004814:	b087      	sub	sp, #28
 8004816:	af00      	add	r7, sp, #0
 8004818:	60f8      	str	r0, [r7, #12]
 800481a:	60b9      	str	r1, [r7, #8]
 800481c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	6a1b      	ldr	r3, [r3, #32]
 8004822:	f023 0210 	bic.w	r2, r3, #16
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	699b      	ldr	r3, [r3, #24]
 800482e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	6a1b      	ldr	r3, [r3, #32]
 8004834:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004836:	697b      	ldr	r3, [r7, #20]
 8004838:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800483c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	031b      	lsls	r3, r3, #12
 8004842:	697a      	ldr	r2, [r7, #20]
 8004844:	4313      	orrs	r3, r2
 8004846:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004848:	693b      	ldr	r3, [r7, #16]
 800484a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800484e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004850:	68bb      	ldr	r3, [r7, #8]
 8004852:	011b      	lsls	r3, r3, #4
 8004854:	693a      	ldr	r2, [r7, #16]
 8004856:	4313      	orrs	r3, r2
 8004858:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	697a      	ldr	r2, [r7, #20]
 800485e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	693a      	ldr	r2, [r7, #16]
 8004864:	621a      	str	r2, [r3, #32]
}
 8004866:	bf00      	nop
 8004868:	371c      	adds	r7, #28
 800486a:	46bd      	mov	sp, r7
 800486c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004870:	4770      	bx	lr

08004872 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004872:	b480      	push	{r7}
 8004874:	b085      	sub	sp, #20
 8004876:	af00      	add	r7, sp, #0
 8004878:	6078      	str	r0, [r7, #4]
 800487a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	689b      	ldr	r3, [r3, #8]
 8004880:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004888:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800488a:	683a      	ldr	r2, [r7, #0]
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	4313      	orrs	r3, r2
 8004890:	f043 0307 	orr.w	r3, r3, #7
 8004894:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	68fa      	ldr	r2, [r7, #12]
 800489a:	609a      	str	r2, [r3, #8]
}
 800489c:	bf00      	nop
 800489e:	3714      	adds	r7, #20
 80048a0:	46bd      	mov	sp, r7
 80048a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048a6:	4770      	bx	lr

080048a8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80048a8:	b480      	push	{r7}
 80048aa:	b087      	sub	sp, #28
 80048ac:	af00      	add	r7, sp, #0
 80048ae:	60f8      	str	r0, [r7, #12]
 80048b0:	60b9      	str	r1, [r7, #8]
 80048b2:	607a      	str	r2, [r7, #4]
 80048b4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	689b      	ldr	r3, [r3, #8]
 80048ba:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80048bc:	697b      	ldr	r3, [r7, #20]
 80048be:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80048c2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80048c4:	683b      	ldr	r3, [r7, #0]
 80048c6:	021a      	lsls	r2, r3, #8
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	431a      	orrs	r2, r3
 80048cc:	68bb      	ldr	r3, [r7, #8]
 80048ce:	4313      	orrs	r3, r2
 80048d0:	697a      	ldr	r2, [r7, #20]
 80048d2:	4313      	orrs	r3, r2
 80048d4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	697a      	ldr	r2, [r7, #20]
 80048da:	609a      	str	r2, [r3, #8]
}
 80048dc:	bf00      	nop
 80048de:	371c      	adds	r7, #28
 80048e0:	46bd      	mov	sp, r7
 80048e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048e6:	4770      	bx	lr

080048e8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80048e8:	b480      	push	{r7}
 80048ea:	b085      	sub	sp, #20
 80048ec:	af00      	add	r7, sp, #0
 80048ee:	6078      	str	r0, [r7, #4]
 80048f0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80048f8:	2b01      	cmp	r3, #1
 80048fa:	d101      	bne.n	8004900 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80048fc:	2302      	movs	r3, #2
 80048fe:	e05a      	b.n	80049b6 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	2201      	movs	r2, #1
 8004904:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	2202      	movs	r2, #2
 800490c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	685b      	ldr	r3, [r3, #4]
 8004916:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	689b      	ldr	r3, [r3, #8]
 800491e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004926:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004928:	683b      	ldr	r3, [r7, #0]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	68fa      	ldr	r2, [r7, #12]
 800492e:	4313      	orrs	r3, r2
 8004930:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	68fa      	ldr	r2, [r7, #12]
 8004938:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	4a21      	ldr	r2, [pc, #132]	; (80049c4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8004940:	4293      	cmp	r3, r2
 8004942:	d022      	beq.n	800498a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800494c:	d01d      	beq.n	800498a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	4a1d      	ldr	r2, [pc, #116]	; (80049c8 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8004954:	4293      	cmp	r3, r2
 8004956:	d018      	beq.n	800498a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	4a1b      	ldr	r2, [pc, #108]	; (80049cc <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800495e:	4293      	cmp	r3, r2
 8004960:	d013      	beq.n	800498a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	4a1a      	ldr	r2, [pc, #104]	; (80049d0 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8004968:	4293      	cmp	r3, r2
 800496a:	d00e      	beq.n	800498a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	4a18      	ldr	r2, [pc, #96]	; (80049d4 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8004972:	4293      	cmp	r3, r2
 8004974:	d009      	beq.n	800498a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	4a17      	ldr	r2, [pc, #92]	; (80049d8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800497c:	4293      	cmp	r3, r2
 800497e:	d004      	beq.n	800498a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	4a15      	ldr	r2, [pc, #84]	; (80049dc <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8004986:	4293      	cmp	r3, r2
 8004988:	d10c      	bne.n	80049a4 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800498a:	68bb      	ldr	r3, [r7, #8]
 800498c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004990:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004992:	683b      	ldr	r3, [r7, #0]
 8004994:	685b      	ldr	r3, [r3, #4]
 8004996:	68ba      	ldr	r2, [r7, #8]
 8004998:	4313      	orrs	r3, r2
 800499a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	68ba      	ldr	r2, [r7, #8]
 80049a2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	2201      	movs	r2, #1
 80049a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	2200      	movs	r2, #0
 80049b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80049b4:	2300      	movs	r3, #0
}
 80049b6:	4618      	mov	r0, r3
 80049b8:	3714      	adds	r7, #20
 80049ba:	46bd      	mov	sp, r7
 80049bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049c0:	4770      	bx	lr
 80049c2:	bf00      	nop
 80049c4:	40010000 	.word	0x40010000
 80049c8:	40000400 	.word	0x40000400
 80049cc:	40000800 	.word	0x40000800
 80049d0:	40000c00 	.word	0x40000c00
 80049d4:	40010400 	.word	0x40010400
 80049d8:	40014000 	.word	0x40014000
 80049dc:	40001800 	.word	0x40001800

080049e0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80049e0:	b580      	push	{r7, lr}
 80049e2:	b082      	sub	sp, #8
 80049e4:	af00      	add	r7, sp, #0
 80049e6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d101      	bne.n	80049f2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80049ee:	2301      	movs	r3, #1
 80049f0:	e03f      	b.n	8004a72 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80049f8:	b2db      	uxtb	r3, r3
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d106      	bne.n	8004a0c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	2200      	movs	r2, #0
 8004a02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004a06:	6878      	ldr	r0, [r7, #4]
 8004a08:	f7fd fabc 	bl	8001f84 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	2224      	movs	r2, #36	; 0x24
 8004a10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	68da      	ldr	r2, [r3, #12]
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004a22:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004a24:	6878      	ldr	r0, [r7, #4]
 8004a26:	f000 f8db 	bl	8004be0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	691a      	ldr	r2, [r3, #16]
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004a38:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	695a      	ldr	r2, [r3, #20]
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004a48:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	68da      	ldr	r2, [r3, #12]
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004a58:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	2200      	movs	r2, #0
 8004a5e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	2220      	movs	r2, #32
 8004a64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	2220      	movs	r2, #32
 8004a6c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004a70:	2300      	movs	r3, #0
}
 8004a72:	4618      	mov	r0, r3
 8004a74:	3708      	adds	r7, #8
 8004a76:	46bd      	mov	sp, r7
 8004a78:	bd80      	pop	{r7, pc}

08004a7a <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8004a7a:	b480      	push	{r7}
 8004a7c:	b085      	sub	sp, #20
 8004a7e:	af00      	add	r7, sp, #0
 8004a80:	60f8      	str	r0, [r7, #12]
 8004a82:	60b9      	str	r1, [r7, #8]
 8004a84:	4613      	mov	r3, r2
 8004a86:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a8e:	b2db      	uxtb	r3, r3
 8004a90:	2b20      	cmp	r3, #32
 8004a92:	d130      	bne.n	8004af6 <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004a94:	68bb      	ldr	r3, [r7, #8]
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d002      	beq.n	8004aa0 <HAL_UART_Transmit_IT+0x26>
 8004a9a:	88fb      	ldrh	r3, [r7, #6]
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	d101      	bne.n	8004aa4 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8004aa0:	2301      	movs	r3, #1
 8004aa2:	e029      	b.n	8004af8 <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004aaa:	2b01      	cmp	r3, #1
 8004aac:	d101      	bne.n	8004ab2 <HAL_UART_Transmit_IT+0x38>
 8004aae:	2302      	movs	r3, #2
 8004ab0:	e022      	b.n	8004af8 <HAL_UART_Transmit_IT+0x7e>
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	2201      	movs	r2, #1
 8004ab6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	68ba      	ldr	r2, [r7, #8]
 8004abe:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	88fa      	ldrh	r2, [r7, #6]
 8004ac4:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	88fa      	ldrh	r2, [r7, #6]
 8004aca:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	2200      	movs	r2, #0
 8004ad0:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	2221      	movs	r2, #33	; 0x21
 8004ad6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	2200      	movs	r2, #0
 8004ade:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	68da      	ldr	r2, [r3, #12]
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004af0:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8004af2:	2300      	movs	r3, #0
 8004af4:	e000      	b.n	8004af8 <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 8004af6:	2302      	movs	r3, #2
  }
}
 8004af8:	4618      	mov	r0, r3
 8004afa:	3714      	adds	r7, #20
 8004afc:	46bd      	mov	sp, r7
 8004afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b02:	4770      	bx	lr

08004b04 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004b04:	b580      	push	{r7, lr}
 8004b06:	b084      	sub	sp, #16
 8004b08:	af00      	add	r7, sp, #0
 8004b0a:	60f8      	str	r0, [r7, #12]
 8004b0c:	60b9      	str	r1, [r7, #8]
 8004b0e:	4613      	mov	r3, r2
 8004b10:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004b18:	b2db      	uxtb	r3, r3
 8004b1a:	2b20      	cmp	r3, #32
 8004b1c:	d11d      	bne.n	8004b5a <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8004b1e:	68bb      	ldr	r3, [r7, #8]
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d002      	beq.n	8004b2a <HAL_UART_Receive_IT+0x26>
 8004b24:	88fb      	ldrh	r3, [r7, #6]
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d101      	bne.n	8004b2e <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8004b2a:	2301      	movs	r3, #1
 8004b2c:	e016      	b.n	8004b5c <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004b34:	2b01      	cmp	r3, #1
 8004b36:	d101      	bne.n	8004b3c <HAL_UART_Receive_IT+0x38>
 8004b38:	2302      	movs	r3, #2
 8004b3a:	e00f      	b.n	8004b5c <HAL_UART_Receive_IT+0x58>
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	2201      	movs	r2, #1
 8004b40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	2200      	movs	r2, #0
 8004b48:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8004b4a:	88fb      	ldrh	r3, [r7, #6]
 8004b4c:	461a      	mov	r2, r3
 8004b4e:	68b9      	ldr	r1, [r7, #8]
 8004b50:	68f8      	ldr	r0, [r7, #12]
 8004b52:	f000 f807 	bl	8004b64 <UART_Start_Receive_IT>
 8004b56:	4603      	mov	r3, r0
 8004b58:	e000      	b.n	8004b5c <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8004b5a:	2302      	movs	r3, #2
  }
}
 8004b5c:	4618      	mov	r0, r3
 8004b5e:	3710      	adds	r7, #16
 8004b60:	46bd      	mov	sp, r7
 8004b62:	bd80      	pop	{r7, pc}

08004b64 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004b64:	b480      	push	{r7}
 8004b66:	b085      	sub	sp, #20
 8004b68:	af00      	add	r7, sp, #0
 8004b6a:	60f8      	str	r0, [r7, #12]
 8004b6c:	60b9      	str	r1, [r7, #8]
 8004b6e:	4613      	mov	r3, r2
 8004b70:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	68ba      	ldr	r2, [r7, #8]
 8004b76:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	88fa      	ldrh	r2, [r7, #6]
 8004b7c:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	88fa      	ldrh	r2, [r7, #6]
 8004b82:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	2200      	movs	r2, #0
 8004b88:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	2222      	movs	r2, #34	; 0x22
 8004b8e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	2200      	movs	r2, #0
 8004b96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	691b      	ldr	r3, [r3, #16]
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d007      	beq.n	8004bb2 <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	68da      	ldr	r2, [r3, #12]
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004bb0:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	695a      	ldr	r2, [r3, #20]
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	f042 0201 	orr.w	r2, r2, #1
 8004bc0:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	68da      	ldr	r2, [r3, #12]
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	f042 0220 	orr.w	r2, r2, #32
 8004bd0:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004bd2:	2300      	movs	r3, #0
}
 8004bd4:	4618      	mov	r0, r3
 8004bd6:	3714      	adds	r7, #20
 8004bd8:	46bd      	mov	sp, r7
 8004bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bde:	4770      	bx	lr

08004be0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004be0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004be4:	b0c0      	sub	sp, #256	; 0x100
 8004be6:	af00      	add	r7, sp, #0
 8004be8:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004bec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	691b      	ldr	r3, [r3, #16]
 8004bf4:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004bf8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004bfc:	68d9      	ldr	r1, [r3, #12]
 8004bfe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c02:	681a      	ldr	r2, [r3, #0]
 8004c04:	ea40 0301 	orr.w	r3, r0, r1
 8004c08:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004c0a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c0e:	689a      	ldr	r2, [r3, #8]
 8004c10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c14:	691b      	ldr	r3, [r3, #16]
 8004c16:	431a      	orrs	r2, r3
 8004c18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c1c:	695b      	ldr	r3, [r3, #20]
 8004c1e:	431a      	orrs	r2, r3
 8004c20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c24:	69db      	ldr	r3, [r3, #28]
 8004c26:	4313      	orrs	r3, r2
 8004c28:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004c2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	68db      	ldr	r3, [r3, #12]
 8004c34:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004c38:	f021 010c 	bic.w	r1, r1, #12
 8004c3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c40:	681a      	ldr	r2, [r3, #0]
 8004c42:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004c46:	430b      	orrs	r3, r1
 8004c48:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004c4a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	695b      	ldr	r3, [r3, #20]
 8004c52:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8004c56:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c5a:	6999      	ldr	r1, [r3, #24]
 8004c5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c60:	681a      	ldr	r2, [r3, #0]
 8004c62:	ea40 0301 	orr.w	r3, r0, r1
 8004c66:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004c68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c6c:	681a      	ldr	r2, [r3, #0]
 8004c6e:	4b8f      	ldr	r3, [pc, #572]	; (8004eac <UART_SetConfig+0x2cc>)
 8004c70:	429a      	cmp	r2, r3
 8004c72:	d005      	beq.n	8004c80 <UART_SetConfig+0xa0>
 8004c74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c78:	681a      	ldr	r2, [r3, #0]
 8004c7a:	4b8d      	ldr	r3, [pc, #564]	; (8004eb0 <UART_SetConfig+0x2d0>)
 8004c7c:	429a      	cmp	r2, r3
 8004c7e:	d104      	bne.n	8004c8a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004c80:	f7ff fb64 	bl	800434c <HAL_RCC_GetPCLK2Freq>
 8004c84:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8004c88:	e003      	b.n	8004c92 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004c8a:	f7ff fb4b 	bl	8004324 <HAL_RCC_GetPCLK1Freq>
 8004c8e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004c92:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c96:	69db      	ldr	r3, [r3, #28]
 8004c98:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004c9c:	f040 810c 	bne.w	8004eb8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004ca0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004ca4:	2200      	movs	r2, #0
 8004ca6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004caa:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8004cae:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8004cb2:	4622      	mov	r2, r4
 8004cb4:	462b      	mov	r3, r5
 8004cb6:	1891      	adds	r1, r2, r2
 8004cb8:	65b9      	str	r1, [r7, #88]	; 0x58
 8004cba:	415b      	adcs	r3, r3
 8004cbc:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004cbe:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004cc2:	4621      	mov	r1, r4
 8004cc4:	eb12 0801 	adds.w	r8, r2, r1
 8004cc8:	4629      	mov	r1, r5
 8004cca:	eb43 0901 	adc.w	r9, r3, r1
 8004cce:	f04f 0200 	mov.w	r2, #0
 8004cd2:	f04f 0300 	mov.w	r3, #0
 8004cd6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004cda:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004cde:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004ce2:	4690      	mov	r8, r2
 8004ce4:	4699      	mov	r9, r3
 8004ce6:	4623      	mov	r3, r4
 8004ce8:	eb18 0303 	adds.w	r3, r8, r3
 8004cec:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004cf0:	462b      	mov	r3, r5
 8004cf2:	eb49 0303 	adc.w	r3, r9, r3
 8004cf6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004cfa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004cfe:	685b      	ldr	r3, [r3, #4]
 8004d00:	2200      	movs	r2, #0
 8004d02:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004d06:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8004d0a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8004d0e:	460b      	mov	r3, r1
 8004d10:	18db      	adds	r3, r3, r3
 8004d12:	653b      	str	r3, [r7, #80]	; 0x50
 8004d14:	4613      	mov	r3, r2
 8004d16:	eb42 0303 	adc.w	r3, r2, r3
 8004d1a:	657b      	str	r3, [r7, #84]	; 0x54
 8004d1c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004d20:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8004d24:	f7fc f810 	bl	8000d48 <__aeabi_uldivmod>
 8004d28:	4602      	mov	r2, r0
 8004d2a:	460b      	mov	r3, r1
 8004d2c:	4b61      	ldr	r3, [pc, #388]	; (8004eb4 <UART_SetConfig+0x2d4>)
 8004d2e:	fba3 2302 	umull	r2, r3, r3, r2
 8004d32:	095b      	lsrs	r3, r3, #5
 8004d34:	011c      	lsls	r4, r3, #4
 8004d36:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004d3a:	2200      	movs	r2, #0
 8004d3c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004d40:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8004d44:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8004d48:	4642      	mov	r2, r8
 8004d4a:	464b      	mov	r3, r9
 8004d4c:	1891      	adds	r1, r2, r2
 8004d4e:	64b9      	str	r1, [r7, #72]	; 0x48
 8004d50:	415b      	adcs	r3, r3
 8004d52:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004d54:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004d58:	4641      	mov	r1, r8
 8004d5a:	eb12 0a01 	adds.w	sl, r2, r1
 8004d5e:	4649      	mov	r1, r9
 8004d60:	eb43 0b01 	adc.w	fp, r3, r1
 8004d64:	f04f 0200 	mov.w	r2, #0
 8004d68:	f04f 0300 	mov.w	r3, #0
 8004d6c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004d70:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004d74:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004d78:	4692      	mov	sl, r2
 8004d7a:	469b      	mov	fp, r3
 8004d7c:	4643      	mov	r3, r8
 8004d7e:	eb1a 0303 	adds.w	r3, sl, r3
 8004d82:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004d86:	464b      	mov	r3, r9
 8004d88:	eb4b 0303 	adc.w	r3, fp, r3
 8004d8c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004d90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d94:	685b      	ldr	r3, [r3, #4]
 8004d96:	2200      	movs	r2, #0
 8004d98:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004d9c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8004da0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8004da4:	460b      	mov	r3, r1
 8004da6:	18db      	adds	r3, r3, r3
 8004da8:	643b      	str	r3, [r7, #64]	; 0x40
 8004daa:	4613      	mov	r3, r2
 8004dac:	eb42 0303 	adc.w	r3, r2, r3
 8004db0:	647b      	str	r3, [r7, #68]	; 0x44
 8004db2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004db6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8004dba:	f7fb ffc5 	bl	8000d48 <__aeabi_uldivmod>
 8004dbe:	4602      	mov	r2, r0
 8004dc0:	460b      	mov	r3, r1
 8004dc2:	4611      	mov	r1, r2
 8004dc4:	4b3b      	ldr	r3, [pc, #236]	; (8004eb4 <UART_SetConfig+0x2d4>)
 8004dc6:	fba3 2301 	umull	r2, r3, r3, r1
 8004dca:	095b      	lsrs	r3, r3, #5
 8004dcc:	2264      	movs	r2, #100	; 0x64
 8004dce:	fb02 f303 	mul.w	r3, r2, r3
 8004dd2:	1acb      	subs	r3, r1, r3
 8004dd4:	00db      	lsls	r3, r3, #3
 8004dd6:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8004dda:	4b36      	ldr	r3, [pc, #216]	; (8004eb4 <UART_SetConfig+0x2d4>)
 8004ddc:	fba3 2302 	umull	r2, r3, r3, r2
 8004de0:	095b      	lsrs	r3, r3, #5
 8004de2:	005b      	lsls	r3, r3, #1
 8004de4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004de8:	441c      	add	r4, r3
 8004dea:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004dee:	2200      	movs	r2, #0
 8004df0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004df4:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8004df8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8004dfc:	4642      	mov	r2, r8
 8004dfe:	464b      	mov	r3, r9
 8004e00:	1891      	adds	r1, r2, r2
 8004e02:	63b9      	str	r1, [r7, #56]	; 0x38
 8004e04:	415b      	adcs	r3, r3
 8004e06:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004e08:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004e0c:	4641      	mov	r1, r8
 8004e0e:	1851      	adds	r1, r2, r1
 8004e10:	6339      	str	r1, [r7, #48]	; 0x30
 8004e12:	4649      	mov	r1, r9
 8004e14:	414b      	adcs	r3, r1
 8004e16:	637b      	str	r3, [r7, #52]	; 0x34
 8004e18:	f04f 0200 	mov.w	r2, #0
 8004e1c:	f04f 0300 	mov.w	r3, #0
 8004e20:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8004e24:	4659      	mov	r1, fp
 8004e26:	00cb      	lsls	r3, r1, #3
 8004e28:	4651      	mov	r1, sl
 8004e2a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004e2e:	4651      	mov	r1, sl
 8004e30:	00ca      	lsls	r2, r1, #3
 8004e32:	4610      	mov	r0, r2
 8004e34:	4619      	mov	r1, r3
 8004e36:	4603      	mov	r3, r0
 8004e38:	4642      	mov	r2, r8
 8004e3a:	189b      	adds	r3, r3, r2
 8004e3c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004e40:	464b      	mov	r3, r9
 8004e42:	460a      	mov	r2, r1
 8004e44:	eb42 0303 	adc.w	r3, r2, r3
 8004e48:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004e4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e50:	685b      	ldr	r3, [r3, #4]
 8004e52:	2200      	movs	r2, #0
 8004e54:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004e58:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8004e5c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004e60:	460b      	mov	r3, r1
 8004e62:	18db      	adds	r3, r3, r3
 8004e64:	62bb      	str	r3, [r7, #40]	; 0x28
 8004e66:	4613      	mov	r3, r2
 8004e68:	eb42 0303 	adc.w	r3, r2, r3
 8004e6c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004e6e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004e72:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8004e76:	f7fb ff67 	bl	8000d48 <__aeabi_uldivmod>
 8004e7a:	4602      	mov	r2, r0
 8004e7c:	460b      	mov	r3, r1
 8004e7e:	4b0d      	ldr	r3, [pc, #52]	; (8004eb4 <UART_SetConfig+0x2d4>)
 8004e80:	fba3 1302 	umull	r1, r3, r3, r2
 8004e84:	095b      	lsrs	r3, r3, #5
 8004e86:	2164      	movs	r1, #100	; 0x64
 8004e88:	fb01 f303 	mul.w	r3, r1, r3
 8004e8c:	1ad3      	subs	r3, r2, r3
 8004e8e:	00db      	lsls	r3, r3, #3
 8004e90:	3332      	adds	r3, #50	; 0x32
 8004e92:	4a08      	ldr	r2, [pc, #32]	; (8004eb4 <UART_SetConfig+0x2d4>)
 8004e94:	fba2 2303 	umull	r2, r3, r2, r3
 8004e98:	095b      	lsrs	r3, r3, #5
 8004e9a:	f003 0207 	and.w	r2, r3, #7
 8004e9e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	4422      	add	r2, r4
 8004ea6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004ea8:	e105      	b.n	80050b6 <UART_SetConfig+0x4d6>
 8004eaa:	bf00      	nop
 8004eac:	40011000 	.word	0x40011000
 8004eb0:	40011400 	.word	0x40011400
 8004eb4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004eb8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004ebc:	2200      	movs	r2, #0
 8004ebe:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004ec2:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8004ec6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8004eca:	4642      	mov	r2, r8
 8004ecc:	464b      	mov	r3, r9
 8004ece:	1891      	adds	r1, r2, r2
 8004ed0:	6239      	str	r1, [r7, #32]
 8004ed2:	415b      	adcs	r3, r3
 8004ed4:	627b      	str	r3, [r7, #36]	; 0x24
 8004ed6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004eda:	4641      	mov	r1, r8
 8004edc:	1854      	adds	r4, r2, r1
 8004ede:	4649      	mov	r1, r9
 8004ee0:	eb43 0501 	adc.w	r5, r3, r1
 8004ee4:	f04f 0200 	mov.w	r2, #0
 8004ee8:	f04f 0300 	mov.w	r3, #0
 8004eec:	00eb      	lsls	r3, r5, #3
 8004eee:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004ef2:	00e2      	lsls	r2, r4, #3
 8004ef4:	4614      	mov	r4, r2
 8004ef6:	461d      	mov	r5, r3
 8004ef8:	4643      	mov	r3, r8
 8004efa:	18e3      	adds	r3, r4, r3
 8004efc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004f00:	464b      	mov	r3, r9
 8004f02:	eb45 0303 	adc.w	r3, r5, r3
 8004f06:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004f0a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f0e:	685b      	ldr	r3, [r3, #4]
 8004f10:	2200      	movs	r2, #0
 8004f12:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004f16:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004f1a:	f04f 0200 	mov.w	r2, #0
 8004f1e:	f04f 0300 	mov.w	r3, #0
 8004f22:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8004f26:	4629      	mov	r1, r5
 8004f28:	008b      	lsls	r3, r1, #2
 8004f2a:	4621      	mov	r1, r4
 8004f2c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004f30:	4621      	mov	r1, r4
 8004f32:	008a      	lsls	r2, r1, #2
 8004f34:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8004f38:	f7fb ff06 	bl	8000d48 <__aeabi_uldivmod>
 8004f3c:	4602      	mov	r2, r0
 8004f3e:	460b      	mov	r3, r1
 8004f40:	4b60      	ldr	r3, [pc, #384]	; (80050c4 <UART_SetConfig+0x4e4>)
 8004f42:	fba3 2302 	umull	r2, r3, r3, r2
 8004f46:	095b      	lsrs	r3, r3, #5
 8004f48:	011c      	lsls	r4, r3, #4
 8004f4a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004f4e:	2200      	movs	r2, #0
 8004f50:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004f54:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8004f58:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8004f5c:	4642      	mov	r2, r8
 8004f5e:	464b      	mov	r3, r9
 8004f60:	1891      	adds	r1, r2, r2
 8004f62:	61b9      	str	r1, [r7, #24]
 8004f64:	415b      	adcs	r3, r3
 8004f66:	61fb      	str	r3, [r7, #28]
 8004f68:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004f6c:	4641      	mov	r1, r8
 8004f6e:	1851      	adds	r1, r2, r1
 8004f70:	6139      	str	r1, [r7, #16]
 8004f72:	4649      	mov	r1, r9
 8004f74:	414b      	adcs	r3, r1
 8004f76:	617b      	str	r3, [r7, #20]
 8004f78:	f04f 0200 	mov.w	r2, #0
 8004f7c:	f04f 0300 	mov.w	r3, #0
 8004f80:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004f84:	4659      	mov	r1, fp
 8004f86:	00cb      	lsls	r3, r1, #3
 8004f88:	4651      	mov	r1, sl
 8004f8a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004f8e:	4651      	mov	r1, sl
 8004f90:	00ca      	lsls	r2, r1, #3
 8004f92:	4610      	mov	r0, r2
 8004f94:	4619      	mov	r1, r3
 8004f96:	4603      	mov	r3, r0
 8004f98:	4642      	mov	r2, r8
 8004f9a:	189b      	adds	r3, r3, r2
 8004f9c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004fa0:	464b      	mov	r3, r9
 8004fa2:	460a      	mov	r2, r1
 8004fa4:	eb42 0303 	adc.w	r3, r2, r3
 8004fa8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004fac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004fb0:	685b      	ldr	r3, [r3, #4]
 8004fb2:	2200      	movs	r2, #0
 8004fb4:	67bb      	str	r3, [r7, #120]	; 0x78
 8004fb6:	67fa      	str	r2, [r7, #124]	; 0x7c
 8004fb8:	f04f 0200 	mov.w	r2, #0
 8004fbc:	f04f 0300 	mov.w	r3, #0
 8004fc0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8004fc4:	4649      	mov	r1, r9
 8004fc6:	008b      	lsls	r3, r1, #2
 8004fc8:	4641      	mov	r1, r8
 8004fca:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004fce:	4641      	mov	r1, r8
 8004fd0:	008a      	lsls	r2, r1, #2
 8004fd2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8004fd6:	f7fb feb7 	bl	8000d48 <__aeabi_uldivmod>
 8004fda:	4602      	mov	r2, r0
 8004fdc:	460b      	mov	r3, r1
 8004fde:	4b39      	ldr	r3, [pc, #228]	; (80050c4 <UART_SetConfig+0x4e4>)
 8004fe0:	fba3 1302 	umull	r1, r3, r3, r2
 8004fe4:	095b      	lsrs	r3, r3, #5
 8004fe6:	2164      	movs	r1, #100	; 0x64
 8004fe8:	fb01 f303 	mul.w	r3, r1, r3
 8004fec:	1ad3      	subs	r3, r2, r3
 8004fee:	011b      	lsls	r3, r3, #4
 8004ff0:	3332      	adds	r3, #50	; 0x32
 8004ff2:	4a34      	ldr	r2, [pc, #208]	; (80050c4 <UART_SetConfig+0x4e4>)
 8004ff4:	fba2 2303 	umull	r2, r3, r2, r3
 8004ff8:	095b      	lsrs	r3, r3, #5
 8004ffa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004ffe:	441c      	add	r4, r3
 8005000:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005004:	2200      	movs	r2, #0
 8005006:	673b      	str	r3, [r7, #112]	; 0x70
 8005008:	677a      	str	r2, [r7, #116]	; 0x74
 800500a:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800500e:	4642      	mov	r2, r8
 8005010:	464b      	mov	r3, r9
 8005012:	1891      	adds	r1, r2, r2
 8005014:	60b9      	str	r1, [r7, #8]
 8005016:	415b      	adcs	r3, r3
 8005018:	60fb      	str	r3, [r7, #12]
 800501a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800501e:	4641      	mov	r1, r8
 8005020:	1851      	adds	r1, r2, r1
 8005022:	6039      	str	r1, [r7, #0]
 8005024:	4649      	mov	r1, r9
 8005026:	414b      	adcs	r3, r1
 8005028:	607b      	str	r3, [r7, #4]
 800502a:	f04f 0200 	mov.w	r2, #0
 800502e:	f04f 0300 	mov.w	r3, #0
 8005032:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005036:	4659      	mov	r1, fp
 8005038:	00cb      	lsls	r3, r1, #3
 800503a:	4651      	mov	r1, sl
 800503c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005040:	4651      	mov	r1, sl
 8005042:	00ca      	lsls	r2, r1, #3
 8005044:	4610      	mov	r0, r2
 8005046:	4619      	mov	r1, r3
 8005048:	4603      	mov	r3, r0
 800504a:	4642      	mov	r2, r8
 800504c:	189b      	adds	r3, r3, r2
 800504e:	66bb      	str	r3, [r7, #104]	; 0x68
 8005050:	464b      	mov	r3, r9
 8005052:	460a      	mov	r2, r1
 8005054:	eb42 0303 	adc.w	r3, r2, r3
 8005058:	66fb      	str	r3, [r7, #108]	; 0x6c
 800505a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800505e:	685b      	ldr	r3, [r3, #4]
 8005060:	2200      	movs	r2, #0
 8005062:	663b      	str	r3, [r7, #96]	; 0x60
 8005064:	667a      	str	r2, [r7, #100]	; 0x64
 8005066:	f04f 0200 	mov.w	r2, #0
 800506a:	f04f 0300 	mov.w	r3, #0
 800506e:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8005072:	4649      	mov	r1, r9
 8005074:	008b      	lsls	r3, r1, #2
 8005076:	4641      	mov	r1, r8
 8005078:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800507c:	4641      	mov	r1, r8
 800507e:	008a      	lsls	r2, r1, #2
 8005080:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8005084:	f7fb fe60 	bl	8000d48 <__aeabi_uldivmod>
 8005088:	4602      	mov	r2, r0
 800508a:	460b      	mov	r3, r1
 800508c:	4b0d      	ldr	r3, [pc, #52]	; (80050c4 <UART_SetConfig+0x4e4>)
 800508e:	fba3 1302 	umull	r1, r3, r3, r2
 8005092:	095b      	lsrs	r3, r3, #5
 8005094:	2164      	movs	r1, #100	; 0x64
 8005096:	fb01 f303 	mul.w	r3, r1, r3
 800509a:	1ad3      	subs	r3, r2, r3
 800509c:	011b      	lsls	r3, r3, #4
 800509e:	3332      	adds	r3, #50	; 0x32
 80050a0:	4a08      	ldr	r2, [pc, #32]	; (80050c4 <UART_SetConfig+0x4e4>)
 80050a2:	fba2 2303 	umull	r2, r3, r2, r3
 80050a6:	095b      	lsrs	r3, r3, #5
 80050a8:	f003 020f 	and.w	r2, r3, #15
 80050ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	4422      	add	r2, r4
 80050b4:	609a      	str	r2, [r3, #8]
}
 80050b6:	bf00      	nop
 80050b8:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80050bc:	46bd      	mov	sp, r7
 80050be:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80050c2:	bf00      	nop
 80050c4:	51eb851f 	.word	0x51eb851f

080050c8 <arm_max_f32>:
 80050c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80050cc:	1e4f      	subs	r7, r1, #1
 80050ce:	ea5f 0897 	movs.w	r8, r7, lsr #2
 80050d2:	f100 0e04 	add.w	lr, r0, #4
 80050d6:	edd0 7a00 	vldr	s15, [r0]
 80050da:	d058      	beq.n	800518e <arm_max_f32+0xc6>
 80050dc:	3014      	adds	r0, #20
 80050de:	46c4      	mov	ip, r8
 80050e0:	2604      	movs	r6, #4
 80050e2:	2400      	movs	r4, #0
 80050e4:	ed10 6a04 	vldr	s12, [r0, #-16]
 80050e8:	ed50 6a03 	vldr	s13, [r0, #-12]
 80050ec:	ed10 7a02 	vldr	s14, [r0, #-8]
 80050f0:	ed50 5a01 	vldr	s11, [r0, #-4]
 80050f4:	eeb4 6ae7 	vcmpe.f32	s12, s15
 80050f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80050fc:	bfc8      	it	gt
 80050fe:	eef0 7a46 	vmovgt.f32	s15, s12
 8005102:	f1a6 0503 	sub.w	r5, r6, #3
 8005106:	eef4 7ae6 	vcmpe.f32	s15, s13
 800510a:	bfc8      	it	gt
 800510c:	462c      	movgt	r4, r5
 800510e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005112:	bf48      	it	mi
 8005114:	eef0 7a66 	vmovmi.f32	s15, s13
 8005118:	f1a6 0502 	sub.w	r5, r6, #2
 800511c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005120:	bf48      	it	mi
 8005122:	462c      	movmi	r4, r5
 8005124:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005128:	bf48      	it	mi
 800512a:	eef0 7a47 	vmovmi.f32	s15, s14
 800512e:	f106 35ff 	add.w	r5, r6, #4294967295
 8005132:	eef4 7ae5 	vcmpe.f32	s15, s11
 8005136:	bf48      	it	mi
 8005138:	462c      	movmi	r4, r5
 800513a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800513e:	bf48      	it	mi
 8005140:	4634      	movmi	r4, r6
 8005142:	bf48      	it	mi
 8005144:	eef0 7a65 	vmovmi.f32	s15, s11
 8005148:	f1bc 0c01 	subs.w	ip, ip, #1
 800514c:	f100 0010 	add.w	r0, r0, #16
 8005150:	f106 0604 	add.w	r6, r6, #4
 8005154:	d1c6      	bne.n	80050e4 <arm_max_f32+0x1c>
 8005156:	eb0e 1e08 	add.w	lr, lr, r8, lsl #4
 800515a:	f017 0003 	ands.w	r0, r7, #3
 800515e:	d018      	beq.n	8005192 <arm_max_f32+0xca>
 8005160:	1a08      	subs	r0, r1, r0
 8005162:	ecbe 7a01 	vldmia	lr!, {s14}
 8005166:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800516a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800516e:	bfc8      	it	gt
 8005170:	4604      	movgt	r4, r0
 8005172:	f100 0001 	add.w	r0, r0, #1
 8005176:	bfd8      	it	le
 8005178:	eeb0 7a67 	vmovle.f32	s14, s15
 800517c:	4281      	cmp	r1, r0
 800517e:	eef0 7a47 	vmov.f32	s15, s14
 8005182:	d1ee      	bne.n	8005162 <arm_max_f32+0x9a>
 8005184:	ed82 7a00 	vstr	s14, [r2]
 8005188:	601c      	str	r4, [r3, #0]
 800518a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800518e:	4644      	mov	r4, r8
 8005190:	e7e3      	b.n	800515a <arm_max_f32+0x92>
 8005192:	eeb0 7a67 	vmov.f32	s14, s15
 8005196:	e7f5      	b.n	8005184 <arm_max_f32+0xbc>

08005198 <arm_cfft_radix8by2_f32>:
 8005198:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800519c:	ed2d 8b08 	vpush	{d8-d11}
 80051a0:	4607      	mov	r7, r0
 80051a2:	4608      	mov	r0, r1
 80051a4:	f8b7 e000 	ldrh.w	lr, [r7]
 80051a8:	687a      	ldr	r2, [r7, #4]
 80051aa:	ea4f 015e 	mov.w	r1, lr, lsr #1
 80051ae:	eb00 088e 	add.w	r8, r0, lr, lsl #2
 80051b2:	ea5f 0ede 	movs.w	lr, lr, lsr #3
 80051b6:	f000 80b0 	beq.w	800531a <arm_cfft_radix8by2_f32+0x182>
 80051ba:	008b      	lsls	r3, r1, #2
 80051bc:	3310      	adds	r3, #16
 80051be:	18c6      	adds	r6, r0, r3
 80051c0:	3210      	adds	r2, #16
 80051c2:	4443      	add	r3, r8
 80051c4:	f100 0510 	add.w	r5, r0, #16
 80051c8:	f108 0410 	add.w	r4, r8, #16
 80051cc:	ed54 1a04 	vldr	s3, [r4, #-16]
 80051d0:	ed54 6a03 	vldr	s13, [r4, #-12]
 80051d4:	ed13 4a04 	vldr	s8, [r3, #-16]
 80051d8:	ed53 3a03 	vldr	s7, [r3, #-12]
 80051dc:	ed53 5a02 	vldr	s11, [r3, #-8]
 80051e0:	ed13 5a01 	vldr	s10, [r3, #-4]
 80051e4:	ed14 0a02 	vldr	s0, [r4, #-8]
 80051e8:	ed54 7a01 	vldr	s15, [r4, #-4]
 80051ec:	ed16 2a04 	vldr	s4, [r6, #-16]
 80051f0:	ed56 2a03 	vldr	s5, [r6, #-12]
 80051f4:	ed15 6a03 	vldr	s12, [r5, #-12]
 80051f8:	ed15 7a01 	vldr	s14, [r5, #-4]
 80051fc:	ed15 3a04 	vldr	s6, [r5, #-16]
 8005200:	ed56 0a02 	vldr	s1, [r6, #-8]
 8005204:	ed16 1a01 	vldr	s2, [r6, #-4]
 8005208:	ed55 4a02 	vldr	s9, [r5, #-8]
 800520c:	ee73 ba21 	vadd.f32	s23, s6, s3
 8005210:	ee36 ba26 	vadd.f32	s22, s12, s13
 8005214:	ee37 aa27 	vadd.f32	s20, s14, s15
 8005218:	ee72 9a04 	vadd.f32	s19, s4, s8
 800521c:	ee32 9aa3 	vadd.f32	s18, s5, s7
 8005220:	ee31 8a05 	vadd.f32	s16, s2, s10
 8005224:	ee74 aa80 	vadd.f32	s21, s9, s0
 8005228:	ee70 8aa5 	vadd.f32	s17, s1, s11
 800522c:	ed45 ba04 	vstr	s23, [r5, #-16]
 8005230:	ed05 ba03 	vstr	s22, [r5, #-12]
 8005234:	ed45 aa02 	vstr	s21, [r5, #-8]
 8005238:	ed05 aa01 	vstr	s20, [r5, #-4]
 800523c:	ed06 8a01 	vstr	s16, [r6, #-4]
 8005240:	ed46 9a04 	vstr	s19, [r6, #-16]
 8005244:	ed06 9a03 	vstr	s18, [r6, #-12]
 8005248:	ed46 8a02 	vstr	s17, [r6, #-8]
 800524c:	ee76 6a66 	vsub.f32	s13, s12, s13
 8005250:	ee73 3ae2 	vsub.f32	s7, s7, s5
 8005254:	ed12 6a03 	vldr	s12, [r2, #-12]
 8005258:	ed52 2a04 	vldr	s5, [r2, #-16]
 800525c:	ee33 3a61 	vsub.f32	s6, s6, s3
 8005260:	ee34 4a42 	vsub.f32	s8, s8, s4
 8005264:	ee26 8a86 	vmul.f32	s16, s13, s12
 8005268:	ee24 2a06 	vmul.f32	s4, s8, s12
 800526c:	ee63 1a22 	vmul.f32	s3, s6, s5
 8005270:	ee24 4a22 	vmul.f32	s8, s8, s5
 8005274:	ee23 3a06 	vmul.f32	s6, s6, s12
 8005278:	ee66 6aa2 	vmul.f32	s13, s13, s5
 800527c:	ee23 6a86 	vmul.f32	s12, s7, s12
 8005280:	ee63 3aa2 	vmul.f32	s7, s7, s5
 8005284:	ee36 6a04 	vadd.f32	s12, s12, s8
 8005288:	ee76 6ac3 	vsub.f32	s13, s13, s6
 800528c:	ee72 3a63 	vsub.f32	s7, s4, s7
 8005290:	ee71 2a88 	vadd.f32	s5, s3, s16
 8005294:	ed44 6a03 	vstr	s13, [r4, #-12]
 8005298:	ed44 2a04 	vstr	s5, [r4, #-16]
 800529c:	ed43 3a04 	vstr	s7, [r3, #-16]
 80052a0:	ed03 6a03 	vstr	s12, [r3, #-12]
 80052a4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80052a8:	ee75 6ae0 	vsub.f32	s13, s11, s1
 80052ac:	ed12 7a01 	vldr	s14, [r2, #-4]
 80052b0:	ed52 5a02 	vldr	s11, [r2, #-8]
 80052b4:	ee35 6a41 	vsub.f32	s12, s10, s2
 80052b8:	ee74 4ac0 	vsub.f32	s9, s9, s0
 80052bc:	ee67 3a87 	vmul.f32	s7, s15, s14
 80052c0:	ee26 5a87 	vmul.f32	s10, s13, s14
 80052c4:	ee24 4aa5 	vmul.f32	s8, s9, s11
 80052c8:	ee67 7aa5 	vmul.f32	s15, s15, s11
 80052cc:	ee64 4a87 	vmul.f32	s9, s9, s14
 80052d0:	ee66 6aa5 	vmul.f32	s13, s13, s11
 80052d4:	ee26 7a07 	vmul.f32	s14, s12, s14
 80052d8:	ee26 6a25 	vmul.f32	s12, s12, s11
 80052dc:	ee77 7ae4 	vsub.f32	s15, s15, s9
 80052e0:	ee74 5a23 	vadd.f32	s11, s8, s7
 80052e4:	ee35 6a46 	vsub.f32	s12, s10, s12
 80052e8:	ee37 7a26 	vadd.f32	s14, s14, s13
 80052ec:	f1be 0e01 	subs.w	lr, lr, #1
 80052f0:	ed44 5a02 	vstr	s11, [r4, #-8]
 80052f4:	f105 0510 	add.w	r5, r5, #16
 80052f8:	ed44 7a01 	vstr	s15, [r4, #-4]
 80052fc:	f106 0610 	add.w	r6, r6, #16
 8005300:	ed03 6a02 	vstr	s12, [r3, #-8]
 8005304:	ed03 7a01 	vstr	s14, [r3, #-4]
 8005308:	f102 0210 	add.w	r2, r2, #16
 800530c:	f104 0410 	add.w	r4, r4, #16
 8005310:	f103 0310 	add.w	r3, r3, #16
 8005314:	f47f af5a 	bne.w	80051cc <arm_cfft_radix8by2_f32+0x34>
 8005318:	687a      	ldr	r2, [r7, #4]
 800531a:	b28c      	uxth	r4, r1
 800531c:	4621      	mov	r1, r4
 800531e:	2302      	movs	r3, #2
 8005320:	f000 fbca 	bl	8005ab8 <arm_radix8_butterfly_f32>
 8005324:	ecbd 8b08 	vpop	{d8-d11}
 8005328:	4621      	mov	r1, r4
 800532a:	687a      	ldr	r2, [r7, #4]
 800532c:	4640      	mov	r0, r8
 800532e:	2302      	movs	r3, #2
 8005330:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005334:	f000 bbc0 	b.w	8005ab8 <arm_radix8_butterfly_f32>

08005338 <arm_cfft_radix8by4_f32>:
 8005338:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800533c:	ed2d 8b0a 	vpush	{d8-d12}
 8005340:	8802      	ldrh	r2, [r0, #0]
 8005342:	ed91 6a00 	vldr	s12, [r1]
 8005346:	b08f      	sub	sp, #60	; 0x3c
 8005348:	460f      	mov	r7, r1
 800534a:	0852      	lsrs	r2, r2, #1
 800534c:	6841      	ldr	r1, [r0, #4]
 800534e:	900c      	str	r0, [sp, #48]	; 0x30
 8005350:	0093      	lsls	r3, r2, #2
 8005352:	4638      	mov	r0, r7
 8005354:	4418      	add	r0, r3
 8005356:	4606      	mov	r6, r0
 8005358:	9009      	str	r0, [sp, #36]	; 0x24
 800535a:	4418      	add	r0, r3
 800535c:	edd0 6a00 	vldr	s13, [r0]
 8005360:	ed96 4a00 	vldr	s8, [r6]
 8005364:	edd6 2a01 	vldr	s5, [r6, #4]
 8005368:	edd0 7a01 	vldr	s15, [r0, #4]
 800536c:	900a      	str	r0, [sp, #40]	; 0x28
 800536e:	ee76 5a26 	vadd.f32	s11, s12, s13
 8005372:	4604      	mov	r4, r0
 8005374:	4625      	mov	r5, r4
 8005376:	441c      	add	r4, r3
 8005378:	edd4 4a00 	vldr	s9, [r4]
 800537c:	ed97 7a01 	vldr	s14, [r7, #4]
 8005380:	ed94 3a01 	vldr	s6, [r4, #4]
 8005384:	9401      	str	r4, [sp, #4]
 8005386:	ee35 5a84 	vadd.f32	s10, s11, s8
 800538a:	4630      	mov	r0, r6
 800538c:	ee35 5a24 	vadd.f32	s10, s10, s9
 8005390:	463e      	mov	r6, r7
 8005392:	ee15 ea10 	vmov	lr, s10
 8005396:	ee76 6a66 	vsub.f32	s13, s12, s13
 800539a:	f846 eb08 	str.w	lr, [r6], #8
 800539e:	ee37 6a27 	vadd.f32	s12, s14, s15
 80053a2:	ed90 5a01 	vldr	s10, [r0, #4]
 80053a6:	9605      	str	r6, [sp, #20]
 80053a8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80053ac:	9e01      	ldr	r6, [sp, #4]
 80053ae:	9707      	str	r7, [sp, #28]
 80053b0:	ee76 3aa2 	vadd.f32	s7, s13, s5
 80053b4:	ed96 2a01 	vldr	s4, [r6, #4]
 80053b8:	ee36 7a05 	vadd.f32	s14, s12, s10
 80053bc:	ee75 5ac4 	vsub.f32	s11, s11, s8
 80053c0:	ee37 5ac4 	vsub.f32	s10, s15, s8
 80053c4:	ee77 7a84 	vadd.f32	s15, s15, s8
 80053c8:	ee33 4ac3 	vsub.f32	s8, s7, s6
 80053cc:	4604      	mov	r4, r0
 80053ce:	46a3      	mov	fp, r4
 80053d0:	ee37 7a02 	vadd.f32	s14, s14, s4
 80053d4:	ee35 5a24 	vadd.f32	s10, s10, s9
 80053d8:	ee14 8a10 	vmov	r8, s8
 80053dc:	46a4      	mov	ip, r4
 80053de:	ee75 5ae4 	vsub.f32	s11, s11, s9
 80053e2:	ed87 7a01 	vstr	s14, [r7, #4]
 80053e6:	f84b 8b08 	str.w	r8, [fp], #8
 80053ea:	f1ac 0704 	sub.w	r7, ip, #4
 80053ee:	ed8c 5a01 	vstr	s10, [ip, #4]
 80053f2:	f101 0c08 	add.w	ip, r1, #8
 80053f6:	462c      	mov	r4, r5
 80053f8:	f8cd c010 	str.w	ip, [sp, #16]
 80053fc:	ee15 ca90 	vmov	ip, s11
 8005400:	ee36 6a62 	vsub.f32	s12, s12, s5
 8005404:	f844 cb08 	str.w	ip, [r4], #8
 8005408:	ee76 6ae2 	vsub.f32	s13, s13, s5
 800540c:	ee36 6a43 	vsub.f32	s12, s12, s6
 8005410:	9406      	str	r4, [sp, #24]
 8005412:	ee76 6a83 	vadd.f32	s13, s13, s6
 8005416:	f101 0410 	add.w	r4, r1, #16
 800541a:	0852      	lsrs	r2, r2, #1
 800541c:	9402      	str	r4, [sp, #8]
 800541e:	ed85 6a01 	vstr	s12, [r5, #4]
 8005422:	462c      	mov	r4, r5
 8005424:	f101 0518 	add.w	r5, r1, #24
 8005428:	920b      	str	r2, [sp, #44]	; 0x2c
 800542a:	46b2      	mov	sl, r6
 800542c:	9503      	str	r5, [sp, #12]
 800542e:	ee77 7ae4 	vsub.f32	s15, s15, s9
 8005432:	3a02      	subs	r2, #2
 8005434:	ee16 5a90 	vmov	r5, s13
 8005438:	46b6      	mov	lr, r6
 800543a:	4630      	mov	r0, r6
 800543c:	0852      	lsrs	r2, r2, #1
 800543e:	f84a 5b08 	str.w	r5, [sl], #8
 8005442:	f1a0 0604 	sub.w	r6, r0, #4
 8005446:	edce 7a01 	vstr	s15, [lr, #4]
 800544a:	9208      	str	r2, [sp, #32]
 800544c:	f000 8130 	beq.w	80056b0 <arm_cfft_radix8by4_f32+0x378>
 8005450:	4691      	mov	r9, r2
 8005452:	9a07      	ldr	r2, [sp, #28]
 8005454:	f8dd 8008 	ldr.w	r8, [sp, #8]
 8005458:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 800545c:	3b08      	subs	r3, #8
 800545e:	f102 0510 	add.w	r5, r2, #16
 8005462:	f101 0c20 	add.w	ip, r1, #32
 8005466:	f1a4 020c 	sub.w	r2, r4, #12
 800546a:	f101 0e30 	add.w	lr, r1, #48	; 0x30
 800546e:	4433      	add	r3, r6
 8005470:	3410      	adds	r4, #16
 8005472:	4650      	mov	r0, sl
 8005474:	4659      	mov	r1, fp
 8005476:	ed55 3a02 	vldr	s7, [r5, #-8]
 800547a:	ed14 5a02 	vldr	s10, [r4, #-8]
 800547e:	ed91 7a00 	vldr	s14, [r1]
 8005482:	edd0 7a00 	vldr	s15, [r0]
 8005486:	ed54 5a01 	vldr	s11, [r4, #-4]
 800548a:	ed15 4a01 	vldr	s8, [r5, #-4]
 800548e:	edd0 6a01 	vldr	s13, [r0, #4]
 8005492:	ed91 6a01 	vldr	s12, [r1, #4]
 8005496:	ee33 8a85 	vadd.f32	s16, s7, s10
 800549a:	ee34 0a25 	vadd.f32	s0, s8, s11
 800549e:	ee78 4a07 	vadd.f32	s9, s16, s14
 80054a2:	ee74 5a65 	vsub.f32	s11, s8, s11
 80054a6:	ee74 4aa7 	vadd.f32	s9, s9, s15
 80054aa:	ee33 5ac5 	vsub.f32	s10, s7, s10
 80054ae:	ed45 4a02 	vstr	s9, [r5, #-8]
 80054b2:	edd1 4a01 	vldr	s9, [r1, #4]
 80054b6:	ed90 4a01 	vldr	s8, [r0, #4]
 80054ba:	ee70 4a24 	vadd.f32	s9, s0, s9
 80054be:	ee75 aa06 	vadd.f32	s21, s10, s12
 80054c2:	ee74 4a84 	vadd.f32	s9, s9, s8
 80054c6:	ee35 aac7 	vsub.f32	s20, s11, s14
 80054ca:	ed45 4a01 	vstr	s9, [r5, #-4]
 80054ce:	edd6 1a00 	vldr	s3, [r6]
 80054d2:	edd7 0a00 	vldr	s1, [r7]
 80054d6:	ed92 4a02 	vldr	s8, [r2, #8]
 80054da:	edd3 3a02 	vldr	s7, [r3, #8]
 80054de:	ed93 2a01 	vldr	s4, [r3, #4]
 80054e2:	ed16 1a01 	vldr	s2, [r6, #-4]
 80054e6:	edd2 2a01 	vldr	s5, [r2, #4]
 80054ea:	ed57 9a01 	vldr	s19, [r7, #-4]
 80054ee:	ee70 4aa1 	vadd.f32	s9, s1, s3
 80054f2:	ee39 3a81 	vadd.f32	s6, s19, s2
 80054f6:	ee74 8a84 	vadd.f32	s17, s9, s8
 80054fa:	ee70 1ae1 	vsub.f32	s3, s1, s3
 80054fe:	ee78 8aa3 	vadd.f32	s17, s17, s7
 8005502:	ee7a aae6 	vsub.f32	s21, s21, s13
 8005506:	ee18 aa90 	vmov	sl, s17
 800550a:	f847 a908 	str.w	sl, [r7], #-8
 800550e:	edd2 8a01 	vldr	s17, [r2, #4]
 8005512:	ed93 9a01 	vldr	s18, [r3, #4]
 8005516:	ee73 8a28 	vadd.f32	s17, s6, s17
 800551a:	ee3a aa27 	vadd.f32	s20, s20, s15
 800551e:	ee78 8a89 	vadd.f32	s17, s17, s18
 8005522:	ee74 0a63 	vsub.f32	s1, s8, s7
 8005526:	edc7 8a01 	vstr	s17, [r7, #4]
 800552a:	ed18 ba02 	vldr	s22, [r8, #-8]
 800552e:	ed58 8a01 	vldr	s17, [r8, #-4]
 8005532:	ee39 1ac1 	vsub.f32	s2, s19, s2
 8005536:	ee6a ba28 	vmul.f32	s23, s20, s17
 800553a:	ee2a ca8b 	vmul.f32	s24, s21, s22
 800553e:	ee71 9ae2 	vsub.f32	s19, s3, s5
 8005542:	ee31 9a20 	vadd.f32	s18, s2, s1
 8005546:	ee79 9a82 	vadd.f32	s19, s19, s4
 800554a:	ee3c ca2b 	vadd.f32	s24, s24, s23
 800554e:	ee6a aaa8 	vmul.f32	s21, s21, s17
 8005552:	ee69 baa8 	vmul.f32	s23, s19, s17
 8005556:	ee2a aa0b 	vmul.f32	s20, s20, s22
 800555a:	ee69 9a8b 	vmul.f32	s19, s19, s22
 800555e:	ee69 8a28 	vmul.f32	s17, s18, s17
 8005562:	ee29 ba0b 	vmul.f32	s22, s18, s22
 8005566:	ee1c aa10 	vmov	sl, s24
 800556a:	ee78 8aa9 	vadd.f32	s17, s17, s19
 800556e:	f841 ab08 	str.w	sl, [r1], #8
 8005572:	ee3a aa6a 	vsub.f32	s20, s20, s21
 8005576:	ee3b bacb 	vsub.f32	s22, s23, s22
 800557a:	ee34 4ac4 	vsub.f32	s8, s9, s8
 800557e:	ee33 3a62 	vsub.f32	s6, s6, s5
 8005582:	ed01 aa01 	vstr	s20, [r1, #-4]
 8005586:	edc2 8a01 	vstr	s17, [r2, #4]
 800558a:	ed82 ba02 	vstr	s22, [r2, #8]
 800558e:	ed5c 4a04 	vldr	s9, [ip, #-16]
 8005592:	ee74 3a63 	vsub.f32	s7, s8, s7
 8005596:	ee38 8a47 	vsub.f32	s16, s16, s14
 800559a:	ed1c 4a03 	vldr	s8, [ip, #-12]
 800559e:	ee30 0a46 	vsub.f32	s0, s0, s12
 80055a2:	ee33 3a42 	vsub.f32	s6, s6, s4
 80055a6:	ee38 8a67 	vsub.f32	s16, s16, s15
 80055aa:	ee30 0a66 	vsub.f32	s0, s0, s13
 80055ae:	ee23 9ae4 	vnmul.f32	s18, s7, s9
 80055b2:	ee63 8a04 	vmul.f32	s17, s6, s8
 80055b6:	ee28 aa24 	vmul.f32	s20, s16, s9
 80055ba:	ee60 9a04 	vmul.f32	s19, s0, s8
 80055be:	ee28 8a04 	vmul.f32	s16, s16, s8
 80055c2:	ee20 0a24 	vmul.f32	s0, s0, s9
 80055c6:	ee63 3a84 	vmul.f32	s7, s7, s8
 80055ca:	ee39 4a68 	vsub.f32	s8, s18, s17
 80055ce:	ee7a 9a29 	vadd.f32	s19, s20, s19
 80055d2:	ee14 aa10 	vmov	sl, s8
 80055d6:	ee30 0a48 	vsub.f32	s0, s0, s16
 80055da:	ee63 4a24 	vmul.f32	s9, s6, s9
 80055de:	ed44 9a02 	vstr	s19, [r4, #-8]
 80055e2:	ee73 3ae4 	vsub.f32	s7, s7, s9
 80055e6:	ed04 0a01 	vstr	s0, [r4, #-4]
 80055ea:	f846 a908 	str.w	sl, [r6], #-8
 80055ee:	ee35 6a46 	vsub.f32	s12, s10, s12
 80055f2:	ee35 7a87 	vadd.f32	s14, s11, s14
 80055f6:	edc6 3a01 	vstr	s7, [r6, #4]
 80055fa:	ee76 6a26 	vadd.f32	s13, s12, s13
 80055fe:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005602:	ed1e 6a05 	vldr	s12, [lr, #-20]	; 0xffffffec
 8005606:	ed1e 7a06 	vldr	s14, [lr, #-24]	; 0xffffffe8
 800560a:	ee67 5a86 	vmul.f32	s11, s15, s12
 800560e:	ee26 5a87 	vmul.f32	s10, s13, s14
 8005612:	ee72 2a62 	vsub.f32	s5, s4, s5
 8005616:	ee30 1ac1 	vsub.f32	s2, s1, s2
 800561a:	ee72 2ae1 	vsub.f32	s5, s5, s3
 800561e:	ee75 5a25 	vadd.f32	s11, s10, s11
 8005622:	ee62 0a86 	vmul.f32	s1, s5, s12
 8005626:	ee66 6a86 	vmul.f32	s13, s13, s12
 800562a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800562e:	ee21 6a06 	vmul.f32	s12, s2, s12
 8005632:	ee62 2a87 	vmul.f32	s5, s5, s14
 8005636:	ee21 1a07 	vmul.f32	s2, s2, s14
 800563a:	ee15 aa90 	vmov	sl, s11
 800563e:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8005642:	f840 ab08 	str.w	sl, [r0], #8
 8005646:	ee30 1ac1 	vsub.f32	s2, s1, s2
 800564a:	ee76 2a22 	vadd.f32	s5, s12, s5
 800564e:	f1b9 0901 	subs.w	r9, r9, #1
 8005652:	ed40 7a01 	vstr	s15, [r0, #-4]
 8005656:	f105 0508 	add.w	r5, r5, #8
 800565a:	ed83 1a02 	vstr	s2, [r3, #8]
 800565e:	edc3 2a01 	vstr	s5, [r3, #4]
 8005662:	f108 0808 	add.w	r8, r8, #8
 8005666:	f1a2 0208 	sub.w	r2, r2, #8
 800566a:	f10c 0c10 	add.w	ip, ip, #16
 800566e:	f104 0408 	add.w	r4, r4, #8
 8005672:	f10e 0e18 	add.w	lr, lr, #24
 8005676:	f1a3 0308 	sub.w	r3, r3, #8
 800567a:	f47f aefc 	bne.w	8005476 <arm_cfft_radix8by4_f32+0x13e>
 800567e:	9908      	ldr	r1, [sp, #32]
 8005680:	9802      	ldr	r0, [sp, #8]
 8005682:	f8dd a034 	ldr.w	sl, [sp, #52]	; 0x34
 8005686:	00cb      	lsls	r3, r1, #3
 8005688:	eb01 0241 	add.w	r2, r1, r1, lsl #1
 800568c:	eb00 1101 	add.w	r1, r0, r1, lsl #4
 8005690:	9102      	str	r1, [sp, #8]
 8005692:	9905      	ldr	r1, [sp, #20]
 8005694:	4419      	add	r1, r3
 8005696:	9105      	str	r1, [sp, #20]
 8005698:	9904      	ldr	r1, [sp, #16]
 800569a:	4419      	add	r1, r3
 800569c:	9104      	str	r1, [sp, #16]
 800569e:	9906      	ldr	r1, [sp, #24]
 80056a0:	449b      	add	fp, r3
 80056a2:	4419      	add	r1, r3
 80056a4:	449a      	add	sl, r3
 80056a6:	9b03      	ldr	r3, [sp, #12]
 80056a8:	9106      	str	r1, [sp, #24]
 80056aa:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80056ae:	9303      	str	r3, [sp, #12]
 80056b0:	9a05      	ldr	r2, [sp, #20]
 80056b2:	9806      	ldr	r0, [sp, #24]
 80056b4:	ed92 4a00 	vldr	s8, [r2]
 80056b8:	ed90 7a00 	vldr	s14, [r0]
 80056bc:	ed9b 3a00 	vldr	s6, [fp]
 80056c0:	edda 3a00 	vldr	s7, [sl]
 80056c4:	edd2 4a01 	vldr	s9, [r2, #4]
 80056c8:	edd0 6a01 	vldr	s13, [r0, #4]
 80056cc:	ed9a 2a01 	vldr	s4, [sl, #4]
 80056d0:	eddb 7a01 	vldr	s15, [fp, #4]
 80056d4:	f8bd 402c 	ldrh.w	r4, [sp, #44]	; 0x2c
 80056d8:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 80056da:	ee34 6a07 	vadd.f32	s12, s8, s14
 80056de:	ee74 5aa6 	vadd.f32	s11, s9, s13
 80056e2:	ee36 5a03 	vadd.f32	s10, s12, s6
 80056e6:	ee74 6ae6 	vsub.f32	s13, s9, s13
 80056ea:	ee35 5a23 	vadd.f32	s10, s10, s7
 80056ee:	ee34 7a47 	vsub.f32	s14, s8, s14
 80056f2:	ed82 5a00 	vstr	s10, [r2]
 80056f6:	ed9b 5a01 	vldr	s10, [fp, #4]
 80056fa:	edda 4a01 	vldr	s9, [sl, #4]
 80056fe:	ee35 5a85 	vadd.f32	s10, s11, s10
 8005702:	ee37 4a27 	vadd.f32	s8, s14, s15
 8005706:	ee35 5a24 	vadd.f32	s10, s10, s9
 800570a:	ee76 4ac3 	vsub.f32	s9, s13, s6
 800570e:	ed82 5a01 	vstr	s10, [r2, #4]
 8005712:	9a04      	ldr	r2, [sp, #16]
 8005714:	ee34 5aa3 	vadd.f32	s10, s9, s7
 8005718:	edd2 1a00 	vldr	s3, [r2]
 800571c:	edd2 2a01 	vldr	s5, [r2, #4]
 8005720:	9a02      	ldr	r2, [sp, #8]
 8005722:	ee34 4a42 	vsub.f32	s8, s8, s4
 8005726:	ee36 6a43 	vsub.f32	s12, s12, s6
 800572a:	ee64 4a21 	vmul.f32	s9, s8, s3
 800572e:	ee24 4a22 	vmul.f32	s8, s8, s5
 8005732:	ee65 2a22 	vmul.f32	s5, s10, s5
 8005736:	ee25 5a21 	vmul.f32	s10, s10, s3
 800573a:	ee74 2aa2 	vadd.f32	s5, s9, s5
 800573e:	ee35 5a44 	vsub.f32	s10, s10, s8
 8005742:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8005746:	edcb 2a00 	vstr	s5, [fp]
 800574a:	ed8b 5a01 	vstr	s10, [fp, #4]
 800574e:	ed92 4a01 	vldr	s8, [r2, #4]
 8005752:	ed92 5a00 	vldr	s10, [r2]
 8005756:	9a03      	ldr	r2, [sp, #12]
 8005758:	ee36 6a63 	vsub.f32	s12, s12, s7
 800575c:	ee75 5ac2 	vsub.f32	s11, s11, s4
 8005760:	ee66 4a05 	vmul.f32	s9, s12, s10
 8005764:	ee25 5a85 	vmul.f32	s10, s11, s10
 8005768:	ee26 6a04 	vmul.f32	s12, s12, s8
 800576c:	ee65 5a84 	vmul.f32	s11, s11, s8
 8005770:	ee35 6a46 	vsub.f32	s12, s10, s12
 8005774:	ee74 5aa5 	vadd.f32	s11, s9, s11
 8005778:	ee76 6a83 	vadd.f32	s13, s13, s6
 800577c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8005780:	ed80 6a01 	vstr	s12, [r0, #4]
 8005784:	edc0 5a00 	vstr	s11, [r0]
 8005788:	edd2 5a01 	vldr	s11, [r2, #4]
 800578c:	9807      	ldr	r0, [sp, #28]
 800578e:	ee77 7a02 	vadd.f32	s15, s14, s4
 8005792:	ee36 7ae3 	vsub.f32	s14, s13, s7
 8005796:	edd2 6a00 	vldr	s13, [r2]
 800579a:	ee27 6aa6 	vmul.f32	s12, s15, s13
 800579e:	ee67 6a26 	vmul.f32	s13, s14, s13
 80057a2:	ee67 7aa5 	vmul.f32	s15, s15, s11
 80057a6:	ee27 7a25 	vmul.f32	s14, s14, s11
 80057aa:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80057ae:	ee36 7a07 	vadd.f32	s14, s12, s14
 80057b2:	edca 7a01 	vstr	s15, [sl, #4]
 80057b6:	ed8a 7a00 	vstr	s14, [sl]
 80057ba:	6872      	ldr	r2, [r6, #4]
 80057bc:	4621      	mov	r1, r4
 80057be:	2304      	movs	r3, #4
 80057c0:	f000 f97a 	bl	8005ab8 <arm_radix8_butterfly_f32>
 80057c4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80057c6:	6872      	ldr	r2, [r6, #4]
 80057c8:	4621      	mov	r1, r4
 80057ca:	2304      	movs	r3, #4
 80057cc:	f000 f974 	bl	8005ab8 <arm_radix8_butterfly_f32>
 80057d0:	980a      	ldr	r0, [sp, #40]	; 0x28
 80057d2:	6872      	ldr	r2, [r6, #4]
 80057d4:	4621      	mov	r1, r4
 80057d6:	2304      	movs	r3, #4
 80057d8:	f000 f96e 	bl	8005ab8 <arm_radix8_butterfly_f32>
 80057dc:	6872      	ldr	r2, [r6, #4]
 80057de:	9801      	ldr	r0, [sp, #4]
 80057e0:	4621      	mov	r1, r4
 80057e2:	2304      	movs	r3, #4
 80057e4:	b00f      	add	sp, #60	; 0x3c
 80057e6:	ecbd 8b0a 	vpop	{d8-d12}
 80057ea:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80057ee:	f000 b963 	b.w	8005ab8 <arm_radix8_butterfly_f32>
 80057f2:	bf00      	nop

080057f4 <arm_cfft_f32>:
 80057f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80057f8:	2a01      	cmp	r2, #1
 80057fa:	4606      	mov	r6, r0
 80057fc:	4617      	mov	r7, r2
 80057fe:	460c      	mov	r4, r1
 8005800:	4698      	mov	r8, r3
 8005802:	8805      	ldrh	r5, [r0, #0]
 8005804:	d054      	beq.n	80058b0 <arm_cfft_f32+0xbc>
 8005806:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
 800580a:	d04c      	beq.n	80058a6 <arm_cfft_f32+0xb2>
 800580c:	d916      	bls.n	800583c <arm_cfft_f32+0x48>
 800580e:	f5b5 6f80 	cmp.w	r5, #1024	; 0x400
 8005812:	d01a      	beq.n	800584a <arm_cfft_f32+0x56>
 8005814:	d95c      	bls.n	80058d0 <arm_cfft_f32+0xdc>
 8005816:	f5b5 6f00 	cmp.w	r5, #2048	; 0x800
 800581a:	d044      	beq.n	80058a6 <arm_cfft_f32+0xb2>
 800581c:	f5b5 5f80 	cmp.w	r5, #4096	; 0x1000
 8005820:	d105      	bne.n	800582e <arm_cfft_f32+0x3a>
 8005822:	2301      	movs	r3, #1
 8005824:	6872      	ldr	r2, [r6, #4]
 8005826:	4629      	mov	r1, r5
 8005828:	4620      	mov	r0, r4
 800582a:	f000 f945 	bl	8005ab8 <arm_radix8_butterfly_f32>
 800582e:	f1b8 0f00 	cmp.w	r8, #0
 8005832:	d111      	bne.n	8005858 <arm_cfft_f32+0x64>
 8005834:	2f01      	cmp	r7, #1
 8005836:	d016      	beq.n	8005866 <arm_cfft_f32+0x72>
 8005838:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800583c:	2d20      	cmp	r5, #32
 800583e:	d032      	beq.n	80058a6 <arm_cfft_f32+0xb2>
 8005840:	d94a      	bls.n	80058d8 <arm_cfft_f32+0xe4>
 8005842:	2d40      	cmp	r5, #64	; 0x40
 8005844:	d0ed      	beq.n	8005822 <arm_cfft_f32+0x2e>
 8005846:	2d80      	cmp	r5, #128	; 0x80
 8005848:	d1f1      	bne.n	800582e <arm_cfft_f32+0x3a>
 800584a:	4621      	mov	r1, r4
 800584c:	4630      	mov	r0, r6
 800584e:	f7ff fca3 	bl	8005198 <arm_cfft_radix8by2_f32>
 8005852:	f1b8 0f00 	cmp.w	r8, #0
 8005856:	d0ed      	beq.n	8005834 <arm_cfft_f32+0x40>
 8005858:	68b2      	ldr	r2, [r6, #8]
 800585a:	89b1      	ldrh	r1, [r6, #12]
 800585c:	4620      	mov	r0, r4
 800585e:	f7fa fcb7 	bl	80001d0 <arm_bitreversal_32>
 8005862:	2f01      	cmp	r7, #1
 8005864:	d1e8      	bne.n	8005838 <arm_cfft_f32+0x44>
 8005866:	ee07 5a90 	vmov	s15, r5
 800586a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800586e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005872:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8005876:	2d00      	cmp	r5, #0
 8005878:	d0de      	beq.n	8005838 <arm_cfft_f32+0x44>
 800587a:	f104 0108 	add.w	r1, r4, #8
 800587e:	2300      	movs	r3, #0
 8005880:	3301      	adds	r3, #1
 8005882:	429d      	cmp	r5, r3
 8005884:	f101 0108 	add.w	r1, r1, #8
 8005888:	ed11 7a04 	vldr	s14, [r1, #-16]
 800588c:	ed51 7a03 	vldr	s15, [r1, #-12]
 8005890:	ee27 7a26 	vmul.f32	s14, s14, s13
 8005894:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 8005898:	ed01 7a04 	vstr	s14, [r1, #-16]
 800589c:	ed41 7a03 	vstr	s15, [r1, #-12]
 80058a0:	d1ee      	bne.n	8005880 <arm_cfft_f32+0x8c>
 80058a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80058a6:	4621      	mov	r1, r4
 80058a8:	4630      	mov	r0, r6
 80058aa:	f7ff fd45 	bl	8005338 <arm_cfft_radix8by4_f32>
 80058ae:	e7be      	b.n	800582e <arm_cfft_f32+0x3a>
 80058b0:	b1ad      	cbz	r5, 80058de <arm_cfft_f32+0xea>
 80058b2:	f101 030c 	add.w	r3, r1, #12
 80058b6:	2200      	movs	r2, #0
 80058b8:	ed53 7a02 	vldr	s15, [r3, #-8]
 80058bc:	3201      	adds	r2, #1
 80058be:	eef1 7a67 	vneg.f32	s15, s15
 80058c2:	4295      	cmp	r5, r2
 80058c4:	ed43 7a02 	vstr	s15, [r3, #-8]
 80058c8:	f103 0308 	add.w	r3, r3, #8
 80058cc:	d1f4      	bne.n	80058b8 <arm_cfft_f32+0xc4>
 80058ce:	e79a      	b.n	8005806 <arm_cfft_f32+0x12>
 80058d0:	f5b5 7f00 	cmp.w	r5, #512	; 0x200
 80058d4:	d0a5      	beq.n	8005822 <arm_cfft_f32+0x2e>
 80058d6:	e7aa      	b.n	800582e <arm_cfft_f32+0x3a>
 80058d8:	2d10      	cmp	r5, #16
 80058da:	d0b6      	beq.n	800584a <arm_cfft_f32+0x56>
 80058dc:	e7a7      	b.n	800582e <arm_cfft_f32+0x3a>
 80058de:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
 80058e2:	d894      	bhi.n	800580e <arm_cfft_f32+0x1a>
 80058e4:	e7aa      	b.n	800583c <arm_cfft_f32+0x48>
 80058e6:	bf00      	nop

080058e8 <arm_cmplx_mag_f32>:
 80058e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80058ec:	ea5f 0892 	movs.w	r8, r2, lsr #2
 80058f0:	b084      	sub	sp, #16
 80058f2:	d07f      	beq.n	80059f4 <arm_cmplx_mag_f32+0x10c>
 80058f4:	2700      	movs	r7, #0
 80058f6:	f100 0420 	add.w	r4, r0, #32
 80058fa:	f101 0510 	add.w	r5, r1, #16
 80058fe:	4646      	mov	r6, r8
 8005900:	e05a      	b.n	80059b8 <arm_cmplx_mag_f32+0xd0>
 8005902:	eeb1 0ae7 	vsqrt.f32	s0, s15
 8005906:	eeb4 0a40 	vcmp.f32	s0, s0
 800590a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800590e:	f040 80a4 	bne.w	8005a5a <arm_cmplx_mag_f32+0x172>
 8005912:	ed05 0a04 	vstr	s0, [r5, #-16]
 8005916:	ed54 7a06 	vldr	s15, [r4, #-24]	; 0xffffffe8
 800591a:	ed14 0a05 	vldr	s0, [r4, #-20]	; 0xffffffec
 800591e:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8005922:	ee20 0a00 	vmul.f32	s0, s0, s0
 8005926:	ee77 7a80 	vadd.f32	s15, s15, s0
 800592a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800592e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005932:	f2c0 808f 	blt.w	8005a54 <arm_cmplx_mag_f32+0x16c>
 8005936:	eeb1 0ae7 	vsqrt.f32	s0, s15
 800593a:	eeb4 0a40 	vcmp.f32	s0, s0
 800593e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005942:	f040 80af 	bne.w	8005aa4 <arm_cmplx_mag_f32+0x1bc>
 8005946:	ed05 0a03 	vstr	s0, [r5, #-12]
 800594a:	ed54 7a04 	vldr	s15, [r4, #-16]
 800594e:	ed14 0a03 	vldr	s0, [r4, #-12]
 8005952:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8005956:	ee20 0a00 	vmul.f32	s0, s0, s0
 800595a:	ee77 7a80 	vadd.f32	s15, s15, s0
 800595e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8005962:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005966:	db72      	blt.n	8005a4e <arm_cmplx_mag_f32+0x166>
 8005968:	eeb1 0ae7 	vsqrt.f32	s0, s15
 800596c:	eeb4 0a40 	vcmp.f32	s0, s0
 8005970:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005974:	f040 808c 	bne.w	8005a90 <arm_cmplx_mag_f32+0x1a8>
 8005978:	ed05 0a02 	vstr	s0, [r5, #-8]
 800597c:	ed54 7a02 	vldr	s15, [r4, #-8]
 8005980:	ed14 0a01 	vldr	s0, [r4, #-4]
 8005984:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8005988:	ee20 0a00 	vmul.f32	s0, s0, s0
 800598c:	ee77 7a80 	vadd.f32	s15, s15, s0
 8005990:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8005994:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005998:	db20      	blt.n	80059dc <arm_cmplx_mag_f32+0xf4>
 800599a:	eeb1 0ae7 	vsqrt.f32	s0, s15
 800599e:	eeb4 0a40 	vcmp.f32	s0, s0
 80059a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80059a6:	d169      	bne.n	8005a7c <arm_cmplx_mag_f32+0x194>
 80059a8:	3e01      	subs	r6, #1
 80059aa:	ed05 0a01 	vstr	s0, [r5, #-4]
 80059ae:	f104 0420 	add.w	r4, r4, #32
 80059b2:	f105 0510 	add.w	r5, r5, #16
 80059b6:	d019      	beq.n	80059ec <arm_cmplx_mag_f32+0x104>
 80059b8:	ed54 7a08 	vldr	s15, [r4, #-32]	; 0xffffffe0
 80059bc:	ed14 0a07 	vldr	s0, [r4, #-28]	; 0xffffffe4
 80059c0:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80059c4:	ee20 0a00 	vmul.f32	s0, s0, s0
 80059c8:	ee77 7a80 	vadd.f32	s15, s15, s0
 80059cc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80059d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80059d4:	da95      	bge.n	8005902 <arm_cmplx_mag_f32+0x1a>
 80059d6:	f845 7c10 	str.w	r7, [r5, #-16]
 80059da:	e79c      	b.n	8005916 <arm_cmplx_mag_f32+0x2e>
 80059dc:	3e01      	subs	r6, #1
 80059de:	f845 7c04 	str.w	r7, [r5, #-4]
 80059e2:	f104 0420 	add.w	r4, r4, #32
 80059e6:	f105 0510 	add.w	r5, r5, #16
 80059ea:	d1e5      	bne.n	80059b8 <arm_cmplx_mag_f32+0xd0>
 80059ec:	eb00 1048 	add.w	r0, r0, r8, lsl #5
 80059f0:	eb01 1108 	add.w	r1, r1, r8, lsl #4
 80059f4:	f012 0503 	ands.w	r5, r2, #3
 80059f8:	d026      	beq.n	8005a48 <arm_cmplx_mag_f32+0x160>
 80059fa:	2600      	movs	r6, #0
 80059fc:	f100 0408 	add.w	r4, r0, #8
 8005a00:	e00c      	b.n	8005a1c <arm_cmplx_mag_f32+0x134>
 8005a02:	eeb1 0ae7 	vsqrt.f32	s0, s15
 8005a06:	eeb4 0a40 	vcmp.f32	s0, s0
 8005a0a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005a0e:	d12e      	bne.n	8005a6e <arm_cmplx_mag_f32+0x186>
 8005a10:	3d01      	subs	r5, #1
 8005a12:	ed01 0a01 	vstr	s0, [r1, #-4]
 8005a16:	f104 0408 	add.w	r4, r4, #8
 8005a1a:	d015      	beq.n	8005a48 <arm_cmplx_mag_f32+0x160>
 8005a1c:	ed54 7a02 	vldr	s15, [r4, #-8]
 8005a20:	ed14 0a01 	vldr	s0, [r4, #-4]
 8005a24:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8005a28:	ee20 0a00 	vmul.f32	s0, s0, s0
 8005a2c:	3104      	adds	r1, #4
 8005a2e:	ee77 7a80 	vadd.f32	s15, s15, s0
 8005a32:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8005a36:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005a3a:	dae2      	bge.n	8005a02 <arm_cmplx_mag_f32+0x11a>
 8005a3c:	3d01      	subs	r5, #1
 8005a3e:	f841 6c04 	str.w	r6, [r1, #-4]
 8005a42:	f104 0408 	add.w	r4, r4, #8
 8005a46:	d1e9      	bne.n	8005a1c <arm_cmplx_mag_f32+0x134>
 8005a48:	b004      	add	sp, #16
 8005a4a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005a4e:	f845 7c08 	str.w	r7, [r5, #-8]
 8005a52:	e793      	b.n	800597c <arm_cmplx_mag_f32+0x94>
 8005a54:	f845 7c0c 	str.w	r7, [r5, #-12]
 8005a58:	e777      	b.n	800594a <arm_cmplx_mag_f32+0x62>
 8005a5a:	eeb0 0a67 	vmov.f32	s0, s15
 8005a5e:	9203      	str	r2, [sp, #12]
 8005a60:	9102      	str	r1, [sp, #8]
 8005a62:	9001      	str	r0, [sp, #4]
 8005a64:	f005 f856 	bl	800ab14 <sqrtf>
 8005a68:	a801      	add	r0, sp, #4
 8005a6a:	c807      	ldmia	r0, {r0, r1, r2}
 8005a6c:	e751      	b.n	8005912 <arm_cmplx_mag_f32+0x2a>
 8005a6e:	eeb0 0a67 	vmov.f32	s0, s15
 8005a72:	9101      	str	r1, [sp, #4]
 8005a74:	f005 f84e 	bl	800ab14 <sqrtf>
 8005a78:	9901      	ldr	r1, [sp, #4]
 8005a7a:	e7c9      	b.n	8005a10 <arm_cmplx_mag_f32+0x128>
 8005a7c:	eeb0 0a67 	vmov.f32	s0, s15
 8005a80:	9203      	str	r2, [sp, #12]
 8005a82:	9102      	str	r1, [sp, #8]
 8005a84:	9001      	str	r0, [sp, #4]
 8005a86:	f005 f845 	bl	800ab14 <sqrtf>
 8005a8a:	a801      	add	r0, sp, #4
 8005a8c:	c807      	ldmia	r0, {r0, r1, r2}
 8005a8e:	e78b      	b.n	80059a8 <arm_cmplx_mag_f32+0xc0>
 8005a90:	eeb0 0a67 	vmov.f32	s0, s15
 8005a94:	9203      	str	r2, [sp, #12]
 8005a96:	9102      	str	r1, [sp, #8]
 8005a98:	9001      	str	r0, [sp, #4]
 8005a9a:	f005 f83b 	bl	800ab14 <sqrtf>
 8005a9e:	a801      	add	r0, sp, #4
 8005aa0:	c807      	ldmia	r0, {r0, r1, r2}
 8005aa2:	e769      	b.n	8005978 <arm_cmplx_mag_f32+0x90>
 8005aa4:	eeb0 0a67 	vmov.f32	s0, s15
 8005aa8:	9203      	str	r2, [sp, #12]
 8005aaa:	9102      	str	r1, [sp, #8]
 8005aac:	9001      	str	r0, [sp, #4]
 8005aae:	f005 f831 	bl	800ab14 <sqrtf>
 8005ab2:	a801      	add	r0, sp, #4
 8005ab4:	c807      	ldmia	r0, {r0, r1, r2}
 8005ab6:	e746      	b.n	8005946 <arm_cmplx_mag_f32+0x5e>

08005ab8 <arm_radix8_butterfly_f32>:
 8005ab8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005abc:	ed2d 8b10 	vpush	{d8-d15}
 8005ac0:	461c      	mov	r4, r3
 8005ac2:	b09d      	sub	sp, #116	; 0x74
 8005ac4:	4603      	mov	r3, r0
 8005ac6:	3304      	adds	r3, #4
 8005ac8:	ed9f bac4 	vldr	s22, [pc, #784]	; 8005ddc <arm_radix8_butterfly_f32+0x324>
 8005acc:	9019      	str	r0, [sp, #100]	; 0x64
 8005ace:	921a      	str	r2, [sp, #104]	; 0x68
 8005ad0:	468b      	mov	fp, r1
 8005ad2:	931b      	str	r3, [sp, #108]	; 0x6c
 8005ad4:	468a      	mov	sl, r1
 8005ad6:	46a1      	mov	r9, r4
 8005ad8:	4607      	mov	r7, r0
 8005ada:	ea4f 03db 	mov.w	r3, fp, lsr #3
 8005ade:	ea4f 0843 	mov.w	r8, r3, lsl #1
 8005ae2:	eb03 0508 	add.w	r5, r3, r8
 8005ae6:	195c      	adds	r4, r3, r5
 8005ae8:	00de      	lsls	r6, r3, #3
 8005aea:	191a      	adds	r2, r3, r4
 8005aec:	9600      	str	r6, [sp, #0]
 8005aee:	1898      	adds	r0, r3, r2
 8005af0:	4619      	mov	r1, r3
 8005af2:	9e00      	ldr	r6, [sp, #0]
 8005af4:	9311      	str	r3, [sp, #68]	; 0x44
 8005af6:	4401      	add	r1, r0
 8005af8:	eb07 02c2 	add.w	r2, r7, r2, lsl #3
 8005afc:	eb07 01c1 	add.w	r1, r7, r1, lsl #3
 8005b00:	19be      	adds	r6, r7, r6
 8005b02:	eb07 05c5 	add.w	r5, r7, r5, lsl #3
 8005b06:	eb07 04c4 	add.w	r4, r7, r4, lsl #3
 8005b0a:	eb07 00c0 	add.w	r0, r7, r0, lsl #3
 8005b0e:	9f00      	ldr	r7, [sp, #0]
 8005b10:	011b      	lsls	r3, r3, #4
 8005b12:	eb06 0e07 	add.w	lr, r6, r7
 8005b16:	9f1b      	ldr	r7, [sp, #108]	; 0x6c
 8005b18:	9302      	str	r3, [sp, #8]
 8005b1a:	3204      	adds	r2, #4
 8005b1c:	3104      	adds	r1, #4
 8005b1e:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005b22:	f04f 0c00 	mov.w	ip, #0
 8005b26:	edde 7a00 	vldr	s15, [lr]
 8005b2a:	edd6 6a00 	vldr	s13, [r6]
 8005b2e:	ed95 2a00 	vldr	s4, [r5]
 8005b32:	ed17 aa01 	vldr	s20, [r7, #-4]
 8005b36:	edd4 4a00 	vldr	s9, [r4]
 8005b3a:	ed90 5a00 	vldr	s10, [r0]
 8005b3e:	ed12 7a01 	vldr	s14, [r2, #-4]
 8005b42:	ed51 0a01 	vldr	s1, [r1, #-4]
 8005b46:	ee77 8a85 	vadd.f32	s17, s15, s10
 8005b4a:	ee76 3a87 	vadd.f32	s7, s13, s14
 8005b4e:	ee32 4a20 	vadd.f32	s8, s4, s1
 8005b52:	ee3a 3a24 	vadd.f32	s6, s20, s9
 8005b56:	ee33 6a84 	vadd.f32	s12, s7, s8
 8005b5a:	ee73 5a28 	vadd.f32	s11, s6, s17
 8005b5e:	ee36 7ac7 	vsub.f32	s14, s13, s14
 8005b62:	ee75 6a86 	vadd.f32	s13, s11, s12
 8005b66:	ee75 5ac6 	vsub.f32	s11, s11, s12
 8005b6a:	ed47 6a01 	vstr	s13, [r7, #-4]
 8005b6e:	edc4 5a00 	vstr	s11, [r4]
 8005b72:	ed92 9a00 	vldr	s18, [r2]
 8005b76:	ed95 1a01 	vldr	s2, [r5, #4]
 8005b7a:	edd6 5a01 	vldr	s11, [r6, #4]
 8005b7e:	ed91 6a00 	vldr	s12, [r1]
 8005b82:	edd7 2a00 	vldr	s5, [r7]
 8005b86:	edd4 1a01 	vldr	s3, [r4, #4]
 8005b8a:	edde 6a01 	vldr	s13, [lr, #4]
 8005b8e:	edd0 9a01 	vldr	s19, [r0, #4]
 8005b92:	ee72 0a60 	vsub.f32	s1, s4, s1
 8005b96:	ee71 aa46 	vsub.f32	s21, s2, s12
 8005b9a:	ee35 2ac9 	vsub.f32	s4, s11, s18
 8005b9e:	ee37 0a60 	vsub.f32	s0, s14, s1
 8005ba2:	ee32 8a2a 	vadd.f32	s16, s4, s21
 8005ba6:	ee37 7a20 	vadd.f32	s14, s14, s1
 8005baa:	ee32 2a6a 	vsub.f32	s4, s4, s21
 8005bae:	ee37 5ac5 	vsub.f32	s10, s15, s10
 8005bb2:	ee75 5a89 	vadd.f32	s11, s11, s18
 8005bb6:	ee60 0a0b 	vmul.f32	s1, s0, s22
 8005bba:	ee7a 4a64 	vsub.f32	s9, s20, s9
 8005bbe:	ee31 6a06 	vadd.f32	s12, s2, s12
 8005bc2:	ee36 9aa9 	vadd.f32	s18, s13, s19
 8005bc6:	ee32 1aa1 	vadd.f32	s2, s5, s3
 8005bca:	ee76 6ae9 	vsub.f32	s13, s13, s19
 8005bce:	ee72 1ae1 	vsub.f32	s3, s5, s3
 8005bd2:	ee28 8a0b 	vmul.f32	s16, s16, s22
 8005bd6:	ee62 2a0b 	vmul.f32	s5, s4, s22
 8005bda:	ee67 7a0b 	vmul.f32	s15, s14, s22
 8005bde:	ee33 3a68 	vsub.f32	s6, s6, s17
 8005be2:	ee36 0a88 	vadd.f32	s0, s13, s16
 8005be6:	ee75 8a86 	vadd.f32	s17, s11, s12
 8005bea:	ee36 7ac8 	vsub.f32	s14, s13, s16
 8005bee:	ee33 4ac4 	vsub.f32	s8, s7, s8
 8005bf2:	ee74 6ae0 	vsub.f32	s13, s9, s1
 8005bf6:	ee74 3aa0 	vadd.f32	s7, s9, s1
 8005bfa:	ee35 6ac6 	vsub.f32	s12, s11, s12
 8005bfe:	ee75 4a27 	vadd.f32	s9, s10, s15
 8005c02:	ee71 5a49 	vsub.f32	s11, s2, s18
 8005c06:	ee31 2a09 	vadd.f32	s4, s2, s18
 8005c0a:	ee75 7a67 	vsub.f32	s15, s10, s15
 8005c0e:	ee31 1aa2 	vadd.f32	s2, s3, s5
 8005c12:	ee71 2ae2 	vsub.f32	s5, s3, s5
 8005c16:	ee73 0a06 	vadd.f32	s1, s6, s12
 8005c1a:	ee75 1ac4 	vsub.f32	s3, s11, s8
 8005c1e:	ee36 5a87 	vadd.f32	s10, s13, s14
 8005c22:	ee32 8a28 	vadd.f32	s16, s4, s17
 8005c26:	ee33 6a46 	vsub.f32	s12, s6, s12
 8005c2a:	ee34 4a25 	vadd.f32	s8, s8, s11
 8005c2e:	ee33 3a80 	vadd.f32	s6, s7, s0
 8005c32:	ee36 7ac7 	vsub.f32	s14, s13, s14
 8005c36:	ee71 5a64 	vsub.f32	s11, s2, s9
 8005c3a:	ee72 6ae7 	vsub.f32	s13, s5, s15
 8005c3e:	ee32 2a68 	vsub.f32	s4, s4, s17
 8005c42:	ee73 3ac0 	vsub.f32	s7, s7, s0
 8005c46:	ee74 4a81 	vadd.f32	s9, s9, s2
 8005c4a:	ee77 7aa2 	vadd.f32	s15, s15, s5
 8005c4e:	44dc      	add	ip, fp
 8005c50:	45e2      	cmp	sl, ip
 8005c52:	ed87 8a00 	vstr	s16, [r7]
 8005c56:	ed84 2a01 	vstr	s4, [r4, #4]
 8005c5a:	441f      	add	r7, r3
 8005c5c:	edce 0a00 	vstr	s1, [lr]
 8005c60:	441c      	add	r4, r3
 8005c62:	ed80 6a00 	vstr	s12, [r0]
 8005c66:	edce 1a01 	vstr	s3, [lr, #4]
 8005c6a:	ed80 4a01 	vstr	s8, [r0, #4]
 8005c6e:	449e      	add	lr, r3
 8005c70:	ed86 3a00 	vstr	s6, [r6]
 8005c74:	4418      	add	r0, r3
 8005c76:	ed41 3a01 	vstr	s7, [r1, #-4]
 8005c7a:	ed02 5a01 	vstr	s10, [r2, #-4]
 8005c7e:	ed85 7a00 	vstr	s14, [r5]
 8005c82:	edc6 5a01 	vstr	s11, [r6, #4]
 8005c86:	edc1 4a00 	vstr	s9, [r1]
 8005c8a:	441e      	add	r6, r3
 8005c8c:	edc2 6a00 	vstr	s13, [r2]
 8005c90:	4419      	add	r1, r3
 8005c92:	edc5 7a01 	vstr	s15, [r5, #4]
 8005c96:	441a      	add	r2, r3
 8005c98:	441d      	add	r5, r3
 8005c9a:	f63f af44 	bhi.w	8005b26 <arm_radix8_butterfly_f32+0x6e>
 8005c9e:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8005ca0:	2a07      	cmp	r2, #7
 8005ca2:	f240 81f5 	bls.w	8006090 <arm_radix8_butterfly_f32+0x5d8>
 8005ca6:	f108 0101 	add.w	r1, r8, #1
 8005caa:	188f      	adds	r7, r1, r2
 8005cac:	eb09 0849 	add.w	r8, r9, r9, lsl #1
 8005cb0:	19d6      	adds	r6, r2, r7
 8005cb2:	eb08 0c09 	add.w	ip, r8, r9
 8005cb6:	1994      	adds	r4, r2, r6
 8005cb8:	eb0c 0e09 	add.w	lr, ip, r9
 8005cbc:	4610      	mov	r0, r2
 8005cbe:	9701      	str	r7, [sp, #4]
 8005cc0:	4420      	add	r0, r4
 8005cc2:	eb0e 0709 	add.w	r7, lr, r9
 8005cc6:	1815      	adds	r5, r2, r0
 8005cc8:	eb07 0209 	add.w	r2, r7, r9
 8005ccc:	9203      	str	r2, [sp, #12]
 8005cce:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8005cd0:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005cd4:	9117      	str	r1, [sp, #92]	; 0x5c
 8005cd6:	440a      	add	r2, r1
 8005cd8:	9900      	ldr	r1, [sp, #0]
 8005cda:	3108      	adds	r1, #8
 8005cdc:	9100      	str	r1, [sp, #0]
 8005cde:	9902      	ldr	r1, [sp, #8]
 8005ce0:	3108      	adds	r1, #8
 8005ce2:	9102      	str	r1, [sp, #8]
 8005ce4:	9919      	ldr	r1, [sp, #100]	; 0x64
 8005ce6:	00ff      	lsls	r7, r7, #3
 8005ce8:	9715      	str	r7, [sp, #84]	; 0x54
 8005cea:	eb01 04c4 	add.w	r4, r1, r4, lsl #3
 8005cee:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
 8005cf2:	eb01 00c0 	add.w	r0, r1, r0, lsl #3
 8005cf6:	9f17      	ldr	r7, [sp, #92]	; 0x5c
 8005cf8:	9903      	ldr	r1, [sp, #12]
 8005cfa:	19d7      	adds	r7, r2, r7
 8005cfc:	00c9      	lsls	r1, r1, #3
 8005cfe:	9114      	str	r1, [sp, #80]	; 0x50
 8005d00:	9710      	str	r7, [sp, #64]	; 0x40
 8005d02:	9919      	ldr	r1, [sp, #100]	; 0x64
 8005d04:	9f00      	ldr	r7, [sp, #0]
 8005d06:	19cf      	adds	r7, r1, r7
 8005d08:	970d      	str	r7, [sp, #52]	; 0x34
 8005d0a:	9f02      	ldr	r7, [sp, #8]
 8005d0c:	19cf      	adds	r7, r1, r7
 8005d0e:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 8005d12:	970c      	str	r7, [sp, #48]	; 0x30
 8005d14:	9f01      	ldr	r7, [sp, #4]
 8005d16:	f8cd e058 	str.w	lr, [sp, #88]	; 0x58
 8005d1a:	3504      	adds	r5, #4
 8005d1c:	3004      	adds	r0, #4
 8005d1e:	eb01 0ec7 	add.w	lr, r1, r7, lsl #3
 8005d22:	9508      	str	r5, [sp, #32]
 8005d24:	9009      	str	r0, [sp, #36]	; 0x24
 8005d26:	9d16      	ldr	r5, [sp, #88]	; 0x58
 8005d28:	981a      	ldr	r0, [sp, #104]	; 0x68
 8005d2a:	f8cd e02c 	str.w	lr, [sp, #44]	; 0x2c
 8005d2e:	ea4f 08c8 	mov.w	r8, r8, lsl #3
 8005d32:	eb01 0ec6 	add.w	lr, r1, r6, lsl #3
 8005d36:	9e14      	ldr	r6, [sp, #80]	; 0x50
 8005d38:	f8cd e038 	str.w	lr, [sp, #56]	; 0x38
 8005d3c:	1945      	adds	r5, r0, r5
 8005d3e:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 8005d42:	460f      	mov	r7, r1
 8005d44:	3404      	adds	r4, #4
 8005d46:	4641      	mov	r1, r8
 8005d48:	1841      	adds	r1, r0, r1
 8005d4a:	f8cd c048 	str.w	ip, [sp, #72]	; 0x48
 8005d4e:	940a      	str	r4, [sp, #40]	; 0x28
 8005d50:	eb00 0c06 	add.w	ip, r0, r6
 8005d54:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 8005d58:	9e15      	ldr	r6, [sp, #84]	; 0x54
 8005d5a:	9506      	str	r5, [sp, #24]
 8005d5c:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8005d5e:	9105      	str	r1, [sp, #20]
 8005d60:	4639      	mov	r1, r7
 8005d62:	1905      	adds	r5, r0, r4
 8005d64:	3108      	adds	r1, #8
 8005d66:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8005d68:	9507      	str	r5, [sp, #28]
 8005d6a:	910f      	str	r1, [sp, #60]	; 0x3c
 8005d6c:	ea4f 1509 	mov.w	r5, r9, lsl #4
 8005d70:	2101      	movs	r1, #1
 8005d72:	eb00 0e06 	add.w	lr, r0, r6
 8005d76:	9518      	str	r5, [sp, #96]	; 0x60
 8005d78:	9404      	str	r4, [sp, #16]
 8005d7a:	9103      	str	r1, [sp, #12]
 8005d7c:	4620      	mov	r0, r4
 8005d7e:	4689      	mov	r9, r1
 8005d80:	9e06      	ldr	r6, [sp, #24]
 8005d82:	ed90 fa00 	vldr	s30, [r0]
 8005d86:	edd6 7a01 	vldr	s15, [r6, #4]
 8005d8a:	edd0 ba01 	vldr	s23, [r0, #4]
 8005d8e:	edcd 7a00 	vstr	s15, [sp]
 8005d92:	a80d      	add	r0, sp, #52	; 0x34
 8005d94:	edde 7a01 	vldr	s15, [lr, #4]
 8005d98:	9c05      	ldr	r4, [sp, #20]
 8005d9a:	9d07      	ldr	r5, [sp, #28]
 8005d9c:	edd2 fa00 	vldr	s31, [r2]
 8005da0:	ed92 ca01 	vldr	s24, [r2, #4]
 8005da4:	edcd 7a01 	vstr	s15, [sp, #4]
 8005da8:	c807      	ldmia	r0, {r0, r1, r2}
 8005daa:	eddc 7a01 	vldr	s15, [ip, #4]
 8005dae:	edd4 ea00 	vldr	s29, [r4]
 8005db2:	ed95 ea00 	vldr	s28, [r5]
 8005db6:	edd6 da00 	vldr	s27, [r6]
 8005dba:	edd4 aa01 	vldr	s21, [r4, #4]
 8005dbe:	ed95 aa01 	vldr	s20, [r5, #4]
 8005dc2:	ed9e da00 	vldr	s26, [lr]
 8005dc6:	eddc ca00 	vldr	s25, [ip]
 8005dca:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005dce:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8005dd0:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8005dd2:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8005dd4:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8005dd6:	edcd 7a02 	vstr	s15, [sp, #8]
 8005dda:	e001      	b.n	8005de0 <arm_radix8_butterfly_f32+0x328>
 8005ddc:	3f3504f3 	.word	0x3f3504f3
 8005de0:	ed16 6a01 	vldr	s12, [r6, #-4]
 8005de4:	ed91 5a00 	vldr	s10, [r1]
 8005de8:	ed57 9a01 	vldr	s19, [r7, #-4]
 8005dec:	edd5 7a00 	vldr	s15, [r5]
 8005df0:	ed18 7a01 	vldr	s14, [r8, #-4]
 8005df4:	edd2 3a00 	vldr	s7, [r2]
 8005df8:	ed94 3a00 	vldr	s6, [r4]
 8005dfc:	ed90 2a00 	vldr	s4, [r0]
 8005e00:	ed92 0a01 	vldr	s0, [r2, #4]
 8005e04:	ee33 8a85 	vadd.f32	s16, s7, s10
 8005e08:	ee32 1a06 	vadd.f32	s2, s4, s12
 8005e0c:	ee33 4a29 	vadd.f32	s8, s6, s19
 8005e10:	ee77 4a87 	vadd.f32	s9, s15, s14
 8005e14:	ee78 1a04 	vadd.f32	s3, s16, s8
 8005e18:	ee71 6a24 	vadd.f32	s13, s2, s9
 8005e1c:	ee32 2a46 	vsub.f32	s4, s4, s12
 8005e20:	ee31 6aa6 	vadd.f32	s12, s3, s13
 8005e24:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8005e28:	ed82 6a00 	vstr	s12, [r2]
 8005e2c:	edd5 8a01 	vldr	s17, [r5, #4]
 8005e30:	ed90 9a01 	vldr	s18, [r0, #4]
 8005e34:	edd6 2a00 	vldr	s5, [r6]
 8005e38:	ed98 7a00 	vldr	s14, [r8]
 8005e3c:	edd4 0a01 	vldr	s1, [r4, #4]
 8005e40:	ed91 6a01 	vldr	s12, [r1, #4]
 8005e44:	edd7 5a00 	vldr	s11, [r7]
 8005e48:	ee73 3ac5 	vsub.f32	s7, s7, s10
 8005e4c:	ee33 3a69 	vsub.f32	s6, s6, s19
 8005e50:	ee39 5a62 	vsub.f32	s10, s18, s5
 8005e54:	ee78 9ac7 	vsub.f32	s19, s17, s14
 8005e58:	ee38 4a44 	vsub.f32	s8, s16, s8
 8005e5c:	ee38 7a87 	vadd.f32	s14, s17, s14
 8005e60:	ee30 8aa5 	vadd.f32	s16, s1, s11
 8005e64:	ee79 2a22 	vadd.f32	s5, s18, s5
 8005e68:	ee75 8a69 	vsub.f32	s17, s10, s19
 8005e6c:	ee32 9a27 	vadd.f32	s18, s4, s15
 8005e70:	ee35 5a29 	vadd.f32	s10, s10, s19
 8005e74:	ee72 7a67 	vsub.f32	s15, s4, s15
 8005e78:	ee30 2a06 	vadd.f32	s4, s0, s12
 8005e7c:	ee69 9a0b 	vmul.f32	s19, s18, s22
 8005e80:	ee70 5ae5 	vsub.f32	s11, s1, s11
 8005e84:	ee32 9a08 	vadd.f32	s18, s4, s16
 8005e88:	ee68 8a8b 	vmul.f32	s17, s17, s22
 8005e8c:	ee32 2a48 	vsub.f32	s4, s4, s16
 8005e90:	ee71 4a64 	vsub.f32	s9, s2, s9
 8005e94:	ee25 5a0b 	vmul.f32	s10, s10, s22
 8005e98:	ee32 1a87 	vadd.f32	s2, s5, s14
 8005e9c:	ee67 7a8b 	vmul.f32	s15, s15, s22
 8005ea0:	ee72 2ac7 	vsub.f32	s5, s5, s14
 8005ea4:	ee30 6a46 	vsub.f32	s12, s0, s12
 8005ea8:	ee73 0a29 	vadd.f32	s1, s6, s19
 8005eac:	ee36 0a28 	vadd.f32	s0, s12, s17
 8005eb0:	ee33 3a69 	vsub.f32	s6, s6, s19
 8005eb4:	ee32 7a64 	vsub.f32	s14, s4, s9
 8005eb8:	ee73 9aa7 	vadd.f32	s19, s7, s15
 8005ebc:	ee36 6a68 	vsub.f32	s12, s12, s17
 8005ec0:	ee73 7ae7 	vsub.f32	s15, s7, s15
 8005ec4:	ee75 8a85 	vadd.f32	s17, s11, s10
 8005ec8:	ee74 3a22 	vadd.f32	s7, s8, s5
 8005ecc:	ee35 5ac5 	vsub.f32	s10, s11, s10
 8005ed0:	ee71 6ae6 	vsub.f32	s13, s3, s13
 8005ed4:	ee79 1a41 	vsub.f32	s3, s18, s2
 8005ed8:	ee39 8aa8 	vadd.f32	s16, s19, s17
 8005edc:	ee76 5a43 	vsub.f32	s11, s12, s6
 8005ee0:	ee74 2a62 	vsub.f32	s5, s8, s5
 8005ee4:	ee74 4a82 	vadd.f32	s9, s9, s4
 8005ee8:	ee30 4a60 	vsub.f32	s8, s0, s1
 8005eec:	ee79 8ae8 	vsub.f32	s17, s19, s17
 8005ef0:	ee30 0a80 	vadd.f32	s0, s1, s0
 8005ef4:	ee77 9a85 	vadd.f32	s19, s15, s10
 8005ef8:	ee33 6a06 	vadd.f32	s12, s6, s12
 8005efc:	ee77 7ac5 	vsub.f32	s15, s15, s10
 8005f00:	ee2e 2a21 	vmul.f32	s4, s28, s3
 8005f04:	ee2e 5a26 	vmul.f32	s10, s28, s13
 8005f08:	ee6f 0a23 	vmul.f32	s1, s30, s7
 8005f0c:	ee2a 3a21 	vmul.f32	s6, s20, s3
 8005f10:	ee39 1a01 	vadd.f32	s2, s18, s2
 8005f14:	ee6a 6a26 	vmul.f32	s13, s20, s13
 8005f18:	ee2b 9a87 	vmul.f32	s18, s23, s14
 8005f1c:	ee6b 3aa3 	vmul.f32	s7, s23, s7
 8005f20:	ee2f 7a07 	vmul.f32	s14, s30, s14
 8005f24:	ee6f 1a84 	vmul.f32	s3, s31, s8
 8005f28:	ee35 3a03 	vadd.f32	s6, s10, s6
 8005f2c:	ee72 6a66 	vsub.f32	s13, s4, s13
 8005f30:	ee2c 5a04 	vmul.f32	s10, s24, s8
 8005f34:	ee2f 2a88 	vmul.f32	s4, s31, s16
 8005f38:	ed9d 4a02 	vldr	s8, [sp, #8]
 8005f3c:	ed82 1a01 	vstr	s2, [r2, #4]
 8005f40:	ee77 3a63 	vsub.f32	s7, s14, s7
 8005f44:	ee2c 8a08 	vmul.f32	s16, s24, s16
 8005f48:	ed9d 7a01 	vldr	s14, [sp, #4]
 8005f4c:	ed81 3a00 	vstr	s6, [r1]
 8005f50:	ee30 9a89 	vadd.f32	s18, s1, s18
 8005f54:	ee32 2a05 	vadd.f32	s4, s4, s10
 8005f58:	ee6d 0a22 	vmul.f32	s1, s26, s5
 8005f5c:	ee31 8ac8 	vsub.f32	s16, s3, s16
 8005f60:	ee67 2a22 	vmul.f32	s5, s14, s5
 8005f64:	ee64 1a00 	vmul.f32	s3, s8, s0
 8005f68:	ee27 7a24 	vmul.f32	s14, s14, s9
 8005f6c:	ee2c 5aa8 	vmul.f32	s10, s25, s17
 8005f70:	ee6d 4a24 	vmul.f32	s9, s26, s9
 8005f74:	ee64 8a28 	vmul.f32	s17, s8, s17
 8005f78:	ed9d 4a00 	vldr	s8, [sp]
 8005f7c:	edc1 6a01 	vstr	s13, [r1, #4]
 8005f80:	ee74 2ae2 	vsub.f32	s5, s9, s5
 8005f84:	ee6d 4aa9 	vmul.f32	s9, s27, s19
 8005f88:	ee64 9a29 	vmul.f32	s19, s8, s19
 8005f8c:	ee24 4a25 	vmul.f32	s8, s8, s11
 8005f90:	ee30 7a87 	vadd.f32	s14, s1, s14
 8005f94:	ee74 4a84 	vadd.f32	s9, s9, s8
 8005f98:	ee6e 0aa7 	vmul.f32	s1, s29, s15
 8005f9c:	ee2a 4a86 	vmul.f32	s8, s21, s12
 8005fa0:	ee2c 0a80 	vmul.f32	s0, s25, s0
 8005fa4:	ee6d 5aa5 	vmul.f32	s11, s27, s11
 8005fa8:	ee6a 7aa7 	vmul.f32	s15, s21, s15
 8005fac:	ee2e 6a86 	vmul.f32	s12, s29, s12
 8005fb0:	ee75 1a21 	vadd.f32	s3, s10, s3
 8005fb4:	ee30 0a68 	vsub.f32	s0, s0, s17
 8005fb8:	ee75 9ae9 	vsub.f32	s19, s11, s19
 8005fbc:	ee70 0a84 	vadd.f32	s1, s1, s8
 8005fc0:	ee36 6a67 	vsub.f32	s12, s12, s15
 8005fc4:	44d9      	add	r9, fp
 8005fc6:	45ca      	cmp	sl, r9
 8005fc8:	ed84 9a00 	vstr	s18, [r4]
 8005fcc:	edc4 3a01 	vstr	s7, [r4, #4]
 8005fd0:	441a      	add	r2, r3
 8005fd2:	ed07 7a01 	vstr	s14, [r7, #-4]
 8005fd6:	edc7 2a00 	vstr	s5, [r7]
 8005fda:	4419      	add	r1, r3
 8005fdc:	ed80 2a00 	vstr	s4, [r0]
 8005fe0:	ed80 8a01 	vstr	s16, [r0, #4]
 8005fe4:	441c      	add	r4, r3
 8005fe6:	ed48 1a01 	vstr	s3, [r8, #-4]
 8005fea:	ed88 0a00 	vstr	s0, [r8]
 8005fee:	441f      	add	r7, r3
 8005ff0:	ed46 4a01 	vstr	s9, [r6, #-4]
 8005ff4:	4418      	add	r0, r3
 8005ff6:	edc6 9a00 	vstr	s19, [r6]
 8005ffa:	4498      	add	r8, r3
 8005ffc:	edc5 0a00 	vstr	s1, [r5]
 8006000:	ed85 6a01 	vstr	s12, [r5, #4]
 8006004:	441e      	add	r6, r3
 8006006:	441d      	add	r5, r3
 8006008:	f63f aeea 	bhi.w	8005de0 <arm_radix8_butterfly_f32+0x328>
 800600c:	9a03      	ldr	r2, [sp, #12]
 800600e:	9818      	ldr	r0, [sp, #96]	; 0x60
 8006010:	3201      	adds	r2, #1
 8006012:	4611      	mov	r1, r2
 8006014:	9203      	str	r2, [sp, #12]
 8006016:	9a04      	ldr	r2, [sp, #16]
 8006018:	4402      	add	r2, r0
 800601a:	9204      	str	r2, [sp, #16]
 800601c:	9813      	ldr	r0, [sp, #76]	; 0x4c
 800601e:	9a05      	ldr	r2, [sp, #20]
 8006020:	4402      	add	r2, r0
 8006022:	9205      	str	r2, [sp, #20]
 8006024:	9812      	ldr	r0, [sp, #72]	; 0x48
 8006026:	9a07      	ldr	r2, [sp, #28]
 8006028:	4402      	add	r2, r0
 800602a:	9207      	str	r2, [sp, #28]
 800602c:	9816      	ldr	r0, [sp, #88]	; 0x58
 800602e:	9a06      	ldr	r2, [sp, #24]
 8006030:	4402      	add	r2, r0
 8006032:	9206      	str	r2, [sp, #24]
 8006034:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8006036:	4496      	add	lr, r2
 8006038:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800603a:	4494      	add	ip, r2
 800603c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800603e:	3208      	adds	r2, #8
 8006040:	920f      	str	r2, [sp, #60]	; 0x3c
 8006042:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006044:	3208      	adds	r2, #8
 8006046:	920e      	str	r2, [sp, #56]	; 0x38
 8006048:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800604a:	3208      	adds	r2, #8
 800604c:	920d      	str	r2, [sp, #52]	; 0x34
 800604e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006050:	3208      	adds	r2, #8
 8006052:	920c      	str	r2, [sp, #48]	; 0x30
 8006054:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8006056:	3208      	adds	r2, #8
 8006058:	920b      	str	r2, [sp, #44]	; 0x2c
 800605a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800605c:	3208      	adds	r2, #8
 800605e:	920a      	str	r2, [sp, #40]	; 0x28
 8006060:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006062:	3208      	adds	r2, #8
 8006064:	9209      	str	r2, [sp, #36]	; 0x24
 8006066:	9a08      	ldr	r2, [sp, #32]
 8006068:	3208      	adds	r2, #8
 800606a:	9208      	str	r2, [sp, #32]
 800606c:	9c10      	ldr	r4, [sp, #64]	; 0x40
 800606e:	9811      	ldr	r0, [sp, #68]	; 0x44
 8006070:	4288      	cmp	r0, r1
 8006072:	4622      	mov	r2, r4
 8006074:	d007      	beq.n	8006086 <arm_radix8_butterfly_f32+0x5ce>
 8006076:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8006078:	f8dd 900c 	ldr.w	r9, [sp, #12]
 800607c:	4621      	mov	r1, r4
 800607e:	4401      	add	r1, r0
 8006080:	9110      	str	r1, [sp, #64]	; 0x40
 8006082:	9804      	ldr	r0, [sp, #16]
 8006084:	e67c      	b.n	8005d80 <arm_radix8_butterfly_f32+0x2c8>
 8006086:	4683      	mov	fp, r0
 8006088:	f8bd 905c 	ldrh.w	r9, [sp, #92]	; 0x5c
 800608c:	9f19      	ldr	r7, [sp, #100]	; 0x64
 800608e:	e524      	b.n	8005ada <arm_radix8_butterfly_f32+0x22>
 8006090:	b01d      	add	sp, #116	; 0x74
 8006092:	ecbd 8b10 	vpop	{d8-d15}
 8006096:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800609a:	bf00      	nop

0800609c <__errno>:
 800609c:	4b01      	ldr	r3, [pc, #4]	; (80060a4 <__errno+0x8>)
 800609e:	6818      	ldr	r0, [r3, #0]
 80060a0:	4770      	bx	lr
 80060a2:	bf00      	nop
 80060a4:	20000024 	.word	0x20000024

080060a8 <__libc_init_array>:
 80060a8:	b570      	push	{r4, r5, r6, lr}
 80060aa:	4d0d      	ldr	r5, [pc, #52]	; (80060e0 <__libc_init_array+0x38>)
 80060ac:	4c0d      	ldr	r4, [pc, #52]	; (80060e4 <__libc_init_array+0x3c>)
 80060ae:	1b64      	subs	r4, r4, r5
 80060b0:	10a4      	asrs	r4, r4, #2
 80060b2:	2600      	movs	r6, #0
 80060b4:	42a6      	cmp	r6, r4
 80060b6:	d109      	bne.n	80060cc <__libc_init_array+0x24>
 80060b8:	4d0b      	ldr	r5, [pc, #44]	; (80060e8 <__libc_init_array+0x40>)
 80060ba:	4c0c      	ldr	r4, [pc, #48]	; (80060ec <__libc_init_array+0x44>)
 80060bc:	f005 fd3e 	bl	800bb3c <_init>
 80060c0:	1b64      	subs	r4, r4, r5
 80060c2:	10a4      	asrs	r4, r4, #2
 80060c4:	2600      	movs	r6, #0
 80060c6:	42a6      	cmp	r6, r4
 80060c8:	d105      	bne.n	80060d6 <__libc_init_array+0x2e>
 80060ca:	bd70      	pop	{r4, r5, r6, pc}
 80060cc:	f855 3b04 	ldr.w	r3, [r5], #4
 80060d0:	4798      	blx	r3
 80060d2:	3601      	adds	r6, #1
 80060d4:	e7ee      	b.n	80060b4 <__libc_init_array+0xc>
 80060d6:	f855 3b04 	ldr.w	r3, [r5], #4
 80060da:	4798      	blx	r3
 80060dc:	3601      	adds	r6, #1
 80060de:	e7f2      	b.n	80060c6 <__libc_init_array+0x1e>
 80060e0:	0800f060 	.word	0x0800f060
 80060e4:	0800f060 	.word	0x0800f060
 80060e8:	0800f060 	.word	0x0800f060
 80060ec:	0800f064 	.word	0x0800f064

080060f0 <memset>:
 80060f0:	4402      	add	r2, r0
 80060f2:	4603      	mov	r3, r0
 80060f4:	4293      	cmp	r3, r2
 80060f6:	d100      	bne.n	80060fa <memset+0xa>
 80060f8:	4770      	bx	lr
 80060fa:	f803 1b01 	strb.w	r1, [r3], #1
 80060fe:	e7f9      	b.n	80060f4 <memset+0x4>

08006100 <__cvt>:
 8006100:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006104:	ec55 4b10 	vmov	r4, r5, d0
 8006108:	2d00      	cmp	r5, #0
 800610a:	460e      	mov	r6, r1
 800610c:	4619      	mov	r1, r3
 800610e:	462b      	mov	r3, r5
 8006110:	bfbb      	ittet	lt
 8006112:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8006116:	461d      	movlt	r5, r3
 8006118:	2300      	movge	r3, #0
 800611a:	232d      	movlt	r3, #45	; 0x2d
 800611c:	700b      	strb	r3, [r1, #0]
 800611e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006120:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8006124:	4691      	mov	r9, r2
 8006126:	f023 0820 	bic.w	r8, r3, #32
 800612a:	bfbc      	itt	lt
 800612c:	4622      	movlt	r2, r4
 800612e:	4614      	movlt	r4, r2
 8006130:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006134:	d005      	beq.n	8006142 <__cvt+0x42>
 8006136:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800613a:	d100      	bne.n	800613e <__cvt+0x3e>
 800613c:	3601      	adds	r6, #1
 800613e:	2102      	movs	r1, #2
 8006140:	e000      	b.n	8006144 <__cvt+0x44>
 8006142:	2103      	movs	r1, #3
 8006144:	ab03      	add	r3, sp, #12
 8006146:	9301      	str	r3, [sp, #4]
 8006148:	ab02      	add	r3, sp, #8
 800614a:	9300      	str	r3, [sp, #0]
 800614c:	ec45 4b10 	vmov	d0, r4, r5
 8006150:	4653      	mov	r3, sl
 8006152:	4632      	mov	r2, r6
 8006154:	f001 fdac 	bl	8007cb0 <_dtoa_r>
 8006158:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800615c:	4607      	mov	r7, r0
 800615e:	d102      	bne.n	8006166 <__cvt+0x66>
 8006160:	f019 0f01 	tst.w	r9, #1
 8006164:	d022      	beq.n	80061ac <__cvt+0xac>
 8006166:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800616a:	eb07 0906 	add.w	r9, r7, r6
 800616e:	d110      	bne.n	8006192 <__cvt+0x92>
 8006170:	783b      	ldrb	r3, [r7, #0]
 8006172:	2b30      	cmp	r3, #48	; 0x30
 8006174:	d10a      	bne.n	800618c <__cvt+0x8c>
 8006176:	2200      	movs	r2, #0
 8006178:	2300      	movs	r3, #0
 800617a:	4620      	mov	r0, r4
 800617c:	4629      	mov	r1, r5
 800617e:	f7fa fd03 	bl	8000b88 <__aeabi_dcmpeq>
 8006182:	b918      	cbnz	r0, 800618c <__cvt+0x8c>
 8006184:	f1c6 0601 	rsb	r6, r6, #1
 8006188:	f8ca 6000 	str.w	r6, [sl]
 800618c:	f8da 3000 	ldr.w	r3, [sl]
 8006190:	4499      	add	r9, r3
 8006192:	2200      	movs	r2, #0
 8006194:	2300      	movs	r3, #0
 8006196:	4620      	mov	r0, r4
 8006198:	4629      	mov	r1, r5
 800619a:	f7fa fcf5 	bl	8000b88 <__aeabi_dcmpeq>
 800619e:	b108      	cbz	r0, 80061a4 <__cvt+0xa4>
 80061a0:	f8cd 900c 	str.w	r9, [sp, #12]
 80061a4:	2230      	movs	r2, #48	; 0x30
 80061a6:	9b03      	ldr	r3, [sp, #12]
 80061a8:	454b      	cmp	r3, r9
 80061aa:	d307      	bcc.n	80061bc <__cvt+0xbc>
 80061ac:	9b03      	ldr	r3, [sp, #12]
 80061ae:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80061b0:	1bdb      	subs	r3, r3, r7
 80061b2:	4638      	mov	r0, r7
 80061b4:	6013      	str	r3, [r2, #0]
 80061b6:	b004      	add	sp, #16
 80061b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80061bc:	1c59      	adds	r1, r3, #1
 80061be:	9103      	str	r1, [sp, #12]
 80061c0:	701a      	strb	r2, [r3, #0]
 80061c2:	e7f0      	b.n	80061a6 <__cvt+0xa6>

080061c4 <__exponent>:
 80061c4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80061c6:	4603      	mov	r3, r0
 80061c8:	2900      	cmp	r1, #0
 80061ca:	bfb8      	it	lt
 80061cc:	4249      	neglt	r1, r1
 80061ce:	f803 2b02 	strb.w	r2, [r3], #2
 80061d2:	bfb4      	ite	lt
 80061d4:	222d      	movlt	r2, #45	; 0x2d
 80061d6:	222b      	movge	r2, #43	; 0x2b
 80061d8:	2909      	cmp	r1, #9
 80061da:	7042      	strb	r2, [r0, #1]
 80061dc:	dd2a      	ble.n	8006234 <__exponent+0x70>
 80061de:	f10d 0407 	add.w	r4, sp, #7
 80061e2:	46a4      	mov	ip, r4
 80061e4:	270a      	movs	r7, #10
 80061e6:	46a6      	mov	lr, r4
 80061e8:	460a      	mov	r2, r1
 80061ea:	fb91 f6f7 	sdiv	r6, r1, r7
 80061ee:	fb07 1516 	mls	r5, r7, r6, r1
 80061f2:	3530      	adds	r5, #48	; 0x30
 80061f4:	2a63      	cmp	r2, #99	; 0x63
 80061f6:	f104 34ff 	add.w	r4, r4, #4294967295
 80061fa:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80061fe:	4631      	mov	r1, r6
 8006200:	dcf1      	bgt.n	80061e6 <__exponent+0x22>
 8006202:	3130      	adds	r1, #48	; 0x30
 8006204:	f1ae 0502 	sub.w	r5, lr, #2
 8006208:	f804 1c01 	strb.w	r1, [r4, #-1]
 800620c:	1c44      	adds	r4, r0, #1
 800620e:	4629      	mov	r1, r5
 8006210:	4561      	cmp	r1, ip
 8006212:	d30a      	bcc.n	800622a <__exponent+0x66>
 8006214:	f10d 0209 	add.w	r2, sp, #9
 8006218:	eba2 020e 	sub.w	r2, r2, lr
 800621c:	4565      	cmp	r5, ip
 800621e:	bf88      	it	hi
 8006220:	2200      	movhi	r2, #0
 8006222:	4413      	add	r3, r2
 8006224:	1a18      	subs	r0, r3, r0
 8006226:	b003      	add	sp, #12
 8006228:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800622a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800622e:	f804 2f01 	strb.w	r2, [r4, #1]!
 8006232:	e7ed      	b.n	8006210 <__exponent+0x4c>
 8006234:	2330      	movs	r3, #48	; 0x30
 8006236:	3130      	adds	r1, #48	; 0x30
 8006238:	7083      	strb	r3, [r0, #2]
 800623a:	70c1      	strb	r1, [r0, #3]
 800623c:	1d03      	adds	r3, r0, #4
 800623e:	e7f1      	b.n	8006224 <__exponent+0x60>

08006240 <_printf_float>:
 8006240:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006244:	ed2d 8b02 	vpush	{d8}
 8006248:	b08d      	sub	sp, #52	; 0x34
 800624a:	460c      	mov	r4, r1
 800624c:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8006250:	4616      	mov	r6, r2
 8006252:	461f      	mov	r7, r3
 8006254:	4605      	mov	r5, r0
 8006256:	f002 fe89 	bl	8008f6c <_localeconv_r>
 800625a:	f8d0 a000 	ldr.w	sl, [r0]
 800625e:	4650      	mov	r0, sl
 8006260:	f7fa f816 	bl	8000290 <strlen>
 8006264:	2300      	movs	r3, #0
 8006266:	930a      	str	r3, [sp, #40]	; 0x28
 8006268:	6823      	ldr	r3, [r4, #0]
 800626a:	9305      	str	r3, [sp, #20]
 800626c:	f8d8 3000 	ldr.w	r3, [r8]
 8006270:	f894 b018 	ldrb.w	fp, [r4, #24]
 8006274:	3307      	adds	r3, #7
 8006276:	f023 0307 	bic.w	r3, r3, #7
 800627a:	f103 0208 	add.w	r2, r3, #8
 800627e:	f8c8 2000 	str.w	r2, [r8]
 8006282:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006286:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800628a:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800628e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8006292:	9307      	str	r3, [sp, #28]
 8006294:	f8cd 8018 	str.w	r8, [sp, #24]
 8006298:	ee08 0a10 	vmov	s16, r0
 800629c:	4b9f      	ldr	r3, [pc, #636]	; (800651c <_printf_float+0x2dc>)
 800629e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80062a2:	f04f 32ff 	mov.w	r2, #4294967295
 80062a6:	f7fa fca1 	bl	8000bec <__aeabi_dcmpun>
 80062aa:	bb88      	cbnz	r0, 8006310 <_printf_float+0xd0>
 80062ac:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80062b0:	4b9a      	ldr	r3, [pc, #616]	; (800651c <_printf_float+0x2dc>)
 80062b2:	f04f 32ff 	mov.w	r2, #4294967295
 80062b6:	f7fa fc7b 	bl	8000bb0 <__aeabi_dcmple>
 80062ba:	bb48      	cbnz	r0, 8006310 <_printf_float+0xd0>
 80062bc:	2200      	movs	r2, #0
 80062be:	2300      	movs	r3, #0
 80062c0:	4640      	mov	r0, r8
 80062c2:	4649      	mov	r1, r9
 80062c4:	f7fa fc6a 	bl	8000b9c <__aeabi_dcmplt>
 80062c8:	b110      	cbz	r0, 80062d0 <_printf_float+0x90>
 80062ca:	232d      	movs	r3, #45	; 0x2d
 80062cc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80062d0:	4b93      	ldr	r3, [pc, #588]	; (8006520 <_printf_float+0x2e0>)
 80062d2:	4894      	ldr	r0, [pc, #592]	; (8006524 <_printf_float+0x2e4>)
 80062d4:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 80062d8:	bf94      	ite	ls
 80062da:	4698      	movls	r8, r3
 80062dc:	4680      	movhi	r8, r0
 80062de:	2303      	movs	r3, #3
 80062e0:	6123      	str	r3, [r4, #16]
 80062e2:	9b05      	ldr	r3, [sp, #20]
 80062e4:	f023 0204 	bic.w	r2, r3, #4
 80062e8:	6022      	str	r2, [r4, #0]
 80062ea:	f04f 0900 	mov.w	r9, #0
 80062ee:	9700      	str	r7, [sp, #0]
 80062f0:	4633      	mov	r3, r6
 80062f2:	aa0b      	add	r2, sp, #44	; 0x2c
 80062f4:	4621      	mov	r1, r4
 80062f6:	4628      	mov	r0, r5
 80062f8:	f000 f9d8 	bl	80066ac <_printf_common>
 80062fc:	3001      	adds	r0, #1
 80062fe:	f040 8090 	bne.w	8006422 <_printf_float+0x1e2>
 8006302:	f04f 30ff 	mov.w	r0, #4294967295
 8006306:	b00d      	add	sp, #52	; 0x34
 8006308:	ecbd 8b02 	vpop	{d8}
 800630c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006310:	4642      	mov	r2, r8
 8006312:	464b      	mov	r3, r9
 8006314:	4640      	mov	r0, r8
 8006316:	4649      	mov	r1, r9
 8006318:	f7fa fc68 	bl	8000bec <__aeabi_dcmpun>
 800631c:	b140      	cbz	r0, 8006330 <_printf_float+0xf0>
 800631e:	464b      	mov	r3, r9
 8006320:	2b00      	cmp	r3, #0
 8006322:	bfbc      	itt	lt
 8006324:	232d      	movlt	r3, #45	; 0x2d
 8006326:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800632a:	487f      	ldr	r0, [pc, #508]	; (8006528 <_printf_float+0x2e8>)
 800632c:	4b7f      	ldr	r3, [pc, #508]	; (800652c <_printf_float+0x2ec>)
 800632e:	e7d1      	b.n	80062d4 <_printf_float+0x94>
 8006330:	6863      	ldr	r3, [r4, #4]
 8006332:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8006336:	9206      	str	r2, [sp, #24]
 8006338:	1c5a      	adds	r2, r3, #1
 800633a:	d13f      	bne.n	80063bc <_printf_float+0x17c>
 800633c:	2306      	movs	r3, #6
 800633e:	6063      	str	r3, [r4, #4]
 8006340:	9b05      	ldr	r3, [sp, #20]
 8006342:	6861      	ldr	r1, [r4, #4]
 8006344:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8006348:	2300      	movs	r3, #0
 800634a:	9303      	str	r3, [sp, #12]
 800634c:	ab0a      	add	r3, sp, #40	; 0x28
 800634e:	e9cd b301 	strd	fp, r3, [sp, #4]
 8006352:	ab09      	add	r3, sp, #36	; 0x24
 8006354:	ec49 8b10 	vmov	d0, r8, r9
 8006358:	9300      	str	r3, [sp, #0]
 800635a:	6022      	str	r2, [r4, #0]
 800635c:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8006360:	4628      	mov	r0, r5
 8006362:	f7ff fecd 	bl	8006100 <__cvt>
 8006366:	9b06      	ldr	r3, [sp, #24]
 8006368:	9909      	ldr	r1, [sp, #36]	; 0x24
 800636a:	2b47      	cmp	r3, #71	; 0x47
 800636c:	4680      	mov	r8, r0
 800636e:	d108      	bne.n	8006382 <_printf_float+0x142>
 8006370:	1cc8      	adds	r0, r1, #3
 8006372:	db02      	blt.n	800637a <_printf_float+0x13a>
 8006374:	6863      	ldr	r3, [r4, #4]
 8006376:	4299      	cmp	r1, r3
 8006378:	dd41      	ble.n	80063fe <_printf_float+0x1be>
 800637a:	f1ab 0b02 	sub.w	fp, fp, #2
 800637e:	fa5f fb8b 	uxtb.w	fp, fp
 8006382:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8006386:	d820      	bhi.n	80063ca <_printf_float+0x18a>
 8006388:	3901      	subs	r1, #1
 800638a:	465a      	mov	r2, fp
 800638c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8006390:	9109      	str	r1, [sp, #36]	; 0x24
 8006392:	f7ff ff17 	bl	80061c4 <__exponent>
 8006396:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006398:	1813      	adds	r3, r2, r0
 800639a:	2a01      	cmp	r2, #1
 800639c:	4681      	mov	r9, r0
 800639e:	6123      	str	r3, [r4, #16]
 80063a0:	dc02      	bgt.n	80063a8 <_printf_float+0x168>
 80063a2:	6822      	ldr	r2, [r4, #0]
 80063a4:	07d2      	lsls	r2, r2, #31
 80063a6:	d501      	bpl.n	80063ac <_printf_float+0x16c>
 80063a8:	3301      	adds	r3, #1
 80063aa:	6123      	str	r3, [r4, #16]
 80063ac:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80063b0:	2b00      	cmp	r3, #0
 80063b2:	d09c      	beq.n	80062ee <_printf_float+0xae>
 80063b4:	232d      	movs	r3, #45	; 0x2d
 80063b6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80063ba:	e798      	b.n	80062ee <_printf_float+0xae>
 80063bc:	9a06      	ldr	r2, [sp, #24]
 80063be:	2a47      	cmp	r2, #71	; 0x47
 80063c0:	d1be      	bne.n	8006340 <_printf_float+0x100>
 80063c2:	2b00      	cmp	r3, #0
 80063c4:	d1bc      	bne.n	8006340 <_printf_float+0x100>
 80063c6:	2301      	movs	r3, #1
 80063c8:	e7b9      	b.n	800633e <_printf_float+0xfe>
 80063ca:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 80063ce:	d118      	bne.n	8006402 <_printf_float+0x1c2>
 80063d0:	2900      	cmp	r1, #0
 80063d2:	6863      	ldr	r3, [r4, #4]
 80063d4:	dd0b      	ble.n	80063ee <_printf_float+0x1ae>
 80063d6:	6121      	str	r1, [r4, #16]
 80063d8:	b913      	cbnz	r3, 80063e0 <_printf_float+0x1a0>
 80063da:	6822      	ldr	r2, [r4, #0]
 80063dc:	07d0      	lsls	r0, r2, #31
 80063de:	d502      	bpl.n	80063e6 <_printf_float+0x1a6>
 80063e0:	3301      	adds	r3, #1
 80063e2:	440b      	add	r3, r1
 80063e4:	6123      	str	r3, [r4, #16]
 80063e6:	65a1      	str	r1, [r4, #88]	; 0x58
 80063e8:	f04f 0900 	mov.w	r9, #0
 80063ec:	e7de      	b.n	80063ac <_printf_float+0x16c>
 80063ee:	b913      	cbnz	r3, 80063f6 <_printf_float+0x1b6>
 80063f0:	6822      	ldr	r2, [r4, #0]
 80063f2:	07d2      	lsls	r2, r2, #31
 80063f4:	d501      	bpl.n	80063fa <_printf_float+0x1ba>
 80063f6:	3302      	adds	r3, #2
 80063f8:	e7f4      	b.n	80063e4 <_printf_float+0x1a4>
 80063fa:	2301      	movs	r3, #1
 80063fc:	e7f2      	b.n	80063e4 <_printf_float+0x1a4>
 80063fe:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8006402:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006404:	4299      	cmp	r1, r3
 8006406:	db05      	blt.n	8006414 <_printf_float+0x1d4>
 8006408:	6823      	ldr	r3, [r4, #0]
 800640a:	6121      	str	r1, [r4, #16]
 800640c:	07d8      	lsls	r0, r3, #31
 800640e:	d5ea      	bpl.n	80063e6 <_printf_float+0x1a6>
 8006410:	1c4b      	adds	r3, r1, #1
 8006412:	e7e7      	b.n	80063e4 <_printf_float+0x1a4>
 8006414:	2900      	cmp	r1, #0
 8006416:	bfd4      	ite	le
 8006418:	f1c1 0202 	rsble	r2, r1, #2
 800641c:	2201      	movgt	r2, #1
 800641e:	4413      	add	r3, r2
 8006420:	e7e0      	b.n	80063e4 <_printf_float+0x1a4>
 8006422:	6823      	ldr	r3, [r4, #0]
 8006424:	055a      	lsls	r2, r3, #21
 8006426:	d407      	bmi.n	8006438 <_printf_float+0x1f8>
 8006428:	6923      	ldr	r3, [r4, #16]
 800642a:	4642      	mov	r2, r8
 800642c:	4631      	mov	r1, r6
 800642e:	4628      	mov	r0, r5
 8006430:	47b8      	blx	r7
 8006432:	3001      	adds	r0, #1
 8006434:	d12c      	bne.n	8006490 <_printf_float+0x250>
 8006436:	e764      	b.n	8006302 <_printf_float+0xc2>
 8006438:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800643c:	f240 80e0 	bls.w	8006600 <_printf_float+0x3c0>
 8006440:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006444:	2200      	movs	r2, #0
 8006446:	2300      	movs	r3, #0
 8006448:	f7fa fb9e 	bl	8000b88 <__aeabi_dcmpeq>
 800644c:	2800      	cmp	r0, #0
 800644e:	d034      	beq.n	80064ba <_printf_float+0x27a>
 8006450:	4a37      	ldr	r2, [pc, #220]	; (8006530 <_printf_float+0x2f0>)
 8006452:	2301      	movs	r3, #1
 8006454:	4631      	mov	r1, r6
 8006456:	4628      	mov	r0, r5
 8006458:	47b8      	blx	r7
 800645a:	3001      	adds	r0, #1
 800645c:	f43f af51 	beq.w	8006302 <_printf_float+0xc2>
 8006460:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006464:	429a      	cmp	r2, r3
 8006466:	db02      	blt.n	800646e <_printf_float+0x22e>
 8006468:	6823      	ldr	r3, [r4, #0]
 800646a:	07d8      	lsls	r0, r3, #31
 800646c:	d510      	bpl.n	8006490 <_printf_float+0x250>
 800646e:	ee18 3a10 	vmov	r3, s16
 8006472:	4652      	mov	r2, sl
 8006474:	4631      	mov	r1, r6
 8006476:	4628      	mov	r0, r5
 8006478:	47b8      	blx	r7
 800647a:	3001      	adds	r0, #1
 800647c:	f43f af41 	beq.w	8006302 <_printf_float+0xc2>
 8006480:	f04f 0800 	mov.w	r8, #0
 8006484:	f104 091a 	add.w	r9, r4, #26
 8006488:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800648a:	3b01      	subs	r3, #1
 800648c:	4543      	cmp	r3, r8
 800648e:	dc09      	bgt.n	80064a4 <_printf_float+0x264>
 8006490:	6823      	ldr	r3, [r4, #0]
 8006492:	079b      	lsls	r3, r3, #30
 8006494:	f100 8105 	bmi.w	80066a2 <_printf_float+0x462>
 8006498:	68e0      	ldr	r0, [r4, #12]
 800649a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800649c:	4298      	cmp	r0, r3
 800649e:	bfb8      	it	lt
 80064a0:	4618      	movlt	r0, r3
 80064a2:	e730      	b.n	8006306 <_printf_float+0xc6>
 80064a4:	2301      	movs	r3, #1
 80064a6:	464a      	mov	r2, r9
 80064a8:	4631      	mov	r1, r6
 80064aa:	4628      	mov	r0, r5
 80064ac:	47b8      	blx	r7
 80064ae:	3001      	adds	r0, #1
 80064b0:	f43f af27 	beq.w	8006302 <_printf_float+0xc2>
 80064b4:	f108 0801 	add.w	r8, r8, #1
 80064b8:	e7e6      	b.n	8006488 <_printf_float+0x248>
 80064ba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80064bc:	2b00      	cmp	r3, #0
 80064be:	dc39      	bgt.n	8006534 <_printf_float+0x2f4>
 80064c0:	4a1b      	ldr	r2, [pc, #108]	; (8006530 <_printf_float+0x2f0>)
 80064c2:	2301      	movs	r3, #1
 80064c4:	4631      	mov	r1, r6
 80064c6:	4628      	mov	r0, r5
 80064c8:	47b8      	blx	r7
 80064ca:	3001      	adds	r0, #1
 80064cc:	f43f af19 	beq.w	8006302 <_printf_float+0xc2>
 80064d0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80064d4:	4313      	orrs	r3, r2
 80064d6:	d102      	bne.n	80064de <_printf_float+0x29e>
 80064d8:	6823      	ldr	r3, [r4, #0]
 80064da:	07d9      	lsls	r1, r3, #31
 80064dc:	d5d8      	bpl.n	8006490 <_printf_float+0x250>
 80064de:	ee18 3a10 	vmov	r3, s16
 80064e2:	4652      	mov	r2, sl
 80064e4:	4631      	mov	r1, r6
 80064e6:	4628      	mov	r0, r5
 80064e8:	47b8      	blx	r7
 80064ea:	3001      	adds	r0, #1
 80064ec:	f43f af09 	beq.w	8006302 <_printf_float+0xc2>
 80064f0:	f04f 0900 	mov.w	r9, #0
 80064f4:	f104 0a1a 	add.w	sl, r4, #26
 80064f8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80064fa:	425b      	negs	r3, r3
 80064fc:	454b      	cmp	r3, r9
 80064fe:	dc01      	bgt.n	8006504 <_printf_float+0x2c4>
 8006500:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006502:	e792      	b.n	800642a <_printf_float+0x1ea>
 8006504:	2301      	movs	r3, #1
 8006506:	4652      	mov	r2, sl
 8006508:	4631      	mov	r1, r6
 800650a:	4628      	mov	r0, r5
 800650c:	47b8      	blx	r7
 800650e:	3001      	adds	r0, #1
 8006510:	f43f aef7 	beq.w	8006302 <_printf_float+0xc2>
 8006514:	f109 0901 	add.w	r9, r9, #1
 8006518:	e7ee      	b.n	80064f8 <_printf_float+0x2b8>
 800651a:	bf00      	nop
 800651c:	7fefffff 	.word	0x7fefffff
 8006520:	0800e9d8 	.word	0x0800e9d8
 8006524:	0800e9dc 	.word	0x0800e9dc
 8006528:	0800e9e4 	.word	0x0800e9e4
 800652c:	0800e9e0 	.word	0x0800e9e0
 8006530:	0800e9e8 	.word	0x0800e9e8
 8006534:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006536:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006538:	429a      	cmp	r2, r3
 800653a:	bfa8      	it	ge
 800653c:	461a      	movge	r2, r3
 800653e:	2a00      	cmp	r2, #0
 8006540:	4691      	mov	r9, r2
 8006542:	dc37      	bgt.n	80065b4 <_printf_float+0x374>
 8006544:	f04f 0b00 	mov.w	fp, #0
 8006548:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800654c:	f104 021a 	add.w	r2, r4, #26
 8006550:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006552:	9305      	str	r3, [sp, #20]
 8006554:	eba3 0309 	sub.w	r3, r3, r9
 8006558:	455b      	cmp	r3, fp
 800655a:	dc33      	bgt.n	80065c4 <_printf_float+0x384>
 800655c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006560:	429a      	cmp	r2, r3
 8006562:	db3b      	blt.n	80065dc <_printf_float+0x39c>
 8006564:	6823      	ldr	r3, [r4, #0]
 8006566:	07da      	lsls	r2, r3, #31
 8006568:	d438      	bmi.n	80065dc <_printf_float+0x39c>
 800656a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800656c:	9a05      	ldr	r2, [sp, #20]
 800656e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006570:	1a9a      	subs	r2, r3, r2
 8006572:	eba3 0901 	sub.w	r9, r3, r1
 8006576:	4591      	cmp	r9, r2
 8006578:	bfa8      	it	ge
 800657a:	4691      	movge	r9, r2
 800657c:	f1b9 0f00 	cmp.w	r9, #0
 8006580:	dc35      	bgt.n	80065ee <_printf_float+0x3ae>
 8006582:	f04f 0800 	mov.w	r8, #0
 8006586:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800658a:	f104 0a1a 	add.w	sl, r4, #26
 800658e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006592:	1a9b      	subs	r3, r3, r2
 8006594:	eba3 0309 	sub.w	r3, r3, r9
 8006598:	4543      	cmp	r3, r8
 800659a:	f77f af79 	ble.w	8006490 <_printf_float+0x250>
 800659e:	2301      	movs	r3, #1
 80065a0:	4652      	mov	r2, sl
 80065a2:	4631      	mov	r1, r6
 80065a4:	4628      	mov	r0, r5
 80065a6:	47b8      	blx	r7
 80065a8:	3001      	adds	r0, #1
 80065aa:	f43f aeaa 	beq.w	8006302 <_printf_float+0xc2>
 80065ae:	f108 0801 	add.w	r8, r8, #1
 80065b2:	e7ec      	b.n	800658e <_printf_float+0x34e>
 80065b4:	4613      	mov	r3, r2
 80065b6:	4631      	mov	r1, r6
 80065b8:	4642      	mov	r2, r8
 80065ba:	4628      	mov	r0, r5
 80065bc:	47b8      	blx	r7
 80065be:	3001      	adds	r0, #1
 80065c0:	d1c0      	bne.n	8006544 <_printf_float+0x304>
 80065c2:	e69e      	b.n	8006302 <_printf_float+0xc2>
 80065c4:	2301      	movs	r3, #1
 80065c6:	4631      	mov	r1, r6
 80065c8:	4628      	mov	r0, r5
 80065ca:	9205      	str	r2, [sp, #20]
 80065cc:	47b8      	blx	r7
 80065ce:	3001      	adds	r0, #1
 80065d0:	f43f ae97 	beq.w	8006302 <_printf_float+0xc2>
 80065d4:	9a05      	ldr	r2, [sp, #20]
 80065d6:	f10b 0b01 	add.w	fp, fp, #1
 80065da:	e7b9      	b.n	8006550 <_printf_float+0x310>
 80065dc:	ee18 3a10 	vmov	r3, s16
 80065e0:	4652      	mov	r2, sl
 80065e2:	4631      	mov	r1, r6
 80065e4:	4628      	mov	r0, r5
 80065e6:	47b8      	blx	r7
 80065e8:	3001      	adds	r0, #1
 80065ea:	d1be      	bne.n	800656a <_printf_float+0x32a>
 80065ec:	e689      	b.n	8006302 <_printf_float+0xc2>
 80065ee:	9a05      	ldr	r2, [sp, #20]
 80065f0:	464b      	mov	r3, r9
 80065f2:	4442      	add	r2, r8
 80065f4:	4631      	mov	r1, r6
 80065f6:	4628      	mov	r0, r5
 80065f8:	47b8      	blx	r7
 80065fa:	3001      	adds	r0, #1
 80065fc:	d1c1      	bne.n	8006582 <_printf_float+0x342>
 80065fe:	e680      	b.n	8006302 <_printf_float+0xc2>
 8006600:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006602:	2a01      	cmp	r2, #1
 8006604:	dc01      	bgt.n	800660a <_printf_float+0x3ca>
 8006606:	07db      	lsls	r3, r3, #31
 8006608:	d538      	bpl.n	800667c <_printf_float+0x43c>
 800660a:	2301      	movs	r3, #1
 800660c:	4642      	mov	r2, r8
 800660e:	4631      	mov	r1, r6
 8006610:	4628      	mov	r0, r5
 8006612:	47b8      	blx	r7
 8006614:	3001      	adds	r0, #1
 8006616:	f43f ae74 	beq.w	8006302 <_printf_float+0xc2>
 800661a:	ee18 3a10 	vmov	r3, s16
 800661e:	4652      	mov	r2, sl
 8006620:	4631      	mov	r1, r6
 8006622:	4628      	mov	r0, r5
 8006624:	47b8      	blx	r7
 8006626:	3001      	adds	r0, #1
 8006628:	f43f ae6b 	beq.w	8006302 <_printf_float+0xc2>
 800662c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006630:	2200      	movs	r2, #0
 8006632:	2300      	movs	r3, #0
 8006634:	f7fa faa8 	bl	8000b88 <__aeabi_dcmpeq>
 8006638:	b9d8      	cbnz	r0, 8006672 <_printf_float+0x432>
 800663a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800663c:	f108 0201 	add.w	r2, r8, #1
 8006640:	3b01      	subs	r3, #1
 8006642:	4631      	mov	r1, r6
 8006644:	4628      	mov	r0, r5
 8006646:	47b8      	blx	r7
 8006648:	3001      	adds	r0, #1
 800664a:	d10e      	bne.n	800666a <_printf_float+0x42a>
 800664c:	e659      	b.n	8006302 <_printf_float+0xc2>
 800664e:	2301      	movs	r3, #1
 8006650:	4652      	mov	r2, sl
 8006652:	4631      	mov	r1, r6
 8006654:	4628      	mov	r0, r5
 8006656:	47b8      	blx	r7
 8006658:	3001      	adds	r0, #1
 800665a:	f43f ae52 	beq.w	8006302 <_printf_float+0xc2>
 800665e:	f108 0801 	add.w	r8, r8, #1
 8006662:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006664:	3b01      	subs	r3, #1
 8006666:	4543      	cmp	r3, r8
 8006668:	dcf1      	bgt.n	800664e <_printf_float+0x40e>
 800666a:	464b      	mov	r3, r9
 800666c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8006670:	e6dc      	b.n	800642c <_printf_float+0x1ec>
 8006672:	f04f 0800 	mov.w	r8, #0
 8006676:	f104 0a1a 	add.w	sl, r4, #26
 800667a:	e7f2      	b.n	8006662 <_printf_float+0x422>
 800667c:	2301      	movs	r3, #1
 800667e:	4642      	mov	r2, r8
 8006680:	e7df      	b.n	8006642 <_printf_float+0x402>
 8006682:	2301      	movs	r3, #1
 8006684:	464a      	mov	r2, r9
 8006686:	4631      	mov	r1, r6
 8006688:	4628      	mov	r0, r5
 800668a:	47b8      	blx	r7
 800668c:	3001      	adds	r0, #1
 800668e:	f43f ae38 	beq.w	8006302 <_printf_float+0xc2>
 8006692:	f108 0801 	add.w	r8, r8, #1
 8006696:	68e3      	ldr	r3, [r4, #12]
 8006698:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800669a:	1a5b      	subs	r3, r3, r1
 800669c:	4543      	cmp	r3, r8
 800669e:	dcf0      	bgt.n	8006682 <_printf_float+0x442>
 80066a0:	e6fa      	b.n	8006498 <_printf_float+0x258>
 80066a2:	f04f 0800 	mov.w	r8, #0
 80066a6:	f104 0919 	add.w	r9, r4, #25
 80066aa:	e7f4      	b.n	8006696 <_printf_float+0x456>

080066ac <_printf_common>:
 80066ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80066b0:	4616      	mov	r6, r2
 80066b2:	4699      	mov	r9, r3
 80066b4:	688a      	ldr	r2, [r1, #8]
 80066b6:	690b      	ldr	r3, [r1, #16]
 80066b8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80066bc:	4293      	cmp	r3, r2
 80066be:	bfb8      	it	lt
 80066c0:	4613      	movlt	r3, r2
 80066c2:	6033      	str	r3, [r6, #0]
 80066c4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80066c8:	4607      	mov	r7, r0
 80066ca:	460c      	mov	r4, r1
 80066cc:	b10a      	cbz	r2, 80066d2 <_printf_common+0x26>
 80066ce:	3301      	adds	r3, #1
 80066d0:	6033      	str	r3, [r6, #0]
 80066d2:	6823      	ldr	r3, [r4, #0]
 80066d4:	0699      	lsls	r1, r3, #26
 80066d6:	bf42      	ittt	mi
 80066d8:	6833      	ldrmi	r3, [r6, #0]
 80066da:	3302      	addmi	r3, #2
 80066dc:	6033      	strmi	r3, [r6, #0]
 80066de:	6825      	ldr	r5, [r4, #0]
 80066e0:	f015 0506 	ands.w	r5, r5, #6
 80066e4:	d106      	bne.n	80066f4 <_printf_common+0x48>
 80066e6:	f104 0a19 	add.w	sl, r4, #25
 80066ea:	68e3      	ldr	r3, [r4, #12]
 80066ec:	6832      	ldr	r2, [r6, #0]
 80066ee:	1a9b      	subs	r3, r3, r2
 80066f0:	42ab      	cmp	r3, r5
 80066f2:	dc26      	bgt.n	8006742 <_printf_common+0x96>
 80066f4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80066f8:	1e13      	subs	r3, r2, #0
 80066fa:	6822      	ldr	r2, [r4, #0]
 80066fc:	bf18      	it	ne
 80066fe:	2301      	movne	r3, #1
 8006700:	0692      	lsls	r2, r2, #26
 8006702:	d42b      	bmi.n	800675c <_printf_common+0xb0>
 8006704:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006708:	4649      	mov	r1, r9
 800670a:	4638      	mov	r0, r7
 800670c:	47c0      	blx	r8
 800670e:	3001      	adds	r0, #1
 8006710:	d01e      	beq.n	8006750 <_printf_common+0xa4>
 8006712:	6823      	ldr	r3, [r4, #0]
 8006714:	68e5      	ldr	r5, [r4, #12]
 8006716:	6832      	ldr	r2, [r6, #0]
 8006718:	f003 0306 	and.w	r3, r3, #6
 800671c:	2b04      	cmp	r3, #4
 800671e:	bf08      	it	eq
 8006720:	1aad      	subeq	r5, r5, r2
 8006722:	68a3      	ldr	r3, [r4, #8]
 8006724:	6922      	ldr	r2, [r4, #16]
 8006726:	bf0c      	ite	eq
 8006728:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800672c:	2500      	movne	r5, #0
 800672e:	4293      	cmp	r3, r2
 8006730:	bfc4      	itt	gt
 8006732:	1a9b      	subgt	r3, r3, r2
 8006734:	18ed      	addgt	r5, r5, r3
 8006736:	2600      	movs	r6, #0
 8006738:	341a      	adds	r4, #26
 800673a:	42b5      	cmp	r5, r6
 800673c:	d11a      	bne.n	8006774 <_printf_common+0xc8>
 800673e:	2000      	movs	r0, #0
 8006740:	e008      	b.n	8006754 <_printf_common+0xa8>
 8006742:	2301      	movs	r3, #1
 8006744:	4652      	mov	r2, sl
 8006746:	4649      	mov	r1, r9
 8006748:	4638      	mov	r0, r7
 800674a:	47c0      	blx	r8
 800674c:	3001      	adds	r0, #1
 800674e:	d103      	bne.n	8006758 <_printf_common+0xac>
 8006750:	f04f 30ff 	mov.w	r0, #4294967295
 8006754:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006758:	3501      	adds	r5, #1
 800675a:	e7c6      	b.n	80066ea <_printf_common+0x3e>
 800675c:	18e1      	adds	r1, r4, r3
 800675e:	1c5a      	adds	r2, r3, #1
 8006760:	2030      	movs	r0, #48	; 0x30
 8006762:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006766:	4422      	add	r2, r4
 8006768:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800676c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006770:	3302      	adds	r3, #2
 8006772:	e7c7      	b.n	8006704 <_printf_common+0x58>
 8006774:	2301      	movs	r3, #1
 8006776:	4622      	mov	r2, r4
 8006778:	4649      	mov	r1, r9
 800677a:	4638      	mov	r0, r7
 800677c:	47c0      	blx	r8
 800677e:	3001      	adds	r0, #1
 8006780:	d0e6      	beq.n	8006750 <_printf_common+0xa4>
 8006782:	3601      	adds	r6, #1
 8006784:	e7d9      	b.n	800673a <_printf_common+0x8e>
	...

08006788 <_printf_i>:
 8006788:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800678c:	7e0f      	ldrb	r7, [r1, #24]
 800678e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006790:	2f78      	cmp	r7, #120	; 0x78
 8006792:	4691      	mov	r9, r2
 8006794:	4680      	mov	r8, r0
 8006796:	460c      	mov	r4, r1
 8006798:	469a      	mov	sl, r3
 800679a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800679e:	d807      	bhi.n	80067b0 <_printf_i+0x28>
 80067a0:	2f62      	cmp	r7, #98	; 0x62
 80067a2:	d80a      	bhi.n	80067ba <_printf_i+0x32>
 80067a4:	2f00      	cmp	r7, #0
 80067a6:	f000 80d8 	beq.w	800695a <_printf_i+0x1d2>
 80067aa:	2f58      	cmp	r7, #88	; 0x58
 80067ac:	f000 80a3 	beq.w	80068f6 <_printf_i+0x16e>
 80067b0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80067b4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80067b8:	e03a      	b.n	8006830 <_printf_i+0xa8>
 80067ba:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80067be:	2b15      	cmp	r3, #21
 80067c0:	d8f6      	bhi.n	80067b0 <_printf_i+0x28>
 80067c2:	a101      	add	r1, pc, #4	; (adr r1, 80067c8 <_printf_i+0x40>)
 80067c4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80067c8:	08006821 	.word	0x08006821
 80067cc:	08006835 	.word	0x08006835
 80067d0:	080067b1 	.word	0x080067b1
 80067d4:	080067b1 	.word	0x080067b1
 80067d8:	080067b1 	.word	0x080067b1
 80067dc:	080067b1 	.word	0x080067b1
 80067e0:	08006835 	.word	0x08006835
 80067e4:	080067b1 	.word	0x080067b1
 80067e8:	080067b1 	.word	0x080067b1
 80067ec:	080067b1 	.word	0x080067b1
 80067f0:	080067b1 	.word	0x080067b1
 80067f4:	08006941 	.word	0x08006941
 80067f8:	08006865 	.word	0x08006865
 80067fc:	08006923 	.word	0x08006923
 8006800:	080067b1 	.word	0x080067b1
 8006804:	080067b1 	.word	0x080067b1
 8006808:	08006963 	.word	0x08006963
 800680c:	080067b1 	.word	0x080067b1
 8006810:	08006865 	.word	0x08006865
 8006814:	080067b1 	.word	0x080067b1
 8006818:	080067b1 	.word	0x080067b1
 800681c:	0800692b 	.word	0x0800692b
 8006820:	682b      	ldr	r3, [r5, #0]
 8006822:	1d1a      	adds	r2, r3, #4
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	602a      	str	r2, [r5, #0]
 8006828:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800682c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006830:	2301      	movs	r3, #1
 8006832:	e0a3      	b.n	800697c <_printf_i+0x1f4>
 8006834:	6820      	ldr	r0, [r4, #0]
 8006836:	6829      	ldr	r1, [r5, #0]
 8006838:	0606      	lsls	r6, r0, #24
 800683a:	f101 0304 	add.w	r3, r1, #4
 800683e:	d50a      	bpl.n	8006856 <_printf_i+0xce>
 8006840:	680e      	ldr	r6, [r1, #0]
 8006842:	602b      	str	r3, [r5, #0]
 8006844:	2e00      	cmp	r6, #0
 8006846:	da03      	bge.n	8006850 <_printf_i+0xc8>
 8006848:	232d      	movs	r3, #45	; 0x2d
 800684a:	4276      	negs	r6, r6
 800684c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006850:	485e      	ldr	r0, [pc, #376]	; (80069cc <_printf_i+0x244>)
 8006852:	230a      	movs	r3, #10
 8006854:	e019      	b.n	800688a <_printf_i+0x102>
 8006856:	680e      	ldr	r6, [r1, #0]
 8006858:	602b      	str	r3, [r5, #0]
 800685a:	f010 0f40 	tst.w	r0, #64	; 0x40
 800685e:	bf18      	it	ne
 8006860:	b236      	sxthne	r6, r6
 8006862:	e7ef      	b.n	8006844 <_printf_i+0xbc>
 8006864:	682b      	ldr	r3, [r5, #0]
 8006866:	6820      	ldr	r0, [r4, #0]
 8006868:	1d19      	adds	r1, r3, #4
 800686a:	6029      	str	r1, [r5, #0]
 800686c:	0601      	lsls	r1, r0, #24
 800686e:	d501      	bpl.n	8006874 <_printf_i+0xec>
 8006870:	681e      	ldr	r6, [r3, #0]
 8006872:	e002      	b.n	800687a <_printf_i+0xf2>
 8006874:	0646      	lsls	r6, r0, #25
 8006876:	d5fb      	bpl.n	8006870 <_printf_i+0xe8>
 8006878:	881e      	ldrh	r6, [r3, #0]
 800687a:	4854      	ldr	r0, [pc, #336]	; (80069cc <_printf_i+0x244>)
 800687c:	2f6f      	cmp	r7, #111	; 0x6f
 800687e:	bf0c      	ite	eq
 8006880:	2308      	moveq	r3, #8
 8006882:	230a      	movne	r3, #10
 8006884:	2100      	movs	r1, #0
 8006886:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800688a:	6865      	ldr	r5, [r4, #4]
 800688c:	60a5      	str	r5, [r4, #8]
 800688e:	2d00      	cmp	r5, #0
 8006890:	bfa2      	ittt	ge
 8006892:	6821      	ldrge	r1, [r4, #0]
 8006894:	f021 0104 	bicge.w	r1, r1, #4
 8006898:	6021      	strge	r1, [r4, #0]
 800689a:	b90e      	cbnz	r6, 80068a0 <_printf_i+0x118>
 800689c:	2d00      	cmp	r5, #0
 800689e:	d04d      	beq.n	800693c <_printf_i+0x1b4>
 80068a0:	4615      	mov	r5, r2
 80068a2:	fbb6 f1f3 	udiv	r1, r6, r3
 80068a6:	fb03 6711 	mls	r7, r3, r1, r6
 80068aa:	5dc7      	ldrb	r7, [r0, r7]
 80068ac:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80068b0:	4637      	mov	r7, r6
 80068b2:	42bb      	cmp	r3, r7
 80068b4:	460e      	mov	r6, r1
 80068b6:	d9f4      	bls.n	80068a2 <_printf_i+0x11a>
 80068b8:	2b08      	cmp	r3, #8
 80068ba:	d10b      	bne.n	80068d4 <_printf_i+0x14c>
 80068bc:	6823      	ldr	r3, [r4, #0]
 80068be:	07de      	lsls	r6, r3, #31
 80068c0:	d508      	bpl.n	80068d4 <_printf_i+0x14c>
 80068c2:	6923      	ldr	r3, [r4, #16]
 80068c4:	6861      	ldr	r1, [r4, #4]
 80068c6:	4299      	cmp	r1, r3
 80068c8:	bfde      	ittt	le
 80068ca:	2330      	movle	r3, #48	; 0x30
 80068cc:	f805 3c01 	strble.w	r3, [r5, #-1]
 80068d0:	f105 35ff 	addle.w	r5, r5, #4294967295
 80068d4:	1b52      	subs	r2, r2, r5
 80068d6:	6122      	str	r2, [r4, #16]
 80068d8:	f8cd a000 	str.w	sl, [sp]
 80068dc:	464b      	mov	r3, r9
 80068de:	aa03      	add	r2, sp, #12
 80068e0:	4621      	mov	r1, r4
 80068e2:	4640      	mov	r0, r8
 80068e4:	f7ff fee2 	bl	80066ac <_printf_common>
 80068e8:	3001      	adds	r0, #1
 80068ea:	d14c      	bne.n	8006986 <_printf_i+0x1fe>
 80068ec:	f04f 30ff 	mov.w	r0, #4294967295
 80068f0:	b004      	add	sp, #16
 80068f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80068f6:	4835      	ldr	r0, [pc, #212]	; (80069cc <_printf_i+0x244>)
 80068f8:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80068fc:	6829      	ldr	r1, [r5, #0]
 80068fe:	6823      	ldr	r3, [r4, #0]
 8006900:	f851 6b04 	ldr.w	r6, [r1], #4
 8006904:	6029      	str	r1, [r5, #0]
 8006906:	061d      	lsls	r5, r3, #24
 8006908:	d514      	bpl.n	8006934 <_printf_i+0x1ac>
 800690a:	07df      	lsls	r7, r3, #31
 800690c:	bf44      	itt	mi
 800690e:	f043 0320 	orrmi.w	r3, r3, #32
 8006912:	6023      	strmi	r3, [r4, #0]
 8006914:	b91e      	cbnz	r6, 800691e <_printf_i+0x196>
 8006916:	6823      	ldr	r3, [r4, #0]
 8006918:	f023 0320 	bic.w	r3, r3, #32
 800691c:	6023      	str	r3, [r4, #0]
 800691e:	2310      	movs	r3, #16
 8006920:	e7b0      	b.n	8006884 <_printf_i+0xfc>
 8006922:	6823      	ldr	r3, [r4, #0]
 8006924:	f043 0320 	orr.w	r3, r3, #32
 8006928:	6023      	str	r3, [r4, #0]
 800692a:	2378      	movs	r3, #120	; 0x78
 800692c:	4828      	ldr	r0, [pc, #160]	; (80069d0 <_printf_i+0x248>)
 800692e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006932:	e7e3      	b.n	80068fc <_printf_i+0x174>
 8006934:	0659      	lsls	r1, r3, #25
 8006936:	bf48      	it	mi
 8006938:	b2b6      	uxthmi	r6, r6
 800693a:	e7e6      	b.n	800690a <_printf_i+0x182>
 800693c:	4615      	mov	r5, r2
 800693e:	e7bb      	b.n	80068b8 <_printf_i+0x130>
 8006940:	682b      	ldr	r3, [r5, #0]
 8006942:	6826      	ldr	r6, [r4, #0]
 8006944:	6961      	ldr	r1, [r4, #20]
 8006946:	1d18      	adds	r0, r3, #4
 8006948:	6028      	str	r0, [r5, #0]
 800694a:	0635      	lsls	r5, r6, #24
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	d501      	bpl.n	8006954 <_printf_i+0x1cc>
 8006950:	6019      	str	r1, [r3, #0]
 8006952:	e002      	b.n	800695a <_printf_i+0x1d2>
 8006954:	0670      	lsls	r0, r6, #25
 8006956:	d5fb      	bpl.n	8006950 <_printf_i+0x1c8>
 8006958:	8019      	strh	r1, [r3, #0]
 800695a:	2300      	movs	r3, #0
 800695c:	6123      	str	r3, [r4, #16]
 800695e:	4615      	mov	r5, r2
 8006960:	e7ba      	b.n	80068d8 <_printf_i+0x150>
 8006962:	682b      	ldr	r3, [r5, #0]
 8006964:	1d1a      	adds	r2, r3, #4
 8006966:	602a      	str	r2, [r5, #0]
 8006968:	681d      	ldr	r5, [r3, #0]
 800696a:	6862      	ldr	r2, [r4, #4]
 800696c:	2100      	movs	r1, #0
 800696e:	4628      	mov	r0, r5
 8006970:	f7f9 fc96 	bl	80002a0 <memchr>
 8006974:	b108      	cbz	r0, 800697a <_printf_i+0x1f2>
 8006976:	1b40      	subs	r0, r0, r5
 8006978:	6060      	str	r0, [r4, #4]
 800697a:	6863      	ldr	r3, [r4, #4]
 800697c:	6123      	str	r3, [r4, #16]
 800697e:	2300      	movs	r3, #0
 8006980:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006984:	e7a8      	b.n	80068d8 <_printf_i+0x150>
 8006986:	6923      	ldr	r3, [r4, #16]
 8006988:	462a      	mov	r2, r5
 800698a:	4649      	mov	r1, r9
 800698c:	4640      	mov	r0, r8
 800698e:	47d0      	blx	sl
 8006990:	3001      	adds	r0, #1
 8006992:	d0ab      	beq.n	80068ec <_printf_i+0x164>
 8006994:	6823      	ldr	r3, [r4, #0]
 8006996:	079b      	lsls	r3, r3, #30
 8006998:	d413      	bmi.n	80069c2 <_printf_i+0x23a>
 800699a:	68e0      	ldr	r0, [r4, #12]
 800699c:	9b03      	ldr	r3, [sp, #12]
 800699e:	4298      	cmp	r0, r3
 80069a0:	bfb8      	it	lt
 80069a2:	4618      	movlt	r0, r3
 80069a4:	e7a4      	b.n	80068f0 <_printf_i+0x168>
 80069a6:	2301      	movs	r3, #1
 80069a8:	4632      	mov	r2, r6
 80069aa:	4649      	mov	r1, r9
 80069ac:	4640      	mov	r0, r8
 80069ae:	47d0      	blx	sl
 80069b0:	3001      	adds	r0, #1
 80069b2:	d09b      	beq.n	80068ec <_printf_i+0x164>
 80069b4:	3501      	adds	r5, #1
 80069b6:	68e3      	ldr	r3, [r4, #12]
 80069b8:	9903      	ldr	r1, [sp, #12]
 80069ba:	1a5b      	subs	r3, r3, r1
 80069bc:	42ab      	cmp	r3, r5
 80069be:	dcf2      	bgt.n	80069a6 <_printf_i+0x21e>
 80069c0:	e7eb      	b.n	800699a <_printf_i+0x212>
 80069c2:	2500      	movs	r5, #0
 80069c4:	f104 0619 	add.w	r6, r4, #25
 80069c8:	e7f5      	b.n	80069b6 <_printf_i+0x22e>
 80069ca:	bf00      	nop
 80069cc:	0800e9ea 	.word	0x0800e9ea
 80069d0:	0800e9fb 	.word	0x0800e9fb

080069d4 <_scanf_float>:
 80069d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80069d8:	b087      	sub	sp, #28
 80069da:	4617      	mov	r7, r2
 80069dc:	9303      	str	r3, [sp, #12]
 80069de:	688b      	ldr	r3, [r1, #8]
 80069e0:	1e5a      	subs	r2, r3, #1
 80069e2:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 80069e6:	bf83      	ittte	hi
 80069e8:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 80069ec:	195b      	addhi	r3, r3, r5
 80069ee:	9302      	strhi	r3, [sp, #8]
 80069f0:	2300      	movls	r3, #0
 80069f2:	bf86      	itte	hi
 80069f4:	f240 135d 	movwhi	r3, #349	; 0x15d
 80069f8:	608b      	strhi	r3, [r1, #8]
 80069fa:	9302      	strls	r3, [sp, #8]
 80069fc:	680b      	ldr	r3, [r1, #0]
 80069fe:	468b      	mov	fp, r1
 8006a00:	2500      	movs	r5, #0
 8006a02:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8006a06:	f84b 3b1c 	str.w	r3, [fp], #28
 8006a0a:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8006a0e:	4680      	mov	r8, r0
 8006a10:	460c      	mov	r4, r1
 8006a12:	465e      	mov	r6, fp
 8006a14:	46aa      	mov	sl, r5
 8006a16:	46a9      	mov	r9, r5
 8006a18:	9501      	str	r5, [sp, #4]
 8006a1a:	68a2      	ldr	r2, [r4, #8]
 8006a1c:	b152      	cbz	r2, 8006a34 <_scanf_float+0x60>
 8006a1e:	683b      	ldr	r3, [r7, #0]
 8006a20:	781b      	ldrb	r3, [r3, #0]
 8006a22:	2b4e      	cmp	r3, #78	; 0x4e
 8006a24:	d864      	bhi.n	8006af0 <_scanf_float+0x11c>
 8006a26:	2b40      	cmp	r3, #64	; 0x40
 8006a28:	d83c      	bhi.n	8006aa4 <_scanf_float+0xd0>
 8006a2a:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8006a2e:	b2c8      	uxtb	r0, r1
 8006a30:	280e      	cmp	r0, #14
 8006a32:	d93a      	bls.n	8006aaa <_scanf_float+0xd6>
 8006a34:	f1b9 0f00 	cmp.w	r9, #0
 8006a38:	d003      	beq.n	8006a42 <_scanf_float+0x6e>
 8006a3a:	6823      	ldr	r3, [r4, #0]
 8006a3c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006a40:	6023      	str	r3, [r4, #0]
 8006a42:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006a46:	f1ba 0f01 	cmp.w	sl, #1
 8006a4a:	f200 8113 	bhi.w	8006c74 <_scanf_float+0x2a0>
 8006a4e:	455e      	cmp	r6, fp
 8006a50:	f200 8105 	bhi.w	8006c5e <_scanf_float+0x28a>
 8006a54:	2501      	movs	r5, #1
 8006a56:	4628      	mov	r0, r5
 8006a58:	b007      	add	sp, #28
 8006a5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006a5e:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8006a62:	2a0d      	cmp	r2, #13
 8006a64:	d8e6      	bhi.n	8006a34 <_scanf_float+0x60>
 8006a66:	a101      	add	r1, pc, #4	; (adr r1, 8006a6c <_scanf_float+0x98>)
 8006a68:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8006a6c:	08006bab 	.word	0x08006bab
 8006a70:	08006a35 	.word	0x08006a35
 8006a74:	08006a35 	.word	0x08006a35
 8006a78:	08006a35 	.word	0x08006a35
 8006a7c:	08006c0b 	.word	0x08006c0b
 8006a80:	08006be3 	.word	0x08006be3
 8006a84:	08006a35 	.word	0x08006a35
 8006a88:	08006a35 	.word	0x08006a35
 8006a8c:	08006bb9 	.word	0x08006bb9
 8006a90:	08006a35 	.word	0x08006a35
 8006a94:	08006a35 	.word	0x08006a35
 8006a98:	08006a35 	.word	0x08006a35
 8006a9c:	08006a35 	.word	0x08006a35
 8006aa0:	08006b71 	.word	0x08006b71
 8006aa4:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8006aa8:	e7db      	b.n	8006a62 <_scanf_float+0x8e>
 8006aaa:	290e      	cmp	r1, #14
 8006aac:	d8c2      	bhi.n	8006a34 <_scanf_float+0x60>
 8006aae:	a001      	add	r0, pc, #4	; (adr r0, 8006ab4 <_scanf_float+0xe0>)
 8006ab0:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8006ab4:	08006b63 	.word	0x08006b63
 8006ab8:	08006a35 	.word	0x08006a35
 8006abc:	08006b63 	.word	0x08006b63
 8006ac0:	08006bf7 	.word	0x08006bf7
 8006ac4:	08006a35 	.word	0x08006a35
 8006ac8:	08006b11 	.word	0x08006b11
 8006acc:	08006b4d 	.word	0x08006b4d
 8006ad0:	08006b4d 	.word	0x08006b4d
 8006ad4:	08006b4d 	.word	0x08006b4d
 8006ad8:	08006b4d 	.word	0x08006b4d
 8006adc:	08006b4d 	.word	0x08006b4d
 8006ae0:	08006b4d 	.word	0x08006b4d
 8006ae4:	08006b4d 	.word	0x08006b4d
 8006ae8:	08006b4d 	.word	0x08006b4d
 8006aec:	08006b4d 	.word	0x08006b4d
 8006af0:	2b6e      	cmp	r3, #110	; 0x6e
 8006af2:	d809      	bhi.n	8006b08 <_scanf_float+0x134>
 8006af4:	2b60      	cmp	r3, #96	; 0x60
 8006af6:	d8b2      	bhi.n	8006a5e <_scanf_float+0x8a>
 8006af8:	2b54      	cmp	r3, #84	; 0x54
 8006afa:	d077      	beq.n	8006bec <_scanf_float+0x218>
 8006afc:	2b59      	cmp	r3, #89	; 0x59
 8006afe:	d199      	bne.n	8006a34 <_scanf_float+0x60>
 8006b00:	2d07      	cmp	r5, #7
 8006b02:	d197      	bne.n	8006a34 <_scanf_float+0x60>
 8006b04:	2508      	movs	r5, #8
 8006b06:	e029      	b.n	8006b5c <_scanf_float+0x188>
 8006b08:	2b74      	cmp	r3, #116	; 0x74
 8006b0a:	d06f      	beq.n	8006bec <_scanf_float+0x218>
 8006b0c:	2b79      	cmp	r3, #121	; 0x79
 8006b0e:	e7f6      	b.n	8006afe <_scanf_float+0x12a>
 8006b10:	6821      	ldr	r1, [r4, #0]
 8006b12:	05c8      	lsls	r0, r1, #23
 8006b14:	d51a      	bpl.n	8006b4c <_scanf_float+0x178>
 8006b16:	9b02      	ldr	r3, [sp, #8]
 8006b18:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8006b1c:	6021      	str	r1, [r4, #0]
 8006b1e:	f109 0901 	add.w	r9, r9, #1
 8006b22:	b11b      	cbz	r3, 8006b2c <_scanf_float+0x158>
 8006b24:	3b01      	subs	r3, #1
 8006b26:	3201      	adds	r2, #1
 8006b28:	9302      	str	r3, [sp, #8]
 8006b2a:	60a2      	str	r2, [r4, #8]
 8006b2c:	68a3      	ldr	r3, [r4, #8]
 8006b2e:	3b01      	subs	r3, #1
 8006b30:	60a3      	str	r3, [r4, #8]
 8006b32:	6923      	ldr	r3, [r4, #16]
 8006b34:	3301      	adds	r3, #1
 8006b36:	6123      	str	r3, [r4, #16]
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	3b01      	subs	r3, #1
 8006b3c:	2b00      	cmp	r3, #0
 8006b3e:	607b      	str	r3, [r7, #4]
 8006b40:	f340 8084 	ble.w	8006c4c <_scanf_float+0x278>
 8006b44:	683b      	ldr	r3, [r7, #0]
 8006b46:	3301      	adds	r3, #1
 8006b48:	603b      	str	r3, [r7, #0]
 8006b4a:	e766      	b.n	8006a1a <_scanf_float+0x46>
 8006b4c:	eb1a 0f05 	cmn.w	sl, r5
 8006b50:	f47f af70 	bne.w	8006a34 <_scanf_float+0x60>
 8006b54:	6822      	ldr	r2, [r4, #0]
 8006b56:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8006b5a:	6022      	str	r2, [r4, #0]
 8006b5c:	f806 3b01 	strb.w	r3, [r6], #1
 8006b60:	e7e4      	b.n	8006b2c <_scanf_float+0x158>
 8006b62:	6822      	ldr	r2, [r4, #0]
 8006b64:	0610      	lsls	r0, r2, #24
 8006b66:	f57f af65 	bpl.w	8006a34 <_scanf_float+0x60>
 8006b6a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006b6e:	e7f4      	b.n	8006b5a <_scanf_float+0x186>
 8006b70:	f1ba 0f00 	cmp.w	sl, #0
 8006b74:	d10e      	bne.n	8006b94 <_scanf_float+0x1c0>
 8006b76:	f1b9 0f00 	cmp.w	r9, #0
 8006b7a:	d10e      	bne.n	8006b9a <_scanf_float+0x1c6>
 8006b7c:	6822      	ldr	r2, [r4, #0]
 8006b7e:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8006b82:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8006b86:	d108      	bne.n	8006b9a <_scanf_float+0x1c6>
 8006b88:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8006b8c:	6022      	str	r2, [r4, #0]
 8006b8e:	f04f 0a01 	mov.w	sl, #1
 8006b92:	e7e3      	b.n	8006b5c <_scanf_float+0x188>
 8006b94:	f1ba 0f02 	cmp.w	sl, #2
 8006b98:	d055      	beq.n	8006c46 <_scanf_float+0x272>
 8006b9a:	2d01      	cmp	r5, #1
 8006b9c:	d002      	beq.n	8006ba4 <_scanf_float+0x1d0>
 8006b9e:	2d04      	cmp	r5, #4
 8006ba0:	f47f af48 	bne.w	8006a34 <_scanf_float+0x60>
 8006ba4:	3501      	adds	r5, #1
 8006ba6:	b2ed      	uxtb	r5, r5
 8006ba8:	e7d8      	b.n	8006b5c <_scanf_float+0x188>
 8006baa:	f1ba 0f01 	cmp.w	sl, #1
 8006bae:	f47f af41 	bne.w	8006a34 <_scanf_float+0x60>
 8006bb2:	f04f 0a02 	mov.w	sl, #2
 8006bb6:	e7d1      	b.n	8006b5c <_scanf_float+0x188>
 8006bb8:	b97d      	cbnz	r5, 8006bda <_scanf_float+0x206>
 8006bba:	f1b9 0f00 	cmp.w	r9, #0
 8006bbe:	f47f af3c 	bne.w	8006a3a <_scanf_float+0x66>
 8006bc2:	6822      	ldr	r2, [r4, #0]
 8006bc4:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8006bc8:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8006bcc:	f47f af39 	bne.w	8006a42 <_scanf_float+0x6e>
 8006bd0:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8006bd4:	6022      	str	r2, [r4, #0]
 8006bd6:	2501      	movs	r5, #1
 8006bd8:	e7c0      	b.n	8006b5c <_scanf_float+0x188>
 8006bda:	2d03      	cmp	r5, #3
 8006bdc:	d0e2      	beq.n	8006ba4 <_scanf_float+0x1d0>
 8006bde:	2d05      	cmp	r5, #5
 8006be0:	e7de      	b.n	8006ba0 <_scanf_float+0x1cc>
 8006be2:	2d02      	cmp	r5, #2
 8006be4:	f47f af26 	bne.w	8006a34 <_scanf_float+0x60>
 8006be8:	2503      	movs	r5, #3
 8006bea:	e7b7      	b.n	8006b5c <_scanf_float+0x188>
 8006bec:	2d06      	cmp	r5, #6
 8006bee:	f47f af21 	bne.w	8006a34 <_scanf_float+0x60>
 8006bf2:	2507      	movs	r5, #7
 8006bf4:	e7b2      	b.n	8006b5c <_scanf_float+0x188>
 8006bf6:	6822      	ldr	r2, [r4, #0]
 8006bf8:	0591      	lsls	r1, r2, #22
 8006bfa:	f57f af1b 	bpl.w	8006a34 <_scanf_float+0x60>
 8006bfe:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8006c02:	6022      	str	r2, [r4, #0]
 8006c04:	f8cd 9004 	str.w	r9, [sp, #4]
 8006c08:	e7a8      	b.n	8006b5c <_scanf_float+0x188>
 8006c0a:	6822      	ldr	r2, [r4, #0]
 8006c0c:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8006c10:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8006c14:	d006      	beq.n	8006c24 <_scanf_float+0x250>
 8006c16:	0550      	lsls	r0, r2, #21
 8006c18:	f57f af0c 	bpl.w	8006a34 <_scanf_float+0x60>
 8006c1c:	f1b9 0f00 	cmp.w	r9, #0
 8006c20:	f43f af0f 	beq.w	8006a42 <_scanf_float+0x6e>
 8006c24:	0591      	lsls	r1, r2, #22
 8006c26:	bf58      	it	pl
 8006c28:	9901      	ldrpl	r1, [sp, #4]
 8006c2a:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8006c2e:	bf58      	it	pl
 8006c30:	eba9 0101 	subpl.w	r1, r9, r1
 8006c34:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8006c38:	bf58      	it	pl
 8006c3a:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8006c3e:	6022      	str	r2, [r4, #0]
 8006c40:	f04f 0900 	mov.w	r9, #0
 8006c44:	e78a      	b.n	8006b5c <_scanf_float+0x188>
 8006c46:	f04f 0a03 	mov.w	sl, #3
 8006c4a:	e787      	b.n	8006b5c <_scanf_float+0x188>
 8006c4c:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8006c50:	4639      	mov	r1, r7
 8006c52:	4640      	mov	r0, r8
 8006c54:	4798      	blx	r3
 8006c56:	2800      	cmp	r0, #0
 8006c58:	f43f aedf 	beq.w	8006a1a <_scanf_float+0x46>
 8006c5c:	e6ea      	b.n	8006a34 <_scanf_float+0x60>
 8006c5e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006c62:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8006c66:	463a      	mov	r2, r7
 8006c68:	4640      	mov	r0, r8
 8006c6a:	4798      	blx	r3
 8006c6c:	6923      	ldr	r3, [r4, #16]
 8006c6e:	3b01      	subs	r3, #1
 8006c70:	6123      	str	r3, [r4, #16]
 8006c72:	e6ec      	b.n	8006a4e <_scanf_float+0x7a>
 8006c74:	1e6b      	subs	r3, r5, #1
 8006c76:	2b06      	cmp	r3, #6
 8006c78:	d825      	bhi.n	8006cc6 <_scanf_float+0x2f2>
 8006c7a:	2d02      	cmp	r5, #2
 8006c7c:	d836      	bhi.n	8006cec <_scanf_float+0x318>
 8006c7e:	455e      	cmp	r6, fp
 8006c80:	f67f aee8 	bls.w	8006a54 <_scanf_float+0x80>
 8006c84:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006c88:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8006c8c:	463a      	mov	r2, r7
 8006c8e:	4640      	mov	r0, r8
 8006c90:	4798      	blx	r3
 8006c92:	6923      	ldr	r3, [r4, #16]
 8006c94:	3b01      	subs	r3, #1
 8006c96:	6123      	str	r3, [r4, #16]
 8006c98:	e7f1      	b.n	8006c7e <_scanf_float+0x2aa>
 8006c9a:	9802      	ldr	r0, [sp, #8]
 8006c9c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006ca0:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8006ca4:	9002      	str	r0, [sp, #8]
 8006ca6:	463a      	mov	r2, r7
 8006ca8:	4640      	mov	r0, r8
 8006caa:	4798      	blx	r3
 8006cac:	6923      	ldr	r3, [r4, #16]
 8006cae:	3b01      	subs	r3, #1
 8006cb0:	6123      	str	r3, [r4, #16]
 8006cb2:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006cb6:	fa5f fa8a 	uxtb.w	sl, sl
 8006cba:	f1ba 0f02 	cmp.w	sl, #2
 8006cbe:	d1ec      	bne.n	8006c9a <_scanf_float+0x2c6>
 8006cc0:	3d03      	subs	r5, #3
 8006cc2:	b2ed      	uxtb	r5, r5
 8006cc4:	1b76      	subs	r6, r6, r5
 8006cc6:	6823      	ldr	r3, [r4, #0]
 8006cc8:	05da      	lsls	r2, r3, #23
 8006cca:	d52f      	bpl.n	8006d2c <_scanf_float+0x358>
 8006ccc:	055b      	lsls	r3, r3, #21
 8006cce:	d510      	bpl.n	8006cf2 <_scanf_float+0x31e>
 8006cd0:	455e      	cmp	r6, fp
 8006cd2:	f67f aebf 	bls.w	8006a54 <_scanf_float+0x80>
 8006cd6:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006cda:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8006cde:	463a      	mov	r2, r7
 8006ce0:	4640      	mov	r0, r8
 8006ce2:	4798      	blx	r3
 8006ce4:	6923      	ldr	r3, [r4, #16]
 8006ce6:	3b01      	subs	r3, #1
 8006ce8:	6123      	str	r3, [r4, #16]
 8006cea:	e7f1      	b.n	8006cd0 <_scanf_float+0x2fc>
 8006cec:	46aa      	mov	sl, r5
 8006cee:	9602      	str	r6, [sp, #8]
 8006cf0:	e7df      	b.n	8006cb2 <_scanf_float+0x2de>
 8006cf2:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8006cf6:	6923      	ldr	r3, [r4, #16]
 8006cf8:	2965      	cmp	r1, #101	; 0x65
 8006cfa:	f103 33ff 	add.w	r3, r3, #4294967295
 8006cfe:	f106 35ff 	add.w	r5, r6, #4294967295
 8006d02:	6123      	str	r3, [r4, #16]
 8006d04:	d00c      	beq.n	8006d20 <_scanf_float+0x34c>
 8006d06:	2945      	cmp	r1, #69	; 0x45
 8006d08:	d00a      	beq.n	8006d20 <_scanf_float+0x34c>
 8006d0a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006d0e:	463a      	mov	r2, r7
 8006d10:	4640      	mov	r0, r8
 8006d12:	4798      	blx	r3
 8006d14:	6923      	ldr	r3, [r4, #16]
 8006d16:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8006d1a:	3b01      	subs	r3, #1
 8006d1c:	1eb5      	subs	r5, r6, #2
 8006d1e:	6123      	str	r3, [r4, #16]
 8006d20:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006d24:	463a      	mov	r2, r7
 8006d26:	4640      	mov	r0, r8
 8006d28:	4798      	blx	r3
 8006d2a:	462e      	mov	r6, r5
 8006d2c:	6825      	ldr	r5, [r4, #0]
 8006d2e:	f015 0510 	ands.w	r5, r5, #16
 8006d32:	d159      	bne.n	8006de8 <_scanf_float+0x414>
 8006d34:	7035      	strb	r5, [r6, #0]
 8006d36:	6823      	ldr	r3, [r4, #0]
 8006d38:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8006d3c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006d40:	d11b      	bne.n	8006d7a <_scanf_float+0x3a6>
 8006d42:	9b01      	ldr	r3, [sp, #4]
 8006d44:	454b      	cmp	r3, r9
 8006d46:	eba3 0209 	sub.w	r2, r3, r9
 8006d4a:	d123      	bne.n	8006d94 <_scanf_float+0x3c0>
 8006d4c:	2200      	movs	r2, #0
 8006d4e:	4659      	mov	r1, fp
 8006d50:	4640      	mov	r0, r8
 8006d52:	f000 fe97 	bl	8007a84 <_strtod_r>
 8006d56:	6822      	ldr	r2, [r4, #0]
 8006d58:	9b03      	ldr	r3, [sp, #12]
 8006d5a:	f012 0f02 	tst.w	r2, #2
 8006d5e:	ec57 6b10 	vmov	r6, r7, d0
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	d021      	beq.n	8006daa <_scanf_float+0x3d6>
 8006d66:	9903      	ldr	r1, [sp, #12]
 8006d68:	1d1a      	adds	r2, r3, #4
 8006d6a:	600a      	str	r2, [r1, #0]
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	e9c3 6700 	strd	r6, r7, [r3]
 8006d72:	68e3      	ldr	r3, [r4, #12]
 8006d74:	3301      	adds	r3, #1
 8006d76:	60e3      	str	r3, [r4, #12]
 8006d78:	e66d      	b.n	8006a56 <_scanf_float+0x82>
 8006d7a:	9b04      	ldr	r3, [sp, #16]
 8006d7c:	2b00      	cmp	r3, #0
 8006d7e:	d0e5      	beq.n	8006d4c <_scanf_float+0x378>
 8006d80:	9905      	ldr	r1, [sp, #20]
 8006d82:	230a      	movs	r3, #10
 8006d84:	462a      	mov	r2, r5
 8006d86:	3101      	adds	r1, #1
 8006d88:	4640      	mov	r0, r8
 8006d8a:	f000 ff03 	bl	8007b94 <_strtol_r>
 8006d8e:	9b04      	ldr	r3, [sp, #16]
 8006d90:	9e05      	ldr	r6, [sp, #20]
 8006d92:	1ac2      	subs	r2, r0, r3
 8006d94:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8006d98:	429e      	cmp	r6, r3
 8006d9a:	bf28      	it	cs
 8006d9c:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8006da0:	4912      	ldr	r1, [pc, #72]	; (8006dec <_scanf_float+0x418>)
 8006da2:	4630      	mov	r0, r6
 8006da4:	f000 f82c 	bl	8006e00 <siprintf>
 8006da8:	e7d0      	b.n	8006d4c <_scanf_float+0x378>
 8006daa:	9903      	ldr	r1, [sp, #12]
 8006dac:	f012 0f04 	tst.w	r2, #4
 8006db0:	f103 0204 	add.w	r2, r3, #4
 8006db4:	600a      	str	r2, [r1, #0]
 8006db6:	d1d9      	bne.n	8006d6c <_scanf_float+0x398>
 8006db8:	f8d3 8000 	ldr.w	r8, [r3]
 8006dbc:	ee10 2a10 	vmov	r2, s0
 8006dc0:	ee10 0a10 	vmov	r0, s0
 8006dc4:	463b      	mov	r3, r7
 8006dc6:	4639      	mov	r1, r7
 8006dc8:	f7f9 ff10 	bl	8000bec <__aeabi_dcmpun>
 8006dcc:	b128      	cbz	r0, 8006dda <_scanf_float+0x406>
 8006dce:	4808      	ldr	r0, [pc, #32]	; (8006df0 <_scanf_float+0x41c>)
 8006dd0:	f000 f810 	bl	8006df4 <nanf>
 8006dd4:	ed88 0a00 	vstr	s0, [r8]
 8006dd8:	e7cb      	b.n	8006d72 <_scanf_float+0x39e>
 8006dda:	4630      	mov	r0, r6
 8006ddc:	4639      	mov	r1, r7
 8006dde:	f7f9 ff63 	bl	8000ca8 <__aeabi_d2f>
 8006de2:	f8c8 0000 	str.w	r0, [r8]
 8006de6:	e7c4      	b.n	8006d72 <_scanf_float+0x39e>
 8006de8:	2500      	movs	r5, #0
 8006dea:	e634      	b.n	8006a56 <_scanf_float+0x82>
 8006dec:	0800ea0c 	.word	0x0800ea0c
 8006df0:	0800ee18 	.word	0x0800ee18

08006df4 <nanf>:
 8006df4:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8006dfc <nanf+0x8>
 8006df8:	4770      	bx	lr
 8006dfa:	bf00      	nop
 8006dfc:	7fc00000 	.word	0x7fc00000

08006e00 <siprintf>:
 8006e00:	b40e      	push	{r1, r2, r3}
 8006e02:	b500      	push	{lr}
 8006e04:	b09c      	sub	sp, #112	; 0x70
 8006e06:	ab1d      	add	r3, sp, #116	; 0x74
 8006e08:	9002      	str	r0, [sp, #8]
 8006e0a:	9006      	str	r0, [sp, #24]
 8006e0c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006e10:	4809      	ldr	r0, [pc, #36]	; (8006e38 <siprintf+0x38>)
 8006e12:	9107      	str	r1, [sp, #28]
 8006e14:	9104      	str	r1, [sp, #16]
 8006e16:	4909      	ldr	r1, [pc, #36]	; (8006e3c <siprintf+0x3c>)
 8006e18:	f853 2b04 	ldr.w	r2, [r3], #4
 8006e1c:	9105      	str	r1, [sp, #20]
 8006e1e:	6800      	ldr	r0, [r0, #0]
 8006e20:	9301      	str	r3, [sp, #4]
 8006e22:	a902      	add	r1, sp, #8
 8006e24:	f002 fee2 	bl	8009bec <_svfiprintf_r>
 8006e28:	9b02      	ldr	r3, [sp, #8]
 8006e2a:	2200      	movs	r2, #0
 8006e2c:	701a      	strb	r2, [r3, #0]
 8006e2e:	b01c      	add	sp, #112	; 0x70
 8006e30:	f85d eb04 	ldr.w	lr, [sp], #4
 8006e34:	b003      	add	sp, #12
 8006e36:	4770      	bx	lr
 8006e38:	20000024 	.word	0x20000024
 8006e3c:	ffff0208 	.word	0xffff0208

08006e40 <sulp>:
 8006e40:	b570      	push	{r4, r5, r6, lr}
 8006e42:	4604      	mov	r4, r0
 8006e44:	460d      	mov	r5, r1
 8006e46:	ec45 4b10 	vmov	d0, r4, r5
 8006e4a:	4616      	mov	r6, r2
 8006e4c:	f002 fc2c 	bl	80096a8 <__ulp>
 8006e50:	ec51 0b10 	vmov	r0, r1, d0
 8006e54:	b17e      	cbz	r6, 8006e76 <sulp+0x36>
 8006e56:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8006e5a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8006e5e:	2b00      	cmp	r3, #0
 8006e60:	dd09      	ble.n	8006e76 <sulp+0x36>
 8006e62:	051b      	lsls	r3, r3, #20
 8006e64:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8006e68:	2400      	movs	r4, #0
 8006e6a:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8006e6e:	4622      	mov	r2, r4
 8006e70:	462b      	mov	r3, r5
 8006e72:	f7f9 fc21 	bl	80006b8 <__aeabi_dmul>
 8006e76:	bd70      	pop	{r4, r5, r6, pc}

08006e78 <_strtod_l>:
 8006e78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006e7c:	ed2d 8b02 	vpush	{d8}
 8006e80:	b09d      	sub	sp, #116	; 0x74
 8006e82:	461f      	mov	r7, r3
 8006e84:	2300      	movs	r3, #0
 8006e86:	9318      	str	r3, [sp, #96]	; 0x60
 8006e88:	4ba2      	ldr	r3, [pc, #648]	; (8007114 <_strtod_l+0x29c>)
 8006e8a:	9213      	str	r2, [sp, #76]	; 0x4c
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	9305      	str	r3, [sp, #20]
 8006e90:	4604      	mov	r4, r0
 8006e92:	4618      	mov	r0, r3
 8006e94:	4688      	mov	r8, r1
 8006e96:	f7f9 f9fb 	bl	8000290 <strlen>
 8006e9a:	f04f 0a00 	mov.w	sl, #0
 8006e9e:	4605      	mov	r5, r0
 8006ea0:	f04f 0b00 	mov.w	fp, #0
 8006ea4:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8006ea8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006eaa:	781a      	ldrb	r2, [r3, #0]
 8006eac:	2a2b      	cmp	r2, #43	; 0x2b
 8006eae:	d04e      	beq.n	8006f4e <_strtod_l+0xd6>
 8006eb0:	d83b      	bhi.n	8006f2a <_strtod_l+0xb2>
 8006eb2:	2a0d      	cmp	r2, #13
 8006eb4:	d834      	bhi.n	8006f20 <_strtod_l+0xa8>
 8006eb6:	2a08      	cmp	r2, #8
 8006eb8:	d834      	bhi.n	8006f24 <_strtod_l+0xac>
 8006eba:	2a00      	cmp	r2, #0
 8006ebc:	d03e      	beq.n	8006f3c <_strtod_l+0xc4>
 8006ebe:	2300      	movs	r3, #0
 8006ec0:	930a      	str	r3, [sp, #40]	; 0x28
 8006ec2:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 8006ec4:	7833      	ldrb	r3, [r6, #0]
 8006ec6:	2b30      	cmp	r3, #48	; 0x30
 8006ec8:	f040 80b0 	bne.w	800702c <_strtod_l+0x1b4>
 8006ecc:	7873      	ldrb	r3, [r6, #1]
 8006ece:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8006ed2:	2b58      	cmp	r3, #88	; 0x58
 8006ed4:	d168      	bne.n	8006fa8 <_strtod_l+0x130>
 8006ed6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006ed8:	9301      	str	r3, [sp, #4]
 8006eda:	ab18      	add	r3, sp, #96	; 0x60
 8006edc:	9702      	str	r7, [sp, #8]
 8006ede:	9300      	str	r3, [sp, #0]
 8006ee0:	4a8d      	ldr	r2, [pc, #564]	; (8007118 <_strtod_l+0x2a0>)
 8006ee2:	ab19      	add	r3, sp, #100	; 0x64
 8006ee4:	a917      	add	r1, sp, #92	; 0x5c
 8006ee6:	4620      	mov	r0, r4
 8006ee8:	f001 fd38 	bl	800895c <__gethex>
 8006eec:	f010 0707 	ands.w	r7, r0, #7
 8006ef0:	4605      	mov	r5, r0
 8006ef2:	d005      	beq.n	8006f00 <_strtod_l+0x88>
 8006ef4:	2f06      	cmp	r7, #6
 8006ef6:	d12c      	bne.n	8006f52 <_strtod_l+0xda>
 8006ef8:	3601      	adds	r6, #1
 8006efa:	2300      	movs	r3, #0
 8006efc:	9617      	str	r6, [sp, #92]	; 0x5c
 8006efe:	930a      	str	r3, [sp, #40]	; 0x28
 8006f00:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8006f02:	2b00      	cmp	r3, #0
 8006f04:	f040 8590 	bne.w	8007a28 <_strtod_l+0xbb0>
 8006f08:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006f0a:	b1eb      	cbz	r3, 8006f48 <_strtod_l+0xd0>
 8006f0c:	4652      	mov	r2, sl
 8006f0e:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8006f12:	ec43 2b10 	vmov	d0, r2, r3
 8006f16:	b01d      	add	sp, #116	; 0x74
 8006f18:	ecbd 8b02 	vpop	{d8}
 8006f1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006f20:	2a20      	cmp	r2, #32
 8006f22:	d1cc      	bne.n	8006ebe <_strtod_l+0x46>
 8006f24:	3301      	adds	r3, #1
 8006f26:	9317      	str	r3, [sp, #92]	; 0x5c
 8006f28:	e7be      	b.n	8006ea8 <_strtod_l+0x30>
 8006f2a:	2a2d      	cmp	r2, #45	; 0x2d
 8006f2c:	d1c7      	bne.n	8006ebe <_strtod_l+0x46>
 8006f2e:	2201      	movs	r2, #1
 8006f30:	920a      	str	r2, [sp, #40]	; 0x28
 8006f32:	1c5a      	adds	r2, r3, #1
 8006f34:	9217      	str	r2, [sp, #92]	; 0x5c
 8006f36:	785b      	ldrb	r3, [r3, #1]
 8006f38:	2b00      	cmp	r3, #0
 8006f3a:	d1c2      	bne.n	8006ec2 <_strtod_l+0x4a>
 8006f3c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8006f3e:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8006f42:	2b00      	cmp	r3, #0
 8006f44:	f040 856e 	bne.w	8007a24 <_strtod_l+0xbac>
 8006f48:	4652      	mov	r2, sl
 8006f4a:	465b      	mov	r3, fp
 8006f4c:	e7e1      	b.n	8006f12 <_strtod_l+0x9a>
 8006f4e:	2200      	movs	r2, #0
 8006f50:	e7ee      	b.n	8006f30 <_strtod_l+0xb8>
 8006f52:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8006f54:	b13a      	cbz	r2, 8006f66 <_strtod_l+0xee>
 8006f56:	2135      	movs	r1, #53	; 0x35
 8006f58:	a81a      	add	r0, sp, #104	; 0x68
 8006f5a:	f002 fcb0 	bl	80098be <__copybits>
 8006f5e:	9918      	ldr	r1, [sp, #96]	; 0x60
 8006f60:	4620      	mov	r0, r4
 8006f62:	f002 f86f 	bl	8009044 <_Bfree>
 8006f66:	3f01      	subs	r7, #1
 8006f68:	2f04      	cmp	r7, #4
 8006f6a:	d806      	bhi.n	8006f7a <_strtod_l+0x102>
 8006f6c:	e8df f007 	tbb	[pc, r7]
 8006f70:	1714030a 	.word	0x1714030a
 8006f74:	0a          	.byte	0x0a
 8006f75:	00          	.byte	0x00
 8006f76:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 8006f7a:	0728      	lsls	r0, r5, #28
 8006f7c:	d5c0      	bpl.n	8006f00 <_strtod_l+0x88>
 8006f7e:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 8006f82:	e7bd      	b.n	8006f00 <_strtod_l+0x88>
 8006f84:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 8006f88:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8006f8a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8006f8e:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8006f92:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8006f96:	e7f0      	b.n	8006f7a <_strtod_l+0x102>
 8006f98:	f8df b180 	ldr.w	fp, [pc, #384]	; 800711c <_strtod_l+0x2a4>
 8006f9c:	e7ed      	b.n	8006f7a <_strtod_l+0x102>
 8006f9e:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 8006fa2:	f04f 3aff 	mov.w	sl, #4294967295
 8006fa6:	e7e8      	b.n	8006f7a <_strtod_l+0x102>
 8006fa8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006faa:	1c5a      	adds	r2, r3, #1
 8006fac:	9217      	str	r2, [sp, #92]	; 0x5c
 8006fae:	785b      	ldrb	r3, [r3, #1]
 8006fb0:	2b30      	cmp	r3, #48	; 0x30
 8006fb2:	d0f9      	beq.n	8006fa8 <_strtod_l+0x130>
 8006fb4:	2b00      	cmp	r3, #0
 8006fb6:	d0a3      	beq.n	8006f00 <_strtod_l+0x88>
 8006fb8:	2301      	movs	r3, #1
 8006fba:	f04f 0900 	mov.w	r9, #0
 8006fbe:	9304      	str	r3, [sp, #16]
 8006fc0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006fc2:	9308      	str	r3, [sp, #32]
 8006fc4:	f8cd 901c 	str.w	r9, [sp, #28]
 8006fc8:	464f      	mov	r7, r9
 8006fca:	220a      	movs	r2, #10
 8006fcc:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8006fce:	7806      	ldrb	r6, [r0, #0]
 8006fd0:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8006fd4:	b2d9      	uxtb	r1, r3
 8006fd6:	2909      	cmp	r1, #9
 8006fd8:	d92a      	bls.n	8007030 <_strtod_l+0x1b8>
 8006fda:	9905      	ldr	r1, [sp, #20]
 8006fdc:	462a      	mov	r2, r5
 8006fde:	f002 ff1f 	bl	8009e20 <strncmp>
 8006fe2:	b398      	cbz	r0, 800704c <_strtod_l+0x1d4>
 8006fe4:	2000      	movs	r0, #0
 8006fe6:	4632      	mov	r2, r6
 8006fe8:	463d      	mov	r5, r7
 8006fea:	9005      	str	r0, [sp, #20]
 8006fec:	4603      	mov	r3, r0
 8006fee:	2a65      	cmp	r2, #101	; 0x65
 8006ff0:	d001      	beq.n	8006ff6 <_strtod_l+0x17e>
 8006ff2:	2a45      	cmp	r2, #69	; 0x45
 8006ff4:	d118      	bne.n	8007028 <_strtod_l+0x1b0>
 8006ff6:	b91d      	cbnz	r5, 8007000 <_strtod_l+0x188>
 8006ff8:	9a04      	ldr	r2, [sp, #16]
 8006ffa:	4302      	orrs	r2, r0
 8006ffc:	d09e      	beq.n	8006f3c <_strtod_l+0xc4>
 8006ffe:	2500      	movs	r5, #0
 8007000:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 8007004:	f108 0201 	add.w	r2, r8, #1
 8007008:	9217      	str	r2, [sp, #92]	; 0x5c
 800700a:	f898 2001 	ldrb.w	r2, [r8, #1]
 800700e:	2a2b      	cmp	r2, #43	; 0x2b
 8007010:	d075      	beq.n	80070fe <_strtod_l+0x286>
 8007012:	2a2d      	cmp	r2, #45	; 0x2d
 8007014:	d07b      	beq.n	800710e <_strtod_l+0x296>
 8007016:	f04f 0c00 	mov.w	ip, #0
 800701a:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800701e:	2909      	cmp	r1, #9
 8007020:	f240 8082 	bls.w	8007128 <_strtod_l+0x2b0>
 8007024:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8007028:	2600      	movs	r6, #0
 800702a:	e09d      	b.n	8007168 <_strtod_l+0x2f0>
 800702c:	2300      	movs	r3, #0
 800702e:	e7c4      	b.n	8006fba <_strtod_l+0x142>
 8007030:	2f08      	cmp	r7, #8
 8007032:	bfd8      	it	le
 8007034:	9907      	ldrle	r1, [sp, #28]
 8007036:	f100 0001 	add.w	r0, r0, #1
 800703a:	bfda      	itte	le
 800703c:	fb02 3301 	mlale	r3, r2, r1, r3
 8007040:	9307      	strle	r3, [sp, #28]
 8007042:	fb02 3909 	mlagt	r9, r2, r9, r3
 8007046:	3701      	adds	r7, #1
 8007048:	9017      	str	r0, [sp, #92]	; 0x5c
 800704a:	e7bf      	b.n	8006fcc <_strtod_l+0x154>
 800704c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800704e:	195a      	adds	r2, r3, r5
 8007050:	9217      	str	r2, [sp, #92]	; 0x5c
 8007052:	5d5a      	ldrb	r2, [r3, r5]
 8007054:	2f00      	cmp	r7, #0
 8007056:	d037      	beq.n	80070c8 <_strtod_l+0x250>
 8007058:	9005      	str	r0, [sp, #20]
 800705a:	463d      	mov	r5, r7
 800705c:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8007060:	2b09      	cmp	r3, #9
 8007062:	d912      	bls.n	800708a <_strtod_l+0x212>
 8007064:	2301      	movs	r3, #1
 8007066:	e7c2      	b.n	8006fee <_strtod_l+0x176>
 8007068:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800706a:	1c5a      	adds	r2, r3, #1
 800706c:	9217      	str	r2, [sp, #92]	; 0x5c
 800706e:	785a      	ldrb	r2, [r3, #1]
 8007070:	3001      	adds	r0, #1
 8007072:	2a30      	cmp	r2, #48	; 0x30
 8007074:	d0f8      	beq.n	8007068 <_strtod_l+0x1f0>
 8007076:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800707a:	2b08      	cmp	r3, #8
 800707c:	f200 84d9 	bhi.w	8007a32 <_strtod_l+0xbba>
 8007080:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007082:	9005      	str	r0, [sp, #20]
 8007084:	2000      	movs	r0, #0
 8007086:	9308      	str	r3, [sp, #32]
 8007088:	4605      	mov	r5, r0
 800708a:	3a30      	subs	r2, #48	; 0x30
 800708c:	f100 0301 	add.w	r3, r0, #1
 8007090:	d014      	beq.n	80070bc <_strtod_l+0x244>
 8007092:	9905      	ldr	r1, [sp, #20]
 8007094:	4419      	add	r1, r3
 8007096:	9105      	str	r1, [sp, #20]
 8007098:	462b      	mov	r3, r5
 800709a:	eb00 0e05 	add.w	lr, r0, r5
 800709e:	210a      	movs	r1, #10
 80070a0:	4573      	cmp	r3, lr
 80070a2:	d113      	bne.n	80070cc <_strtod_l+0x254>
 80070a4:	182b      	adds	r3, r5, r0
 80070a6:	2b08      	cmp	r3, #8
 80070a8:	f105 0501 	add.w	r5, r5, #1
 80070ac:	4405      	add	r5, r0
 80070ae:	dc1c      	bgt.n	80070ea <_strtod_l+0x272>
 80070b0:	9907      	ldr	r1, [sp, #28]
 80070b2:	230a      	movs	r3, #10
 80070b4:	fb03 2301 	mla	r3, r3, r1, r2
 80070b8:	9307      	str	r3, [sp, #28]
 80070ba:	2300      	movs	r3, #0
 80070bc:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80070be:	1c51      	adds	r1, r2, #1
 80070c0:	9117      	str	r1, [sp, #92]	; 0x5c
 80070c2:	7852      	ldrb	r2, [r2, #1]
 80070c4:	4618      	mov	r0, r3
 80070c6:	e7c9      	b.n	800705c <_strtod_l+0x1e4>
 80070c8:	4638      	mov	r0, r7
 80070ca:	e7d2      	b.n	8007072 <_strtod_l+0x1fa>
 80070cc:	2b08      	cmp	r3, #8
 80070ce:	dc04      	bgt.n	80070da <_strtod_l+0x262>
 80070d0:	9e07      	ldr	r6, [sp, #28]
 80070d2:	434e      	muls	r6, r1
 80070d4:	9607      	str	r6, [sp, #28]
 80070d6:	3301      	adds	r3, #1
 80070d8:	e7e2      	b.n	80070a0 <_strtod_l+0x228>
 80070da:	f103 0c01 	add.w	ip, r3, #1
 80070de:	f1bc 0f10 	cmp.w	ip, #16
 80070e2:	bfd8      	it	le
 80070e4:	fb01 f909 	mulle.w	r9, r1, r9
 80070e8:	e7f5      	b.n	80070d6 <_strtod_l+0x25e>
 80070ea:	2d10      	cmp	r5, #16
 80070ec:	bfdc      	itt	le
 80070ee:	230a      	movle	r3, #10
 80070f0:	fb03 2909 	mlale	r9, r3, r9, r2
 80070f4:	e7e1      	b.n	80070ba <_strtod_l+0x242>
 80070f6:	2300      	movs	r3, #0
 80070f8:	9305      	str	r3, [sp, #20]
 80070fa:	2301      	movs	r3, #1
 80070fc:	e77c      	b.n	8006ff8 <_strtod_l+0x180>
 80070fe:	f04f 0c00 	mov.w	ip, #0
 8007102:	f108 0202 	add.w	r2, r8, #2
 8007106:	9217      	str	r2, [sp, #92]	; 0x5c
 8007108:	f898 2002 	ldrb.w	r2, [r8, #2]
 800710c:	e785      	b.n	800701a <_strtod_l+0x1a2>
 800710e:	f04f 0c01 	mov.w	ip, #1
 8007112:	e7f6      	b.n	8007102 <_strtod_l+0x28a>
 8007114:	0800ec60 	.word	0x0800ec60
 8007118:	0800ea14 	.word	0x0800ea14
 800711c:	7ff00000 	.word	0x7ff00000
 8007120:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8007122:	1c51      	adds	r1, r2, #1
 8007124:	9117      	str	r1, [sp, #92]	; 0x5c
 8007126:	7852      	ldrb	r2, [r2, #1]
 8007128:	2a30      	cmp	r2, #48	; 0x30
 800712a:	d0f9      	beq.n	8007120 <_strtod_l+0x2a8>
 800712c:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8007130:	2908      	cmp	r1, #8
 8007132:	f63f af79 	bhi.w	8007028 <_strtod_l+0x1b0>
 8007136:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 800713a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800713c:	9206      	str	r2, [sp, #24]
 800713e:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8007140:	1c51      	adds	r1, r2, #1
 8007142:	9117      	str	r1, [sp, #92]	; 0x5c
 8007144:	7852      	ldrb	r2, [r2, #1]
 8007146:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 800714a:	2e09      	cmp	r6, #9
 800714c:	d937      	bls.n	80071be <_strtod_l+0x346>
 800714e:	9e06      	ldr	r6, [sp, #24]
 8007150:	1b89      	subs	r1, r1, r6
 8007152:	2908      	cmp	r1, #8
 8007154:	f644 661f 	movw	r6, #19999	; 0x4e1f
 8007158:	dc02      	bgt.n	8007160 <_strtod_l+0x2e8>
 800715a:	4576      	cmp	r6, lr
 800715c:	bfa8      	it	ge
 800715e:	4676      	movge	r6, lr
 8007160:	f1bc 0f00 	cmp.w	ip, #0
 8007164:	d000      	beq.n	8007168 <_strtod_l+0x2f0>
 8007166:	4276      	negs	r6, r6
 8007168:	2d00      	cmp	r5, #0
 800716a:	d14d      	bne.n	8007208 <_strtod_l+0x390>
 800716c:	9904      	ldr	r1, [sp, #16]
 800716e:	4301      	orrs	r1, r0
 8007170:	f47f aec6 	bne.w	8006f00 <_strtod_l+0x88>
 8007174:	2b00      	cmp	r3, #0
 8007176:	f47f aee1 	bne.w	8006f3c <_strtod_l+0xc4>
 800717a:	2a69      	cmp	r2, #105	; 0x69
 800717c:	d027      	beq.n	80071ce <_strtod_l+0x356>
 800717e:	dc24      	bgt.n	80071ca <_strtod_l+0x352>
 8007180:	2a49      	cmp	r2, #73	; 0x49
 8007182:	d024      	beq.n	80071ce <_strtod_l+0x356>
 8007184:	2a4e      	cmp	r2, #78	; 0x4e
 8007186:	f47f aed9 	bne.w	8006f3c <_strtod_l+0xc4>
 800718a:	499f      	ldr	r1, [pc, #636]	; (8007408 <_strtod_l+0x590>)
 800718c:	a817      	add	r0, sp, #92	; 0x5c
 800718e:	f001 fe3d 	bl	8008e0c <__match>
 8007192:	2800      	cmp	r0, #0
 8007194:	f43f aed2 	beq.w	8006f3c <_strtod_l+0xc4>
 8007198:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800719a:	781b      	ldrb	r3, [r3, #0]
 800719c:	2b28      	cmp	r3, #40	; 0x28
 800719e:	d12d      	bne.n	80071fc <_strtod_l+0x384>
 80071a0:	499a      	ldr	r1, [pc, #616]	; (800740c <_strtod_l+0x594>)
 80071a2:	aa1a      	add	r2, sp, #104	; 0x68
 80071a4:	a817      	add	r0, sp, #92	; 0x5c
 80071a6:	f001 fe45 	bl	8008e34 <__hexnan>
 80071aa:	2805      	cmp	r0, #5
 80071ac:	d126      	bne.n	80071fc <_strtod_l+0x384>
 80071ae:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80071b0:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 80071b4:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 80071b8:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 80071bc:	e6a0      	b.n	8006f00 <_strtod_l+0x88>
 80071be:	210a      	movs	r1, #10
 80071c0:	fb01 2e0e 	mla	lr, r1, lr, r2
 80071c4:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 80071c8:	e7b9      	b.n	800713e <_strtod_l+0x2c6>
 80071ca:	2a6e      	cmp	r2, #110	; 0x6e
 80071cc:	e7db      	b.n	8007186 <_strtod_l+0x30e>
 80071ce:	4990      	ldr	r1, [pc, #576]	; (8007410 <_strtod_l+0x598>)
 80071d0:	a817      	add	r0, sp, #92	; 0x5c
 80071d2:	f001 fe1b 	bl	8008e0c <__match>
 80071d6:	2800      	cmp	r0, #0
 80071d8:	f43f aeb0 	beq.w	8006f3c <_strtod_l+0xc4>
 80071dc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80071de:	498d      	ldr	r1, [pc, #564]	; (8007414 <_strtod_l+0x59c>)
 80071e0:	3b01      	subs	r3, #1
 80071e2:	a817      	add	r0, sp, #92	; 0x5c
 80071e4:	9317      	str	r3, [sp, #92]	; 0x5c
 80071e6:	f001 fe11 	bl	8008e0c <__match>
 80071ea:	b910      	cbnz	r0, 80071f2 <_strtod_l+0x37a>
 80071ec:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80071ee:	3301      	adds	r3, #1
 80071f0:	9317      	str	r3, [sp, #92]	; 0x5c
 80071f2:	f8df b230 	ldr.w	fp, [pc, #560]	; 8007424 <_strtod_l+0x5ac>
 80071f6:	f04f 0a00 	mov.w	sl, #0
 80071fa:	e681      	b.n	8006f00 <_strtod_l+0x88>
 80071fc:	4886      	ldr	r0, [pc, #536]	; (8007418 <_strtod_l+0x5a0>)
 80071fe:	f002 fdf7 	bl	8009df0 <nan>
 8007202:	ec5b ab10 	vmov	sl, fp, d0
 8007206:	e67b      	b.n	8006f00 <_strtod_l+0x88>
 8007208:	9b05      	ldr	r3, [sp, #20]
 800720a:	9807      	ldr	r0, [sp, #28]
 800720c:	1af3      	subs	r3, r6, r3
 800720e:	2f00      	cmp	r7, #0
 8007210:	bf08      	it	eq
 8007212:	462f      	moveq	r7, r5
 8007214:	2d10      	cmp	r5, #16
 8007216:	9306      	str	r3, [sp, #24]
 8007218:	46a8      	mov	r8, r5
 800721a:	bfa8      	it	ge
 800721c:	f04f 0810 	movge.w	r8, #16
 8007220:	f7f9 f9d0 	bl	80005c4 <__aeabi_ui2d>
 8007224:	2d09      	cmp	r5, #9
 8007226:	4682      	mov	sl, r0
 8007228:	468b      	mov	fp, r1
 800722a:	dd13      	ble.n	8007254 <_strtod_l+0x3dc>
 800722c:	4b7b      	ldr	r3, [pc, #492]	; (800741c <_strtod_l+0x5a4>)
 800722e:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8007232:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8007236:	f7f9 fa3f 	bl	80006b8 <__aeabi_dmul>
 800723a:	4682      	mov	sl, r0
 800723c:	4648      	mov	r0, r9
 800723e:	468b      	mov	fp, r1
 8007240:	f7f9 f9c0 	bl	80005c4 <__aeabi_ui2d>
 8007244:	4602      	mov	r2, r0
 8007246:	460b      	mov	r3, r1
 8007248:	4650      	mov	r0, sl
 800724a:	4659      	mov	r1, fp
 800724c:	f7f9 f87e 	bl	800034c <__adddf3>
 8007250:	4682      	mov	sl, r0
 8007252:	468b      	mov	fp, r1
 8007254:	2d0f      	cmp	r5, #15
 8007256:	dc38      	bgt.n	80072ca <_strtod_l+0x452>
 8007258:	9b06      	ldr	r3, [sp, #24]
 800725a:	2b00      	cmp	r3, #0
 800725c:	f43f ae50 	beq.w	8006f00 <_strtod_l+0x88>
 8007260:	dd24      	ble.n	80072ac <_strtod_l+0x434>
 8007262:	2b16      	cmp	r3, #22
 8007264:	dc0b      	bgt.n	800727e <_strtod_l+0x406>
 8007266:	496d      	ldr	r1, [pc, #436]	; (800741c <_strtod_l+0x5a4>)
 8007268:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800726c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007270:	4652      	mov	r2, sl
 8007272:	465b      	mov	r3, fp
 8007274:	f7f9 fa20 	bl	80006b8 <__aeabi_dmul>
 8007278:	4682      	mov	sl, r0
 800727a:	468b      	mov	fp, r1
 800727c:	e640      	b.n	8006f00 <_strtod_l+0x88>
 800727e:	9a06      	ldr	r2, [sp, #24]
 8007280:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 8007284:	4293      	cmp	r3, r2
 8007286:	db20      	blt.n	80072ca <_strtod_l+0x452>
 8007288:	4c64      	ldr	r4, [pc, #400]	; (800741c <_strtod_l+0x5a4>)
 800728a:	f1c5 050f 	rsb	r5, r5, #15
 800728e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8007292:	4652      	mov	r2, sl
 8007294:	465b      	mov	r3, fp
 8007296:	e9d1 0100 	ldrd	r0, r1, [r1]
 800729a:	f7f9 fa0d 	bl	80006b8 <__aeabi_dmul>
 800729e:	9b06      	ldr	r3, [sp, #24]
 80072a0:	1b5d      	subs	r5, r3, r5
 80072a2:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 80072a6:	e9d4 2300 	ldrd	r2, r3, [r4]
 80072aa:	e7e3      	b.n	8007274 <_strtod_l+0x3fc>
 80072ac:	9b06      	ldr	r3, [sp, #24]
 80072ae:	3316      	adds	r3, #22
 80072b0:	db0b      	blt.n	80072ca <_strtod_l+0x452>
 80072b2:	9b05      	ldr	r3, [sp, #20]
 80072b4:	1b9e      	subs	r6, r3, r6
 80072b6:	4b59      	ldr	r3, [pc, #356]	; (800741c <_strtod_l+0x5a4>)
 80072b8:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 80072bc:	e9d6 2300 	ldrd	r2, r3, [r6]
 80072c0:	4650      	mov	r0, sl
 80072c2:	4659      	mov	r1, fp
 80072c4:	f7f9 fb22 	bl	800090c <__aeabi_ddiv>
 80072c8:	e7d6      	b.n	8007278 <_strtod_l+0x400>
 80072ca:	9b06      	ldr	r3, [sp, #24]
 80072cc:	eba5 0808 	sub.w	r8, r5, r8
 80072d0:	4498      	add	r8, r3
 80072d2:	f1b8 0f00 	cmp.w	r8, #0
 80072d6:	dd74      	ble.n	80073c2 <_strtod_l+0x54a>
 80072d8:	f018 030f 	ands.w	r3, r8, #15
 80072dc:	d00a      	beq.n	80072f4 <_strtod_l+0x47c>
 80072de:	494f      	ldr	r1, [pc, #316]	; (800741c <_strtod_l+0x5a4>)
 80072e0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80072e4:	4652      	mov	r2, sl
 80072e6:	465b      	mov	r3, fp
 80072e8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80072ec:	f7f9 f9e4 	bl	80006b8 <__aeabi_dmul>
 80072f0:	4682      	mov	sl, r0
 80072f2:	468b      	mov	fp, r1
 80072f4:	f038 080f 	bics.w	r8, r8, #15
 80072f8:	d04f      	beq.n	800739a <_strtod_l+0x522>
 80072fa:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 80072fe:	dd22      	ble.n	8007346 <_strtod_l+0x4ce>
 8007300:	2500      	movs	r5, #0
 8007302:	462e      	mov	r6, r5
 8007304:	9507      	str	r5, [sp, #28]
 8007306:	9505      	str	r5, [sp, #20]
 8007308:	2322      	movs	r3, #34	; 0x22
 800730a:	f8df b118 	ldr.w	fp, [pc, #280]	; 8007424 <_strtod_l+0x5ac>
 800730e:	6023      	str	r3, [r4, #0]
 8007310:	f04f 0a00 	mov.w	sl, #0
 8007314:	9b07      	ldr	r3, [sp, #28]
 8007316:	2b00      	cmp	r3, #0
 8007318:	f43f adf2 	beq.w	8006f00 <_strtod_l+0x88>
 800731c:	9918      	ldr	r1, [sp, #96]	; 0x60
 800731e:	4620      	mov	r0, r4
 8007320:	f001 fe90 	bl	8009044 <_Bfree>
 8007324:	9905      	ldr	r1, [sp, #20]
 8007326:	4620      	mov	r0, r4
 8007328:	f001 fe8c 	bl	8009044 <_Bfree>
 800732c:	4631      	mov	r1, r6
 800732e:	4620      	mov	r0, r4
 8007330:	f001 fe88 	bl	8009044 <_Bfree>
 8007334:	9907      	ldr	r1, [sp, #28]
 8007336:	4620      	mov	r0, r4
 8007338:	f001 fe84 	bl	8009044 <_Bfree>
 800733c:	4629      	mov	r1, r5
 800733e:	4620      	mov	r0, r4
 8007340:	f001 fe80 	bl	8009044 <_Bfree>
 8007344:	e5dc      	b.n	8006f00 <_strtod_l+0x88>
 8007346:	4b36      	ldr	r3, [pc, #216]	; (8007420 <_strtod_l+0x5a8>)
 8007348:	9304      	str	r3, [sp, #16]
 800734a:	2300      	movs	r3, #0
 800734c:	ea4f 1828 	mov.w	r8, r8, asr #4
 8007350:	4650      	mov	r0, sl
 8007352:	4659      	mov	r1, fp
 8007354:	4699      	mov	r9, r3
 8007356:	f1b8 0f01 	cmp.w	r8, #1
 800735a:	dc21      	bgt.n	80073a0 <_strtod_l+0x528>
 800735c:	b10b      	cbz	r3, 8007362 <_strtod_l+0x4ea>
 800735e:	4682      	mov	sl, r0
 8007360:	468b      	mov	fp, r1
 8007362:	4b2f      	ldr	r3, [pc, #188]	; (8007420 <_strtod_l+0x5a8>)
 8007364:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8007368:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 800736c:	4652      	mov	r2, sl
 800736e:	465b      	mov	r3, fp
 8007370:	e9d9 0100 	ldrd	r0, r1, [r9]
 8007374:	f7f9 f9a0 	bl	80006b8 <__aeabi_dmul>
 8007378:	4b2a      	ldr	r3, [pc, #168]	; (8007424 <_strtod_l+0x5ac>)
 800737a:	460a      	mov	r2, r1
 800737c:	400b      	ands	r3, r1
 800737e:	492a      	ldr	r1, [pc, #168]	; (8007428 <_strtod_l+0x5b0>)
 8007380:	428b      	cmp	r3, r1
 8007382:	4682      	mov	sl, r0
 8007384:	d8bc      	bhi.n	8007300 <_strtod_l+0x488>
 8007386:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800738a:	428b      	cmp	r3, r1
 800738c:	bf86      	itte	hi
 800738e:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 800742c <_strtod_l+0x5b4>
 8007392:	f04f 3aff 	movhi.w	sl, #4294967295
 8007396:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 800739a:	2300      	movs	r3, #0
 800739c:	9304      	str	r3, [sp, #16]
 800739e:	e084      	b.n	80074aa <_strtod_l+0x632>
 80073a0:	f018 0f01 	tst.w	r8, #1
 80073a4:	d005      	beq.n	80073b2 <_strtod_l+0x53a>
 80073a6:	9b04      	ldr	r3, [sp, #16]
 80073a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073ac:	f7f9 f984 	bl	80006b8 <__aeabi_dmul>
 80073b0:	2301      	movs	r3, #1
 80073b2:	9a04      	ldr	r2, [sp, #16]
 80073b4:	3208      	adds	r2, #8
 80073b6:	f109 0901 	add.w	r9, r9, #1
 80073ba:	ea4f 0868 	mov.w	r8, r8, asr #1
 80073be:	9204      	str	r2, [sp, #16]
 80073c0:	e7c9      	b.n	8007356 <_strtod_l+0x4de>
 80073c2:	d0ea      	beq.n	800739a <_strtod_l+0x522>
 80073c4:	f1c8 0800 	rsb	r8, r8, #0
 80073c8:	f018 020f 	ands.w	r2, r8, #15
 80073cc:	d00a      	beq.n	80073e4 <_strtod_l+0x56c>
 80073ce:	4b13      	ldr	r3, [pc, #76]	; (800741c <_strtod_l+0x5a4>)
 80073d0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80073d4:	4650      	mov	r0, sl
 80073d6:	4659      	mov	r1, fp
 80073d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073dc:	f7f9 fa96 	bl	800090c <__aeabi_ddiv>
 80073e0:	4682      	mov	sl, r0
 80073e2:	468b      	mov	fp, r1
 80073e4:	ea5f 1828 	movs.w	r8, r8, asr #4
 80073e8:	d0d7      	beq.n	800739a <_strtod_l+0x522>
 80073ea:	f1b8 0f1f 	cmp.w	r8, #31
 80073ee:	dd1f      	ble.n	8007430 <_strtod_l+0x5b8>
 80073f0:	2500      	movs	r5, #0
 80073f2:	462e      	mov	r6, r5
 80073f4:	9507      	str	r5, [sp, #28]
 80073f6:	9505      	str	r5, [sp, #20]
 80073f8:	2322      	movs	r3, #34	; 0x22
 80073fa:	f04f 0a00 	mov.w	sl, #0
 80073fe:	f04f 0b00 	mov.w	fp, #0
 8007402:	6023      	str	r3, [r4, #0]
 8007404:	e786      	b.n	8007314 <_strtod_l+0x49c>
 8007406:	bf00      	nop
 8007408:	0800e9e5 	.word	0x0800e9e5
 800740c:	0800ea28 	.word	0x0800ea28
 8007410:	0800e9dd 	.word	0x0800e9dd
 8007414:	0800eb6c 	.word	0x0800eb6c
 8007418:	0800ee18 	.word	0x0800ee18
 800741c:	0800ecf8 	.word	0x0800ecf8
 8007420:	0800ecd0 	.word	0x0800ecd0
 8007424:	7ff00000 	.word	0x7ff00000
 8007428:	7ca00000 	.word	0x7ca00000
 800742c:	7fefffff 	.word	0x7fefffff
 8007430:	f018 0310 	ands.w	r3, r8, #16
 8007434:	bf18      	it	ne
 8007436:	236a      	movne	r3, #106	; 0x6a
 8007438:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 80077e8 <_strtod_l+0x970>
 800743c:	9304      	str	r3, [sp, #16]
 800743e:	4650      	mov	r0, sl
 8007440:	4659      	mov	r1, fp
 8007442:	2300      	movs	r3, #0
 8007444:	f018 0f01 	tst.w	r8, #1
 8007448:	d004      	beq.n	8007454 <_strtod_l+0x5dc>
 800744a:	e9d9 2300 	ldrd	r2, r3, [r9]
 800744e:	f7f9 f933 	bl	80006b8 <__aeabi_dmul>
 8007452:	2301      	movs	r3, #1
 8007454:	ea5f 0868 	movs.w	r8, r8, asr #1
 8007458:	f109 0908 	add.w	r9, r9, #8
 800745c:	d1f2      	bne.n	8007444 <_strtod_l+0x5cc>
 800745e:	b10b      	cbz	r3, 8007464 <_strtod_l+0x5ec>
 8007460:	4682      	mov	sl, r0
 8007462:	468b      	mov	fp, r1
 8007464:	9b04      	ldr	r3, [sp, #16]
 8007466:	b1c3      	cbz	r3, 800749a <_strtod_l+0x622>
 8007468:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800746c:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8007470:	2b00      	cmp	r3, #0
 8007472:	4659      	mov	r1, fp
 8007474:	dd11      	ble.n	800749a <_strtod_l+0x622>
 8007476:	2b1f      	cmp	r3, #31
 8007478:	f340 8124 	ble.w	80076c4 <_strtod_l+0x84c>
 800747c:	2b34      	cmp	r3, #52	; 0x34
 800747e:	bfde      	ittt	le
 8007480:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 8007484:	f04f 33ff 	movle.w	r3, #4294967295
 8007488:	fa03 f202 	lslle.w	r2, r3, r2
 800748c:	f04f 0a00 	mov.w	sl, #0
 8007490:	bfcc      	ite	gt
 8007492:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8007496:	ea02 0b01 	andle.w	fp, r2, r1
 800749a:	2200      	movs	r2, #0
 800749c:	2300      	movs	r3, #0
 800749e:	4650      	mov	r0, sl
 80074a0:	4659      	mov	r1, fp
 80074a2:	f7f9 fb71 	bl	8000b88 <__aeabi_dcmpeq>
 80074a6:	2800      	cmp	r0, #0
 80074a8:	d1a2      	bne.n	80073f0 <_strtod_l+0x578>
 80074aa:	9b07      	ldr	r3, [sp, #28]
 80074ac:	9300      	str	r3, [sp, #0]
 80074ae:	9908      	ldr	r1, [sp, #32]
 80074b0:	462b      	mov	r3, r5
 80074b2:	463a      	mov	r2, r7
 80074b4:	4620      	mov	r0, r4
 80074b6:	f001 fe2d 	bl	8009114 <__s2b>
 80074ba:	9007      	str	r0, [sp, #28]
 80074bc:	2800      	cmp	r0, #0
 80074be:	f43f af1f 	beq.w	8007300 <_strtod_l+0x488>
 80074c2:	9b05      	ldr	r3, [sp, #20]
 80074c4:	1b9e      	subs	r6, r3, r6
 80074c6:	9b06      	ldr	r3, [sp, #24]
 80074c8:	2b00      	cmp	r3, #0
 80074ca:	bfb4      	ite	lt
 80074cc:	4633      	movlt	r3, r6
 80074ce:	2300      	movge	r3, #0
 80074d0:	930c      	str	r3, [sp, #48]	; 0x30
 80074d2:	9b06      	ldr	r3, [sp, #24]
 80074d4:	2500      	movs	r5, #0
 80074d6:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80074da:	9312      	str	r3, [sp, #72]	; 0x48
 80074dc:	462e      	mov	r6, r5
 80074de:	9b07      	ldr	r3, [sp, #28]
 80074e0:	4620      	mov	r0, r4
 80074e2:	6859      	ldr	r1, [r3, #4]
 80074e4:	f001 fd6e 	bl	8008fc4 <_Balloc>
 80074e8:	9005      	str	r0, [sp, #20]
 80074ea:	2800      	cmp	r0, #0
 80074ec:	f43f af0c 	beq.w	8007308 <_strtod_l+0x490>
 80074f0:	9b07      	ldr	r3, [sp, #28]
 80074f2:	691a      	ldr	r2, [r3, #16]
 80074f4:	3202      	adds	r2, #2
 80074f6:	f103 010c 	add.w	r1, r3, #12
 80074fa:	0092      	lsls	r2, r2, #2
 80074fc:	300c      	adds	r0, #12
 80074fe:	f001 fd53 	bl	8008fa8 <memcpy>
 8007502:	ec4b ab10 	vmov	d0, sl, fp
 8007506:	aa1a      	add	r2, sp, #104	; 0x68
 8007508:	a919      	add	r1, sp, #100	; 0x64
 800750a:	4620      	mov	r0, r4
 800750c:	f002 f948 	bl	80097a0 <__d2b>
 8007510:	ec4b ab18 	vmov	d8, sl, fp
 8007514:	9018      	str	r0, [sp, #96]	; 0x60
 8007516:	2800      	cmp	r0, #0
 8007518:	f43f aef6 	beq.w	8007308 <_strtod_l+0x490>
 800751c:	2101      	movs	r1, #1
 800751e:	4620      	mov	r0, r4
 8007520:	f001 fe92 	bl	8009248 <__i2b>
 8007524:	4606      	mov	r6, r0
 8007526:	2800      	cmp	r0, #0
 8007528:	f43f aeee 	beq.w	8007308 <_strtod_l+0x490>
 800752c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800752e:	9904      	ldr	r1, [sp, #16]
 8007530:	2b00      	cmp	r3, #0
 8007532:	bfab      	itete	ge
 8007534:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 8007536:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 8007538:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 800753a:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 800753e:	bfac      	ite	ge
 8007540:	eb03 0902 	addge.w	r9, r3, r2
 8007544:	1ad7      	sublt	r7, r2, r3
 8007546:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8007548:	eba3 0801 	sub.w	r8, r3, r1
 800754c:	4490      	add	r8, r2
 800754e:	4ba1      	ldr	r3, [pc, #644]	; (80077d4 <_strtod_l+0x95c>)
 8007550:	f108 38ff 	add.w	r8, r8, #4294967295
 8007554:	4598      	cmp	r8, r3
 8007556:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800755a:	f280 80c7 	bge.w	80076ec <_strtod_l+0x874>
 800755e:	eba3 0308 	sub.w	r3, r3, r8
 8007562:	2b1f      	cmp	r3, #31
 8007564:	eba2 0203 	sub.w	r2, r2, r3
 8007568:	f04f 0101 	mov.w	r1, #1
 800756c:	f300 80b1 	bgt.w	80076d2 <_strtod_l+0x85a>
 8007570:	fa01 f303 	lsl.w	r3, r1, r3
 8007574:	930d      	str	r3, [sp, #52]	; 0x34
 8007576:	2300      	movs	r3, #0
 8007578:	9308      	str	r3, [sp, #32]
 800757a:	eb09 0802 	add.w	r8, r9, r2
 800757e:	9b04      	ldr	r3, [sp, #16]
 8007580:	45c1      	cmp	r9, r8
 8007582:	4417      	add	r7, r2
 8007584:	441f      	add	r7, r3
 8007586:	464b      	mov	r3, r9
 8007588:	bfa8      	it	ge
 800758a:	4643      	movge	r3, r8
 800758c:	42bb      	cmp	r3, r7
 800758e:	bfa8      	it	ge
 8007590:	463b      	movge	r3, r7
 8007592:	2b00      	cmp	r3, #0
 8007594:	bfc2      	ittt	gt
 8007596:	eba8 0803 	subgt.w	r8, r8, r3
 800759a:	1aff      	subgt	r7, r7, r3
 800759c:	eba9 0903 	subgt.w	r9, r9, r3
 80075a0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80075a2:	2b00      	cmp	r3, #0
 80075a4:	dd17      	ble.n	80075d6 <_strtod_l+0x75e>
 80075a6:	4631      	mov	r1, r6
 80075a8:	461a      	mov	r2, r3
 80075aa:	4620      	mov	r0, r4
 80075ac:	f001 ff0c 	bl	80093c8 <__pow5mult>
 80075b0:	4606      	mov	r6, r0
 80075b2:	2800      	cmp	r0, #0
 80075b4:	f43f aea8 	beq.w	8007308 <_strtod_l+0x490>
 80075b8:	4601      	mov	r1, r0
 80075ba:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80075bc:	4620      	mov	r0, r4
 80075be:	f001 fe59 	bl	8009274 <__multiply>
 80075c2:	900b      	str	r0, [sp, #44]	; 0x2c
 80075c4:	2800      	cmp	r0, #0
 80075c6:	f43f ae9f 	beq.w	8007308 <_strtod_l+0x490>
 80075ca:	9918      	ldr	r1, [sp, #96]	; 0x60
 80075cc:	4620      	mov	r0, r4
 80075ce:	f001 fd39 	bl	8009044 <_Bfree>
 80075d2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80075d4:	9318      	str	r3, [sp, #96]	; 0x60
 80075d6:	f1b8 0f00 	cmp.w	r8, #0
 80075da:	f300 808c 	bgt.w	80076f6 <_strtod_l+0x87e>
 80075de:	9b06      	ldr	r3, [sp, #24]
 80075e0:	2b00      	cmp	r3, #0
 80075e2:	dd08      	ble.n	80075f6 <_strtod_l+0x77e>
 80075e4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80075e6:	9905      	ldr	r1, [sp, #20]
 80075e8:	4620      	mov	r0, r4
 80075ea:	f001 feed 	bl	80093c8 <__pow5mult>
 80075ee:	9005      	str	r0, [sp, #20]
 80075f0:	2800      	cmp	r0, #0
 80075f2:	f43f ae89 	beq.w	8007308 <_strtod_l+0x490>
 80075f6:	2f00      	cmp	r7, #0
 80075f8:	dd08      	ble.n	800760c <_strtod_l+0x794>
 80075fa:	9905      	ldr	r1, [sp, #20]
 80075fc:	463a      	mov	r2, r7
 80075fe:	4620      	mov	r0, r4
 8007600:	f001 ff3c 	bl	800947c <__lshift>
 8007604:	9005      	str	r0, [sp, #20]
 8007606:	2800      	cmp	r0, #0
 8007608:	f43f ae7e 	beq.w	8007308 <_strtod_l+0x490>
 800760c:	f1b9 0f00 	cmp.w	r9, #0
 8007610:	dd08      	ble.n	8007624 <_strtod_l+0x7ac>
 8007612:	4631      	mov	r1, r6
 8007614:	464a      	mov	r2, r9
 8007616:	4620      	mov	r0, r4
 8007618:	f001 ff30 	bl	800947c <__lshift>
 800761c:	4606      	mov	r6, r0
 800761e:	2800      	cmp	r0, #0
 8007620:	f43f ae72 	beq.w	8007308 <_strtod_l+0x490>
 8007624:	9a05      	ldr	r2, [sp, #20]
 8007626:	9918      	ldr	r1, [sp, #96]	; 0x60
 8007628:	4620      	mov	r0, r4
 800762a:	f001 ffb3 	bl	8009594 <__mdiff>
 800762e:	4605      	mov	r5, r0
 8007630:	2800      	cmp	r0, #0
 8007632:	f43f ae69 	beq.w	8007308 <_strtod_l+0x490>
 8007636:	68c3      	ldr	r3, [r0, #12]
 8007638:	930b      	str	r3, [sp, #44]	; 0x2c
 800763a:	2300      	movs	r3, #0
 800763c:	60c3      	str	r3, [r0, #12]
 800763e:	4631      	mov	r1, r6
 8007640:	f001 ff8c 	bl	800955c <__mcmp>
 8007644:	2800      	cmp	r0, #0
 8007646:	da60      	bge.n	800770a <_strtod_l+0x892>
 8007648:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800764a:	ea53 030a 	orrs.w	r3, r3, sl
 800764e:	f040 8082 	bne.w	8007756 <_strtod_l+0x8de>
 8007652:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007656:	2b00      	cmp	r3, #0
 8007658:	d17d      	bne.n	8007756 <_strtod_l+0x8de>
 800765a:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800765e:	0d1b      	lsrs	r3, r3, #20
 8007660:	051b      	lsls	r3, r3, #20
 8007662:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8007666:	d976      	bls.n	8007756 <_strtod_l+0x8de>
 8007668:	696b      	ldr	r3, [r5, #20]
 800766a:	b913      	cbnz	r3, 8007672 <_strtod_l+0x7fa>
 800766c:	692b      	ldr	r3, [r5, #16]
 800766e:	2b01      	cmp	r3, #1
 8007670:	dd71      	ble.n	8007756 <_strtod_l+0x8de>
 8007672:	4629      	mov	r1, r5
 8007674:	2201      	movs	r2, #1
 8007676:	4620      	mov	r0, r4
 8007678:	f001 ff00 	bl	800947c <__lshift>
 800767c:	4631      	mov	r1, r6
 800767e:	4605      	mov	r5, r0
 8007680:	f001 ff6c 	bl	800955c <__mcmp>
 8007684:	2800      	cmp	r0, #0
 8007686:	dd66      	ble.n	8007756 <_strtod_l+0x8de>
 8007688:	9904      	ldr	r1, [sp, #16]
 800768a:	4a53      	ldr	r2, [pc, #332]	; (80077d8 <_strtod_l+0x960>)
 800768c:	465b      	mov	r3, fp
 800768e:	2900      	cmp	r1, #0
 8007690:	f000 8081 	beq.w	8007796 <_strtod_l+0x91e>
 8007694:	ea02 010b 	and.w	r1, r2, fp
 8007698:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800769c:	dc7b      	bgt.n	8007796 <_strtod_l+0x91e>
 800769e:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 80076a2:	f77f aea9 	ble.w	80073f8 <_strtod_l+0x580>
 80076a6:	4b4d      	ldr	r3, [pc, #308]	; (80077dc <_strtod_l+0x964>)
 80076a8:	4650      	mov	r0, sl
 80076aa:	4659      	mov	r1, fp
 80076ac:	2200      	movs	r2, #0
 80076ae:	f7f9 f803 	bl	80006b8 <__aeabi_dmul>
 80076b2:	460b      	mov	r3, r1
 80076b4:	4303      	orrs	r3, r0
 80076b6:	bf08      	it	eq
 80076b8:	2322      	moveq	r3, #34	; 0x22
 80076ba:	4682      	mov	sl, r0
 80076bc:	468b      	mov	fp, r1
 80076be:	bf08      	it	eq
 80076c0:	6023      	streq	r3, [r4, #0]
 80076c2:	e62b      	b.n	800731c <_strtod_l+0x4a4>
 80076c4:	f04f 32ff 	mov.w	r2, #4294967295
 80076c8:	fa02 f303 	lsl.w	r3, r2, r3
 80076cc:	ea03 0a0a 	and.w	sl, r3, sl
 80076d0:	e6e3      	b.n	800749a <_strtod_l+0x622>
 80076d2:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 80076d6:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 80076da:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 80076de:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 80076e2:	fa01 f308 	lsl.w	r3, r1, r8
 80076e6:	9308      	str	r3, [sp, #32]
 80076e8:	910d      	str	r1, [sp, #52]	; 0x34
 80076ea:	e746      	b.n	800757a <_strtod_l+0x702>
 80076ec:	2300      	movs	r3, #0
 80076ee:	9308      	str	r3, [sp, #32]
 80076f0:	2301      	movs	r3, #1
 80076f2:	930d      	str	r3, [sp, #52]	; 0x34
 80076f4:	e741      	b.n	800757a <_strtod_l+0x702>
 80076f6:	9918      	ldr	r1, [sp, #96]	; 0x60
 80076f8:	4642      	mov	r2, r8
 80076fa:	4620      	mov	r0, r4
 80076fc:	f001 febe 	bl	800947c <__lshift>
 8007700:	9018      	str	r0, [sp, #96]	; 0x60
 8007702:	2800      	cmp	r0, #0
 8007704:	f47f af6b 	bne.w	80075de <_strtod_l+0x766>
 8007708:	e5fe      	b.n	8007308 <_strtod_l+0x490>
 800770a:	465f      	mov	r7, fp
 800770c:	d16e      	bne.n	80077ec <_strtod_l+0x974>
 800770e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007710:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007714:	b342      	cbz	r2, 8007768 <_strtod_l+0x8f0>
 8007716:	4a32      	ldr	r2, [pc, #200]	; (80077e0 <_strtod_l+0x968>)
 8007718:	4293      	cmp	r3, r2
 800771a:	d128      	bne.n	800776e <_strtod_l+0x8f6>
 800771c:	9b04      	ldr	r3, [sp, #16]
 800771e:	4651      	mov	r1, sl
 8007720:	b1eb      	cbz	r3, 800775e <_strtod_l+0x8e6>
 8007722:	4b2d      	ldr	r3, [pc, #180]	; (80077d8 <_strtod_l+0x960>)
 8007724:	403b      	ands	r3, r7
 8007726:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800772a:	f04f 32ff 	mov.w	r2, #4294967295
 800772e:	d819      	bhi.n	8007764 <_strtod_l+0x8ec>
 8007730:	0d1b      	lsrs	r3, r3, #20
 8007732:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8007736:	fa02 f303 	lsl.w	r3, r2, r3
 800773a:	4299      	cmp	r1, r3
 800773c:	d117      	bne.n	800776e <_strtod_l+0x8f6>
 800773e:	4b29      	ldr	r3, [pc, #164]	; (80077e4 <_strtod_l+0x96c>)
 8007740:	429f      	cmp	r7, r3
 8007742:	d102      	bne.n	800774a <_strtod_l+0x8d2>
 8007744:	3101      	adds	r1, #1
 8007746:	f43f addf 	beq.w	8007308 <_strtod_l+0x490>
 800774a:	4b23      	ldr	r3, [pc, #140]	; (80077d8 <_strtod_l+0x960>)
 800774c:	403b      	ands	r3, r7
 800774e:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 8007752:	f04f 0a00 	mov.w	sl, #0
 8007756:	9b04      	ldr	r3, [sp, #16]
 8007758:	2b00      	cmp	r3, #0
 800775a:	d1a4      	bne.n	80076a6 <_strtod_l+0x82e>
 800775c:	e5de      	b.n	800731c <_strtod_l+0x4a4>
 800775e:	f04f 33ff 	mov.w	r3, #4294967295
 8007762:	e7ea      	b.n	800773a <_strtod_l+0x8c2>
 8007764:	4613      	mov	r3, r2
 8007766:	e7e8      	b.n	800773a <_strtod_l+0x8c2>
 8007768:	ea53 030a 	orrs.w	r3, r3, sl
 800776c:	d08c      	beq.n	8007688 <_strtod_l+0x810>
 800776e:	9b08      	ldr	r3, [sp, #32]
 8007770:	b1db      	cbz	r3, 80077aa <_strtod_l+0x932>
 8007772:	423b      	tst	r3, r7
 8007774:	d0ef      	beq.n	8007756 <_strtod_l+0x8de>
 8007776:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007778:	9a04      	ldr	r2, [sp, #16]
 800777a:	4650      	mov	r0, sl
 800777c:	4659      	mov	r1, fp
 800777e:	b1c3      	cbz	r3, 80077b2 <_strtod_l+0x93a>
 8007780:	f7ff fb5e 	bl	8006e40 <sulp>
 8007784:	4602      	mov	r2, r0
 8007786:	460b      	mov	r3, r1
 8007788:	ec51 0b18 	vmov	r0, r1, d8
 800778c:	f7f8 fdde 	bl	800034c <__adddf3>
 8007790:	4682      	mov	sl, r0
 8007792:	468b      	mov	fp, r1
 8007794:	e7df      	b.n	8007756 <_strtod_l+0x8de>
 8007796:	4013      	ands	r3, r2
 8007798:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800779c:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 80077a0:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 80077a4:	f04f 3aff 	mov.w	sl, #4294967295
 80077a8:	e7d5      	b.n	8007756 <_strtod_l+0x8de>
 80077aa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80077ac:	ea13 0f0a 	tst.w	r3, sl
 80077b0:	e7e0      	b.n	8007774 <_strtod_l+0x8fc>
 80077b2:	f7ff fb45 	bl	8006e40 <sulp>
 80077b6:	4602      	mov	r2, r0
 80077b8:	460b      	mov	r3, r1
 80077ba:	ec51 0b18 	vmov	r0, r1, d8
 80077be:	f7f8 fdc3 	bl	8000348 <__aeabi_dsub>
 80077c2:	2200      	movs	r2, #0
 80077c4:	2300      	movs	r3, #0
 80077c6:	4682      	mov	sl, r0
 80077c8:	468b      	mov	fp, r1
 80077ca:	f7f9 f9dd 	bl	8000b88 <__aeabi_dcmpeq>
 80077ce:	2800      	cmp	r0, #0
 80077d0:	d0c1      	beq.n	8007756 <_strtod_l+0x8de>
 80077d2:	e611      	b.n	80073f8 <_strtod_l+0x580>
 80077d4:	fffffc02 	.word	0xfffffc02
 80077d8:	7ff00000 	.word	0x7ff00000
 80077dc:	39500000 	.word	0x39500000
 80077e0:	000fffff 	.word	0x000fffff
 80077e4:	7fefffff 	.word	0x7fefffff
 80077e8:	0800ea40 	.word	0x0800ea40
 80077ec:	4631      	mov	r1, r6
 80077ee:	4628      	mov	r0, r5
 80077f0:	f002 f832 	bl	8009858 <__ratio>
 80077f4:	ec59 8b10 	vmov	r8, r9, d0
 80077f8:	ee10 0a10 	vmov	r0, s0
 80077fc:	2200      	movs	r2, #0
 80077fe:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8007802:	4649      	mov	r1, r9
 8007804:	f7f9 f9d4 	bl	8000bb0 <__aeabi_dcmple>
 8007808:	2800      	cmp	r0, #0
 800780a:	d07a      	beq.n	8007902 <_strtod_l+0xa8a>
 800780c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800780e:	2b00      	cmp	r3, #0
 8007810:	d04a      	beq.n	80078a8 <_strtod_l+0xa30>
 8007812:	4b95      	ldr	r3, [pc, #596]	; (8007a68 <_strtod_l+0xbf0>)
 8007814:	2200      	movs	r2, #0
 8007816:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800781a:	f8df 924c 	ldr.w	r9, [pc, #588]	; 8007a68 <_strtod_l+0xbf0>
 800781e:	f04f 0800 	mov.w	r8, #0
 8007822:	4b92      	ldr	r3, [pc, #584]	; (8007a6c <_strtod_l+0xbf4>)
 8007824:	403b      	ands	r3, r7
 8007826:	930d      	str	r3, [sp, #52]	; 0x34
 8007828:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800782a:	4b91      	ldr	r3, [pc, #580]	; (8007a70 <_strtod_l+0xbf8>)
 800782c:	429a      	cmp	r2, r3
 800782e:	f040 80b0 	bne.w	8007992 <_strtod_l+0xb1a>
 8007832:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8007836:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 800783a:	ec4b ab10 	vmov	d0, sl, fp
 800783e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8007842:	f001 ff31 	bl	80096a8 <__ulp>
 8007846:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800784a:	ec53 2b10 	vmov	r2, r3, d0
 800784e:	f7f8 ff33 	bl	80006b8 <__aeabi_dmul>
 8007852:	4652      	mov	r2, sl
 8007854:	465b      	mov	r3, fp
 8007856:	f7f8 fd79 	bl	800034c <__adddf3>
 800785a:	460b      	mov	r3, r1
 800785c:	4983      	ldr	r1, [pc, #524]	; (8007a6c <_strtod_l+0xbf4>)
 800785e:	4a85      	ldr	r2, [pc, #532]	; (8007a74 <_strtod_l+0xbfc>)
 8007860:	4019      	ands	r1, r3
 8007862:	4291      	cmp	r1, r2
 8007864:	4682      	mov	sl, r0
 8007866:	d960      	bls.n	800792a <_strtod_l+0xab2>
 8007868:	ee18 3a90 	vmov	r3, s17
 800786c:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8007870:	4293      	cmp	r3, r2
 8007872:	d104      	bne.n	800787e <_strtod_l+0xa06>
 8007874:	ee18 3a10 	vmov	r3, s16
 8007878:	3301      	adds	r3, #1
 800787a:	f43f ad45 	beq.w	8007308 <_strtod_l+0x490>
 800787e:	f8df b200 	ldr.w	fp, [pc, #512]	; 8007a80 <_strtod_l+0xc08>
 8007882:	f04f 3aff 	mov.w	sl, #4294967295
 8007886:	9918      	ldr	r1, [sp, #96]	; 0x60
 8007888:	4620      	mov	r0, r4
 800788a:	f001 fbdb 	bl	8009044 <_Bfree>
 800788e:	9905      	ldr	r1, [sp, #20]
 8007890:	4620      	mov	r0, r4
 8007892:	f001 fbd7 	bl	8009044 <_Bfree>
 8007896:	4631      	mov	r1, r6
 8007898:	4620      	mov	r0, r4
 800789a:	f001 fbd3 	bl	8009044 <_Bfree>
 800789e:	4629      	mov	r1, r5
 80078a0:	4620      	mov	r0, r4
 80078a2:	f001 fbcf 	bl	8009044 <_Bfree>
 80078a6:	e61a      	b.n	80074de <_strtod_l+0x666>
 80078a8:	f1ba 0f00 	cmp.w	sl, #0
 80078ac:	d11b      	bne.n	80078e6 <_strtod_l+0xa6e>
 80078ae:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80078b2:	b9f3      	cbnz	r3, 80078f2 <_strtod_l+0xa7a>
 80078b4:	4b6c      	ldr	r3, [pc, #432]	; (8007a68 <_strtod_l+0xbf0>)
 80078b6:	2200      	movs	r2, #0
 80078b8:	4640      	mov	r0, r8
 80078ba:	4649      	mov	r1, r9
 80078bc:	f7f9 f96e 	bl	8000b9c <__aeabi_dcmplt>
 80078c0:	b9d0      	cbnz	r0, 80078f8 <_strtod_l+0xa80>
 80078c2:	4640      	mov	r0, r8
 80078c4:	4649      	mov	r1, r9
 80078c6:	4b6c      	ldr	r3, [pc, #432]	; (8007a78 <_strtod_l+0xc00>)
 80078c8:	2200      	movs	r2, #0
 80078ca:	f7f8 fef5 	bl	80006b8 <__aeabi_dmul>
 80078ce:	4680      	mov	r8, r0
 80078d0:	4689      	mov	r9, r1
 80078d2:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 80078d6:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 80078da:	9315      	str	r3, [sp, #84]	; 0x54
 80078dc:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 80078e0:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80078e4:	e79d      	b.n	8007822 <_strtod_l+0x9aa>
 80078e6:	f1ba 0f01 	cmp.w	sl, #1
 80078ea:	d102      	bne.n	80078f2 <_strtod_l+0xa7a>
 80078ec:	2f00      	cmp	r7, #0
 80078ee:	f43f ad83 	beq.w	80073f8 <_strtod_l+0x580>
 80078f2:	4b62      	ldr	r3, [pc, #392]	; (8007a7c <_strtod_l+0xc04>)
 80078f4:	2200      	movs	r2, #0
 80078f6:	e78e      	b.n	8007816 <_strtod_l+0x99e>
 80078f8:	f8df 917c 	ldr.w	r9, [pc, #380]	; 8007a78 <_strtod_l+0xc00>
 80078fc:	f04f 0800 	mov.w	r8, #0
 8007900:	e7e7      	b.n	80078d2 <_strtod_l+0xa5a>
 8007902:	4b5d      	ldr	r3, [pc, #372]	; (8007a78 <_strtod_l+0xc00>)
 8007904:	4640      	mov	r0, r8
 8007906:	4649      	mov	r1, r9
 8007908:	2200      	movs	r2, #0
 800790a:	f7f8 fed5 	bl	80006b8 <__aeabi_dmul>
 800790e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007910:	4680      	mov	r8, r0
 8007912:	4689      	mov	r9, r1
 8007914:	b933      	cbnz	r3, 8007924 <_strtod_l+0xaac>
 8007916:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800791a:	900e      	str	r0, [sp, #56]	; 0x38
 800791c:	930f      	str	r3, [sp, #60]	; 0x3c
 800791e:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8007922:	e7dd      	b.n	80078e0 <_strtod_l+0xa68>
 8007924:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 8007928:	e7f9      	b.n	800791e <_strtod_l+0xaa6>
 800792a:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 800792e:	9b04      	ldr	r3, [sp, #16]
 8007930:	2b00      	cmp	r3, #0
 8007932:	d1a8      	bne.n	8007886 <_strtod_l+0xa0e>
 8007934:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8007938:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800793a:	0d1b      	lsrs	r3, r3, #20
 800793c:	051b      	lsls	r3, r3, #20
 800793e:	429a      	cmp	r2, r3
 8007940:	d1a1      	bne.n	8007886 <_strtod_l+0xa0e>
 8007942:	4640      	mov	r0, r8
 8007944:	4649      	mov	r1, r9
 8007946:	f7f9 fa17 	bl	8000d78 <__aeabi_d2lz>
 800794a:	f7f8 fe87 	bl	800065c <__aeabi_l2d>
 800794e:	4602      	mov	r2, r0
 8007950:	460b      	mov	r3, r1
 8007952:	4640      	mov	r0, r8
 8007954:	4649      	mov	r1, r9
 8007956:	f7f8 fcf7 	bl	8000348 <__aeabi_dsub>
 800795a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800795c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007960:	ea43 030a 	orr.w	r3, r3, sl
 8007964:	4313      	orrs	r3, r2
 8007966:	4680      	mov	r8, r0
 8007968:	4689      	mov	r9, r1
 800796a:	d055      	beq.n	8007a18 <_strtod_l+0xba0>
 800796c:	a336      	add	r3, pc, #216	; (adr r3, 8007a48 <_strtod_l+0xbd0>)
 800796e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007972:	f7f9 f913 	bl	8000b9c <__aeabi_dcmplt>
 8007976:	2800      	cmp	r0, #0
 8007978:	f47f acd0 	bne.w	800731c <_strtod_l+0x4a4>
 800797c:	a334      	add	r3, pc, #208	; (adr r3, 8007a50 <_strtod_l+0xbd8>)
 800797e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007982:	4640      	mov	r0, r8
 8007984:	4649      	mov	r1, r9
 8007986:	f7f9 f927 	bl	8000bd8 <__aeabi_dcmpgt>
 800798a:	2800      	cmp	r0, #0
 800798c:	f43f af7b 	beq.w	8007886 <_strtod_l+0xa0e>
 8007990:	e4c4      	b.n	800731c <_strtod_l+0x4a4>
 8007992:	9b04      	ldr	r3, [sp, #16]
 8007994:	b333      	cbz	r3, 80079e4 <_strtod_l+0xb6c>
 8007996:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007998:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800799c:	d822      	bhi.n	80079e4 <_strtod_l+0xb6c>
 800799e:	a32e      	add	r3, pc, #184	; (adr r3, 8007a58 <_strtod_l+0xbe0>)
 80079a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079a4:	4640      	mov	r0, r8
 80079a6:	4649      	mov	r1, r9
 80079a8:	f7f9 f902 	bl	8000bb0 <__aeabi_dcmple>
 80079ac:	b1a0      	cbz	r0, 80079d8 <_strtod_l+0xb60>
 80079ae:	4649      	mov	r1, r9
 80079b0:	4640      	mov	r0, r8
 80079b2:	f7f9 f959 	bl	8000c68 <__aeabi_d2uiz>
 80079b6:	2801      	cmp	r0, #1
 80079b8:	bf38      	it	cc
 80079ba:	2001      	movcc	r0, #1
 80079bc:	f7f8 fe02 	bl	80005c4 <__aeabi_ui2d>
 80079c0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80079c2:	4680      	mov	r8, r0
 80079c4:	4689      	mov	r9, r1
 80079c6:	bb23      	cbnz	r3, 8007a12 <_strtod_l+0xb9a>
 80079c8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80079cc:	9010      	str	r0, [sp, #64]	; 0x40
 80079ce:	9311      	str	r3, [sp, #68]	; 0x44
 80079d0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80079d4:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80079d8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80079da:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80079dc:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 80079e0:	1a9b      	subs	r3, r3, r2
 80079e2:	9309      	str	r3, [sp, #36]	; 0x24
 80079e4:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80079e8:	eeb0 0a48 	vmov.f32	s0, s16
 80079ec:	eef0 0a68 	vmov.f32	s1, s17
 80079f0:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80079f4:	f001 fe58 	bl	80096a8 <__ulp>
 80079f8:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80079fc:	ec53 2b10 	vmov	r2, r3, d0
 8007a00:	f7f8 fe5a 	bl	80006b8 <__aeabi_dmul>
 8007a04:	ec53 2b18 	vmov	r2, r3, d8
 8007a08:	f7f8 fca0 	bl	800034c <__adddf3>
 8007a0c:	4682      	mov	sl, r0
 8007a0e:	468b      	mov	fp, r1
 8007a10:	e78d      	b.n	800792e <_strtod_l+0xab6>
 8007a12:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 8007a16:	e7db      	b.n	80079d0 <_strtod_l+0xb58>
 8007a18:	a311      	add	r3, pc, #68	; (adr r3, 8007a60 <_strtod_l+0xbe8>)
 8007a1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a1e:	f7f9 f8bd 	bl	8000b9c <__aeabi_dcmplt>
 8007a22:	e7b2      	b.n	800798a <_strtod_l+0xb12>
 8007a24:	2300      	movs	r3, #0
 8007a26:	930a      	str	r3, [sp, #40]	; 0x28
 8007a28:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8007a2a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007a2c:	6013      	str	r3, [r2, #0]
 8007a2e:	f7ff ba6b 	b.w	8006f08 <_strtod_l+0x90>
 8007a32:	2a65      	cmp	r2, #101	; 0x65
 8007a34:	f43f ab5f 	beq.w	80070f6 <_strtod_l+0x27e>
 8007a38:	2a45      	cmp	r2, #69	; 0x45
 8007a3a:	f43f ab5c 	beq.w	80070f6 <_strtod_l+0x27e>
 8007a3e:	2301      	movs	r3, #1
 8007a40:	f7ff bb94 	b.w	800716c <_strtod_l+0x2f4>
 8007a44:	f3af 8000 	nop.w
 8007a48:	94a03595 	.word	0x94a03595
 8007a4c:	3fdfffff 	.word	0x3fdfffff
 8007a50:	35afe535 	.word	0x35afe535
 8007a54:	3fe00000 	.word	0x3fe00000
 8007a58:	ffc00000 	.word	0xffc00000
 8007a5c:	41dfffff 	.word	0x41dfffff
 8007a60:	94a03595 	.word	0x94a03595
 8007a64:	3fcfffff 	.word	0x3fcfffff
 8007a68:	3ff00000 	.word	0x3ff00000
 8007a6c:	7ff00000 	.word	0x7ff00000
 8007a70:	7fe00000 	.word	0x7fe00000
 8007a74:	7c9fffff 	.word	0x7c9fffff
 8007a78:	3fe00000 	.word	0x3fe00000
 8007a7c:	bff00000 	.word	0xbff00000
 8007a80:	7fefffff 	.word	0x7fefffff

08007a84 <_strtod_r>:
 8007a84:	4b01      	ldr	r3, [pc, #4]	; (8007a8c <_strtod_r+0x8>)
 8007a86:	f7ff b9f7 	b.w	8006e78 <_strtod_l>
 8007a8a:	bf00      	nop
 8007a8c:	2000008c 	.word	0x2000008c

08007a90 <_strtol_l.constprop.0>:
 8007a90:	2b01      	cmp	r3, #1
 8007a92:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007a96:	d001      	beq.n	8007a9c <_strtol_l.constprop.0+0xc>
 8007a98:	2b24      	cmp	r3, #36	; 0x24
 8007a9a:	d906      	bls.n	8007aaa <_strtol_l.constprop.0+0x1a>
 8007a9c:	f7fe fafe 	bl	800609c <__errno>
 8007aa0:	2316      	movs	r3, #22
 8007aa2:	6003      	str	r3, [r0, #0]
 8007aa4:	2000      	movs	r0, #0
 8007aa6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007aaa:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8007b90 <_strtol_l.constprop.0+0x100>
 8007aae:	460d      	mov	r5, r1
 8007ab0:	462e      	mov	r6, r5
 8007ab2:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007ab6:	f814 700c 	ldrb.w	r7, [r4, ip]
 8007aba:	f017 0708 	ands.w	r7, r7, #8
 8007abe:	d1f7      	bne.n	8007ab0 <_strtol_l.constprop.0+0x20>
 8007ac0:	2c2d      	cmp	r4, #45	; 0x2d
 8007ac2:	d132      	bne.n	8007b2a <_strtol_l.constprop.0+0x9a>
 8007ac4:	782c      	ldrb	r4, [r5, #0]
 8007ac6:	2701      	movs	r7, #1
 8007ac8:	1cb5      	adds	r5, r6, #2
 8007aca:	2b00      	cmp	r3, #0
 8007acc:	d05b      	beq.n	8007b86 <_strtol_l.constprop.0+0xf6>
 8007ace:	2b10      	cmp	r3, #16
 8007ad0:	d109      	bne.n	8007ae6 <_strtol_l.constprop.0+0x56>
 8007ad2:	2c30      	cmp	r4, #48	; 0x30
 8007ad4:	d107      	bne.n	8007ae6 <_strtol_l.constprop.0+0x56>
 8007ad6:	782c      	ldrb	r4, [r5, #0]
 8007ad8:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8007adc:	2c58      	cmp	r4, #88	; 0x58
 8007ade:	d14d      	bne.n	8007b7c <_strtol_l.constprop.0+0xec>
 8007ae0:	786c      	ldrb	r4, [r5, #1]
 8007ae2:	2310      	movs	r3, #16
 8007ae4:	3502      	adds	r5, #2
 8007ae6:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8007aea:	f108 38ff 	add.w	r8, r8, #4294967295
 8007aee:	f04f 0c00 	mov.w	ip, #0
 8007af2:	fbb8 f9f3 	udiv	r9, r8, r3
 8007af6:	4666      	mov	r6, ip
 8007af8:	fb03 8a19 	mls	sl, r3, r9, r8
 8007afc:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8007b00:	f1be 0f09 	cmp.w	lr, #9
 8007b04:	d816      	bhi.n	8007b34 <_strtol_l.constprop.0+0xa4>
 8007b06:	4674      	mov	r4, lr
 8007b08:	42a3      	cmp	r3, r4
 8007b0a:	dd24      	ble.n	8007b56 <_strtol_l.constprop.0+0xc6>
 8007b0c:	f1bc 0f00 	cmp.w	ip, #0
 8007b10:	db1e      	blt.n	8007b50 <_strtol_l.constprop.0+0xc0>
 8007b12:	45b1      	cmp	r9, r6
 8007b14:	d31c      	bcc.n	8007b50 <_strtol_l.constprop.0+0xc0>
 8007b16:	d101      	bne.n	8007b1c <_strtol_l.constprop.0+0x8c>
 8007b18:	45a2      	cmp	sl, r4
 8007b1a:	db19      	blt.n	8007b50 <_strtol_l.constprop.0+0xc0>
 8007b1c:	fb06 4603 	mla	r6, r6, r3, r4
 8007b20:	f04f 0c01 	mov.w	ip, #1
 8007b24:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007b28:	e7e8      	b.n	8007afc <_strtol_l.constprop.0+0x6c>
 8007b2a:	2c2b      	cmp	r4, #43	; 0x2b
 8007b2c:	bf04      	itt	eq
 8007b2e:	782c      	ldrbeq	r4, [r5, #0]
 8007b30:	1cb5      	addeq	r5, r6, #2
 8007b32:	e7ca      	b.n	8007aca <_strtol_l.constprop.0+0x3a>
 8007b34:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 8007b38:	f1be 0f19 	cmp.w	lr, #25
 8007b3c:	d801      	bhi.n	8007b42 <_strtol_l.constprop.0+0xb2>
 8007b3e:	3c37      	subs	r4, #55	; 0x37
 8007b40:	e7e2      	b.n	8007b08 <_strtol_l.constprop.0+0x78>
 8007b42:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 8007b46:	f1be 0f19 	cmp.w	lr, #25
 8007b4a:	d804      	bhi.n	8007b56 <_strtol_l.constprop.0+0xc6>
 8007b4c:	3c57      	subs	r4, #87	; 0x57
 8007b4e:	e7db      	b.n	8007b08 <_strtol_l.constprop.0+0x78>
 8007b50:	f04f 3cff 	mov.w	ip, #4294967295
 8007b54:	e7e6      	b.n	8007b24 <_strtol_l.constprop.0+0x94>
 8007b56:	f1bc 0f00 	cmp.w	ip, #0
 8007b5a:	da05      	bge.n	8007b68 <_strtol_l.constprop.0+0xd8>
 8007b5c:	2322      	movs	r3, #34	; 0x22
 8007b5e:	6003      	str	r3, [r0, #0]
 8007b60:	4646      	mov	r6, r8
 8007b62:	b942      	cbnz	r2, 8007b76 <_strtol_l.constprop.0+0xe6>
 8007b64:	4630      	mov	r0, r6
 8007b66:	e79e      	b.n	8007aa6 <_strtol_l.constprop.0+0x16>
 8007b68:	b107      	cbz	r7, 8007b6c <_strtol_l.constprop.0+0xdc>
 8007b6a:	4276      	negs	r6, r6
 8007b6c:	2a00      	cmp	r2, #0
 8007b6e:	d0f9      	beq.n	8007b64 <_strtol_l.constprop.0+0xd4>
 8007b70:	f1bc 0f00 	cmp.w	ip, #0
 8007b74:	d000      	beq.n	8007b78 <_strtol_l.constprop.0+0xe8>
 8007b76:	1e69      	subs	r1, r5, #1
 8007b78:	6011      	str	r1, [r2, #0]
 8007b7a:	e7f3      	b.n	8007b64 <_strtol_l.constprop.0+0xd4>
 8007b7c:	2430      	movs	r4, #48	; 0x30
 8007b7e:	2b00      	cmp	r3, #0
 8007b80:	d1b1      	bne.n	8007ae6 <_strtol_l.constprop.0+0x56>
 8007b82:	2308      	movs	r3, #8
 8007b84:	e7af      	b.n	8007ae6 <_strtol_l.constprop.0+0x56>
 8007b86:	2c30      	cmp	r4, #48	; 0x30
 8007b88:	d0a5      	beq.n	8007ad6 <_strtol_l.constprop.0+0x46>
 8007b8a:	230a      	movs	r3, #10
 8007b8c:	e7ab      	b.n	8007ae6 <_strtol_l.constprop.0+0x56>
 8007b8e:	bf00      	nop
 8007b90:	0800ea69 	.word	0x0800ea69

08007b94 <_strtol_r>:
 8007b94:	f7ff bf7c 	b.w	8007a90 <_strtol_l.constprop.0>

08007b98 <quorem>:
 8007b98:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007b9c:	6903      	ldr	r3, [r0, #16]
 8007b9e:	690c      	ldr	r4, [r1, #16]
 8007ba0:	42a3      	cmp	r3, r4
 8007ba2:	4607      	mov	r7, r0
 8007ba4:	f2c0 8081 	blt.w	8007caa <quorem+0x112>
 8007ba8:	3c01      	subs	r4, #1
 8007baa:	f101 0814 	add.w	r8, r1, #20
 8007bae:	f100 0514 	add.w	r5, r0, #20
 8007bb2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007bb6:	9301      	str	r3, [sp, #4]
 8007bb8:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8007bbc:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007bc0:	3301      	adds	r3, #1
 8007bc2:	429a      	cmp	r2, r3
 8007bc4:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8007bc8:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8007bcc:	fbb2 f6f3 	udiv	r6, r2, r3
 8007bd0:	d331      	bcc.n	8007c36 <quorem+0x9e>
 8007bd2:	f04f 0e00 	mov.w	lr, #0
 8007bd6:	4640      	mov	r0, r8
 8007bd8:	46ac      	mov	ip, r5
 8007bda:	46f2      	mov	sl, lr
 8007bdc:	f850 2b04 	ldr.w	r2, [r0], #4
 8007be0:	b293      	uxth	r3, r2
 8007be2:	fb06 e303 	mla	r3, r6, r3, lr
 8007be6:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8007bea:	b29b      	uxth	r3, r3
 8007bec:	ebaa 0303 	sub.w	r3, sl, r3
 8007bf0:	f8dc a000 	ldr.w	sl, [ip]
 8007bf4:	0c12      	lsrs	r2, r2, #16
 8007bf6:	fa13 f38a 	uxtah	r3, r3, sl
 8007bfa:	fb06 e202 	mla	r2, r6, r2, lr
 8007bfe:	9300      	str	r3, [sp, #0]
 8007c00:	9b00      	ldr	r3, [sp, #0]
 8007c02:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8007c06:	b292      	uxth	r2, r2
 8007c08:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8007c0c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007c10:	f8bd 3000 	ldrh.w	r3, [sp]
 8007c14:	4581      	cmp	r9, r0
 8007c16:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007c1a:	f84c 3b04 	str.w	r3, [ip], #4
 8007c1e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8007c22:	d2db      	bcs.n	8007bdc <quorem+0x44>
 8007c24:	f855 300b 	ldr.w	r3, [r5, fp]
 8007c28:	b92b      	cbnz	r3, 8007c36 <quorem+0x9e>
 8007c2a:	9b01      	ldr	r3, [sp, #4]
 8007c2c:	3b04      	subs	r3, #4
 8007c2e:	429d      	cmp	r5, r3
 8007c30:	461a      	mov	r2, r3
 8007c32:	d32e      	bcc.n	8007c92 <quorem+0xfa>
 8007c34:	613c      	str	r4, [r7, #16]
 8007c36:	4638      	mov	r0, r7
 8007c38:	f001 fc90 	bl	800955c <__mcmp>
 8007c3c:	2800      	cmp	r0, #0
 8007c3e:	db24      	blt.n	8007c8a <quorem+0xf2>
 8007c40:	3601      	adds	r6, #1
 8007c42:	4628      	mov	r0, r5
 8007c44:	f04f 0c00 	mov.w	ip, #0
 8007c48:	f858 2b04 	ldr.w	r2, [r8], #4
 8007c4c:	f8d0 e000 	ldr.w	lr, [r0]
 8007c50:	b293      	uxth	r3, r2
 8007c52:	ebac 0303 	sub.w	r3, ip, r3
 8007c56:	0c12      	lsrs	r2, r2, #16
 8007c58:	fa13 f38e 	uxtah	r3, r3, lr
 8007c5c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8007c60:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007c64:	b29b      	uxth	r3, r3
 8007c66:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007c6a:	45c1      	cmp	r9, r8
 8007c6c:	f840 3b04 	str.w	r3, [r0], #4
 8007c70:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8007c74:	d2e8      	bcs.n	8007c48 <quorem+0xb0>
 8007c76:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007c7a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007c7e:	b922      	cbnz	r2, 8007c8a <quorem+0xf2>
 8007c80:	3b04      	subs	r3, #4
 8007c82:	429d      	cmp	r5, r3
 8007c84:	461a      	mov	r2, r3
 8007c86:	d30a      	bcc.n	8007c9e <quorem+0x106>
 8007c88:	613c      	str	r4, [r7, #16]
 8007c8a:	4630      	mov	r0, r6
 8007c8c:	b003      	add	sp, #12
 8007c8e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007c92:	6812      	ldr	r2, [r2, #0]
 8007c94:	3b04      	subs	r3, #4
 8007c96:	2a00      	cmp	r2, #0
 8007c98:	d1cc      	bne.n	8007c34 <quorem+0x9c>
 8007c9a:	3c01      	subs	r4, #1
 8007c9c:	e7c7      	b.n	8007c2e <quorem+0x96>
 8007c9e:	6812      	ldr	r2, [r2, #0]
 8007ca0:	3b04      	subs	r3, #4
 8007ca2:	2a00      	cmp	r2, #0
 8007ca4:	d1f0      	bne.n	8007c88 <quorem+0xf0>
 8007ca6:	3c01      	subs	r4, #1
 8007ca8:	e7eb      	b.n	8007c82 <quorem+0xea>
 8007caa:	2000      	movs	r0, #0
 8007cac:	e7ee      	b.n	8007c8c <quorem+0xf4>
	...

08007cb0 <_dtoa_r>:
 8007cb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007cb4:	ed2d 8b04 	vpush	{d8-d9}
 8007cb8:	ec57 6b10 	vmov	r6, r7, d0
 8007cbc:	b093      	sub	sp, #76	; 0x4c
 8007cbe:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8007cc0:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8007cc4:	9106      	str	r1, [sp, #24]
 8007cc6:	ee10 aa10 	vmov	sl, s0
 8007cca:	4604      	mov	r4, r0
 8007ccc:	9209      	str	r2, [sp, #36]	; 0x24
 8007cce:	930c      	str	r3, [sp, #48]	; 0x30
 8007cd0:	46bb      	mov	fp, r7
 8007cd2:	b975      	cbnz	r5, 8007cf2 <_dtoa_r+0x42>
 8007cd4:	2010      	movs	r0, #16
 8007cd6:	f001 f94d 	bl	8008f74 <malloc>
 8007cda:	4602      	mov	r2, r0
 8007cdc:	6260      	str	r0, [r4, #36]	; 0x24
 8007cde:	b920      	cbnz	r0, 8007cea <_dtoa_r+0x3a>
 8007ce0:	4ba7      	ldr	r3, [pc, #668]	; (8007f80 <_dtoa_r+0x2d0>)
 8007ce2:	21ea      	movs	r1, #234	; 0xea
 8007ce4:	48a7      	ldr	r0, [pc, #668]	; (8007f84 <_dtoa_r+0x2d4>)
 8007ce6:	f002 f8bd 	bl	8009e64 <__assert_func>
 8007cea:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8007cee:	6005      	str	r5, [r0, #0]
 8007cf0:	60c5      	str	r5, [r0, #12]
 8007cf2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007cf4:	6819      	ldr	r1, [r3, #0]
 8007cf6:	b151      	cbz	r1, 8007d0e <_dtoa_r+0x5e>
 8007cf8:	685a      	ldr	r2, [r3, #4]
 8007cfa:	604a      	str	r2, [r1, #4]
 8007cfc:	2301      	movs	r3, #1
 8007cfe:	4093      	lsls	r3, r2
 8007d00:	608b      	str	r3, [r1, #8]
 8007d02:	4620      	mov	r0, r4
 8007d04:	f001 f99e 	bl	8009044 <_Bfree>
 8007d08:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007d0a:	2200      	movs	r2, #0
 8007d0c:	601a      	str	r2, [r3, #0]
 8007d0e:	1e3b      	subs	r3, r7, #0
 8007d10:	bfaa      	itet	ge
 8007d12:	2300      	movge	r3, #0
 8007d14:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8007d18:	f8c8 3000 	strge.w	r3, [r8]
 8007d1c:	4b9a      	ldr	r3, [pc, #616]	; (8007f88 <_dtoa_r+0x2d8>)
 8007d1e:	bfbc      	itt	lt
 8007d20:	2201      	movlt	r2, #1
 8007d22:	f8c8 2000 	strlt.w	r2, [r8]
 8007d26:	ea33 030b 	bics.w	r3, r3, fp
 8007d2a:	d11b      	bne.n	8007d64 <_dtoa_r+0xb4>
 8007d2c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007d2e:	f242 730f 	movw	r3, #9999	; 0x270f
 8007d32:	6013      	str	r3, [r2, #0]
 8007d34:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007d38:	4333      	orrs	r3, r6
 8007d3a:	f000 8592 	beq.w	8008862 <_dtoa_r+0xbb2>
 8007d3e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007d40:	b963      	cbnz	r3, 8007d5c <_dtoa_r+0xac>
 8007d42:	4b92      	ldr	r3, [pc, #584]	; (8007f8c <_dtoa_r+0x2dc>)
 8007d44:	e022      	b.n	8007d8c <_dtoa_r+0xdc>
 8007d46:	4b92      	ldr	r3, [pc, #584]	; (8007f90 <_dtoa_r+0x2e0>)
 8007d48:	9301      	str	r3, [sp, #4]
 8007d4a:	3308      	adds	r3, #8
 8007d4c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8007d4e:	6013      	str	r3, [r2, #0]
 8007d50:	9801      	ldr	r0, [sp, #4]
 8007d52:	b013      	add	sp, #76	; 0x4c
 8007d54:	ecbd 8b04 	vpop	{d8-d9}
 8007d58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007d5c:	4b8b      	ldr	r3, [pc, #556]	; (8007f8c <_dtoa_r+0x2dc>)
 8007d5e:	9301      	str	r3, [sp, #4]
 8007d60:	3303      	adds	r3, #3
 8007d62:	e7f3      	b.n	8007d4c <_dtoa_r+0x9c>
 8007d64:	2200      	movs	r2, #0
 8007d66:	2300      	movs	r3, #0
 8007d68:	4650      	mov	r0, sl
 8007d6a:	4659      	mov	r1, fp
 8007d6c:	f7f8 ff0c 	bl	8000b88 <__aeabi_dcmpeq>
 8007d70:	ec4b ab19 	vmov	d9, sl, fp
 8007d74:	4680      	mov	r8, r0
 8007d76:	b158      	cbz	r0, 8007d90 <_dtoa_r+0xe0>
 8007d78:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007d7a:	2301      	movs	r3, #1
 8007d7c:	6013      	str	r3, [r2, #0]
 8007d7e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007d80:	2b00      	cmp	r3, #0
 8007d82:	f000 856b 	beq.w	800885c <_dtoa_r+0xbac>
 8007d86:	4883      	ldr	r0, [pc, #524]	; (8007f94 <_dtoa_r+0x2e4>)
 8007d88:	6018      	str	r0, [r3, #0]
 8007d8a:	1e43      	subs	r3, r0, #1
 8007d8c:	9301      	str	r3, [sp, #4]
 8007d8e:	e7df      	b.n	8007d50 <_dtoa_r+0xa0>
 8007d90:	ec4b ab10 	vmov	d0, sl, fp
 8007d94:	aa10      	add	r2, sp, #64	; 0x40
 8007d96:	a911      	add	r1, sp, #68	; 0x44
 8007d98:	4620      	mov	r0, r4
 8007d9a:	f001 fd01 	bl	80097a0 <__d2b>
 8007d9e:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8007da2:	ee08 0a10 	vmov	s16, r0
 8007da6:	2d00      	cmp	r5, #0
 8007da8:	f000 8084 	beq.w	8007eb4 <_dtoa_r+0x204>
 8007dac:	ee19 3a90 	vmov	r3, s19
 8007db0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007db4:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8007db8:	4656      	mov	r6, sl
 8007dba:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8007dbe:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8007dc2:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8007dc6:	4b74      	ldr	r3, [pc, #464]	; (8007f98 <_dtoa_r+0x2e8>)
 8007dc8:	2200      	movs	r2, #0
 8007dca:	4630      	mov	r0, r6
 8007dcc:	4639      	mov	r1, r7
 8007dce:	f7f8 fabb 	bl	8000348 <__aeabi_dsub>
 8007dd2:	a365      	add	r3, pc, #404	; (adr r3, 8007f68 <_dtoa_r+0x2b8>)
 8007dd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007dd8:	f7f8 fc6e 	bl	80006b8 <__aeabi_dmul>
 8007ddc:	a364      	add	r3, pc, #400	; (adr r3, 8007f70 <_dtoa_r+0x2c0>)
 8007dde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007de2:	f7f8 fab3 	bl	800034c <__adddf3>
 8007de6:	4606      	mov	r6, r0
 8007de8:	4628      	mov	r0, r5
 8007dea:	460f      	mov	r7, r1
 8007dec:	f7f8 fbfa 	bl	80005e4 <__aeabi_i2d>
 8007df0:	a361      	add	r3, pc, #388	; (adr r3, 8007f78 <_dtoa_r+0x2c8>)
 8007df2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007df6:	f7f8 fc5f 	bl	80006b8 <__aeabi_dmul>
 8007dfa:	4602      	mov	r2, r0
 8007dfc:	460b      	mov	r3, r1
 8007dfe:	4630      	mov	r0, r6
 8007e00:	4639      	mov	r1, r7
 8007e02:	f7f8 faa3 	bl	800034c <__adddf3>
 8007e06:	4606      	mov	r6, r0
 8007e08:	460f      	mov	r7, r1
 8007e0a:	f7f8 ff05 	bl	8000c18 <__aeabi_d2iz>
 8007e0e:	2200      	movs	r2, #0
 8007e10:	9000      	str	r0, [sp, #0]
 8007e12:	2300      	movs	r3, #0
 8007e14:	4630      	mov	r0, r6
 8007e16:	4639      	mov	r1, r7
 8007e18:	f7f8 fec0 	bl	8000b9c <__aeabi_dcmplt>
 8007e1c:	b150      	cbz	r0, 8007e34 <_dtoa_r+0x184>
 8007e1e:	9800      	ldr	r0, [sp, #0]
 8007e20:	f7f8 fbe0 	bl	80005e4 <__aeabi_i2d>
 8007e24:	4632      	mov	r2, r6
 8007e26:	463b      	mov	r3, r7
 8007e28:	f7f8 feae 	bl	8000b88 <__aeabi_dcmpeq>
 8007e2c:	b910      	cbnz	r0, 8007e34 <_dtoa_r+0x184>
 8007e2e:	9b00      	ldr	r3, [sp, #0]
 8007e30:	3b01      	subs	r3, #1
 8007e32:	9300      	str	r3, [sp, #0]
 8007e34:	9b00      	ldr	r3, [sp, #0]
 8007e36:	2b16      	cmp	r3, #22
 8007e38:	d85a      	bhi.n	8007ef0 <_dtoa_r+0x240>
 8007e3a:	9a00      	ldr	r2, [sp, #0]
 8007e3c:	4b57      	ldr	r3, [pc, #348]	; (8007f9c <_dtoa_r+0x2ec>)
 8007e3e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007e42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e46:	ec51 0b19 	vmov	r0, r1, d9
 8007e4a:	f7f8 fea7 	bl	8000b9c <__aeabi_dcmplt>
 8007e4e:	2800      	cmp	r0, #0
 8007e50:	d050      	beq.n	8007ef4 <_dtoa_r+0x244>
 8007e52:	9b00      	ldr	r3, [sp, #0]
 8007e54:	3b01      	subs	r3, #1
 8007e56:	9300      	str	r3, [sp, #0]
 8007e58:	2300      	movs	r3, #0
 8007e5a:	930b      	str	r3, [sp, #44]	; 0x2c
 8007e5c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007e5e:	1b5d      	subs	r5, r3, r5
 8007e60:	1e6b      	subs	r3, r5, #1
 8007e62:	9305      	str	r3, [sp, #20]
 8007e64:	bf45      	ittet	mi
 8007e66:	f1c5 0301 	rsbmi	r3, r5, #1
 8007e6a:	9304      	strmi	r3, [sp, #16]
 8007e6c:	2300      	movpl	r3, #0
 8007e6e:	2300      	movmi	r3, #0
 8007e70:	bf4c      	ite	mi
 8007e72:	9305      	strmi	r3, [sp, #20]
 8007e74:	9304      	strpl	r3, [sp, #16]
 8007e76:	9b00      	ldr	r3, [sp, #0]
 8007e78:	2b00      	cmp	r3, #0
 8007e7a:	db3d      	blt.n	8007ef8 <_dtoa_r+0x248>
 8007e7c:	9b05      	ldr	r3, [sp, #20]
 8007e7e:	9a00      	ldr	r2, [sp, #0]
 8007e80:	920a      	str	r2, [sp, #40]	; 0x28
 8007e82:	4413      	add	r3, r2
 8007e84:	9305      	str	r3, [sp, #20]
 8007e86:	2300      	movs	r3, #0
 8007e88:	9307      	str	r3, [sp, #28]
 8007e8a:	9b06      	ldr	r3, [sp, #24]
 8007e8c:	2b09      	cmp	r3, #9
 8007e8e:	f200 8089 	bhi.w	8007fa4 <_dtoa_r+0x2f4>
 8007e92:	2b05      	cmp	r3, #5
 8007e94:	bfc4      	itt	gt
 8007e96:	3b04      	subgt	r3, #4
 8007e98:	9306      	strgt	r3, [sp, #24]
 8007e9a:	9b06      	ldr	r3, [sp, #24]
 8007e9c:	f1a3 0302 	sub.w	r3, r3, #2
 8007ea0:	bfcc      	ite	gt
 8007ea2:	2500      	movgt	r5, #0
 8007ea4:	2501      	movle	r5, #1
 8007ea6:	2b03      	cmp	r3, #3
 8007ea8:	f200 8087 	bhi.w	8007fba <_dtoa_r+0x30a>
 8007eac:	e8df f003 	tbb	[pc, r3]
 8007eb0:	59383a2d 	.word	0x59383a2d
 8007eb4:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8007eb8:	441d      	add	r5, r3
 8007eba:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8007ebe:	2b20      	cmp	r3, #32
 8007ec0:	bfc1      	itttt	gt
 8007ec2:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8007ec6:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8007eca:	fa0b f303 	lslgt.w	r3, fp, r3
 8007ece:	fa26 f000 	lsrgt.w	r0, r6, r0
 8007ed2:	bfda      	itte	le
 8007ed4:	f1c3 0320 	rsble	r3, r3, #32
 8007ed8:	fa06 f003 	lslle.w	r0, r6, r3
 8007edc:	4318      	orrgt	r0, r3
 8007ede:	f7f8 fb71 	bl	80005c4 <__aeabi_ui2d>
 8007ee2:	2301      	movs	r3, #1
 8007ee4:	4606      	mov	r6, r0
 8007ee6:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8007eea:	3d01      	subs	r5, #1
 8007eec:	930e      	str	r3, [sp, #56]	; 0x38
 8007eee:	e76a      	b.n	8007dc6 <_dtoa_r+0x116>
 8007ef0:	2301      	movs	r3, #1
 8007ef2:	e7b2      	b.n	8007e5a <_dtoa_r+0x1aa>
 8007ef4:	900b      	str	r0, [sp, #44]	; 0x2c
 8007ef6:	e7b1      	b.n	8007e5c <_dtoa_r+0x1ac>
 8007ef8:	9b04      	ldr	r3, [sp, #16]
 8007efa:	9a00      	ldr	r2, [sp, #0]
 8007efc:	1a9b      	subs	r3, r3, r2
 8007efe:	9304      	str	r3, [sp, #16]
 8007f00:	4253      	negs	r3, r2
 8007f02:	9307      	str	r3, [sp, #28]
 8007f04:	2300      	movs	r3, #0
 8007f06:	930a      	str	r3, [sp, #40]	; 0x28
 8007f08:	e7bf      	b.n	8007e8a <_dtoa_r+0x1da>
 8007f0a:	2300      	movs	r3, #0
 8007f0c:	9308      	str	r3, [sp, #32]
 8007f0e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007f10:	2b00      	cmp	r3, #0
 8007f12:	dc55      	bgt.n	8007fc0 <_dtoa_r+0x310>
 8007f14:	2301      	movs	r3, #1
 8007f16:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8007f1a:	461a      	mov	r2, r3
 8007f1c:	9209      	str	r2, [sp, #36]	; 0x24
 8007f1e:	e00c      	b.n	8007f3a <_dtoa_r+0x28a>
 8007f20:	2301      	movs	r3, #1
 8007f22:	e7f3      	b.n	8007f0c <_dtoa_r+0x25c>
 8007f24:	2300      	movs	r3, #0
 8007f26:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007f28:	9308      	str	r3, [sp, #32]
 8007f2a:	9b00      	ldr	r3, [sp, #0]
 8007f2c:	4413      	add	r3, r2
 8007f2e:	9302      	str	r3, [sp, #8]
 8007f30:	3301      	adds	r3, #1
 8007f32:	2b01      	cmp	r3, #1
 8007f34:	9303      	str	r3, [sp, #12]
 8007f36:	bfb8      	it	lt
 8007f38:	2301      	movlt	r3, #1
 8007f3a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8007f3c:	2200      	movs	r2, #0
 8007f3e:	6042      	str	r2, [r0, #4]
 8007f40:	2204      	movs	r2, #4
 8007f42:	f102 0614 	add.w	r6, r2, #20
 8007f46:	429e      	cmp	r6, r3
 8007f48:	6841      	ldr	r1, [r0, #4]
 8007f4a:	d93d      	bls.n	8007fc8 <_dtoa_r+0x318>
 8007f4c:	4620      	mov	r0, r4
 8007f4e:	f001 f839 	bl	8008fc4 <_Balloc>
 8007f52:	9001      	str	r0, [sp, #4]
 8007f54:	2800      	cmp	r0, #0
 8007f56:	d13b      	bne.n	8007fd0 <_dtoa_r+0x320>
 8007f58:	4b11      	ldr	r3, [pc, #68]	; (8007fa0 <_dtoa_r+0x2f0>)
 8007f5a:	4602      	mov	r2, r0
 8007f5c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8007f60:	e6c0      	b.n	8007ce4 <_dtoa_r+0x34>
 8007f62:	2301      	movs	r3, #1
 8007f64:	e7df      	b.n	8007f26 <_dtoa_r+0x276>
 8007f66:	bf00      	nop
 8007f68:	636f4361 	.word	0x636f4361
 8007f6c:	3fd287a7 	.word	0x3fd287a7
 8007f70:	8b60c8b3 	.word	0x8b60c8b3
 8007f74:	3fc68a28 	.word	0x3fc68a28
 8007f78:	509f79fb 	.word	0x509f79fb
 8007f7c:	3fd34413 	.word	0x3fd34413
 8007f80:	0800eb76 	.word	0x0800eb76
 8007f84:	0800eb8d 	.word	0x0800eb8d
 8007f88:	7ff00000 	.word	0x7ff00000
 8007f8c:	0800eb72 	.word	0x0800eb72
 8007f90:	0800eb69 	.word	0x0800eb69
 8007f94:	0800e9e9 	.word	0x0800e9e9
 8007f98:	3ff80000 	.word	0x3ff80000
 8007f9c:	0800ecf8 	.word	0x0800ecf8
 8007fa0:	0800ebe8 	.word	0x0800ebe8
 8007fa4:	2501      	movs	r5, #1
 8007fa6:	2300      	movs	r3, #0
 8007fa8:	9306      	str	r3, [sp, #24]
 8007faa:	9508      	str	r5, [sp, #32]
 8007fac:	f04f 33ff 	mov.w	r3, #4294967295
 8007fb0:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8007fb4:	2200      	movs	r2, #0
 8007fb6:	2312      	movs	r3, #18
 8007fb8:	e7b0      	b.n	8007f1c <_dtoa_r+0x26c>
 8007fba:	2301      	movs	r3, #1
 8007fbc:	9308      	str	r3, [sp, #32]
 8007fbe:	e7f5      	b.n	8007fac <_dtoa_r+0x2fc>
 8007fc0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007fc2:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8007fc6:	e7b8      	b.n	8007f3a <_dtoa_r+0x28a>
 8007fc8:	3101      	adds	r1, #1
 8007fca:	6041      	str	r1, [r0, #4]
 8007fcc:	0052      	lsls	r2, r2, #1
 8007fce:	e7b8      	b.n	8007f42 <_dtoa_r+0x292>
 8007fd0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007fd2:	9a01      	ldr	r2, [sp, #4]
 8007fd4:	601a      	str	r2, [r3, #0]
 8007fd6:	9b03      	ldr	r3, [sp, #12]
 8007fd8:	2b0e      	cmp	r3, #14
 8007fda:	f200 809d 	bhi.w	8008118 <_dtoa_r+0x468>
 8007fde:	2d00      	cmp	r5, #0
 8007fe0:	f000 809a 	beq.w	8008118 <_dtoa_r+0x468>
 8007fe4:	9b00      	ldr	r3, [sp, #0]
 8007fe6:	2b00      	cmp	r3, #0
 8007fe8:	dd32      	ble.n	8008050 <_dtoa_r+0x3a0>
 8007fea:	4ab7      	ldr	r2, [pc, #732]	; (80082c8 <_dtoa_r+0x618>)
 8007fec:	f003 030f 	and.w	r3, r3, #15
 8007ff0:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8007ff4:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007ff8:	9b00      	ldr	r3, [sp, #0]
 8007ffa:	05d8      	lsls	r0, r3, #23
 8007ffc:	ea4f 1723 	mov.w	r7, r3, asr #4
 8008000:	d516      	bpl.n	8008030 <_dtoa_r+0x380>
 8008002:	4bb2      	ldr	r3, [pc, #712]	; (80082cc <_dtoa_r+0x61c>)
 8008004:	ec51 0b19 	vmov	r0, r1, d9
 8008008:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800800c:	f7f8 fc7e 	bl	800090c <__aeabi_ddiv>
 8008010:	f007 070f 	and.w	r7, r7, #15
 8008014:	4682      	mov	sl, r0
 8008016:	468b      	mov	fp, r1
 8008018:	2503      	movs	r5, #3
 800801a:	4eac      	ldr	r6, [pc, #688]	; (80082cc <_dtoa_r+0x61c>)
 800801c:	b957      	cbnz	r7, 8008034 <_dtoa_r+0x384>
 800801e:	4642      	mov	r2, r8
 8008020:	464b      	mov	r3, r9
 8008022:	4650      	mov	r0, sl
 8008024:	4659      	mov	r1, fp
 8008026:	f7f8 fc71 	bl	800090c <__aeabi_ddiv>
 800802a:	4682      	mov	sl, r0
 800802c:	468b      	mov	fp, r1
 800802e:	e028      	b.n	8008082 <_dtoa_r+0x3d2>
 8008030:	2502      	movs	r5, #2
 8008032:	e7f2      	b.n	800801a <_dtoa_r+0x36a>
 8008034:	07f9      	lsls	r1, r7, #31
 8008036:	d508      	bpl.n	800804a <_dtoa_r+0x39a>
 8008038:	4640      	mov	r0, r8
 800803a:	4649      	mov	r1, r9
 800803c:	e9d6 2300 	ldrd	r2, r3, [r6]
 8008040:	f7f8 fb3a 	bl	80006b8 <__aeabi_dmul>
 8008044:	3501      	adds	r5, #1
 8008046:	4680      	mov	r8, r0
 8008048:	4689      	mov	r9, r1
 800804a:	107f      	asrs	r7, r7, #1
 800804c:	3608      	adds	r6, #8
 800804e:	e7e5      	b.n	800801c <_dtoa_r+0x36c>
 8008050:	f000 809b 	beq.w	800818a <_dtoa_r+0x4da>
 8008054:	9b00      	ldr	r3, [sp, #0]
 8008056:	4f9d      	ldr	r7, [pc, #628]	; (80082cc <_dtoa_r+0x61c>)
 8008058:	425e      	negs	r6, r3
 800805a:	4b9b      	ldr	r3, [pc, #620]	; (80082c8 <_dtoa_r+0x618>)
 800805c:	f006 020f 	and.w	r2, r6, #15
 8008060:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008064:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008068:	ec51 0b19 	vmov	r0, r1, d9
 800806c:	f7f8 fb24 	bl	80006b8 <__aeabi_dmul>
 8008070:	1136      	asrs	r6, r6, #4
 8008072:	4682      	mov	sl, r0
 8008074:	468b      	mov	fp, r1
 8008076:	2300      	movs	r3, #0
 8008078:	2502      	movs	r5, #2
 800807a:	2e00      	cmp	r6, #0
 800807c:	d17a      	bne.n	8008174 <_dtoa_r+0x4c4>
 800807e:	2b00      	cmp	r3, #0
 8008080:	d1d3      	bne.n	800802a <_dtoa_r+0x37a>
 8008082:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008084:	2b00      	cmp	r3, #0
 8008086:	f000 8082 	beq.w	800818e <_dtoa_r+0x4de>
 800808a:	4b91      	ldr	r3, [pc, #580]	; (80082d0 <_dtoa_r+0x620>)
 800808c:	2200      	movs	r2, #0
 800808e:	4650      	mov	r0, sl
 8008090:	4659      	mov	r1, fp
 8008092:	f7f8 fd83 	bl	8000b9c <__aeabi_dcmplt>
 8008096:	2800      	cmp	r0, #0
 8008098:	d079      	beq.n	800818e <_dtoa_r+0x4de>
 800809a:	9b03      	ldr	r3, [sp, #12]
 800809c:	2b00      	cmp	r3, #0
 800809e:	d076      	beq.n	800818e <_dtoa_r+0x4de>
 80080a0:	9b02      	ldr	r3, [sp, #8]
 80080a2:	2b00      	cmp	r3, #0
 80080a4:	dd36      	ble.n	8008114 <_dtoa_r+0x464>
 80080a6:	9b00      	ldr	r3, [sp, #0]
 80080a8:	4650      	mov	r0, sl
 80080aa:	4659      	mov	r1, fp
 80080ac:	1e5f      	subs	r7, r3, #1
 80080ae:	2200      	movs	r2, #0
 80080b0:	4b88      	ldr	r3, [pc, #544]	; (80082d4 <_dtoa_r+0x624>)
 80080b2:	f7f8 fb01 	bl	80006b8 <__aeabi_dmul>
 80080b6:	9e02      	ldr	r6, [sp, #8]
 80080b8:	4682      	mov	sl, r0
 80080ba:	468b      	mov	fp, r1
 80080bc:	3501      	adds	r5, #1
 80080be:	4628      	mov	r0, r5
 80080c0:	f7f8 fa90 	bl	80005e4 <__aeabi_i2d>
 80080c4:	4652      	mov	r2, sl
 80080c6:	465b      	mov	r3, fp
 80080c8:	f7f8 faf6 	bl	80006b8 <__aeabi_dmul>
 80080cc:	4b82      	ldr	r3, [pc, #520]	; (80082d8 <_dtoa_r+0x628>)
 80080ce:	2200      	movs	r2, #0
 80080d0:	f7f8 f93c 	bl	800034c <__adddf3>
 80080d4:	46d0      	mov	r8, sl
 80080d6:	46d9      	mov	r9, fp
 80080d8:	4682      	mov	sl, r0
 80080da:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 80080de:	2e00      	cmp	r6, #0
 80080e0:	d158      	bne.n	8008194 <_dtoa_r+0x4e4>
 80080e2:	4b7e      	ldr	r3, [pc, #504]	; (80082dc <_dtoa_r+0x62c>)
 80080e4:	2200      	movs	r2, #0
 80080e6:	4640      	mov	r0, r8
 80080e8:	4649      	mov	r1, r9
 80080ea:	f7f8 f92d 	bl	8000348 <__aeabi_dsub>
 80080ee:	4652      	mov	r2, sl
 80080f0:	465b      	mov	r3, fp
 80080f2:	4680      	mov	r8, r0
 80080f4:	4689      	mov	r9, r1
 80080f6:	f7f8 fd6f 	bl	8000bd8 <__aeabi_dcmpgt>
 80080fa:	2800      	cmp	r0, #0
 80080fc:	f040 8295 	bne.w	800862a <_dtoa_r+0x97a>
 8008100:	4652      	mov	r2, sl
 8008102:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8008106:	4640      	mov	r0, r8
 8008108:	4649      	mov	r1, r9
 800810a:	f7f8 fd47 	bl	8000b9c <__aeabi_dcmplt>
 800810e:	2800      	cmp	r0, #0
 8008110:	f040 8289 	bne.w	8008626 <_dtoa_r+0x976>
 8008114:	ec5b ab19 	vmov	sl, fp, d9
 8008118:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800811a:	2b00      	cmp	r3, #0
 800811c:	f2c0 8148 	blt.w	80083b0 <_dtoa_r+0x700>
 8008120:	9a00      	ldr	r2, [sp, #0]
 8008122:	2a0e      	cmp	r2, #14
 8008124:	f300 8144 	bgt.w	80083b0 <_dtoa_r+0x700>
 8008128:	4b67      	ldr	r3, [pc, #412]	; (80082c8 <_dtoa_r+0x618>)
 800812a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800812e:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008132:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008134:	2b00      	cmp	r3, #0
 8008136:	f280 80d5 	bge.w	80082e4 <_dtoa_r+0x634>
 800813a:	9b03      	ldr	r3, [sp, #12]
 800813c:	2b00      	cmp	r3, #0
 800813e:	f300 80d1 	bgt.w	80082e4 <_dtoa_r+0x634>
 8008142:	f040 826f 	bne.w	8008624 <_dtoa_r+0x974>
 8008146:	4b65      	ldr	r3, [pc, #404]	; (80082dc <_dtoa_r+0x62c>)
 8008148:	2200      	movs	r2, #0
 800814a:	4640      	mov	r0, r8
 800814c:	4649      	mov	r1, r9
 800814e:	f7f8 fab3 	bl	80006b8 <__aeabi_dmul>
 8008152:	4652      	mov	r2, sl
 8008154:	465b      	mov	r3, fp
 8008156:	f7f8 fd35 	bl	8000bc4 <__aeabi_dcmpge>
 800815a:	9e03      	ldr	r6, [sp, #12]
 800815c:	4637      	mov	r7, r6
 800815e:	2800      	cmp	r0, #0
 8008160:	f040 8245 	bne.w	80085ee <_dtoa_r+0x93e>
 8008164:	9d01      	ldr	r5, [sp, #4]
 8008166:	2331      	movs	r3, #49	; 0x31
 8008168:	f805 3b01 	strb.w	r3, [r5], #1
 800816c:	9b00      	ldr	r3, [sp, #0]
 800816e:	3301      	adds	r3, #1
 8008170:	9300      	str	r3, [sp, #0]
 8008172:	e240      	b.n	80085f6 <_dtoa_r+0x946>
 8008174:	07f2      	lsls	r2, r6, #31
 8008176:	d505      	bpl.n	8008184 <_dtoa_r+0x4d4>
 8008178:	e9d7 2300 	ldrd	r2, r3, [r7]
 800817c:	f7f8 fa9c 	bl	80006b8 <__aeabi_dmul>
 8008180:	3501      	adds	r5, #1
 8008182:	2301      	movs	r3, #1
 8008184:	1076      	asrs	r6, r6, #1
 8008186:	3708      	adds	r7, #8
 8008188:	e777      	b.n	800807a <_dtoa_r+0x3ca>
 800818a:	2502      	movs	r5, #2
 800818c:	e779      	b.n	8008082 <_dtoa_r+0x3d2>
 800818e:	9f00      	ldr	r7, [sp, #0]
 8008190:	9e03      	ldr	r6, [sp, #12]
 8008192:	e794      	b.n	80080be <_dtoa_r+0x40e>
 8008194:	9901      	ldr	r1, [sp, #4]
 8008196:	4b4c      	ldr	r3, [pc, #304]	; (80082c8 <_dtoa_r+0x618>)
 8008198:	4431      	add	r1, r6
 800819a:	910d      	str	r1, [sp, #52]	; 0x34
 800819c:	9908      	ldr	r1, [sp, #32]
 800819e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80081a2:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80081a6:	2900      	cmp	r1, #0
 80081a8:	d043      	beq.n	8008232 <_dtoa_r+0x582>
 80081aa:	494d      	ldr	r1, [pc, #308]	; (80082e0 <_dtoa_r+0x630>)
 80081ac:	2000      	movs	r0, #0
 80081ae:	f7f8 fbad 	bl	800090c <__aeabi_ddiv>
 80081b2:	4652      	mov	r2, sl
 80081b4:	465b      	mov	r3, fp
 80081b6:	f7f8 f8c7 	bl	8000348 <__aeabi_dsub>
 80081ba:	9d01      	ldr	r5, [sp, #4]
 80081bc:	4682      	mov	sl, r0
 80081be:	468b      	mov	fp, r1
 80081c0:	4649      	mov	r1, r9
 80081c2:	4640      	mov	r0, r8
 80081c4:	f7f8 fd28 	bl	8000c18 <__aeabi_d2iz>
 80081c8:	4606      	mov	r6, r0
 80081ca:	f7f8 fa0b 	bl	80005e4 <__aeabi_i2d>
 80081ce:	4602      	mov	r2, r0
 80081d0:	460b      	mov	r3, r1
 80081d2:	4640      	mov	r0, r8
 80081d4:	4649      	mov	r1, r9
 80081d6:	f7f8 f8b7 	bl	8000348 <__aeabi_dsub>
 80081da:	3630      	adds	r6, #48	; 0x30
 80081dc:	f805 6b01 	strb.w	r6, [r5], #1
 80081e0:	4652      	mov	r2, sl
 80081e2:	465b      	mov	r3, fp
 80081e4:	4680      	mov	r8, r0
 80081e6:	4689      	mov	r9, r1
 80081e8:	f7f8 fcd8 	bl	8000b9c <__aeabi_dcmplt>
 80081ec:	2800      	cmp	r0, #0
 80081ee:	d163      	bne.n	80082b8 <_dtoa_r+0x608>
 80081f0:	4642      	mov	r2, r8
 80081f2:	464b      	mov	r3, r9
 80081f4:	4936      	ldr	r1, [pc, #216]	; (80082d0 <_dtoa_r+0x620>)
 80081f6:	2000      	movs	r0, #0
 80081f8:	f7f8 f8a6 	bl	8000348 <__aeabi_dsub>
 80081fc:	4652      	mov	r2, sl
 80081fe:	465b      	mov	r3, fp
 8008200:	f7f8 fccc 	bl	8000b9c <__aeabi_dcmplt>
 8008204:	2800      	cmp	r0, #0
 8008206:	f040 80b5 	bne.w	8008374 <_dtoa_r+0x6c4>
 800820a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800820c:	429d      	cmp	r5, r3
 800820e:	d081      	beq.n	8008114 <_dtoa_r+0x464>
 8008210:	4b30      	ldr	r3, [pc, #192]	; (80082d4 <_dtoa_r+0x624>)
 8008212:	2200      	movs	r2, #0
 8008214:	4650      	mov	r0, sl
 8008216:	4659      	mov	r1, fp
 8008218:	f7f8 fa4e 	bl	80006b8 <__aeabi_dmul>
 800821c:	4b2d      	ldr	r3, [pc, #180]	; (80082d4 <_dtoa_r+0x624>)
 800821e:	4682      	mov	sl, r0
 8008220:	468b      	mov	fp, r1
 8008222:	4640      	mov	r0, r8
 8008224:	4649      	mov	r1, r9
 8008226:	2200      	movs	r2, #0
 8008228:	f7f8 fa46 	bl	80006b8 <__aeabi_dmul>
 800822c:	4680      	mov	r8, r0
 800822e:	4689      	mov	r9, r1
 8008230:	e7c6      	b.n	80081c0 <_dtoa_r+0x510>
 8008232:	4650      	mov	r0, sl
 8008234:	4659      	mov	r1, fp
 8008236:	f7f8 fa3f 	bl	80006b8 <__aeabi_dmul>
 800823a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800823c:	9d01      	ldr	r5, [sp, #4]
 800823e:	930f      	str	r3, [sp, #60]	; 0x3c
 8008240:	4682      	mov	sl, r0
 8008242:	468b      	mov	fp, r1
 8008244:	4649      	mov	r1, r9
 8008246:	4640      	mov	r0, r8
 8008248:	f7f8 fce6 	bl	8000c18 <__aeabi_d2iz>
 800824c:	4606      	mov	r6, r0
 800824e:	f7f8 f9c9 	bl	80005e4 <__aeabi_i2d>
 8008252:	3630      	adds	r6, #48	; 0x30
 8008254:	4602      	mov	r2, r0
 8008256:	460b      	mov	r3, r1
 8008258:	4640      	mov	r0, r8
 800825a:	4649      	mov	r1, r9
 800825c:	f7f8 f874 	bl	8000348 <__aeabi_dsub>
 8008260:	f805 6b01 	strb.w	r6, [r5], #1
 8008264:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008266:	429d      	cmp	r5, r3
 8008268:	4680      	mov	r8, r0
 800826a:	4689      	mov	r9, r1
 800826c:	f04f 0200 	mov.w	r2, #0
 8008270:	d124      	bne.n	80082bc <_dtoa_r+0x60c>
 8008272:	4b1b      	ldr	r3, [pc, #108]	; (80082e0 <_dtoa_r+0x630>)
 8008274:	4650      	mov	r0, sl
 8008276:	4659      	mov	r1, fp
 8008278:	f7f8 f868 	bl	800034c <__adddf3>
 800827c:	4602      	mov	r2, r0
 800827e:	460b      	mov	r3, r1
 8008280:	4640      	mov	r0, r8
 8008282:	4649      	mov	r1, r9
 8008284:	f7f8 fca8 	bl	8000bd8 <__aeabi_dcmpgt>
 8008288:	2800      	cmp	r0, #0
 800828a:	d173      	bne.n	8008374 <_dtoa_r+0x6c4>
 800828c:	4652      	mov	r2, sl
 800828e:	465b      	mov	r3, fp
 8008290:	4913      	ldr	r1, [pc, #76]	; (80082e0 <_dtoa_r+0x630>)
 8008292:	2000      	movs	r0, #0
 8008294:	f7f8 f858 	bl	8000348 <__aeabi_dsub>
 8008298:	4602      	mov	r2, r0
 800829a:	460b      	mov	r3, r1
 800829c:	4640      	mov	r0, r8
 800829e:	4649      	mov	r1, r9
 80082a0:	f7f8 fc7c 	bl	8000b9c <__aeabi_dcmplt>
 80082a4:	2800      	cmp	r0, #0
 80082a6:	f43f af35 	beq.w	8008114 <_dtoa_r+0x464>
 80082aa:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80082ac:	1e6b      	subs	r3, r5, #1
 80082ae:	930f      	str	r3, [sp, #60]	; 0x3c
 80082b0:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80082b4:	2b30      	cmp	r3, #48	; 0x30
 80082b6:	d0f8      	beq.n	80082aa <_dtoa_r+0x5fa>
 80082b8:	9700      	str	r7, [sp, #0]
 80082ba:	e049      	b.n	8008350 <_dtoa_r+0x6a0>
 80082bc:	4b05      	ldr	r3, [pc, #20]	; (80082d4 <_dtoa_r+0x624>)
 80082be:	f7f8 f9fb 	bl	80006b8 <__aeabi_dmul>
 80082c2:	4680      	mov	r8, r0
 80082c4:	4689      	mov	r9, r1
 80082c6:	e7bd      	b.n	8008244 <_dtoa_r+0x594>
 80082c8:	0800ecf8 	.word	0x0800ecf8
 80082cc:	0800ecd0 	.word	0x0800ecd0
 80082d0:	3ff00000 	.word	0x3ff00000
 80082d4:	40240000 	.word	0x40240000
 80082d8:	401c0000 	.word	0x401c0000
 80082dc:	40140000 	.word	0x40140000
 80082e0:	3fe00000 	.word	0x3fe00000
 80082e4:	9d01      	ldr	r5, [sp, #4]
 80082e6:	4656      	mov	r6, sl
 80082e8:	465f      	mov	r7, fp
 80082ea:	4642      	mov	r2, r8
 80082ec:	464b      	mov	r3, r9
 80082ee:	4630      	mov	r0, r6
 80082f0:	4639      	mov	r1, r7
 80082f2:	f7f8 fb0b 	bl	800090c <__aeabi_ddiv>
 80082f6:	f7f8 fc8f 	bl	8000c18 <__aeabi_d2iz>
 80082fa:	4682      	mov	sl, r0
 80082fc:	f7f8 f972 	bl	80005e4 <__aeabi_i2d>
 8008300:	4642      	mov	r2, r8
 8008302:	464b      	mov	r3, r9
 8008304:	f7f8 f9d8 	bl	80006b8 <__aeabi_dmul>
 8008308:	4602      	mov	r2, r0
 800830a:	460b      	mov	r3, r1
 800830c:	4630      	mov	r0, r6
 800830e:	4639      	mov	r1, r7
 8008310:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 8008314:	f7f8 f818 	bl	8000348 <__aeabi_dsub>
 8008318:	f805 6b01 	strb.w	r6, [r5], #1
 800831c:	9e01      	ldr	r6, [sp, #4]
 800831e:	9f03      	ldr	r7, [sp, #12]
 8008320:	1bae      	subs	r6, r5, r6
 8008322:	42b7      	cmp	r7, r6
 8008324:	4602      	mov	r2, r0
 8008326:	460b      	mov	r3, r1
 8008328:	d135      	bne.n	8008396 <_dtoa_r+0x6e6>
 800832a:	f7f8 f80f 	bl	800034c <__adddf3>
 800832e:	4642      	mov	r2, r8
 8008330:	464b      	mov	r3, r9
 8008332:	4606      	mov	r6, r0
 8008334:	460f      	mov	r7, r1
 8008336:	f7f8 fc4f 	bl	8000bd8 <__aeabi_dcmpgt>
 800833a:	b9d0      	cbnz	r0, 8008372 <_dtoa_r+0x6c2>
 800833c:	4642      	mov	r2, r8
 800833e:	464b      	mov	r3, r9
 8008340:	4630      	mov	r0, r6
 8008342:	4639      	mov	r1, r7
 8008344:	f7f8 fc20 	bl	8000b88 <__aeabi_dcmpeq>
 8008348:	b110      	cbz	r0, 8008350 <_dtoa_r+0x6a0>
 800834a:	f01a 0f01 	tst.w	sl, #1
 800834e:	d110      	bne.n	8008372 <_dtoa_r+0x6c2>
 8008350:	4620      	mov	r0, r4
 8008352:	ee18 1a10 	vmov	r1, s16
 8008356:	f000 fe75 	bl	8009044 <_Bfree>
 800835a:	2300      	movs	r3, #0
 800835c:	9800      	ldr	r0, [sp, #0]
 800835e:	702b      	strb	r3, [r5, #0]
 8008360:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008362:	3001      	adds	r0, #1
 8008364:	6018      	str	r0, [r3, #0]
 8008366:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008368:	2b00      	cmp	r3, #0
 800836a:	f43f acf1 	beq.w	8007d50 <_dtoa_r+0xa0>
 800836e:	601d      	str	r5, [r3, #0]
 8008370:	e4ee      	b.n	8007d50 <_dtoa_r+0xa0>
 8008372:	9f00      	ldr	r7, [sp, #0]
 8008374:	462b      	mov	r3, r5
 8008376:	461d      	mov	r5, r3
 8008378:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800837c:	2a39      	cmp	r2, #57	; 0x39
 800837e:	d106      	bne.n	800838e <_dtoa_r+0x6de>
 8008380:	9a01      	ldr	r2, [sp, #4]
 8008382:	429a      	cmp	r2, r3
 8008384:	d1f7      	bne.n	8008376 <_dtoa_r+0x6c6>
 8008386:	9901      	ldr	r1, [sp, #4]
 8008388:	2230      	movs	r2, #48	; 0x30
 800838a:	3701      	adds	r7, #1
 800838c:	700a      	strb	r2, [r1, #0]
 800838e:	781a      	ldrb	r2, [r3, #0]
 8008390:	3201      	adds	r2, #1
 8008392:	701a      	strb	r2, [r3, #0]
 8008394:	e790      	b.n	80082b8 <_dtoa_r+0x608>
 8008396:	4ba6      	ldr	r3, [pc, #664]	; (8008630 <_dtoa_r+0x980>)
 8008398:	2200      	movs	r2, #0
 800839a:	f7f8 f98d 	bl	80006b8 <__aeabi_dmul>
 800839e:	2200      	movs	r2, #0
 80083a0:	2300      	movs	r3, #0
 80083a2:	4606      	mov	r6, r0
 80083a4:	460f      	mov	r7, r1
 80083a6:	f7f8 fbef 	bl	8000b88 <__aeabi_dcmpeq>
 80083aa:	2800      	cmp	r0, #0
 80083ac:	d09d      	beq.n	80082ea <_dtoa_r+0x63a>
 80083ae:	e7cf      	b.n	8008350 <_dtoa_r+0x6a0>
 80083b0:	9a08      	ldr	r2, [sp, #32]
 80083b2:	2a00      	cmp	r2, #0
 80083b4:	f000 80d7 	beq.w	8008566 <_dtoa_r+0x8b6>
 80083b8:	9a06      	ldr	r2, [sp, #24]
 80083ba:	2a01      	cmp	r2, #1
 80083bc:	f300 80ba 	bgt.w	8008534 <_dtoa_r+0x884>
 80083c0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80083c2:	2a00      	cmp	r2, #0
 80083c4:	f000 80b2 	beq.w	800852c <_dtoa_r+0x87c>
 80083c8:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80083cc:	9e07      	ldr	r6, [sp, #28]
 80083ce:	9d04      	ldr	r5, [sp, #16]
 80083d0:	9a04      	ldr	r2, [sp, #16]
 80083d2:	441a      	add	r2, r3
 80083d4:	9204      	str	r2, [sp, #16]
 80083d6:	9a05      	ldr	r2, [sp, #20]
 80083d8:	2101      	movs	r1, #1
 80083da:	441a      	add	r2, r3
 80083dc:	4620      	mov	r0, r4
 80083de:	9205      	str	r2, [sp, #20]
 80083e0:	f000 ff32 	bl	8009248 <__i2b>
 80083e4:	4607      	mov	r7, r0
 80083e6:	2d00      	cmp	r5, #0
 80083e8:	dd0c      	ble.n	8008404 <_dtoa_r+0x754>
 80083ea:	9b05      	ldr	r3, [sp, #20]
 80083ec:	2b00      	cmp	r3, #0
 80083ee:	dd09      	ble.n	8008404 <_dtoa_r+0x754>
 80083f0:	42ab      	cmp	r3, r5
 80083f2:	9a04      	ldr	r2, [sp, #16]
 80083f4:	bfa8      	it	ge
 80083f6:	462b      	movge	r3, r5
 80083f8:	1ad2      	subs	r2, r2, r3
 80083fa:	9204      	str	r2, [sp, #16]
 80083fc:	9a05      	ldr	r2, [sp, #20]
 80083fe:	1aed      	subs	r5, r5, r3
 8008400:	1ad3      	subs	r3, r2, r3
 8008402:	9305      	str	r3, [sp, #20]
 8008404:	9b07      	ldr	r3, [sp, #28]
 8008406:	b31b      	cbz	r3, 8008450 <_dtoa_r+0x7a0>
 8008408:	9b08      	ldr	r3, [sp, #32]
 800840a:	2b00      	cmp	r3, #0
 800840c:	f000 80af 	beq.w	800856e <_dtoa_r+0x8be>
 8008410:	2e00      	cmp	r6, #0
 8008412:	dd13      	ble.n	800843c <_dtoa_r+0x78c>
 8008414:	4639      	mov	r1, r7
 8008416:	4632      	mov	r2, r6
 8008418:	4620      	mov	r0, r4
 800841a:	f000 ffd5 	bl	80093c8 <__pow5mult>
 800841e:	ee18 2a10 	vmov	r2, s16
 8008422:	4601      	mov	r1, r0
 8008424:	4607      	mov	r7, r0
 8008426:	4620      	mov	r0, r4
 8008428:	f000 ff24 	bl	8009274 <__multiply>
 800842c:	ee18 1a10 	vmov	r1, s16
 8008430:	4680      	mov	r8, r0
 8008432:	4620      	mov	r0, r4
 8008434:	f000 fe06 	bl	8009044 <_Bfree>
 8008438:	ee08 8a10 	vmov	s16, r8
 800843c:	9b07      	ldr	r3, [sp, #28]
 800843e:	1b9a      	subs	r2, r3, r6
 8008440:	d006      	beq.n	8008450 <_dtoa_r+0x7a0>
 8008442:	ee18 1a10 	vmov	r1, s16
 8008446:	4620      	mov	r0, r4
 8008448:	f000 ffbe 	bl	80093c8 <__pow5mult>
 800844c:	ee08 0a10 	vmov	s16, r0
 8008450:	2101      	movs	r1, #1
 8008452:	4620      	mov	r0, r4
 8008454:	f000 fef8 	bl	8009248 <__i2b>
 8008458:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800845a:	2b00      	cmp	r3, #0
 800845c:	4606      	mov	r6, r0
 800845e:	f340 8088 	ble.w	8008572 <_dtoa_r+0x8c2>
 8008462:	461a      	mov	r2, r3
 8008464:	4601      	mov	r1, r0
 8008466:	4620      	mov	r0, r4
 8008468:	f000 ffae 	bl	80093c8 <__pow5mult>
 800846c:	9b06      	ldr	r3, [sp, #24]
 800846e:	2b01      	cmp	r3, #1
 8008470:	4606      	mov	r6, r0
 8008472:	f340 8081 	ble.w	8008578 <_dtoa_r+0x8c8>
 8008476:	f04f 0800 	mov.w	r8, #0
 800847a:	6933      	ldr	r3, [r6, #16]
 800847c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8008480:	6918      	ldr	r0, [r3, #16]
 8008482:	f000 fe91 	bl	80091a8 <__hi0bits>
 8008486:	f1c0 0020 	rsb	r0, r0, #32
 800848a:	9b05      	ldr	r3, [sp, #20]
 800848c:	4418      	add	r0, r3
 800848e:	f010 001f 	ands.w	r0, r0, #31
 8008492:	f000 8092 	beq.w	80085ba <_dtoa_r+0x90a>
 8008496:	f1c0 0320 	rsb	r3, r0, #32
 800849a:	2b04      	cmp	r3, #4
 800849c:	f340 808a 	ble.w	80085b4 <_dtoa_r+0x904>
 80084a0:	f1c0 001c 	rsb	r0, r0, #28
 80084a4:	9b04      	ldr	r3, [sp, #16]
 80084a6:	4403      	add	r3, r0
 80084a8:	9304      	str	r3, [sp, #16]
 80084aa:	9b05      	ldr	r3, [sp, #20]
 80084ac:	4403      	add	r3, r0
 80084ae:	4405      	add	r5, r0
 80084b0:	9305      	str	r3, [sp, #20]
 80084b2:	9b04      	ldr	r3, [sp, #16]
 80084b4:	2b00      	cmp	r3, #0
 80084b6:	dd07      	ble.n	80084c8 <_dtoa_r+0x818>
 80084b8:	ee18 1a10 	vmov	r1, s16
 80084bc:	461a      	mov	r2, r3
 80084be:	4620      	mov	r0, r4
 80084c0:	f000 ffdc 	bl	800947c <__lshift>
 80084c4:	ee08 0a10 	vmov	s16, r0
 80084c8:	9b05      	ldr	r3, [sp, #20]
 80084ca:	2b00      	cmp	r3, #0
 80084cc:	dd05      	ble.n	80084da <_dtoa_r+0x82a>
 80084ce:	4631      	mov	r1, r6
 80084d0:	461a      	mov	r2, r3
 80084d2:	4620      	mov	r0, r4
 80084d4:	f000 ffd2 	bl	800947c <__lshift>
 80084d8:	4606      	mov	r6, r0
 80084da:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80084dc:	2b00      	cmp	r3, #0
 80084de:	d06e      	beq.n	80085be <_dtoa_r+0x90e>
 80084e0:	ee18 0a10 	vmov	r0, s16
 80084e4:	4631      	mov	r1, r6
 80084e6:	f001 f839 	bl	800955c <__mcmp>
 80084ea:	2800      	cmp	r0, #0
 80084ec:	da67      	bge.n	80085be <_dtoa_r+0x90e>
 80084ee:	9b00      	ldr	r3, [sp, #0]
 80084f0:	3b01      	subs	r3, #1
 80084f2:	ee18 1a10 	vmov	r1, s16
 80084f6:	9300      	str	r3, [sp, #0]
 80084f8:	220a      	movs	r2, #10
 80084fa:	2300      	movs	r3, #0
 80084fc:	4620      	mov	r0, r4
 80084fe:	f000 fdc3 	bl	8009088 <__multadd>
 8008502:	9b08      	ldr	r3, [sp, #32]
 8008504:	ee08 0a10 	vmov	s16, r0
 8008508:	2b00      	cmp	r3, #0
 800850a:	f000 81b1 	beq.w	8008870 <_dtoa_r+0xbc0>
 800850e:	2300      	movs	r3, #0
 8008510:	4639      	mov	r1, r7
 8008512:	220a      	movs	r2, #10
 8008514:	4620      	mov	r0, r4
 8008516:	f000 fdb7 	bl	8009088 <__multadd>
 800851a:	9b02      	ldr	r3, [sp, #8]
 800851c:	2b00      	cmp	r3, #0
 800851e:	4607      	mov	r7, r0
 8008520:	f300 808e 	bgt.w	8008640 <_dtoa_r+0x990>
 8008524:	9b06      	ldr	r3, [sp, #24]
 8008526:	2b02      	cmp	r3, #2
 8008528:	dc51      	bgt.n	80085ce <_dtoa_r+0x91e>
 800852a:	e089      	b.n	8008640 <_dtoa_r+0x990>
 800852c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800852e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8008532:	e74b      	b.n	80083cc <_dtoa_r+0x71c>
 8008534:	9b03      	ldr	r3, [sp, #12]
 8008536:	1e5e      	subs	r6, r3, #1
 8008538:	9b07      	ldr	r3, [sp, #28]
 800853a:	42b3      	cmp	r3, r6
 800853c:	bfbf      	itttt	lt
 800853e:	9b07      	ldrlt	r3, [sp, #28]
 8008540:	9607      	strlt	r6, [sp, #28]
 8008542:	1af2      	sublt	r2, r6, r3
 8008544:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8008546:	bfb6      	itet	lt
 8008548:	189b      	addlt	r3, r3, r2
 800854a:	1b9e      	subge	r6, r3, r6
 800854c:	930a      	strlt	r3, [sp, #40]	; 0x28
 800854e:	9b03      	ldr	r3, [sp, #12]
 8008550:	bfb8      	it	lt
 8008552:	2600      	movlt	r6, #0
 8008554:	2b00      	cmp	r3, #0
 8008556:	bfb7      	itett	lt
 8008558:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800855c:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8008560:	1a9d      	sublt	r5, r3, r2
 8008562:	2300      	movlt	r3, #0
 8008564:	e734      	b.n	80083d0 <_dtoa_r+0x720>
 8008566:	9e07      	ldr	r6, [sp, #28]
 8008568:	9d04      	ldr	r5, [sp, #16]
 800856a:	9f08      	ldr	r7, [sp, #32]
 800856c:	e73b      	b.n	80083e6 <_dtoa_r+0x736>
 800856e:	9a07      	ldr	r2, [sp, #28]
 8008570:	e767      	b.n	8008442 <_dtoa_r+0x792>
 8008572:	9b06      	ldr	r3, [sp, #24]
 8008574:	2b01      	cmp	r3, #1
 8008576:	dc18      	bgt.n	80085aa <_dtoa_r+0x8fa>
 8008578:	f1ba 0f00 	cmp.w	sl, #0
 800857c:	d115      	bne.n	80085aa <_dtoa_r+0x8fa>
 800857e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008582:	b993      	cbnz	r3, 80085aa <_dtoa_r+0x8fa>
 8008584:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8008588:	0d1b      	lsrs	r3, r3, #20
 800858a:	051b      	lsls	r3, r3, #20
 800858c:	b183      	cbz	r3, 80085b0 <_dtoa_r+0x900>
 800858e:	9b04      	ldr	r3, [sp, #16]
 8008590:	3301      	adds	r3, #1
 8008592:	9304      	str	r3, [sp, #16]
 8008594:	9b05      	ldr	r3, [sp, #20]
 8008596:	3301      	adds	r3, #1
 8008598:	9305      	str	r3, [sp, #20]
 800859a:	f04f 0801 	mov.w	r8, #1
 800859e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80085a0:	2b00      	cmp	r3, #0
 80085a2:	f47f af6a 	bne.w	800847a <_dtoa_r+0x7ca>
 80085a6:	2001      	movs	r0, #1
 80085a8:	e76f      	b.n	800848a <_dtoa_r+0x7da>
 80085aa:	f04f 0800 	mov.w	r8, #0
 80085ae:	e7f6      	b.n	800859e <_dtoa_r+0x8ee>
 80085b0:	4698      	mov	r8, r3
 80085b2:	e7f4      	b.n	800859e <_dtoa_r+0x8ee>
 80085b4:	f43f af7d 	beq.w	80084b2 <_dtoa_r+0x802>
 80085b8:	4618      	mov	r0, r3
 80085ba:	301c      	adds	r0, #28
 80085bc:	e772      	b.n	80084a4 <_dtoa_r+0x7f4>
 80085be:	9b03      	ldr	r3, [sp, #12]
 80085c0:	2b00      	cmp	r3, #0
 80085c2:	dc37      	bgt.n	8008634 <_dtoa_r+0x984>
 80085c4:	9b06      	ldr	r3, [sp, #24]
 80085c6:	2b02      	cmp	r3, #2
 80085c8:	dd34      	ble.n	8008634 <_dtoa_r+0x984>
 80085ca:	9b03      	ldr	r3, [sp, #12]
 80085cc:	9302      	str	r3, [sp, #8]
 80085ce:	9b02      	ldr	r3, [sp, #8]
 80085d0:	b96b      	cbnz	r3, 80085ee <_dtoa_r+0x93e>
 80085d2:	4631      	mov	r1, r6
 80085d4:	2205      	movs	r2, #5
 80085d6:	4620      	mov	r0, r4
 80085d8:	f000 fd56 	bl	8009088 <__multadd>
 80085dc:	4601      	mov	r1, r0
 80085de:	4606      	mov	r6, r0
 80085e0:	ee18 0a10 	vmov	r0, s16
 80085e4:	f000 ffba 	bl	800955c <__mcmp>
 80085e8:	2800      	cmp	r0, #0
 80085ea:	f73f adbb 	bgt.w	8008164 <_dtoa_r+0x4b4>
 80085ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80085f0:	9d01      	ldr	r5, [sp, #4]
 80085f2:	43db      	mvns	r3, r3
 80085f4:	9300      	str	r3, [sp, #0]
 80085f6:	f04f 0800 	mov.w	r8, #0
 80085fa:	4631      	mov	r1, r6
 80085fc:	4620      	mov	r0, r4
 80085fe:	f000 fd21 	bl	8009044 <_Bfree>
 8008602:	2f00      	cmp	r7, #0
 8008604:	f43f aea4 	beq.w	8008350 <_dtoa_r+0x6a0>
 8008608:	f1b8 0f00 	cmp.w	r8, #0
 800860c:	d005      	beq.n	800861a <_dtoa_r+0x96a>
 800860e:	45b8      	cmp	r8, r7
 8008610:	d003      	beq.n	800861a <_dtoa_r+0x96a>
 8008612:	4641      	mov	r1, r8
 8008614:	4620      	mov	r0, r4
 8008616:	f000 fd15 	bl	8009044 <_Bfree>
 800861a:	4639      	mov	r1, r7
 800861c:	4620      	mov	r0, r4
 800861e:	f000 fd11 	bl	8009044 <_Bfree>
 8008622:	e695      	b.n	8008350 <_dtoa_r+0x6a0>
 8008624:	2600      	movs	r6, #0
 8008626:	4637      	mov	r7, r6
 8008628:	e7e1      	b.n	80085ee <_dtoa_r+0x93e>
 800862a:	9700      	str	r7, [sp, #0]
 800862c:	4637      	mov	r7, r6
 800862e:	e599      	b.n	8008164 <_dtoa_r+0x4b4>
 8008630:	40240000 	.word	0x40240000
 8008634:	9b08      	ldr	r3, [sp, #32]
 8008636:	2b00      	cmp	r3, #0
 8008638:	f000 80ca 	beq.w	80087d0 <_dtoa_r+0xb20>
 800863c:	9b03      	ldr	r3, [sp, #12]
 800863e:	9302      	str	r3, [sp, #8]
 8008640:	2d00      	cmp	r5, #0
 8008642:	dd05      	ble.n	8008650 <_dtoa_r+0x9a0>
 8008644:	4639      	mov	r1, r7
 8008646:	462a      	mov	r2, r5
 8008648:	4620      	mov	r0, r4
 800864a:	f000 ff17 	bl	800947c <__lshift>
 800864e:	4607      	mov	r7, r0
 8008650:	f1b8 0f00 	cmp.w	r8, #0
 8008654:	d05b      	beq.n	800870e <_dtoa_r+0xa5e>
 8008656:	6879      	ldr	r1, [r7, #4]
 8008658:	4620      	mov	r0, r4
 800865a:	f000 fcb3 	bl	8008fc4 <_Balloc>
 800865e:	4605      	mov	r5, r0
 8008660:	b928      	cbnz	r0, 800866e <_dtoa_r+0x9be>
 8008662:	4b87      	ldr	r3, [pc, #540]	; (8008880 <_dtoa_r+0xbd0>)
 8008664:	4602      	mov	r2, r0
 8008666:	f240 21ea 	movw	r1, #746	; 0x2ea
 800866a:	f7ff bb3b 	b.w	8007ce4 <_dtoa_r+0x34>
 800866e:	693a      	ldr	r2, [r7, #16]
 8008670:	3202      	adds	r2, #2
 8008672:	0092      	lsls	r2, r2, #2
 8008674:	f107 010c 	add.w	r1, r7, #12
 8008678:	300c      	adds	r0, #12
 800867a:	f000 fc95 	bl	8008fa8 <memcpy>
 800867e:	2201      	movs	r2, #1
 8008680:	4629      	mov	r1, r5
 8008682:	4620      	mov	r0, r4
 8008684:	f000 fefa 	bl	800947c <__lshift>
 8008688:	9b01      	ldr	r3, [sp, #4]
 800868a:	f103 0901 	add.w	r9, r3, #1
 800868e:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8008692:	4413      	add	r3, r2
 8008694:	9305      	str	r3, [sp, #20]
 8008696:	f00a 0301 	and.w	r3, sl, #1
 800869a:	46b8      	mov	r8, r7
 800869c:	9304      	str	r3, [sp, #16]
 800869e:	4607      	mov	r7, r0
 80086a0:	4631      	mov	r1, r6
 80086a2:	ee18 0a10 	vmov	r0, s16
 80086a6:	f7ff fa77 	bl	8007b98 <quorem>
 80086aa:	4641      	mov	r1, r8
 80086ac:	9002      	str	r0, [sp, #8]
 80086ae:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 80086b2:	ee18 0a10 	vmov	r0, s16
 80086b6:	f000 ff51 	bl	800955c <__mcmp>
 80086ba:	463a      	mov	r2, r7
 80086bc:	9003      	str	r0, [sp, #12]
 80086be:	4631      	mov	r1, r6
 80086c0:	4620      	mov	r0, r4
 80086c2:	f000 ff67 	bl	8009594 <__mdiff>
 80086c6:	68c2      	ldr	r2, [r0, #12]
 80086c8:	f109 3bff 	add.w	fp, r9, #4294967295
 80086cc:	4605      	mov	r5, r0
 80086ce:	bb02      	cbnz	r2, 8008712 <_dtoa_r+0xa62>
 80086d0:	4601      	mov	r1, r0
 80086d2:	ee18 0a10 	vmov	r0, s16
 80086d6:	f000 ff41 	bl	800955c <__mcmp>
 80086da:	4602      	mov	r2, r0
 80086dc:	4629      	mov	r1, r5
 80086de:	4620      	mov	r0, r4
 80086e0:	9207      	str	r2, [sp, #28]
 80086e2:	f000 fcaf 	bl	8009044 <_Bfree>
 80086e6:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 80086ea:	ea43 0102 	orr.w	r1, r3, r2
 80086ee:	9b04      	ldr	r3, [sp, #16]
 80086f0:	430b      	orrs	r3, r1
 80086f2:	464d      	mov	r5, r9
 80086f4:	d10f      	bne.n	8008716 <_dtoa_r+0xa66>
 80086f6:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80086fa:	d02a      	beq.n	8008752 <_dtoa_r+0xaa2>
 80086fc:	9b03      	ldr	r3, [sp, #12]
 80086fe:	2b00      	cmp	r3, #0
 8008700:	dd02      	ble.n	8008708 <_dtoa_r+0xa58>
 8008702:	9b02      	ldr	r3, [sp, #8]
 8008704:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8008708:	f88b a000 	strb.w	sl, [fp]
 800870c:	e775      	b.n	80085fa <_dtoa_r+0x94a>
 800870e:	4638      	mov	r0, r7
 8008710:	e7ba      	b.n	8008688 <_dtoa_r+0x9d8>
 8008712:	2201      	movs	r2, #1
 8008714:	e7e2      	b.n	80086dc <_dtoa_r+0xa2c>
 8008716:	9b03      	ldr	r3, [sp, #12]
 8008718:	2b00      	cmp	r3, #0
 800871a:	db04      	blt.n	8008726 <_dtoa_r+0xa76>
 800871c:	9906      	ldr	r1, [sp, #24]
 800871e:	430b      	orrs	r3, r1
 8008720:	9904      	ldr	r1, [sp, #16]
 8008722:	430b      	orrs	r3, r1
 8008724:	d122      	bne.n	800876c <_dtoa_r+0xabc>
 8008726:	2a00      	cmp	r2, #0
 8008728:	ddee      	ble.n	8008708 <_dtoa_r+0xa58>
 800872a:	ee18 1a10 	vmov	r1, s16
 800872e:	2201      	movs	r2, #1
 8008730:	4620      	mov	r0, r4
 8008732:	f000 fea3 	bl	800947c <__lshift>
 8008736:	4631      	mov	r1, r6
 8008738:	ee08 0a10 	vmov	s16, r0
 800873c:	f000 ff0e 	bl	800955c <__mcmp>
 8008740:	2800      	cmp	r0, #0
 8008742:	dc03      	bgt.n	800874c <_dtoa_r+0xa9c>
 8008744:	d1e0      	bne.n	8008708 <_dtoa_r+0xa58>
 8008746:	f01a 0f01 	tst.w	sl, #1
 800874a:	d0dd      	beq.n	8008708 <_dtoa_r+0xa58>
 800874c:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8008750:	d1d7      	bne.n	8008702 <_dtoa_r+0xa52>
 8008752:	2339      	movs	r3, #57	; 0x39
 8008754:	f88b 3000 	strb.w	r3, [fp]
 8008758:	462b      	mov	r3, r5
 800875a:	461d      	mov	r5, r3
 800875c:	3b01      	subs	r3, #1
 800875e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8008762:	2a39      	cmp	r2, #57	; 0x39
 8008764:	d071      	beq.n	800884a <_dtoa_r+0xb9a>
 8008766:	3201      	adds	r2, #1
 8008768:	701a      	strb	r2, [r3, #0]
 800876a:	e746      	b.n	80085fa <_dtoa_r+0x94a>
 800876c:	2a00      	cmp	r2, #0
 800876e:	dd07      	ble.n	8008780 <_dtoa_r+0xad0>
 8008770:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8008774:	d0ed      	beq.n	8008752 <_dtoa_r+0xaa2>
 8008776:	f10a 0301 	add.w	r3, sl, #1
 800877a:	f88b 3000 	strb.w	r3, [fp]
 800877e:	e73c      	b.n	80085fa <_dtoa_r+0x94a>
 8008780:	9b05      	ldr	r3, [sp, #20]
 8008782:	f809 ac01 	strb.w	sl, [r9, #-1]
 8008786:	4599      	cmp	r9, r3
 8008788:	d047      	beq.n	800881a <_dtoa_r+0xb6a>
 800878a:	ee18 1a10 	vmov	r1, s16
 800878e:	2300      	movs	r3, #0
 8008790:	220a      	movs	r2, #10
 8008792:	4620      	mov	r0, r4
 8008794:	f000 fc78 	bl	8009088 <__multadd>
 8008798:	45b8      	cmp	r8, r7
 800879a:	ee08 0a10 	vmov	s16, r0
 800879e:	f04f 0300 	mov.w	r3, #0
 80087a2:	f04f 020a 	mov.w	r2, #10
 80087a6:	4641      	mov	r1, r8
 80087a8:	4620      	mov	r0, r4
 80087aa:	d106      	bne.n	80087ba <_dtoa_r+0xb0a>
 80087ac:	f000 fc6c 	bl	8009088 <__multadd>
 80087b0:	4680      	mov	r8, r0
 80087b2:	4607      	mov	r7, r0
 80087b4:	f109 0901 	add.w	r9, r9, #1
 80087b8:	e772      	b.n	80086a0 <_dtoa_r+0x9f0>
 80087ba:	f000 fc65 	bl	8009088 <__multadd>
 80087be:	4639      	mov	r1, r7
 80087c0:	4680      	mov	r8, r0
 80087c2:	2300      	movs	r3, #0
 80087c4:	220a      	movs	r2, #10
 80087c6:	4620      	mov	r0, r4
 80087c8:	f000 fc5e 	bl	8009088 <__multadd>
 80087cc:	4607      	mov	r7, r0
 80087ce:	e7f1      	b.n	80087b4 <_dtoa_r+0xb04>
 80087d0:	9b03      	ldr	r3, [sp, #12]
 80087d2:	9302      	str	r3, [sp, #8]
 80087d4:	9d01      	ldr	r5, [sp, #4]
 80087d6:	ee18 0a10 	vmov	r0, s16
 80087da:	4631      	mov	r1, r6
 80087dc:	f7ff f9dc 	bl	8007b98 <quorem>
 80087e0:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 80087e4:	9b01      	ldr	r3, [sp, #4]
 80087e6:	f805 ab01 	strb.w	sl, [r5], #1
 80087ea:	1aea      	subs	r2, r5, r3
 80087ec:	9b02      	ldr	r3, [sp, #8]
 80087ee:	4293      	cmp	r3, r2
 80087f0:	dd09      	ble.n	8008806 <_dtoa_r+0xb56>
 80087f2:	ee18 1a10 	vmov	r1, s16
 80087f6:	2300      	movs	r3, #0
 80087f8:	220a      	movs	r2, #10
 80087fa:	4620      	mov	r0, r4
 80087fc:	f000 fc44 	bl	8009088 <__multadd>
 8008800:	ee08 0a10 	vmov	s16, r0
 8008804:	e7e7      	b.n	80087d6 <_dtoa_r+0xb26>
 8008806:	9b02      	ldr	r3, [sp, #8]
 8008808:	2b00      	cmp	r3, #0
 800880a:	bfc8      	it	gt
 800880c:	461d      	movgt	r5, r3
 800880e:	9b01      	ldr	r3, [sp, #4]
 8008810:	bfd8      	it	le
 8008812:	2501      	movle	r5, #1
 8008814:	441d      	add	r5, r3
 8008816:	f04f 0800 	mov.w	r8, #0
 800881a:	ee18 1a10 	vmov	r1, s16
 800881e:	2201      	movs	r2, #1
 8008820:	4620      	mov	r0, r4
 8008822:	f000 fe2b 	bl	800947c <__lshift>
 8008826:	4631      	mov	r1, r6
 8008828:	ee08 0a10 	vmov	s16, r0
 800882c:	f000 fe96 	bl	800955c <__mcmp>
 8008830:	2800      	cmp	r0, #0
 8008832:	dc91      	bgt.n	8008758 <_dtoa_r+0xaa8>
 8008834:	d102      	bne.n	800883c <_dtoa_r+0xb8c>
 8008836:	f01a 0f01 	tst.w	sl, #1
 800883a:	d18d      	bne.n	8008758 <_dtoa_r+0xaa8>
 800883c:	462b      	mov	r3, r5
 800883e:	461d      	mov	r5, r3
 8008840:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008844:	2a30      	cmp	r2, #48	; 0x30
 8008846:	d0fa      	beq.n	800883e <_dtoa_r+0xb8e>
 8008848:	e6d7      	b.n	80085fa <_dtoa_r+0x94a>
 800884a:	9a01      	ldr	r2, [sp, #4]
 800884c:	429a      	cmp	r2, r3
 800884e:	d184      	bne.n	800875a <_dtoa_r+0xaaa>
 8008850:	9b00      	ldr	r3, [sp, #0]
 8008852:	3301      	adds	r3, #1
 8008854:	9300      	str	r3, [sp, #0]
 8008856:	2331      	movs	r3, #49	; 0x31
 8008858:	7013      	strb	r3, [r2, #0]
 800885a:	e6ce      	b.n	80085fa <_dtoa_r+0x94a>
 800885c:	4b09      	ldr	r3, [pc, #36]	; (8008884 <_dtoa_r+0xbd4>)
 800885e:	f7ff ba95 	b.w	8007d8c <_dtoa_r+0xdc>
 8008862:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008864:	2b00      	cmp	r3, #0
 8008866:	f47f aa6e 	bne.w	8007d46 <_dtoa_r+0x96>
 800886a:	4b07      	ldr	r3, [pc, #28]	; (8008888 <_dtoa_r+0xbd8>)
 800886c:	f7ff ba8e 	b.w	8007d8c <_dtoa_r+0xdc>
 8008870:	9b02      	ldr	r3, [sp, #8]
 8008872:	2b00      	cmp	r3, #0
 8008874:	dcae      	bgt.n	80087d4 <_dtoa_r+0xb24>
 8008876:	9b06      	ldr	r3, [sp, #24]
 8008878:	2b02      	cmp	r3, #2
 800887a:	f73f aea8 	bgt.w	80085ce <_dtoa_r+0x91e>
 800887e:	e7a9      	b.n	80087d4 <_dtoa_r+0xb24>
 8008880:	0800ebe8 	.word	0x0800ebe8
 8008884:	0800e9e8 	.word	0x0800e9e8
 8008888:	0800eb69 	.word	0x0800eb69

0800888c <rshift>:
 800888c:	6903      	ldr	r3, [r0, #16]
 800888e:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8008892:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008896:	ea4f 1261 	mov.w	r2, r1, asr #5
 800889a:	f100 0414 	add.w	r4, r0, #20
 800889e:	dd45      	ble.n	800892c <rshift+0xa0>
 80088a0:	f011 011f 	ands.w	r1, r1, #31
 80088a4:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 80088a8:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 80088ac:	d10c      	bne.n	80088c8 <rshift+0x3c>
 80088ae:	f100 0710 	add.w	r7, r0, #16
 80088b2:	4629      	mov	r1, r5
 80088b4:	42b1      	cmp	r1, r6
 80088b6:	d334      	bcc.n	8008922 <rshift+0x96>
 80088b8:	1a9b      	subs	r3, r3, r2
 80088ba:	009b      	lsls	r3, r3, #2
 80088bc:	1eea      	subs	r2, r5, #3
 80088be:	4296      	cmp	r6, r2
 80088c0:	bf38      	it	cc
 80088c2:	2300      	movcc	r3, #0
 80088c4:	4423      	add	r3, r4
 80088c6:	e015      	b.n	80088f4 <rshift+0x68>
 80088c8:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 80088cc:	f1c1 0820 	rsb	r8, r1, #32
 80088d0:	40cf      	lsrs	r7, r1
 80088d2:	f105 0e04 	add.w	lr, r5, #4
 80088d6:	46a1      	mov	r9, r4
 80088d8:	4576      	cmp	r6, lr
 80088da:	46f4      	mov	ip, lr
 80088dc:	d815      	bhi.n	800890a <rshift+0x7e>
 80088de:	1a9a      	subs	r2, r3, r2
 80088e0:	0092      	lsls	r2, r2, #2
 80088e2:	3a04      	subs	r2, #4
 80088e4:	3501      	adds	r5, #1
 80088e6:	42ae      	cmp	r6, r5
 80088e8:	bf38      	it	cc
 80088ea:	2200      	movcc	r2, #0
 80088ec:	18a3      	adds	r3, r4, r2
 80088ee:	50a7      	str	r7, [r4, r2]
 80088f0:	b107      	cbz	r7, 80088f4 <rshift+0x68>
 80088f2:	3304      	adds	r3, #4
 80088f4:	1b1a      	subs	r2, r3, r4
 80088f6:	42a3      	cmp	r3, r4
 80088f8:	ea4f 02a2 	mov.w	r2, r2, asr #2
 80088fc:	bf08      	it	eq
 80088fe:	2300      	moveq	r3, #0
 8008900:	6102      	str	r2, [r0, #16]
 8008902:	bf08      	it	eq
 8008904:	6143      	streq	r3, [r0, #20]
 8008906:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800890a:	f8dc c000 	ldr.w	ip, [ip]
 800890e:	fa0c fc08 	lsl.w	ip, ip, r8
 8008912:	ea4c 0707 	orr.w	r7, ip, r7
 8008916:	f849 7b04 	str.w	r7, [r9], #4
 800891a:	f85e 7b04 	ldr.w	r7, [lr], #4
 800891e:	40cf      	lsrs	r7, r1
 8008920:	e7da      	b.n	80088d8 <rshift+0x4c>
 8008922:	f851 cb04 	ldr.w	ip, [r1], #4
 8008926:	f847 cf04 	str.w	ip, [r7, #4]!
 800892a:	e7c3      	b.n	80088b4 <rshift+0x28>
 800892c:	4623      	mov	r3, r4
 800892e:	e7e1      	b.n	80088f4 <rshift+0x68>

08008930 <__hexdig_fun>:
 8008930:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8008934:	2b09      	cmp	r3, #9
 8008936:	d802      	bhi.n	800893e <__hexdig_fun+0xe>
 8008938:	3820      	subs	r0, #32
 800893a:	b2c0      	uxtb	r0, r0
 800893c:	4770      	bx	lr
 800893e:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8008942:	2b05      	cmp	r3, #5
 8008944:	d801      	bhi.n	800894a <__hexdig_fun+0x1a>
 8008946:	3847      	subs	r0, #71	; 0x47
 8008948:	e7f7      	b.n	800893a <__hexdig_fun+0xa>
 800894a:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800894e:	2b05      	cmp	r3, #5
 8008950:	d801      	bhi.n	8008956 <__hexdig_fun+0x26>
 8008952:	3827      	subs	r0, #39	; 0x27
 8008954:	e7f1      	b.n	800893a <__hexdig_fun+0xa>
 8008956:	2000      	movs	r0, #0
 8008958:	4770      	bx	lr
	...

0800895c <__gethex>:
 800895c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008960:	ed2d 8b02 	vpush	{d8}
 8008964:	b089      	sub	sp, #36	; 0x24
 8008966:	ee08 0a10 	vmov	s16, r0
 800896a:	9304      	str	r3, [sp, #16]
 800896c:	4bb4      	ldr	r3, [pc, #720]	; (8008c40 <__gethex+0x2e4>)
 800896e:	681b      	ldr	r3, [r3, #0]
 8008970:	9301      	str	r3, [sp, #4]
 8008972:	4618      	mov	r0, r3
 8008974:	468b      	mov	fp, r1
 8008976:	4690      	mov	r8, r2
 8008978:	f7f7 fc8a 	bl	8000290 <strlen>
 800897c:	9b01      	ldr	r3, [sp, #4]
 800897e:	f8db 2000 	ldr.w	r2, [fp]
 8008982:	4403      	add	r3, r0
 8008984:	4682      	mov	sl, r0
 8008986:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800898a:	9305      	str	r3, [sp, #20]
 800898c:	1c93      	adds	r3, r2, #2
 800898e:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8008992:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8008996:	32fe      	adds	r2, #254	; 0xfe
 8008998:	18d1      	adds	r1, r2, r3
 800899a:	461f      	mov	r7, r3
 800899c:	f813 0b01 	ldrb.w	r0, [r3], #1
 80089a0:	9100      	str	r1, [sp, #0]
 80089a2:	2830      	cmp	r0, #48	; 0x30
 80089a4:	d0f8      	beq.n	8008998 <__gethex+0x3c>
 80089a6:	f7ff ffc3 	bl	8008930 <__hexdig_fun>
 80089aa:	4604      	mov	r4, r0
 80089ac:	2800      	cmp	r0, #0
 80089ae:	d13a      	bne.n	8008a26 <__gethex+0xca>
 80089b0:	9901      	ldr	r1, [sp, #4]
 80089b2:	4652      	mov	r2, sl
 80089b4:	4638      	mov	r0, r7
 80089b6:	f001 fa33 	bl	8009e20 <strncmp>
 80089ba:	4605      	mov	r5, r0
 80089bc:	2800      	cmp	r0, #0
 80089be:	d168      	bne.n	8008a92 <__gethex+0x136>
 80089c0:	f817 000a 	ldrb.w	r0, [r7, sl]
 80089c4:	eb07 060a 	add.w	r6, r7, sl
 80089c8:	f7ff ffb2 	bl	8008930 <__hexdig_fun>
 80089cc:	2800      	cmp	r0, #0
 80089ce:	d062      	beq.n	8008a96 <__gethex+0x13a>
 80089d0:	4633      	mov	r3, r6
 80089d2:	7818      	ldrb	r0, [r3, #0]
 80089d4:	2830      	cmp	r0, #48	; 0x30
 80089d6:	461f      	mov	r7, r3
 80089d8:	f103 0301 	add.w	r3, r3, #1
 80089dc:	d0f9      	beq.n	80089d2 <__gethex+0x76>
 80089de:	f7ff ffa7 	bl	8008930 <__hexdig_fun>
 80089e2:	2301      	movs	r3, #1
 80089e4:	fab0 f480 	clz	r4, r0
 80089e8:	0964      	lsrs	r4, r4, #5
 80089ea:	4635      	mov	r5, r6
 80089ec:	9300      	str	r3, [sp, #0]
 80089ee:	463a      	mov	r2, r7
 80089f0:	4616      	mov	r6, r2
 80089f2:	3201      	adds	r2, #1
 80089f4:	7830      	ldrb	r0, [r6, #0]
 80089f6:	f7ff ff9b 	bl	8008930 <__hexdig_fun>
 80089fa:	2800      	cmp	r0, #0
 80089fc:	d1f8      	bne.n	80089f0 <__gethex+0x94>
 80089fe:	9901      	ldr	r1, [sp, #4]
 8008a00:	4652      	mov	r2, sl
 8008a02:	4630      	mov	r0, r6
 8008a04:	f001 fa0c 	bl	8009e20 <strncmp>
 8008a08:	b980      	cbnz	r0, 8008a2c <__gethex+0xd0>
 8008a0a:	b94d      	cbnz	r5, 8008a20 <__gethex+0xc4>
 8008a0c:	eb06 050a 	add.w	r5, r6, sl
 8008a10:	462a      	mov	r2, r5
 8008a12:	4616      	mov	r6, r2
 8008a14:	3201      	adds	r2, #1
 8008a16:	7830      	ldrb	r0, [r6, #0]
 8008a18:	f7ff ff8a 	bl	8008930 <__hexdig_fun>
 8008a1c:	2800      	cmp	r0, #0
 8008a1e:	d1f8      	bne.n	8008a12 <__gethex+0xb6>
 8008a20:	1bad      	subs	r5, r5, r6
 8008a22:	00ad      	lsls	r5, r5, #2
 8008a24:	e004      	b.n	8008a30 <__gethex+0xd4>
 8008a26:	2400      	movs	r4, #0
 8008a28:	4625      	mov	r5, r4
 8008a2a:	e7e0      	b.n	80089ee <__gethex+0x92>
 8008a2c:	2d00      	cmp	r5, #0
 8008a2e:	d1f7      	bne.n	8008a20 <__gethex+0xc4>
 8008a30:	7833      	ldrb	r3, [r6, #0]
 8008a32:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8008a36:	2b50      	cmp	r3, #80	; 0x50
 8008a38:	d13b      	bne.n	8008ab2 <__gethex+0x156>
 8008a3a:	7873      	ldrb	r3, [r6, #1]
 8008a3c:	2b2b      	cmp	r3, #43	; 0x2b
 8008a3e:	d02c      	beq.n	8008a9a <__gethex+0x13e>
 8008a40:	2b2d      	cmp	r3, #45	; 0x2d
 8008a42:	d02e      	beq.n	8008aa2 <__gethex+0x146>
 8008a44:	1c71      	adds	r1, r6, #1
 8008a46:	f04f 0900 	mov.w	r9, #0
 8008a4a:	7808      	ldrb	r0, [r1, #0]
 8008a4c:	f7ff ff70 	bl	8008930 <__hexdig_fun>
 8008a50:	1e43      	subs	r3, r0, #1
 8008a52:	b2db      	uxtb	r3, r3
 8008a54:	2b18      	cmp	r3, #24
 8008a56:	d82c      	bhi.n	8008ab2 <__gethex+0x156>
 8008a58:	f1a0 0210 	sub.w	r2, r0, #16
 8008a5c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8008a60:	f7ff ff66 	bl	8008930 <__hexdig_fun>
 8008a64:	1e43      	subs	r3, r0, #1
 8008a66:	b2db      	uxtb	r3, r3
 8008a68:	2b18      	cmp	r3, #24
 8008a6a:	d91d      	bls.n	8008aa8 <__gethex+0x14c>
 8008a6c:	f1b9 0f00 	cmp.w	r9, #0
 8008a70:	d000      	beq.n	8008a74 <__gethex+0x118>
 8008a72:	4252      	negs	r2, r2
 8008a74:	4415      	add	r5, r2
 8008a76:	f8cb 1000 	str.w	r1, [fp]
 8008a7a:	b1e4      	cbz	r4, 8008ab6 <__gethex+0x15a>
 8008a7c:	9b00      	ldr	r3, [sp, #0]
 8008a7e:	2b00      	cmp	r3, #0
 8008a80:	bf14      	ite	ne
 8008a82:	2700      	movne	r7, #0
 8008a84:	2706      	moveq	r7, #6
 8008a86:	4638      	mov	r0, r7
 8008a88:	b009      	add	sp, #36	; 0x24
 8008a8a:	ecbd 8b02 	vpop	{d8}
 8008a8e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008a92:	463e      	mov	r6, r7
 8008a94:	4625      	mov	r5, r4
 8008a96:	2401      	movs	r4, #1
 8008a98:	e7ca      	b.n	8008a30 <__gethex+0xd4>
 8008a9a:	f04f 0900 	mov.w	r9, #0
 8008a9e:	1cb1      	adds	r1, r6, #2
 8008aa0:	e7d3      	b.n	8008a4a <__gethex+0xee>
 8008aa2:	f04f 0901 	mov.w	r9, #1
 8008aa6:	e7fa      	b.n	8008a9e <__gethex+0x142>
 8008aa8:	230a      	movs	r3, #10
 8008aaa:	fb03 0202 	mla	r2, r3, r2, r0
 8008aae:	3a10      	subs	r2, #16
 8008ab0:	e7d4      	b.n	8008a5c <__gethex+0x100>
 8008ab2:	4631      	mov	r1, r6
 8008ab4:	e7df      	b.n	8008a76 <__gethex+0x11a>
 8008ab6:	1bf3      	subs	r3, r6, r7
 8008ab8:	3b01      	subs	r3, #1
 8008aba:	4621      	mov	r1, r4
 8008abc:	2b07      	cmp	r3, #7
 8008abe:	dc0b      	bgt.n	8008ad8 <__gethex+0x17c>
 8008ac0:	ee18 0a10 	vmov	r0, s16
 8008ac4:	f000 fa7e 	bl	8008fc4 <_Balloc>
 8008ac8:	4604      	mov	r4, r0
 8008aca:	b940      	cbnz	r0, 8008ade <__gethex+0x182>
 8008acc:	4b5d      	ldr	r3, [pc, #372]	; (8008c44 <__gethex+0x2e8>)
 8008ace:	4602      	mov	r2, r0
 8008ad0:	21de      	movs	r1, #222	; 0xde
 8008ad2:	485d      	ldr	r0, [pc, #372]	; (8008c48 <__gethex+0x2ec>)
 8008ad4:	f001 f9c6 	bl	8009e64 <__assert_func>
 8008ad8:	3101      	adds	r1, #1
 8008ada:	105b      	asrs	r3, r3, #1
 8008adc:	e7ee      	b.n	8008abc <__gethex+0x160>
 8008ade:	f100 0914 	add.w	r9, r0, #20
 8008ae2:	f04f 0b00 	mov.w	fp, #0
 8008ae6:	f1ca 0301 	rsb	r3, sl, #1
 8008aea:	f8cd 9008 	str.w	r9, [sp, #8]
 8008aee:	f8cd b000 	str.w	fp, [sp]
 8008af2:	9306      	str	r3, [sp, #24]
 8008af4:	42b7      	cmp	r7, r6
 8008af6:	d340      	bcc.n	8008b7a <__gethex+0x21e>
 8008af8:	9802      	ldr	r0, [sp, #8]
 8008afa:	9b00      	ldr	r3, [sp, #0]
 8008afc:	f840 3b04 	str.w	r3, [r0], #4
 8008b00:	eba0 0009 	sub.w	r0, r0, r9
 8008b04:	1080      	asrs	r0, r0, #2
 8008b06:	0146      	lsls	r6, r0, #5
 8008b08:	6120      	str	r0, [r4, #16]
 8008b0a:	4618      	mov	r0, r3
 8008b0c:	f000 fb4c 	bl	80091a8 <__hi0bits>
 8008b10:	1a30      	subs	r0, r6, r0
 8008b12:	f8d8 6000 	ldr.w	r6, [r8]
 8008b16:	42b0      	cmp	r0, r6
 8008b18:	dd63      	ble.n	8008be2 <__gethex+0x286>
 8008b1a:	1b87      	subs	r7, r0, r6
 8008b1c:	4639      	mov	r1, r7
 8008b1e:	4620      	mov	r0, r4
 8008b20:	f000 fef0 	bl	8009904 <__any_on>
 8008b24:	4682      	mov	sl, r0
 8008b26:	b1a8      	cbz	r0, 8008b54 <__gethex+0x1f8>
 8008b28:	1e7b      	subs	r3, r7, #1
 8008b2a:	1159      	asrs	r1, r3, #5
 8008b2c:	f003 021f 	and.w	r2, r3, #31
 8008b30:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8008b34:	f04f 0a01 	mov.w	sl, #1
 8008b38:	fa0a f202 	lsl.w	r2, sl, r2
 8008b3c:	420a      	tst	r2, r1
 8008b3e:	d009      	beq.n	8008b54 <__gethex+0x1f8>
 8008b40:	4553      	cmp	r3, sl
 8008b42:	dd05      	ble.n	8008b50 <__gethex+0x1f4>
 8008b44:	1eb9      	subs	r1, r7, #2
 8008b46:	4620      	mov	r0, r4
 8008b48:	f000 fedc 	bl	8009904 <__any_on>
 8008b4c:	2800      	cmp	r0, #0
 8008b4e:	d145      	bne.n	8008bdc <__gethex+0x280>
 8008b50:	f04f 0a02 	mov.w	sl, #2
 8008b54:	4639      	mov	r1, r7
 8008b56:	4620      	mov	r0, r4
 8008b58:	f7ff fe98 	bl	800888c <rshift>
 8008b5c:	443d      	add	r5, r7
 8008b5e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8008b62:	42ab      	cmp	r3, r5
 8008b64:	da4c      	bge.n	8008c00 <__gethex+0x2a4>
 8008b66:	ee18 0a10 	vmov	r0, s16
 8008b6a:	4621      	mov	r1, r4
 8008b6c:	f000 fa6a 	bl	8009044 <_Bfree>
 8008b70:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8008b72:	2300      	movs	r3, #0
 8008b74:	6013      	str	r3, [r2, #0]
 8008b76:	27a3      	movs	r7, #163	; 0xa3
 8008b78:	e785      	b.n	8008a86 <__gethex+0x12a>
 8008b7a:	1e73      	subs	r3, r6, #1
 8008b7c:	9a05      	ldr	r2, [sp, #20]
 8008b7e:	9303      	str	r3, [sp, #12]
 8008b80:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8008b84:	4293      	cmp	r3, r2
 8008b86:	d019      	beq.n	8008bbc <__gethex+0x260>
 8008b88:	f1bb 0f20 	cmp.w	fp, #32
 8008b8c:	d107      	bne.n	8008b9e <__gethex+0x242>
 8008b8e:	9b02      	ldr	r3, [sp, #8]
 8008b90:	9a00      	ldr	r2, [sp, #0]
 8008b92:	f843 2b04 	str.w	r2, [r3], #4
 8008b96:	9302      	str	r3, [sp, #8]
 8008b98:	2300      	movs	r3, #0
 8008b9a:	9300      	str	r3, [sp, #0]
 8008b9c:	469b      	mov	fp, r3
 8008b9e:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8008ba2:	f7ff fec5 	bl	8008930 <__hexdig_fun>
 8008ba6:	9b00      	ldr	r3, [sp, #0]
 8008ba8:	f000 000f 	and.w	r0, r0, #15
 8008bac:	fa00 f00b 	lsl.w	r0, r0, fp
 8008bb0:	4303      	orrs	r3, r0
 8008bb2:	9300      	str	r3, [sp, #0]
 8008bb4:	f10b 0b04 	add.w	fp, fp, #4
 8008bb8:	9b03      	ldr	r3, [sp, #12]
 8008bba:	e00d      	b.n	8008bd8 <__gethex+0x27c>
 8008bbc:	9b03      	ldr	r3, [sp, #12]
 8008bbe:	9a06      	ldr	r2, [sp, #24]
 8008bc0:	4413      	add	r3, r2
 8008bc2:	42bb      	cmp	r3, r7
 8008bc4:	d3e0      	bcc.n	8008b88 <__gethex+0x22c>
 8008bc6:	4618      	mov	r0, r3
 8008bc8:	9901      	ldr	r1, [sp, #4]
 8008bca:	9307      	str	r3, [sp, #28]
 8008bcc:	4652      	mov	r2, sl
 8008bce:	f001 f927 	bl	8009e20 <strncmp>
 8008bd2:	9b07      	ldr	r3, [sp, #28]
 8008bd4:	2800      	cmp	r0, #0
 8008bd6:	d1d7      	bne.n	8008b88 <__gethex+0x22c>
 8008bd8:	461e      	mov	r6, r3
 8008bda:	e78b      	b.n	8008af4 <__gethex+0x198>
 8008bdc:	f04f 0a03 	mov.w	sl, #3
 8008be0:	e7b8      	b.n	8008b54 <__gethex+0x1f8>
 8008be2:	da0a      	bge.n	8008bfa <__gethex+0x29e>
 8008be4:	1a37      	subs	r7, r6, r0
 8008be6:	4621      	mov	r1, r4
 8008be8:	ee18 0a10 	vmov	r0, s16
 8008bec:	463a      	mov	r2, r7
 8008bee:	f000 fc45 	bl	800947c <__lshift>
 8008bf2:	1bed      	subs	r5, r5, r7
 8008bf4:	4604      	mov	r4, r0
 8008bf6:	f100 0914 	add.w	r9, r0, #20
 8008bfa:	f04f 0a00 	mov.w	sl, #0
 8008bfe:	e7ae      	b.n	8008b5e <__gethex+0x202>
 8008c00:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8008c04:	42a8      	cmp	r0, r5
 8008c06:	dd72      	ble.n	8008cee <__gethex+0x392>
 8008c08:	1b45      	subs	r5, r0, r5
 8008c0a:	42ae      	cmp	r6, r5
 8008c0c:	dc36      	bgt.n	8008c7c <__gethex+0x320>
 8008c0e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8008c12:	2b02      	cmp	r3, #2
 8008c14:	d02a      	beq.n	8008c6c <__gethex+0x310>
 8008c16:	2b03      	cmp	r3, #3
 8008c18:	d02c      	beq.n	8008c74 <__gethex+0x318>
 8008c1a:	2b01      	cmp	r3, #1
 8008c1c:	d11c      	bne.n	8008c58 <__gethex+0x2fc>
 8008c1e:	42ae      	cmp	r6, r5
 8008c20:	d11a      	bne.n	8008c58 <__gethex+0x2fc>
 8008c22:	2e01      	cmp	r6, #1
 8008c24:	d112      	bne.n	8008c4c <__gethex+0x2f0>
 8008c26:	9a04      	ldr	r2, [sp, #16]
 8008c28:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8008c2c:	6013      	str	r3, [r2, #0]
 8008c2e:	2301      	movs	r3, #1
 8008c30:	6123      	str	r3, [r4, #16]
 8008c32:	f8c9 3000 	str.w	r3, [r9]
 8008c36:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008c38:	2762      	movs	r7, #98	; 0x62
 8008c3a:	601c      	str	r4, [r3, #0]
 8008c3c:	e723      	b.n	8008a86 <__gethex+0x12a>
 8008c3e:	bf00      	nop
 8008c40:	0800ec60 	.word	0x0800ec60
 8008c44:	0800ebe8 	.word	0x0800ebe8
 8008c48:	0800ebf9 	.word	0x0800ebf9
 8008c4c:	1e71      	subs	r1, r6, #1
 8008c4e:	4620      	mov	r0, r4
 8008c50:	f000 fe58 	bl	8009904 <__any_on>
 8008c54:	2800      	cmp	r0, #0
 8008c56:	d1e6      	bne.n	8008c26 <__gethex+0x2ca>
 8008c58:	ee18 0a10 	vmov	r0, s16
 8008c5c:	4621      	mov	r1, r4
 8008c5e:	f000 f9f1 	bl	8009044 <_Bfree>
 8008c62:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8008c64:	2300      	movs	r3, #0
 8008c66:	6013      	str	r3, [r2, #0]
 8008c68:	2750      	movs	r7, #80	; 0x50
 8008c6a:	e70c      	b.n	8008a86 <__gethex+0x12a>
 8008c6c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008c6e:	2b00      	cmp	r3, #0
 8008c70:	d1f2      	bne.n	8008c58 <__gethex+0x2fc>
 8008c72:	e7d8      	b.n	8008c26 <__gethex+0x2ca>
 8008c74:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008c76:	2b00      	cmp	r3, #0
 8008c78:	d1d5      	bne.n	8008c26 <__gethex+0x2ca>
 8008c7a:	e7ed      	b.n	8008c58 <__gethex+0x2fc>
 8008c7c:	1e6f      	subs	r7, r5, #1
 8008c7e:	f1ba 0f00 	cmp.w	sl, #0
 8008c82:	d131      	bne.n	8008ce8 <__gethex+0x38c>
 8008c84:	b127      	cbz	r7, 8008c90 <__gethex+0x334>
 8008c86:	4639      	mov	r1, r7
 8008c88:	4620      	mov	r0, r4
 8008c8a:	f000 fe3b 	bl	8009904 <__any_on>
 8008c8e:	4682      	mov	sl, r0
 8008c90:	117b      	asrs	r3, r7, #5
 8008c92:	2101      	movs	r1, #1
 8008c94:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8008c98:	f007 071f 	and.w	r7, r7, #31
 8008c9c:	fa01 f707 	lsl.w	r7, r1, r7
 8008ca0:	421f      	tst	r7, r3
 8008ca2:	4629      	mov	r1, r5
 8008ca4:	4620      	mov	r0, r4
 8008ca6:	bf18      	it	ne
 8008ca8:	f04a 0a02 	orrne.w	sl, sl, #2
 8008cac:	1b76      	subs	r6, r6, r5
 8008cae:	f7ff fded 	bl	800888c <rshift>
 8008cb2:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8008cb6:	2702      	movs	r7, #2
 8008cb8:	f1ba 0f00 	cmp.w	sl, #0
 8008cbc:	d048      	beq.n	8008d50 <__gethex+0x3f4>
 8008cbe:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8008cc2:	2b02      	cmp	r3, #2
 8008cc4:	d015      	beq.n	8008cf2 <__gethex+0x396>
 8008cc6:	2b03      	cmp	r3, #3
 8008cc8:	d017      	beq.n	8008cfa <__gethex+0x39e>
 8008cca:	2b01      	cmp	r3, #1
 8008ccc:	d109      	bne.n	8008ce2 <__gethex+0x386>
 8008cce:	f01a 0f02 	tst.w	sl, #2
 8008cd2:	d006      	beq.n	8008ce2 <__gethex+0x386>
 8008cd4:	f8d9 0000 	ldr.w	r0, [r9]
 8008cd8:	ea4a 0a00 	orr.w	sl, sl, r0
 8008cdc:	f01a 0f01 	tst.w	sl, #1
 8008ce0:	d10e      	bne.n	8008d00 <__gethex+0x3a4>
 8008ce2:	f047 0710 	orr.w	r7, r7, #16
 8008ce6:	e033      	b.n	8008d50 <__gethex+0x3f4>
 8008ce8:	f04f 0a01 	mov.w	sl, #1
 8008cec:	e7d0      	b.n	8008c90 <__gethex+0x334>
 8008cee:	2701      	movs	r7, #1
 8008cf0:	e7e2      	b.n	8008cb8 <__gethex+0x35c>
 8008cf2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008cf4:	f1c3 0301 	rsb	r3, r3, #1
 8008cf8:	9315      	str	r3, [sp, #84]	; 0x54
 8008cfa:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008cfc:	2b00      	cmp	r3, #0
 8008cfe:	d0f0      	beq.n	8008ce2 <__gethex+0x386>
 8008d00:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8008d04:	f104 0314 	add.w	r3, r4, #20
 8008d08:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8008d0c:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8008d10:	f04f 0c00 	mov.w	ip, #0
 8008d14:	4618      	mov	r0, r3
 8008d16:	f853 2b04 	ldr.w	r2, [r3], #4
 8008d1a:	f1b2 3fff 	cmp.w	r2, #4294967295
 8008d1e:	d01c      	beq.n	8008d5a <__gethex+0x3fe>
 8008d20:	3201      	adds	r2, #1
 8008d22:	6002      	str	r2, [r0, #0]
 8008d24:	2f02      	cmp	r7, #2
 8008d26:	f104 0314 	add.w	r3, r4, #20
 8008d2a:	d13f      	bne.n	8008dac <__gethex+0x450>
 8008d2c:	f8d8 2000 	ldr.w	r2, [r8]
 8008d30:	3a01      	subs	r2, #1
 8008d32:	42b2      	cmp	r2, r6
 8008d34:	d10a      	bne.n	8008d4c <__gethex+0x3f0>
 8008d36:	1171      	asrs	r1, r6, #5
 8008d38:	2201      	movs	r2, #1
 8008d3a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8008d3e:	f006 061f 	and.w	r6, r6, #31
 8008d42:	fa02 f606 	lsl.w	r6, r2, r6
 8008d46:	421e      	tst	r6, r3
 8008d48:	bf18      	it	ne
 8008d4a:	4617      	movne	r7, r2
 8008d4c:	f047 0720 	orr.w	r7, r7, #32
 8008d50:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008d52:	601c      	str	r4, [r3, #0]
 8008d54:	9b04      	ldr	r3, [sp, #16]
 8008d56:	601d      	str	r5, [r3, #0]
 8008d58:	e695      	b.n	8008a86 <__gethex+0x12a>
 8008d5a:	4299      	cmp	r1, r3
 8008d5c:	f843 cc04 	str.w	ip, [r3, #-4]
 8008d60:	d8d8      	bhi.n	8008d14 <__gethex+0x3b8>
 8008d62:	68a3      	ldr	r3, [r4, #8]
 8008d64:	459b      	cmp	fp, r3
 8008d66:	db19      	blt.n	8008d9c <__gethex+0x440>
 8008d68:	6861      	ldr	r1, [r4, #4]
 8008d6a:	ee18 0a10 	vmov	r0, s16
 8008d6e:	3101      	adds	r1, #1
 8008d70:	f000 f928 	bl	8008fc4 <_Balloc>
 8008d74:	4681      	mov	r9, r0
 8008d76:	b918      	cbnz	r0, 8008d80 <__gethex+0x424>
 8008d78:	4b1a      	ldr	r3, [pc, #104]	; (8008de4 <__gethex+0x488>)
 8008d7a:	4602      	mov	r2, r0
 8008d7c:	2184      	movs	r1, #132	; 0x84
 8008d7e:	e6a8      	b.n	8008ad2 <__gethex+0x176>
 8008d80:	6922      	ldr	r2, [r4, #16]
 8008d82:	3202      	adds	r2, #2
 8008d84:	f104 010c 	add.w	r1, r4, #12
 8008d88:	0092      	lsls	r2, r2, #2
 8008d8a:	300c      	adds	r0, #12
 8008d8c:	f000 f90c 	bl	8008fa8 <memcpy>
 8008d90:	4621      	mov	r1, r4
 8008d92:	ee18 0a10 	vmov	r0, s16
 8008d96:	f000 f955 	bl	8009044 <_Bfree>
 8008d9a:	464c      	mov	r4, r9
 8008d9c:	6923      	ldr	r3, [r4, #16]
 8008d9e:	1c5a      	adds	r2, r3, #1
 8008da0:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8008da4:	6122      	str	r2, [r4, #16]
 8008da6:	2201      	movs	r2, #1
 8008da8:	615a      	str	r2, [r3, #20]
 8008daa:	e7bb      	b.n	8008d24 <__gethex+0x3c8>
 8008dac:	6922      	ldr	r2, [r4, #16]
 8008dae:	455a      	cmp	r2, fp
 8008db0:	dd0b      	ble.n	8008dca <__gethex+0x46e>
 8008db2:	2101      	movs	r1, #1
 8008db4:	4620      	mov	r0, r4
 8008db6:	f7ff fd69 	bl	800888c <rshift>
 8008dba:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8008dbe:	3501      	adds	r5, #1
 8008dc0:	42ab      	cmp	r3, r5
 8008dc2:	f6ff aed0 	blt.w	8008b66 <__gethex+0x20a>
 8008dc6:	2701      	movs	r7, #1
 8008dc8:	e7c0      	b.n	8008d4c <__gethex+0x3f0>
 8008dca:	f016 061f 	ands.w	r6, r6, #31
 8008dce:	d0fa      	beq.n	8008dc6 <__gethex+0x46a>
 8008dd0:	4453      	add	r3, sl
 8008dd2:	f1c6 0620 	rsb	r6, r6, #32
 8008dd6:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8008dda:	f000 f9e5 	bl	80091a8 <__hi0bits>
 8008dde:	42b0      	cmp	r0, r6
 8008de0:	dbe7      	blt.n	8008db2 <__gethex+0x456>
 8008de2:	e7f0      	b.n	8008dc6 <__gethex+0x46a>
 8008de4:	0800ebe8 	.word	0x0800ebe8

08008de8 <L_shift>:
 8008de8:	f1c2 0208 	rsb	r2, r2, #8
 8008dec:	0092      	lsls	r2, r2, #2
 8008dee:	b570      	push	{r4, r5, r6, lr}
 8008df0:	f1c2 0620 	rsb	r6, r2, #32
 8008df4:	6843      	ldr	r3, [r0, #4]
 8008df6:	6804      	ldr	r4, [r0, #0]
 8008df8:	fa03 f506 	lsl.w	r5, r3, r6
 8008dfc:	432c      	orrs	r4, r5
 8008dfe:	40d3      	lsrs	r3, r2
 8008e00:	6004      	str	r4, [r0, #0]
 8008e02:	f840 3f04 	str.w	r3, [r0, #4]!
 8008e06:	4288      	cmp	r0, r1
 8008e08:	d3f4      	bcc.n	8008df4 <L_shift+0xc>
 8008e0a:	bd70      	pop	{r4, r5, r6, pc}

08008e0c <__match>:
 8008e0c:	b530      	push	{r4, r5, lr}
 8008e0e:	6803      	ldr	r3, [r0, #0]
 8008e10:	3301      	adds	r3, #1
 8008e12:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008e16:	b914      	cbnz	r4, 8008e1e <__match+0x12>
 8008e18:	6003      	str	r3, [r0, #0]
 8008e1a:	2001      	movs	r0, #1
 8008e1c:	bd30      	pop	{r4, r5, pc}
 8008e1e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008e22:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8008e26:	2d19      	cmp	r5, #25
 8008e28:	bf98      	it	ls
 8008e2a:	3220      	addls	r2, #32
 8008e2c:	42a2      	cmp	r2, r4
 8008e2e:	d0f0      	beq.n	8008e12 <__match+0x6>
 8008e30:	2000      	movs	r0, #0
 8008e32:	e7f3      	b.n	8008e1c <__match+0x10>

08008e34 <__hexnan>:
 8008e34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008e38:	680b      	ldr	r3, [r1, #0]
 8008e3a:	115e      	asrs	r6, r3, #5
 8008e3c:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8008e40:	f013 031f 	ands.w	r3, r3, #31
 8008e44:	b087      	sub	sp, #28
 8008e46:	bf18      	it	ne
 8008e48:	3604      	addne	r6, #4
 8008e4a:	2500      	movs	r5, #0
 8008e4c:	1f37      	subs	r7, r6, #4
 8008e4e:	4690      	mov	r8, r2
 8008e50:	6802      	ldr	r2, [r0, #0]
 8008e52:	9301      	str	r3, [sp, #4]
 8008e54:	4682      	mov	sl, r0
 8008e56:	f846 5c04 	str.w	r5, [r6, #-4]
 8008e5a:	46b9      	mov	r9, r7
 8008e5c:	463c      	mov	r4, r7
 8008e5e:	9502      	str	r5, [sp, #8]
 8008e60:	46ab      	mov	fp, r5
 8008e62:	7851      	ldrb	r1, [r2, #1]
 8008e64:	1c53      	adds	r3, r2, #1
 8008e66:	9303      	str	r3, [sp, #12]
 8008e68:	b341      	cbz	r1, 8008ebc <__hexnan+0x88>
 8008e6a:	4608      	mov	r0, r1
 8008e6c:	9205      	str	r2, [sp, #20]
 8008e6e:	9104      	str	r1, [sp, #16]
 8008e70:	f7ff fd5e 	bl	8008930 <__hexdig_fun>
 8008e74:	2800      	cmp	r0, #0
 8008e76:	d14f      	bne.n	8008f18 <__hexnan+0xe4>
 8008e78:	9904      	ldr	r1, [sp, #16]
 8008e7a:	9a05      	ldr	r2, [sp, #20]
 8008e7c:	2920      	cmp	r1, #32
 8008e7e:	d818      	bhi.n	8008eb2 <__hexnan+0x7e>
 8008e80:	9b02      	ldr	r3, [sp, #8]
 8008e82:	459b      	cmp	fp, r3
 8008e84:	dd13      	ble.n	8008eae <__hexnan+0x7a>
 8008e86:	454c      	cmp	r4, r9
 8008e88:	d206      	bcs.n	8008e98 <__hexnan+0x64>
 8008e8a:	2d07      	cmp	r5, #7
 8008e8c:	dc04      	bgt.n	8008e98 <__hexnan+0x64>
 8008e8e:	462a      	mov	r2, r5
 8008e90:	4649      	mov	r1, r9
 8008e92:	4620      	mov	r0, r4
 8008e94:	f7ff ffa8 	bl	8008de8 <L_shift>
 8008e98:	4544      	cmp	r4, r8
 8008e9a:	d950      	bls.n	8008f3e <__hexnan+0x10a>
 8008e9c:	2300      	movs	r3, #0
 8008e9e:	f1a4 0904 	sub.w	r9, r4, #4
 8008ea2:	f844 3c04 	str.w	r3, [r4, #-4]
 8008ea6:	f8cd b008 	str.w	fp, [sp, #8]
 8008eaa:	464c      	mov	r4, r9
 8008eac:	461d      	mov	r5, r3
 8008eae:	9a03      	ldr	r2, [sp, #12]
 8008eb0:	e7d7      	b.n	8008e62 <__hexnan+0x2e>
 8008eb2:	2929      	cmp	r1, #41	; 0x29
 8008eb4:	d156      	bne.n	8008f64 <__hexnan+0x130>
 8008eb6:	3202      	adds	r2, #2
 8008eb8:	f8ca 2000 	str.w	r2, [sl]
 8008ebc:	f1bb 0f00 	cmp.w	fp, #0
 8008ec0:	d050      	beq.n	8008f64 <__hexnan+0x130>
 8008ec2:	454c      	cmp	r4, r9
 8008ec4:	d206      	bcs.n	8008ed4 <__hexnan+0xa0>
 8008ec6:	2d07      	cmp	r5, #7
 8008ec8:	dc04      	bgt.n	8008ed4 <__hexnan+0xa0>
 8008eca:	462a      	mov	r2, r5
 8008ecc:	4649      	mov	r1, r9
 8008ece:	4620      	mov	r0, r4
 8008ed0:	f7ff ff8a 	bl	8008de8 <L_shift>
 8008ed4:	4544      	cmp	r4, r8
 8008ed6:	d934      	bls.n	8008f42 <__hexnan+0x10e>
 8008ed8:	f1a8 0204 	sub.w	r2, r8, #4
 8008edc:	4623      	mov	r3, r4
 8008ede:	f853 1b04 	ldr.w	r1, [r3], #4
 8008ee2:	f842 1f04 	str.w	r1, [r2, #4]!
 8008ee6:	429f      	cmp	r7, r3
 8008ee8:	d2f9      	bcs.n	8008ede <__hexnan+0xaa>
 8008eea:	1b3b      	subs	r3, r7, r4
 8008eec:	f023 0303 	bic.w	r3, r3, #3
 8008ef0:	3304      	adds	r3, #4
 8008ef2:	3401      	adds	r4, #1
 8008ef4:	3e03      	subs	r6, #3
 8008ef6:	42b4      	cmp	r4, r6
 8008ef8:	bf88      	it	hi
 8008efa:	2304      	movhi	r3, #4
 8008efc:	4443      	add	r3, r8
 8008efe:	2200      	movs	r2, #0
 8008f00:	f843 2b04 	str.w	r2, [r3], #4
 8008f04:	429f      	cmp	r7, r3
 8008f06:	d2fb      	bcs.n	8008f00 <__hexnan+0xcc>
 8008f08:	683b      	ldr	r3, [r7, #0]
 8008f0a:	b91b      	cbnz	r3, 8008f14 <__hexnan+0xe0>
 8008f0c:	4547      	cmp	r7, r8
 8008f0e:	d127      	bne.n	8008f60 <__hexnan+0x12c>
 8008f10:	2301      	movs	r3, #1
 8008f12:	603b      	str	r3, [r7, #0]
 8008f14:	2005      	movs	r0, #5
 8008f16:	e026      	b.n	8008f66 <__hexnan+0x132>
 8008f18:	3501      	adds	r5, #1
 8008f1a:	2d08      	cmp	r5, #8
 8008f1c:	f10b 0b01 	add.w	fp, fp, #1
 8008f20:	dd06      	ble.n	8008f30 <__hexnan+0xfc>
 8008f22:	4544      	cmp	r4, r8
 8008f24:	d9c3      	bls.n	8008eae <__hexnan+0x7a>
 8008f26:	2300      	movs	r3, #0
 8008f28:	f844 3c04 	str.w	r3, [r4, #-4]
 8008f2c:	2501      	movs	r5, #1
 8008f2e:	3c04      	subs	r4, #4
 8008f30:	6822      	ldr	r2, [r4, #0]
 8008f32:	f000 000f 	and.w	r0, r0, #15
 8008f36:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 8008f3a:	6022      	str	r2, [r4, #0]
 8008f3c:	e7b7      	b.n	8008eae <__hexnan+0x7a>
 8008f3e:	2508      	movs	r5, #8
 8008f40:	e7b5      	b.n	8008eae <__hexnan+0x7a>
 8008f42:	9b01      	ldr	r3, [sp, #4]
 8008f44:	2b00      	cmp	r3, #0
 8008f46:	d0df      	beq.n	8008f08 <__hexnan+0xd4>
 8008f48:	f04f 32ff 	mov.w	r2, #4294967295
 8008f4c:	f1c3 0320 	rsb	r3, r3, #32
 8008f50:	fa22 f303 	lsr.w	r3, r2, r3
 8008f54:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8008f58:	401a      	ands	r2, r3
 8008f5a:	f846 2c04 	str.w	r2, [r6, #-4]
 8008f5e:	e7d3      	b.n	8008f08 <__hexnan+0xd4>
 8008f60:	3f04      	subs	r7, #4
 8008f62:	e7d1      	b.n	8008f08 <__hexnan+0xd4>
 8008f64:	2004      	movs	r0, #4
 8008f66:	b007      	add	sp, #28
 8008f68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08008f6c <_localeconv_r>:
 8008f6c:	4800      	ldr	r0, [pc, #0]	; (8008f70 <_localeconv_r+0x4>)
 8008f6e:	4770      	bx	lr
 8008f70:	2000017c 	.word	0x2000017c

08008f74 <malloc>:
 8008f74:	4b02      	ldr	r3, [pc, #8]	; (8008f80 <malloc+0xc>)
 8008f76:	4601      	mov	r1, r0
 8008f78:	6818      	ldr	r0, [r3, #0]
 8008f7a:	f000 bd67 	b.w	8009a4c <_malloc_r>
 8008f7e:	bf00      	nop
 8008f80:	20000024 	.word	0x20000024

08008f84 <__ascii_mbtowc>:
 8008f84:	b082      	sub	sp, #8
 8008f86:	b901      	cbnz	r1, 8008f8a <__ascii_mbtowc+0x6>
 8008f88:	a901      	add	r1, sp, #4
 8008f8a:	b142      	cbz	r2, 8008f9e <__ascii_mbtowc+0x1a>
 8008f8c:	b14b      	cbz	r3, 8008fa2 <__ascii_mbtowc+0x1e>
 8008f8e:	7813      	ldrb	r3, [r2, #0]
 8008f90:	600b      	str	r3, [r1, #0]
 8008f92:	7812      	ldrb	r2, [r2, #0]
 8008f94:	1e10      	subs	r0, r2, #0
 8008f96:	bf18      	it	ne
 8008f98:	2001      	movne	r0, #1
 8008f9a:	b002      	add	sp, #8
 8008f9c:	4770      	bx	lr
 8008f9e:	4610      	mov	r0, r2
 8008fa0:	e7fb      	b.n	8008f9a <__ascii_mbtowc+0x16>
 8008fa2:	f06f 0001 	mvn.w	r0, #1
 8008fa6:	e7f8      	b.n	8008f9a <__ascii_mbtowc+0x16>

08008fa8 <memcpy>:
 8008fa8:	440a      	add	r2, r1
 8008faa:	4291      	cmp	r1, r2
 8008fac:	f100 33ff 	add.w	r3, r0, #4294967295
 8008fb0:	d100      	bne.n	8008fb4 <memcpy+0xc>
 8008fb2:	4770      	bx	lr
 8008fb4:	b510      	push	{r4, lr}
 8008fb6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008fba:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008fbe:	4291      	cmp	r1, r2
 8008fc0:	d1f9      	bne.n	8008fb6 <memcpy+0xe>
 8008fc2:	bd10      	pop	{r4, pc}

08008fc4 <_Balloc>:
 8008fc4:	b570      	push	{r4, r5, r6, lr}
 8008fc6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8008fc8:	4604      	mov	r4, r0
 8008fca:	460d      	mov	r5, r1
 8008fcc:	b976      	cbnz	r6, 8008fec <_Balloc+0x28>
 8008fce:	2010      	movs	r0, #16
 8008fd0:	f7ff ffd0 	bl	8008f74 <malloc>
 8008fd4:	4602      	mov	r2, r0
 8008fd6:	6260      	str	r0, [r4, #36]	; 0x24
 8008fd8:	b920      	cbnz	r0, 8008fe4 <_Balloc+0x20>
 8008fda:	4b18      	ldr	r3, [pc, #96]	; (800903c <_Balloc+0x78>)
 8008fdc:	4818      	ldr	r0, [pc, #96]	; (8009040 <_Balloc+0x7c>)
 8008fde:	2166      	movs	r1, #102	; 0x66
 8008fe0:	f000 ff40 	bl	8009e64 <__assert_func>
 8008fe4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008fe8:	6006      	str	r6, [r0, #0]
 8008fea:	60c6      	str	r6, [r0, #12]
 8008fec:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8008fee:	68f3      	ldr	r3, [r6, #12]
 8008ff0:	b183      	cbz	r3, 8009014 <_Balloc+0x50>
 8008ff2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008ff4:	68db      	ldr	r3, [r3, #12]
 8008ff6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8008ffa:	b9b8      	cbnz	r0, 800902c <_Balloc+0x68>
 8008ffc:	2101      	movs	r1, #1
 8008ffe:	fa01 f605 	lsl.w	r6, r1, r5
 8009002:	1d72      	adds	r2, r6, #5
 8009004:	0092      	lsls	r2, r2, #2
 8009006:	4620      	mov	r0, r4
 8009008:	f000 fc9d 	bl	8009946 <_calloc_r>
 800900c:	b160      	cbz	r0, 8009028 <_Balloc+0x64>
 800900e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8009012:	e00e      	b.n	8009032 <_Balloc+0x6e>
 8009014:	2221      	movs	r2, #33	; 0x21
 8009016:	2104      	movs	r1, #4
 8009018:	4620      	mov	r0, r4
 800901a:	f000 fc94 	bl	8009946 <_calloc_r>
 800901e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009020:	60f0      	str	r0, [r6, #12]
 8009022:	68db      	ldr	r3, [r3, #12]
 8009024:	2b00      	cmp	r3, #0
 8009026:	d1e4      	bne.n	8008ff2 <_Balloc+0x2e>
 8009028:	2000      	movs	r0, #0
 800902a:	bd70      	pop	{r4, r5, r6, pc}
 800902c:	6802      	ldr	r2, [r0, #0]
 800902e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8009032:	2300      	movs	r3, #0
 8009034:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8009038:	e7f7      	b.n	800902a <_Balloc+0x66>
 800903a:	bf00      	nop
 800903c:	0800eb76 	.word	0x0800eb76
 8009040:	0800ec74 	.word	0x0800ec74

08009044 <_Bfree>:
 8009044:	b570      	push	{r4, r5, r6, lr}
 8009046:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8009048:	4605      	mov	r5, r0
 800904a:	460c      	mov	r4, r1
 800904c:	b976      	cbnz	r6, 800906c <_Bfree+0x28>
 800904e:	2010      	movs	r0, #16
 8009050:	f7ff ff90 	bl	8008f74 <malloc>
 8009054:	4602      	mov	r2, r0
 8009056:	6268      	str	r0, [r5, #36]	; 0x24
 8009058:	b920      	cbnz	r0, 8009064 <_Bfree+0x20>
 800905a:	4b09      	ldr	r3, [pc, #36]	; (8009080 <_Bfree+0x3c>)
 800905c:	4809      	ldr	r0, [pc, #36]	; (8009084 <_Bfree+0x40>)
 800905e:	218a      	movs	r1, #138	; 0x8a
 8009060:	f000 ff00 	bl	8009e64 <__assert_func>
 8009064:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009068:	6006      	str	r6, [r0, #0]
 800906a:	60c6      	str	r6, [r0, #12]
 800906c:	b13c      	cbz	r4, 800907e <_Bfree+0x3a>
 800906e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8009070:	6862      	ldr	r2, [r4, #4]
 8009072:	68db      	ldr	r3, [r3, #12]
 8009074:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009078:	6021      	str	r1, [r4, #0]
 800907a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800907e:	bd70      	pop	{r4, r5, r6, pc}
 8009080:	0800eb76 	.word	0x0800eb76
 8009084:	0800ec74 	.word	0x0800ec74

08009088 <__multadd>:
 8009088:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800908c:	690d      	ldr	r5, [r1, #16]
 800908e:	4607      	mov	r7, r0
 8009090:	460c      	mov	r4, r1
 8009092:	461e      	mov	r6, r3
 8009094:	f101 0c14 	add.w	ip, r1, #20
 8009098:	2000      	movs	r0, #0
 800909a:	f8dc 3000 	ldr.w	r3, [ip]
 800909e:	b299      	uxth	r1, r3
 80090a0:	fb02 6101 	mla	r1, r2, r1, r6
 80090a4:	0c1e      	lsrs	r6, r3, #16
 80090a6:	0c0b      	lsrs	r3, r1, #16
 80090a8:	fb02 3306 	mla	r3, r2, r6, r3
 80090ac:	b289      	uxth	r1, r1
 80090ae:	3001      	adds	r0, #1
 80090b0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80090b4:	4285      	cmp	r5, r0
 80090b6:	f84c 1b04 	str.w	r1, [ip], #4
 80090ba:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80090be:	dcec      	bgt.n	800909a <__multadd+0x12>
 80090c0:	b30e      	cbz	r6, 8009106 <__multadd+0x7e>
 80090c2:	68a3      	ldr	r3, [r4, #8]
 80090c4:	42ab      	cmp	r3, r5
 80090c6:	dc19      	bgt.n	80090fc <__multadd+0x74>
 80090c8:	6861      	ldr	r1, [r4, #4]
 80090ca:	4638      	mov	r0, r7
 80090cc:	3101      	adds	r1, #1
 80090ce:	f7ff ff79 	bl	8008fc4 <_Balloc>
 80090d2:	4680      	mov	r8, r0
 80090d4:	b928      	cbnz	r0, 80090e2 <__multadd+0x5a>
 80090d6:	4602      	mov	r2, r0
 80090d8:	4b0c      	ldr	r3, [pc, #48]	; (800910c <__multadd+0x84>)
 80090da:	480d      	ldr	r0, [pc, #52]	; (8009110 <__multadd+0x88>)
 80090dc:	21b5      	movs	r1, #181	; 0xb5
 80090de:	f000 fec1 	bl	8009e64 <__assert_func>
 80090e2:	6922      	ldr	r2, [r4, #16]
 80090e4:	3202      	adds	r2, #2
 80090e6:	f104 010c 	add.w	r1, r4, #12
 80090ea:	0092      	lsls	r2, r2, #2
 80090ec:	300c      	adds	r0, #12
 80090ee:	f7ff ff5b 	bl	8008fa8 <memcpy>
 80090f2:	4621      	mov	r1, r4
 80090f4:	4638      	mov	r0, r7
 80090f6:	f7ff ffa5 	bl	8009044 <_Bfree>
 80090fa:	4644      	mov	r4, r8
 80090fc:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8009100:	3501      	adds	r5, #1
 8009102:	615e      	str	r6, [r3, #20]
 8009104:	6125      	str	r5, [r4, #16]
 8009106:	4620      	mov	r0, r4
 8009108:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800910c:	0800ebe8 	.word	0x0800ebe8
 8009110:	0800ec74 	.word	0x0800ec74

08009114 <__s2b>:
 8009114:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009118:	460c      	mov	r4, r1
 800911a:	4615      	mov	r5, r2
 800911c:	461f      	mov	r7, r3
 800911e:	2209      	movs	r2, #9
 8009120:	3308      	adds	r3, #8
 8009122:	4606      	mov	r6, r0
 8009124:	fb93 f3f2 	sdiv	r3, r3, r2
 8009128:	2100      	movs	r1, #0
 800912a:	2201      	movs	r2, #1
 800912c:	429a      	cmp	r2, r3
 800912e:	db09      	blt.n	8009144 <__s2b+0x30>
 8009130:	4630      	mov	r0, r6
 8009132:	f7ff ff47 	bl	8008fc4 <_Balloc>
 8009136:	b940      	cbnz	r0, 800914a <__s2b+0x36>
 8009138:	4602      	mov	r2, r0
 800913a:	4b19      	ldr	r3, [pc, #100]	; (80091a0 <__s2b+0x8c>)
 800913c:	4819      	ldr	r0, [pc, #100]	; (80091a4 <__s2b+0x90>)
 800913e:	21ce      	movs	r1, #206	; 0xce
 8009140:	f000 fe90 	bl	8009e64 <__assert_func>
 8009144:	0052      	lsls	r2, r2, #1
 8009146:	3101      	adds	r1, #1
 8009148:	e7f0      	b.n	800912c <__s2b+0x18>
 800914a:	9b08      	ldr	r3, [sp, #32]
 800914c:	6143      	str	r3, [r0, #20]
 800914e:	2d09      	cmp	r5, #9
 8009150:	f04f 0301 	mov.w	r3, #1
 8009154:	6103      	str	r3, [r0, #16]
 8009156:	dd16      	ble.n	8009186 <__s2b+0x72>
 8009158:	f104 0909 	add.w	r9, r4, #9
 800915c:	46c8      	mov	r8, r9
 800915e:	442c      	add	r4, r5
 8009160:	f818 3b01 	ldrb.w	r3, [r8], #1
 8009164:	4601      	mov	r1, r0
 8009166:	3b30      	subs	r3, #48	; 0x30
 8009168:	220a      	movs	r2, #10
 800916a:	4630      	mov	r0, r6
 800916c:	f7ff ff8c 	bl	8009088 <__multadd>
 8009170:	45a0      	cmp	r8, r4
 8009172:	d1f5      	bne.n	8009160 <__s2b+0x4c>
 8009174:	f1a5 0408 	sub.w	r4, r5, #8
 8009178:	444c      	add	r4, r9
 800917a:	1b2d      	subs	r5, r5, r4
 800917c:	1963      	adds	r3, r4, r5
 800917e:	42bb      	cmp	r3, r7
 8009180:	db04      	blt.n	800918c <__s2b+0x78>
 8009182:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009186:	340a      	adds	r4, #10
 8009188:	2509      	movs	r5, #9
 800918a:	e7f6      	b.n	800917a <__s2b+0x66>
 800918c:	f814 3b01 	ldrb.w	r3, [r4], #1
 8009190:	4601      	mov	r1, r0
 8009192:	3b30      	subs	r3, #48	; 0x30
 8009194:	220a      	movs	r2, #10
 8009196:	4630      	mov	r0, r6
 8009198:	f7ff ff76 	bl	8009088 <__multadd>
 800919c:	e7ee      	b.n	800917c <__s2b+0x68>
 800919e:	bf00      	nop
 80091a0:	0800ebe8 	.word	0x0800ebe8
 80091a4:	0800ec74 	.word	0x0800ec74

080091a8 <__hi0bits>:
 80091a8:	0c03      	lsrs	r3, r0, #16
 80091aa:	041b      	lsls	r3, r3, #16
 80091ac:	b9d3      	cbnz	r3, 80091e4 <__hi0bits+0x3c>
 80091ae:	0400      	lsls	r0, r0, #16
 80091b0:	2310      	movs	r3, #16
 80091b2:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80091b6:	bf04      	itt	eq
 80091b8:	0200      	lsleq	r0, r0, #8
 80091ba:	3308      	addeq	r3, #8
 80091bc:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80091c0:	bf04      	itt	eq
 80091c2:	0100      	lsleq	r0, r0, #4
 80091c4:	3304      	addeq	r3, #4
 80091c6:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80091ca:	bf04      	itt	eq
 80091cc:	0080      	lsleq	r0, r0, #2
 80091ce:	3302      	addeq	r3, #2
 80091d0:	2800      	cmp	r0, #0
 80091d2:	db05      	blt.n	80091e0 <__hi0bits+0x38>
 80091d4:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80091d8:	f103 0301 	add.w	r3, r3, #1
 80091dc:	bf08      	it	eq
 80091de:	2320      	moveq	r3, #32
 80091e0:	4618      	mov	r0, r3
 80091e2:	4770      	bx	lr
 80091e4:	2300      	movs	r3, #0
 80091e6:	e7e4      	b.n	80091b2 <__hi0bits+0xa>

080091e8 <__lo0bits>:
 80091e8:	6803      	ldr	r3, [r0, #0]
 80091ea:	f013 0207 	ands.w	r2, r3, #7
 80091ee:	4601      	mov	r1, r0
 80091f0:	d00b      	beq.n	800920a <__lo0bits+0x22>
 80091f2:	07da      	lsls	r2, r3, #31
 80091f4:	d423      	bmi.n	800923e <__lo0bits+0x56>
 80091f6:	0798      	lsls	r0, r3, #30
 80091f8:	bf49      	itett	mi
 80091fa:	085b      	lsrmi	r3, r3, #1
 80091fc:	089b      	lsrpl	r3, r3, #2
 80091fe:	2001      	movmi	r0, #1
 8009200:	600b      	strmi	r3, [r1, #0]
 8009202:	bf5c      	itt	pl
 8009204:	600b      	strpl	r3, [r1, #0]
 8009206:	2002      	movpl	r0, #2
 8009208:	4770      	bx	lr
 800920a:	b298      	uxth	r0, r3
 800920c:	b9a8      	cbnz	r0, 800923a <__lo0bits+0x52>
 800920e:	0c1b      	lsrs	r3, r3, #16
 8009210:	2010      	movs	r0, #16
 8009212:	b2da      	uxtb	r2, r3
 8009214:	b90a      	cbnz	r2, 800921a <__lo0bits+0x32>
 8009216:	3008      	adds	r0, #8
 8009218:	0a1b      	lsrs	r3, r3, #8
 800921a:	071a      	lsls	r2, r3, #28
 800921c:	bf04      	itt	eq
 800921e:	091b      	lsreq	r3, r3, #4
 8009220:	3004      	addeq	r0, #4
 8009222:	079a      	lsls	r2, r3, #30
 8009224:	bf04      	itt	eq
 8009226:	089b      	lsreq	r3, r3, #2
 8009228:	3002      	addeq	r0, #2
 800922a:	07da      	lsls	r2, r3, #31
 800922c:	d403      	bmi.n	8009236 <__lo0bits+0x4e>
 800922e:	085b      	lsrs	r3, r3, #1
 8009230:	f100 0001 	add.w	r0, r0, #1
 8009234:	d005      	beq.n	8009242 <__lo0bits+0x5a>
 8009236:	600b      	str	r3, [r1, #0]
 8009238:	4770      	bx	lr
 800923a:	4610      	mov	r0, r2
 800923c:	e7e9      	b.n	8009212 <__lo0bits+0x2a>
 800923e:	2000      	movs	r0, #0
 8009240:	4770      	bx	lr
 8009242:	2020      	movs	r0, #32
 8009244:	4770      	bx	lr
	...

08009248 <__i2b>:
 8009248:	b510      	push	{r4, lr}
 800924a:	460c      	mov	r4, r1
 800924c:	2101      	movs	r1, #1
 800924e:	f7ff feb9 	bl	8008fc4 <_Balloc>
 8009252:	4602      	mov	r2, r0
 8009254:	b928      	cbnz	r0, 8009262 <__i2b+0x1a>
 8009256:	4b05      	ldr	r3, [pc, #20]	; (800926c <__i2b+0x24>)
 8009258:	4805      	ldr	r0, [pc, #20]	; (8009270 <__i2b+0x28>)
 800925a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800925e:	f000 fe01 	bl	8009e64 <__assert_func>
 8009262:	2301      	movs	r3, #1
 8009264:	6144      	str	r4, [r0, #20]
 8009266:	6103      	str	r3, [r0, #16]
 8009268:	bd10      	pop	{r4, pc}
 800926a:	bf00      	nop
 800926c:	0800ebe8 	.word	0x0800ebe8
 8009270:	0800ec74 	.word	0x0800ec74

08009274 <__multiply>:
 8009274:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009278:	4691      	mov	r9, r2
 800927a:	690a      	ldr	r2, [r1, #16]
 800927c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8009280:	429a      	cmp	r2, r3
 8009282:	bfb8      	it	lt
 8009284:	460b      	movlt	r3, r1
 8009286:	460c      	mov	r4, r1
 8009288:	bfbc      	itt	lt
 800928a:	464c      	movlt	r4, r9
 800928c:	4699      	movlt	r9, r3
 800928e:	6927      	ldr	r7, [r4, #16]
 8009290:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8009294:	68a3      	ldr	r3, [r4, #8]
 8009296:	6861      	ldr	r1, [r4, #4]
 8009298:	eb07 060a 	add.w	r6, r7, sl
 800929c:	42b3      	cmp	r3, r6
 800929e:	b085      	sub	sp, #20
 80092a0:	bfb8      	it	lt
 80092a2:	3101      	addlt	r1, #1
 80092a4:	f7ff fe8e 	bl	8008fc4 <_Balloc>
 80092a8:	b930      	cbnz	r0, 80092b8 <__multiply+0x44>
 80092aa:	4602      	mov	r2, r0
 80092ac:	4b44      	ldr	r3, [pc, #272]	; (80093c0 <__multiply+0x14c>)
 80092ae:	4845      	ldr	r0, [pc, #276]	; (80093c4 <__multiply+0x150>)
 80092b0:	f240 115d 	movw	r1, #349	; 0x15d
 80092b4:	f000 fdd6 	bl	8009e64 <__assert_func>
 80092b8:	f100 0514 	add.w	r5, r0, #20
 80092bc:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80092c0:	462b      	mov	r3, r5
 80092c2:	2200      	movs	r2, #0
 80092c4:	4543      	cmp	r3, r8
 80092c6:	d321      	bcc.n	800930c <__multiply+0x98>
 80092c8:	f104 0314 	add.w	r3, r4, #20
 80092cc:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 80092d0:	f109 0314 	add.w	r3, r9, #20
 80092d4:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 80092d8:	9202      	str	r2, [sp, #8]
 80092da:	1b3a      	subs	r2, r7, r4
 80092dc:	3a15      	subs	r2, #21
 80092de:	f022 0203 	bic.w	r2, r2, #3
 80092e2:	3204      	adds	r2, #4
 80092e4:	f104 0115 	add.w	r1, r4, #21
 80092e8:	428f      	cmp	r7, r1
 80092ea:	bf38      	it	cc
 80092ec:	2204      	movcc	r2, #4
 80092ee:	9201      	str	r2, [sp, #4]
 80092f0:	9a02      	ldr	r2, [sp, #8]
 80092f2:	9303      	str	r3, [sp, #12]
 80092f4:	429a      	cmp	r2, r3
 80092f6:	d80c      	bhi.n	8009312 <__multiply+0x9e>
 80092f8:	2e00      	cmp	r6, #0
 80092fa:	dd03      	ble.n	8009304 <__multiply+0x90>
 80092fc:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8009300:	2b00      	cmp	r3, #0
 8009302:	d05a      	beq.n	80093ba <__multiply+0x146>
 8009304:	6106      	str	r6, [r0, #16]
 8009306:	b005      	add	sp, #20
 8009308:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800930c:	f843 2b04 	str.w	r2, [r3], #4
 8009310:	e7d8      	b.n	80092c4 <__multiply+0x50>
 8009312:	f8b3 a000 	ldrh.w	sl, [r3]
 8009316:	f1ba 0f00 	cmp.w	sl, #0
 800931a:	d024      	beq.n	8009366 <__multiply+0xf2>
 800931c:	f104 0e14 	add.w	lr, r4, #20
 8009320:	46a9      	mov	r9, r5
 8009322:	f04f 0c00 	mov.w	ip, #0
 8009326:	f85e 2b04 	ldr.w	r2, [lr], #4
 800932a:	f8d9 1000 	ldr.w	r1, [r9]
 800932e:	fa1f fb82 	uxth.w	fp, r2
 8009332:	b289      	uxth	r1, r1
 8009334:	fb0a 110b 	mla	r1, sl, fp, r1
 8009338:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800933c:	f8d9 2000 	ldr.w	r2, [r9]
 8009340:	4461      	add	r1, ip
 8009342:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8009346:	fb0a c20b 	mla	r2, sl, fp, ip
 800934a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800934e:	b289      	uxth	r1, r1
 8009350:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8009354:	4577      	cmp	r7, lr
 8009356:	f849 1b04 	str.w	r1, [r9], #4
 800935a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800935e:	d8e2      	bhi.n	8009326 <__multiply+0xb2>
 8009360:	9a01      	ldr	r2, [sp, #4]
 8009362:	f845 c002 	str.w	ip, [r5, r2]
 8009366:	9a03      	ldr	r2, [sp, #12]
 8009368:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800936c:	3304      	adds	r3, #4
 800936e:	f1b9 0f00 	cmp.w	r9, #0
 8009372:	d020      	beq.n	80093b6 <__multiply+0x142>
 8009374:	6829      	ldr	r1, [r5, #0]
 8009376:	f104 0c14 	add.w	ip, r4, #20
 800937a:	46ae      	mov	lr, r5
 800937c:	f04f 0a00 	mov.w	sl, #0
 8009380:	f8bc b000 	ldrh.w	fp, [ip]
 8009384:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8009388:	fb09 220b 	mla	r2, r9, fp, r2
 800938c:	4492      	add	sl, r2
 800938e:	b289      	uxth	r1, r1
 8009390:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8009394:	f84e 1b04 	str.w	r1, [lr], #4
 8009398:	f85c 2b04 	ldr.w	r2, [ip], #4
 800939c:	f8be 1000 	ldrh.w	r1, [lr]
 80093a0:	0c12      	lsrs	r2, r2, #16
 80093a2:	fb09 1102 	mla	r1, r9, r2, r1
 80093a6:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 80093aa:	4567      	cmp	r7, ip
 80093ac:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80093b0:	d8e6      	bhi.n	8009380 <__multiply+0x10c>
 80093b2:	9a01      	ldr	r2, [sp, #4]
 80093b4:	50a9      	str	r1, [r5, r2]
 80093b6:	3504      	adds	r5, #4
 80093b8:	e79a      	b.n	80092f0 <__multiply+0x7c>
 80093ba:	3e01      	subs	r6, #1
 80093bc:	e79c      	b.n	80092f8 <__multiply+0x84>
 80093be:	bf00      	nop
 80093c0:	0800ebe8 	.word	0x0800ebe8
 80093c4:	0800ec74 	.word	0x0800ec74

080093c8 <__pow5mult>:
 80093c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80093cc:	4615      	mov	r5, r2
 80093ce:	f012 0203 	ands.w	r2, r2, #3
 80093d2:	4606      	mov	r6, r0
 80093d4:	460f      	mov	r7, r1
 80093d6:	d007      	beq.n	80093e8 <__pow5mult+0x20>
 80093d8:	4c25      	ldr	r4, [pc, #148]	; (8009470 <__pow5mult+0xa8>)
 80093da:	3a01      	subs	r2, #1
 80093dc:	2300      	movs	r3, #0
 80093de:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80093e2:	f7ff fe51 	bl	8009088 <__multadd>
 80093e6:	4607      	mov	r7, r0
 80093e8:	10ad      	asrs	r5, r5, #2
 80093ea:	d03d      	beq.n	8009468 <__pow5mult+0xa0>
 80093ec:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80093ee:	b97c      	cbnz	r4, 8009410 <__pow5mult+0x48>
 80093f0:	2010      	movs	r0, #16
 80093f2:	f7ff fdbf 	bl	8008f74 <malloc>
 80093f6:	4602      	mov	r2, r0
 80093f8:	6270      	str	r0, [r6, #36]	; 0x24
 80093fa:	b928      	cbnz	r0, 8009408 <__pow5mult+0x40>
 80093fc:	4b1d      	ldr	r3, [pc, #116]	; (8009474 <__pow5mult+0xac>)
 80093fe:	481e      	ldr	r0, [pc, #120]	; (8009478 <__pow5mult+0xb0>)
 8009400:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8009404:	f000 fd2e 	bl	8009e64 <__assert_func>
 8009408:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800940c:	6004      	str	r4, [r0, #0]
 800940e:	60c4      	str	r4, [r0, #12]
 8009410:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8009414:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009418:	b94c      	cbnz	r4, 800942e <__pow5mult+0x66>
 800941a:	f240 2171 	movw	r1, #625	; 0x271
 800941e:	4630      	mov	r0, r6
 8009420:	f7ff ff12 	bl	8009248 <__i2b>
 8009424:	2300      	movs	r3, #0
 8009426:	f8c8 0008 	str.w	r0, [r8, #8]
 800942a:	4604      	mov	r4, r0
 800942c:	6003      	str	r3, [r0, #0]
 800942e:	f04f 0900 	mov.w	r9, #0
 8009432:	07eb      	lsls	r3, r5, #31
 8009434:	d50a      	bpl.n	800944c <__pow5mult+0x84>
 8009436:	4639      	mov	r1, r7
 8009438:	4622      	mov	r2, r4
 800943a:	4630      	mov	r0, r6
 800943c:	f7ff ff1a 	bl	8009274 <__multiply>
 8009440:	4639      	mov	r1, r7
 8009442:	4680      	mov	r8, r0
 8009444:	4630      	mov	r0, r6
 8009446:	f7ff fdfd 	bl	8009044 <_Bfree>
 800944a:	4647      	mov	r7, r8
 800944c:	106d      	asrs	r5, r5, #1
 800944e:	d00b      	beq.n	8009468 <__pow5mult+0xa0>
 8009450:	6820      	ldr	r0, [r4, #0]
 8009452:	b938      	cbnz	r0, 8009464 <__pow5mult+0x9c>
 8009454:	4622      	mov	r2, r4
 8009456:	4621      	mov	r1, r4
 8009458:	4630      	mov	r0, r6
 800945a:	f7ff ff0b 	bl	8009274 <__multiply>
 800945e:	6020      	str	r0, [r4, #0]
 8009460:	f8c0 9000 	str.w	r9, [r0]
 8009464:	4604      	mov	r4, r0
 8009466:	e7e4      	b.n	8009432 <__pow5mult+0x6a>
 8009468:	4638      	mov	r0, r7
 800946a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800946e:	bf00      	nop
 8009470:	0800edc0 	.word	0x0800edc0
 8009474:	0800eb76 	.word	0x0800eb76
 8009478:	0800ec74 	.word	0x0800ec74

0800947c <__lshift>:
 800947c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009480:	460c      	mov	r4, r1
 8009482:	6849      	ldr	r1, [r1, #4]
 8009484:	6923      	ldr	r3, [r4, #16]
 8009486:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800948a:	68a3      	ldr	r3, [r4, #8]
 800948c:	4607      	mov	r7, r0
 800948e:	4691      	mov	r9, r2
 8009490:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009494:	f108 0601 	add.w	r6, r8, #1
 8009498:	42b3      	cmp	r3, r6
 800949a:	db0b      	blt.n	80094b4 <__lshift+0x38>
 800949c:	4638      	mov	r0, r7
 800949e:	f7ff fd91 	bl	8008fc4 <_Balloc>
 80094a2:	4605      	mov	r5, r0
 80094a4:	b948      	cbnz	r0, 80094ba <__lshift+0x3e>
 80094a6:	4602      	mov	r2, r0
 80094a8:	4b2a      	ldr	r3, [pc, #168]	; (8009554 <__lshift+0xd8>)
 80094aa:	482b      	ldr	r0, [pc, #172]	; (8009558 <__lshift+0xdc>)
 80094ac:	f240 11d9 	movw	r1, #473	; 0x1d9
 80094b0:	f000 fcd8 	bl	8009e64 <__assert_func>
 80094b4:	3101      	adds	r1, #1
 80094b6:	005b      	lsls	r3, r3, #1
 80094b8:	e7ee      	b.n	8009498 <__lshift+0x1c>
 80094ba:	2300      	movs	r3, #0
 80094bc:	f100 0114 	add.w	r1, r0, #20
 80094c0:	f100 0210 	add.w	r2, r0, #16
 80094c4:	4618      	mov	r0, r3
 80094c6:	4553      	cmp	r3, sl
 80094c8:	db37      	blt.n	800953a <__lshift+0xbe>
 80094ca:	6920      	ldr	r0, [r4, #16]
 80094cc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80094d0:	f104 0314 	add.w	r3, r4, #20
 80094d4:	f019 091f 	ands.w	r9, r9, #31
 80094d8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80094dc:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80094e0:	d02f      	beq.n	8009542 <__lshift+0xc6>
 80094e2:	f1c9 0e20 	rsb	lr, r9, #32
 80094e6:	468a      	mov	sl, r1
 80094e8:	f04f 0c00 	mov.w	ip, #0
 80094ec:	681a      	ldr	r2, [r3, #0]
 80094ee:	fa02 f209 	lsl.w	r2, r2, r9
 80094f2:	ea42 020c 	orr.w	r2, r2, ip
 80094f6:	f84a 2b04 	str.w	r2, [sl], #4
 80094fa:	f853 2b04 	ldr.w	r2, [r3], #4
 80094fe:	4298      	cmp	r0, r3
 8009500:	fa22 fc0e 	lsr.w	ip, r2, lr
 8009504:	d8f2      	bhi.n	80094ec <__lshift+0x70>
 8009506:	1b03      	subs	r3, r0, r4
 8009508:	3b15      	subs	r3, #21
 800950a:	f023 0303 	bic.w	r3, r3, #3
 800950e:	3304      	adds	r3, #4
 8009510:	f104 0215 	add.w	r2, r4, #21
 8009514:	4290      	cmp	r0, r2
 8009516:	bf38      	it	cc
 8009518:	2304      	movcc	r3, #4
 800951a:	f841 c003 	str.w	ip, [r1, r3]
 800951e:	f1bc 0f00 	cmp.w	ip, #0
 8009522:	d001      	beq.n	8009528 <__lshift+0xac>
 8009524:	f108 0602 	add.w	r6, r8, #2
 8009528:	3e01      	subs	r6, #1
 800952a:	4638      	mov	r0, r7
 800952c:	612e      	str	r6, [r5, #16]
 800952e:	4621      	mov	r1, r4
 8009530:	f7ff fd88 	bl	8009044 <_Bfree>
 8009534:	4628      	mov	r0, r5
 8009536:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800953a:	f842 0f04 	str.w	r0, [r2, #4]!
 800953e:	3301      	adds	r3, #1
 8009540:	e7c1      	b.n	80094c6 <__lshift+0x4a>
 8009542:	3904      	subs	r1, #4
 8009544:	f853 2b04 	ldr.w	r2, [r3], #4
 8009548:	f841 2f04 	str.w	r2, [r1, #4]!
 800954c:	4298      	cmp	r0, r3
 800954e:	d8f9      	bhi.n	8009544 <__lshift+0xc8>
 8009550:	e7ea      	b.n	8009528 <__lshift+0xac>
 8009552:	bf00      	nop
 8009554:	0800ebe8 	.word	0x0800ebe8
 8009558:	0800ec74 	.word	0x0800ec74

0800955c <__mcmp>:
 800955c:	b530      	push	{r4, r5, lr}
 800955e:	6902      	ldr	r2, [r0, #16]
 8009560:	690c      	ldr	r4, [r1, #16]
 8009562:	1b12      	subs	r2, r2, r4
 8009564:	d10e      	bne.n	8009584 <__mcmp+0x28>
 8009566:	f100 0314 	add.w	r3, r0, #20
 800956a:	3114      	adds	r1, #20
 800956c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8009570:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8009574:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8009578:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800957c:	42a5      	cmp	r5, r4
 800957e:	d003      	beq.n	8009588 <__mcmp+0x2c>
 8009580:	d305      	bcc.n	800958e <__mcmp+0x32>
 8009582:	2201      	movs	r2, #1
 8009584:	4610      	mov	r0, r2
 8009586:	bd30      	pop	{r4, r5, pc}
 8009588:	4283      	cmp	r3, r0
 800958a:	d3f3      	bcc.n	8009574 <__mcmp+0x18>
 800958c:	e7fa      	b.n	8009584 <__mcmp+0x28>
 800958e:	f04f 32ff 	mov.w	r2, #4294967295
 8009592:	e7f7      	b.n	8009584 <__mcmp+0x28>

08009594 <__mdiff>:
 8009594:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009598:	460c      	mov	r4, r1
 800959a:	4606      	mov	r6, r0
 800959c:	4611      	mov	r1, r2
 800959e:	4620      	mov	r0, r4
 80095a0:	4690      	mov	r8, r2
 80095a2:	f7ff ffdb 	bl	800955c <__mcmp>
 80095a6:	1e05      	subs	r5, r0, #0
 80095a8:	d110      	bne.n	80095cc <__mdiff+0x38>
 80095aa:	4629      	mov	r1, r5
 80095ac:	4630      	mov	r0, r6
 80095ae:	f7ff fd09 	bl	8008fc4 <_Balloc>
 80095b2:	b930      	cbnz	r0, 80095c2 <__mdiff+0x2e>
 80095b4:	4b3a      	ldr	r3, [pc, #232]	; (80096a0 <__mdiff+0x10c>)
 80095b6:	4602      	mov	r2, r0
 80095b8:	f240 2132 	movw	r1, #562	; 0x232
 80095bc:	4839      	ldr	r0, [pc, #228]	; (80096a4 <__mdiff+0x110>)
 80095be:	f000 fc51 	bl	8009e64 <__assert_func>
 80095c2:	2301      	movs	r3, #1
 80095c4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80095c8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80095cc:	bfa4      	itt	ge
 80095ce:	4643      	movge	r3, r8
 80095d0:	46a0      	movge	r8, r4
 80095d2:	4630      	mov	r0, r6
 80095d4:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80095d8:	bfa6      	itte	ge
 80095da:	461c      	movge	r4, r3
 80095dc:	2500      	movge	r5, #0
 80095de:	2501      	movlt	r5, #1
 80095e0:	f7ff fcf0 	bl	8008fc4 <_Balloc>
 80095e4:	b920      	cbnz	r0, 80095f0 <__mdiff+0x5c>
 80095e6:	4b2e      	ldr	r3, [pc, #184]	; (80096a0 <__mdiff+0x10c>)
 80095e8:	4602      	mov	r2, r0
 80095ea:	f44f 7110 	mov.w	r1, #576	; 0x240
 80095ee:	e7e5      	b.n	80095bc <__mdiff+0x28>
 80095f0:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80095f4:	6926      	ldr	r6, [r4, #16]
 80095f6:	60c5      	str	r5, [r0, #12]
 80095f8:	f104 0914 	add.w	r9, r4, #20
 80095fc:	f108 0514 	add.w	r5, r8, #20
 8009600:	f100 0e14 	add.w	lr, r0, #20
 8009604:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8009608:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800960c:	f108 0210 	add.w	r2, r8, #16
 8009610:	46f2      	mov	sl, lr
 8009612:	2100      	movs	r1, #0
 8009614:	f859 3b04 	ldr.w	r3, [r9], #4
 8009618:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800961c:	fa1f f883 	uxth.w	r8, r3
 8009620:	fa11 f18b 	uxtah	r1, r1, fp
 8009624:	0c1b      	lsrs	r3, r3, #16
 8009626:	eba1 0808 	sub.w	r8, r1, r8
 800962a:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800962e:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8009632:	fa1f f888 	uxth.w	r8, r8
 8009636:	1419      	asrs	r1, r3, #16
 8009638:	454e      	cmp	r6, r9
 800963a:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800963e:	f84a 3b04 	str.w	r3, [sl], #4
 8009642:	d8e7      	bhi.n	8009614 <__mdiff+0x80>
 8009644:	1b33      	subs	r3, r6, r4
 8009646:	3b15      	subs	r3, #21
 8009648:	f023 0303 	bic.w	r3, r3, #3
 800964c:	3304      	adds	r3, #4
 800964e:	3415      	adds	r4, #21
 8009650:	42a6      	cmp	r6, r4
 8009652:	bf38      	it	cc
 8009654:	2304      	movcc	r3, #4
 8009656:	441d      	add	r5, r3
 8009658:	4473      	add	r3, lr
 800965a:	469e      	mov	lr, r3
 800965c:	462e      	mov	r6, r5
 800965e:	4566      	cmp	r6, ip
 8009660:	d30e      	bcc.n	8009680 <__mdiff+0xec>
 8009662:	f10c 0203 	add.w	r2, ip, #3
 8009666:	1b52      	subs	r2, r2, r5
 8009668:	f022 0203 	bic.w	r2, r2, #3
 800966c:	3d03      	subs	r5, #3
 800966e:	45ac      	cmp	ip, r5
 8009670:	bf38      	it	cc
 8009672:	2200      	movcc	r2, #0
 8009674:	441a      	add	r2, r3
 8009676:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800967a:	b17b      	cbz	r3, 800969c <__mdiff+0x108>
 800967c:	6107      	str	r7, [r0, #16]
 800967e:	e7a3      	b.n	80095c8 <__mdiff+0x34>
 8009680:	f856 8b04 	ldr.w	r8, [r6], #4
 8009684:	fa11 f288 	uxtah	r2, r1, r8
 8009688:	1414      	asrs	r4, r2, #16
 800968a:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800968e:	b292      	uxth	r2, r2
 8009690:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8009694:	f84e 2b04 	str.w	r2, [lr], #4
 8009698:	1421      	asrs	r1, r4, #16
 800969a:	e7e0      	b.n	800965e <__mdiff+0xca>
 800969c:	3f01      	subs	r7, #1
 800969e:	e7ea      	b.n	8009676 <__mdiff+0xe2>
 80096a0:	0800ebe8 	.word	0x0800ebe8
 80096a4:	0800ec74 	.word	0x0800ec74

080096a8 <__ulp>:
 80096a8:	b082      	sub	sp, #8
 80096aa:	ed8d 0b00 	vstr	d0, [sp]
 80096ae:	9b01      	ldr	r3, [sp, #4]
 80096b0:	4912      	ldr	r1, [pc, #72]	; (80096fc <__ulp+0x54>)
 80096b2:	4019      	ands	r1, r3
 80096b4:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 80096b8:	2900      	cmp	r1, #0
 80096ba:	dd05      	ble.n	80096c8 <__ulp+0x20>
 80096bc:	2200      	movs	r2, #0
 80096be:	460b      	mov	r3, r1
 80096c0:	ec43 2b10 	vmov	d0, r2, r3
 80096c4:	b002      	add	sp, #8
 80096c6:	4770      	bx	lr
 80096c8:	4249      	negs	r1, r1
 80096ca:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 80096ce:	ea4f 5021 	mov.w	r0, r1, asr #20
 80096d2:	f04f 0200 	mov.w	r2, #0
 80096d6:	f04f 0300 	mov.w	r3, #0
 80096da:	da04      	bge.n	80096e6 <__ulp+0x3e>
 80096dc:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 80096e0:	fa41 f300 	asr.w	r3, r1, r0
 80096e4:	e7ec      	b.n	80096c0 <__ulp+0x18>
 80096e6:	f1a0 0114 	sub.w	r1, r0, #20
 80096ea:	291e      	cmp	r1, #30
 80096ec:	bfda      	itte	le
 80096ee:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 80096f2:	fa20 f101 	lsrle.w	r1, r0, r1
 80096f6:	2101      	movgt	r1, #1
 80096f8:	460a      	mov	r2, r1
 80096fa:	e7e1      	b.n	80096c0 <__ulp+0x18>
 80096fc:	7ff00000 	.word	0x7ff00000

08009700 <__b2d>:
 8009700:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009702:	6905      	ldr	r5, [r0, #16]
 8009704:	f100 0714 	add.w	r7, r0, #20
 8009708:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800970c:	1f2e      	subs	r6, r5, #4
 800970e:	f855 4c04 	ldr.w	r4, [r5, #-4]
 8009712:	4620      	mov	r0, r4
 8009714:	f7ff fd48 	bl	80091a8 <__hi0bits>
 8009718:	f1c0 0320 	rsb	r3, r0, #32
 800971c:	280a      	cmp	r0, #10
 800971e:	f8df c07c 	ldr.w	ip, [pc, #124]	; 800979c <__b2d+0x9c>
 8009722:	600b      	str	r3, [r1, #0]
 8009724:	dc14      	bgt.n	8009750 <__b2d+0x50>
 8009726:	f1c0 0e0b 	rsb	lr, r0, #11
 800972a:	fa24 f10e 	lsr.w	r1, r4, lr
 800972e:	42b7      	cmp	r7, r6
 8009730:	ea41 030c 	orr.w	r3, r1, ip
 8009734:	bf34      	ite	cc
 8009736:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800973a:	2100      	movcs	r1, #0
 800973c:	3015      	adds	r0, #21
 800973e:	fa04 f000 	lsl.w	r0, r4, r0
 8009742:	fa21 f10e 	lsr.w	r1, r1, lr
 8009746:	ea40 0201 	orr.w	r2, r0, r1
 800974a:	ec43 2b10 	vmov	d0, r2, r3
 800974e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009750:	42b7      	cmp	r7, r6
 8009752:	bf3a      	itte	cc
 8009754:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8009758:	f1a5 0608 	subcc.w	r6, r5, #8
 800975c:	2100      	movcs	r1, #0
 800975e:	380b      	subs	r0, #11
 8009760:	d017      	beq.n	8009792 <__b2d+0x92>
 8009762:	f1c0 0c20 	rsb	ip, r0, #32
 8009766:	fa04 f500 	lsl.w	r5, r4, r0
 800976a:	42be      	cmp	r6, r7
 800976c:	fa21 f40c 	lsr.w	r4, r1, ip
 8009770:	ea45 0504 	orr.w	r5, r5, r4
 8009774:	bf8c      	ite	hi
 8009776:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800977a:	2400      	movls	r4, #0
 800977c:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 8009780:	fa01 f000 	lsl.w	r0, r1, r0
 8009784:	fa24 f40c 	lsr.w	r4, r4, ip
 8009788:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800978c:	ea40 0204 	orr.w	r2, r0, r4
 8009790:	e7db      	b.n	800974a <__b2d+0x4a>
 8009792:	ea44 030c 	orr.w	r3, r4, ip
 8009796:	460a      	mov	r2, r1
 8009798:	e7d7      	b.n	800974a <__b2d+0x4a>
 800979a:	bf00      	nop
 800979c:	3ff00000 	.word	0x3ff00000

080097a0 <__d2b>:
 80097a0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80097a4:	4689      	mov	r9, r1
 80097a6:	2101      	movs	r1, #1
 80097a8:	ec57 6b10 	vmov	r6, r7, d0
 80097ac:	4690      	mov	r8, r2
 80097ae:	f7ff fc09 	bl	8008fc4 <_Balloc>
 80097b2:	4604      	mov	r4, r0
 80097b4:	b930      	cbnz	r0, 80097c4 <__d2b+0x24>
 80097b6:	4602      	mov	r2, r0
 80097b8:	4b25      	ldr	r3, [pc, #148]	; (8009850 <__d2b+0xb0>)
 80097ba:	4826      	ldr	r0, [pc, #152]	; (8009854 <__d2b+0xb4>)
 80097bc:	f240 310a 	movw	r1, #778	; 0x30a
 80097c0:	f000 fb50 	bl	8009e64 <__assert_func>
 80097c4:	f3c7 550a 	ubfx	r5, r7, #20, #11
 80097c8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80097cc:	bb35      	cbnz	r5, 800981c <__d2b+0x7c>
 80097ce:	2e00      	cmp	r6, #0
 80097d0:	9301      	str	r3, [sp, #4]
 80097d2:	d028      	beq.n	8009826 <__d2b+0x86>
 80097d4:	4668      	mov	r0, sp
 80097d6:	9600      	str	r6, [sp, #0]
 80097d8:	f7ff fd06 	bl	80091e8 <__lo0bits>
 80097dc:	9900      	ldr	r1, [sp, #0]
 80097de:	b300      	cbz	r0, 8009822 <__d2b+0x82>
 80097e0:	9a01      	ldr	r2, [sp, #4]
 80097e2:	f1c0 0320 	rsb	r3, r0, #32
 80097e6:	fa02 f303 	lsl.w	r3, r2, r3
 80097ea:	430b      	orrs	r3, r1
 80097ec:	40c2      	lsrs	r2, r0
 80097ee:	6163      	str	r3, [r4, #20]
 80097f0:	9201      	str	r2, [sp, #4]
 80097f2:	9b01      	ldr	r3, [sp, #4]
 80097f4:	61a3      	str	r3, [r4, #24]
 80097f6:	2b00      	cmp	r3, #0
 80097f8:	bf14      	ite	ne
 80097fa:	2202      	movne	r2, #2
 80097fc:	2201      	moveq	r2, #1
 80097fe:	6122      	str	r2, [r4, #16]
 8009800:	b1d5      	cbz	r5, 8009838 <__d2b+0x98>
 8009802:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8009806:	4405      	add	r5, r0
 8009808:	f8c9 5000 	str.w	r5, [r9]
 800980c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8009810:	f8c8 0000 	str.w	r0, [r8]
 8009814:	4620      	mov	r0, r4
 8009816:	b003      	add	sp, #12
 8009818:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800981c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009820:	e7d5      	b.n	80097ce <__d2b+0x2e>
 8009822:	6161      	str	r1, [r4, #20]
 8009824:	e7e5      	b.n	80097f2 <__d2b+0x52>
 8009826:	a801      	add	r0, sp, #4
 8009828:	f7ff fcde 	bl	80091e8 <__lo0bits>
 800982c:	9b01      	ldr	r3, [sp, #4]
 800982e:	6163      	str	r3, [r4, #20]
 8009830:	2201      	movs	r2, #1
 8009832:	6122      	str	r2, [r4, #16]
 8009834:	3020      	adds	r0, #32
 8009836:	e7e3      	b.n	8009800 <__d2b+0x60>
 8009838:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800983c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8009840:	f8c9 0000 	str.w	r0, [r9]
 8009844:	6918      	ldr	r0, [r3, #16]
 8009846:	f7ff fcaf 	bl	80091a8 <__hi0bits>
 800984a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800984e:	e7df      	b.n	8009810 <__d2b+0x70>
 8009850:	0800ebe8 	.word	0x0800ebe8
 8009854:	0800ec74 	.word	0x0800ec74

08009858 <__ratio>:
 8009858:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800985c:	4688      	mov	r8, r1
 800985e:	4669      	mov	r1, sp
 8009860:	4681      	mov	r9, r0
 8009862:	f7ff ff4d 	bl	8009700 <__b2d>
 8009866:	a901      	add	r1, sp, #4
 8009868:	4640      	mov	r0, r8
 800986a:	ec55 4b10 	vmov	r4, r5, d0
 800986e:	f7ff ff47 	bl	8009700 <__b2d>
 8009872:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8009876:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800987a:	eba3 0c02 	sub.w	ip, r3, r2
 800987e:	e9dd 3200 	ldrd	r3, r2, [sp]
 8009882:	1a9b      	subs	r3, r3, r2
 8009884:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8009888:	ec51 0b10 	vmov	r0, r1, d0
 800988c:	2b00      	cmp	r3, #0
 800988e:	bfd6      	itet	le
 8009890:	460a      	movle	r2, r1
 8009892:	462a      	movgt	r2, r5
 8009894:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8009898:	468b      	mov	fp, r1
 800989a:	462f      	mov	r7, r5
 800989c:	bfd4      	ite	le
 800989e:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 80098a2:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 80098a6:	4620      	mov	r0, r4
 80098a8:	ee10 2a10 	vmov	r2, s0
 80098ac:	465b      	mov	r3, fp
 80098ae:	4639      	mov	r1, r7
 80098b0:	f7f7 f82c 	bl	800090c <__aeabi_ddiv>
 80098b4:	ec41 0b10 	vmov	d0, r0, r1
 80098b8:	b003      	add	sp, #12
 80098ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080098be <__copybits>:
 80098be:	3901      	subs	r1, #1
 80098c0:	b570      	push	{r4, r5, r6, lr}
 80098c2:	1149      	asrs	r1, r1, #5
 80098c4:	6914      	ldr	r4, [r2, #16]
 80098c6:	3101      	adds	r1, #1
 80098c8:	f102 0314 	add.w	r3, r2, #20
 80098cc:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80098d0:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80098d4:	1f05      	subs	r5, r0, #4
 80098d6:	42a3      	cmp	r3, r4
 80098d8:	d30c      	bcc.n	80098f4 <__copybits+0x36>
 80098da:	1aa3      	subs	r3, r4, r2
 80098dc:	3b11      	subs	r3, #17
 80098de:	f023 0303 	bic.w	r3, r3, #3
 80098e2:	3211      	adds	r2, #17
 80098e4:	42a2      	cmp	r2, r4
 80098e6:	bf88      	it	hi
 80098e8:	2300      	movhi	r3, #0
 80098ea:	4418      	add	r0, r3
 80098ec:	2300      	movs	r3, #0
 80098ee:	4288      	cmp	r0, r1
 80098f0:	d305      	bcc.n	80098fe <__copybits+0x40>
 80098f2:	bd70      	pop	{r4, r5, r6, pc}
 80098f4:	f853 6b04 	ldr.w	r6, [r3], #4
 80098f8:	f845 6f04 	str.w	r6, [r5, #4]!
 80098fc:	e7eb      	b.n	80098d6 <__copybits+0x18>
 80098fe:	f840 3b04 	str.w	r3, [r0], #4
 8009902:	e7f4      	b.n	80098ee <__copybits+0x30>

08009904 <__any_on>:
 8009904:	f100 0214 	add.w	r2, r0, #20
 8009908:	6900      	ldr	r0, [r0, #16]
 800990a:	114b      	asrs	r3, r1, #5
 800990c:	4298      	cmp	r0, r3
 800990e:	b510      	push	{r4, lr}
 8009910:	db11      	blt.n	8009936 <__any_on+0x32>
 8009912:	dd0a      	ble.n	800992a <__any_on+0x26>
 8009914:	f011 011f 	ands.w	r1, r1, #31
 8009918:	d007      	beq.n	800992a <__any_on+0x26>
 800991a:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800991e:	fa24 f001 	lsr.w	r0, r4, r1
 8009922:	fa00 f101 	lsl.w	r1, r0, r1
 8009926:	428c      	cmp	r4, r1
 8009928:	d10b      	bne.n	8009942 <__any_on+0x3e>
 800992a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800992e:	4293      	cmp	r3, r2
 8009930:	d803      	bhi.n	800993a <__any_on+0x36>
 8009932:	2000      	movs	r0, #0
 8009934:	bd10      	pop	{r4, pc}
 8009936:	4603      	mov	r3, r0
 8009938:	e7f7      	b.n	800992a <__any_on+0x26>
 800993a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800993e:	2900      	cmp	r1, #0
 8009940:	d0f5      	beq.n	800992e <__any_on+0x2a>
 8009942:	2001      	movs	r0, #1
 8009944:	e7f6      	b.n	8009934 <__any_on+0x30>

08009946 <_calloc_r>:
 8009946:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009948:	fba1 2402 	umull	r2, r4, r1, r2
 800994c:	b94c      	cbnz	r4, 8009962 <_calloc_r+0x1c>
 800994e:	4611      	mov	r1, r2
 8009950:	9201      	str	r2, [sp, #4]
 8009952:	f000 f87b 	bl	8009a4c <_malloc_r>
 8009956:	9a01      	ldr	r2, [sp, #4]
 8009958:	4605      	mov	r5, r0
 800995a:	b930      	cbnz	r0, 800996a <_calloc_r+0x24>
 800995c:	4628      	mov	r0, r5
 800995e:	b003      	add	sp, #12
 8009960:	bd30      	pop	{r4, r5, pc}
 8009962:	220c      	movs	r2, #12
 8009964:	6002      	str	r2, [r0, #0]
 8009966:	2500      	movs	r5, #0
 8009968:	e7f8      	b.n	800995c <_calloc_r+0x16>
 800996a:	4621      	mov	r1, r4
 800996c:	f7fc fbc0 	bl	80060f0 <memset>
 8009970:	e7f4      	b.n	800995c <_calloc_r+0x16>
	...

08009974 <_free_r>:
 8009974:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009976:	2900      	cmp	r1, #0
 8009978:	d044      	beq.n	8009a04 <_free_r+0x90>
 800997a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800997e:	9001      	str	r0, [sp, #4]
 8009980:	2b00      	cmp	r3, #0
 8009982:	f1a1 0404 	sub.w	r4, r1, #4
 8009986:	bfb8      	it	lt
 8009988:	18e4      	addlt	r4, r4, r3
 800998a:	f000 fab5 	bl	8009ef8 <__malloc_lock>
 800998e:	4a1e      	ldr	r2, [pc, #120]	; (8009a08 <_free_r+0x94>)
 8009990:	9801      	ldr	r0, [sp, #4]
 8009992:	6813      	ldr	r3, [r2, #0]
 8009994:	b933      	cbnz	r3, 80099a4 <_free_r+0x30>
 8009996:	6063      	str	r3, [r4, #4]
 8009998:	6014      	str	r4, [r2, #0]
 800999a:	b003      	add	sp, #12
 800999c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80099a0:	f000 bab0 	b.w	8009f04 <__malloc_unlock>
 80099a4:	42a3      	cmp	r3, r4
 80099a6:	d908      	bls.n	80099ba <_free_r+0x46>
 80099a8:	6825      	ldr	r5, [r4, #0]
 80099aa:	1961      	adds	r1, r4, r5
 80099ac:	428b      	cmp	r3, r1
 80099ae:	bf01      	itttt	eq
 80099b0:	6819      	ldreq	r1, [r3, #0]
 80099b2:	685b      	ldreq	r3, [r3, #4]
 80099b4:	1949      	addeq	r1, r1, r5
 80099b6:	6021      	streq	r1, [r4, #0]
 80099b8:	e7ed      	b.n	8009996 <_free_r+0x22>
 80099ba:	461a      	mov	r2, r3
 80099bc:	685b      	ldr	r3, [r3, #4]
 80099be:	b10b      	cbz	r3, 80099c4 <_free_r+0x50>
 80099c0:	42a3      	cmp	r3, r4
 80099c2:	d9fa      	bls.n	80099ba <_free_r+0x46>
 80099c4:	6811      	ldr	r1, [r2, #0]
 80099c6:	1855      	adds	r5, r2, r1
 80099c8:	42a5      	cmp	r5, r4
 80099ca:	d10b      	bne.n	80099e4 <_free_r+0x70>
 80099cc:	6824      	ldr	r4, [r4, #0]
 80099ce:	4421      	add	r1, r4
 80099d0:	1854      	adds	r4, r2, r1
 80099d2:	42a3      	cmp	r3, r4
 80099d4:	6011      	str	r1, [r2, #0]
 80099d6:	d1e0      	bne.n	800999a <_free_r+0x26>
 80099d8:	681c      	ldr	r4, [r3, #0]
 80099da:	685b      	ldr	r3, [r3, #4]
 80099dc:	6053      	str	r3, [r2, #4]
 80099de:	4421      	add	r1, r4
 80099e0:	6011      	str	r1, [r2, #0]
 80099e2:	e7da      	b.n	800999a <_free_r+0x26>
 80099e4:	d902      	bls.n	80099ec <_free_r+0x78>
 80099e6:	230c      	movs	r3, #12
 80099e8:	6003      	str	r3, [r0, #0]
 80099ea:	e7d6      	b.n	800999a <_free_r+0x26>
 80099ec:	6825      	ldr	r5, [r4, #0]
 80099ee:	1961      	adds	r1, r4, r5
 80099f0:	428b      	cmp	r3, r1
 80099f2:	bf04      	itt	eq
 80099f4:	6819      	ldreq	r1, [r3, #0]
 80099f6:	685b      	ldreq	r3, [r3, #4]
 80099f8:	6063      	str	r3, [r4, #4]
 80099fa:	bf04      	itt	eq
 80099fc:	1949      	addeq	r1, r1, r5
 80099fe:	6021      	streq	r1, [r4, #0]
 8009a00:	6054      	str	r4, [r2, #4]
 8009a02:	e7ca      	b.n	800999a <_free_r+0x26>
 8009a04:	b003      	add	sp, #12
 8009a06:	bd30      	pop	{r4, r5, pc}
 8009a08:	20004898 	.word	0x20004898

08009a0c <sbrk_aligned>:
 8009a0c:	b570      	push	{r4, r5, r6, lr}
 8009a0e:	4e0e      	ldr	r6, [pc, #56]	; (8009a48 <sbrk_aligned+0x3c>)
 8009a10:	460c      	mov	r4, r1
 8009a12:	6831      	ldr	r1, [r6, #0]
 8009a14:	4605      	mov	r5, r0
 8009a16:	b911      	cbnz	r1, 8009a1e <sbrk_aligned+0x12>
 8009a18:	f000 f9f2 	bl	8009e00 <_sbrk_r>
 8009a1c:	6030      	str	r0, [r6, #0]
 8009a1e:	4621      	mov	r1, r4
 8009a20:	4628      	mov	r0, r5
 8009a22:	f000 f9ed 	bl	8009e00 <_sbrk_r>
 8009a26:	1c43      	adds	r3, r0, #1
 8009a28:	d00a      	beq.n	8009a40 <sbrk_aligned+0x34>
 8009a2a:	1cc4      	adds	r4, r0, #3
 8009a2c:	f024 0403 	bic.w	r4, r4, #3
 8009a30:	42a0      	cmp	r0, r4
 8009a32:	d007      	beq.n	8009a44 <sbrk_aligned+0x38>
 8009a34:	1a21      	subs	r1, r4, r0
 8009a36:	4628      	mov	r0, r5
 8009a38:	f000 f9e2 	bl	8009e00 <_sbrk_r>
 8009a3c:	3001      	adds	r0, #1
 8009a3e:	d101      	bne.n	8009a44 <sbrk_aligned+0x38>
 8009a40:	f04f 34ff 	mov.w	r4, #4294967295
 8009a44:	4620      	mov	r0, r4
 8009a46:	bd70      	pop	{r4, r5, r6, pc}
 8009a48:	2000489c 	.word	0x2000489c

08009a4c <_malloc_r>:
 8009a4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009a50:	1ccd      	adds	r5, r1, #3
 8009a52:	f025 0503 	bic.w	r5, r5, #3
 8009a56:	3508      	adds	r5, #8
 8009a58:	2d0c      	cmp	r5, #12
 8009a5a:	bf38      	it	cc
 8009a5c:	250c      	movcc	r5, #12
 8009a5e:	2d00      	cmp	r5, #0
 8009a60:	4607      	mov	r7, r0
 8009a62:	db01      	blt.n	8009a68 <_malloc_r+0x1c>
 8009a64:	42a9      	cmp	r1, r5
 8009a66:	d905      	bls.n	8009a74 <_malloc_r+0x28>
 8009a68:	230c      	movs	r3, #12
 8009a6a:	603b      	str	r3, [r7, #0]
 8009a6c:	2600      	movs	r6, #0
 8009a6e:	4630      	mov	r0, r6
 8009a70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009a74:	4e2e      	ldr	r6, [pc, #184]	; (8009b30 <_malloc_r+0xe4>)
 8009a76:	f000 fa3f 	bl	8009ef8 <__malloc_lock>
 8009a7a:	6833      	ldr	r3, [r6, #0]
 8009a7c:	461c      	mov	r4, r3
 8009a7e:	bb34      	cbnz	r4, 8009ace <_malloc_r+0x82>
 8009a80:	4629      	mov	r1, r5
 8009a82:	4638      	mov	r0, r7
 8009a84:	f7ff ffc2 	bl	8009a0c <sbrk_aligned>
 8009a88:	1c43      	adds	r3, r0, #1
 8009a8a:	4604      	mov	r4, r0
 8009a8c:	d14d      	bne.n	8009b2a <_malloc_r+0xde>
 8009a8e:	6834      	ldr	r4, [r6, #0]
 8009a90:	4626      	mov	r6, r4
 8009a92:	2e00      	cmp	r6, #0
 8009a94:	d140      	bne.n	8009b18 <_malloc_r+0xcc>
 8009a96:	6823      	ldr	r3, [r4, #0]
 8009a98:	4631      	mov	r1, r6
 8009a9a:	4638      	mov	r0, r7
 8009a9c:	eb04 0803 	add.w	r8, r4, r3
 8009aa0:	f000 f9ae 	bl	8009e00 <_sbrk_r>
 8009aa4:	4580      	cmp	r8, r0
 8009aa6:	d13a      	bne.n	8009b1e <_malloc_r+0xd2>
 8009aa8:	6821      	ldr	r1, [r4, #0]
 8009aaa:	3503      	adds	r5, #3
 8009aac:	1a6d      	subs	r5, r5, r1
 8009aae:	f025 0503 	bic.w	r5, r5, #3
 8009ab2:	3508      	adds	r5, #8
 8009ab4:	2d0c      	cmp	r5, #12
 8009ab6:	bf38      	it	cc
 8009ab8:	250c      	movcc	r5, #12
 8009aba:	4629      	mov	r1, r5
 8009abc:	4638      	mov	r0, r7
 8009abe:	f7ff ffa5 	bl	8009a0c <sbrk_aligned>
 8009ac2:	3001      	adds	r0, #1
 8009ac4:	d02b      	beq.n	8009b1e <_malloc_r+0xd2>
 8009ac6:	6823      	ldr	r3, [r4, #0]
 8009ac8:	442b      	add	r3, r5
 8009aca:	6023      	str	r3, [r4, #0]
 8009acc:	e00e      	b.n	8009aec <_malloc_r+0xa0>
 8009ace:	6822      	ldr	r2, [r4, #0]
 8009ad0:	1b52      	subs	r2, r2, r5
 8009ad2:	d41e      	bmi.n	8009b12 <_malloc_r+0xc6>
 8009ad4:	2a0b      	cmp	r2, #11
 8009ad6:	d916      	bls.n	8009b06 <_malloc_r+0xba>
 8009ad8:	1961      	adds	r1, r4, r5
 8009ada:	42a3      	cmp	r3, r4
 8009adc:	6025      	str	r5, [r4, #0]
 8009ade:	bf18      	it	ne
 8009ae0:	6059      	strne	r1, [r3, #4]
 8009ae2:	6863      	ldr	r3, [r4, #4]
 8009ae4:	bf08      	it	eq
 8009ae6:	6031      	streq	r1, [r6, #0]
 8009ae8:	5162      	str	r2, [r4, r5]
 8009aea:	604b      	str	r3, [r1, #4]
 8009aec:	4638      	mov	r0, r7
 8009aee:	f104 060b 	add.w	r6, r4, #11
 8009af2:	f000 fa07 	bl	8009f04 <__malloc_unlock>
 8009af6:	f026 0607 	bic.w	r6, r6, #7
 8009afa:	1d23      	adds	r3, r4, #4
 8009afc:	1af2      	subs	r2, r6, r3
 8009afe:	d0b6      	beq.n	8009a6e <_malloc_r+0x22>
 8009b00:	1b9b      	subs	r3, r3, r6
 8009b02:	50a3      	str	r3, [r4, r2]
 8009b04:	e7b3      	b.n	8009a6e <_malloc_r+0x22>
 8009b06:	6862      	ldr	r2, [r4, #4]
 8009b08:	42a3      	cmp	r3, r4
 8009b0a:	bf0c      	ite	eq
 8009b0c:	6032      	streq	r2, [r6, #0]
 8009b0e:	605a      	strne	r2, [r3, #4]
 8009b10:	e7ec      	b.n	8009aec <_malloc_r+0xa0>
 8009b12:	4623      	mov	r3, r4
 8009b14:	6864      	ldr	r4, [r4, #4]
 8009b16:	e7b2      	b.n	8009a7e <_malloc_r+0x32>
 8009b18:	4634      	mov	r4, r6
 8009b1a:	6876      	ldr	r6, [r6, #4]
 8009b1c:	e7b9      	b.n	8009a92 <_malloc_r+0x46>
 8009b1e:	230c      	movs	r3, #12
 8009b20:	603b      	str	r3, [r7, #0]
 8009b22:	4638      	mov	r0, r7
 8009b24:	f000 f9ee 	bl	8009f04 <__malloc_unlock>
 8009b28:	e7a1      	b.n	8009a6e <_malloc_r+0x22>
 8009b2a:	6025      	str	r5, [r4, #0]
 8009b2c:	e7de      	b.n	8009aec <_malloc_r+0xa0>
 8009b2e:	bf00      	nop
 8009b30:	20004898 	.word	0x20004898

08009b34 <__ssputs_r>:
 8009b34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009b38:	688e      	ldr	r6, [r1, #8]
 8009b3a:	429e      	cmp	r6, r3
 8009b3c:	4682      	mov	sl, r0
 8009b3e:	460c      	mov	r4, r1
 8009b40:	4690      	mov	r8, r2
 8009b42:	461f      	mov	r7, r3
 8009b44:	d838      	bhi.n	8009bb8 <__ssputs_r+0x84>
 8009b46:	898a      	ldrh	r2, [r1, #12]
 8009b48:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8009b4c:	d032      	beq.n	8009bb4 <__ssputs_r+0x80>
 8009b4e:	6825      	ldr	r5, [r4, #0]
 8009b50:	6909      	ldr	r1, [r1, #16]
 8009b52:	eba5 0901 	sub.w	r9, r5, r1
 8009b56:	6965      	ldr	r5, [r4, #20]
 8009b58:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009b5c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009b60:	3301      	adds	r3, #1
 8009b62:	444b      	add	r3, r9
 8009b64:	106d      	asrs	r5, r5, #1
 8009b66:	429d      	cmp	r5, r3
 8009b68:	bf38      	it	cc
 8009b6a:	461d      	movcc	r5, r3
 8009b6c:	0553      	lsls	r3, r2, #21
 8009b6e:	d531      	bpl.n	8009bd4 <__ssputs_r+0xa0>
 8009b70:	4629      	mov	r1, r5
 8009b72:	f7ff ff6b 	bl	8009a4c <_malloc_r>
 8009b76:	4606      	mov	r6, r0
 8009b78:	b950      	cbnz	r0, 8009b90 <__ssputs_r+0x5c>
 8009b7a:	230c      	movs	r3, #12
 8009b7c:	f8ca 3000 	str.w	r3, [sl]
 8009b80:	89a3      	ldrh	r3, [r4, #12]
 8009b82:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009b86:	81a3      	strh	r3, [r4, #12]
 8009b88:	f04f 30ff 	mov.w	r0, #4294967295
 8009b8c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009b90:	6921      	ldr	r1, [r4, #16]
 8009b92:	464a      	mov	r2, r9
 8009b94:	f7ff fa08 	bl	8008fa8 <memcpy>
 8009b98:	89a3      	ldrh	r3, [r4, #12]
 8009b9a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8009b9e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009ba2:	81a3      	strh	r3, [r4, #12]
 8009ba4:	6126      	str	r6, [r4, #16]
 8009ba6:	6165      	str	r5, [r4, #20]
 8009ba8:	444e      	add	r6, r9
 8009baa:	eba5 0509 	sub.w	r5, r5, r9
 8009bae:	6026      	str	r6, [r4, #0]
 8009bb0:	60a5      	str	r5, [r4, #8]
 8009bb2:	463e      	mov	r6, r7
 8009bb4:	42be      	cmp	r6, r7
 8009bb6:	d900      	bls.n	8009bba <__ssputs_r+0x86>
 8009bb8:	463e      	mov	r6, r7
 8009bba:	6820      	ldr	r0, [r4, #0]
 8009bbc:	4632      	mov	r2, r6
 8009bbe:	4641      	mov	r1, r8
 8009bc0:	f000 f980 	bl	8009ec4 <memmove>
 8009bc4:	68a3      	ldr	r3, [r4, #8]
 8009bc6:	1b9b      	subs	r3, r3, r6
 8009bc8:	60a3      	str	r3, [r4, #8]
 8009bca:	6823      	ldr	r3, [r4, #0]
 8009bcc:	4433      	add	r3, r6
 8009bce:	6023      	str	r3, [r4, #0]
 8009bd0:	2000      	movs	r0, #0
 8009bd2:	e7db      	b.n	8009b8c <__ssputs_r+0x58>
 8009bd4:	462a      	mov	r2, r5
 8009bd6:	f000 f99b 	bl	8009f10 <_realloc_r>
 8009bda:	4606      	mov	r6, r0
 8009bdc:	2800      	cmp	r0, #0
 8009bde:	d1e1      	bne.n	8009ba4 <__ssputs_r+0x70>
 8009be0:	6921      	ldr	r1, [r4, #16]
 8009be2:	4650      	mov	r0, sl
 8009be4:	f7ff fec6 	bl	8009974 <_free_r>
 8009be8:	e7c7      	b.n	8009b7a <__ssputs_r+0x46>
	...

08009bec <_svfiprintf_r>:
 8009bec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009bf0:	4698      	mov	r8, r3
 8009bf2:	898b      	ldrh	r3, [r1, #12]
 8009bf4:	061b      	lsls	r3, r3, #24
 8009bf6:	b09d      	sub	sp, #116	; 0x74
 8009bf8:	4607      	mov	r7, r0
 8009bfa:	460d      	mov	r5, r1
 8009bfc:	4614      	mov	r4, r2
 8009bfe:	d50e      	bpl.n	8009c1e <_svfiprintf_r+0x32>
 8009c00:	690b      	ldr	r3, [r1, #16]
 8009c02:	b963      	cbnz	r3, 8009c1e <_svfiprintf_r+0x32>
 8009c04:	2140      	movs	r1, #64	; 0x40
 8009c06:	f7ff ff21 	bl	8009a4c <_malloc_r>
 8009c0a:	6028      	str	r0, [r5, #0]
 8009c0c:	6128      	str	r0, [r5, #16]
 8009c0e:	b920      	cbnz	r0, 8009c1a <_svfiprintf_r+0x2e>
 8009c10:	230c      	movs	r3, #12
 8009c12:	603b      	str	r3, [r7, #0]
 8009c14:	f04f 30ff 	mov.w	r0, #4294967295
 8009c18:	e0d1      	b.n	8009dbe <_svfiprintf_r+0x1d2>
 8009c1a:	2340      	movs	r3, #64	; 0x40
 8009c1c:	616b      	str	r3, [r5, #20]
 8009c1e:	2300      	movs	r3, #0
 8009c20:	9309      	str	r3, [sp, #36]	; 0x24
 8009c22:	2320      	movs	r3, #32
 8009c24:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009c28:	f8cd 800c 	str.w	r8, [sp, #12]
 8009c2c:	2330      	movs	r3, #48	; 0x30
 8009c2e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8009dd8 <_svfiprintf_r+0x1ec>
 8009c32:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009c36:	f04f 0901 	mov.w	r9, #1
 8009c3a:	4623      	mov	r3, r4
 8009c3c:	469a      	mov	sl, r3
 8009c3e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009c42:	b10a      	cbz	r2, 8009c48 <_svfiprintf_r+0x5c>
 8009c44:	2a25      	cmp	r2, #37	; 0x25
 8009c46:	d1f9      	bne.n	8009c3c <_svfiprintf_r+0x50>
 8009c48:	ebba 0b04 	subs.w	fp, sl, r4
 8009c4c:	d00b      	beq.n	8009c66 <_svfiprintf_r+0x7a>
 8009c4e:	465b      	mov	r3, fp
 8009c50:	4622      	mov	r2, r4
 8009c52:	4629      	mov	r1, r5
 8009c54:	4638      	mov	r0, r7
 8009c56:	f7ff ff6d 	bl	8009b34 <__ssputs_r>
 8009c5a:	3001      	adds	r0, #1
 8009c5c:	f000 80aa 	beq.w	8009db4 <_svfiprintf_r+0x1c8>
 8009c60:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009c62:	445a      	add	r2, fp
 8009c64:	9209      	str	r2, [sp, #36]	; 0x24
 8009c66:	f89a 3000 	ldrb.w	r3, [sl]
 8009c6a:	2b00      	cmp	r3, #0
 8009c6c:	f000 80a2 	beq.w	8009db4 <_svfiprintf_r+0x1c8>
 8009c70:	2300      	movs	r3, #0
 8009c72:	f04f 32ff 	mov.w	r2, #4294967295
 8009c76:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009c7a:	f10a 0a01 	add.w	sl, sl, #1
 8009c7e:	9304      	str	r3, [sp, #16]
 8009c80:	9307      	str	r3, [sp, #28]
 8009c82:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009c86:	931a      	str	r3, [sp, #104]	; 0x68
 8009c88:	4654      	mov	r4, sl
 8009c8a:	2205      	movs	r2, #5
 8009c8c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009c90:	4851      	ldr	r0, [pc, #324]	; (8009dd8 <_svfiprintf_r+0x1ec>)
 8009c92:	f7f6 fb05 	bl	80002a0 <memchr>
 8009c96:	9a04      	ldr	r2, [sp, #16]
 8009c98:	b9d8      	cbnz	r0, 8009cd2 <_svfiprintf_r+0xe6>
 8009c9a:	06d0      	lsls	r0, r2, #27
 8009c9c:	bf44      	itt	mi
 8009c9e:	2320      	movmi	r3, #32
 8009ca0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009ca4:	0711      	lsls	r1, r2, #28
 8009ca6:	bf44      	itt	mi
 8009ca8:	232b      	movmi	r3, #43	; 0x2b
 8009caa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009cae:	f89a 3000 	ldrb.w	r3, [sl]
 8009cb2:	2b2a      	cmp	r3, #42	; 0x2a
 8009cb4:	d015      	beq.n	8009ce2 <_svfiprintf_r+0xf6>
 8009cb6:	9a07      	ldr	r2, [sp, #28]
 8009cb8:	4654      	mov	r4, sl
 8009cba:	2000      	movs	r0, #0
 8009cbc:	f04f 0c0a 	mov.w	ip, #10
 8009cc0:	4621      	mov	r1, r4
 8009cc2:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009cc6:	3b30      	subs	r3, #48	; 0x30
 8009cc8:	2b09      	cmp	r3, #9
 8009cca:	d94e      	bls.n	8009d6a <_svfiprintf_r+0x17e>
 8009ccc:	b1b0      	cbz	r0, 8009cfc <_svfiprintf_r+0x110>
 8009cce:	9207      	str	r2, [sp, #28]
 8009cd0:	e014      	b.n	8009cfc <_svfiprintf_r+0x110>
 8009cd2:	eba0 0308 	sub.w	r3, r0, r8
 8009cd6:	fa09 f303 	lsl.w	r3, r9, r3
 8009cda:	4313      	orrs	r3, r2
 8009cdc:	9304      	str	r3, [sp, #16]
 8009cde:	46a2      	mov	sl, r4
 8009ce0:	e7d2      	b.n	8009c88 <_svfiprintf_r+0x9c>
 8009ce2:	9b03      	ldr	r3, [sp, #12]
 8009ce4:	1d19      	adds	r1, r3, #4
 8009ce6:	681b      	ldr	r3, [r3, #0]
 8009ce8:	9103      	str	r1, [sp, #12]
 8009cea:	2b00      	cmp	r3, #0
 8009cec:	bfbb      	ittet	lt
 8009cee:	425b      	neglt	r3, r3
 8009cf0:	f042 0202 	orrlt.w	r2, r2, #2
 8009cf4:	9307      	strge	r3, [sp, #28]
 8009cf6:	9307      	strlt	r3, [sp, #28]
 8009cf8:	bfb8      	it	lt
 8009cfa:	9204      	strlt	r2, [sp, #16]
 8009cfc:	7823      	ldrb	r3, [r4, #0]
 8009cfe:	2b2e      	cmp	r3, #46	; 0x2e
 8009d00:	d10c      	bne.n	8009d1c <_svfiprintf_r+0x130>
 8009d02:	7863      	ldrb	r3, [r4, #1]
 8009d04:	2b2a      	cmp	r3, #42	; 0x2a
 8009d06:	d135      	bne.n	8009d74 <_svfiprintf_r+0x188>
 8009d08:	9b03      	ldr	r3, [sp, #12]
 8009d0a:	1d1a      	adds	r2, r3, #4
 8009d0c:	681b      	ldr	r3, [r3, #0]
 8009d0e:	9203      	str	r2, [sp, #12]
 8009d10:	2b00      	cmp	r3, #0
 8009d12:	bfb8      	it	lt
 8009d14:	f04f 33ff 	movlt.w	r3, #4294967295
 8009d18:	3402      	adds	r4, #2
 8009d1a:	9305      	str	r3, [sp, #20]
 8009d1c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8009de8 <_svfiprintf_r+0x1fc>
 8009d20:	7821      	ldrb	r1, [r4, #0]
 8009d22:	2203      	movs	r2, #3
 8009d24:	4650      	mov	r0, sl
 8009d26:	f7f6 fabb 	bl	80002a0 <memchr>
 8009d2a:	b140      	cbz	r0, 8009d3e <_svfiprintf_r+0x152>
 8009d2c:	2340      	movs	r3, #64	; 0x40
 8009d2e:	eba0 000a 	sub.w	r0, r0, sl
 8009d32:	fa03 f000 	lsl.w	r0, r3, r0
 8009d36:	9b04      	ldr	r3, [sp, #16]
 8009d38:	4303      	orrs	r3, r0
 8009d3a:	3401      	adds	r4, #1
 8009d3c:	9304      	str	r3, [sp, #16]
 8009d3e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009d42:	4826      	ldr	r0, [pc, #152]	; (8009ddc <_svfiprintf_r+0x1f0>)
 8009d44:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009d48:	2206      	movs	r2, #6
 8009d4a:	f7f6 faa9 	bl	80002a0 <memchr>
 8009d4e:	2800      	cmp	r0, #0
 8009d50:	d038      	beq.n	8009dc4 <_svfiprintf_r+0x1d8>
 8009d52:	4b23      	ldr	r3, [pc, #140]	; (8009de0 <_svfiprintf_r+0x1f4>)
 8009d54:	bb1b      	cbnz	r3, 8009d9e <_svfiprintf_r+0x1b2>
 8009d56:	9b03      	ldr	r3, [sp, #12]
 8009d58:	3307      	adds	r3, #7
 8009d5a:	f023 0307 	bic.w	r3, r3, #7
 8009d5e:	3308      	adds	r3, #8
 8009d60:	9303      	str	r3, [sp, #12]
 8009d62:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009d64:	4433      	add	r3, r6
 8009d66:	9309      	str	r3, [sp, #36]	; 0x24
 8009d68:	e767      	b.n	8009c3a <_svfiprintf_r+0x4e>
 8009d6a:	fb0c 3202 	mla	r2, ip, r2, r3
 8009d6e:	460c      	mov	r4, r1
 8009d70:	2001      	movs	r0, #1
 8009d72:	e7a5      	b.n	8009cc0 <_svfiprintf_r+0xd4>
 8009d74:	2300      	movs	r3, #0
 8009d76:	3401      	adds	r4, #1
 8009d78:	9305      	str	r3, [sp, #20]
 8009d7a:	4619      	mov	r1, r3
 8009d7c:	f04f 0c0a 	mov.w	ip, #10
 8009d80:	4620      	mov	r0, r4
 8009d82:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009d86:	3a30      	subs	r2, #48	; 0x30
 8009d88:	2a09      	cmp	r2, #9
 8009d8a:	d903      	bls.n	8009d94 <_svfiprintf_r+0x1a8>
 8009d8c:	2b00      	cmp	r3, #0
 8009d8e:	d0c5      	beq.n	8009d1c <_svfiprintf_r+0x130>
 8009d90:	9105      	str	r1, [sp, #20]
 8009d92:	e7c3      	b.n	8009d1c <_svfiprintf_r+0x130>
 8009d94:	fb0c 2101 	mla	r1, ip, r1, r2
 8009d98:	4604      	mov	r4, r0
 8009d9a:	2301      	movs	r3, #1
 8009d9c:	e7f0      	b.n	8009d80 <_svfiprintf_r+0x194>
 8009d9e:	ab03      	add	r3, sp, #12
 8009da0:	9300      	str	r3, [sp, #0]
 8009da2:	462a      	mov	r2, r5
 8009da4:	4b0f      	ldr	r3, [pc, #60]	; (8009de4 <_svfiprintf_r+0x1f8>)
 8009da6:	a904      	add	r1, sp, #16
 8009da8:	4638      	mov	r0, r7
 8009daa:	f7fc fa49 	bl	8006240 <_printf_float>
 8009dae:	1c42      	adds	r2, r0, #1
 8009db0:	4606      	mov	r6, r0
 8009db2:	d1d6      	bne.n	8009d62 <_svfiprintf_r+0x176>
 8009db4:	89ab      	ldrh	r3, [r5, #12]
 8009db6:	065b      	lsls	r3, r3, #25
 8009db8:	f53f af2c 	bmi.w	8009c14 <_svfiprintf_r+0x28>
 8009dbc:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009dbe:	b01d      	add	sp, #116	; 0x74
 8009dc0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009dc4:	ab03      	add	r3, sp, #12
 8009dc6:	9300      	str	r3, [sp, #0]
 8009dc8:	462a      	mov	r2, r5
 8009dca:	4b06      	ldr	r3, [pc, #24]	; (8009de4 <_svfiprintf_r+0x1f8>)
 8009dcc:	a904      	add	r1, sp, #16
 8009dce:	4638      	mov	r0, r7
 8009dd0:	f7fc fcda 	bl	8006788 <_printf_i>
 8009dd4:	e7eb      	b.n	8009dae <_svfiprintf_r+0x1c2>
 8009dd6:	bf00      	nop
 8009dd8:	0800edcc 	.word	0x0800edcc
 8009ddc:	0800edd6 	.word	0x0800edd6
 8009de0:	08006241 	.word	0x08006241
 8009de4:	08009b35 	.word	0x08009b35
 8009de8:	0800edd2 	.word	0x0800edd2
 8009dec:	00000000 	.word	0x00000000

08009df0 <nan>:
 8009df0:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8009df8 <nan+0x8>
 8009df4:	4770      	bx	lr
 8009df6:	bf00      	nop
 8009df8:	00000000 	.word	0x00000000
 8009dfc:	7ff80000 	.word	0x7ff80000

08009e00 <_sbrk_r>:
 8009e00:	b538      	push	{r3, r4, r5, lr}
 8009e02:	4d06      	ldr	r5, [pc, #24]	; (8009e1c <_sbrk_r+0x1c>)
 8009e04:	2300      	movs	r3, #0
 8009e06:	4604      	mov	r4, r0
 8009e08:	4608      	mov	r0, r1
 8009e0a:	602b      	str	r3, [r5, #0]
 8009e0c:	f7f7 ff3c 	bl	8001c88 <_sbrk>
 8009e10:	1c43      	adds	r3, r0, #1
 8009e12:	d102      	bne.n	8009e1a <_sbrk_r+0x1a>
 8009e14:	682b      	ldr	r3, [r5, #0]
 8009e16:	b103      	cbz	r3, 8009e1a <_sbrk_r+0x1a>
 8009e18:	6023      	str	r3, [r4, #0]
 8009e1a:	bd38      	pop	{r3, r4, r5, pc}
 8009e1c:	200048a0 	.word	0x200048a0

08009e20 <strncmp>:
 8009e20:	b510      	push	{r4, lr}
 8009e22:	b17a      	cbz	r2, 8009e44 <strncmp+0x24>
 8009e24:	4603      	mov	r3, r0
 8009e26:	3901      	subs	r1, #1
 8009e28:	1884      	adds	r4, r0, r2
 8009e2a:	f813 0b01 	ldrb.w	r0, [r3], #1
 8009e2e:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8009e32:	4290      	cmp	r0, r2
 8009e34:	d101      	bne.n	8009e3a <strncmp+0x1a>
 8009e36:	42a3      	cmp	r3, r4
 8009e38:	d101      	bne.n	8009e3e <strncmp+0x1e>
 8009e3a:	1a80      	subs	r0, r0, r2
 8009e3c:	bd10      	pop	{r4, pc}
 8009e3e:	2800      	cmp	r0, #0
 8009e40:	d1f3      	bne.n	8009e2a <strncmp+0xa>
 8009e42:	e7fa      	b.n	8009e3a <strncmp+0x1a>
 8009e44:	4610      	mov	r0, r2
 8009e46:	e7f9      	b.n	8009e3c <strncmp+0x1c>

08009e48 <__ascii_wctomb>:
 8009e48:	b149      	cbz	r1, 8009e5e <__ascii_wctomb+0x16>
 8009e4a:	2aff      	cmp	r2, #255	; 0xff
 8009e4c:	bf85      	ittet	hi
 8009e4e:	238a      	movhi	r3, #138	; 0x8a
 8009e50:	6003      	strhi	r3, [r0, #0]
 8009e52:	700a      	strbls	r2, [r1, #0]
 8009e54:	f04f 30ff 	movhi.w	r0, #4294967295
 8009e58:	bf98      	it	ls
 8009e5a:	2001      	movls	r0, #1
 8009e5c:	4770      	bx	lr
 8009e5e:	4608      	mov	r0, r1
 8009e60:	4770      	bx	lr
	...

08009e64 <__assert_func>:
 8009e64:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009e66:	4614      	mov	r4, r2
 8009e68:	461a      	mov	r2, r3
 8009e6a:	4b09      	ldr	r3, [pc, #36]	; (8009e90 <__assert_func+0x2c>)
 8009e6c:	681b      	ldr	r3, [r3, #0]
 8009e6e:	4605      	mov	r5, r0
 8009e70:	68d8      	ldr	r0, [r3, #12]
 8009e72:	b14c      	cbz	r4, 8009e88 <__assert_func+0x24>
 8009e74:	4b07      	ldr	r3, [pc, #28]	; (8009e94 <__assert_func+0x30>)
 8009e76:	9100      	str	r1, [sp, #0]
 8009e78:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009e7c:	4906      	ldr	r1, [pc, #24]	; (8009e98 <__assert_func+0x34>)
 8009e7e:	462b      	mov	r3, r5
 8009e80:	f000 f80e 	bl	8009ea0 <fiprintf>
 8009e84:	f000 fa8c 	bl	800a3a0 <abort>
 8009e88:	4b04      	ldr	r3, [pc, #16]	; (8009e9c <__assert_func+0x38>)
 8009e8a:	461c      	mov	r4, r3
 8009e8c:	e7f3      	b.n	8009e76 <__assert_func+0x12>
 8009e8e:	bf00      	nop
 8009e90:	20000024 	.word	0x20000024
 8009e94:	0800eddd 	.word	0x0800eddd
 8009e98:	0800edea 	.word	0x0800edea
 8009e9c:	0800ee18 	.word	0x0800ee18

08009ea0 <fiprintf>:
 8009ea0:	b40e      	push	{r1, r2, r3}
 8009ea2:	b503      	push	{r0, r1, lr}
 8009ea4:	4601      	mov	r1, r0
 8009ea6:	ab03      	add	r3, sp, #12
 8009ea8:	4805      	ldr	r0, [pc, #20]	; (8009ec0 <fiprintf+0x20>)
 8009eaa:	f853 2b04 	ldr.w	r2, [r3], #4
 8009eae:	6800      	ldr	r0, [r0, #0]
 8009eb0:	9301      	str	r3, [sp, #4]
 8009eb2:	f000 f885 	bl	8009fc0 <_vfiprintf_r>
 8009eb6:	b002      	add	sp, #8
 8009eb8:	f85d eb04 	ldr.w	lr, [sp], #4
 8009ebc:	b003      	add	sp, #12
 8009ebe:	4770      	bx	lr
 8009ec0:	20000024 	.word	0x20000024

08009ec4 <memmove>:
 8009ec4:	4288      	cmp	r0, r1
 8009ec6:	b510      	push	{r4, lr}
 8009ec8:	eb01 0402 	add.w	r4, r1, r2
 8009ecc:	d902      	bls.n	8009ed4 <memmove+0x10>
 8009ece:	4284      	cmp	r4, r0
 8009ed0:	4623      	mov	r3, r4
 8009ed2:	d807      	bhi.n	8009ee4 <memmove+0x20>
 8009ed4:	1e43      	subs	r3, r0, #1
 8009ed6:	42a1      	cmp	r1, r4
 8009ed8:	d008      	beq.n	8009eec <memmove+0x28>
 8009eda:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009ede:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009ee2:	e7f8      	b.n	8009ed6 <memmove+0x12>
 8009ee4:	4402      	add	r2, r0
 8009ee6:	4601      	mov	r1, r0
 8009ee8:	428a      	cmp	r2, r1
 8009eea:	d100      	bne.n	8009eee <memmove+0x2a>
 8009eec:	bd10      	pop	{r4, pc}
 8009eee:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009ef2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009ef6:	e7f7      	b.n	8009ee8 <memmove+0x24>

08009ef8 <__malloc_lock>:
 8009ef8:	4801      	ldr	r0, [pc, #4]	; (8009f00 <__malloc_lock+0x8>)
 8009efa:	f000 bc11 	b.w	800a720 <__retarget_lock_acquire_recursive>
 8009efe:	bf00      	nop
 8009f00:	200048a4 	.word	0x200048a4

08009f04 <__malloc_unlock>:
 8009f04:	4801      	ldr	r0, [pc, #4]	; (8009f0c <__malloc_unlock+0x8>)
 8009f06:	f000 bc0c 	b.w	800a722 <__retarget_lock_release_recursive>
 8009f0a:	bf00      	nop
 8009f0c:	200048a4 	.word	0x200048a4

08009f10 <_realloc_r>:
 8009f10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009f14:	4680      	mov	r8, r0
 8009f16:	4614      	mov	r4, r2
 8009f18:	460e      	mov	r6, r1
 8009f1a:	b921      	cbnz	r1, 8009f26 <_realloc_r+0x16>
 8009f1c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009f20:	4611      	mov	r1, r2
 8009f22:	f7ff bd93 	b.w	8009a4c <_malloc_r>
 8009f26:	b92a      	cbnz	r2, 8009f34 <_realloc_r+0x24>
 8009f28:	f7ff fd24 	bl	8009974 <_free_r>
 8009f2c:	4625      	mov	r5, r4
 8009f2e:	4628      	mov	r0, r5
 8009f30:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009f34:	f000 fc5c 	bl	800a7f0 <_malloc_usable_size_r>
 8009f38:	4284      	cmp	r4, r0
 8009f3a:	4607      	mov	r7, r0
 8009f3c:	d802      	bhi.n	8009f44 <_realloc_r+0x34>
 8009f3e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8009f42:	d812      	bhi.n	8009f6a <_realloc_r+0x5a>
 8009f44:	4621      	mov	r1, r4
 8009f46:	4640      	mov	r0, r8
 8009f48:	f7ff fd80 	bl	8009a4c <_malloc_r>
 8009f4c:	4605      	mov	r5, r0
 8009f4e:	2800      	cmp	r0, #0
 8009f50:	d0ed      	beq.n	8009f2e <_realloc_r+0x1e>
 8009f52:	42bc      	cmp	r4, r7
 8009f54:	4622      	mov	r2, r4
 8009f56:	4631      	mov	r1, r6
 8009f58:	bf28      	it	cs
 8009f5a:	463a      	movcs	r2, r7
 8009f5c:	f7ff f824 	bl	8008fa8 <memcpy>
 8009f60:	4631      	mov	r1, r6
 8009f62:	4640      	mov	r0, r8
 8009f64:	f7ff fd06 	bl	8009974 <_free_r>
 8009f68:	e7e1      	b.n	8009f2e <_realloc_r+0x1e>
 8009f6a:	4635      	mov	r5, r6
 8009f6c:	e7df      	b.n	8009f2e <_realloc_r+0x1e>

08009f6e <__sfputc_r>:
 8009f6e:	6893      	ldr	r3, [r2, #8]
 8009f70:	3b01      	subs	r3, #1
 8009f72:	2b00      	cmp	r3, #0
 8009f74:	b410      	push	{r4}
 8009f76:	6093      	str	r3, [r2, #8]
 8009f78:	da08      	bge.n	8009f8c <__sfputc_r+0x1e>
 8009f7a:	6994      	ldr	r4, [r2, #24]
 8009f7c:	42a3      	cmp	r3, r4
 8009f7e:	db01      	blt.n	8009f84 <__sfputc_r+0x16>
 8009f80:	290a      	cmp	r1, #10
 8009f82:	d103      	bne.n	8009f8c <__sfputc_r+0x1e>
 8009f84:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009f88:	f000 b94a 	b.w	800a220 <__swbuf_r>
 8009f8c:	6813      	ldr	r3, [r2, #0]
 8009f8e:	1c58      	adds	r0, r3, #1
 8009f90:	6010      	str	r0, [r2, #0]
 8009f92:	7019      	strb	r1, [r3, #0]
 8009f94:	4608      	mov	r0, r1
 8009f96:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009f9a:	4770      	bx	lr

08009f9c <__sfputs_r>:
 8009f9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009f9e:	4606      	mov	r6, r0
 8009fa0:	460f      	mov	r7, r1
 8009fa2:	4614      	mov	r4, r2
 8009fa4:	18d5      	adds	r5, r2, r3
 8009fa6:	42ac      	cmp	r4, r5
 8009fa8:	d101      	bne.n	8009fae <__sfputs_r+0x12>
 8009faa:	2000      	movs	r0, #0
 8009fac:	e007      	b.n	8009fbe <__sfputs_r+0x22>
 8009fae:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009fb2:	463a      	mov	r2, r7
 8009fb4:	4630      	mov	r0, r6
 8009fb6:	f7ff ffda 	bl	8009f6e <__sfputc_r>
 8009fba:	1c43      	adds	r3, r0, #1
 8009fbc:	d1f3      	bne.n	8009fa6 <__sfputs_r+0xa>
 8009fbe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08009fc0 <_vfiprintf_r>:
 8009fc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009fc4:	460d      	mov	r5, r1
 8009fc6:	b09d      	sub	sp, #116	; 0x74
 8009fc8:	4614      	mov	r4, r2
 8009fca:	4698      	mov	r8, r3
 8009fcc:	4606      	mov	r6, r0
 8009fce:	b118      	cbz	r0, 8009fd8 <_vfiprintf_r+0x18>
 8009fd0:	6983      	ldr	r3, [r0, #24]
 8009fd2:	b90b      	cbnz	r3, 8009fd8 <_vfiprintf_r+0x18>
 8009fd4:	f000 fb06 	bl	800a5e4 <__sinit>
 8009fd8:	4b89      	ldr	r3, [pc, #548]	; (800a200 <_vfiprintf_r+0x240>)
 8009fda:	429d      	cmp	r5, r3
 8009fdc:	d11b      	bne.n	800a016 <_vfiprintf_r+0x56>
 8009fde:	6875      	ldr	r5, [r6, #4]
 8009fe0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009fe2:	07d9      	lsls	r1, r3, #31
 8009fe4:	d405      	bmi.n	8009ff2 <_vfiprintf_r+0x32>
 8009fe6:	89ab      	ldrh	r3, [r5, #12]
 8009fe8:	059a      	lsls	r2, r3, #22
 8009fea:	d402      	bmi.n	8009ff2 <_vfiprintf_r+0x32>
 8009fec:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009fee:	f000 fb97 	bl	800a720 <__retarget_lock_acquire_recursive>
 8009ff2:	89ab      	ldrh	r3, [r5, #12]
 8009ff4:	071b      	lsls	r3, r3, #28
 8009ff6:	d501      	bpl.n	8009ffc <_vfiprintf_r+0x3c>
 8009ff8:	692b      	ldr	r3, [r5, #16]
 8009ffa:	b9eb      	cbnz	r3, 800a038 <_vfiprintf_r+0x78>
 8009ffc:	4629      	mov	r1, r5
 8009ffe:	4630      	mov	r0, r6
 800a000:	f000 f960 	bl	800a2c4 <__swsetup_r>
 800a004:	b1c0      	cbz	r0, 800a038 <_vfiprintf_r+0x78>
 800a006:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a008:	07dc      	lsls	r4, r3, #31
 800a00a:	d50e      	bpl.n	800a02a <_vfiprintf_r+0x6a>
 800a00c:	f04f 30ff 	mov.w	r0, #4294967295
 800a010:	b01d      	add	sp, #116	; 0x74
 800a012:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a016:	4b7b      	ldr	r3, [pc, #492]	; (800a204 <_vfiprintf_r+0x244>)
 800a018:	429d      	cmp	r5, r3
 800a01a:	d101      	bne.n	800a020 <_vfiprintf_r+0x60>
 800a01c:	68b5      	ldr	r5, [r6, #8]
 800a01e:	e7df      	b.n	8009fe0 <_vfiprintf_r+0x20>
 800a020:	4b79      	ldr	r3, [pc, #484]	; (800a208 <_vfiprintf_r+0x248>)
 800a022:	429d      	cmp	r5, r3
 800a024:	bf08      	it	eq
 800a026:	68f5      	ldreq	r5, [r6, #12]
 800a028:	e7da      	b.n	8009fe0 <_vfiprintf_r+0x20>
 800a02a:	89ab      	ldrh	r3, [r5, #12]
 800a02c:	0598      	lsls	r0, r3, #22
 800a02e:	d4ed      	bmi.n	800a00c <_vfiprintf_r+0x4c>
 800a030:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a032:	f000 fb76 	bl	800a722 <__retarget_lock_release_recursive>
 800a036:	e7e9      	b.n	800a00c <_vfiprintf_r+0x4c>
 800a038:	2300      	movs	r3, #0
 800a03a:	9309      	str	r3, [sp, #36]	; 0x24
 800a03c:	2320      	movs	r3, #32
 800a03e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a042:	f8cd 800c 	str.w	r8, [sp, #12]
 800a046:	2330      	movs	r3, #48	; 0x30
 800a048:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800a20c <_vfiprintf_r+0x24c>
 800a04c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a050:	f04f 0901 	mov.w	r9, #1
 800a054:	4623      	mov	r3, r4
 800a056:	469a      	mov	sl, r3
 800a058:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a05c:	b10a      	cbz	r2, 800a062 <_vfiprintf_r+0xa2>
 800a05e:	2a25      	cmp	r2, #37	; 0x25
 800a060:	d1f9      	bne.n	800a056 <_vfiprintf_r+0x96>
 800a062:	ebba 0b04 	subs.w	fp, sl, r4
 800a066:	d00b      	beq.n	800a080 <_vfiprintf_r+0xc0>
 800a068:	465b      	mov	r3, fp
 800a06a:	4622      	mov	r2, r4
 800a06c:	4629      	mov	r1, r5
 800a06e:	4630      	mov	r0, r6
 800a070:	f7ff ff94 	bl	8009f9c <__sfputs_r>
 800a074:	3001      	adds	r0, #1
 800a076:	f000 80aa 	beq.w	800a1ce <_vfiprintf_r+0x20e>
 800a07a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a07c:	445a      	add	r2, fp
 800a07e:	9209      	str	r2, [sp, #36]	; 0x24
 800a080:	f89a 3000 	ldrb.w	r3, [sl]
 800a084:	2b00      	cmp	r3, #0
 800a086:	f000 80a2 	beq.w	800a1ce <_vfiprintf_r+0x20e>
 800a08a:	2300      	movs	r3, #0
 800a08c:	f04f 32ff 	mov.w	r2, #4294967295
 800a090:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a094:	f10a 0a01 	add.w	sl, sl, #1
 800a098:	9304      	str	r3, [sp, #16]
 800a09a:	9307      	str	r3, [sp, #28]
 800a09c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a0a0:	931a      	str	r3, [sp, #104]	; 0x68
 800a0a2:	4654      	mov	r4, sl
 800a0a4:	2205      	movs	r2, #5
 800a0a6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a0aa:	4858      	ldr	r0, [pc, #352]	; (800a20c <_vfiprintf_r+0x24c>)
 800a0ac:	f7f6 f8f8 	bl	80002a0 <memchr>
 800a0b0:	9a04      	ldr	r2, [sp, #16]
 800a0b2:	b9d8      	cbnz	r0, 800a0ec <_vfiprintf_r+0x12c>
 800a0b4:	06d1      	lsls	r1, r2, #27
 800a0b6:	bf44      	itt	mi
 800a0b8:	2320      	movmi	r3, #32
 800a0ba:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a0be:	0713      	lsls	r3, r2, #28
 800a0c0:	bf44      	itt	mi
 800a0c2:	232b      	movmi	r3, #43	; 0x2b
 800a0c4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a0c8:	f89a 3000 	ldrb.w	r3, [sl]
 800a0cc:	2b2a      	cmp	r3, #42	; 0x2a
 800a0ce:	d015      	beq.n	800a0fc <_vfiprintf_r+0x13c>
 800a0d0:	9a07      	ldr	r2, [sp, #28]
 800a0d2:	4654      	mov	r4, sl
 800a0d4:	2000      	movs	r0, #0
 800a0d6:	f04f 0c0a 	mov.w	ip, #10
 800a0da:	4621      	mov	r1, r4
 800a0dc:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a0e0:	3b30      	subs	r3, #48	; 0x30
 800a0e2:	2b09      	cmp	r3, #9
 800a0e4:	d94e      	bls.n	800a184 <_vfiprintf_r+0x1c4>
 800a0e6:	b1b0      	cbz	r0, 800a116 <_vfiprintf_r+0x156>
 800a0e8:	9207      	str	r2, [sp, #28]
 800a0ea:	e014      	b.n	800a116 <_vfiprintf_r+0x156>
 800a0ec:	eba0 0308 	sub.w	r3, r0, r8
 800a0f0:	fa09 f303 	lsl.w	r3, r9, r3
 800a0f4:	4313      	orrs	r3, r2
 800a0f6:	9304      	str	r3, [sp, #16]
 800a0f8:	46a2      	mov	sl, r4
 800a0fa:	e7d2      	b.n	800a0a2 <_vfiprintf_r+0xe2>
 800a0fc:	9b03      	ldr	r3, [sp, #12]
 800a0fe:	1d19      	adds	r1, r3, #4
 800a100:	681b      	ldr	r3, [r3, #0]
 800a102:	9103      	str	r1, [sp, #12]
 800a104:	2b00      	cmp	r3, #0
 800a106:	bfbb      	ittet	lt
 800a108:	425b      	neglt	r3, r3
 800a10a:	f042 0202 	orrlt.w	r2, r2, #2
 800a10e:	9307      	strge	r3, [sp, #28]
 800a110:	9307      	strlt	r3, [sp, #28]
 800a112:	bfb8      	it	lt
 800a114:	9204      	strlt	r2, [sp, #16]
 800a116:	7823      	ldrb	r3, [r4, #0]
 800a118:	2b2e      	cmp	r3, #46	; 0x2e
 800a11a:	d10c      	bne.n	800a136 <_vfiprintf_r+0x176>
 800a11c:	7863      	ldrb	r3, [r4, #1]
 800a11e:	2b2a      	cmp	r3, #42	; 0x2a
 800a120:	d135      	bne.n	800a18e <_vfiprintf_r+0x1ce>
 800a122:	9b03      	ldr	r3, [sp, #12]
 800a124:	1d1a      	adds	r2, r3, #4
 800a126:	681b      	ldr	r3, [r3, #0]
 800a128:	9203      	str	r2, [sp, #12]
 800a12a:	2b00      	cmp	r3, #0
 800a12c:	bfb8      	it	lt
 800a12e:	f04f 33ff 	movlt.w	r3, #4294967295
 800a132:	3402      	adds	r4, #2
 800a134:	9305      	str	r3, [sp, #20]
 800a136:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800a21c <_vfiprintf_r+0x25c>
 800a13a:	7821      	ldrb	r1, [r4, #0]
 800a13c:	2203      	movs	r2, #3
 800a13e:	4650      	mov	r0, sl
 800a140:	f7f6 f8ae 	bl	80002a0 <memchr>
 800a144:	b140      	cbz	r0, 800a158 <_vfiprintf_r+0x198>
 800a146:	2340      	movs	r3, #64	; 0x40
 800a148:	eba0 000a 	sub.w	r0, r0, sl
 800a14c:	fa03 f000 	lsl.w	r0, r3, r0
 800a150:	9b04      	ldr	r3, [sp, #16]
 800a152:	4303      	orrs	r3, r0
 800a154:	3401      	adds	r4, #1
 800a156:	9304      	str	r3, [sp, #16]
 800a158:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a15c:	482c      	ldr	r0, [pc, #176]	; (800a210 <_vfiprintf_r+0x250>)
 800a15e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a162:	2206      	movs	r2, #6
 800a164:	f7f6 f89c 	bl	80002a0 <memchr>
 800a168:	2800      	cmp	r0, #0
 800a16a:	d03f      	beq.n	800a1ec <_vfiprintf_r+0x22c>
 800a16c:	4b29      	ldr	r3, [pc, #164]	; (800a214 <_vfiprintf_r+0x254>)
 800a16e:	bb1b      	cbnz	r3, 800a1b8 <_vfiprintf_r+0x1f8>
 800a170:	9b03      	ldr	r3, [sp, #12]
 800a172:	3307      	adds	r3, #7
 800a174:	f023 0307 	bic.w	r3, r3, #7
 800a178:	3308      	adds	r3, #8
 800a17a:	9303      	str	r3, [sp, #12]
 800a17c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a17e:	443b      	add	r3, r7
 800a180:	9309      	str	r3, [sp, #36]	; 0x24
 800a182:	e767      	b.n	800a054 <_vfiprintf_r+0x94>
 800a184:	fb0c 3202 	mla	r2, ip, r2, r3
 800a188:	460c      	mov	r4, r1
 800a18a:	2001      	movs	r0, #1
 800a18c:	e7a5      	b.n	800a0da <_vfiprintf_r+0x11a>
 800a18e:	2300      	movs	r3, #0
 800a190:	3401      	adds	r4, #1
 800a192:	9305      	str	r3, [sp, #20]
 800a194:	4619      	mov	r1, r3
 800a196:	f04f 0c0a 	mov.w	ip, #10
 800a19a:	4620      	mov	r0, r4
 800a19c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a1a0:	3a30      	subs	r2, #48	; 0x30
 800a1a2:	2a09      	cmp	r2, #9
 800a1a4:	d903      	bls.n	800a1ae <_vfiprintf_r+0x1ee>
 800a1a6:	2b00      	cmp	r3, #0
 800a1a8:	d0c5      	beq.n	800a136 <_vfiprintf_r+0x176>
 800a1aa:	9105      	str	r1, [sp, #20]
 800a1ac:	e7c3      	b.n	800a136 <_vfiprintf_r+0x176>
 800a1ae:	fb0c 2101 	mla	r1, ip, r1, r2
 800a1b2:	4604      	mov	r4, r0
 800a1b4:	2301      	movs	r3, #1
 800a1b6:	e7f0      	b.n	800a19a <_vfiprintf_r+0x1da>
 800a1b8:	ab03      	add	r3, sp, #12
 800a1ba:	9300      	str	r3, [sp, #0]
 800a1bc:	462a      	mov	r2, r5
 800a1be:	4b16      	ldr	r3, [pc, #88]	; (800a218 <_vfiprintf_r+0x258>)
 800a1c0:	a904      	add	r1, sp, #16
 800a1c2:	4630      	mov	r0, r6
 800a1c4:	f7fc f83c 	bl	8006240 <_printf_float>
 800a1c8:	4607      	mov	r7, r0
 800a1ca:	1c78      	adds	r0, r7, #1
 800a1cc:	d1d6      	bne.n	800a17c <_vfiprintf_r+0x1bc>
 800a1ce:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a1d0:	07d9      	lsls	r1, r3, #31
 800a1d2:	d405      	bmi.n	800a1e0 <_vfiprintf_r+0x220>
 800a1d4:	89ab      	ldrh	r3, [r5, #12]
 800a1d6:	059a      	lsls	r2, r3, #22
 800a1d8:	d402      	bmi.n	800a1e0 <_vfiprintf_r+0x220>
 800a1da:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a1dc:	f000 faa1 	bl	800a722 <__retarget_lock_release_recursive>
 800a1e0:	89ab      	ldrh	r3, [r5, #12]
 800a1e2:	065b      	lsls	r3, r3, #25
 800a1e4:	f53f af12 	bmi.w	800a00c <_vfiprintf_r+0x4c>
 800a1e8:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a1ea:	e711      	b.n	800a010 <_vfiprintf_r+0x50>
 800a1ec:	ab03      	add	r3, sp, #12
 800a1ee:	9300      	str	r3, [sp, #0]
 800a1f0:	462a      	mov	r2, r5
 800a1f2:	4b09      	ldr	r3, [pc, #36]	; (800a218 <_vfiprintf_r+0x258>)
 800a1f4:	a904      	add	r1, sp, #16
 800a1f6:	4630      	mov	r0, r6
 800a1f8:	f7fc fac6 	bl	8006788 <_printf_i>
 800a1fc:	e7e4      	b.n	800a1c8 <_vfiprintf_r+0x208>
 800a1fe:	bf00      	nop
 800a200:	0800ee3c 	.word	0x0800ee3c
 800a204:	0800ee5c 	.word	0x0800ee5c
 800a208:	0800ee1c 	.word	0x0800ee1c
 800a20c:	0800edcc 	.word	0x0800edcc
 800a210:	0800edd6 	.word	0x0800edd6
 800a214:	08006241 	.word	0x08006241
 800a218:	08009f9d 	.word	0x08009f9d
 800a21c:	0800edd2 	.word	0x0800edd2

0800a220 <__swbuf_r>:
 800a220:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a222:	460e      	mov	r6, r1
 800a224:	4614      	mov	r4, r2
 800a226:	4605      	mov	r5, r0
 800a228:	b118      	cbz	r0, 800a232 <__swbuf_r+0x12>
 800a22a:	6983      	ldr	r3, [r0, #24]
 800a22c:	b90b      	cbnz	r3, 800a232 <__swbuf_r+0x12>
 800a22e:	f000 f9d9 	bl	800a5e4 <__sinit>
 800a232:	4b21      	ldr	r3, [pc, #132]	; (800a2b8 <__swbuf_r+0x98>)
 800a234:	429c      	cmp	r4, r3
 800a236:	d12b      	bne.n	800a290 <__swbuf_r+0x70>
 800a238:	686c      	ldr	r4, [r5, #4]
 800a23a:	69a3      	ldr	r3, [r4, #24]
 800a23c:	60a3      	str	r3, [r4, #8]
 800a23e:	89a3      	ldrh	r3, [r4, #12]
 800a240:	071a      	lsls	r2, r3, #28
 800a242:	d52f      	bpl.n	800a2a4 <__swbuf_r+0x84>
 800a244:	6923      	ldr	r3, [r4, #16]
 800a246:	b36b      	cbz	r3, 800a2a4 <__swbuf_r+0x84>
 800a248:	6923      	ldr	r3, [r4, #16]
 800a24a:	6820      	ldr	r0, [r4, #0]
 800a24c:	1ac0      	subs	r0, r0, r3
 800a24e:	6963      	ldr	r3, [r4, #20]
 800a250:	b2f6      	uxtb	r6, r6
 800a252:	4283      	cmp	r3, r0
 800a254:	4637      	mov	r7, r6
 800a256:	dc04      	bgt.n	800a262 <__swbuf_r+0x42>
 800a258:	4621      	mov	r1, r4
 800a25a:	4628      	mov	r0, r5
 800a25c:	f000 f92e 	bl	800a4bc <_fflush_r>
 800a260:	bb30      	cbnz	r0, 800a2b0 <__swbuf_r+0x90>
 800a262:	68a3      	ldr	r3, [r4, #8]
 800a264:	3b01      	subs	r3, #1
 800a266:	60a3      	str	r3, [r4, #8]
 800a268:	6823      	ldr	r3, [r4, #0]
 800a26a:	1c5a      	adds	r2, r3, #1
 800a26c:	6022      	str	r2, [r4, #0]
 800a26e:	701e      	strb	r6, [r3, #0]
 800a270:	6963      	ldr	r3, [r4, #20]
 800a272:	3001      	adds	r0, #1
 800a274:	4283      	cmp	r3, r0
 800a276:	d004      	beq.n	800a282 <__swbuf_r+0x62>
 800a278:	89a3      	ldrh	r3, [r4, #12]
 800a27a:	07db      	lsls	r3, r3, #31
 800a27c:	d506      	bpl.n	800a28c <__swbuf_r+0x6c>
 800a27e:	2e0a      	cmp	r6, #10
 800a280:	d104      	bne.n	800a28c <__swbuf_r+0x6c>
 800a282:	4621      	mov	r1, r4
 800a284:	4628      	mov	r0, r5
 800a286:	f000 f919 	bl	800a4bc <_fflush_r>
 800a28a:	b988      	cbnz	r0, 800a2b0 <__swbuf_r+0x90>
 800a28c:	4638      	mov	r0, r7
 800a28e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a290:	4b0a      	ldr	r3, [pc, #40]	; (800a2bc <__swbuf_r+0x9c>)
 800a292:	429c      	cmp	r4, r3
 800a294:	d101      	bne.n	800a29a <__swbuf_r+0x7a>
 800a296:	68ac      	ldr	r4, [r5, #8]
 800a298:	e7cf      	b.n	800a23a <__swbuf_r+0x1a>
 800a29a:	4b09      	ldr	r3, [pc, #36]	; (800a2c0 <__swbuf_r+0xa0>)
 800a29c:	429c      	cmp	r4, r3
 800a29e:	bf08      	it	eq
 800a2a0:	68ec      	ldreq	r4, [r5, #12]
 800a2a2:	e7ca      	b.n	800a23a <__swbuf_r+0x1a>
 800a2a4:	4621      	mov	r1, r4
 800a2a6:	4628      	mov	r0, r5
 800a2a8:	f000 f80c 	bl	800a2c4 <__swsetup_r>
 800a2ac:	2800      	cmp	r0, #0
 800a2ae:	d0cb      	beq.n	800a248 <__swbuf_r+0x28>
 800a2b0:	f04f 37ff 	mov.w	r7, #4294967295
 800a2b4:	e7ea      	b.n	800a28c <__swbuf_r+0x6c>
 800a2b6:	bf00      	nop
 800a2b8:	0800ee3c 	.word	0x0800ee3c
 800a2bc:	0800ee5c 	.word	0x0800ee5c
 800a2c0:	0800ee1c 	.word	0x0800ee1c

0800a2c4 <__swsetup_r>:
 800a2c4:	4b32      	ldr	r3, [pc, #200]	; (800a390 <__swsetup_r+0xcc>)
 800a2c6:	b570      	push	{r4, r5, r6, lr}
 800a2c8:	681d      	ldr	r5, [r3, #0]
 800a2ca:	4606      	mov	r6, r0
 800a2cc:	460c      	mov	r4, r1
 800a2ce:	b125      	cbz	r5, 800a2da <__swsetup_r+0x16>
 800a2d0:	69ab      	ldr	r3, [r5, #24]
 800a2d2:	b913      	cbnz	r3, 800a2da <__swsetup_r+0x16>
 800a2d4:	4628      	mov	r0, r5
 800a2d6:	f000 f985 	bl	800a5e4 <__sinit>
 800a2da:	4b2e      	ldr	r3, [pc, #184]	; (800a394 <__swsetup_r+0xd0>)
 800a2dc:	429c      	cmp	r4, r3
 800a2de:	d10f      	bne.n	800a300 <__swsetup_r+0x3c>
 800a2e0:	686c      	ldr	r4, [r5, #4]
 800a2e2:	89a3      	ldrh	r3, [r4, #12]
 800a2e4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a2e8:	0719      	lsls	r1, r3, #28
 800a2ea:	d42c      	bmi.n	800a346 <__swsetup_r+0x82>
 800a2ec:	06dd      	lsls	r5, r3, #27
 800a2ee:	d411      	bmi.n	800a314 <__swsetup_r+0x50>
 800a2f0:	2309      	movs	r3, #9
 800a2f2:	6033      	str	r3, [r6, #0]
 800a2f4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800a2f8:	81a3      	strh	r3, [r4, #12]
 800a2fa:	f04f 30ff 	mov.w	r0, #4294967295
 800a2fe:	e03e      	b.n	800a37e <__swsetup_r+0xba>
 800a300:	4b25      	ldr	r3, [pc, #148]	; (800a398 <__swsetup_r+0xd4>)
 800a302:	429c      	cmp	r4, r3
 800a304:	d101      	bne.n	800a30a <__swsetup_r+0x46>
 800a306:	68ac      	ldr	r4, [r5, #8]
 800a308:	e7eb      	b.n	800a2e2 <__swsetup_r+0x1e>
 800a30a:	4b24      	ldr	r3, [pc, #144]	; (800a39c <__swsetup_r+0xd8>)
 800a30c:	429c      	cmp	r4, r3
 800a30e:	bf08      	it	eq
 800a310:	68ec      	ldreq	r4, [r5, #12]
 800a312:	e7e6      	b.n	800a2e2 <__swsetup_r+0x1e>
 800a314:	0758      	lsls	r0, r3, #29
 800a316:	d512      	bpl.n	800a33e <__swsetup_r+0x7a>
 800a318:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a31a:	b141      	cbz	r1, 800a32e <__swsetup_r+0x6a>
 800a31c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a320:	4299      	cmp	r1, r3
 800a322:	d002      	beq.n	800a32a <__swsetup_r+0x66>
 800a324:	4630      	mov	r0, r6
 800a326:	f7ff fb25 	bl	8009974 <_free_r>
 800a32a:	2300      	movs	r3, #0
 800a32c:	6363      	str	r3, [r4, #52]	; 0x34
 800a32e:	89a3      	ldrh	r3, [r4, #12]
 800a330:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800a334:	81a3      	strh	r3, [r4, #12]
 800a336:	2300      	movs	r3, #0
 800a338:	6063      	str	r3, [r4, #4]
 800a33a:	6923      	ldr	r3, [r4, #16]
 800a33c:	6023      	str	r3, [r4, #0]
 800a33e:	89a3      	ldrh	r3, [r4, #12]
 800a340:	f043 0308 	orr.w	r3, r3, #8
 800a344:	81a3      	strh	r3, [r4, #12]
 800a346:	6923      	ldr	r3, [r4, #16]
 800a348:	b94b      	cbnz	r3, 800a35e <__swsetup_r+0x9a>
 800a34a:	89a3      	ldrh	r3, [r4, #12]
 800a34c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800a350:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a354:	d003      	beq.n	800a35e <__swsetup_r+0x9a>
 800a356:	4621      	mov	r1, r4
 800a358:	4630      	mov	r0, r6
 800a35a:	f000 fa09 	bl	800a770 <__smakebuf_r>
 800a35e:	89a0      	ldrh	r0, [r4, #12]
 800a360:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a364:	f010 0301 	ands.w	r3, r0, #1
 800a368:	d00a      	beq.n	800a380 <__swsetup_r+0xbc>
 800a36a:	2300      	movs	r3, #0
 800a36c:	60a3      	str	r3, [r4, #8]
 800a36e:	6963      	ldr	r3, [r4, #20]
 800a370:	425b      	negs	r3, r3
 800a372:	61a3      	str	r3, [r4, #24]
 800a374:	6923      	ldr	r3, [r4, #16]
 800a376:	b943      	cbnz	r3, 800a38a <__swsetup_r+0xc6>
 800a378:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800a37c:	d1ba      	bne.n	800a2f4 <__swsetup_r+0x30>
 800a37e:	bd70      	pop	{r4, r5, r6, pc}
 800a380:	0781      	lsls	r1, r0, #30
 800a382:	bf58      	it	pl
 800a384:	6963      	ldrpl	r3, [r4, #20]
 800a386:	60a3      	str	r3, [r4, #8]
 800a388:	e7f4      	b.n	800a374 <__swsetup_r+0xb0>
 800a38a:	2000      	movs	r0, #0
 800a38c:	e7f7      	b.n	800a37e <__swsetup_r+0xba>
 800a38e:	bf00      	nop
 800a390:	20000024 	.word	0x20000024
 800a394:	0800ee3c 	.word	0x0800ee3c
 800a398:	0800ee5c 	.word	0x0800ee5c
 800a39c:	0800ee1c 	.word	0x0800ee1c

0800a3a0 <abort>:
 800a3a0:	b508      	push	{r3, lr}
 800a3a2:	2006      	movs	r0, #6
 800a3a4:	f000 fa54 	bl	800a850 <raise>
 800a3a8:	2001      	movs	r0, #1
 800a3aa:	f7f7 fbf5 	bl	8001b98 <_exit>
	...

0800a3b0 <__sflush_r>:
 800a3b0:	898a      	ldrh	r2, [r1, #12]
 800a3b2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a3b6:	4605      	mov	r5, r0
 800a3b8:	0710      	lsls	r0, r2, #28
 800a3ba:	460c      	mov	r4, r1
 800a3bc:	d458      	bmi.n	800a470 <__sflush_r+0xc0>
 800a3be:	684b      	ldr	r3, [r1, #4]
 800a3c0:	2b00      	cmp	r3, #0
 800a3c2:	dc05      	bgt.n	800a3d0 <__sflush_r+0x20>
 800a3c4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800a3c6:	2b00      	cmp	r3, #0
 800a3c8:	dc02      	bgt.n	800a3d0 <__sflush_r+0x20>
 800a3ca:	2000      	movs	r0, #0
 800a3cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a3d0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a3d2:	2e00      	cmp	r6, #0
 800a3d4:	d0f9      	beq.n	800a3ca <__sflush_r+0x1a>
 800a3d6:	2300      	movs	r3, #0
 800a3d8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800a3dc:	682f      	ldr	r7, [r5, #0]
 800a3de:	602b      	str	r3, [r5, #0]
 800a3e0:	d032      	beq.n	800a448 <__sflush_r+0x98>
 800a3e2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800a3e4:	89a3      	ldrh	r3, [r4, #12]
 800a3e6:	075a      	lsls	r2, r3, #29
 800a3e8:	d505      	bpl.n	800a3f6 <__sflush_r+0x46>
 800a3ea:	6863      	ldr	r3, [r4, #4]
 800a3ec:	1ac0      	subs	r0, r0, r3
 800a3ee:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a3f0:	b10b      	cbz	r3, 800a3f6 <__sflush_r+0x46>
 800a3f2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a3f4:	1ac0      	subs	r0, r0, r3
 800a3f6:	2300      	movs	r3, #0
 800a3f8:	4602      	mov	r2, r0
 800a3fa:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a3fc:	6a21      	ldr	r1, [r4, #32]
 800a3fe:	4628      	mov	r0, r5
 800a400:	47b0      	blx	r6
 800a402:	1c43      	adds	r3, r0, #1
 800a404:	89a3      	ldrh	r3, [r4, #12]
 800a406:	d106      	bne.n	800a416 <__sflush_r+0x66>
 800a408:	6829      	ldr	r1, [r5, #0]
 800a40a:	291d      	cmp	r1, #29
 800a40c:	d82c      	bhi.n	800a468 <__sflush_r+0xb8>
 800a40e:	4a2a      	ldr	r2, [pc, #168]	; (800a4b8 <__sflush_r+0x108>)
 800a410:	40ca      	lsrs	r2, r1
 800a412:	07d6      	lsls	r6, r2, #31
 800a414:	d528      	bpl.n	800a468 <__sflush_r+0xb8>
 800a416:	2200      	movs	r2, #0
 800a418:	6062      	str	r2, [r4, #4]
 800a41a:	04d9      	lsls	r1, r3, #19
 800a41c:	6922      	ldr	r2, [r4, #16]
 800a41e:	6022      	str	r2, [r4, #0]
 800a420:	d504      	bpl.n	800a42c <__sflush_r+0x7c>
 800a422:	1c42      	adds	r2, r0, #1
 800a424:	d101      	bne.n	800a42a <__sflush_r+0x7a>
 800a426:	682b      	ldr	r3, [r5, #0]
 800a428:	b903      	cbnz	r3, 800a42c <__sflush_r+0x7c>
 800a42a:	6560      	str	r0, [r4, #84]	; 0x54
 800a42c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a42e:	602f      	str	r7, [r5, #0]
 800a430:	2900      	cmp	r1, #0
 800a432:	d0ca      	beq.n	800a3ca <__sflush_r+0x1a>
 800a434:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a438:	4299      	cmp	r1, r3
 800a43a:	d002      	beq.n	800a442 <__sflush_r+0x92>
 800a43c:	4628      	mov	r0, r5
 800a43e:	f7ff fa99 	bl	8009974 <_free_r>
 800a442:	2000      	movs	r0, #0
 800a444:	6360      	str	r0, [r4, #52]	; 0x34
 800a446:	e7c1      	b.n	800a3cc <__sflush_r+0x1c>
 800a448:	6a21      	ldr	r1, [r4, #32]
 800a44a:	2301      	movs	r3, #1
 800a44c:	4628      	mov	r0, r5
 800a44e:	47b0      	blx	r6
 800a450:	1c41      	adds	r1, r0, #1
 800a452:	d1c7      	bne.n	800a3e4 <__sflush_r+0x34>
 800a454:	682b      	ldr	r3, [r5, #0]
 800a456:	2b00      	cmp	r3, #0
 800a458:	d0c4      	beq.n	800a3e4 <__sflush_r+0x34>
 800a45a:	2b1d      	cmp	r3, #29
 800a45c:	d001      	beq.n	800a462 <__sflush_r+0xb2>
 800a45e:	2b16      	cmp	r3, #22
 800a460:	d101      	bne.n	800a466 <__sflush_r+0xb6>
 800a462:	602f      	str	r7, [r5, #0]
 800a464:	e7b1      	b.n	800a3ca <__sflush_r+0x1a>
 800a466:	89a3      	ldrh	r3, [r4, #12]
 800a468:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a46c:	81a3      	strh	r3, [r4, #12]
 800a46e:	e7ad      	b.n	800a3cc <__sflush_r+0x1c>
 800a470:	690f      	ldr	r7, [r1, #16]
 800a472:	2f00      	cmp	r7, #0
 800a474:	d0a9      	beq.n	800a3ca <__sflush_r+0x1a>
 800a476:	0793      	lsls	r3, r2, #30
 800a478:	680e      	ldr	r6, [r1, #0]
 800a47a:	bf08      	it	eq
 800a47c:	694b      	ldreq	r3, [r1, #20]
 800a47e:	600f      	str	r7, [r1, #0]
 800a480:	bf18      	it	ne
 800a482:	2300      	movne	r3, #0
 800a484:	eba6 0807 	sub.w	r8, r6, r7
 800a488:	608b      	str	r3, [r1, #8]
 800a48a:	f1b8 0f00 	cmp.w	r8, #0
 800a48e:	dd9c      	ble.n	800a3ca <__sflush_r+0x1a>
 800a490:	6a21      	ldr	r1, [r4, #32]
 800a492:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800a494:	4643      	mov	r3, r8
 800a496:	463a      	mov	r2, r7
 800a498:	4628      	mov	r0, r5
 800a49a:	47b0      	blx	r6
 800a49c:	2800      	cmp	r0, #0
 800a49e:	dc06      	bgt.n	800a4ae <__sflush_r+0xfe>
 800a4a0:	89a3      	ldrh	r3, [r4, #12]
 800a4a2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a4a6:	81a3      	strh	r3, [r4, #12]
 800a4a8:	f04f 30ff 	mov.w	r0, #4294967295
 800a4ac:	e78e      	b.n	800a3cc <__sflush_r+0x1c>
 800a4ae:	4407      	add	r7, r0
 800a4b0:	eba8 0800 	sub.w	r8, r8, r0
 800a4b4:	e7e9      	b.n	800a48a <__sflush_r+0xda>
 800a4b6:	bf00      	nop
 800a4b8:	20400001 	.word	0x20400001

0800a4bc <_fflush_r>:
 800a4bc:	b538      	push	{r3, r4, r5, lr}
 800a4be:	690b      	ldr	r3, [r1, #16]
 800a4c0:	4605      	mov	r5, r0
 800a4c2:	460c      	mov	r4, r1
 800a4c4:	b913      	cbnz	r3, 800a4cc <_fflush_r+0x10>
 800a4c6:	2500      	movs	r5, #0
 800a4c8:	4628      	mov	r0, r5
 800a4ca:	bd38      	pop	{r3, r4, r5, pc}
 800a4cc:	b118      	cbz	r0, 800a4d6 <_fflush_r+0x1a>
 800a4ce:	6983      	ldr	r3, [r0, #24]
 800a4d0:	b90b      	cbnz	r3, 800a4d6 <_fflush_r+0x1a>
 800a4d2:	f000 f887 	bl	800a5e4 <__sinit>
 800a4d6:	4b14      	ldr	r3, [pc, #80]	; (800a528 <_fflush_r+0x6c>)
 800a4d8:	429c      	cmp	r4, r3
 800a4da:	d11b      	bne.n	800a514 <_fflush_r+0x58>
 800a4dc:	686c      	ldr	r4, [r5, #4]
 800a4de:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a4e2:	2b00      	cmp	r3, #0
 800a4e4:	d0ef      	beq.n	800a4c6 <_fflush_r+0xa>
 800a4e6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800a4e8:	07d0      	lsls	r0, r2, #31
 800a4ea:	d404      	bmi.n	800a4f6 <_fflush_r+0x3a>
 800a4ec:	0599      	lsls	r1, r3, #22
 800a4ee:	d402      	bmi.n	800a4f6 <_fflush_r+0x3a>
 800a4f0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a4f2:	f000 f915 	bl	800a720 <__retarget_lock_acquire_recursive>
 800a4f6:	4628      	mov	r0, r5
 800a4f8:	4621      	mov	r1, r4
 800a4fa:	f7ff ff59 	bl	800a3b0 <__sflush_r>
 800a4fe:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a500:	07da      	lsls	r2, r3, #31
 800a502:	4605      	mov	r5, r0
 800a504:	d4e0      	bmi.n	800a4c8 <_fflush_r+0xc>
 800a506:	89a3      	ldrh	r3, [r4, #12]
 800a508:	059b      	lsls	r3, r3, #22
 800a50a:	d4dd      	bmi.n	800a4c8 <_fflush_r+0xc>
 800a50c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a50e:	f000 f908 	bl	800a722 <__retarget_lock_release_recursive>
 800a512:	e7d9      	b.n	800a4c8 <_fflush_r+0xc>
 800a514:	4b05      	ldr	r3, [pc, #20]	; (800a52c <_fflush_r+0x70>)
 800a516:	429c      	cmp	r4, r3
 800a518:	d101      	bne.n	800a51e <_fflush_r+0x62>
 800a51a:	68ac      	ldr	r4, [r5, #8]
 800a51c:	e7df      	b.n	800a4de <_fflush_r+0x22>
 800a51e:	4b04      	ldr	r3, [pc, #16]	; (800a530 <_fflush_r+0x74>)
 800a520:	429c      	cmp	r4, r3
 800a522:	bf08      	it	eq
 800a524:	68ec      	ldreq	r4, [r5, #12]
 800a526:	e7da      	b.n	800a4de <_fflush_r+0x22>
 800a528:	0800ee3c 	.word	0x0800ee3c
 800a52c:	0800ee5c 	.word	0x0800ee5c
 800a530:	0800ee1c 	.word	0x0800ee1c

0800a534 <std>:
 800a534:	2300      	movs	r3, #0
 800a536:	b510      	push	{r4, lr}
 800a538:	4604      	mov	r4, r0
 800a53a:	e9c0 3300 	strd	r3, r3, [r0]
 800a53e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a542:	6083      	str	r3, [r0, #8]
 800a544:	8181      	strh	r1, [r0, #12]
 800a546:	6643      	str	r3, [r0, #100]	; 0x64
 800a548:	81c2      	strh	r2, [r0, #14]
 800a54a:	6183      	str	r3, [r0, #24]
 800a54c:	4619      	mov	r1, r3
 800a54e:	2208      	movs	r2, #8
 800a550:	305c      	adds	r0, #92	; 0x5c
 800a552:	f7fb fdcd 	bl	80060f0 <memset>
 800a556:	4b05      	ldr	r3, [pc, #20]	; (800a56c <std+0x38>)
 800a558:	6263      	str	r3, [r4, #36]	; 0x24
 800a55a:	4b05      	ldr	r3, [pc, #20]	; (800a570 <std+0x3c>)
 800a55c:	62a3      	str	r3, [r4, #40]	; 0x28
 800a55e:	4b05      	ldr	r3, [pc, #20]	; (800a574 <std+0x40>)
 800a560:	62e3      	str	r3, [r4, #44]	; 0x2c
 800a562:	4b05      	ldr	r3, [pc, #20]	; (800a578 <std+0x44>)
 800a564:	6224      	str	r4, [r4, #32]
 800a566:	6323      	str	r3, [r4, #48]	; 0x30
 800a568:	bd10      	pop	{r4, pc}
 800a56a:	bf00      	nop
 800a56c:	0800a889 	.word	0x0800a889
 800a570:	0800a8ab 	.word	0x0800a8ab
 800a574:	0800a8e3 	.word	0x0800a8e3
 800a578:	0800a907 	.word	0x0800a907

0800a57c <_cleanup_r>:
 800a57c:	4901      	ldr	r1, [pc, #4]	; (800a584 <_cleanup_r+0x8>)
 800a57e:	f000 b8af 	b.w	800a6e0 <_fwalk_reent>
 800a582:	bf00      	nop
 800a584:	0800a4bd 	.word	0x0800a4bd

0800a588 <__sfmoreglue>:
 800a588:	b570      	push	{r4, r5, r6, lr}
 800a58a:	2268      	movs	r2, #104	; 0x68
 800a58c:	1e4d      	subs	r5, r1, #1
 800a58e:	4355      	muls	r5, r2
 800a590:	460e      	mov	r6, r1
 800a592:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800a596:	f7ff fa59 	bl	8009a4c <_malloc_r>
 800a59a:	4604      	mov	r4, r0
 800a59c:	b140      	cbz	r0, 800a5b0 <__sfmoreglue+0x28>
 800a59e:	2100      	movs	r1, #0
 800a5a0:	e9c0 1600 	strd	r1, r6, [r0]
 800a5a4:	300c      	adds	r0, #12
 800a5a6:	60a0      	str	r0, [r4, #8]
 800a5a8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800a5ac:	f7fb fda0 	bl	80060f0 <memset>
 800a5b0:	4620      	mov	r0, r4
 800a5b2:	bd70      	pop	{r4, r5, r6, pc}

0800a5b4 <__sfp_lock_acquire>:
 800a5b4:	4801      	ldr	r0, [pc, #4]	; (800a5bc <__sfp_lock_acquire+0x8>)
 800a5b6:	f000 b8b3 	b.w	800a720 <__retarget_lock_acquire_recursive>
 800a5ba:	bf00      	nop
 800a5bc:	200048a5 	.word	0x200048a5

0800a5c0 <__sfp_lock_release>:
 800a5c0:	4801      	ldr	r0, [pc, #4]	; (800a5c8 <__sfp_lock_release+0x8>)
 800a5c2:	f000 b8ae 	b.w	800a722 <__retarget_lock_release_recursive>
 800a5c6:	bf00      	nop
 800a5c8:	200048a5 	.word	0x200048a5

0800a5cc <__sinit_lock_acquire>:
 800a5cc:	4801      	ldr	r0, [pc, #4]	; (800a5d4 <__sinit_lock_acquire+0x8>)
 800a5ce:	f000 b8a7 	b.w	800a720 <__retarget_lock_acquire_recursive>
 800a5d2:	bf00      	nop
 800a5d4:	200048a6 	.word	0x200048a6

0800a5d8 <__sinit_lock_release>:
 800a5d8:	4801      	ldr	r0, [pc, #4]	; (800a5e0 <__sinit_lock_release+0x8>)
 800a5da:	f000 b8a2 	b.w	800a722 <__retarget_lock_release_recursive>
 800a5de:	bf00      	nop
 800a5e0:	200048a6 	.word	0x200048a6

0800a5e4 <__sinit>:
 800a5e4:	b510      	push	{r4, lr}
 800a5e6:	4604      	mov	r4, r0
 800a5e8:	f7ff fff0 	bl	800a5cc <__sinit_lock_acquire>
 800a5ec:	69a3      	ldr	r3, [r4, #24]
 800a5ee:	b11b      	cbz	r3, 800a5f8 <__sinit+0x14>
 800a5f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a5f4:	f7ff bff0 	b.w	800a5d8 <__sinit_lock_release>
 800a5f8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800a5fc:	6523      	str	r3, [r4, #80]	; 0x50
 800a5fe:	4b13      	ldr	r3, [pc, #76]	; (800a64c <__sinit+0x68>)
 800a600:	4a13      	ldr	r2, [pc, #76]	; (800a650 <__sinit+0x6c>)
 800a602:	681b      	ldr	r3, [r3, #0]
 800a604:	62a2      	str	r2, [r4, #40]	; 0x28
 800a606:	42a3      	cmp	r3, r4
 800a608:	bf04      	itt	eq
 800a60a:	2301      	moveq	r3, #1
 800a60c:	61a3      	streq	r3, [r4, #24]
 800a60e:	4620      	mov	r0, r4
 800a610:	f000 f820 	bl	800a654 <__sfp>
 800a614:	6060      	str	r0, [r4, #4]
 800a616:	4620      	mov	r0, r4
 800a618:	f000 f81c 	bl	800a654 <__sfp>
 800a61c:	60a0      	str	r0, [r4, #8]
 800a61e:	4620      	mov	r0, r4
 800a620:	f000 f818 	bl	800a654 <__sfp>
 800a624:	2200      	movs	r2, #0
 800a626:	60e0      	str	r0, [r4, #12]
 800a628:	2104      	movs	r1, #4
 800a62a:	6860      	ldr	r0, [r4, #4]
 800a62c:	f7ff ff82 	bl	800a534 <std>
 800a630:	68a0      	ldr	r0, [r4, #8]
 800a632:	2201      	movs	r2, #1
 800a634:	2109      	movs	r1, #9
 800a636:	f7ff ff7d 	bl	800a534 <std>
 800a63a:	68e0      	ldr	r0, [r4, #12]
 800a63c:	2202      	movs	r2, #2
 800a63e:	2112      	movs	r1, #18
 800a640:	f7ff ff78 	bl	800a534 <std>
 800a644:	2301      	movs	r3, #1
 800a646:	61a3      	str	r3, [r4, #24]
 800a648:	e7d2      	b.n	800a5f0 <__sinit+0xc>
 800a64a:	bf00      	nop
 800a64c:	0800e9d4 	.word	0x0800e9d4
 800a650:	0800a57d 	.word	0x0800a57d

0800a654 <__sfp>:
 800a654:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a656:	4607      	mov	r7, r0
 800a658:	f7ff ffac 	bl	800a5b4 <__sfp_lock_acquire>
 800a65c:	4b1e      	ldr	r3, [pc, #120]	; (800a6d8 <__sfp+0x84>)
 800a65e:	681e      	ldr	r6, [r3, #0]
 800a660:	69b3      	ldr	r3, [r6, #24]
 800a662:	b913      	cbnz	r3, 800a66a <__sfp+0x16>
 800a664:	4630      	mov	r0, r6
 800a666:	f7ff ffbd 	bl	800a5e4 <__sinit>
 800a66a:	3648      	adds	r6, #72	; 0x48
 800a66c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800a670:	3b01      	subs	r3, #1
 800a672:	d503      	bpl.n	800a67c <__sfp+0x28>
 800a674:	6833      	ldr	r3, [r6, #0]
 800a676:	b30b      	cbz	r3, 800a6bc <__sfp+0x68>
 800a678:	6836      	ldr	r6, [r6, #0]
 800a67a:	e7f7      	b.n	800a66c <__sfp+0x18>
 800a67c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800a680:	b9d5      	cbnz	r5, 800a6b8 <__sfp+0x64>
 800a682:	4b16      	ldr	r3, [pc, #88]	; (800a6dc <__sfp+0x88>)
 800a684:	60e3      	str	r3, [r4, #12]
 800a686:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800a68a:	6665      	str	r5, [r4, #100]	; 0x64
 800a68c:	f000 f847 	bl	800a71e <__retarget_lock_init_recursive>
 800a690:	f7ff ff96 	bl	800a5c0 <__sfp_lock_release>
 800a694:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800a698:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800a69c:	6025      	str	r5, [r4, #0]
 800a69e:	61a5      	str	r5, [r4, #24]
 800a6a0:	2208      	movs	r2, #8
 800a6a2:	4629      	mov	r1, r5
 800a6a4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800a6a8:	f7fb fd22 	bl	80060f0 <memset>
 800a6ac:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800a6b0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800a6b4:	4620      	mov	r0, r4
 800a6b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a6b8:	3468      	adds	r4, #104	; 0x68
 800a6ba:	e7d9      	b.n	800a670 <__sfp+0x1c>
 800a6bc:	2104      	movs	r1, #4
 800a6be:	4638      	mov	r0, r7
 800a6c0:	f7ff ff62 	bl	800a588 <__sfmoreglue>
 800a6c4:	4604      	mov	r4, r0
 800a6c6:	6030      	str	r0, [r6, #0]
 800a6c8:	2800      	cmp	r0, #0
 800a6ca:	d1d5      	bne.n	800a678 <__sfp+0x24>
 800a6cc:	f7ff ff78 	bl	800a5c0 <__sfp_lock_release>
 800a6d0:	230c      	movs	r3, #12
 800a6d2:	603b      	str	r3, [r7, #0]
 800a6d4:	e7ee      	b.n	800a6b4 <__sfp+0x60>
 800a6d6:	bf00      	nop
 800a6d8:	0800e9d4 	.word	0x0800e9d4
 800a6dc:	ffff0001 	.word	0xffff0001

0800a6e0 <_fwalk_reent>:
 800a6e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a6e4:	4606      	mov	r6, r0
 800a6e6:	4688      	mov	r8, r1
 800a6e8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800a6ec:	2700      	movs	r7, #0
 800a6ee:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a6f2:	f1b9 0901 	subs.w	r9, r9, #1
 800a6f6:	d505      	bpl.n	800a704 <_fwalk_reent+0x24>
 800a6f8:	6824      	ldr	r4, [r4, #0]
 800a6fa:	2c00      	cmp	r4, #0
 800a6fc:	d1f7      	bne.n	800a6ee <_fwalk_reent+0xe>
 800a6fe:	4638      	mov	r0, r7
 800a700:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a704:	89ab      	ldrh	r3, [r5, #12]
 800a706:	2b01      	cmp	r3, #1
 800a708:	d907      	bls.n	800a71a <_fwalk_reent+0x3a>
 800a70a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a70e:	3301      	adds	r3, #1
 800a710:	d003      	beq.n	800a71a <_fwalk_reent+0x3a>
 800a712:	4629      	mov	r1, r5
 800a714:	4630      	mov	r0, r6
 800a716:	47c0      	blx	r8
 800a718:	4307      	orrs	r7, r0
 800a71a:	3568      	adds	r5, #104	; 0x68
 800a71c:	e7e9      	b.n	800a6f2 <_fwalk_reent+0x12>

0800a71e <__retarget_lock_init_recursive>:
 800a71e:	4770      	bx	lr

0800a720 <__retarget_lock_acquire_recursive>:
 800a720:	4770      	bx	lr

0800a722 <__retarget_lock_release_recursive>:
 800a722:	4770      	bx	lr

0800a724 <__swhatbuf_r>:
 800a724:	b570      	push	{r4, r5, r6, lr}
 800a726:	460e      	mov	r6, r1
 800a728:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a72c:	2900      	cmp	r1, #0
 800a72e:	b096      	sub	sp, #88	; 0x58
 800a730:	4614      	mov	r4, r2
 800a732:	461d      	mov	r5, r3
 800a734:	da08      	bge.n	800a748 <__swhatbuf_r+0x24>
 800a736:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800a73a:	2200      	movs	r2, #0
 800a73c:	602a      	str	r2, [r5, #0]
 800a73e:	061a      	lsls	r2, r3, #24
 800a740:	d410      	bmi.n	800a764 <__swhatbuf_r+0x40>
 800a742:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a746:	e00e      	b.n	800a766 <__swhatbuf_r+0x42>
 800a748:	466a      	mov	r2, sp
 800a74a:	f000 f903 	bl	800a954 <_fstat_r>
 800a74e:	2800      	cmp	r0, #0
 800a750:	dbf1      	blt.n	800a736 <__swhatbuf_r+0x12>
 800a752:	9a01      	ldr	r2, [sp, #4]
 800a754:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800a758:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800a75c:	425a      	negs	r2, r3
 800a75e:	415a      	adcs	r2, r3
 800a760:	602a      	str	r2, [r5, #0]
 800a762:	e7ee      	b.n	800a742 <__swhatbuf_r+0x1e>
 800a764:	2340      	movs	r3, #64	; 0x40
 800a766:	2000      	movs	r0, #0
 800a768:	6023      	str	r3, [r4, #0]
 800a76a:	b016      	add	sp, #88	; 0x58
 800a76c:	bd70      	pop	{r4, r5, r6, pc}
	...

0800a770 <__smakebuf_r>:
 800a770:	898b      	ldrh	r3, [r1, #12]
 800a772:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a774:	079d      	lsls	r5, r3, #30
 800a776:	4606      	mov	r6, r0
 800a778:	460c      	mov	r4, r1
 800a77a:	d507      	bpl.n	800a78c <__smakebuf_r+0x1c>
 800a77c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800a780:	6023      	str	r3, [r4, #0]
 800a782:	6123      	str	r3, [r4, #16]
 800a784:	2301      	movs	r3, #1
 800a786:	6163      	str	r3, [r4, #20]
 800a788:	b002      	add	sp, #8
 800a78a:	bd70      	pop	{r4, r5, r6, pc}
 800a78c:	ab01      	add	r3, sp, #4
 800a78e:	466a      	mov	r2, sp
 800a790:	f7ff ffc8 	bl	800a724 <__swhatbuf_r>
 800a794:	9900      	ldr	r1, [sp, #0]
 800a796:	4605      	mov	r5, r0
 800a798:	4630      	mov	r0, r6
 800a79a:	f7ff f957 	bl	8009a4c <_malloc_r>
 800a79e:	b948      	cbnz	r0, 800a7b4 <__smakebuf_r+0x44>
 800a7a0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a7a4:	059a      	lsls	r2, r3, #22
 800a7a6:	d4ef      	bmi.n	800a788 <__smakebuf_r+0x18>
 800a7a8:	f023 0303 	bic.w	r3, r3, #3
 800a7ac:	f043 0302 	orr.w	r3, r3, #2
 800a7b0:	81a3      	strh	r3, [r4, #12]
 800a7b2:	e7e3      	b.n	800a77c <__smakebuf_r+0xc>
 800a7b4:	4b0d      	ldr	r3, [pc, #52]	; (800a7ec <__smakebuf_r+0x7c>)
 800a7b6:	62b3      	str	r3, [r6, #40]	; 0x28
 800a7b8:	89a3      	ldrh	r3, [r4, #12]
 800a7ba:	6020      	str	r0, [r4, #0]
 800a7bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a7c0:	81a3      	strh	r3, [r4, #12]
 800a7c2:	9b00      	ldr	r3, [sp, #0]
 800a7c4:	6163      	str	r3, [r4, #20]
 800a7c6:	9b01      	ldr	r3, [sp, #4]
 800a7c8:	6120      	str	r0, [r4, #16]
 800a7ca:	b15b      	cbz	r3, 800a7e4 <__smakebuf_r+0x74>
 800a7cc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a7d0:	4630      	mov	r0, r6
 800a7d2:	f000 f8d1 	bl	800a978 <_isatty_r>
 800a7d6:	b128      	cbz	r0, 800a7e4 <__smakebuf_r+0x74>
 800a7d8:	89a3      	ldrh	r3, [r4, #12]
 800a7da:	f023 0303 	bic.w	r3, r3, #3
 800a7de:	f043 0301 	orr.w	r3, r3, #1
 800a7e2:	81a3      	strh	r3, [r4, #12]
 800a7e4:	89a0      	ldrh	r0, [r4, #12]
 800a7e6:	4305      	orrs	r5, r0
 800a7e8:	81a5      	strh	r5, [r4, #12]
 800a7ea:	e7cd      	b.n	800a788 <__smakebuf_r+0x18>
 800a7ec:	0800a57d 	.word	0x0800a57d

0800a7f0 <_malloc_usable_size_r>:
 800a7f0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a7f4:	1f18      	subs	r0, r3, #4
 800a7f6:	2b00      	cmp	r3, #0
 800a7f8:	bfbc      	itt	lt
 800a7fa:	580b      	ldrlt	r3, [r1, r0]
 800a7fc:	18c0      	addlt	r0, r0, r3
 800a7fe:	4770      	bx	lr

0800a800 <_raise_r>:
 800a800:	291f      	cmp	r1, #31
 800a802:	b538      	push	{r3, r4, r5, lr}
 800a804:	4604      	mov	r4, r0
 800a806:	460d      	mov	r5, r1
 800a808:	d904      	bls.n	800a814 <_raise_r+0x14>
 800a80a:	2316      	movs	r3, #22
 800a80c:	6003      	str	r3, [r0, #0]
 800a80e:	f04f 30ff 	mov.w	r0, #4294967295
 800a812:	bd38      	pop	{r3, r4, r5, pc}
 800a814:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800a816:	b112      	cbz	r2, 800a81e <_raise_r+0x1e>
 800a818:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a81c:	b94b      	cbnz	r3, 800a832 <_raise_r+0x32>
 800a81e:	4620      	mov	r0, r4
 800a820:	f000 f830 	bl	800a884 <_getpid_r>
 800a824:	462a      	mov	r2, r5
 800a826:	4601      	mov	r1, r0
 800a828:	4620      	mov	r0, r4
 800a82a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a82e:	f000 b817 	b.w	800a860 <_kill_r>
 800a832:	2b01      	cmp	r3, #1
 800a834:	d00a      	beq.n	800a84c <_raise_r+0x4c>
 800a836:	1c59      	adds	r1, r3, #1
 800a838:	d103      	bne.n	800a842 <_raise_r+0x42>
 800a83a:	2316      	movs	r3, #22
 800a83c:	6003      	str	r3, [r0, #0]
 800a83e:	2001      	movs	r0, #1
 800a840:	e7e7      	b.n	800a812 <_raise_r+0x12>
 800a842:	2400      	movs	r4, #0
 800a844:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800a848:	4628      	mov	r0, r5
 800a84a:	4798      	blx	r3
 800a84c:	2000      	movs	r0, #0
 800a84e:	e7e0      	b.n	800a812 <_raise_r+0x12>

0800a850 <raise>:
 800a850:	4b02      	ldr	r3, [pc, #8]	; (800a85c <raise+0xc>)
 800a852:	4601      	mov	r1, r0
 800a854:	6818      	ldr	r0, [r3, #0]
 800a856:	f7ff bfd3 	b.w	800a800 <_raise_r>
 800a85a:	bf00      	nop
 800a85c:	20000024 	.word	0x20000024

0800a860 <_kill_r>:
 800a860:	b538      	push	{r3, r4, r5, lr}
 800a862:	4d07      	ldr	r5, [pc, #28]	; (800a880 <_kill_r+0x20>)
 800a864:	2300      	movs	r3, #0
 800a866:	4604      	mov	r4, r0
 800a868:	4608      	mov	r0, r1
 800a86a:	4611      	mov	r1, r2
 800a86c:	602b      	str	r3, [r5, #0]
 800a86e:	f7f7 f983 	bl	8001b78 <_kill>
 800a872:	1c43      	adds	r3, r0, #1
 800a874:	d102      	bne.n	800a87c <_kill_r+0x1c>
 800a876:	682b      	ldr	r3, [r5, #0]
 800a878:	b103      	cbz	r3, 800a87c <_kill_r+0x1c>
 800a87a:	6023      	str	r3, [r4, #0]
 800a87c:	bd38      	pop	{r3, r4, r5, pc}
 800a87e:	bf00      	nop
 800a880:	200048a0 	.word	0x200048a0

0800a884 <_getpid_r>:
 800a884:	f7f7 b970 	b.w	8001b68 <_getpid>

0800a888 <__sread>:
 800a888:	b510      	push	{r4, lr}
 800a88a:	460c      	mov	r4, r1
 800a88c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a890:	f000 f894 	bl	800a9bc <_read_r>
 800a894:	2800      	cmp	r0, #0
 800a896:	bfab      	itete	ge
 800a898:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800a89a:	89a3      	ldrhlt	r3, [r4, #12]
 800a89c:	181b      	addge	r3, r3, r0
 800a89e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800a8a2:	bfac      	ite	ge
 800a8a4:	6563      	strge	r3, [r4, #84]	; 0x54
 800a8a6:	81a3      	strhlt	r3, [r4, #12]
 800a8a8:	bd10      	pop	{r4, pc}

0800a8aa <__swrite>:
 800a8aa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a8ae:	461f      	mov	r7, r3
 800a8b0:	898b      	ldrh	r3, [r1, #12]
 800a8b2:	05db      	lsls	r3, r3, #23
 800a8b4:	4605      	mov	r5, r0
 800a8b6:	460c      	mov	r4, r1
 800a8b8:	4616      	mov	r6, r2
 800a8ba:	d505      	bpl.n	800a8c8 <__swrite+0x1e>
 800a8bc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a8c0:	2302      	movs	r3, #2
 800a8c2:	2200      	movs	r2, #0
 800a8c4:	f000 f868 	bl	800a998 <_lseek_r>
 800a8c8:	89a3      	ldrh	r3, [r4, #12]
 800a8ca:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a8ce:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a8d2:	81a3      	strh	r3, [r4, #12]
 800a8d4:	4632      	mov	r2, r6
 800a8d6:	463b      	mov	r3, r7
 800a8d8:	4628      	mov	r0, r5
 800a8da:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a8de:	f000 b817 	b.w	800a910 <_write_r>

0800a8e2 <__sseek>:
 800a8e2:	b510      	push	{r4, lr}
 800a8e4:	460c      	mov	r4, r1
 800a8e6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a8ea:	f000 f855 	bl	800a998 <_lseek_r>
 800a8ee:	1c43      	adds	r3, r0, #1
 800a8f0:	89a3      	ldrh	r3, [r4, #12]
 800a8f2:	bf15      	itete	ne
 800a8f4:	6560      	strne	r0, [r4, #84]	; 0x54
 800a8f6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800a8fa:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800a8fe:	81a3      	strheq	r3, [r4, #12]
 800a900:	bf18      	it	ne
 800a902:	81a3      	strhne	r3, [r4, #12]
 800a904:	bd10      	pop	{r4, pc}

0800a906 <__sclose>:
 800a906:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a90a:	f000 b813 	b.w	800a934 <_close_r>
	...

0800a910 <_write_r>:
 800a910:	b538      	push	{r3, r4, r5, lr}
 800a912:	4d07      	ldr	r5, [pc, #28]	; (800a930 <_write_r+0x20>)
 800a914:	4604      	mov	r4, r0
 800a916:	4608      	mov	r0, r1
 800a918:	4611      	mov	r1, r2
 800a91a:	2200      	movs	r2, #0
 800a91c:	602a      	str	r2, [r5, #0]
 800a91e:	461a      	mov	r2, r3
 800a920:	f7f7 f961 	bl	8001be6 <_write>
 800a924:	1c43      	adds	r3, r0, #1
 800a926:	d102      	bne.n	800a92e <_write_r+0x1e>
 800a928:	682b      	ldr	r3, [r5, #0]
 800a92a:	b103      	cbz	r3, 800a92e <_write_r+0x1e>
 800a92c:	6023      	str	r3, [r4, #0]
 800a92e:	bd38      	pop	{r3, r4, r5, pc}
 800a930:	200048a0 	.word	0x200048a0

0800a934 <_close_r>:
 800a934:	b538      	push	{r3, r4, r5, lr}
 800a936:	4d06      	ldr	r5, [pc, #24]	; (800a950 <_close_r+0x1c>)
 800a938:	2300      	movs	r3, #0
 800a93a:	4604      	mov	r4, r0
 800a93c:	4608      	mov	r0, r1
 800a93e:	602b      	str	r3, [r5, #0]
 800a940:	f7f7 f96d 	bl	8001c1e <_close>
 800a944:	1c43      	adds	r3, r0, #1
 800a946:	d102      	bne.n	800a94e <_close_r+0x1a>
 800a948:	682b      	ldr	r3, [r5, #0]
 800a94a:	b103      	cbz	r3, 800a94e <_close_r+0x1a>
 800a94c:	6023      	str	r3, [r4, #0]
 800a94e:	bd38      	pop	{r3, r4, r5, pc}
 800a950:	200048a0 	.word	0x200048a0

0800a954 <_fstat_r>:
 800a954:	b538      	push	{r3, r4, r5, lr}
 800a956:	4d07      	ldr	r5, [pc, #28]	; (800a974 <_fstat_r+0x20>)
 800a958:	2300      	movs	r3, #0
 800a95a:	4604      	mov	r4, r0
 800a95c:	4608      	mov	r0, r1
 800a95e:	4611      	mov	r1, r2
 800a960:	602b      	str	r3, [r5, #0]
 800a962:	f7f7 f968 	bl	8001c36 <_fstat>
 800a966:	1c43      	adds	r3, r0, #1
 800a968:	d102      	bne.n	800a970 <_fstat_r+0x1c>
 800a96a:	682b      	ldr	r3, [r5, #0]
 800a96c:	b103      	cbz	r3, 800a970 <_fstat_r+0x1c>
 800a96e:	6023      	str	r3, [r4, #0]
 800a970:	bd38      	pop	{r3, r4, r5, pc}
 800a972:	bf00      	nop
 800a974:	200048a0 	.word	0x200048a0

0800a978 <_isatty_r>:
 800a978:	b538      	push	{r3, r4, r5, lr}
 800a97a:	4d06      	ldr	r5, [pc, #24]	; (800a994 <_isatty_r+0x1c>)
 800a97c:	2300      	movs	r3, #0
 800a97e:	4604      	mov	r4, r0
 800a980:	4608      	mov	r0, r1
 800a982:	602b      	str	r3, [r5, #0]
 800a984:	f7f7 f967 	bl	8001c56 <_isatty>
 800a988:	1c43      	adds	r3, r0, #1
 800a98a:	d102      	bne.n	800a992 <_isatty_r+0x1a>
 800a98c:	682b      	ldr	r3, [r5, #0]
 800a98e:	b103      	cbz	r3, 800a992 <_isatty_r+0x1a>
 800a990:	6023      	str	r3, [r4, #0]
 800a992:	bd38      	pop	{r3, r4, r5, pc}
 800a994:	200048a0 	.word	0x200048a0

0800a998 <_lseek_r>:
 800a998:	b538      	push	{r3, r4, r5, lr}
 800a99a:	4d07      	ldr	r5, [pc, #28]	; (800a9b8 <_lseek_r+0x20>)
 800a99c:	4604      	mov	r4, r0
 800a99e:	4608      	mov	r0, r1
 800a9a0:	4611      	mov	r1, r2
 800a9a2:	2200      	movs	r2, #0
 800a9a4:	602a      	str	r2, [r5, #0]
 800a9a6:	461a      	mov	r2, r3
 800a9a8:	f7f7 f960 	bl	8001c6c <_lseek>
 800a9ac:	1c43      	adds	r3, r0, #1
 800a9ae:	d102      	bne.n	800a9b6 <_lseek_r+0x1e>
 800a9b0:	682b      	ldr	r3, [r5, #0]
 800a9b2:	b103      	cbz	r3, 800a9b6 <_lseek_r+0x1e>
 800a9b4:	6023      	str	r3, [r4, #0]
 800a9b6:	bd38      	pop	{r3, r4, r5, pc}
 800a9b8:	200048a0 	.word	0x200048a0

0800a9bc <_read_r>:
 800a9bc:	b538      	push	{r3, r4, r5, lr}
 800a9be:	4d07      	ldr	r5, [pc, #28]	; (800a9dc <_read_r+0x20>)
 800a9c0:	4604      	mov	r4, r0
 800a9c2:	4608      	mov	r0, r1
 800a9c4:	4611      	mov	r1, r2
 800a9c6:	2200      	movs	r2, #0
 800a9c8:	602a      	str	r2, [r5, #0]
 800a9ca:	461a      	mov	r2, r3
 800a9cc:	f7f7 f8ee 	bl	8001bac <_read>
 800a9d0:	1c43      	adds	r3, r0, #1
 800a9d2:	d102      	bne.n	800a9da <_read_r+0x1e>
 800a9d4:	682b      	ldr	r3, [r5, #0]
 800a9d6:	b103      	cbz	r3, 800a9da <_read_r+0x1e>
 800a9d8:	6023      	str	r3, [r4, #0]
 800a9da:	bd38      	pop	{r3, r4, r5, pc}
 800a9dc:	200048a0 	.word	0x200048a0

0800a9e0 <cos>:
 800a9e0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a9e2:	ec53 2b10 	vmov	r2, r3, d0
 800a9e6:	4826      	ldr	r0, [pc, #152]	; (800aa80 <cos+0xa0>)
 800a9e8:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800a9ec:	4281      	cmp	r1, r0
 800a9ee:	dc06      	bgt.n	800a9fe <cos+0x1e>
 800a9f0:	ed9f 1b21 	vldr	d1, [pc, #132]	; 800aa78 <cos+0x98>
 800a9f4:	b005      	add	sp, #20
 800a9f6:	f85d eb04 	ldr.w	lr, [sp], #4
 800a9fa:	f000 bab9 	b.w	800af70 <__kernel_cos>
 800a9fe:	4821      	ldr	r0, [pc, #132]	; (800aa84 <cos+0xa4>)
 800aa00:	4281      	cmp	r1, r0
 800aa02:	dd09      	ble.n	800aa18 <cos+0x38>
 800aa04:	ee10 0a10 	vmov	r0, s0
 800aa08:	4619      	mov	r1, r3
 800aa0a:	f7f5 fc9d 	bl	8000348 <__aeabi_dsub>
 800aa0e:	ec41 0b10 	vmov	d0, r0, r1
 800aa12:	b005      	add	sp, #20
 800aa14:	f85d fb04 	ldr.w	pc, [sp], #4
 800aa18:	4668      	mov	r0, sp
 800aa1a:	f000 f899 	bl	800ab50 <__ieee754_rem_pio2>
 800aa1e:	f000 0003 	and.w	r0, r0, #3
 800aa22:	2801      	cmp	r0, #1
 800aa24:	d00b      	beq.n	800aa3e <cos+0x5e>
 800aa26:	2802      	cmp	r0, #2
 800aa28:	d016      	beq.n	800aa58 <cos+0x78>
 800aa2a:	b9e0      	cbnz	r0, 800aa66 <cos+0x86>
 800aa2c:	ed9d 1b02 	vldr	d1, [sp, #8]
 800aa30:	ed9d 0b00 	vldr	d0, [sp]
 800aa34:	f000 fa9c 	bl	800af70 <__kernel_cos>
 800aa38:	ec51 0b10 	vmov	r0, r1, d0
 800aa3c:	e7e7      	b.n	800aa0e <cos+0x2e>
 800aa3e:	ed9d 1b02 	vldr	d1, [sp, #8]
 800aa42:	ed9d 0b00 	vldr	d0, [sp]
 800aa46:	f000 feab 	bl	800b7a0 <__kernel_sin>
 800aa4a:	ec53 2b10 	vmov	r2, r3, d0
 800aa4e:	ee10 0a10 	vmov	r0, s0
 800aa52:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800aa56:	e7da      	b.n	800aa0e <cos+0x2e>
 800aa58:	ed9d 1b02 	vldr	d1, [sp, #8]
 800aa5c:	ed9d 0b00 	vldr	d0, [sp]
 800aa60:	f000 fa86 	bl	800af70 <__kernel_cos>
 800aa64:	e7f1      	b.n	800aa4a <cos+0x6a>
 800aa66:	ed9d 1b02 	vldr	d1, [sp, #8]
 800aa6a:	ed9d 0b00 	vldr	d0, [sp]
 800aa6e:	2001      	movs	r0, #1
 800aa70:	f000 fe96 	bl	800b7a0 <__kernel_sin>
 800aa74:	e7e0      	b.n	800aa38 <cos+0x58>
 800aa76:	bf00      	nop
	...
 800aa80:	3fe921fb 	.word	0x3fe921fb
 800aa84:	7fefffff 	.word	0x7fefffff

0800aa88 <round>:
 800aa88:	ec51 0b10 	vmov	r0, r1, d0
 800aa8c:	b570      	push	{r4, r5, r6, lr}
 800aa8e:	f3c1 550a 	ubfx	r5, r1, #20, #11
 800aa92:	f2a5 34ff 	subw	r4, r5, #1023	; 0x3ff
 800aa96:	2c13      	cmp	r4, #19
 800aa98:	ee10 2a10 	vmov	r2, s0
 800aa9c:	460b      	mov	r3, r1
 800aa9e:	dc19      	bgt.n	800aad4 <round+0x4c>
 800aaa0:	2c00      	cmp	r4, #0
 800aaa2:	da09      	bge.n	800aab8 <round+0x30>
 800aaa4:	3401      	adds	r4, #1
 800aaa6:	f001 4300 	and.w	r3, r1, #2147483648	; 0x80000000
 800aaaa:	d103      	bne.n	800aab4 <round+0x2c>
 800aaac:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800aab0:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800aab4:	2200      	movs	r2, #0
 800aab6:	e028      	b.n	800ab0a <round+0x82>
 800aab8:	4d15      	ldr	r5, [pc, #84]	; (800ab10 <round+0x88>)
 800aaba:	4125      	asrs	r5, r4
 800aabc:	ea01 0605 	and.w	r6, r1, r5
 800aac0:	4332      	orrs	r2, r6
 800aac2:	d00e      	beq.n	800aae2 <round+0x5a>
 800aac4:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800aac8:	fa42 f404 	asr.w	r4, r2, r4
 800aacc:	4423      	add	r3, r4
 800aace:	ea23 0305 	bic.w	r3, r3, r5
 800aad2:	e7ef      	b.n	800aab4 <round+0x2c>
 800aad4:	2c33      	cmp	r4, #51	; 0x33
 800aad6:	dd07      	ble.n	800aae8 <round+0x60>
 800aad8:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
 800aadc:	d101      	bne.n	800aae2 <round+0x5a>
 800aade:	f7f5 fc35 	bl	800034c <__adddf3>
 800aae2:	ec41 0b10 	vmov	d0, r0, r1
 800aae6:	bd70      	pop	{r4, r5, r6, pc}
 800aae8:	f2a5 4613 	subw	r6, r5, #1043	; 0x413
 800aaec:	f04f 35ff 	mov.w	r5, #4294967295
 800aaf0:	40f5      	lsrs	r5, r6
 800aaf2:	4228      	tst	r0, r5
 800aaf4:	d0f5      	beq.n	800aae2 <round+0x5a>
 800aaf6:	2101      	movs	r1, #1
 800aaf8:	f1c4 0433 	rsb	r4, r4, #51	; 0x33
 800aafc:	fa01 f404 	lsl.w	r4, r1, r4
 800ab00:	1912      	adds	r2, r2, r4
 800ab02:	bf28      	it	cs
 800ab04:	185b      	addcs	r3, r3, r1
 800ab06:	ea22 0205 	bic.w	r2, r2, r5
 800ab0a:	4619      	mov	r1, r3
 800ab0c:	4610      	mov	r0, r2
 800ab0e:	e7e8      	b.n	800aae2 <round+0x5a>
 800ab10:	000fffff 	.word	0x000fffff

0800ab14 <sqrtf>:
 800ab14:	b508      	push	{r3, lr}
 800ab16:	ed2d 8b02 	vpush	{d8}
 800ab1a:	eeb0 8a40 	vmov.f32	s16, s0
 800ab1e:	f000 fa23 	bl	800af68 <__ieee754_sqrtf>
 800ab22:	eeb4 8a48 	vcmp.f32	s16, s16
 800ab26:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ab2a:	d60c      	bvs.n	800ab46 <sqrtf+0x32>
 800ab2c:	eddf 8a07 	vldr	s17, [pc, #28]	; 800ab4c <sqrtf+0x38>
 800ab30:	eeb4 8ae8 	vcmpe.f32	s16, s17
 800ab34:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ab38:	d505      	bpl.n	800ab46 <sqrtf+0x32>
 800ab3a:	f7fb faaf 	bl	800609c <__errno>
 800ab3e:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 800ab42:	2321      	movs	r3, #33	; 0x21
 800ab44:	6003      	str	r3, [r0, #0]
 800ab46:	ecbd 8b02 	vpop	{d8}
 800ab4a:	bd08      	pop	{r3, pc}
 800ab4c:	00000000 	.word	0x00000000

0800ab50 <__ieee754_rem_pio2>:
 800ab50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ab54:	ed2d 8b02 	vpush	{d8}
 800ab58:	ec55 4b10 	vmov	r4, r5, d0
 800ab5c:	4bca      	ldr	r3, [pc, #808]	; (800ae88 <__ieee754_rem_pio2+0x338>)
 800ab5e:	b08b      	sub	sp, #44	; 0x2c
 800ab60:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 800ab64:	4598      	cmp	r8, r3
 800ab66:	4682      	mov	sl, r0
 800ab68:	9502      	str	r5, [sp, #8]
 800ab6a:	dc08      	bgt.n	800ab7e <__ieee754_rem_pio2+0x2e>
 800ab6c:	2200      	movs	r2, #0
 800ab6e:	2300      	movs	r3, #0
 800ab70:	ed80 0b00 	vstr	d0, [r0]
 800ab74:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800ab78:	f04f 0b00 	mov.w	fp, #0
 800ab7c:	e028      	b.n	800abd0 <__ieee754_rem_pio2+0x80>
 800ab7e:	4bc3      	ldr	r3, [pc, #780]	; (800ae8c <__ieee754_rem_pio2+0x33c>)
 800ab80:	4598      	cmp	r8, r3
 800ab82:	dc78      	bgt.n	800ac76 <__ieee754_rem_pio2+0x126>
 800ab84:	9b02      	ldr	r3, [sp, #8]
 800ab86:	4ec2      	ldr	r6, [pc, #776]	; (800ae90 <__ieee754_rem_pio2+0x340>)
 800ab88:	2b00      	cmp	r3, #0
 800ab8a:	ee10 0a10 	vmov	r0, s0
 800ab8e:	a3b0      	add	r3, pc, #704	; (adr r3, 800ae50 <__ieee754_rem_pio2+0x300>)
 800ab90:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab94:	4629      	mov	r1, r5
 800ab96:	dd39      	ble.n	800ac0c <__ieee754_rem_pio2+0xbc>
 800ab98:	f7f5 fbd6 	bl	8000348 <__aeabi_dsub>
 800ab9c:	45b0      	cmp	r8, r6
 800ab9e:	4604      	mov	r4, r0
 800aba0:	460d      	mov	r5, r1
 800aba2:	d01b      	beq.n	800abdc <__ieee754_rem_pio2+0x8c>
 800aba4:	a3ac      	add	r3, pc, #688	; (adr r3, 800ae58 <__ieee754_rem_pio2+0x308>)
 800aba6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800abaa:	f7f5 fbcd 	bl	8000348 <__aeabi_dsub>
 800abae:	4602      	mov	r2, r0
 800abb0:	460b      	mov	r3, r1
 800abb2:	e9ca 2300 	strd	r2, r3, [sl]
 800abb6:	4620      	mov	r0, r4
 800abb8:	4629      	mov	r1, r5
 800abba:	f7f5 fbc5 	bl	8000348 <__aeabi_dsub>
 800abbe:	a3a6      	add	r3, pc, #664	; (adr r3, 800ae58 <__ieee754_rem_pio2+0x308>)
 800abc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800abc4:	f7f5 fbc0 	bl	8000348 <__aeabi_dsub>
 800abc8:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800abcc:	f04f 0b01 	mov.w	fp, #1
 800abd0:	4658      	mov	r0, fp
 800abd2:	b00b      	add	sp, #44	; 0x2c
 800abd4:	ecbd 8b02 	vpop	{d8}
 800abd8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800abdc:	a3a0      	add	r3, pc, #640	; (adr r3, 800ae60 <__ieee754_rem_pio2+0x310>)
 800abde:	e9d3 2300 	ldrd	r2, r3, [r3]
 800abe2:	f7f5 fbb1 	bl	8000348 <__aeabi_dsub>
 800abe6:	a3a0      	add	r3, pc, #640	; (adr r3, 800ae68 <__ieee754_rem_pio2+0x318>)
 800abe8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800abec:	4604      	mov	r4, r0
 800abee:	460d      	mov	r5, r1
 800abf0:	f7f5 fbaa 	bl	8000348 <__aeabi_dsub>
 800abf4:	4602      	mov	r2, r0
 800abf6:	460b      	mov	r3, r1
 800abf8:	e9ca 2300 	strd	r2, r3, [sl]
 800abfc:	4620      	mov	r0, r4
 800abfe:	4629      	mov	r1, r5
 800ac00:	f7f5 fba2 	bl	8000348 <__aeabi_dsub>
 800ac04:	a398      	add	r3, pc, #608	; (adr r3, 800ae68 <__ieee754_rem_pio2+0x318>)
 800ac06:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac0a:	e7db      	b.n	800abc4 <__ieee754_rem_pio2+0x74>
 800ac0c:	f7f5 fb9e 	bl	800034c <__adddf3>
 800ac10:	45b0      	cmp	r8, r6
 800ac12:	4604      	mov	r4, r0
 800ac14:	460d      	mov	r5, r1
 800ac16:	d016      	beq.n	800ac46 <__ieee754_rem_pio2+0xf6>
 800ac18:	a38f      	add	r3, pc, #572	; (adr r3, 800ae58 <__ieee754_rem_pio2+0x308>)
 800ac1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac1e:	f7f5 fb95 	bl	800034c <__adddf3>
 800ac22:	4602      	mov	r2, r0
 800ac24:	460b      	mov	r3, r1
 800ac26:	e9ca 2300 	strd	r2, r3, [sl]
 800ac2a:	4620      	mov	r0, r4
 800ac2c:	4629      	mov	r1, r5
 800ac2e:	f7f5 fb8b 	bl	8000348 <__aeabi_dsub>
 800ac32:	a389      	add	r3, pc, #548	; (adr r3, 800ae58 <__ieee754_rem_pio2+0x308>)
 800ac34:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac38:	f7f5 fb88 	bl	800034c <__adddf3>
 800ac3c:	f04f 3bff 	mov.w	fp, #4294967295
 800ac40:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800ac44:	e7c4      	b.n	800abd0 <__ieee754_rem_pio2+0x80>
 800ac46:	a386      	add	r3, pc, #536	; (adr r3, 800ae60 <__ieee754_rem_pio2+0x310>)
 800ac48:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac4c:	f7f5 fb7e 	bl	800034c <__adddf3>
 800ac50:	a385      	add	r3, pc, #532	; (adr r3, 800ae68 <__ieee754_rem_pio2+0x318>)
 800ac52:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac56:	4604      	mov	r4, r0
 800ac58:	460d      	mov	r5, r1
 800ac5a:	f7f5 fb77 	bl	800034c <__adddf3>
 800ac5e:	4602      	mov	r2, r0
 800ac60:	460b      	mov	r3, r1
 800ac62:	e9ca 2300 	strd	r2, r3, [sl]
 800ac66:	4620      	mov	r0, r4
 800ac68:	4629      	mov	r1, r5
 800ac6a:	f7f5 fb6d 	bl	8000348 <__aeabi_dsub>
 800ac6e:	a37e      	add	r3, pc, #504	; (adr r3, 800ae68 <__ieee754_rem_pio2+0x318>)
 800ac70:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac74:	e7e0      	b.n	800ac38 <__ieee754_rem_pio2+0xe8>
 800ac76:	4b87      	ldr	r3, [pc, #540]	; (800ae94 <__ieee754_rem_pio2+0x344>)
 800ac78:	4598      	cmp	r8, r3
 800ac7a:	f300 80d9 	bgt.w	800ae30 <__ieee754_rem_pio2+0x2e0>
 800ac7e:	f000 fe4d 	bl	800b91c <fabs>
 800ac82:	ec55 4b10 	vmov	r4, r5, d0
 800ac86:	ee10 0a10 	vmov	r0, s0
 800ac8a:	a379      	add	r3, pc, #484	; (adr r3, 800ae70 <__ieee754_rem_pio2+0x320>)
 800ac8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac90:	4629      	mov	r1, r5
 800ac92:	f7f5 fd11 	bl	80006b8 <__aeabi_dmul>
 800ac96:	4b80      	ldr	r3, [pc, #512]	; (800ae98 <__ieee754_rem_pio2+0x348>)
 800ac98:	2200      	movs	r2, #0
 800ac9a:	f7f5 fb57 	bl	800034c <__adddf3>
 800ac9e:	f7f5 ffbb 	bl	8000c18 <__aeabi_d2iz>
 800aca2:	4683      	mov	fp, r0
 800aca4:	f7f5 fc9e 	bl	80005e4 <__aeabi_i2d>
 800aca8:	4602      	mov	r2, r0
 800acaa:	460b      	mov	r3, r1
 800acac:	ec43 2b18 	vmov	d8, r2, r3
 800acb0:	a367      	add	r3, pc, #412	; (adr r3, 800ae50 <__ieee754_rem_pio2+0x300>)
 800acb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800acb6:	f7f5 fcff 	bl	80006b8 <__aeabi_dmul>
 800acba:	4602      	mov	r2, r0
 800acbc:	460b      	mov	r3, r1
 800acbe:	4620      	mov	r0, r4
 800acc0:	4629      	mov	r1, r5
 800acc2:	f7f5 fb41 	bl	8000348 <__aeabi_dsub>
 800acc6:	a364      	add	r3, pc, #400	; (adr r3, 800ae58 <__ieee754_rem_pio2+0x308>)
 800acc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800accc:	4606      	mov	r6, r0
 800acce:	460f      	mov	r7, r1
 800acd0:	ec51 0b18 	vmov	r0, r1, d8
 800acd4:	f7f5 fcf0 	bl	80006b8 <__aeabi_dmul>
 800acd8:	f1bb 0f1f 	cmp.w	fp, #31
 800acdc:	4604      	mov	r4, r0
 800acde:	460d      	mov	r5, r1
 800ace0:	dc0d      	bgt.n	800acfe <__ieee754_rem_pio2+0x1ae>
 800ace2:	4b6e      	ldr	r3, [pc, #440]	; (800ae9c <__ieee754_rem_pio2+0x34c>)
 800ace4:	f10b 32ff 	add.w	r2, fp, #4294967295
 800ace8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800acec:	4543      	cmp	r3, r8
 800acee:	d006      	beq.n	800acfe <__ieee754_rem_pio2+0x1ae>
 800acf0:	4622      	mov	r2, r4
 800acf2:	462b      	mov	r3, r5
 800acf4:	4630      	mov	r0, r6
 800acf6:	4639      	mov	r1, r7
 800acf8:	f7f5 fb26 	bl	8000348 <__aeabi_dsub>
 800acfc:	e00f      	b.n	800ad1e <__ieee754_rem_pio2+0x1ce>
 800acfe:	462b      	mov	r3, r5
 800ad00:	4622      	mov	r2, r4
 800ad02:	4630      	mov	r0, r6
 800ad04:	4639      	mov	r1, r7
 800ad06:	f7f5 fb1f 	bl	8000348 <__aeabi_dsub>
 800ad0a:	ea4f 5328 	mov.w	r3, r8, asr #20
 800ad0e:	9303      	str	r3, [sp, #12]
 800ad10:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800ad14:	ebc3 5818 	rsb	r8, r3, r8, lsr #20
 800ad18:	f1b8 0f10 	cmp.w	r8, #16
 800ad1c:	dc02      	bgt.n	800ad24 <__ieee754_rem_pio2+0x1d4>
 800ad1e:	e9ca 0100 	strd	r0, r1, [sl]
 800ad22:	e039      	b.n	800ad98 <__ieee754_rem_pio2+0x248>
 800ad24:	a34e      	add	r3, pc, #312	; (adr r3, 800ae60 <__ieee754_rem_pio2+0x310>)
 800ad26:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad2a:	ec51 0b18 	vmov	r0, r1, d8
 800ad2e:	f7f5 fcc3 	bl	80006b8 <__aeabi_dmul>
 800ad32:	4604      	mov	r4, r0
 800ad34:	460d      	mov	r5, r1
 800ad36:	4602      	mov	r2, r0
 800ad38:	460b      	mov	r3, r1
 800ad3a:	4630      	mov	r0, r6
 800ad3c:	4639      	mov	r1, r7
 800ad3e:	f7f5 fb03 	bl	8000348 <__aeabi_dsub>
 800ad42:	4602      	mov	r2, r0
 800ad44:	460b      	mov	r3, r1
 800ad46:	4680      	mov	r8, r0
 800ad48:	4689      	mov	r9, r1
 800ad4a:	4630      	mov	r0, r6
 800ad4c:	4639      	mov	r1, r7
 800ad4e:	f7f5 fafb 	bl	8000348 <__aeabi_dsub>
 800ad52:	4622      	mov	r2, r4
 800ad54:	462b      	mov	r3, r5
 800ad56:	f7f5 faf7 	bl	8000348 <__aeabi_dsub>
 800ad5a:	a343      	add	r3, pc, #268	; (adr r3, 800ae68 <__ieee754_rem_pio2+0x318>)
 800ad5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad60:	4604      	mov	r4, r0
 800ad62:	460d      	mov	r5, r1
 800ad64:	ec51 0b18 	vmov	r0, r1, d8
 800ad68:	f7f5 fca6 	bl	80006b8 <__aeabi_dmul>
 800ad6c:	4622      	mov	r2, r4
 800ad6e:	462b      	mov	r3, r5
 800ad70:	f7f5 faea 	bl	8000348 <__aeabi_dsub>
 800ad74:	4602      	mov	r2, r0
 800ad76:	460b      	mov	r3, r1
 800ad78:	4604      	mov	r4, r0
 800ad7a:	460d      	mov	r5, r1
 800ad7c:	4640      	mov	r0, r8
 800ad7e:	4649      	mov	r1, r9
 800ad80:	f7f5 fae2 	bl	8000348 <__aeabi_dsub>
 800ad84:	9a03      	ldr	r2, [sp, #12]
 800ad86:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800ad8a:	1ad3      	subs	r3, r2, r3
 800ad8c:	2b31      	cmp	r3, #49	; 0x31
 800ad8e:	dc24      	bgt.n	800adda <__ieee754_rem_pio2+0x28a>
 800ad90:	e9ca 0100 	strd	r0, r1, [sl]
 800ad94:	4646      	mov	r6, r8
 800ad96:	464f      	mov	r7, r9
 800ad98:	e9da 8900 	ldrd	r8, r9, [sl]
 800ad9c:	4630      	mov	r0, r6
 800ad9e:	4642      	mov	r2, r8
 800ada0:	464b      	mov	r3, r9
 800ada2:	4639      	mov	r1, r7
 800ada4:	f7f5 fad0 	bl	8000348 <__aeabi_dsub>
 800ada8:	462b      	mov	r3, r5
 800adaa:	4622      	mov	r2, r4
 800adac:	f7f5 facc 	bl	8000348 <__aeabi_dsub>
 800adb0:	9b02      	ldr	r3, [sp, #8]
 800adb2:	2b00      	cmp	r3, #0
 800adb4:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800adb8:	f6bf af0a 	bge.w	800abd0 <__ieee754_rem_pio2+0x80>
 800adbc:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800adc0:	f8ca 3004 	str.w	r3, [sl, #4]
 800adc4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800adc8:	f8ca 8000 	str.w	r8, [sl]
 800adcc:	f8ca 0008 	str.w	r0, [sl, #8]
 800add0:	f8ca 300c 	str.w	r3, [sl, #12]
 800add4:	f1cb 0b00 	rsb	fp, fp, #0
 800add8:	e6fa      	b.n	800abd0 <__ieee754_rem_pio2+0x80>
 800adda:	a327      	add	r3, pc, #156	; (adr r3, 800ae78 <__ieee754_rem_pio2+0x328>)
 800addc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ade0:	ec51 0b18 	vmov	r0, r1, d8
 800ade4:	f7f5 fc68 	bl	80006b8 <__aeabi_dmul>
 800ade8:	4604      	mov	r4, r0
 800adea:	460d      	mov	r5, r1
 800adec:	4602      	mov	r2, r0
 800adee:	460b      	mov	r3, r1
 800adf0:	4640      	mov	r0, r8
 800adf2:	4649      	mov	r1, r9
 800adf4:	f7f5 faa8 	bl	8000348 <__aeabi_dsub>
 800adf8:	4602      	mov	r2, r0
 800adfa:	460b      	mov	r3, r1
 800adfc:	4606      	mov	r6, r0
 800adfe:	460f      	mov	r7, r1
 800ae00:	4640      	mov	r0, r8
 800ae02:	4649      	mov	r1, r9
 800ae04:	f7f5 faa0 	bl	8000348 <__aeabi_dsub>
 800ae08:	4622      	mov	r2, r4
 800ae0a:	462b      	mov	r3, r5
 800ae0c:	f7f5 fa9c 	bl	8000348 <__aeabi_dsub>
 800ae10:	a31b      	add	r3, pc, #108	; (adr r3, 800ae80 <__ieee754_rem_pio2+0x330>)
 800ae12:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae16:	4604      	mov	r4, r0
 800ae18:	460d      	mov	r5, r1
 800ae1a:	ec51 0b18 	vmov	r0, r1, d8
 800ae1e:	f7f5 fc4b 	bl	80006b8 <__aeabi_dmul>
 800ae22:	4622      	mov	r2, r4
 800ae24:	462b      	mov	r3, r5
 800ae26:	f7f5 fa8f 	bl	8000348 <__aeabi_dsub>
 800ae2a:	4604      	mov	r4, r0
 800ae2c:	460d      	mov	r5, r1
 800ae2e:	e75f      	b.n	800acf0 <__ieee754_rem_pio2+0x1a0>
 800ae30:	4b1b      	ldr	r3, [pc, #108]	; (800aea0 <__ieee754_rem_pio2+0x350>)
 800ae32:	4598      	cmp	r8, r3
 800ae34:	dd36      	ble.n	800aea4 <__ieee754_rem_pio2+0x354>
 800ae36:	ee10 2a10 	vmov	r2, s0
 800ae3a:	462b      	mov	r3, r5
 800ae3c:	4620      	mov	r0, r4
 800ae3e:	4629      	mov	r1, r5
 800ae40:	f7f5 fa82 	bl	8000348 <__aeabi_dsub>
 800ae44:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800ae48:	e9ca 0100 	strd	r0, r1, [sl]
 800ae4c:	e694      	b.n	800ab78 <__ieee754_rem_pio2+0x28>
 800ae4e:	bf00      	nop
 800ae50:	54400000 	.word	0x54400000
 800ae54:	3ff921fb 	.word	0x3ff921fb
 800ae58:	1a626331 	.word	0x1a626331
 800ae5c:	3dd0b461 	.word	0x3dd0b461
 800ae60:	1a600000 	.word	0x1a600000
 800ae64:	3dd0b461 	.word	0x3dd0b461
 800ae68:	2e037073 	.word	0x2e037073
 800ae6c:	3ba3198a 	.word	0x3ba3198a
 800ae70:	6dc9c883 	.word	0x6dc9c883
 800ae74:	3fe45f30 	.word	0x3fe45f30
 800ae78:	2e000000 	.word	0x2e000000
 800ae7c:	3ba3198a 	.word	0x3ba3198a
 800ae80:	252049c1 	.word	0x252049c1
 800ae84:	397b839a 	.word	0x397b839a
 800ae88:	3fe921fb 	.word	0x3fe921fb
 800ae8c:	4002d97b 	.word	0x4002d97b
 800ae90:	3ff921fb 	.word	0x3ff921fb
 800ae94:	413921fb 	.word	0x413921fb
 800ae98:	3fe00000 	.word	0x3fe00000
 800ae9c:	0800ee7c 	.word	0x0800ee7c
 800aea0:	7fefffff 	.word	0x7fefffff
 800aea4:	ea4f 5428 	mov.w	r4, r8, asr #20
 800aea8:	f2a4 4416 	subw	r4, r4, #1046	; 0x416
 800aeac:	ee10 0a10 	vmov	r0, s0
 800aeb0:	eba8 5104 	sub.w	r1, r8, r4, lsl #20
 800aeb4:	ee10 6a10 	vmov	r6, s0
 800aeb8:	460f      	mov	r7, r1
 800aeba:	f7f5 fead 	bl	8000c18 <__aeabi_d2iz>
 800aebe:	f7f5 fb91 	bl	80005e4 <__aeabi_i2d>
 800aec2:	4602      	mov	r2, r0
 800aec4:	460b      	mov	r3, r1
 800aec6:	4630      	mov	r0, r6
 800aec8:	4639      	mov	r1, r7
 800aeca:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800aece:	f7f5 fa3b 	bl	8000348 <__aeabi_dsub>
 800aed2:	4b23      	ldr	r3, [pc, #140]	; (800af60 <__ieee754_rem_pio2+0x410>)
 800aed4:	2200      	movs	r2, #0
 800aed6:	f7f5 fbef 	bl	80006b8 <__aeabi_dmul>
 800aeda:	460f      	mov	r7, r1
 800aedc:	4606      	mov	r6, r0
 800aede:	f7f5 fe9b 	bl	8000c18 <__aeabi_d2iz>
 800aee2:	f7f5 fb7f 	bl	80005e4 <__aeabi_i2d>
 800aee6:	4602      	mov	r2, r0
 800aee8:	460b      	mov	r3, r1
 800aeea:	4630      	mov	r0, r6
 800aeec:	4639      	mov	r1, r7
 800aeee:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800aef2:	f7f5 fa29 	bl	8000348 <__aeabi_dsub>
 800aef6:	4b1a      	ldr	r3, [pc, #104]	; (800af60 <__ieee754_rem_pio2+0x410>)
 800aef8:	2200      	movs	r2, #0
 800aefa:	f7f5 fbdd 	bl	80006b8 <__aeabi_dmul>
 800aefe:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800af02:	ad04      	add	r5, sp, #16
 800af04:	f04f 0803 	mov.w	r8, #3
 800af08:	46a9      	mov	r9, r5
 800af0a:	2600      	movs	r6, #0
 800af0c:	2700      	movs	r7, #0
 800af0e:	4632      	mov	r2, r6
 800af10:	463b      	mov	r3, r7
 800af12:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 800af16:	46c3      	mov	fp, r8
 800af18:	3d08      	subs	r5, #8
 800af1a:	f108 38ff 	add.w	r8, r8, #4294967295
 800af1e:	f7f5 fe33 	bl	8000b88 <__aeabi_dcmpeq>
 800af22:	2800      	cmp	r0, #0
 800af24:	d1f3      	bne.n	800af0e <__ieee754_rem_pio2+0x3be>
 800af26:	4b0f      	ldr	r3, [pc, #60]	; (800af64 <__ieee754_rem_pio2+0x414>)
 800af28:	9301      	str	r3, [sp, #4]
 800af2a:	2302      	movs	r3, #2
 800af2c:	9300      	str	r3, [sp, #0]
 800af2e:	4622      	mov	r2, r4
 800af30:	465b      	mov	r3, fp
 800af32:	4651      	mov	r1, sl
 800af34:	4648      	mov	r0, r9
 800af36:	f000 f8e3 	bl	800b100 <__kernel_rem_pio2>
 800af3a:	9b02      	ldr	r3, [sp, #8]
 800af3c:	2b00      	cmp	r3, #0
 800af3e:	4683      	mov	fp, r0
 800af40:	f6bf ae46 	bge.w	800abd0 <__ieee754_rem_pio2+0x80>
 800af44:	e9da 2100 	ldrd	r2, r1, [sl]
 800af48:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800af4c:	e9ca 2300 	strd	r2, r3, [sl]
 800af50:	e9da 2102 	ldrd	r2, r1, [sl, #8]
 800af54:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800af58:	e9ca 2302 	strd	r2, r3, [sl, #8]
 800af5c:	e73a      	b.n	800add4 <__ieee754_rem_pio2+0x284>
 800af5e:	bf00      	nop
 800af60:	41700000 	.word	0x41700000
 800af64:	0800eefc 	.word	0x0800eefc

0800af68 <__ieee754_sqrtf>:
 800af68:	eeb1 0ac0 	vsqrt.f32	s0, s0
 800af6c:	4770      	bx	lr
	...

0800af70 <__kernel_cos>:
 800af70:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800af74:	ec57 6b10 	vmov	r6, r7, d0
 800af78:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 800af7c:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 800af80:	ed8d 1b00 	vstr	d1, [sp]
 800af84:	da07      	bge.n	800af96 <__kernel_cos+0x26>
 800af86:	ee10 0a10 	vmov	r0, s0
 800af8a:	4639      	mov	r1, r7
 800af8c:	f7f5 fe44 	bl	8000c18 <__aeabi_d2iz>
 800af90:	2800      	cmp	r0, #0
 800af92:	f000 8088 	beq.w	800b0a6 <__kernel_cos+0x136>
 800af96:	4632      	mov	r2, r6
 800af98:	463b      	mov	r3, r7
 800af9a:	4630      	mov	r0, r6
 800af9c:	4639      	mov	r1, r7
 800af9e:	f7f5 fb8b 	bl	80006b8 <__aeabi_dmul>
 800afa2:	4b51      	ldr	r3, [pc, #324]	; (800b0e8 <__kernel_cos+0x178>)
 800afa4:	2200      	movs	r2, #0
 800afa6:	4604      	mov	r4, r0
 800afa8:	460d      	mov	r5, r1
 800afaa:	f7f5 fb85 	bl	80006b8 <__aeabi_dmul>
 800afae:	a340      	add	r3, pc, #256	; (adr r3, 800b0b0 <__kernel_cos+0x140>)
 800afb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800afb4:	4682      	mov	sl, r0
 800afb6:	468b      	mov	fp, r1
 800afb8:	4620      	mov	r0, r4
 800afba:	4629      	mov	r1, r5
 800afbc:	f7f5 fb7c 	bl	80006b8 <__aeabi_dmul>
 800afc0:	a33d      	add	r3, pc, #244	; (adr r3, 800b0b8 <__kernel_cos+0x148>)
 800afc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800afc6:	f7f5 f9c1 	bl	800034c <__adddf3>
 800afca:	4622      	mov	r2, r4
 800afcc:	462b      	mov	r3, r5
 800afce:	f7f5 fb73 	bl	80006b8 <__aeabi_dmul>
 800afd2:	a33b      	add	r3, pc, #236	; (adr r3, 800b0c0 <__kernel_cos+0x150>)
 800afd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800afd8:	f7f5 f9b6 	bl	8000348 <__aeabi_dsub>
 800afdc:	4622      	mov	r2, r4
 800afde:	462b      	mov	r3, r5
 800afe0:	f7f5 fb6a 	bl	80006b8 <__aeabi_dmul>
 800afe4:	a338      	add	r3, pc, #224	; (adr r3, 800b0c8 <__kernel_cos+0x158>)
 800afe6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800afea:	f7f5 f9af 	bl	800034c <__adddf3>
 800afee:	4622      	mov	r2, r4
 800aff0:	462b      	mov	r3, r5
 800aff2:	f7f5 fb61 	bl	80006b8 <__aeabi_dmul>
 800aff6:	a336      	add	r3, pc, #216	; (adr r3, 800b0d0 <__kernel_cos+0x160>)
 800aff8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800affc:	f7f5 f9a4 	bl	8000348 <__aeabi_dsub>
 800b000:	4622      	mov	r2, r4
 800b002:	462b      	mov	r3, r5
 800b004:	f7f5 fb58 	bl	80006b8 <__aeabi_dmul>
 800b008:	a333      	add	r3, pc, #204	; (adr r3, 800b0d8 <__kernel_cos+0x168>)
 800b00a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b00e:	f7f5 f99d 	bl	800034c <__adddf3>
 800b012:	4622      	mov	r2, r4
 800b014:	462b      	mov	r3, r5
 800b016:	f7f5 fb4f 	bl	80006b8 <__aeabi_dmul>
 800b01a:	4622      	mov	r2, r4
 800b01c:	462b      	mov	r3, r5
 800b01e:	f7f5 fb4b 	bl	80006b8 <__aeabi_dmul>
 800b022:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b026:	4604      	mov	r4, r0
 800b028:	460d      	mov	r5, r1
 800b02a:	4630      	mov	r0, r6
 800b02c:	4639      	mov	r1, r7
 800b02e:	f7f5 fb43 	bl	80006b8 <__aeabi_dmul>
 800b032:	460b      	mov	r3, r1
 800b034:	4602      	mov	r2, r0
 800b036:	4629      	mov	r1, r5
 800b038:	4620      	mov	r0, r4
 800b03a:	f7f5 f985 	bl	8000348 <__aeabi_dsub>
 800b03e:	4b2b      	ldr	r3, [pc, #172]	; (800b0ec <__kernel_cos+0x17c>)
 800b040:	4598      	cmp	r8, r3
 800b042:	4606      	mov	r6, r0
 800b044:	460f      	mov	r7, r1
 800b046:	dc10      	bgt.n	800b06a <__kernel_cos+0xfa>
 800b048:	4602      	mov	r2, r0
 800b04a:	460b      	mov	r3, r1
 800b04c:	4650      	mov	r0, sl
 800b04e:	4659      	mov	r1, fp
 800b050:	f7f5 f97a 	bl	8000348 <__aeabi_dsub>
 800b054:	460b      	mov	r3, r1
 800b056:	4926      	ldr	r1, [pc, #152]	; (800b0f0 <__kernel_cos+0x180>)
 800b058:	4602      	mov	r2, r0
 800b05a:	2000      	movs	r0, #0
 800b05c:	f7f5 f974 	bl	8000348 <__aeabi_dsub>
 800b060:	ec41 0b10 	vmov	d0, r0, r1
 800b064:	b003      	add	sp, #12
 800b066:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b06a:	4b22      	ldr	r3, [pc, #136]	; (800b0f4 <__kernel_cos+0x184>)
 800b06c:	4920      	ldr	r1, [pc, #128]	; (800b0f0 <__kernel_cos+0x180>)
 800b06e:	4598      	cmp	r8, r3
 800b070:	bfcc      	ite	gt
 800b072:	4d21      	ldrgt	r5, [pc, #132]	; (800b0f8 <__kernel_cos+0x188>)
 800b074:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 800b078:	2400      	movs	r4, #0
 800b07a:	4622      	mov	r2, r4
 800b07c:	462b      	mov	r3, r5
 800b07e:	2000      	movs	r0, #0
 800b080:	f7f5 f962 	bl	8000348 <__aeabi_dsub>
 800b084:	4622      	mov	r2, r4
 800b086:	4680      	mov	r8, r0
 800b088:	4689      	mov	r9, r1
 800b08a:	462b      	mov	r3, r5
 800b08c:	4650      	mov	r0, sl
 800b08e:	4659      	mov	r1, fp
 800b090:	f7f5 f95a 	bl	8000348 <__aeabi_dsub>
 800b094:	4632      	mov	r2, r6
 800b096:	463b      	mov	r3, r7
 800b098:	f7f5 f956 	bl	8000348 <__aeabi_dsub>
 800b09c:	4602      	mov	r2, r0
 800b09e:	460b      	mov	r3, r1
 800b0a0:	4640      	mov	r0, r8
 800b0a2:	4649      	mov	r1, r9
 800b0a4:	e7da      	b.n	800b05c <__kernel_cos+0xec>
 800b0a6:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 800b0e0 <__kernel_cos+0x170>
 800b0aa:	e7db      	b.n	800b064 <__kernel_cos+0xf4>
 800b0ac:	f3af 8000 	nop.w
 800b0b0:	be8838d4 	.word	0xbe8838d4
 800b0b4:	bda8fae9 	.word	0xbda8fae9
 800b0b8:	bdb4b1c4 	.word	0xbdb4b1c4
 800b0bc:	3e21ee9e 	.word	0x3e21ee9e
 800b0c0:	809c52ad 	.word	0x809c52ad
 800b0c4:	3e927e4f 	.word	0x3e927e4f
 800b0c8:	19cb1590 	.word	0x19cb1590
 800b0cc:	3efa01a0 	.word	0x3efa01a0
 800b0d0:	16c15177 	.word	0x16c15177
 800b0d4:	3f56c16c 	.word	0x3f56c16c
 800b0d8:	5555554c 	.word	0x5555554c
 800b0dc:	3fa55555 	.word	0x3fa55555
 800b0e0:	00000000 	.word	0x00000000
 800b0e4:	3ff00000 	.word	0x3ff00000
 800b0e8:	3fe00000 	.word	0x3fe00000
 800b0ec:	3fd33332 	.word	0x3fd33332
 800b0f0:	3ff00000 	.word	0x3ff00000
 800b0f4:	3fe90000 	.word	0x3fe90000
 800b0f8:	3fd20000 	.word	0x3fd20000
 800b0fc:	00000000 	.word	0x00000000

0800b100 <__kernel_rem_pio2>:
 800b100:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b104:	ed2d 8b02 	vpush	{d8}
 800b108:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 800b10c:	f112 0f14 	cmn.w	r2, #20
 800b110:	9308      	str	r3, [sp, #32]
 800b112:	9101      	str	r1, [sp, #4]
 800b114:	4bc4      	ldr	r3, [pc, #784]	; (800b428 <__kernel_rem_pio2+0x328>)
 800b116:	99a6      	ldr	r1, [sp, #664]	; 0x298
 800b118:	900b      	str	r0, [sp, #44]	; 0x2c
 800b11a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800b11e:	9302      	str	r3, [sp, #8]
 800b120:	9b08      	ldr	r3, [sp, #32]
 800b122:	f103 33ff 	add.w	r3, r3, #4294967295
 800b126:	bfa8      	it	ge
 800b128:	1ed4      	subge	r4, r2, #3
 800b12a:	9306      	str	r3, [sp, #24]
 800b12c:	bfb2      	itee	lt
 800b12e:	2400      	movlt	r4, #0
 800b130:	2318      	movge	r3, #24
 800b132:	fb94 f4f3 	sdivge	r4, r4, r3
 800b136:	f06f 0317 	mvn.w	r3, #23
 800b13a:	fb04 3303 	mla	r3, r4, r3, r3
 800b13e:	eb03 0a02 	add.w	sl, r3, r2
 800b142:	9b02      	ldr	r3, [sp, #8]
 800b144:	9a06      	ldr	r2, [sp, #24]
 800b146:	ed9f 8bb4 	vldr	d8, [pc, #720]	; 800b418 <__kernel_rem_pio2+0x318>
 800b14a:	eb03 0802 	add.w	r8, r3, r2
 800b14e:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 800b150:	1aa7      	subs	r7, r4, r2
 800b152:	ae22      	add	r6, sp, #136	; 0x88
 800b154:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 800b158:	2500      	movs	r5, #0
 800b15a:	4545      	cmp	r5, r8
 800b15c:	dd13      	ble.n	800b186 <__kernel_rem_pio2+0x86>
 800b15e:	9b08      	ldr	r3, [sp, #32]
 800b160:	ed9f 8bad 	vldr	d8, [pc, #692]	; 800b418 <__kernel_rem_pio2+0x318>
 800b164:	aa22      	add	r2, sp, #136	; 0x88
 800b166:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 800b16a:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 800b16e:	f04f 0800 	mov.w	r8, #0
 800b172:	9b02      	ldr	r3, [sp, #8]
 800b174:	4598      	cmp	r8, r3
 800b176:	dc2f      	bgt.n	800b1d8 <__kernel_rem_pio2+0xd8>
 800b178:	ed8d 8b04 	vstr	d8, [sp, #16]
 800b17c:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
 800b180:	462f      	mov	r7, r5
 800b182:	2600      	movs	r6, #0
 800b184:	e01b      	b.n	800b1be <__kernel_rem_pio2+0xbe>
 800b186:	42ef      	cmn	r7, r5
 800b188:	d407      	bmi.n	800b19a <__kernel_rem_pio2+0x9a>
 800b18a:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800b18e:	f7f5 fa29 	bl	80005e4 <__aeabi_i2d>
 800b192:	e8e6 0102 	strd	r0, r1, [r6], #8
 800b196:	3501      	adds	r5, #1
 800b198:	e7df      	b.n	800b15a <__kernel_rem_pio2+0x5a>
 800b19a:	ec51 0b18 	vmov	r0, r1, d8
 800b19e:	e7f8      	b.n	800b192 <__kernel_rem_pio2+0x92>
 800b1a0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b1a4:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 800b1a8:	f7f5 fa86 	bl	80006b8 <__aeabi_dmul>
 800b1ac:	4602      	mov	r2, r0
 800b1ae:	460b      	mov	r3, r1
 800b1b0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b1b4:	f7f5 f8ca 	bl	800034c <__adddf3>
 800b1b8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800b1bc:	3601      	adds	r6, #1
 800b1be:	9b06      	ldr	r3, [sp, #24]
 800b1c0:	429e      	cmp	r6, r3
 800b1c2:	f1a7 0708 	sub.w	r7, r7, #8
 800b1c6:	ddeb      	ble.n	800b1a0 <__kernel_rem_pio2+0xa0>
 800b1c8:	ed9d 7b04 	vldr	d7, [sp, #16]
 800b1cc:	f108 0801 	add.w	r8, r8, #1
 800b1d0:	ecab 7b02 	vstmia	fp!, {d7}
 800b1d4:	3508      	adds	r5, #8
 800b1d6:	e7cc      	b.n	800b172 <__kernel_rem_pio2+0x72>
 800b1d8:	9b02      	ldr	r3, [sp, #8]
 800b1da:	aa0e      	add	r2, sp, #56	; 0x38
 800b1dc:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800b1e0:	930d      	str	r3, [sp, #52]	; 0x34
 800b1e2:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 800b1e4:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800b1e8:	9c02      	ldr	r4, [sp, #8]
 800b1ea:	930c      	str	r3, [sp, #48]	; 0x30
 800b1ec:	00e3      	lsls	r3, r4, #3
 800b1ee:	930a      	str	r3, [sp, #40]	; 0x28
 800b1f0:	ab9a      	add	r3, sp, #616	; 0x268
 800b1f2:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800b1f6:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 800b1fa:	f10d 0838 	add.w	r8, sp, #56	; 0x38
 800b1fe:	ab72      	add	r3, sp, #456	; 0x1c8
 800b200:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
 800b204:	46c3      	mov	fp, r8
 800b206:	46a1      	mov	r9, r4
 800b208:	f1b9 0f00 	cmp.w	r9, #0
 800b20c:	f1a5 0508 	sub.w	r5, r5, #8
 800b210:	dc77      	bgt.n	800b302 <__kernel_rem_pio2+0x202>
 800b212:	ec47 6b10 	vmov	d0, r6, r7
 800b216:	4650      	mov	r0, sl
 800b218:	f000 fc0a 	bl	800ba30 <scalbn>
 800b21c:	ec57 6b10 	vmov	r6, r7, d0
 800b220:	2200      	movs	r2, #0
 800b222:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 800b226:	ee10 0a10 	vmov	r0, s0
 800b22a:	4639      	mov	r1, r7
 800b22c:	f7f5 fa44 	bl	80006b8 <__aeabi_dmul>
 800b230:	ec41 0b10 	vmov	d0, r0, r1
 800b234:	f000 fb7c 	bl	800b930 <floor>
 800b238:	4b7c      	ldr	r3, [pc, #496]	; (800b42c <__kernel_rem_pio2+0x32c>)
 800b23a:	ec51 0b10 	vmov	r0, r1, d0
 800b23e:	2200      	movs	r2, #0
 800b240:	f7f5 fa3a 	bl	80006b8 <__aeabi_dmul>
 800b244:	4602      	mov	r2, r0
 800b246:	460b      	mov	r3, r1
 800b248:	4630      	mov	r0, r6
 800b24a:	4639      	mov	r1, r7
 800b24c:	f7f5 f87c 	bl	8000348 <__aeabi_dsub>
 800b250:	460f      	mov	r7, r1
 800b252:	4606      	mov	r6, r0
 800b254:	f7f5 fce0 	bl	8000c18 <__aeabi_d2iz>
 800b258:	9004      	str	r0, [sp, #16]
 800b25a:	f7f5 f9c3 	bl	80005e4 <__aeabi_i2d>
 800b25e:	4602      	mov	r2, r0
 800b260:	460b      	mov	r3, r1
 800b262:	4630      	mov	r0, r6
 800b264:	4639      	mov	r1, r7
 800b266:	f7f5 f86f 	bl	8000348 <__aeabi_dsub>
 800b26a:	f1ba 0f00 	cmp.w	sl, #0
 800b26e:	4606      	mov	r6, r0
 800b270:	460f      	mov	r7, r1
 800b272:	dd6d      	ble.n	800b350 <__kernel_rem_pio2+0x250>
 800b274:	1e62      	subs	r2, r4, #1
 800b276:	ab0e      	add	r3, sp, #56	; 0x38
 800b278:	9d04      	ldr	r5, [sp, #16]
 800b27a:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800b27e:	f1ca 0118 	rsb	r1, sl, #24
 800b282:	fa40 f301 	asr.w	r3, r0, r1
 800b286:	441d      	add	r5, r3
 800b288:	408b      	lsls	r3, r1
 800b28a:	1ac0      	subs	r0, r0, r3
 800b28c:	ab0e      	add	r3, sp, #56	; 0x38
 800b28e:	9504      	str	r5, [sp, #16]
 800b290:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 800b294:	f1ca 0317 	rsb	r3, sl, #23
 800b298:	fa40 fb03 	asr.w	fp, r0, r3
 800b29c:	f1bb 0f00 	cmp.w	fp, #0
 800b2a0:	dd65      	ble.n	800b36e <__kernel_rem_pio2+0x26e>
 800b2a2:	9b04      	ldr	r3, [sp, #16]
 800b2a4:	2200      	movs	r2, #0
 800b2a6:	3301      	adds	r3, #1
 800b2a8:	9304      	str	r3, [sp, #16]
 800b2aa:	4615      	mov	r5, r2
 800b2ac:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 800b2b0:	4294      	cmp	r4, r2
 800b2b2:	f300 809c 	bgt.w	800b3ee <__kernel_rem_pio2+0x2ee>
 800b2b6:	f1ba 0f00 	cmp.w	sl, #0
 800b2ba:	dd07      	ble.n	800b2cc <__kernel_rem_pio2+0x1cc>
 800b2bc:	f1ba 0f01 	cmp.w	sl, #1
 800b2c0:	f000 80c0 	beq.w	800b444 <__kernel_rem_pio2+0x344>
 800b2c4:	f1ba 0f02 	cmp.w	sl, #2
 800b2c8:	f000 80c6 	beq.w	800b458 <__kernel_rem_pio2+0x358>
 800b2cc:	f1bb 0f02 	cmp.w	fp, #2
 800b2d0:	d14d      	bne.n	800b36e <__kernel_rem_pio2+0x26e>
 800b2d2:	4632      	mov	r2, r6
 800b2d4:	463b      	mov	r3, r7
 800b2d6:	4956      	ldr	r1, [pc, #344]	; (800b430 <__kernel_rem_pio2+0x330>)
 800b2d8:	2000      	movs	r0, #0
 800b2da:	f7f5 f835 	bl	8000348 <__aeabi_dsub>
 800b2de:	4606      	mov	r6, r0
 800b2e0:	460f      	mov	r7, r1
 800b2e2:	2d00      	cmp	r5, #0
 800b2e4:	d043      	beq.n	800b36e <__kernel_rem_pio2+0x26e>
 800b2e6:	4650      	mov	r0, sl
 800b2e8:	ed9f 0b4d 	vldr	d0, [pc, #308]	; 800b420 <__kernel_rem_pio2+0x320>
 800b2ec:	f000 fba0 	bl	800ba30 <scalbn>
 800b2f0:	4630      	mov	r0, r6
 800b2f2:	4639      	mov	r1, r7
 800b2f4:	ec53 2b10 	vmov	r2, r3, d0
 800b2f8:	f7f5 f826 	bl	8000348 <__aeabi_dsub>
 800b2fc:	4606      	mov	r6, r0
 800b2fe:	460f      	mov	r7, r1
 800b300:	e035      	b.n	800b36e <__kernel_rem_pio2+0x26e>
 800b302:	4b4c      	ldr	r3, [pc, #304]	; (800b434 <__kernel_rem_pio2+0x334>)
 800b304:	2200      	movs	r2, #0
 800b306:	4630      	mov	r0, r6
 800b308:	4639      	mov	r1, r7
 800b30a:	f7f5 f9d5 	bl	80006b8 <__aeabi_dmul>
 800b30e:	f7f5 fc83 	bl	8000c18 <__aeabi_d2iz>
 800b312:	f7f5 f967 	bl	80005e4 <__aeabi_i2d>
 800b316:	4602      	mov	r2, r0
 800b318:	460b      	mov	r3, r1
 800b31a:	ec43 2b18 	vmov	d8, r2, r3
 800b31e:	4b46      	ldr	r3, [pc, #280]	; (800b438 <__kernel_rem_pio2+0x338>)
 800b320:	2200      	movs	r2, #0
 800b322:	f7f5 f9c9 	bl	80006b8 <__aeabi_dmul>
 800b326:	4602      	mov	r2, r0
 800b328:	460b      	mov	r3, r1
 800b32a:	4630      	mov	r0, r6
 800b32c:	4639      	mov	r1, r7
 800b32e:	f7f5 f80b 	bl	8000348 <__aeabi_dsub>
 800b332:	f7f5 fc71 	bl	8000c18 <__aeabi_d2iz>
 800b336:	e9d5 2300 	ldrd	r2, r3, [r5]
 800b33a:	f84b 0b04 	str.w	r0, [fp], #4
 800b33e:	ec51 0b18 	vmov	r0, r1, d8
 800b342:	f7f5 f803 	bl	800034c <__adddf3>
 800b346:	f109 39ff 	add.w	r9, r9, #4294967295
 800b34a:	4606      	mov	r6, r0
 800b34c:	460f      	mov	r7, r1
 800b34e:	e75b      	b.n	800b208 <__kernel_rem_pio2+0x108>
 800b350:	d106      	bne.n	800b360 <__kernel_rem_pio2+0x260>
 800b352:	1e63      	subs	r3, r4, #1
 800b354:	aa0e      	add	r2, sp, #56	; 0x38
 800b356:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800b35a:	ea4f 5be0 	mov.w	fp, r0, asr #23
 800b35e:	e79d      	b.n	800b29c <__kernel_rem_pio2+0x19c>
 800b360:	4b36      	ldr	r3, [pc, #216]	; (800b43c <__kernel_rem_pio2+0x33c>)
 800b362:	2200      	movs	r2, #0
 800b364:	f7f5 fc2e 	bl	8000bc4 <__aeabi_dcmpge>
 800b368:	2800      	cmp	r0, #0
 800b36a:	d13d      	bne.n	800b3e8 <__kernel_rem_pio2+0x2e8>
 800b36c:	4683      	mov	fp, r0
 800b36e:	2200      	movs	r2, #0
 800b370:	2300      	movs	r3, #0
 800b372:	4630      	mov	r0, r6
 800b374:	4639      	mov	r1, r7
 800b376:	f7f5 fc07 	bl	8000b88 <__aeabi_dcmpeq>
 800b37a:	2800      	cmp	r0, #0
 800b37c:	f000 80c0 	beq.w	800b500 <__kernel_rem_pio2+0x400>
 800b380:	1e65      	subs	r5, r4, #1
 800b382:	462b      	mov	r3, r5
 800b384:	2200      	movs	r2, #0
 800b386:	9902      	ldr	r1, [sp, #8]
 800b388:	428b      	cmp	r3, r1
 800b38a:	da6c      	bge.n	800b466 <__kernel_rem_pio2+0x366>
 800b38c:	2a00      	cmp	r2, #0
 800b38e:	f000 8089 	beq.w	800b4a4 <__kernel_rem_pio2+0x3a4>
 800b392:	ab0e      	add	r3, sp, #56	; 0x38
 800b394:	f1aa 0a18 	sub.w	sl, sl, #24
 800b398:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 800b39c:	2b00      	cmp	r3, #0
 800b39e:	f000 80ad 	beq.w	800b4fc <__kernel_rem_pio2+0x3fc>
 800b3a2:	4650      	mov	r0, sl
 800b3a4:	ed9f 0b1e 	vldr	d0, [pc, #120]	; 800b420 <__kernel_rem_pio2+0x320>
 800b3a8:	f000 fb42 	bl	800ba30 <scalbn>
 800b3ac:	ab9a      	add	r3, sp, #616	; 0x268
 800b3ae:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800b3b2:	ec57 6b10 	vmov	r6, r7, d0
 800b3b6:	00ec      	lsls	r4, r5, #3
 800b3b8:	f1a3 0898 	sub.w	r8, r3, #152	; 0x98
 800b3bc:	46aa      	mov	sl, r5
 800b3be:	f1ba 0f00 	cmp.w	sl, #0
 800b3c2:	f280 80d6 	bge.w	800b572 <__kernel_rem_pio2+0x472>
 800b3c6:	ed9f 8b14 	vldr	d8, [pc, #80]	; 800b418 <__kernel_rem_pio2+0x318>
 800b3ca:	462e      	mov	r6, r5
 800b3cc:	2e00      	cmp	r6, #0
 800b3ce:	f2c0 8104 	blt.w	800b5da <__kernel_rem_pio2+0x4da>
 800b3d2:	ab72      	add	r3, sp, #456	; 0x1c8
 800b3d4:	ed8d 8b06 	vstr	d8, [sp, #24]
 800b3d8:	f8df a064 	ldr.w	sl, [pc, #100]	; 800b440 <__kernel_rem_pio2+0x340>
 800b3dc:	eb03 09c6 	add.w	r9, r3, r6, lsl #3
 800b3e0:	f04f 0800 	mov.w	r8, #0
 800b3e4:	1baf      	subs	r7, r5, r6
 800b3e6:	e0ea      	b.n	800b5be <__kernel_rem_pio2+0x4be>
 800b3e8:	f04f 0b02 	mov.w	fp, #2
 800b3ec:	e759      	b.n	800b2a2 <__kernel_rem_pio2+0x1a2>
 800b3ee:	f8d8 3000 	ldr.w	r3, [r8]
 800b3f2:	b955      	cbnz	r5, 800b40a <__kernel_rem_pio2+0x30a>
 800b3f4:	b123      	cbz	r3, 800b400 <__kernel_rem_pio2+0x300>
 800b3f6:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 800b3fa:	f8c8 3000 	str.w	r3, [r8]
 800b3fe:	2301      	movs	r3, #1
 800b400:	3201      	adds	r2, #1
 800b402:	f108 0804 	add.w	r8, r8, #4
 800b406:	461d      	mov	r5, r3
 800b408:	e752      	b.n	800b2b0 <__kernel_rem_pio2+0x1b0>
 800b40a:	1acb      	subs	r3, r1, r3
 800b40c:	f8c8 3000 	str.w	r3, [r8]
 800b410:	462b      	mov	r3, r5
 800b412:	e7f5      	b.n	800b400 <__kernel_rem_pio2+0x300>
 800b414:	f3af 8000 	nop.w
	...
 800b424:	3ff00000 	.word	0x3ff00000
 800b428:	0800f048 	.word	0x0800f048
 800b42c:	40200000 	.word	0x40200000
 800b430:	3ff00000 	.word	0x3ff00000
 800b434:	3e700000 	.word	0x3e700000
 800b438:	41700000 	.word	0x41700000
 800b43c:	3fe00000 	.word	0x3fe00000
 800b440:	0800f008 	.word	0x0800f008
 800b444:	1e62      	subs	r2, r4, #1
 800b446:	ab0e      	add	r3, sp, #56	; 0x38
 800b448:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b44c:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800b450:	a90e      	add	r1, sp, #56	; 0x38
 800b452:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800b456:	e739      	b.n	800b2cc <__kernel_rem_pio2+0x1cc>
 800b458:	1e62      	subs	r2, r4, #1
 800b45a:	ab0e      	add	r3, sp, #56	; 0x38
 800b45c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b460:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800b464:	e7f4      	b.n	800b450 <__kernel_rem_pio2+0x350>
 800b466:	a90e      	add	r1, sp, #56	; 0x38
 800b468:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800b46c:	3b01      	subs	r3, #1
 800b46e:	430a      	orrs	r2, r1
 800b470:	e789      	b.n	800b386 <__kernel_rem_pio2+0x286>
 800b472:	3301      	adds	r3, #1
 800b474:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 800b478:	2900      	cmp	r1, #0
 800b47a:	d0fa      	beq.n	800b472 <__kernel_rem_pio2+0x372>
 800b47c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b47e:	f502 721a 	add.w	r2, r2, #616	; 0x268
 800b482:	446a      	add	r2, sp
 800b484:	3a98      	subs	r2, #152	; 0x98
 800b486:	920a      	str	r2, [sp, #40]	; 0x28
 800b488:	9a08      	ldr	r2, [sp, #32]
 800b48a:	18e3      	adds	r3, r4, r3
 800b48c:	18a5      	adds	r5, r4, r2
 800b48e:	aa22      	add	r2, sp, #136	; 0x88
 800b490:	f104 0801 	add.w	r8, r4, #1
 800b494:	eb02 05c5 	add.w	r5, r2, r5, lsl #3
 800b498:	9304      	str	r3, [sp, #16]
 800b49a:	9b04      	ldr	r3, [sp, #16]
 800b49c:	4543      	cmp	r3, r8
 800b49e:	da04      	bge.n	800b4aa <__kernel_rem_pio2+0x3aa>
 800b4a0:	461c      	mov	r4, r3
 800b4a2:	e6a3      	b.n	800b1ec <__kernel_rem_pio2+0xec>
 800b4a4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800b4a6:	2301      	movs	r3, #1
 800b4a8:	e7e4      	b.n	800b474 <__kernel_rem_pio2+0x374>
 800b4aa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b4ac:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 800b4b0:	f7f5 f898 	bl	80005e4 <__aeabi_i2d>
 800b4b4:	e8e5 0102 	strd	r0, r1, [r5], #8
 800b4b8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b4ba:	46ab      	mov	fp, r5
 800b4bc:	461c      	mov	r4, r3
 800b4be:	f04f 0900 	mov.w	r9, #0
 800b4c2:	2600      	movs	r6, #0
 800b4c4:	2700      	movs	r7, #0
 800b4c6:	9b06      	ldr	r3, [sp, #24]
 800b4c8:	4599      	cmp	r9, r3
 800b4ca:	dd06      	ble.n	800b4da <__kernel_rem_pio2+0x3da>
 800b4cc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b4ce:	e8e3 6702 	strd	r6, r7, [r3], #8
 800b4d2:	f108 0801 	add.w	r8, r8, #1
 800b4d6:	930a      	str	r3, [sp, #40]	; 0x28
 800b4d8:	e7df      	b.n	800b49a <__kernel_rem_pio2+0x39a>
 800b4da:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 800b4de:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 800b4e2:	f7f5 f8e9 	bl	80006b8 <__aeabi_dmul>
 800b4e6:	4602      	mov	r2, r0
 800b4e8:	460b      	mov	r3, r1
 800b4ea:	4630      	mov	r0, r6
 800b4ec:	4639      	mov	r1, r7
 800b4ee:	f7f4 ff2d 	bl	800034c <__adddf3>
 800b4f2:	f109 0901 	add.w	r9, r9, #1
 800b4f6:	4606      	mov	r6, r0
 800b4f8:	460f      	mov	r7, r1
 800b4fa:	e7e4      	b.n	800b4c6 <__kernel_rem_pio2+0x3c6>
 800b4fc:	3d01      	subs	r5, #1
 800b4fe:	e748      	b.n	800b392 <__kernel_rem_pio2+0x292>
 800b500:	ec47 6b10 	vmov	d0, r6, r7
 800b504:	f1ca 0000 	rsb	r0, sl, #0
 800b508:	f000 fa92 	bl	800ba30 <scalbn>
 800b50c:	ec57 6b10 	vmov	r6, r7, d0
 800b510:	4ba0      	ldr	r3, [pc, #640]	; (800b794 <__kernel_rem_pio2+0x694>)
 800b512:	ee10 0a10 	vmov	r0, s0
 800b516:	2200      	movs	r2, #0
 800b518:	4639      	mov	r1, r7
 800b51a:	f7f5 fb53 	bl	8000bc4 <__aeabi_dcmpge>
 800b51e:	b1f8      	cbz	r0, 800b560 <__kernel_rem_pio2+0x460>
 800b520:	4b9d      	ldr	r3, [pc, #628]	; (800b798 <__kernel_rem_pio2+0x698>)
 800b522:	2200      	movs	r2, #0
 800b524:	4630      	mov	r0, r6
 800b526:	4639      	mov	r1, r7
 800b528:	f7f5 f8c6 	bl	80006b8 <__aeabi_dmul>
 800b52c:	f7f5 fb74 	bl	8000c18 <__aeabi_d2iz>
 800b530:	4680      	mov	r8, r0
 800b532:	f7f5 f857 	bl	80005e4 <__aeabi_i2d>
 800b536:	4b97      	ldr	r3, [pc, #604]	; (800b794 <__kernel_rem_pio2+0x694>)
 800b538:	2200      	movs	r2, #0
 800b53a:	f7f5 f8bd 	bl	80006b8 <__aeabi_dmul>
 800b53e:	460b      	mov	r3, r1
 800b540:	4602      	mov	r2, r0
 800b542:	4639      	mov	r1, r7
 800b544:	4630      	mov	r0, r6
 800b546:	f7f4 feff 	bl	8000348 <__aeabi_dsub>
 800b54a:	f7f5 fb65 	bl	8000c18 <__aeabi_d2iz>
 800b54e:	1c65      	adds	r5, r4, #1
 800b550:	ab0e      	add	r3, sp, #56	; 0x38
 800b552:	f10a 0a18 	add.w	sl, sl, #24
 800b556:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800b55a:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 800b55e:	e720      	b.n	800b3a2 <__kernel_rem_pio2+0x2a2>
 800b560:	4630      	mov	r0, r6
 800b562:	4639      	mov	r1, r7
 800b564:	f7f5 fb58 	bl	8000c18 <__aeabi_d2iz>
 800b568:	ab0e      	add	r3, sp, #56	; 0x38
 800b56a:	4625      	mov	r5, r4
 800b56c:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800b570:	e717      	b.n	800b3a2 <__kernel_rem_pio2+0x2a2>
 800b572:	ab0e      	add	r3, sp, #56	; 0x38
 800b574:	f853 002a 	ldr.w	r0, [r3, sl, lsl #2]
 800b578:	f7f5 f834 	bl	80005e4 <__aeabi_i2d>
 800b57c:	4632      	mov	r2, r6
 800b57e:	463b      	mov	r3, r7
 800b580:	f7f5 f89a 	bl	80006b8 <__aeabi_dmul>
 800b584:	4b84      	ldr	r3, [pc, #528]	; (800b798 <__kernel_rem_pio2+0x698>)
 800b586:	e968 0102 	strd	r0, r1, [r8, #-8]!
 800b58a:	2200      	movs	r2, #0
 800b58c:	4630      	mov	r0, r6
 800b58e:	4639      	mov	r1, r7
 800b590:	f7f5 f892 	bl	80006b8 <__aeabi_dmul>
 800b594:	f10a 3aff 	add.w	sl, sl, #4294967295
 800b598:	4606      	mov	r6, r0
 800b59a:	460f      	mov	r7, r1
 800b59c:	e70f      	b.n	800b3be <__kernel_rem_pio2+0x2be>
 800b59e:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 800b5a2:	e8fa 0102 	ldrd	r0, r1, [sl], #8
 800b5a6:	f7f5 f887 	bl	80006b8 <__aeabi_dmul>
 800b5aa:	4602      	mov	r2, r0
 800b5ac:	460b      	mov	r3, r1
 800b5ae:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b5b2:	f7f4 fecb 	bl	800034c <__adddf3>
 800b5b6:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800b5ba:	f108 0801 	add.w	r8, r8, #1
 800b5be:	9b02      	ldr	r3, [sp, #8]
 800b5c0:	4598      	cmp	r8, r3
 800b5c2:	dc01      	bgt.n	800b5c8 <__kernel_rem_pio2+0x4c8>
 800b5c4:	45b8      	cmp	r8, r7
 800b5c6:	ddea      	ble.n	800b59e <__kernel_rem_pio2+0x49e>
 800b5c8:	ed9d 7b06 	vldr	d7, [sp, #24]
 800b5cc:	ab4a      	add	r3, sp, #296	; 0x128
 800b5ce:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 800b5d2:	ed87 7b00 	vstr	d7, [r7]
 800b5d6:	3e01      	subs	r6, #1
 800b5d8:	e6f8      	b.n	800b3cc <__kernel_rem_pio2+0x2cc>
 800b5da:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 800b5dc:	2b02      	cmp	r3, #2
 800b5de:	dc0b      	bgt.n	800b5f8 <__kernel_rem_pio2+0x4f8>
 800b5e0:	2b00      	cmp	r3, #0
 800b5e2:	dc35      	bgt.n	800b650 <__kernel_rem_pio2+0x550>
 800b5e4:	d059      	beq.n	800b69a <__kernel_rem_pio2+0x59a>
 800b5e6:	9b04      	ldr	r3, [sp, #16]
 800b5e8:	f003 0007 	and.w	r0, r3, #7
 800b5ec:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 800b5f0:	ecbd 8b02 	vpop	{d8}
 800b5f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b5f8:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 800b5fa:	2b03      	cmp	r3, #3
 800b5fc:	d1f3      	bne.n	800b5e6 <__kernel_rem_pio2+0x4e6>
 800b5fe:	ab4a      	add	r3, sp, #296	; 0x128
 800b600:	4423      	add	r3, r4
 800b602:	9306      	str	r3, [sp, #24]
 800b604:	461c      	mov	r4, r3
 800b606:	469a      	mov	sl, r3
 800b608:	9502      	str	r5, [sp, #8]
 800b60a:	9b02      	ldr	r3, [sp, #8]
 800b60c:	2b00      	cmp	r3, #0
 800b60e:	f1aa 0a08 	sub.w	sl, sl, #8
 800b612:	dc6b      	bgt.n	800b6ec <__kernel_rem_pio2+0x5ec>
 800b614:	46aa      	mov	sl, r5
 800b616:	f1ba 0f01 	cmp.w	sl, #1
 800b61a:	f1a4 0408 	sub.w	r4, r4, #8
 800b61e:	f300 8085 	bgt.w	800b72c <__kernel_rem_pio2+0x62c>
 800b622:	9c06      	ldr	r4, [sp, #24]
 800b624:	2000      	movs	r0, #0
 800b626:	3408      	adds	r4, #8
 800b628:	2100      	movs	r1, #0
 800b62a:	2d01      	cmp	r5, #1
 800b62c:	f300 809d 	bgt.w	800b76a <__kernel_rem_pio2+0x66a>
 800b630:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	; 0x128
 800b634:	e9dd 784c 	ldrd	r7, r8, [sp, #304]	; 0x130
 800b638:	f1bb 0f00 	cmp.w	fp, #0
 800b63c:	f040 809b 	bne.w	800b776 <__kernel_rem_pio2+0x676>
 800b640:	9b01      	ldr	r3, [sp, #4]
 800b642:	e9c3 5600 	strd	r5, r6, [r3]
 800b646:	e9c3 7802 	strd	r7, r8, [r3, #8]
 800b64a:	e9c3 0104 	strd	r0, r1, [r3, #16]
 800b64e:	e7ca      	b.n	800b5e6 <__kernel_rem_pio2+0x4e6>
 800b650:	3408      	adds	r4, #8
 800b652:	ab4a      	add	r3, sp, #296	; 0x128
 800b654:	441c      	add	r4, r3
 800b656:	462e      	mov	r6, r5
 800b658:	2000      	movs	r0, #0
 800b65a:	2100      	movs	r1, #0
 800b65c:	2e00      	cmp	r6, #0
 800b65e:	da36      	bge.n	800b6ce <__kernel_rem_pio2+0x5ce>
 800b660:	f1bb 0f00 	cmp.w	fp, #0
 800b664:	d039      	beq.n	800b6da <__kernel_rem_pio2+0x5da>
 800b666:	4602      	mov	r2, r0
 800b668:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b66c:	9c01      	ldr	r4, [sp, #4]
 800b66e:	e9c4 2300 	strd	r2, r3, [r4]
 800b672:	4602      	mov	r2, r0
 800b674:	460b      	mov	r3, r1
 800b676:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 800b67a:	f7f4 fe65 	bl	8000348 <__aeabi_dsub>
 800b67e:	ae4c      	add	r6, sp, #304	; 0x130
 800b680:	2401      	movs	r4, #1
 800b682:	42a5      	cmp	r5, r4
 800b684:	da2c      	bge.n	800b6e0 <__kernel_rem_pio2+0x5e0>
 800b686:	f1bb 0f00 	cmp.w	fp, #0
 800b68a:	d002      	beq.n	800b692 <__kernel_rem_pio2+0x592>
 800b68c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b690:	4619      	mov	r1, r3
 800b692:	9b01      	ldr	r3, [sp, #4]
 800b694:	e9c3 0102 	strd	r0, r1, [r3, #8]
 800b698:	e7a5      	b.n	800b5e6 <__kernel_rem_pio2+0x4e6>
 800b69a:	f504 731a 	add.w	r3, r4, #616	; 0x268
 800b69e:	eb0d 0403 	add.w	r4, sp, r3
 800b6a2:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 800b6a6:	2000      	movs	r0, #0
 800b6a8:	2100      	movs	r1, #0
 800b6aa:	2d00      	cmp	r5, #0
 800b6ac:	da09      	bge.n	800b6c2 <__kernel_rem_pio2+0x5c2>
 800b6ae:	f1bb 0f00 	cmp.w	fp, #0
 800b6b2:	d002      	beq.n	800b6ba <__kernel_rem_pio2+0x5ba>
 800b6b4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b6b8:	4619      	mov	r1, r3
 800b6ba:	9b01      	ldr	r3, [sp, #4]
 800b6bc:	e9c3 0100 	strd	r0, r1, [r3]
 800b6c0:	e791      	b.n	800b5e6 <__kernel_rem_pio2+0x4e6>
 800b6c2:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800b6c6:	f7f4 fe41 	bl	800034c <__adddf3>
 800b6ca:	3d01      	subs	r5, #1
 800b6cc:	e7ed      	b.n	800b6aa <__kernel_rem_pio2+0x5aa>
 800b6ce:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800b6d2:	f7f4 fe3b 	bl	800034c <__adddf3>
 800b6d6:	3e01      	subs	r6, #1
 800b6d8:	e7c0      	b.n	800b65c <__kernel_rem_pio2+0x55c>
 800b6da:	4602      	mov	r2, r0
 800b6dc:	460b      	mov	r3, r1
 800b6de:	e7c5      	b.n	800b66c <__kernel_rem_pio2+0x56c>
 800b6e0:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 800b6e4:	f7f4 fe32 	bl	800034c <__adddf3>
 800b6e8:	3401      	adds	r4, #1
 800b6ea:	e7ca      	b.n	800b682 <__kernel_rem_pio2+0x582>
 800b6ec:	e9da 8900 	ldrd	r8, r9, [sl]
 800b6f0:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 800b6f4:	9b02      	ldr	r3, [sp, #8]
 800b6f6:	3b01      	subs	r3, #1
 800b6f8:	9302      	str	r3, [sp, #8]
 800b6fa:	4632      	mov	r2, r6
 800b6fc:	463b      	mov	r3, r7
 800b6fe:	4640      	mov	r0, r8
 800b700:	4649      	mov	r1, r9
 800b702:	f7f4 fe23 	bl	800034c <__adddf3>
 800b706:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800b70a:	4602      	mov	r2, r0
 800b70c:	460b      	mov	r3, r1
 800b70e:	4640      	mov	r0, r8
 800b710:	4649      	mov	r1, r9
 800b712:	f7f4 fe19 	bl	8000348 <__aeabi_dsub>
 800b716:	4632      	mov	r2, r6
 800b718:	463b      	mov	r3, r7
 800b71a:	f7f4 fe17 	bl	800034c <__adddf3>
 800b71e:	ed9d 7b08 	vldr	d7, [sp, #32]
 800b722:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800b726:	ed8a 7b00 	vstr	d7, [sl]
 800b72a:	e76e      	b.n	800b60a <__kernel_rem_pio2+0x50a>
 800b72c:	e9d4 8900 	ldrd	r8, r9, [r4]
 800b730:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
 800b734:	4640      	mov	r0, r8
 800b736:	4632      	mov	r2, r6
 800b738:	463b      	mov	r3, r7
 800b73a:	4649      	mov	r1, r9
 800b73c:	f7f4 fe06 	bl	800034c <__adddf3>
 800b740:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b744:	4602      	mov	r2, r0
 800b746:	460b      	mov	r3, r1
 800b748:	4640      	mov	r0, r8
 800b74a:	4649      	mov	r1, r9
 800b74c:	f7f4 fdfc 	bl	8000348 <__aeabi_dsub>
 800b750:	4632      	mov	r2, r6
 800b752:	463b      	mov	r3, r7
 800b754:	f7f4 fdfa 	bl	800034c <__adddf3>
 800b758:	ed9d 7b02 	vldr	d7, [sp, #8]
 800b75c:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800b760:	ed84 7b00 	vstr	d7, [r4]
 800b764:	f10a 3aff 	add.w	sl, sl, #4294967295
 800b768:	e755      	b.n	800b616 <__kernel_rem_pio2+0x516>
 800b76a:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800b76e:	f7f4 fded 	bl	800034c <__adddf3>
 800b772:	3d01      	subs	r5, #1
 800b774:	e759      	b.n	800b62a <__kernel_rem_pio2+0x52a>
 800b776:	9b01      	ldr	r3, [sp, #4]
 800b778:	9a01      	ldr	r2, [sp, #4]
 800b77a:	601d      	str	r5, [r3, #0]
 800b77c:	f106 4400 	add.w	r4, r6, #2147483648	; 0x80000000
 800b780:	605c      	str	r4, [r3, #4]
 800b782:	609f      	str	r7, [r3, #8]
 800b784:	f108 4300 	add.w	r3, r8, #2147483648	; 0x80000000
 800b788:	60d3      	str	r3, [r2, #12]
 800b78a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b78e:	6110      	str	r0, [r2, #16]
 800b790:	6153      	str	r3, [r2, #20]
 800b792:	e728      	b.n	800b5e6 <__kernel_rem_pio2+0x4e6>
 800b794:	41700000 	.word	0x41700000
 800b798:	3e700000 	.word	0x3e700000
 800b79c:	00000000 	.word	0x00000000

0800b7a0 <__kernel_sin>:
 800b7a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b7a4:	ed2d 8b04 	vpush	{d8-d9}
 800b7a8:	eeb0 8a41 	vmov.f32	s16, s2
 800b7ac:	eef0 8a61 	vmov.f32	s17, s3
 800b7b0:	ec55 4b10 	vmov	r4, r5, d0
 800b7b4:	b083      	sub	sp, #12
 800b7b6:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800b7ba:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 800b7be:	9001      	str	r0, [sp, #4]
 800b7c0:	da06      	bge.n	800b7d0 <__kernel_sin+0x30>
 800b7c2:	ee10 0a10 	vmov	r0, s0
 800b7c6:	4629      	mov	r1, r5
 800b7c8:	f7f5 fa26 	bl	8000c18 <__aeabi_d2iz>
 800b7cc:	2800      	cmp	r0, #0
 800b7ce:	d051      	beq.n	800b874 <__kernel_sin+0xd4>
 800b7d0:	4622      	mov	r2, r4
 800b7d2:	462b      	mov	r3, r5
 800b7d4:	4620      	mov	r0, r4
 800b7d6:	4629      	mov	r1, r5
 800b7d8:	f7f4 ff6e 	bl	80006b8 <__aeabi_dmul>
 800b7dc:	4682      	mov	sl, r0
 800b7de:	468b      	mov	fp, r1
 800b7e0:	4602      	mov	r2, r0
 800b7e2:	460b      	mov	r3, r1
 800b7e4:	4620      	mov	r0, r4
 800b7e6:	4629      	mov	r1, r5
 800b7e8:	f7f4 ff66 	bl	80006b8 <__aeabi_dmul>
 800b7ec:	a341      	add	r3, pc, #260	; (adr r3, 800b8f4 <__kernel_sin+0x154>)
 800b7ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b7f2:	4680      	mov	r8, r0
 800b7f4:	4689      	mov	r9, r1
 800b7f6:	4650      	mov	r0, sl
 800b7f8:	4659      	mov	r1, fp
 800b7fa:	f7f4 ff5d 	bl	80006b8 <__aeabi_dmul>
 800b7fe:	a33f      	add	r3, pc, #252	; (adr r3, 800b8fc <__kernel_sin+0x15c>)
 800b800:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b804:	f7f4 fda0 	bl	8000348 <__aeabi_dsub>
 800b808:	4652      	mov	r2, sl
 800b80a:	465b      	mov	r3, fp
 800b80c:	f7f4 ff54 	bl	80006b8 <__aeabi_dmul>
 800b810:	a33c      	add	r3, pc, #240	; (adr r3, 800b904 <__kernel_sin+0x164>)
 800b812:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b816:	f7f4 fd99 	bl	800034c <__adddf3>
 800b81a:	4652      	mov	r2, sl
 800b81c:	465b      	mov	r3, fp
 800b81e:	f7f4 ff4b 	bl	80006b8 <__aeabi_dmul>
 800b822:	a33a      	add	r3, pc, #232	; (adr r3, 800b90c <__kernel_sin+0x16c>)
 800b824:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b828:	f7f4 fd8e 	bl	8000348 <__aeabi_dsub>
 800b82c:	4652      	mov	r2, sl
 800b82e:	465b      	mov	r3, fp
 800b830:	f7f4 ff42 	bl	80006b8 <__aeabi_dmul>
 800b834:	a337      	add	r3, pc, #220	; (adr r3, 800b914 <__kernel_sin+0x174>)
 800b836:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b83a:	f7f4 fd87 	bl	800034c <__adddf3>
 800b83e:	9b01      	ldr	r3, [sp, #4]
 800b840:	4606      	mov	r6, r0
 800b842:	460f      	mov	r7, r1
 800b844:	b9eb      	cbnz	r3, 800b882 <__kernel_sin+0xe2>
 800b846:	4602      	mov	r2, r0
 800b848:	460b      	mov	r3, r1
 800b84a:	4650      	mov	r0, sl
 800b84c:	4659      	mov	r1, fp
 800b84e:	f7f4 ff33 	bl	80006b8 <__aeabi_dmul>
 800b852:	a325      	add	r3, pc, #148	; (adr r3, 800b8e8 <__kernel_sin+0x148>)
 800b854:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b858:	f7f4 fd76 	bl	8000348 <__aeabi_dsub>
 800b85c:	4642      	mov	r2, r8
 800b85e:	464b      	mov	r3, r9
 800b860:	f7f4 ff2a 	bl	80006b8 <__aeabi_dmul>
 800b864:	4602      	mov	r2, r0
 800b866:	460b      	mov	r3, r1
 800b868:	4620      	mov	r0, r4
 800b86a:	4629      	mov	r1, r5
 800b86c:	f7f4 fd6e 	bl	800034c <__adddf3>
 800b870:	4604      	mov	r4, r0
 800b872:	460d      	mov	r5, r1
 800b874:	ec45 4b10 	vmov	d0, r4, r5
 800b878:	b003      	add	sp, #12
 800b87a:	ecbd 8b04 	vpop	{d8-d9}
 800b87e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b882:	4b1b      	ldr	r3, [pc, #108]	; (800b8f0 <__kernel_sin+0x150>)
 800b884:	ec51 0b18 	vmov	r0, r1, d8
 800b888:	2200      	movs	r2, #0
 800b88a:	f7f4 ff15 	bl	80006b8 <__aeabi_dmul>
 800b88e:	4632      	mov	r2, r6
 800b890:	ec41 0b19 	vmov	d9, r0, r1
 800b894:	463b      	mov	r3, r7
 800b896:	4640      	mov	r0, r8
 800b898:	4649      	mov	r1, r9
 800b89a:	f7f4 ff0d 	bl	80006b8 <__aeabi_dmul>
 800b89e:	4602      	mov	r2, r0
 800b8a0:	460b      	mov	r3, r1
 800b8a2:	ec51 0b19 	vmov	r0, r1, d9
 800b8a6:	f7f4 fd4f 	bl	8000348 <__aeabi_dsub>
 800b8aa:	4652      	mov	r2, sl
 800b8ac:	465b      	mov	r3, fp
 800b8ae:	f7f4 ff03 	bl	80006b8 <__aeabi_dmul>
 800b8b2:	ec53 2b18 	vmov	r2, r3, d8
 800b8b6:	f7f4 fd47 	bl	8000348 <__aeabi_dsub>
 800b8ba:	a30b      	add	r3, pc, #44	; (adr r3, 800b8e8 <__kernel_sin+0x148>)
 800b8bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b8c0:	4606      	mov	r6, r0
 800b8c2:	460f      	mov	r7, r1
 800b8c4:	4640      	mov	r0, r8
 800b8c6:	4649      	mov	r1, r9
 800b8c8:	f7f4 fef6 	bl	80006b8 <__aeabi_dmul>
 800b8cc:	4602      	mov	r2, r0
 800b8ce:	460b      	mov	r3, r1
 800b8d0:	4630      	mov	r0, r6
 800b8d2:	4639      	mov	r1, r7
 800b8d4:	f7f4 fd3a 	bl	800034c <__adddf3>
 800b8d8:	4602      	mov	r2, r0
 800b8da:	460b      	mov	r3, r1
 800b8dc:	4620      	mov	r0, r4
 800b8de:	4629      	mov	r1, r5
 800b8e0:	f7f4 fd32 	bl	8000348 <__aeabi_dsub>
 800b8e4:	e7c4      	b.n	800b870 <__kernel_sin+0xd0>
 800b8e6:	bf00      	nop
 800b8e8:	55555549 	.word	0x55555549
 800b8ec:	3fc55555 	.word	0x3fc55555
 800b8f0:	3fe00000 	.word	0x3fe00000
 800b8f4:	5acfd57c 	.word	0x5acfd57c
 800b8f8:	3de5d93a 	.word	0x3de5d93a
 800b8fc:	8a2b9ceb 	.word	0x8a2b9ceb
 800b900:	3e5ae5e6 	.word	0x3e5ae5e6
 800b904:	57b1fe7d 	.word	0x57b1fe7d
 800b908:	3ec71de3 	.word	0x3ec71de3
 800b90c:	19c161d5 	.word	0x19c161d5
 800b910:	3f2a01a0 	.word	0x3f2a01a0
 800b914:	1110f8a6 	.word	0x1110f8a6
 800b918:	3f811111 	.word	0x3f811111

0800b91c <fabs>:
 800b91c:	ec51 0b10 	vmov	r0, r1, d0
 800b920:	ee10 2a10 	vmov	r2, s0
 800b924:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800b928:	ec43 2b10 	vmov	d0, r2, r3
 800b92c:	4770      	bx	lr
	...

0800b930 <floor>:
 800b930:	ec51 0b10 	vmov	r0, r1, d0
 800b934:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b938:	f3c1 570a 	ubfx	r7, r1, #20, #11
 800b93c:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 800b940:	2e13      	cmp	r6, #19
 800b942:	ee10 5a10 	vmov	r5, s0
 800b946:	ee10 8a10 	vmov	r8, s0
 800b94a:	460c      	mov	r4, r1
 800b94c:	dc32      	bgt.n	800b9b4 <floor+0x84>
 800b94e:	2e00      	cmp	r6, #0
 800b950:	da14      	bge.n	800b97c <floor+0x4c>
 800b952:	a333      	add	r3, pc, #204	; (adr r3, 800ba20 <floor+0xf0>)
 800b954:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b958:	f7f4 fcf8 	bl	800034c <__adddf3>
 800b95c:	2200      	movs	r2, #0
 800b95e:	2300      	movs	r3, #0
 800b960:	f7f5 f93a 	bl	8000bd8 <__aeabi_dcmpgt>
 800b964:	b138      	cbz	r0, 800b976 <floor+0x46>
 800b966:	2c00      	cmp	r4, #0
 800b968:	da57      	bge.n	800ba1a <floor+0xea>
 800b96a:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800b96e:	431d      	orrs	r5, r3
 800b970:	d001      	beq.n	800b976 <floor+0x46>
 800b972:	4c2d      	ldr	r4, [pc, #180]	; (800ba28 <floor+0xf8>)
 800b974:	2500      	movs	r5, #0
 800b976:	4621      	mov	r1, r4
 800b978:	4628      	mov	r0, r5
 800b97a:	e025      	b.n	800b9c8 <floor+0x98>
 800b97c:	4f2b      	ldr	r7, [pc, #172]	; (800ba2c <floor+0xfc>)
 800b97e:	4137      	asrs	r7, r6
 800b980:	ea01 0307 	and.w	r3, r1, r7
 800b984:	4303      	orrs	r3, r0
 800b986:	d01f      	beq.n	800b9c8 <floor+0x98>
 800b988:	a325      	add	r3, pc, #148	; (adr r3, 800ba20 <floor+0xf0>)
 800b98a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b98e:	f7f4 fcdd 	bl	800034c <__adddf3>
 800b992:	2200      	movs	r2, #0
 800b994:	2300      	movs	r3, #0
 800b996:	f7f5 f91f 	bl	8000bd8 <__aeabi_dcmpgt>
 800b99a:	2800      	cmp	r0, #0
 800b99c:	d0eb      	beq.n	800b976 <floor+0x46>
 800b99e:	2c00      	cmp	r4, #0
 800b9a0:	bfbe      	ittt	lt
 800b9a2:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 800b9a6:	fa43 f606 	asrlt.w	r6, r3, r6
 800b9aa:	19a4      	addlt	r4, r4, r6
 800b9ac:	ea24 0407 	bic.w	r4, r4, r7
 800b9b0:	2500      	movs	r5, #0
 800b9b2:	e7e0      	b.n	800b976 <floor+0x46>
 800b9b4:	2e33      	cmp	r6, #51	; 0x33
 800b9b6:	dd0b      	ble.n	800b9d0 <floor+0xa0>
 800b9b8:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800b9bc:	d104      	bne.n	800b9c8 <floor+0x98>
 800b9be:	ee10 2a10 	vmov	r2, s0
 800b9c2:	460b      	mov	r3, r1
 800b9c4:	f7f4 fcc2 	bl	800034c <__adddf3>
 800b9c8:	ec41 0b10 	vmov	d0, r0, r1
 800b9cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b9d0:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 800b9d4:	f04f 33ff 	mov.w	r3, #4294967295
 800b9d8:	fa23 f707 	lsr.w	r7, r3, r7
 800b9dc:	4207      	tst	r7, r0
 800b9de:	d0f3      	beq.n	800b9c8 <floor+0x98>
 800b9e0:	a30f      	add	r3, pc, #60	; (adr r3, 800ba20 <floor+0xf0>)
 800b9e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b9e6:	f7f4 fcb1 	bl	800034c <__adddf3>
 800b9ea:	2200      	movs	r2, #0
 800b9ec:	2300      	movs	r3, #0
 800b9ee:	f7f5 f8f3 	bl	8000bd8 <__aeabi_dcmpgt>
 800b9f2:	2800      	cmp	r0, #0
 800b9f4:	d0bf      	beq.n	800b976 <floor+0x46>
 800b9f6:	2c00      	cmp	r4, #0
 800b9f8:	da02      	bge.n	800ba00 <floor+0xd0>
 800b9fa:	2e14      	cmp	r6, #20
 800b9fc:	d103      	bne.n	800ba06 <floor+0xd6>
 800b9fe:	3401      	adds	r4, #1
 800ba00:	ea25 0507 	bic.w	r5, r5, r7
 800ba04:	e7b7      	b.n	800b976 <floor+0x46>
 800ba06:	2301      	movs	r3, #1
 800ba08:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800ba0c:	fa03 f606 	lsl.w	r6, r3, r6
 800ba10:	4435      	add	r5, r6
 800ba12:	4545      	cmp	r5, r8
 800ba14:	bf38      	it	cc
 800ba16:	18e4      	addcc	r4, r4, r3
 800ba18:	e7f2      	b.n	800ba00 <floor+0xd0>
 800ba1a:	2500      	movs	r5, #0
 800ba1c:	462c      	mov	r4, r5
 800ba1e:	e7aa      	b.n	800b976 <floor+0x46>
 800ba20:	8800759c 	.word	0x8800759c
 800ba24:	7e37e43c 	.word	0x7e37e43c
 800ba28:	bff00000 	.word	0xbff00000
 800ba2c:	000fffff 	.word	0x000fffff

0800ba30 <scalbn>:
 800ba30:	b570      	push	{r4, r5, r6, lr}
 800ba32:	ec55 4b10 	vmov	r4, r5, d0
 800ba36:	f3c5 520a 	ubfx	r2, r5, #20, #11
 800ba3a:	4606      	mov	r6, r0
 800ba3c:	462b      	mov	r3, r5
 800ba3e:	b99a      	cbnz	r2, 800ba68 <scalbn+0x38>
 800ba40:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800ba44:	4323      	orrs	r3, r4
 800ba46:	d036      	beq.n	800bab6 <scalbn+0x86>
 800ba48:	4b39      	ldr	r3, [pc, #228]	; (800bb30 <scalbn+0x100>)
 800ba4a:	4629      	mov	r1, r5
 800ba4c:	ee10 0a10 	vmov	r0, s0
 800ba50:	2200      	movs	r2, #0
 800ba52:	f7f4 fe31 	bl	80006b8 <__aeabi_dmul>
 800ba56:	4b37      	ldr	r3, [pc, #220]	; (800bb34 <scalbn+0x104>)
 800ba58:	429e      	cmp	r6, r3
 800ba5a:	4604      	mov	r4, r0
 800ba5c:	460d      	mov	r5, r1
 800ba5e:	da10      	bge.n	800ba82 <scalbn+0x52>
 800ba60:	a32b      	add	r3, pc, #172	; (adr r3, 800bb10 <scalbn+0xe0>)
 800ba62:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba66:	e03a      	b.n	800bade <scalbn+0xae>
 800ba68:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800ba6c:	428a      	cmp	r2, r1
 800ba6e:	d10c      	bne.n	800ba8a <scalbn+0x5a>
 800ba70:	ee10 2a10 	vmov	r2, s0
 800ba74:	4620      	mov	r0, r4
 800ba76:	4629      	mov	r1, r5
 800ba78:	f7f4 fc68 	bl	800034c <__adddf3>
 800ba7c:	4604      	mov	r4, r0
 800ba7e:	460d      	mov	r5, r1
 800ba80:	e019      	b.n	800bab6 <scalbn+0x86>
 800ba82:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800ba86:	460b      	mov	r3, r1
 800ba88:	3a36      	subs	r2, #54	; 0x36
 800ba8a:	4432      	add	r2, r6
 800ba8c:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800ba90:	428a      	cmp	r2, r1
 800ba92:	dd08      	ble.n	800baa6 <scalbn+0x76>
 800ba94:	2d00      	cmp	r5, #0
 800ba96:	a120      	add	r1, pc, #128	; (adr r1, 800bb18 <scalbn+0xe8>)
 800ba98:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ba9c:	da1c      	bge.n	800bad8 <scalbn+0xa8>
 800ba9e:	a120      	add	r1, pc, #128	; (adr r1, 800bb20 <scalbn+0xf0>)
 800baa0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800baa4:	e018      	b.n	800bad8 <scalbn+0xa8>
 800baa6:	2a00      	cmp	r2, #0
 800baa8:	dd08      	ble.n	800babc <scalbn+0x8c>
 800baaa:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800baae:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800bab2:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800bab6:	ec45 4b10 	vmov	d0, r4, r5
 800baba:	bd70      	pop	{r4, r5, r6, pc}
 800babc:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800bac0:	da19      	bge.n	800baf6 <scalbn+0xc6>
 800bac2:	f24c 3350 	movw	r3, #50000	; 0xc350
 800bac6:	429e      	cmp	r6, r3
 800bac8:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 800bacc:	dd0a      	ble.n	800bae4 <scalbn+0xb4>
 800bace:	a112      	add	r1, pc, #72	; (adr r1, 800bb18 <scalbn+0xe8>)
 800bad0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bad4:	2b00      	cmp	r3, #0
 800bad6:	d1e2      	bne.n	800ba9e <scalbn+0x6e>
 800bad8:	a30f      	add	r3, pc, #60	; (adr r3, 800bb18 <scalbn+0xe8>)
 800bada:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bade:	f7f4 fdeb 	bl	80006b8 <__aeabi_dmul>
 800bae2:	e7cb      	b.n	800ba7c <scalbn+0x4c>
 800bae4:	a10a      	add	r1, pc, #40	; (adr r1, 800bb10 <scalbn+0xe0>)
 800bae6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800baea:	2b00      	cmp	r3, #0
 800baec:	d0b8      	beq.n	800ba60 <scalbn+0x30>
 800baee:	a10e      	add	r1, pc, #56	; (adr r1, 800bb28 <scalbn+0xf8>)
 800baf0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800baf4:	e7b4      	b.n	800ba60 <scalbn+0x30>
 800baf6:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800bafa:	3236      	adds	r2, #54	; 0x36
 800bafc:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800bb00:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800bb04:	4620      	mov	r0, r4
 800bb06:	4b0c      	ldr	r3, [pc, #48]	; (800bb38 <scalbn+0x108>)
 800bb08:	2200      	movs	r2, #0
 800bb0a:	e7e8      	b.n	800bade <scalbn+0xae>
 800bb0c:	f3af 8000 	nop.w
 800bb10:	c2f8f359 	.word	0xc2f8f359
 800bb14:	01a56e1f 	.word	0x01a56e1f
 800bb18:	8800759c 	.word	0x8800759c
 800bb1c:	7e37e43c 	.word	0x7e37e43c
 800bb20:	8800759c 	.word	0x8800759c
 800bb24:	fe37e43c 	.word	0xfe37e43c
 800bb28:	c2f8f359 	.word	0xc2f8f359
 800bb2c:	81a56e1f 	.word	0x81a56e1f
 800bb30:	43500000 	.word	0x43500000
 800bb34:	ffff3cb0 	.word	0xffff3cb0
 800bb38:	3c900000 	.word	0x3c900000

0800bb3c <_init>:
 800bb3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bb3e:	bf00      	nop
 800bb40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bb42:	bc08      	pop	{r3}
 800bb44:	469e      	mov	lr, r3
 800bb46:	4770      	bx	lr

0800bb48 <_fini>:
 800bb48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bb4a:	bf00      	nop
 800bb4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bb4e:	bc08      	pop	{r3}
 800bb50:	469e      	mov	lr, r3
 800bb52:	4770      	bx	lr
