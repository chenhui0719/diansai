
0411.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000391c  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000060  08003aac  08003aac  00004aac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003b0c  08003b0c  0000505c  2**0
                  CONTENTS
  4 .ARM          00000008  08003b0c  08003b0c  00004b0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003b14  08003b14  0000505c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003b14  08003b14  00004b14  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003b18  08003b18  00004b18  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  08003b1c  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000505c  2**0
                  CONTENTS
 10 .bss          00000470  2000005c  2000005c  0000505c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200004cc  200004cc  0000505c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000505c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00008dc0  00000000  00000000  0000508c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001ae8  00000000  00000000  0000de4c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000778  00000000  00000000  0000f938  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000005a5  00000000  00000000  000100b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00002498  00000000  00000000  00010655  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00009e25  00000000  00000000  00012aed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c29be  00000000  00000000  0001c912  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000df2d0  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000021fc  00000000  00000000  000df314  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000005f  00000000  00000000  000e1510  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000005c 	.word	0x2000005c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08003a94 	.word	0x08003a94

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000060 	.word	0x20000060
 80001cc:	08003a94 	.word	0x08003a94

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b988 	b.w	8000598 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	468e      	mov	lr, r1
 80002a8:	4604      	mov	r4, r0
 80002aa:	4688      	mov	r8, r1
 80002ac:	2b00      	cmp	r3, #0
 80002ae:	d14a      	bne.n	8000346 <__udivmoddi4+0xa6>
 80002b0:	428a      	cmp	r2, r1
 80002b2:	4617      	mov	r7, r2
 80002b4:	d962      	bls.n	800037c <__udivmoddi4+0xdc>
 80002b6:	fab2 f682 	clz	r6, r2
 80002ba:	b14e      	cbz	r6, 80002d0 <__udivmoddi4+0x30>
 80002bc:	f1c6 0320 	rsb	r3, r6, #32
 80002c0:	fa01 f806 	lsl.w	r8, r1, r6
 80002c4:	fa20 f303 	lsr.w	r3, r0, r3
 80002c8:	40b7      	lsls	r7, r6
 80002ca:	ea43 0808 	orr.w	r8, r3, r8
 80002ce:	40b4      	lsls	r4, r6
 80002d0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002d4:	fa1f fc87 	uxth.w	ip, r7
 80002d8:	fbb8 f1fe 	udiv	r1, r8, lr
 80002dc:	0c23      	lsrs	r3, r4, #16
 80002de:	fb0e 8811 	mls	r8, lr, r1, r8
 80002e2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002e6:	fb01 f20c 	mul.w	r2, r1, ip
 80002ea:	429a      	cmp	r2, r3
 80002ec:	d909      	bls.n	8000302 <__udivmoddi4+0x62>
 80002ee:	18fb      	adds	r3, r7, r3
 80002f0:	f101 30ff 	add.w	r0, r1, #4294967295
 80002f4:	f080 80ea 	bcs.w	80004cc <__udivmoddi4+0x22c>
 80002f8:	429a      	cmp	r2, r3
 80002fa:	f240 80e7 	bls.w	80004cc <__udivmoddi4+0x22c>
 80002fe:	3902      	subs	r1, #2
 8000300:	443b      	add	r3, r7
 8000302:	1a9a      	subs	r2, r3, r2
 8000304:	b2a3      	uxth	r3, r4
 8000306:	fbb2 f0fe 	udiv	r0, r2, lr
 800030a:	fb0e 2210 	mls	r2, lr, r0, r2
 800030e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000312:	fb00 fc0c 	mul.w	ip, r0, ip
 8000316:	459c      	cmp	ip, r3
 8000318:	d909      	bls.n	800032e <__udivmoddi4+0x8e>
 800031a:	18fb      	adds	r3, r7, r3
 800031c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000320:	f080 80d6 	bcs.w	80004d0 <__udivmoddi4+0x230>
 8000324:	459c      	cmp	ip, r3
 8000326:	f240 80d3 	bls.w	80004d0 <__udivmoddi4+0x230>
 800032a:	443b      	add	r3, r7
 800032c:	3802      	subs	r0, #2
 800032e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000332:	eba3 030c 	sub.w	r3, r3, ip
 8000336:	2100      	movs	r1, #0
 8000338:	b11d      	cbz	r5, 8000342 <__udivmoddi4+0xa2>
 800033a:	40f3      	lsrs	r3, r6
 800033c:	2200      	movs	r2, #0
 800033e:	e9c5 3200 	strd	r3, r2, [r5]
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	428b      	cmp	r3, r1
 8000348:	d905      	bls.n	8000356 <__udivmoddi4+0xb6>
 800034a:	b10d      	cbz	r5, 8000350 <__udivmoddi4+0xb0>
 800034c:	e9c5 0100 	strd	r0, r1, [r5]
 8000350:	2100      	movs	r1, #0
 8000352:	4608      	mov	r0, r1
 8000354:	e7f5      	b.n	8000342 <__udivmoddi4+0xa2>
 8000356:	fab3 f183 	clz	r1, r3
 800035a:	2900      	cmp	r1, #0
 800035c:	d146      	bne.n	80003ec <__udivmoddi4+0x14c>
 800035e:	4573      	cmp	r3, lr
 8000360:	d302      	bcc.n	8000368 <__udivmoddi4+0xc8>
 8000362:	4282      	cmp	r2, r0
 8000364:	f200 8105 	bhi.w	8000572 <__udivmoddi4+0x2d2>
 8000368:	1a84      	subs	r4, r0, r2
 800036a:	eb6e 0203 	sbc.w	r2, lr, r3
 800036e:	2001      	movs	r0, #1
 8000370:	4690      	mov	r8, r2
 8000372:	2d00      	cmp	r5, #0
 8000374:	d0e5      	beq.n	8000342 <__udivmoddi4+0xa2>
 8000376:	e9c5 4800 	strd	r4, r8, [r5]
 800037a:	e7e2      	b.n	8000342 <__udivmoddi4+0xa2>
 800037c:	2a00      	cmp	r2, #0
 800037e:	f000 8090 	beq.w	80004a2 <__udivmoddi4+0x202>
 8000382:	fab2 f682 	clz	r6, r2
 8000386:	2e00      	cmp	r6, #0
 8000388:	f040 80a4 	bne.w	80004d4 <__udivmoddi4+0x234>
 800038c:	1a8a      	subs	r2, r1, r2
 800038e:	0c03      	lsrs	r3, r0, #16
 8000390:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000394:	b280      	uxth	r0, r0
 8000396:	b2bc      	uxth	r4, r7
 8000398:	2101      	movs	r1, #1
 800039a:	fbb2 fcfe 	udiv	ip, r2, lr
 800039e:	fb0e 221c 	mls	r2, lr, ip, r2
 80003a2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003a6:	fb04 f20c 	mul.w	r2, r4, ip
 80003aa:	429a      	cmp	r2, r3
 80003ac:	d907      	bls.n	80003be <__udivmoddi4+0x11e>
 80003ae:	18fb      	adds	r3, r7, r3
 80003b0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80003b4:	d202      	bcs.n	80003bc <__udivmoddi4+0x11c>
 80003b6:	429a      	cmp	r2, r3
 80003b8:	f200 80e0 	bhi.w	800057c <__udivmoddi4+0x2dc>
 80003bc:	46c4      	mov	ip, r8
 80003be:	1a9b      	subs	r3, r3, r2
 80003c0:	fbb3 f2fe 	udiv	r2, r3, lr
 80003c4:	fb0e 3312 	mls	r3, lr, r2, r3
 80003c8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80003cc:	fb02 f404 	mul.w	r4, r2, r4
 80003d0:	429c      	cmp	r4, r3
 80003d2:	d907      	bls.n	80003e4 <__udivmoddi4+0x144>
 80003d4:	18fb      	adds	r3, r7, r3
 80003d6:	f102 30ff 	add.w	r0, r2, #4294967295
 80003da:	d202      	bcs.n	80003e2 <__udivmoddi4+0x142>
 80003dc:	429c      	cmp	r4, r3
 80003de:	f200 80ca 	bhi.w	8000576 <__udivmoddi4+0x2d6>
 80003e2:	4602      	mov	r2, r0
 80003e4:	1b1b      	subs	r3, r3, r4
 80003e6:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 80003ea:	e7a5      	b.n	8000338 <__udivmoddi4+0x98>
 80003ec:	f1c1 0620 	rsb	r6, r1, #32
 80003f0:	408b      	lsls	r3, r1
 80003f2:	fa22 f706 	lsr.w	r7, r2, r6
 80003f6:	431f      	orrs	r7, r3
 80003f8:	fa0e f401 	lsl.w	r4, lr, r1
 80003fc:	fa20 f306 	lsr.w	r3, r0, r6
 8000400:	fa2e fe06 	lsr.w	lr, lr, r6
 8000404:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000408:	4323      	orrs	r3, r4
 800040a:	fa00 f801 	lsl.w	r8, r0, r1
 800040e:	fa1f fc87 	uxth.w	ip, r7
 8000412:	fbbe f0f9 	udiv	r0, lr, r9
 8000416:	0c1c      	lsrs	r4, r3, #16
 8000418:	fb09 ee10 	mls	lr, r9, r0, lr
 800041c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000420:	fb00 fe0c 	mul.w	lr, r0, ip
 8000424:	45a6      	cmp	lr, r4
 8000426:	fa02 f201 	lsl.w	r2, r2, r1
 800042a:	d909      	bls.n	8000440 <__udivmoddi4+0x1a0>
 800042c:	193c      	adds	r4, r7, r4
 800042e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000432:	f080 809c 	bcs.w	800056e <__udivmoddi4+0x2ce>
 8000436:	45a6      	cmp	lr, r4
 8000438:	f240 8099 	bls.w	800056e <__udivmoddi4+0x2ce>
 800043c:	3802      	subs	r0, #2
 800043e:	443c      	add	r4, r7
 8000440:	eba4 040e 	sub.w	r4, r4, lr
 8000444:	fa1f fe83 	uxth.w	lr, r3
 8000448:	fbb4 f3f9 	udiv	r3, r4, r9
 800044c:	fb09 4413 	mls	r4, r9, r3, r4
 8000450:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000454:	fb03 fc0c 	mul.w	ip, r3, ip
 8000458:	45a4      	cmp	ip, r4
 800045a:	d908      	bls.n	800046e <__udivmoddi4+0x1ce>
 800045c:	193c      	adds	r4, r7, r4
 800045e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000462:	f080 8082 	bcs.w	800056a <__udivmoddi4+0x2ca>
 8000466:	45a4      	cmp	ip, r4
 8000468:	d97f      	bls.n	800056a <__udivmoddi4+0x2ca>
 800046a:	3b02      	subs	r3, #2
 800046c:	443c      	add	r4, r7
 800046e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000472:	eba4 040c 	sub.w	r4, r4, ip
 8000476:	fba0 ec02 	umull	lr, ip, r0, r2
 800047a:	4564      	cmp	r4, ip
 800047c:	4673      	mov	r3, lr
 800047e:	46e1      	mov	r9, ip
 8000480:	d362      	bcc.n	8000548 <__udivmoddi4+0x2a8>
 8000482:	d05f      	beq.n	8000544 <__udivmoddi4+0x2a4>
 8000484:	b15d      	cbz	r5, 800049e <__udivmoddi4+0x1fe>
 8000486:	ebb8 0203 	subs.w	r2, r8, r3
 800048a:	eb64 0409 	sbc.w	r4, r4, r9
 800048e:	fa04 f606 	lsl.w	r6, r4, r6
 8000492:	fa22 f301 	lsr.w	r3, r2, r1
 8000496:	431e      	orrs	r6, r3
 8000498:	40cc      	lsrs	r4, r1
 800049a:	e9c5 6400 	strd	r6, r4, [r5]
 800049e:	2100      	movs	r1, #0
 80004a0:	e74f      	b.n	8000342 <__udivmoddi4+0xa2>
 80004a2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004a6:	0c01      	lsrs	r1, r0, #16
 80004a8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004ac:	b280      	uxth	r0, r0
 80004ae:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004b2:	463b      	mov	r3, r7
 80004b4:	4638      	mov	r0, r7
 80004b6:	463c      	mov	r4, r7
 80004b8:	46b8      	mov	r8, r7
 80004ba:	46be      	mov	lr, r7
 80004bc:	2620      	movs	r6, #32
 80004be:	fbb1 f1f7 	udiv	r1, r1, r7
 80004c2:	eba2 0208 	sub.w	r2, r2, r8
 80004c6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80004ca:	e766      	b.n	800039a <__udivmoddi4+0xfa>
 80004cc:	4601      	mov	r1, r0
 80004ce:	e718      	b.n	8000302 <__udivmoddi4+0x62>
 80004d0:	4610      	mov	r0, r2
 80004d2:	e72c      	b.n	800032e <__udivmoddi4+0x8e>
 80004d4:	f1c6 0220 	rsb	r2, r6, #32
 80004d8:	fa2e f302 	lsr.w	r3, lr, r2
 80004dc:	40b7      	lsls	r7, r6
 80004de:	40b1      	lsls	r1, r6
 80004e0:	fa20 f202 	lsr.w	r2, r0, r2
 80004e4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004e8:	430a      	orrs	r2, r1
 80004ea:	fbb3 f8fe 	udiv	r8, r3, lr
 80004ee:	b2bc      	uxth	r4, r7
 80004f0:	fb0e 3318 	mls	r3, lr, r8, r3
 80004f4:	0c11      	lsrs	r1, r2, #16
 80004f6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004fa:	fb08 f904 	mul.w	r9, r8, r4
 80004fe:	40b0      	lsls	r0, r6
 8000500:	4589      	cmp	r9, r1
 8000502:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000506:	b280      	uxth	r0, r0
 8000508:	d93e      	bls.n	8000588 <__udivmoddi4+0x2e8>
 800050a:	1879      	adds	r1, r7, r1
 800050c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000510:	d201      	bcs.n	8000516 <__udivmoddi4+0x276>
 8000512:	4589      	cmp	r9, r1
 8000514:	d81f      	bhi.n	8000556 <__udivmoddi4+0x2b6>
 8000516:	eba1 0109 	sub.w	r1, r1, r9
 800051a:	fbb1 f9fe 	udiv	r9, r1, lr
 800051e:	fb09 f804 	mul.w	r8, r9, r4
 8000522:	fb0e 1119 	mls	r1, lr, r9, r1
 8000526:	b292      	uxth	r2, r2
 8000528:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800052c:	4542      	cmp	r2, r8
 800052e:	d229      	bcs.n	8000584 <__udivmoddi4+0x2e4>
 8000530:	18ba      	adds	r2, r7, r2
 8000532:	f109 31ff 	add.w	r1, r9, #4294967295
 8000536:	d2c4      	bcs.n	80004c2 <__udivmoddi4+0x222>
 8000538:	4542      	cmp	r2, r8
 800053a:	d2c2      	bcs.n	80004c2 <__udivmoddi4+0x222>
 800053c:	f1a9 0102 	sub.w	r1, r9, #2
 8000540:	443a      	add	r2, r7
 8000542:	e7be      	b.n	80004c2 <__udivmoddi4+0x222>
 8000544:	45f0      	cmp	r8, lr
 8000546:	d29d      	bcs.n	8000484 <__udivmoddi4+0x1e4>
 8000548:	ebbe 0302 	subs.w	r3, lr, r2
 800054c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000550:	3801      	subs	r0, #1
 8000552:	46e1      	mov	r9, ip
 8000554:	e796      	b.n	8000484 <__udivmoddi4+0x1e4>
 8000556:	eba7 0909 	sub.w	r9, r7, r9
 800055a:	4449      	add	r1, r9
 800055c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000560:	fbb1 f9fe 	udiv	r9, r1, lr
 8000564:	fb09 f804 	mul.w	r8, r9, r4
 8000568:	e7db      	b.n	8000522 <__udivmoddi4+0x282>
 800056a:	4673      	mov	r3, lr
 800056c:	e77f      	b.n	800046e <__udivmoddi4+0x1ce>
 800056e:	4650      	mov	r0, sl
 8000570:	e766      	b.n	8000440 <__udivmoddi4+0x1a0>
 8000572:	4608      	mov	r0, r1
 8000574:	e6fd      	b.n	8000372 <__udivmoddi4+0xd2>
 8000576:	443b      	add	r3, r7
 8000578:	3a02      	subs	r2, #2
 800057a:	e733      	b.n	80003e4 <__udivmoddi4+0x144>
 800057c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000580:	443b      	add	r3, r7
 8000582:	e71c      	b.n	80003be <__udivmoddi4+0x11e>
 8000584:	4649      	mov	r1, r9
 8000586:	e79c      	b.n	80004c2 <__udivmoddi4+0x222>
 8000588:	eba1 0109 	sub.w	r1, r1, r9
 800058c:	46c4      	mov	ip, r8
 800058e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000592:	fb09 f804 	mul.w	r8, r9, r4
 8000596:	e7c4      	b.n	8000522 <__udivmoddi4+0x282>

08000598 <__aeabi_idiv0>:
 8000598:	4770      	bx	lr
 800059a:	bf00      	nop

0800059c <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 800059c:	b580      	push	{r7, lr}
 800059e:	b09a      	sub	sp, #104	@ 0x68
 80005a0:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80005a2:	f000 fb27 	bl	8000bf4 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80005a6:	f000 f823 	bl	80005f0 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80005aa:	f000 f8b5 	bl	8000718 <MX_GPIO_Init>
	MX_USART1_UART_Init();
 80005ae:	f000 f889 	bl	80006c4 <MX_USART1_UART_Init>
	/* USER CODE BEGIN 2 */
	initRingBuffer();                            // ��ʼ�����λ�����
 80005b2:	f000 f9f7 	bl	80009a4 <initRingBuffer>
	HAL_UART_Receive_IT(&TJC_UART, RxBuffer, 1); // �򿪴��ڽ����ж�
 80005b6:	2201      	movs	r2, #1
 80005b8:	490a      	ldr	r1, [pc, #40]	@ (80005e4 <main+0x48>)
 80005ba:	480b      	ldr	r0, [pc, #44]	@ (80005e8 <main+0x4c>)
 80005bc:	f001 fea0 	bl	8002300 <HAL_UART_Receive_IT>
	int a = 100;
 80005c0:	2364      	movs	r3, #100	@ 0x64
 80005c2:	667b      	str	r3, [r7, #100]	@ 0x64

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {

		sprintf(str, "n0.val=%d", a);
 80005c4:	463b      	mov	r3, r7
 80005c6:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 80005c8:	4908      	ldr	r1, [pc, #32]	@ (80005ec <main+0x50>)
 80005ca:	4618      	mov	r0, r3
 80005cc:	f002 fdc2 	bl	8003154 <siprintf>
		tjc_send_string(str);
 80005d0:	463b      	mov	r3, r7
 80005d2:	4618      	mov	r0, r3
 80005d4:	f000 f9a8 	bl	8000928 <tjc_send_string>
		//			tjc_send_string(str);
		//			HAL_Delay(50);
		//			sprintf(str, "click b0,0");
		//			tjc_send_string(str);

		a++;
 80005d8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80005da:	3301      	adds	r3, #1
 80005dc:	667b      	str	r3, [r7, #100]	@ 0x64
		sprintf(str, "n0.val=%d", a);
 80005de:	bf00      	nop
 80005e0:	e7f0      	b.n	80005c4 <main+0x28>
 80005e2:	bf00      	nop
 80005e4:	200002bc 	.word	0x200002bc
 80005e8:	20000078 	.word	0x20000078
 80005ec:	08003aac 	.word	0x08003aac

080005f0 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 80005f0:	b580      	push	{r7, lr}
 80005f2:	b094      	sub	sp, #80	@ 0x50
 80005f4:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 80005f6:	f107 0320 	add.w	r3, r7, #32
 80005fa:	2230      	movs	r2, #48	@ 0x30
 80005fc:	2100      	movs	r1, #0
 80005fe:	4618      	mov	r0, r3
 8000600:	f002 fdca 	bl	8003198 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8000604:	f107 030c 	add.w	r3, r7, #12
 8000608:	2200      	movs	r2, #0
 800060a:	601a      	str	r2, [r3, #0]
 800060c:	605a      	str	r2, [r3, #4]
 800060e:	609a      	str	r2, [r3, #8]
 8000610:	60da      	str	r2, [r3, #12]
 8000612:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8000614:	2300      	movs	r3, #0
 8000616:	60bb      	str	r3, [r7, #8]
 8000618:	4b28      	ldr	r3, [pc, #160]	@ (80006bc <SystemClock_Config+0xcc>)
 800061a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800061c:	4a27      	ldr	r2, [pc, #156]	@ (80006bc <SystemClock_Config+0xcc>)
 800061e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000622:	6413      	str	r3, [r2, #64]	@ 0x40
 8000624:	4b25      	ldr	r3, [pc, #148]	@ (80006bc <SystemClock_Config+0xcc>)
 8000626:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000628:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800062c:	60bb      	str	r3, [r7, #8]
 800062e:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000630:	2300      	movs	r3, #0
 8000632:	607b      	str	r3, [r7, #4]
 8000634:	4b22      	ldr	r3, [pc, #136]	@ (80006c0 <SystemClock_Config+0xd0>)
 8000636:	681b      	ldr	r3, [r3, #0]
 8000638:	4a21      	ldr	r2, [pc, #132]	@ (80006c0 <SystemClock_Config+0xd0>)
 800063a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800063e:	6013      	str	r3, [r2, #0]
 8000640:	4b1f      	ldr	r3, [pc, #124]	@ (80006c0 <SystemClock_Config+0xd0>)
 8000642:	681b      	ldr	r3, [r3, #0]
 8000644:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000648:	607b      	str	r3, [r7, #4]
 800064a:	687b      	ldr	r3, [r7, #4]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800064c:	2301      	movs	r3, #1
 800064e:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000650:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000654:	627b      	str	r3, [r7, #36]	@ 0x24
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000656:	2302      	movs	r3, #2
 8000658:	63bb      	str	r3, [r7, #56]	@ 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800065a:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800065e:	63fb      	str	r3, [r7, #60]	@ 0x3c
	RCC_OscInitStruct.PLL.PLLM = 25;
 8000660:	2319      	movs	r3, #25
 8000662:	643b      	str	r3, [r7, #64]	@ 0x40
	RCC_OscInitStruct.PLL.PLLN = 336;
 8000664:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8000668:	647b      	str	r3, [r7, #68]	@ 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800066a:	2302      	movs	r3, #2
 800066c:	64bb      	str	r3, [r7, #72]	@ 0x48
	RCC_OscInitStruct.PLL.PLLQ = 4;
 800066e:	2304      	movs	r3, #4
 8000670:	64fb      	str	r3, [r7, #76]	@ 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8000672:	f107 0320 	add.w	r3, r7, #32
 8000676:	4618      	mov	r0, r3
 8000678:	f001 f958 	bl	800192c <HAL_RCC_OscConfig>
 800067c:	4603      	mov	r3, r0
 800067e:	2b00      	cmp	r3, #0
 8000680:	d001      	beq.n	8000686 <SystemClock_Config+0x96>
		Error_Handler();
 8000682:	f000 f871 	bl	8000768 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8000686:	230f      	movs	r3, #15
 8000688:	60fb      	str	r3, [r7, #12]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800068a:	2302      	movs	r3, #2
 800068c:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800068e:	2300      	movs	r3, #0
 8000690:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000692:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000696:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000698:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800069c:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK) {
 800069e:	f107 030c 	add.w	r3, r7, #12
 80006a2:	2105      	movs	r1, #5
 80006a4:	4618      	mov	r0, r3
 80006a6:	f001 fbb9 	bl	8001e1c <HAL_RCC_ClockConfig>
 80006aa:	4603      	mov	r3, r0
 80006ac:	2b00      	cmp	r3, #0
 80006ae:	d001      	beq.n	80006b4 <SystemClock_Config+0xc4>
		Error_Handler();
 80006b0:	f000 f85a 	bl	8000768 <Error_Handler>
	}
}
 80006b4:	bf00      	nop
 80006b6:	3750      	adds	r7, #80	@ 0x50
 80006b8:	46bd      	mov	sp, r7
 80006ba:	bd80      	pop	{r7, pc}
 80006bc:	40023800 	.word	0x40023800
 80006c0:	40007000 	.word	0x40007000

080006c4 <MX_USART1_UART_Init>:
/**
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void) {
 80006c4:	b580      	push	{r7, lr}
 80006c6:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart1.Instance = USART2;
 80006c8:	4b11      	ldr	r3, [pc, #68]	@ (8000710 <MX_USART1_UART_Init+0x4c>)
 80006ca:	4a12      	ldr	r2, [pc, #72]	@ (8000714 <MX_USART1_UART_Init+0x50>)
 80006cc:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 115200;
 80006ce:	4b10      	ldr	r3, [pc, #64]	@ (8000710 <MX_USART1_UART_Init+0x4c>)
 80006d0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80006d4:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80006d6:	4b0e      	ldr	r3, [pc, #56]	@ (8000710 <MX_USART1_UART_Init+0x4c>)
 80006d8:	2200      	movs	r2, #0
 80006da:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 80006dc:	4b0c      	ldr	r3, [pc, #48]	@ (8000710 <MX_USART1_UART_Init+0x4c>)
 80006de:	2200      	movs	r2, #0
 80006e0:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 80006e2:	4b0b      	ldr	r3, [pc, #44]	@ (8000710 <MX_USART1_UART_Init+0x4c>)
 80006e4:	2200      	movs	r2, #0
 80006e6:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 80006e8:	4b09      	ldr	r3, [pc, #36]	@ (8000710 <MX_USART1_UART_Init+0x4c>)
 80006ea:	220c      	movs	r2, #12
 80006ec:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006ee:	4b08      	ldr	r3, [pc, #32]	@ (8000710 <MX_USART1_UART_Init+0x4c>)
 80006f0:	2200      	movs	r2, #0
 80006f2:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80006f4:	4b06      	ldr	r3, [pc, #24]	@ (8000710 <MX_USART1_UART_Init+0x4c>)
 80006f6:	2200      	movs	r2, #0
 80006f8:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart1) != HAL_OK) {
 80006fa:	4805      	ldr	r0, [pc, #20]	@ (8000710 <MX_USART1_UART_Init+0x4c>)
 80006fc:	f001 fd6e 	bl	80021dc <HAL_UART_Init>
 8000700:	4603      	mov	r3, r0
 8000702:	2b00      	cmp	r3, #0
 8000704:	d001      	beq.n	800070a <MX_USART1_UART_Init+0x46>
		Error_Handler();
 8000706:	f000 f82f 	bl	8000768 <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */
}
 800070a:	bf00      	nop
 800070c:	bd80      	pop	{r7, pc}
 800070e:	bf00      	nop
 8000710:	20000078 	.word	0x20000078
 8000714:	40004400 	.word	0x40004400

08000718 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8000718:	b480      	push	{r7}
 800071a:	b083      	sub	sp, #12
 800071c:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOD_CLK_ENABLE();
 800071e:	2300      	movs	r3, #0
 8000720:	607b      	str	r3, [r7, #4]
 8000722:	4b10      	ldr	r3, [pc, #64]	@ (8000764 <MX_GPIO_Init+0x4c>)
 8000724:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000726:	4a0f      	ldr	r2, [pc, #60]	@ (8000764 <MX_GPIO_Init+0x4c>)
 8000728:	f043 0308 	orr.w	r3, r3, #8
 800072c:	6313      	str	r3, [r2, #48]	@ 0x30
 800072e:	4b0d      	ldr	r3, [pc, #52]	@ (8000764 <MX_GPIO_Init+0x4c>)
 8000730:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000732:	f003 0308 	and.w	r3, r3, #8
 8000736:	607b      	str	r3, [r7, #4]
 8000738:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 800073a:	2300      	movs	r3, #0
 800073c:	603b      	str	r3, [r7, #0]
 800073e:	4b09      	ldr	r3, [pc, #36]	@ (8000764 <MX_GPIO_Init+0x4c>)
 8000740:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000742:	4a08      	ldr	r2, [pc, #32]	@ (8000764 <MX_GPIO_Init+0x4c>)
 8000744:	f043 0301 	orr.w	r3, r3, #1
 8000748:	6313      	str	r3, [r2, #48]	@ 0x30
 800074a:	4b06      	ldr	r3, [pc, #24]	@ (8000764 <MX_GPIO_Init+0x4c>)
 800074c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800074e:	f003 0301 	and.w	r3, r3, #1
 8000752:	603b      	str	r3, [r7, #0]
 8000754:	683b      	ldr	r3, [r7, #0]

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 8000756:	bf00      	nop
 8000758:	370c      	adds	r7, #12
 800075a:	46bd      	mov	sp, r7
 800075c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000760:	4770      	bx	lr
 8000762:	bf00      	nop
 8000764:	40023800 	.word	0x40023800

08000768 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8000768:	b480      	push	{r7}
 800076a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800076c:	b672      	cpsid	i
}
 800076e:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000770:	bf00      	nop
 8000772:	e7fd      	b.n	8000770 <Error_Handler+0x8>

08000774 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000774:	b480      	push	{r7}
 8000776:	b083      	sub	sp, #12
 8000778:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800077a:	2300      	movs	r3, #0
 800077c:	607b      	str	r3, [r7, #4]
 800077e:	4b10      	ldr	r3, [pc, #64]	@ (80007c0 <HAL_MspInit+0x4c>)
 8000780:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000782:	4a0f      	ldr	r2, [pc, #60]	@ (80007c0 <HAL_MspInit+0x4c>)
 8000784:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000788:	6453      	str	r3, [r2, #68]	@ 0x44
 800078a:	4b0d      	ldr	r3, [pc, #52]	@ (80007c0 <HAL_MspInit+0x4c>)
 800078c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800078e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000792:	607b      	str	r3, [r7, #4]
 8000794:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000796:	2300      	movs	r3, #0
 8000798:	603b      	str	r3, [r7, #0]
 800079a:	4b09      	ldr	r3, [pc, #36]	@ (80007c0 <HAL_MspInit+0x4c>)
 800079c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800079e:	4a08      	ldr	r2, [pc, #32]	@ (80007c0 <HAL_MspInit+0x4c>)
 80007a0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80007a4:	6413      	str	r3, [r2, #64]	@ 0x40
 80007a6:	4b06      	ldr	r3, [pc, #24]	@ (80007c0 <HAL_MspInit+0x4c>)
 80007a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80007aa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80007ae:	603b      	str	r3, [r7, #0]
 80007b0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007b2:	bf00      	nop
 80007b4:	370c      	adds	r7, #12
 80007b6:	46bd      	mov	sp, r7
 80007b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007bc:	4770      	bx	lr
 80007be:	bf00      	nop
 80007c0:	40023800 	.word	0x40023800

080007c4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80007c4:	b480      	push	{r7}
 80007c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80007c8:	bf00      	nop
 80007ca:	e7fd      	b.n	80007c8 <NMI_Handler+0x4>

080007cc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80007cc:	b480      	push	{r7}
 80007ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80007d0:	bf00      	nop
 80007d2:	e7fd      	b.n	80007d0 <HardFault_Handler+0x4>

080007d4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80007d4:	b480      	push	{r7}
 80007d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80007d8:	bf00      	nop
 80007da:	e7fd      	b.n	80007d8 <MemManage_Handler+0x4>

080007dc <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80007dc:	b480      	push	{r7}
 80007de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80007e0:	bf00      	nop
 80007e2:	e7fd      	b.n	80007e0 <BusFault_Handler+0x4>

080007e4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80007e4:	b480      	push	{r7}
 80007e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80007e8:	bf00      	nop
 80007ea:	e7fd      	b.n	80007e8 <UsageFault_Handler+0x4>

080007ec <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80007ec:	b480      	push	{r7}
 80007ee:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80007f0:	bf00      	nop
 80007f2:	46bd      	mov	sp, r7
 80007f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007f8:	4770      	bx	lr

080007fa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80007fa:	b480      	push	{r7}
 80007fc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80007fe:	bf00      	nop
 8000800:	46bd      	mov	sp, r7
 8000802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000806:	4770      	bx	lr

08000808 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000808:	b480      	push	{r7}
 800080a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800080c:	bf00      	nop
 800080e:	46bd      	mov	sp, r7
 8000810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000814:	4770      	bx	lr

08000816 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000816:	b580      	push	{r7, lr}
 8000818:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800081a:	f000 fa3d 	bl	8000c98 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800081e:	bf00      	nop
 8000820:	bd80      	pop	{r7, pc}
	...

08000824 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000824:	b580      	push	{r7, lr}
 8000826:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000828:	4802      	ldr	r0, [pc, #8]	@ (8000834 <USART1_IRQHandler+0x10>)
 800082a:	f001 fd99 	bl	8002360 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800082e:	bf00      	nop
 8000830:	bd80      	pop	{r7, pc}
 8000832:	bf00      	nop
 8000834:	20000078 	.word	0x20000078

08000838 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8000838:	b580      	push	{r7, lr}
 800083a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 800083c:	4802      	ldr	r0, [pc, #8]	@ (8000848 <DMA2_Stream2_IRQHandler+0x10>)
 800083e:	f000 fc9d 	bl	800117c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8000842:	bf00      	nop
 8000844:	bd80      	pop	{r7, pc}
 8000846:	bf00      	nop
 8000848:	200002c0 	.word	0x200002c0

0800084c <DMA2_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA2 stream7 global interrupt.
  */
void DMA2_Stream7_IRQHandler(void)
{
 800084c:	b580      	push	{r7, lr}
 800084e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream7_IRQn 0 */

  /* USER CODE END DMA2_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8000850:	4802      	ldr	r0, [pc, #8]	@ (800085c <DMA2_Stream7_IRQHandler+0x10>)
 8000852:	f000 fc93 	bl	800117c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream7_IRQn 1 */

  /* USER CODE END DMA2_Stream7_IRQn 1 */
}
 8000856:	bf00      	nop
 8000858:	bd80      	pop	{r7, pc}
 800085a:	bf00      	nop
 800085c:	20000320 	.word	0x20000320

08000860 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000860:	b580      	push	{r7, lr}
 8000862:	b086      	sub	sp, #24
 8000864:	af00      	add	r7, sp, #0
 8000866:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000868:	4a14      	ldr	r2, [pc, #80]	@ (80008bc <_sbrk+0x5c>)
 800086a:	4b15      	ldr	r3, [pc, #84]	@ (80008c0 <_sbrk+0x60>)
 800086c:	1ad3      	subs	r3, r2, r3
 800086e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000870:	697b      	ldr	r3, [r7, #20]
 8000872:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000874:	4b13      	ldr	r3, [pc, #76]	@ (80008c4 <_sbrk+0x64>)
 8000876:	681b      	ldr	r3, [r3, #0]
 8000878:	2b00      	cmp	r3, #0
 800087a:	d102      	bne.n	8000882 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800087c:	4b11      	ldr	r3, [pc, #68]	@ (80008c4 <_sbrk+0x64>)
 800087e:	4a12      	ldr	r2, [pc, #72]	@ (80008c8 <_sbrk+0x68>)
 8000880:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000882:	4b10      	ldr	r3, [pc, #64]	@ (80008c4 <_sbrk+0x64>)
 8000884:	681a      	ldr	r2, [r3, #0]
 8000886:	687b      	ldr	r3, [r7, #4]
 8000888:	4413      	add	r3, r2
 800088a:	693a      	ldr	r2, [r7, #16]
 800088c:	429a      	cmp	r2, r3
 800088e:	d207      	bcs.n	80008a0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000890:	f002 fc8a 	bl	80031a8 <__errno>
 8000894:	4603      	mov	r3, r0
 8000896:	220c      	movs	r2, #12
 8000898:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800089a:	f04f 33ff 	mov.w	r3, #4294967295
 800089e:	e009      	b.n	80008b4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80008a0:	4b08      	ldr	r3, [pc, #32]	@ (80008c4 <_sbrk+0x64>)
 80008a2:	681b      	ldr	r3, [r3, #0]
 80008a4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80008a6:	4b07      	ldr	r3, [pc, #28]	@ (80008c4 <_sbrk+0x64>)
 80008a8:	681a      	ldr	r2, [r3, #0]
 80008aa:	687b      	ldr	r3, [r7, #4]
 80008ac:	4413      	add	r3, r2
 80008ae:	4a05      	ldr	r2, [pc, #20]	@ (80008c4 <_sbrk+0x64>)
 80008b0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80008b2:	68fb      	ldr	r3, [r7, #12]
}
 80008b4:	4618      	mov	r0, r3
 80008b6:	3718      	adds	r7, #24
 80008b8:	46bd      	mov	sp, r7
 80008ba:	bd80      	pop	{r7, pc}
 80008bc:	20020000 	.word	0x20020000
 80008c0:	00000400 	.word	0x00000400
 80008c4:	200000bc 	.word	0x200000bc
 80008c8:	200004d0 	.word	0x200004d0

080008cc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80008cc:	b480      	push	{r7}
 80008ce:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80008d0:	4b06      	ldr	r3, [pc, #24]	@ (80008ec <SystemInit+0x20>)
 80008d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80008d6:	4a05      	ldr	r2, [pc, #20]	@ (80008ec <SystemInit+0x20>)
 80008d8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80008dc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80008e0:	bf00      	nop
 80008e2:	46bd      	mov	sp, r7
 80008e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008e8:	4770      	bx	lr
 80008ea:	bf00      	nop
 80008ec:	e000ed00 	.word	0xe000ed00

080008f0 <uart_send_char>:
 ���ܣ�    	���ڷ��͵����ַ�
 ���������		Ҫ���͵ĵ����ַ�
 ����ֵ�� 		��
 �޸ļ�¼��
 **********************************************************/
void uart_send_char(char ch) {
 80008f0:	b580      	push	{r7, lr}
 80008f2:	b084      	sub	sp, #16
 80008f4:	af00      	add	r7, sp, #0
 80008f6:	4603      	mov	r3, r0
 80008f8:	71fb      	strb	r3, [r7, #7]
	uint8_t ch2 = (uint8_t) ch;
 80008fa:	79fb      	ldrb	r3, [r7, #7]
 80008fc:	73fb      	strb	r3, [r7, #15]
	// ������0æ��ʱ��ȴ�����æ��ʱ���ٷ��ʹ��������ַ�
//    while (__HAL_UART_GET_FLAG(&TJC_UART, UART_FLAG_TXE) == RESET)
	; // �ȴ��������
	while (__HAL_UART_GET_FLAG(&TJC_UART, UART_FLAG_TC) == RESET)
 80008fe:	bf00      	nop
 8000900:	4b08      	ldr	r3, [pc, #32]	@ (8000924 <uart_send_char+0x34>)
 8000902:	681b      	ldr	r3, [r3, #0]
 8000904:	681b      	ldr	r3, [r3, #0]
 8000906:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800090a:	2b40      	cmp	r3, #64	@ 0x40
 800090c:	d1f8      	bne.n	8000900 <uart_send_char+0x10>
		;
	// ���͵����ַ�
	HAL_UART_Transmit_IT(&TJC_UART, &ch2, 1);
 800090e:	f107 030f 	add.w	r3, r7, #15
 8000912:	2201      	movs	r2, #1
 8000914:	4619      	mov	r1, r3
 8000916:	4803      	ldr	r0, [pc, #12]	@ (8000924 <uart_send_char+0x34>)
 8000918:	f001 fcad 	bl	8002276 <HAL_UART_Transmit_IT>
	return;
 800091c:	bf00      	nop
}
 800091e:	3710      	adds	r7, #16
 8000920:	46bd      	mov	sp, r7
 8000922:	bd80      	pop	{r7, pc}
 8000924:	20000078 	.word	0x20000078

08000928 <tjc_send_string>:
 ���������		Ҫ���͵��ַ���
 ����ֵ�� 		��
 ʾ��:			tjc_send_val("n0", "val", 100); ���������ݾ��� n0.val=100
 �޸ļ�¼��
 **********************************************************/
void tjc_send_string(char *str) {
 8000928:	b580      	push	{r7, lr}
 800092a:	b082      	sub	sp, #8
 800092c:	af00      	add	r7, sp, #0
 800092e:	6078      	str	r0, [r7, #4]
	// ��ǰ�ַ�����ַ���ڽ�β ���� �ַ����׵�ַ��Ϊ��
	while (*str != 0 && str != 0) {
 8000930:	e006      	b.n	8000940 <tjc_send_string+0x18>
		// �����ַ����׵�ַ�е��ַ��������ڷ������֮���׵�ַ����
		uart_send_char(*str++);
 8000932:	687b      	ldr	r3, [r7, #4]
 8000934:	1c5a      	adds	r2, r3, #1
 8000936:	607a      	str	r2, [r7, #4]
 8000938:	781b      	ldrb	r3, [r3, #0]
 800093a:	4618      	mov	r0, r3
 800093c:	f7ff ffd8 	bl	80008f0 <uart_send_char>
	while (*str != 0 && str != 0) {
 8000940:	687b      	ldr	r3, [r7, #4]
 8000942:	781b      	ldrb	r3, [r3, #0]
 8000944:	2b00      	cmp	r3, #0
 8000946:	d002      	beq.n	800094e <tjc_send_string+0x26>
 8000948:	687b      	ldr	r3, [r7, #4]
 800094a:	2b00      	cmp	r3, #0
 800094c:	d1f1      	bne.n	8000932 <tjc_send_string+0xa>
	}
	uart_send_char(0xff);
 800094e:	20ff      	movs	r0, #255	@ 0xff
 8000950:	f7ff ffce 	bl	80008f0 <uart_send_char>
	uart_send_char(0xff);
 8000954:	20ff      	movs	r0, #255	@ 0xff
 8000956:	f7ff ffcb 	bl	80008f0 <uart_send_char>
	uart_send_char(0xff);
 800095a:	20ff      	movs	r0, #255	@ 0xff
 800095c:	f7ff ffc8 	bl	80008f0 <uart_send_char>
	return;
 8000960:	bf00      	nop
}
 8000962:	3708      	adds	r7, #8
 8000964:	46bd      	mov	sp, r7
 8000966:	bd80      	pop	{r7, pc}

08000968 <HAL_UART_RxCpltCallback>:
 ���ܣ�    	���ڽ����ж�,�����յ�������д�뻷�λ�����
 ���������
 ����ֵ�� 		void
 �޸ļ�¼��
 **********************************************************/
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8000968:	b580      	push	{r7, lr}
 800096a:	b082      	sub	sp, #8
 800096c:	af00      	add	r7, sp, #0
 800096e:	6078      	str	r0, [r7, #4]

	if (huart->Instance == TJC_UART_INS) // �ж������ĸ����ڴ������ж�
 8000970:	687b      	ldr	r3, [r7, #4]
 8000972:	681b      	ldr	r3, [r3, #0]
 8000974:	4a08      	ldr	r2, [pc, #32]	@ (8000998 <HAL_UART_RxCpltCallback+0x30>)
 8000976:	4293      	cmp	r3, r2
 8000978:	d10a      	bne.n	8000990 <HAL_UART_RxCpltCallback+0x28>
	{
		write1ByteToRingBuffer(RxBuffer[0]);
 800097a:	4b08      	ldr	r3, [pc, #32]	@ (800099c <HAL_UART_RxCpltCallback+0x34>)
 800097c:	781b      	ldrb	r3, [r3, #0]
 800097e:	4618      	mov	r0, r3
 8000980:	f000 f822 	bl	80009c8 <write1ByteToRingBuffer>
		HAL_UART_Receive_IT(&TJC_UART, RxBuffer, 1); // ����ʹ�ܴ���2�����ж�
 8000984:	2201      	movs	r2, #1
 8000986:	4905      	ldr	r1, [pc, #20]	@ (800099c <HAL_UART_RxCpltCallback+0x34>)
 8000988:	4805      	ldr	r0, [pc, #20]	@ (80009a0 <HAL_UART_RxCpltCallback+0x38>)
 800098a:	f001 fcb9 	bl	8002300 <HAL_UART_Receive_IT>
	}
	return;
 800098e:	bf00      	nop
 8000990:	bf00      	nop
}
 8000992:	3708      	adds	r7, #8
 8000994:	46bd      	mov	sp, r7
 8000996:	bd80      	pop	{r7, pc}
 8000998:	40011000 	.word	0x40011000
 800099c:	200002bc 	.word	0x200002bc
 80009a0:	20000078 	.word	0x20000078

080009a4 <initRingBuffer>:
 ���ܣ�    	��ʼ�����λ�����
 ���������
 ����ֵ�� 		void
 �޸ļ�¼��
 **********************************************************/
void initRingBuffer(void) {
 80009a4:	b480      	push	{r7}
 80009a6:	af00      	add	r7, sp, #0
	// ��ʼ�������Ϣ
	ringBuffer.Head = 0;
 80009a8:	4b06      	ldr	r3, [pc, #24]	@ (80009c4 <initRingBuffer+0x20>)
 80009aa:	2200      	movs	r2, #0
 80009ac:	801a      	strh	r2, [r3, #0]
	ringBuffer.Tail = 0;
 80009ae:	4b05      	ldr	r3, [pc, #20]	@ (80009c4 <initRingBuffer+0x20>)
 80009b0:	2200      	movs	r2, #0
 80009b2:	805a      	strh	r2, [r3, #2]
	ringBuffer.Length = 0;
 80009b4:	4b03      	ldr	r3, [pc, #12]	@ (80009c4 <initRingBuffer+0x20>)
 80009b6:	2200      	movs	r2, #0
 80009b8:	809a      	strh	r2, [r3, #4]
	return;
 80009ba:	bf00      	nop
}
 80009bc:	46bd      	mov	sp, r7
 80009be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009c2:	4770      	bx	lr
 80009c4:	200000c0 	.word	0x200000c0

080009c8 <write1ByteToRingBuffer>:
 ���ܣ�    	�����λ�����д������
 ���������		Ҫд���1�ֽ�����
 ����ֵ�� 		void
 �޸ļ�¼��
 **********************************************************/
void write1ByteToRingBuffer(uint8_t data) {
 80009c8:	b480      	push	{r7}
 80009ca:	b083      	sub	sp, #12
 80009cc:	af00      	add	r7, sp, #0
 80009ce:	4603      	mov	r3, r0
 80009d0:	71fb      	strb	r3, [r7, #7]
	if (ringBuffer.Length >= RINGBUFFER_LEN) // �жϻ������Ƿ�����
 80009d2:	4b15      	ldr	r3, [pc, #84]	@ (8000a28 <write1ByteToRingBuffer+0x60>)
 80009d4:	889b      	ldrh	r3, [r3, #4]
 80009d6:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 80009da:	d21e      	bcs.n	8000a1a <write1ByteToRingBuffer+0x52>
	{
		return;
	}
	ringBuffer.Ring_data[ringBuffer.Tail] = data;
 80009dc:	4b12      	ldr	r3, [pc, #72]	@ (8000a28 <write1ByteToRingBuffer+0x60>)
 80009de:	885b      	ldrh	r3, [r3, #2]
 80009e0:	461a      	mov	r2, r3
 80009e2:	4b11      	ldr	r3, [pc, #68]	@ (8000a28 <write1ByteToRingBuffer+0x60>)
 80009e4:	4413      	add	r3, r2
 80009e6:	79fa      	ldrb	r2, [r7, #7]
 80009e8:	719a      	strb	r2, [r3, #6]
	ringBuffer.Tail = (ringBuffer.Tail + 1) % RINGBUFFER_LEN; // ��ֹԽ��Ƿ�����
 80009ea:	4b0f      	ldr	r3, [pc, #60]	@ (8000a28 <write1ByteToRingBuffer+0x60>)
 80009ec:	885b      	ldrh	r3, [r3, #2]
 80009ee:	3301      	adds	r3, #1
 80009f0:	4a0e      	ldr	r2, [pc, #56]	@ (8000a2c <write1ByteToRingBuffer+0x64>)
 80009f2:	fb82 1203 	smull	r1, r2, r2, r3
 80009f6:	1151      	asrs	r1, r2, #5
 80009f8:	17da      	asrs	r2, r3, #31
 80009fa:	1a8a      	subs	r2, r1, r2
 80009fc:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 8000a00:	fb01 f202 	mul.w	r2, r1, r2
 8000a04:	1a9a      	subs	r2, r3, r2
 8000a06:	b292      	uxth	r2, r2
 8000a08:	4b07      	ldr	r3, [pc, #28]	@ (8000a28 <write1ByteToRingBuffer+0x60>)
 8000a0a:	805a      	strh	r2, [r3, #2]
	ringBuffer.Length++;
 8000a0c:	4b06      	ldr	r3, [pc, #24]	@ (8000a28 <write1ByteToRingBuffer+0x60>)
 8000a0e:	889b      	ldrh	r3, [r3, #4]
 8000a10:	3301      	adds	r3, #1
 8000a12:	b29a      	uxth	r2, r3
 8000a14:	4b04      	ldr	r3, [pc, #16]	@ (8000a28 <write1ByteToRingBuffer+0x60>)
 8000a16:	809a      	strh	r2, [r3, #4]
	return;
 8000a18:	e000      	b.n	8000a1c <write1ByteToRingBuffer+0x54>
		return;
 8000a1a:	bf00      	nop
}
 8000a1c:	370c      	adds	r7, #12
 8000a1e:	46bd      	mov	sp, r7
 8000a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a24:	4770      	bx	lr
 8000a26:	bf00      	nop
 8000a28:	200000c0 	.word	0x200000c0
 8000a2c:	10624dd3 	.word	0x10624dd3

08000a30 <HAL_UART_MspInit>:
  /* USER CODE END USART1_Init 2 */

}

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000a30:	b580      	push	{r7, lr}
 8000a32:	b08a      	sub	sp, #40	@ 0x28
 8000a34:	af00      	add	r7, sp, #0
 8000a36:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a38:	f107 0314 	add.w	r3, r7, #20
 8000a3c:	2200      	movs	r2, #0
 8000a3e:	601a      	str	r2, [r3, #0]
 8000a40:	605a      	str	r2, [r3, #4]
 8000a42:	609a      	str	r2, [r3, #8]
 8000a44:	60da      	str	r2, [r3, #12]
 8000a46:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	681b      	ldr	r3, [r3, #0]
 8000a4c:	4a4d      	ldr	r2, [pc, #308]	@ (8000b84 <HAL_UART_MspInit+0x154>)
 8000a4e:	4293      	cmp	r3, r2
 8000a50:	f040 8093 	bne.w	8000b7a <HAL_UART_MspInit+0x14a>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000a54:	2300      	movs	r3, #0
 8000a56:	613b      	str	r3, [r7, #16]
 8000a58:	4b4b      	ldr	r3, [pc, #300]	@ (8000b88 <HAL_UART_MspInit+0x158>)
 8000a5a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000a5c:	4a4a      	ldr	r2, [pc, #296]	@ (8000b88 <HAL_UART_MspInit+0x158>)
 8000a5e:	f043 0310 	orr.w	r3, r3, #16
 8000a62:	6453      	str	r3, [r2, #68]	@ 0x44
 8000a64:	4b48      	ldr	r3, [pc, #288]	@ (8000b88 <HAL_UART_MspInit+0x158>)
 8000a66:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000a68:	f003 0310 	and.w	r3, r3, #16
 8000a6c:	613b      	str	r3, [r7, #16]
 8000a6e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a70:	2300      	movs	r3, #0
 8000a72:	60fb      	str	r3, [r7, #12]
 8000a74:	4b44      	ldr	r3, [pc, #272]	@ (8000b88 <HAL_UART_MspInit+0x158>)
 8000a76:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a78:	4a43      	ldr	r2, [pc, #268]	@ (8000b88 <HAL_UART_MspInit+0x158>)
 8000a7a:	f043 0301 	orr.w	r3, r3, #1
 8000a7e:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a80:	4b41      	ldr	r3, [pc, #260]	@ (8000b88 <HAL_UART_MspInit+0x158>)
 8000a82:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a84:	f003 0301 	and.w	r3, r3, #1
 8000a88:	60fb      	str	r3, [r7, #12]
 8000a8a:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000a8c:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8000a90:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a92:	2302      	movs	r3, #2
 8000a94:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a96:	2300      	movs	r3, #0
 8000a98:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a9a:	2303      	movs	r3, #3
 8000a9c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000a9e:	2307      	movs	r3, #7
 8000aa0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000aa2:	f107 0314 	add.w	r3, r7, #20
 8000aa6:	4619      	mov	r1, r3
 8000aa8:	4838      	ldr	r0, [pc, #224]	@ (8000b8c <HAL_UART_MspInit+0x15c>)
 8000aaa:	f000 fda3 	bl	80015f4 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream2;
 8000aae:	4b38      	ldr	r3, [pc, #224]	@ (8000b90 <HAL_UART_MspInit+0x160>)
 8000ab0:	4a38      	ldr	r2, [pc, #224]	@ (8000b94 <HAL_UART_MspInit+0x164>)
 8000ab2:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 8000ab4:	4b36      	ldr	r3, [pc, #216]	@ (8000b90 <HAL_UART_MspInit+0x160>)
 8000ab6:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8000aba:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000abc:	4b34      	ldr	r3, [pc, #208]	@ (8000b90 <HAL_UART_MspInit+0x160>)
 8000abe:	2200      	movs	r2, #0
 8000ac0:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000ac2:	4b33      	ldr	r3, [pc, #204]	@ (8000b90 <HAL_UART_MspInit+0x160>)
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000ac8:	4b31      	ldr	r3, [pc, #196]	@ (8000b90 <HAL_UART_MspInit+0x160>)
 8000aca:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000ace:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000ad0:	4b2f      	ldr	r3, [pc, #188]	@ (8000b90 <HAL_UART_MspInit+0x160>)
 8000ad2:	2200      	movs	r2, #0
 8000ad4:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000ad6:	4b2e      	ldr	r3, [pc, #184]	@ (8000b90 <HAL_UART_MspInit+0x160>)
 8000ad8:	2200      	movs	r2, #0
 8000ada:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8000adc:	4b2c      	ldr	r3, [pc, #176]	@ (8000b90 <HAL_UART_MspInit+0x160>)
 8000ade:	2200      	movs	r2, #0
 8000ae0:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8000ae2:	4b2b      	ldr	r3, [pc, #172]	@ (8000b90 <HAL_UART_MspInit+0x160>)
 8000ae4:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8000ae8:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000aea:	4b29      	ldr	r3, [pc, #164]	@ (8000b90 <HAL_UART_MspInit+0x160>)
 8000aec:	2200      	movs	r2, #0
 8000aee:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8000af0:	4827      	ldr	r0, [pc, #156]	@ (8000b90 <HAL_UART_MspInit+0x160>)
 8000af2:	f000 fa03 	bl	8000efc <HAL_DMA_Init>
 8000af6:	4603      	mov	r3, r0
 8000af8:	2b00      	cmp	r3, #0
 8000afa:	d001      	beq.n	8000b00 <HAL_UART_MspInit+0xd0>
    {
      Error_Handler();
 8000afc:	f7ff fe34 	bl	8000768 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	4a23      	ldr	r2, [pc, #140]	@ (8000b90 <HAL_UART_MspInit+0x160>)
 8000b04:	639a      	str	r2, [r3, #56]	@ 0x38
 8000b06:	4a22      	ldr	r2, [pc, #136]	@ (8000b90 <HAL_UART_MspInit+0x160>)
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA2_Stream7;
 8000b0c:	4b22      	ldr	r3, [pc, #136]	@ (8000b98 <HAL_UART_MspInit+0x168>)
 8000b0e:	4a23      	ldr	r2, [pc, #140]	@ (8000b9c <HAL_UART_MspInit+0x16c>)
 8000b10:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Channel = DMA_CHANNEL_4;
 8000b12:	4b21      	ldr	r3, [pc, #132]	@ (8000b98 <HAL_UART_MspInit+0x168>)
 8000b14:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8000b18:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000b1a:	4b1f      	ldr	r3, [pc, #124]	@ (8000b98 <HAL_UART_MspInit+0x168>)
 8000b1c:	2240      	movs	r2, #64	@ 0x40
 8000b1e:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000b20:	4b1d      	ldr	r3, [pc, #116]	@ (8000b98 <HAL_UART_MspInit+0x168>)
 8000b22:	2200      	movs	r2, #0
 8000b24:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000b26:	4b1c      	ldr	r3, [pc, #112]	@ (8000b98 <HAL_UART_MspInit+0x168>)
 8000b28:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000b2c:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000b2e:	4b1a      	ldr	r3, [pc, #104]	@ (8000b98 <HAL_UART_MspInit+0x168>)
 8000b30:	2200      	movs	r2, #0
 8000b32:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000b34:	4b18      	ldr	r3, [pc, #96]	@ (8000b98 <HAL_UART_MspInit+0x168>)
 8000b36:	2200      	movs	r2, #0
 8000b38:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8000b3a:	4b17      	ldr	r3, [pc, #92]	@ (8000b98 <HAL_UART_MspInit+0x168>)
 8000b3c:	2200      	movs	r2, #0
 8000b3e:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_HIGH;
 8000b40:	4b15      	ldr	r3, [pc, #84]	@ (8000b98 <HAL_UART_MspInit+0x168>)
 8000b42:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8000b46:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000b48:	4b13      	ldr	r3, [pc, #76]	@ (8000b98 <HAL_UART_MspInit+0x168>)
 8000b4a:	2200      	movs	r2, #0
 8000b4c:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8000b4e:	4812      	ldr	r0, [pc, #72]	@ (8000b98 <HAL_UART_MspInit+0x168>)
 8000b50:	f000 f9d4 	bl	8000efc <HAL_DMA_Init>
 8000b54:	4603      	mov	r3, r0
 8000b56:	2b00      	cmp	r3, #0
 8000b58:	d001      	beq.n	8000b5e <HAL_UART_MspInit+0x12e>
    {
      Error_Handler();
 8000b5a:	f7ff fe05 	bl	8000768 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 8000b5e:	687b      	ldr	r3, [r7, #4]
 8000b60:	4a0d      	ldr	r2, [pc, #52]	@ (8000b98 <HAL_UART_MspInit+0x168>)
 8000b62:	635a      	str	r2, [r3, #52]	@ 0x34
 8000b64:	4a0c      	ldr	r2, [pc, #48]	@ (8000b98 <HAL_UART_MspInit+0x168>)
 8000b66:	687b      	ldr	r3, [r7, #4]
 8000b68:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000b6a:	2200      	movs	r2, #0
 8000b6c:	2100      	movs	r1, #0
 8000b6e:	2025      	movs	r0, #37	@ 0x25
 8000b70:	f000 f98d 	bl	8000e8e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000b74:	2025      	movs	r0, #37	@ 0x25
 8000b76:	f000 f9a6 	bl	8000ec6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8000b7a:	bf00      	nop
 8000b7c:	3728      	adds	r7, #40	@ 0x28
 8000b7e:	46bd      	mov	sp, r7
 8000b80:	bd80      	pop	{r7, pc}
 8000b82:	bf00      	nop
 8000b84:	40011000 	.word	0x40011000
 8000b88:	40023800 	.word	0x40023800
 8000b8c:	40020000 	.word	0x40020000
 8000b90:	200002c0 	.word	0x200002c0
 8000b94:	40026440 	.word	0x40026440
 8000b98:	20000320 	.word	0x20000320
 8000b9c:	400264b8 	.word	0x400264b8

08000ba0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000ba0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000bd8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000ba4:	480d      	ldr	r0, [pc, #52]	@ (8000bdc <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000ba6:	490e      	ldr	r1, [pc, #56]	@ (8000be0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000ba8:	4a0e      	ldr	r2, [pc, #56]	@ (8000be4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000baa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000bac:	e002      	b.n	8000bb4 <LoopCopyDataInit>

08000bae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000bae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000bb0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000bb2:	3304      	adds	r3, #4

08000bb4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000bb4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000bb6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000bb8:	d3f9      	bcc.n	8000bae <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000bba:	4a0b      	ldr	r2, [pc, #44]	@ (8000be8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000bbc:	4c0b      	ldr	r4, [pc, #44]	@ (8000bec <LoopFillZerobss+0x26>)
  movs r3, #0
 8000bbe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000bc0:	e001      	b.n	8000bc6 <LoopFillZerobss>

08000bc2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000bc2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000bc4:	3204      	adds	r2, #4

08000bc6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000bc6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000bc8:	d3fb      	bcc.n	8000bc2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000bca:	f7ff fe7f 	bl	80008cc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000bce:	f002 faf1 	bl	80031b4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000bd2:	f7ff fce3 	bl	800059c <main>
  bx  lr    
 8000bd6:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000bd8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000bdc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000be0:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8000be4:	08003b1c 	.word	0x08003b1c
  ldr r2, =_sbss
 8000be8:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8000bec:	200004cc 	.word	0x200004cc

08000bf0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000bf0:	e7fe      	b.n	8000bf0 <ADC_IRQHandler>
	...

08000bf4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000bf8:	4b0e      	ldr	r3, [pc, #56]	@ (8000c34 <HAL_Init+0x40>)
 8000bfa:	681b      	ldr	r3, [r3, #0]
 8000bfc:	4a0d      	ldr	r2, [pc, #52]	@ (8000c34 <HAL_Init+0x40>)
 8000bfe:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000c02:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000c04:	4b0b      	ldr	r3, [pc, #44]	@ (8000c34 <HAL_Init+0x40>)
 8000c06:	681b      	ldr	r3, [r3, #0]
 8000c08:	4a0a      	ldr	r2, [pc, #40]	@ (8000c34 <HAL_Init+0x40>)
 8000c0a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000c0e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c10:	4b08      	ldr	r3, [pc, #32]	@ (8000c34 <HAL_Init+0x40>)
 8000c12:	681b      	ldr	r3, [r3, #0]
 8000c14:	4a07      	ldr	r2, [pc, #28]	@ (8000c34 <HAL_Init+0x40>)
 8000c16:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000c1a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c1c:	2003      	movs	r0, #3
 8000c1e:	f000 f92b 	bl	8000e78 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000c22:	200f      	movs	r0, #15
 8000c24:	f000 f808 	bl	8000c38 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000c28:	f7ff fda4 	bl	8000774 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c2c:	2300      	movs	r3, #0
}
 8000c2e:	4618      	mov	r0, r3
 8000c30:	bd80      	pop	{r7, pc}
 8000c32:	bf00      	nop
 8000c34:	40023c00 	.word	0x40023c00

08000c38 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	b082      	sub	sp, #8
 8000c3c:	af00      	add	r7, sp, #0
 8000c3e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000c40:	4b12      	ldr	r3, [pc, #72]	@ (8000c8c <HAL_InitTick+0x54>)
 8000c42:	681a      	ldr	r2, [r3, #0]
 8000c44:	4b12      	ldr	r3, [pc, #72]	@ (8000c90 <HAL_InitTick+0x58>)
 8000c46:	781b      	ldrb	r3, [r3, #0]
 8000c48:	4619      	mov	r1, r3
 8000c4a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000c4e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000c52:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c56:	4618      	mov	r0, r3
 8000c58:	f000 f943 	bl	8000ee2 <HAL_SYSTICK_Config>
 8000c5c:	4603      	mov	r3, r0
 8000c5e:	2b00      	cmp	r3, #0
 8000c60:	d001      	beq.n	8000c66 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000c62:	2301      	movs	r3, #1
 8000c64:	e00e      	b.n	8000c84 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	2b0f      	cmp	r3, #15
 8000c6a:	d80a      	bhi.n	8000c82 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c6c:	2200      	movs	r2, #0
 8000c6e:	6879      	ldr	r1, [r7, #4]
 8000c70:	f04f 30ff 	mov.w	r0, #4294967295
 8000c74:	f000 f90b 	bl	8000e8e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000c78:	4a06      	ldr	r2, [pc, #24]	@ (8000c94 <HAL_InitTick+0x5c>)
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000c7e:	2300      	movs	r3, #0
 8000c80:	e000      	b.n	8000c84 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000c82:	2301      	movs	r3, #1
}
 8000c84:	4618      	mov	r0, r3
 8000c86:	3708      	adds	r7, #8
 8000c88:	46bd      	mov	sp, r7
 8000c8a:	bd80      	pop	{r7, pc}
 8000c8c:	20000000 	.word	0x20000000
 8000c90:	20000008 	.word	0x20000008
 8000c94:	20000004 	.word	0x20000004

08000c98 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c98:	b480      	push	{r7}
 8000c9a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c9c:	4b06      	ldr	r3, [pc, #24]	@ (8000cb8 <HAL_IncTick+0x20>)
 8000c9e:	781b      	ldrb	r3, [r3, #0]
 8000ca0:	461a      	mov	r2, r3
 8000ca2:	4b06      	ldr	r3, [pc, #24]	@ (8000cbc <HAL_IncTick+0x24>)
 8000ca4:	681b      	ldr	r3, [r3, #0]
 8000ca6:	4413      	add	r3, r2
 8000ca8:	4a04      	ldr	r2, [pc, #16]	@ (8000cbc <HAL_IncTick+0x24>)
 8000caa:	6013      	str	r3, [r2, #0]
}
 8000cac:	bf00      	nop
 8000cae:	46bd      	mov	sp, r7
 8000cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb4:	4770      	bx	lr
 8000cb6:	bf00      	nop
 8000cb8:	20000008 	.word	0x20000008
 8000cbc:	20000380 	.word	0x20000380

08000cc0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000cc0:	b480      	push	{r7}
 8000cc2:	af00      	add	r7, sp, #0
  return uwTick;
 8000cc4:	4b03      	ldr	r3, [pc, #12]	@ (8000cd4 <HAL_GetTick+0x14>)
 8000cc6:	681b      	ldr	r3, [r3, #0]
}
 8000cc8:	4618      	mov	r0, r3
 8000cca:	46bd      	mov	sp, r7
 8000ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd0:	4770      	bx	lr
 8000cd2:	bf00      	nop
 8000cd4:	20000380 	.word	0x20000380

08000cd8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000cd8:	b480      	push	{r7}
 8000cda:	b085      	sub	sp, #20
 8000cdc:	af00      	add	r7, sp, #0
 8000cde:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	f003 0307 	and.w	r3, r3, #7
 8000ce6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ce8:	4b0c      	ldr	r3, [pc, #48]	@ (8000d1c <__NVIC_SetPriorityGrouping+0x44>)
 8000cea:	68db      	ldr	r3, [r3, #12]
 8000cec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000cee:	68ba      	ldr	r2, [r7, #8]
 8000cf0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000cf4:	4013      	ands	r3, r2
 8000cf6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000cf8:	68fb      	ldr	r3, [r7, #12]
 8000cfa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000cfc:	68bb      	ldr	r3, [r7, #8]
 8000cfe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d00:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000d04:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000d08:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d0a:	4a04      	ldr	r2, [pc, #16]	@ (8000d1c <__NVIC_SetPriorityGrouping+0x44>)
 8000d0c:	68bb      	ldr	r3, [r7, #8]
 8000d0e:	60d3      	str	r3, [r2, #12]
}
 8000d10:	bf00      	nop
 8000d12:	3714      	adds	r7, #20
 8000d14:	46bd      	mov	sp, r7
 8000d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d1a:	4770      	bx	lr
 8000d1c:	e000ed00 	.word	0xe000ed00

08000d20 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d20:	b480      	push	{r7}
 8000d22:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d24:	4b04      	ldr	r3, [pc, #16]	@ (8000d38 <__NVIC_GetPriorityGrouping+0x18>)
 8000d26:	68db      	ldr	r3, [r3, #12]
 8000d28:	0a1b      	lsrs	r3, r3, #8
 8000d2a:	f003 0307 	and.w	r3, r3, #7
}
 8000d2e:	4618      	mov	r0, r3
 8000d30:	46bd      	mov	sp, r7
 8000d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d36:	4770      	bx	lr
 8000d38:	e000ed00 	.word	0xe000ed00

08000d3c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d3c:	b480      	push	{r7}
 8000d3e:	b083      	sub	sp, #12
 8000d40:	af00      	add	r7, sp, #0
 8000d42:	4603      	mov	r3, r0
 8000d44:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d4a:	2b00      	cmp	r3, #0
 8000d4c:	db0b      	blt.n	8000d66 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d4e:	79fb      	ldrb	r3, [r7, #7]
 8000d50:	f003 021f 	and.w	r2, r3, #31
 8000d54:	4907      	ldr	r1, [pc, #28]	@ (8000d74 <__NVIC_EnableIRQ+0x38>)
 8000d56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d5a:	095b      	lsrs	r3, r3, #5
 8000d5c:	2001      	movs	r0, #1
 8000d5e:	fa00 f202 	lsl.w	r2, r0, r2
 8000d62:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000d66:	bf00      	nop
 8000d68:	370c      	adds	r7, #12
 8000d6a:	46bd      	mov	sp, r7
 8000d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d70:	4770      	bx	lr
 8000d72:	bf00      	nop
 8000d74:	e000e100 	.word	0xe000e100

08000d78 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d78:	b480      	push	{r7}
 8000d7a:	b083      	sub	sp, #12
 8000d7c:	af00      	add	r7, sp, #0
 8000d7e:	4603      	mov	r3, r0
 8000d80:	6039      	str	r1, [r7, #0]
 8000d82:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d84:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d88:	2b00      	cmp	r3, #0
 8000d8a:	db0a      	blt.n	8000da2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d8c:	683b      	ldr	r3, [r7, #0]
 8000d8e:	b2da      	uxtb	r2, r3
 8000d90:	490c      	ldr	r1, [pc, #48]	@ (8000dc4 <__NVIC_SetPriority+0x4c>)
 8000d92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d96:	0112      	lsls	r2, r2, #4
 8000d98:	b2d2      	uxtb	r2, r2
 8000d9a:	440b      	add	r3, r1
 8000d9c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000da0:	e00a      	b.n	8000db8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000da2:	683b      	ldr	r3, [r7, #0]
 8000da4:	b2da      	uxtb	r2, r3
 8000da6:	4908      	ldr	r1, [pc, #32]	@ (8000dc8 <__NVIC_SetPriority+0x50>)
 8000da8:	79fb      	ldrb	r3, [r7, #7]
 8000daa:	f003 030f 	and.w	r3, r3, #15
 8000dae:	3b04      	subs	r3, #4
 8000db0:	0112      	lsls	r2, r2, #4
 8000db2:	b2d2      	uxtb	r2, r2
 8000db4:	440b      	add	r3, r1
 8000db6:	761a      	strb	r2, [r3, #24]
}
 8000db8:	bf00      	nop
 8000dba:	370c      	adds	r7, #12
 8000dbc:	46bd      	mov	sp, r7
 8000dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc2:	4770      	bx	lr
 8000dc4:	e000e100 	.word	0xe000e100
 8000dc8:	e000ed00 	.word	0xe000ed00

08000dcc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000dcc:	b480      	push	{r7}
 8000dce:	b089      	sub	sp, #36	@ 0x24
 8000dd0:	af00      	add	r7, sp, #0
 8000dd2:	60f8      	str	r0, [r7, #12]
 8000dd4:	60b9      	str	r1, [r7, #8]
 8000dd6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000dd8:	68fb      	ldr	r3, [r7, #12]
 8000dda:	f003 0307 	and.w	r3, r3, #7
 8000dde:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000de0:	69fb      	ldr	r3, [r7, #28]
 8000de2:	f1c3 0307 	rsb	r3, r3, #7
 8000de6:	2b04      	cmp	r3, #4
 8000de8:	bf28      	it	cs
 8000dea:	2304      	movcs	r3, #4
 8000dec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000dee:	69fb      	ldr	r3, [r7, #28]
 8000df0:	3304      	adds	r3, #4
 8000df2:	2b06      	cmp	r3, #6
 8000df4:	d902      	bls.n	8000dfc <NVIC_EncodePriority+0x30>
 8000df6:	69fb      	ldr	r3, [r7, #28]
 8000df8:	3b03      	subs	r3, #3
 8000dfa:	e000      	b.n	8000dfe <NVIC_EncodePriority+0x32>
 8000dfc:	2300      	movs	r3, #0
 8000dfe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e00:	f04f 32ff 	mov.w	r2, #4294967295
 8000e04:	69bb      	ldr	r3, [r7, #24]
 8000e06:	fa02 f303 	lsl.w	r3, r2, r3
 8000e0a:	43da      	mvns	r2, r3
 8000e0c:	68bb      	ldr	r3, [r7, #8]
 8000e0e:	401a      	ands	r2, r3
 8000e10:	697b      	ldr	r3, [r7, #20]
 8000e12:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e14:	f04f 31ff 	mov.w	r1, #4294967295
 8000e18:	697b      	ldr	r3, [r7, #20]
 8000e1a:	fa01 f303 	lsl.w	r3, r1, r3
 8000e1e:	43d9      	mvns	r1, r3
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e24:	4313      	orrs	r3, r2
         );
}
 8000e26:	4618      	mov	r0, r3
 8000e28:	3724      	adds	r7, #36	@ 0x24
 8000e2a:	46bd      	mov	sp, r7
 8000e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e30:	4770      	bx	lr
	...

08000e34 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000e34:	b580      	push	{r7, lr}
 8000e36:	b082      	sub	sp, #8
 8000e38:	af00      	add	r7, sp, #0
 8000e3a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	3b01      	subs	r3, #1
 8000e40:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000e44:	d301      	bcc.n	8000e4a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000e46:	2301      	movs	r3, #1
 8000e48:	e00f      	b.n	8000e6a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e4a:	4a0a      	ldr	r2, [pc, #40]	@ (8000e74 <SysTick_Config+0x40>)
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	3b01      	subs	r3, #1
 8000e50:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000e52:	210f      	movs	r1, #15
 8000e54:	f04f 30ff 	mov.w	r0, #4294967295
 8000e58:	f7ff ff8e 	bl	8000d78 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e5c:	4b05      	ldr	r3, [pc, #20]	@ (8000e74 <SysTick_Config+0x40>)
 8000e5e:	2200      	movs	r2, #0
 8000e60:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e62:	4b04      	ldr	r3, [pc, #16]	@ (8000e74 <SysTick_Config+0x40>)
 8000e64:	2207      	movs	r2, #7
 8000e66:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000e68:	2300      	movs	r3, #0
}
 8000e6a:	4618      	mov	r0, r3
 8000e6c:	3708      	adds	r7, #8
 8000e6e:	46bd      	mov	sp, r7
 8000e70:	bd80      	pop	{r7, pc}
 8000e72:	bf00      	nop
 8000e74:	e000e010 	.word	0xe000e010

08000e78 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	b082      	sub	sp, #8
 8000e7c:	af00      	add	r7, sp, #0
 8000e7e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e80:	6878      	ldr	r0, [r7, #4]
 8000e82:	f7ff ff29 	bl	8000cd8 <__NVIC_SetPriorityGrouping>
}
 8000e86:	bf00      	nop
 8000e88:	3708      	adds	r7, #8
 8000e8a:	46bd      	mov	sp, r7
 8000e8c:	bd80      	pop	{r7, pc}

08000e8e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000e8e:	b580      	push	{r7, lr}
 8000e90:	b086      	sub	sp, #24
 8000e92:	af00      	add	r7, sp, #0
 8000e94:	4603      	mov	r3, r0
 8000e96:	60b9      	str	r1, [r7, #8]
 8000e98:	607a      	str	r2, [r7, #4]
 8000e9a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000e9c:	2300      	movs	r3, #0
 8000e9e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000ea0:	f7ff ff3e 	bl	8000d20 <__NVIC_GetPriorityGrouping>
 8000ea4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000ea6:	687a      	ldr	r2, [r7, #4]
 8000ea8:	68b9      	ldr	r1, [r7, #8]
 8000eaa:	6978      	ldr	r0, [r7, #20]
 8000eac:	f7ff ff8e 	bl	8000dcc <NVIC_EncodePriority>
 8000eb0:	4602      	mov	r2, r0
 8000eb2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000eb6:	4611      	mov	r1, r2
 8000eb8:	4618      	mov	r0, r3
 8000eba:	f7ff ff5d 	bl	8000d78 <__NVIC_SetPriority>
}
 8000ebe:	bf00      	nop
 8000ec0:	3718      	adds	r7, #24
 8000ec2:	46bd      	mov	sp, r7
 8000ec4:	bd80      	pop	{r7, pc}

08000ec6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ec6:	b580      	push	{r7, lr}
 8000ec8:	b082      	sub	sp, #8
 8000eca:	af00      	add	r7, sp, #0
 8000ecc:	4603      	mov	r3, r0
 8000ece:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000ed0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ed4:	4618      	mov	r0, r3
 8000ed6:	f7ff ff31 	bl	8000d3c <__NVIC_EnableIRQ>
}
 8000eda:	bf00      	nop
 8000edc:	3708      	adds	r7, #8
 8000ede:	46bd      	mov	sp, r7
 8000ee0:	bd80      	pop	{r7, pc}

08000ee2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000ee2:	b580      	push	{r7, lr}
 8000ee4:	b082      	sub	sp, #8
 8000ee6:	af00      	add	r7, sp, #0
 8000ee8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000eea:	6878      	ldr	r0, [r7, #4]
 8000eec:	f7ff ffa2 	bl	8000e34 <SysTick_Config>
 8000ef0:	4603      	mov	r3, r0
}
 8000ef2:	4618      	mov	r0, r3
 8000ef4:	3708      	adds	r7, #8
 8000ef6:	46bd      	mov	sp, r7
 8000ef8:	bd80      	pop	{r7, pc}
	...

08000efc <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000efc:	b580      	push	{r7, lr}
 8000efe:	b086      	sub	sp, #24
 8000f00:	af00      	add	r7, sp, #0
 8000f02:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8000f04:	2300      	movs	r3, #0
 8000f06:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8000f08:	f7ff feda 	bl	8000cc0 <HAL_GetTick>
 8000f0c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	2b00      	cmp	r3, #0
 8000f12:	d101      	bne.n	8000f18 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8000f14:	2301      	movs	r3, #1
 8000f16:	e099      	b.n	800104c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	2202      	movs	r2, #2
 8000f1c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	2200      	movs	r2, #0
 8000f24:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	681a      	ldr	r2, [r3, #0]
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	681b      	ldr	r3, [r3, #0]
 8000f32:	f022 0201 	bic.w	r2, r2, #1
 8000f36:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000f38:	e00f      	b.n	8000f5a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8000f3a:	f7ff fec1 	bl	8000cc0 <HAL_GetTick>
 8000f3e:	4602      	mov	r2, r0
 8000f40:	693b      	ldr	r3, [r7, #16]
 8000f42:	1ad3      	subs	r3, r2, r3
 8000f44:	2b05      	cmp	r3, #5
 8000f46:	d908      	bls.n	8000f5a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	2220      	movs	r2, #32
 8000f4c:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	2203      	movs	r2, #3
 8000f52:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8000f56:	2303      	movs	r3, #3
 8000f58:	e078      	b.n	800104c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	681b      	ldr	r3, [r3, #0]
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	f003 0301 	and.w	r3, r3, #1
 8000f64:	2b00      	cmp	r3, #0
 8000f66:	d1e8      	bne.n	8000f3a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	681b      	ldr	r3, [r3, #0]
 8000f6e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8000f70:	697a      	ldr	r2, [r7, #20]
 8000f72:	4b38      	ldr	r3, [pc, #224]	@ (8001054 <HAL_DMA_Init+0x158>)
 8000f74:	4013      	ands	r3, r2
 8000f76:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	685a      	ldr	r2, [r3, #4]
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	689b      	ldr	r3, [r3, #8]
 8000f80:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8000f86:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	691b      	ldr	r3, [r3, #16]
 8000f8c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000f92:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	699b      	ldr	r3, [r3, #24]
 8000f98:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000f9e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	6a1b      	ldr	r3, [r3, #32]
 8000fa4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8000fa6:	697a      	ldr	r2, [r7, #20]
 8000fa8:	4313      	orrs	r3, r2
 8000faa:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000fb0:	2b04      	cmp	r3, #4
 8000fb2:	d107      	bne.n	8000fc4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fbc:	4313      	orrs	r3, r2
 8000fbe:	697a      	ldr	r2, [r7, #20]
 8000fc0:	4313      	orrs	r3, r2
 8000fc2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	697a      	ldr	r2, [r7, #20]
 8000fca:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	695b      	ldr	r3, [r3, #20]
 8000fd2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8000fd4:	697b      	ldr	r3, [r7, #20]
 8000fd6:	f023 0307 	bic.w	r3, r3, #7
 8000fda:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000fe0:	697a      	ldr	r2, [r7, #20]
 8000fe2:	4313      	orrs	r3, r2
 8000fe4:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000fea:	2b04      	cmp	r3, #4
 8000fec:	d117      	bne.n	800101e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000ff2:	697a      	ldr	r2, [r7, #20]
 8000ff4:	4313      	orrs	r3, r2
 8000ff6:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	d00e      	beq.n	800101e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001000:	6878      	ldr	r0, [r7, #4]
 8001002:	f000 fa7b 	bl	80014fc <DMA_CheckFifoParam>
 8001006:	4603      	mov	r3, r0
 8001008:	2b00      	cmp	r3, #0
 800100a:	d008      	beq.n	800101e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	2240      	movs	r2, #64	@ 0x40
 8001010:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	2201      	movs	r2, #1
 8001016:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 800101a:	2301      	movs	r3, #1
 800101c:	e016      	b.n	800104c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	681b      	ldr	r3, [r3, #0]
 8001022:	697a      	ldr	r2, [r7, #20]
 8001024:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001026:	6878      	ldr	r0, [r7, #4]
 8001028:	f000 fa32 	bl	8001490 <DMA_CalcBaseAndBitshift>
 800102c:	4603      	mov	r3, r0
 800102e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001034:	223f      	movs	r2, #63	@ 0x3f
 8001036:	409a      	lsls	r2, r3
 8001038:	68fb      	ldr	r3, [r7, #12]
 800103a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	2200      	movs	r2, #0
 8001040:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	2201      	movs	r2, #1
 8001046:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 800104a:	2300      	movs	r3, #0
}
 800104c:	4618      	mov	r0, r3
 800104e:	3718      	adds	r7, #24
 8001050:	46bd      	mov	sp, r7
 8001052:	bd80      	pop	{r7, pc}
 8001054:	f010803f 	.word	0xf010803f

08001058 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001058:	b580      	push	{r7, lr}
 800105a:	b084      	sub	sp, #16
 800105c:	af00      	add	r7, sp, #0
 800105e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001064:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001066:	f7ff fe2b 	bl	8000cc0 <HAL_GetTick>
 800106a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001072:	b2db      	uxtb	r3, r3
 8001074:	2b02      	cmp	r3, #2
 8001076:	d008      	beq.n	800108a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	2280      	movs	r2, #128	@ 0x80
 800107c:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	2200      	movs	r2, #0
 8001082:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8001086:	2301      	movs	r3, #1
 8001088:	e052      	b.n	8001130 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	681a      	ldr	r2, [r3, #0]
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	f022 0216 	bic.w	r2, r2, #22
 8001098:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	695a      	ldr	r2, [r3, #20]
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80010a8:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	d103      	bne.n	80010ba <HAL_DMA_Abort+0x62>
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	d007      	beq.n	80010ca <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	681a      	ldr	r2, [r3, #0]
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	f022 0208 	bic.w	r2, r2, #8
 80010c8:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	681a      	ldr	r2, [r3, #0]
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	f022 0201 	bic.w	r2, r2, #1
 80010d8:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80010da:	e013      	b.n	8001104 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80010dc:	f7ff fdf0 	bl	8000cc0 <HAL_GetTick>
 80010e0:	4602      	mov	r2, r0
 80010e2:	68bb      	ldr	r3, [r7, #8]
 80010e4:	1ad3      	subs	r3, r2, r3
 80010e6:	2b05      	cmp	r3, #5
 80010e8:	d90c      	bls.n	8001104 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	2220      	movs	r2, #32
 80010ee:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	2203      	movs	r2, #3
 80010f4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	2200      	movs	r2, #0
 80010fc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8001100:	2303      	movs	r3, #3
 8001102:	e015      	b.n	8001130 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	f003 0301 	and.w	r3, r3, #1
 800110e:	2b00      	cmp	r3, #0
 8001110:	d1e4      	bne.n	80010dc <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001116:	223f      	movs	r2, #63	@ 0x3f
 8001118:	409a      	lsls	r2, r3
 800111a:	68fb      	ldr	r3, [r7, #12]
 800111c:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	2201      	movs	r2, #1
 8001122:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	2200      	movs	r2, #0
 800112a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 800112e:	2300      	movs	r3, #0
}
 8001130:	4618      	mov	r0, r3
 8001132:	3710      	adds	r7, #16
 8001134:	46bd      	mov	sp, r7
 8001136:	bd80      	pop	{r7, pc}

08001138 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001138:	b480      	push	{r7}
 800113a:	b083      	sub	sp, #12
 800113c:	af00      	add	r7, sp, #0
 800113e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001146:	b2db      	uxtb	r3, r3
 8001148:	2b02      	cmp	r3, #2
 800114a:	d004      	beq.n	8001156 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	2280      	movs	r2, #128	@ 0x80
 8001150:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8001152:	2301      	movs	r3, #1
 8001154:	e00c      	b.n	8001170 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	2205      	movs	r2, #5
 800115a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	681a      	ldr	r2, [r3, #0]
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	f022 0201 	bic.w	r2, r2, #1
 800116c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800116e:	2300      	movs	r3, #0
}
 8001170:	4618      	mov	r0, r3
 8001172:	370c      	adds	r7, #12
 8001174:	46bd      	mov	sp, r7
 8001176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800117a:	4770      	bx	lr

0800117c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800117c:	b580      	push	{r7, lr}
 800117e:	b086      	sub	sp, #24
 8001180:	af00      	add	r7, sp, #0
 8001182:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001184:	2300      	movs	r3, #0
 8001186:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001188:	4b8e      	ldr	r3, [pc, #568]	@ (80013c4 <HAL_DMA_IRQHandler+0x248>)
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	4a8e      	ldr	r2, [pc, #568]	@ (80013c8 <HAL_DMA_IRQHandler+0x24c>)
 800118e:	fba2 2303 	umull	r2, r3, r2, r3
 8001192:	0a9b      	lsrs	r3, r3, #10
 8001194:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800119a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800119c:	693b      	ldr	r3, [r7, #16]
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80011a6:	2208      	movs	r2, #8
 80011a8:	409a      	lsls	r2, r3
 80011aa:	68fb      	ldr	r3, [r7, #12]
 80011ac:	4013      	ands	r3, r2
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d01a      	beq.n	80011e8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	f003 0304 	and.w	r3, r3, #4
 80011bc:	2b00      	cmp	r3, #0
 80011be:	d013      	beq.n	80011e8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	681a      	ldr	r2, [r3, #0]
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	f022 0204 	bic.w	r2, r2, #4
 80011ce:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80011d4:	2208      	movs	r2, #8
 80011d6:	409a      	lsls	r2, r3
 80011d8:	693b      	ldr	r3, [r7, #16]
 80011da:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80011e0:	f043 0201 	orr.w	r2, r3, #1
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80011ec:	2201      	movs	r2, #1
 80011ee:	409a      	lsls	r2, r3
 80011f0:	68fb      	ldr	r3, [r7, #12]
 80011f2:	4013      	ands	r3, r2
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	d012      	beq.n	800121e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	695b      	ldr	r3, [r3, #20]
 80011fe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001202:	2b00      	cmp	r3, #0
 8001204:	d00b      	beq.n	800121e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800120a:	2201      	movs	r2, #1
 800120c:	409a      	lsls	r2, r3
 800120e:	693b      	ldr	r3, [r7, #16]
 8001210:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001216:	f043 0202 	orr.w	r2, r3, #2
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001222:	2204      	movs	r2, #4
 8001224:	409a      	lsls	r2, r3
 8001226:	68fb      	ldr	r3, [r7, #12]
 8001228:	4013      	ands	r3, r2
 800122a:	2b00      	cmp	r3, #0
 800122c:	d012      	beq.n	8001254 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	f003 0302 	and.w	r3, r3, #2
 8001238:	2b00      	cmp	r3, #0
 800123a:	d00b      	beq.n	8001254 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001240:	2204      	movs	r2, #4
 8001242:	409a      	lsls	r2, r3
 8001244:	693b      	ldr	r3, [r7, #16]
 8001246:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800124c:	f043 0204 	orr.w	r2, r3, #4
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001258:	2210      	movs	r2, #16
 800125a:	409a      	lsls	r2, r3
 800125c:	68fb      	ldr	r3, [r7, #12]
 800125e:	4013      	ands	r3, r2
 8001260:	2b00      	cmp	r3, #0
 8001262:	d043      	beq.n	80012ec <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	f003 0308 	and.w	r3, r3, #8
 800126e:	2b00      	cmp	r3, #0
 8001270:	d03c      	beq.n	80012ec <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001276:	2210      	movs	r2, #16
 8001278:	409a      	lsls	r2, r3
 800127a:	693b      	ldr	r3, [r7, #16]
 800127c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001288:	2b00      	cmp	r3, #0
 800128a:	d018      	beq.n	80012be <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001296:	2b00      	cmp	r3, #0
 8001298:	d108      	bne.n	80012ac <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d024      	beq.n	80012ec <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012a6:	6878      	ldr	r0, [r7, #4]
 80012a8:	4798      	blx	r3
 80012aa:	e01f      	b.n	80012ec <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d01b      	beq.n	80012ec <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80012b8:	6878      	ldr	r0, [r7, #4]
 80012ba:	4798      	blx	r3
 80012bc:	e016      	b.n	80012ec <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d107      	bne.n	80012dc <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	681a      	ldr	r2, [r3, #0]
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	f022 0208 	bic.w	r2, r2, #8
 80012da:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d003      	beq.n	80012ec <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012e8:	6878      	ldr	r0, [r7, #4]
 80012ea:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80012f0:	2220      	movs	r2, #32
 80012f2:	409a      	lsls	r2, r3
 80012f4:	68fb      	ldr	r3, [r7, #12]
 80012f6:	4013      	ands	r3, r2
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	f000 808f 	beq.w	800141c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	f003 0310 	and.w	r3, r3, #16
 8001308:	2b00      	cmp	r3, #0
 800130a:	f000 8087 	beq.w	800141c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001312:	2220      	movs	r2, #32
 8001314:	409a      	lsls	r2, r3
 8001316:	693b      	ldr	r3, [r7, #16]
 8001318:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001320:	b2db      	uxtb	r3, r3
 8001322:	2b05      	cmp	r3, #5
 8001324:	d136      	bne.n	8001394 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	681a      	ldr	r2, [r3, #0]
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	f022 0216 	bic.w	r2, r2, #22
 8001334:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	695a      	ldr	r2, [r3, #20]
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001344:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800134a:	2b00      	cmp	r3, #0
 800134c:	d103      	bne.n	8001356 <HAL_DMA_IRQHandler+0x1da>
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001352:	2b00      	cmp	r3, #0
 8001354:	d007      	beq.n	8001366 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	681a      	ldr	r2, [r3, #0]
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	f022 0208 	bic.w	r2, r2, #8
 8001364:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800136a:	223f      	movs	r2, #63	@ 0x3f
 800136c:	409a      	lsls	r2, r3
 800136e:	693b      	ldr	r3, [r7, #16]
 8001370:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	2201      	movs	r2, #1
 8001376:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	2200      	movs	r2, #0
 800137e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001386:	2b00      	cmp	r3, #0
 8001388:	d07e      	beq.n	8001488 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800138e:	6878      	ldr	r0, [r7, #4]
 8001390:	4798      	blx	r3
        }
        return;
 8001392:	e079      	b.n	8001488 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d01d      	beq.n	80013de <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d10d      	bne.n	80013cc <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	d031      	beq.n	800141c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80013bc:	6878      	ldr	r0, [r7, #4]
 80013be:	4798      	blx	r3
 80013c0:	e02c      	b.n	800141c <HAL_DMA_IRQHandler+0x2a0>
 80013c2:	bf00      	nop
 80013c4:	20000000 	.word	0x20000000
 80013c8:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	d023      	beq.n	800141c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80013d8:	6878      	ldr	r0, [r7, #4]
 80013da:	4798      	blx	r3
 80013dc:	e01e      	b.n	800141c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d10f      	bne.n	800140c <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	681a      	ldr	r2, [r3, #0]
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	f022 0210 	bic.w	r2, r2, #16
 80013fa:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	2201      	movs	r2, #1
 8001400:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	2200      	movs	r2, #0
 8001408:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001410:	2b00      	cmp	r3, #0
 8001412:	d003      	beq.n	800141c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001418:	6878      	ldr	r0, [r7, #4]
 800141a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001420:	2b00      	cmp	r3, #0
 8001422:	d032      	beq.n	800148a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001428:	f003 0301 	and.w	r3, r3, #1
 800142c:	2b00      	cmp	r3, #0
 800142e:	d022      	beq.n	8001476 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	2205      	movs	r2, #5
 8001434:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	681a      	ldr	r2, [r3, #0]
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	f022 0201 	bic.w	r2, r2, #1
 8001446:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001448:	68bb      	ldr	r3, [r7, #8]
 800144a:	3301      	adds	r3, #1
 800144c:	60bb      	str	r3, [r7, #8]
 800144e:	697a      	ldr	r2, [r7, #20]
 8001450:	429a      	cmp	r2, r3
 8001452:	d307      	bcc.n	8001464 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	f003 0301 	and.w	r3, r3, #1
 800145e:	2b00      	cmp	r3, #0
 8001460:	d1f2      	bne.n	8001448 <HAL_DMA_IRQHandler+0x2cc>
 8001462:	e000      	b.n	8001466 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8001464:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	2201      	movs	r2, #1
 800146a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	2200      	movs	r2, #0
 8001472:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800147a:	2b00      	cmp	r3, #0
 800147c:	d005      	beq.n	800148a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001482:	6878      	ldr	r0, [r7, #4]
 8001484:	4798      	blx	r3
 8001486:	e000      	b.n	800148a <HAL_DMA_IRQHandler+0x30e>
        return;
 8001488:	bf00      	nop
    }
  }
}
 800148a:	3718      	adds	r7, #24
 800148c:	46bd      	mov	sp, r7
 800148e:	bd80      	pop	{r7, pc}

08001490 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001490:	b480      	push	{r7}
 8001492:	b085      	sub	sp, #20
 8001494:	af00      	add	r7, sp, #0
 8001496:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	b2db      	uxtb	r3, r3
 800149e:	3b10      	subs	r3, #16
 80014a0:	4a14      	ldr	r2, [pc, #80]	@ (80014f4 <DMA_CalcBaseAndBitshift+0x64>)
 80014a2:	fba2 2303 	umull	r2, r3, r2, r3
 80014a6:	091b      	lsrs	r3, r3, #4
 80014a8:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80014aa:	4a13      	ldr	r2, [pc, #76]	@ (80014f8 <DMA_CalcBaseAndBitshift+0x68>)
 80014ac:	68fb      	ldr	r3, [r7, #12]
 80014ae:	4413      	add	r3, r2
 80014b0:	781b      	ldrb	r3, [r3, #0]
 80014b2:	461a      	mov	r2, r3
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 80014b8:	68fb      	ldr	r3, [r7, #12]
 80014ba:	2b03      	cmp	r3, #3
 80014bc:	d909      	bls.n	80014d2 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80014c6:	f023 0303 	bic.w	r3, r3, #3
 80014ca:	1d1a      	adds	r2, r3, #4
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	659a      	str	r2, [r3, #88]	@ 0x58
 80014d0:	e007      	b.n	80014e2 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80014da:	f023 0303 	bic.w	r3, r3, #3
 80014de:	687a      	ldr	r2, [r7, #4]
 80014e0:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 80014e6:	4618      	mov	r0, r3
 80014e8:	3714      	adds	r7, #20
 80014ea:	46bd      	mov	sp, r7
 80014ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f0:	4770      	bx	lr
 80014f2:	bf00      	nop
 80014f4:	aaaaaaab 	.word	0xaaaaaaab
 80014f8:	08003ad0 	.word	0x08003ad0

080014fc <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80014fc:	b480      	push	{r7}
 80014fe:	b085      	sub	sp, #20
 8001500:	af00      	add	r7, sp, #0
 8001502:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001504:	2300      	movs	r3, #0
 8001506:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800150c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	699b      	ldr	r3, [r3, #24]
 8001512:	2b00      	cmp	r3, #0
 8001514:	d11f      	bne.n	8001556 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8001516:	68bb      	ldr	r3, [r7, #8]
 8001518:	2b03      	cmp	r3, #3
 800151a:	d856      	bhi.n	80015ca <DMA_CheckFifoParam+0xce>
 800151c:	a201      	add	r2, pc, #4	@ (adr r2, 8001524 <DMA_CheckFifoParam+0x28>)
 800151e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001522:	bf00      	nop
 8001524:	08001535 	.word	0x08001535
 8001528:	08001547 	.word	0x08001547
 800152c:	08001535 	.word	0x08001535
 8001530:	080015cb 	.word	0x080015cb
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001538:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800153c:	2b00      	cmp	r3, #0
 800153e:	d046      	beq.n	80015ce <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8001540:	2301      	movs	r3, #1
 8001542:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001544:	e043      	b.n	80015ce <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800154a:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800154e:	d140      	bne.n	80015d2 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8001550:	2301      	movs	r3, #1
 8001552:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001554:	e03d      	b.n	80015d2 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	699b      	ldr	r3, [r3, #24]
 800155a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800155e:	d121      	bne.n	80015a4 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8001560:	68bb      	ldr	r3, [r7, #8]
 8001562:	2b03      	cmp	r3, #3
 8001564:	d837      	bhi.n	80015d6 <DMA_CheckFifoParam+0xda>
 8001566:	a201      	add	r2, pc, #4	@ (adr r2, 800156c <DMA_CheckFifoParam+0x70>)
 8001568:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800156c:	0800157d 	.word	0x0800157d
 8001570:	08001583 	.word	0x08001583
 8001574:	0800157d 	.word	0x0800157d
 8001578:	08001595 	.word	0x08001595
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800157c:	2301      	movs	r3, #1
 800157e:	73fb      	strb	r3, [r7, #15]
      break;
 8001580:	e030      	b.n	80015e4 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001586:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800158a:	2b00      	cmp	r3, #0
 800158c:	d025      	beq.n	80015da <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800158e:	2301      	movs	r3, #1
 8001590:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001592:	e022      	b.n	80015da <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001598:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800159c:	d11f      	bne.n	80015de <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800159e:	2301      	movs	r3, #1
 80015a0:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80015a2:	e01c      	b.n	80015de <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80015a4:	68bb      	ldr	r3, [r7, #8]
 80015a6:	2b02      	cmp	r3, #2
 80015a8:	d903      	bls.n	80015b2 <DMA_CheckFifoParam+0xb6>
 80015aa:	68bb      	ldr	r3, [r7, #8]
 80015ac:	2b03      	cmp	r3, #3
 80015ae:	d003      	beq.n	80015b8 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80015b0:	e018      	b.n	80015e4 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80015b2:	2301      	movs	r3, #1
 80015b4:	73fb      	strb	r3, [r7, #15]
      break;
 80015b6:	e015      	b.n	80015e4 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80015bc:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d00e      	beq.n	80015e2 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80015c4:	2301      	movs	r3, #1
 80015c6:	73fb      	strb	r3, [r7, #15]
      break;
 80015c8:	e00b      	b.n	80015e2 <DMA_CheckFifoParam+0xe6>
      break;
 80015ca:	bf00      	nop
 80015cc:	e00a      	b.n	80015e4 <DMA_CheckFifoParam+0xe8>
      break;
 80015ce:	bf00      	nop
 80015d0:	e008      	b.n	80015e4 <DMA_CheckFifoParam+0xe8>
      break;
 80015d2:	bf00      	nop
 80015d4:	e006      	b.n	80015e4 <DMA_CheckFifoParam+0xe8>
      break;
 80015d6:	bf00      	nop
 80015d8:	e004      	b.n	80015e4 <DMA_CheckFifoParam+0xe8>
      break;
 80015da:	bf00      	nop
 80015dc:	e002      	b.n	80015e4 <DMA_CheckFifoParam+0xe8>
      break;   
 80015de:	bf00      	nop
 80015e0:	e000      	b.n	80015e4 <DMA_CheckFifoParam+0xe8>
      break;
 80015e2:	bf00      	nop
    }
  } 
  
  return status; 
 80015e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80015e6:	4618      	mov	r0, r3
 80015e8:	3714      	adds	r7, #20
 80015ea:	46bd      	mov	sp, r7
 80015ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f0:	4770      	bx	lr
 80015f2:	bf00      	nop

080015f4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80015f4:	b480      	push	{r7}
 80015f6:	b089      	sub	sp, #36	@ 0x24
 80015f8:	af00      	add	r7, sp, #0
 80015fa:	6078      	str	r0, [r7, #4]
 80015fc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80015fe:	2300      	movs	r3, #0
 8001600:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001602:	2300      	movs	r3, #0
 8001604:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001606:	2300      	movs	r3, #0
 8001608:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800160a:	2300      	movs	r3, #0
 800160c:	61fb      	str	r3, [r7, #28]
 800160e:	e16b      	b.n	80018e8 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001610:	2201      	movs	r2, #1
 8001612:	69fb      	ldr	r3, [r7, #28]
 8001614:	fa02 f303 	lsl.w	r3, r2, r3
 8001618:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800161a:	683b      	ldr	r3, [r7, #0]
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	697a      	ldr	r2, [r7, #20]
 8001620:	4013      	ands	r3, r2
 8001622:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001624:	693a      	ldr	r2, [r7, #16]
 8001626:	697b      	ldr	r3, [r7, #20]
 8001628:	429a      	cmp	r2, r3
 800162a:	f040 815a 	bne.w	80018e2 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800162e:	683b      	ldr	r3, [r7, #0]
 8001630:	685b      	ldr	r3, [r3, #4]
 8001632:	f003 0303 	and.w	r3, r3, #3
 8001636:	2b01      	cmp	r3, #1
 8001638:	d005      	beq.n	8001646 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800163a:	683b      	ldr	r3, [r7, #0]
 800163c:	685b      	ldr	r3, [r3, #4]
 800163e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001642:	2b02      	cmp	r3, #2
 8001644:	d130      	bne.n	80016a8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	689b      	ldr	r3, [r3, #8]
 800164a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800164c:	69fb      	ldr	r3, [r7, #28]
 800164e:	005b      	lsls	r3, r3, #1
 8001650:	2203      	movs	r2, #3
 8001652:	fa02 f303 	lsl.w	r3, r2, r3
 8001656:	43db      	mvns	r3, r3
 8001658:	69ba      	ldr	r2, [r7, #24]
 800165a:	4013      	ands	r3, r2
 800165c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800165e:	683b      	ldr	r3, [r7, #0]
 8001660:	68da      	ldr	r2, [r3, #12]
 8001662:	69fb      	ldr	r3, [r7, #28]
 8001664:	005b      	lsls	r3, r3, #1
 8001666:	fa02 f303 	lsl.w	r3, r2, r3
 800166a:	69ba      	ldr	r2, [r7, #24]
 800166c:	4313      	orrs	r3, r2
 800166e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	69ba      	ldr	r2, [r7, #24]
 8001674:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	685b      	ldr	r3, [r3, #4]
 800167a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800167c:	2201      	movs	r2, #1
 800167e:	69fb      	ldr	r3, [r7, #28]
 8001680:	fa02 f303 	lsl.w	r3, r2, r3
 8001684:	43db      	mvns	r3, r3
 8001686:	69ba      	ldr	r2, [r7, #24]
 8001688:	4013      	ands	r3, r2
 800168a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800168c:	683b      	ldr	r3, [r7, #0]
 800168e:	685b      	ldr	r3, [r3, #4]
 8001690:	091b      	lsrs	r3, r3, #4
 8001692:	f003 0201 	and.w	r2, r3, #1
 8001696:	69fb      	ldr	r3, [r7, #28]
 8001698:	fa02 f303 	lsl.w	r3, r2, r3
 800169c:	69ba      	ldr	r2, [r7, #24]
 800169e:	4313      	orrs	r3, r2
 80016a0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	69ba      	ldr	r2, [r7, #24]
 80016a6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80016a8:	683b      	ldr	r3, [r7, #0]
 80016aa:	685b      	ldr	r3, [r3, #4]
 80016ac:	f003 0303 	and.w	r3, r3, #3
 80016b0:	2b03      	cmp	r3, #3
 80016b2:	d017      	beq.n	80016e4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	68db      	ldr	r3, [r3, #12]
 80016b8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80016ba:	69fb      	ldr	r3, [r7, #28]
 80016bc:	005b      	lsls	r3, r3, #1
 80016be:	2203      	movs	r2, #3
 80016c0:	fa02 f303 	lsl.w	r3, r2, r3
 80016c4:	43db      	mvns	r3, r3
 80016c6:	69ba      	ldr	r2, [r7, #24]
 80016c8:	4013      	ands	r3, r2
 80016ca:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80016cc:	683b      	ldr	r3, [r7, #0]
 80016ce:	689a      	ldr	r2, [r3, #8]
 80016d0:	69fb      	ldr	r3, [r7, #28]
 80016d2:	005b      	lsls	r3, r3, #1
 80016d4:	fa02 f303 	lsl.w	r3, r2, r3
 80016d8:	69ba      	ldr	r2, [r7, #24]
 80016da:	4313      	orrs	r3, r2
 80016dc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	69ba      	ldr	r2, [r7, #24]
 80016e2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80016e4:	683b      	ldr	r3, [r7, #0]
 80016e6:	685b      	ldr	r3, [r3, #4]
 80016e8:	f003 0303 	and.w	r3, r3, #3
 80016ec:	2b02      	cmp	r3, #2
 80016ee:	d123      	bne.n	8001738 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80016f0:	69fb      	ldr	r3, [r7, #28]
 80016f2:	08da      	lsrs	r2, r3, #3
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	3208      	adds	r2, #8
 80016f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80016fc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80016fe:	69fb      	ldr	r3, [r7, #28]
 8001700:	f003 0307 	and.w	r3, r3, #7
 8001704:	009b      	lsls	r3, r3, #2
 8001706:	220f      	movs	r2, #15
 8001708:	fa02 f303 	lsl.w	r3, r2, r3
 800170c:	43db      	mvns	r3, r3
 800170e:	69ba      	ldr	r2, [r7, #24]
 8001710:	4013      	ands	r3, r2
 8001712:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001714:	683b      	ldr	r3, [r7, #0]
 8001716:	691a      	ldr	r2, [r3, #16]
 8001718:	69fb      	ldr	r3, [r7, #28]
 800171a:	f003 0307 	and.w	r3, r3, #7
 800171e:	009b      	lsls	r3, r3, #2
 8001720:	fa02 f303 	lsl.w	r3, r2, r3
 8001724:	69ba      	ldr	r2, [r7, #24]
 8001726:	4313      	orrs	r3, r2
 8001728:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800172a:	69fb      	ldr	r3, [r7, #28]
 800172c:	08da      	lsrs	r2, r3, #3
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	3208      	adds	r2, #8
 8001732:	69b9      	ldr	r1, [r7, #24]
 8001734:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800173e:	69fb      	ldr	r3, [r7, #28]
 8001740:	005b      	lsls	r3, r3, #1
 8001742:	2203      	movs	r2, #3
 8001744:	fa02 f303 	lsl.w	r3, r2, r3
 8001748:	43db      	mvns	r3, r3
 800174a:	69ba      	ldr	r2, [r7, #24]
 800174c:	4013      	ands	r3, r2
 800174e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001750:	683b      	ldr	r3, [r7, #0]
 8001752:	685b      	ldr	r3, [r3, #4]
 8001754:	f003 0203 	and.w	r2, r3, #3
 8001758:	69fb      	ldr	r3, [r7, #28]
 800175a:	005b      	lsls	r3, r3, #1
 800175c:	fa02 f303 	lsl.w	r3, r2, r3
 8001760:	69ba      	ldr	r2, [r7, #24]
 8001762:	4313      	orrs	r3, r2
 8001764:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	69ba      	ldr	r2, [r7, #24]
 800176a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800176c:	683b      	ldr	r3, [r7, #0]
 800176e:	685b      	ldr	r3, [r3, #4]
 8001770:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001774:	2b00      	cmp	r3, #0
 8001776:	f000 80b4 	beq.w	80018e2 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800177a:	2300      	movs	r3, #0
 800177c:	60fb      	str	r3, [r7, #12]
 800177e:	4b60      	ldr	r3, [pc, #384]	@ (8001900 <HAL_GPIO_Init+0x30c>)
 8001780:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001782:	4a5f      	ldr	r2, [pc, #380]	@ (8001900 <HAL_GPIO_Init+0x30c>)
 8001784:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001788:	6453      	str	r3, [r2, #68]	@ 0x44
 800178a:	4b5d      	ldr	r3, [pc, #372]	@ (8001900 <HAL_GPIO_Init+0x30c>)
 800178c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800178e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001792:	60fb      	str	r3, [r7, #12]
 8001794:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001796:	4a5b      	ldr	r2, [pc, #364]	@ (8001904 <HAL_GPIO_Init+0x310>)
 8001798:	69fb      	ldr	r3, [r7, #28]
 800179a:	089b      	lsrs	r3, r3, #2
 800179c:	3302      	adds	r3, #2
 800179e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80017a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80017a4:	69fb      	ldr	r3, [r7, #28]
 80017a6:	f003 0303 	and.w	r3, r3, #3
 80017aa:	009b      	lsls	r3, r3, #2
 80017ac:	220f      	movs	r2, #15
 80017ae:	fa02 f303 	lsl.w	r3, r2, r3
 80017b2:	43db      	mvns	r3, r3
 80017b4:	69ba      	ldr	r2, [r7, #24]
 80017b6:	4013      	ands	r3, r2
 80017b8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	4a52      	ldr	r2, [pc, #328]	@ (8001908 <HAL_GPIO_Init+0x314>)
 80017be:	4293      	cmp	r3, r2
 80017c0:	d02b      	beq.n	800181a <HAL_GPIO_Init+0x226>
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	4a51      	ldr	r2, [pc, #324]	@ (800190c <HAL_GPIO_Init+0x318>)
 80017c6:	4293      	cmp	r3, r2
 80017c8:	d025      	beq.n	8001816 <HAL_GPIO_Init+0x222>
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	4a50      	ldr	r2, [pc, #320]	@ (8001910 <HAL_GPIO_Init+0x31c>)
 80017ce:	4293      	cmp	r3, r2
 80017d0:	d01f      	beq.n	8001812 <HAL_GPIO_Init+0x21e>
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	4a4f      	ldr	r2, [pc, #316]	@ (8001914 <HAL_GPIO_Init+0x320>)
 80017d6:	4293      	cmp	r3, r2
 80017d8:	d019      	beq.n	800180e <HAL_GPIO_Init+0x21a>
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	4a4e      	ldr	r2, [pc, #312]	@ (8001918 <HAL_GPIO_Init+0x324>)
 80017de:	4293      	cmp	r3, r2
 80017e0:	d013      	beq.n	800180a <HAL_GPIO_Init+0x216>
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	4a4d      	ldr	r2, [pc, #308]	@ (800191c <HAL_GPIO_Init+0x328>)
 80017e6:	4293      	cmp	r3, r2
 80017e8:	d00d      	beq.n	8001806 <HAL_GPIO_Init+0x212>
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	4a4c      	ldr	r2, [pc, #304]	@ (8001920 <HAL_GPIO_Init+0x32c>)
 80017ee:	4293      	cmp	r3, r2
 80017f0:	d007      	beq.n	8001802 <HAL_GPIO_Init+0x20e>
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	4a4b      	ldr	r2, [pc, #300]	@ (8001924 <HAL_GPIO_Init+0x330>)
 80017f6:	4293      	cmp	r3, r2
 80017f8:	d101      	bne.n	80017fe <HAL_GPIO_Init+0x20a>
 80017fa:	2307      	movs	r3, #7
 80017fc:	e00e      	b.n	800181c <HAL_GPIO_Init+0x228>
 80017fe:	2308      	movs	r3, #8
 8001800:	e00c      	b.n	800181c <HAL_GPIO_Init+0x228>
 8001802:	2306      	movs	r3, #6
 8001804:	e00a      	b.n	800181c <HAL_GPIO_Init+0x228>
 8001806:	2305      	movs	r3, #5
 8001808:	e008      	b.n	800181c <HAL_GPIO_Init+0x228>
 800180a:	2304      	movs	r3, #4
 800180c:	e006      	b.n	800181c <HAL_GPIO_Init+0x228>
 800180e:	2303      	movs	r3, #3
 8001810:	e004      	b.n	800181c <HAL_GPIO_Init+0x228>
 8001812:	2302      	movs	r3, #2
 8001814:	e002      	b.n	800181c <HAL_GPIO_Init+0x228>
 8001816:	2301      	movs	r3, #1
 8001818:	e000      	b.n	800181c <HAL_GPIO_Init+0x228>
 800181a:	2300      	movs	r3, #0
 800181c:	69fa      	ldr	r2, [r7, #28]
 800181e:	f002 0203 	and.w	r2, r2, #3
 8001822:	0092      	lsls	r2, r2, #2
 8001824:	4093      	lsls	r3, r2
 8001826:	69ba      	ldr	r2, [r7, #24]
 8001828:	4313      	orrs	r3, r2
 800182a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800182c:	4935      	ldr	r1, [pc, #212]	@ (8001904 <HAL_GPIO_Init+0x310>)
 800182e:	69fb      	ldr	r3, [r7, #28]
 8001830:	089b      	lsrs	r3, r3, #2
 8001832:	3302      	adds	r3, #2
 8001834:	69ba      	ldr	r2, [r7, #24]
 8001836:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800183a:	4b3b      	ldr	r3, [pc, #236]	@ (8001928 <HAL_GPIO_Init+0x334>)
 800183c:	689b      	ldr	r3, [r3, #8]
 800183e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001840:	693b      	ldr	r3, [r7, #16]
 8001842:	43db      	mvns	r3, r3
 8001844:	69ba      	ldr	r2, [r7, #24]
 8001846:	4013      	ands	r3, r2
 8001848:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800184a:	683b      	ldr	r3, [r7, #0]
 800184c:	685b      	ldr	r3, [r3, #4]
 800184e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001852:	2b00      	cmp	r3, #0
 8001854:	d003      	beq.n	800185e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001856:	69ba      	ldr	r2, [r7, #24]
 8001858:	693b      	ldr	r3, [r7, #16]
 800185a:	4313      	orrs	r3, r2
 800185c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800185e:	4a32      	ldr	r2, [pc, #200]	@ (8001928 <HAL_GPIO_Init+0x334>)
 8001860:	69bb      	ldr	r3, [r7, #24]
 8001862:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001864:	4b30      	ldr	r3, [pc, #192]	@ (8001928 <HAL_GPIO_Init+0x334>)
 8001866:	68db      	ldr	r3, [r3, #12]
 8001868:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800186a:	693b      	ldr	r3, [r7, #16]
 800186c:	43db      	mvns	r3, r3
 800186e:	69ba      	ldr	r2, [r7, #24]
 8001870:	4013      	ands	r3, r2
 8001872:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001874:	683b      	ldr	r3, [r7, #0]
 8001876:	685b      	ldr	r3, [r3, #4]
 8001878:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800187c:	2b00      	cmp	r3, #0
 800187e:	d003      	beq.n	8001888 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001880:	69ba      	ldr	r2, [r7, #24]
 8001882:	693b      	ldr	r3, [r7, #16]
 8001884:	4313      	orrs	r3, r2
 8001886:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001888:	4a27      	ldr	r2, [pc, #156]	@ (8001928 <HAL_GPIO_Init+0x334>)
 800188a:	69bb      	ldr	r3, [r7, #24]
 800188c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800188e:	4b26      	ldr	r3, [pc, #152]	@ (8001928 <HAL_GPIO_Init+0x334>)
 8001890:	685b      	ldr	r3, [r3, #4]
 8001892:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001894:	693b      	ldr	r3, [r7, #16]
 8001896:	43db      	mvns	r3, r3
 8001898:	69ba      	ldr	r2, [r7, #24]
 800189a:	4013      	ands	r3, r2
 800189c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800189e:	683b      	ldr	r3, [r7, #0]
 80018a0:	685b      	ldr	r3, [r3, #4]
 80018a2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d003      	beq.n	80018b2 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80018aa:	69ba      	ldr	r2, [r7, #24]
 80018ac:	693b      	ldr	r3, [r7, #16]
 80018ae:	4313      	orrs	r3, r2
 80018b0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80018b2:	4a1d      	ldr	r2, [pc, #116]	@ (8001928 <HAL_GPIO_Init+0x334>)
 80018b4:	69bb      	ldr	r3, [r7, #24]
 80018b6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80018b8:	4b1b      	ldr	r3, [pc, #108]	@ (8001928 <HAL_GPIO_Init+0x334>)
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80018be:	693b      	ldr	r3, [r7, #16]
 80018c0:	43db      	mvns	r3, r3
 80018c2:	69ba      	ldr	r2, [r7, #24]
 80018c4:	4013      	ands	r3, r2
 80018c6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80018c8:	683b      	ldr	r3, [r7, #0]
 80018ca:	685b      	ldr	r3, [r3, #4]
 80018cc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d003      	beq.n	80018dc <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80018d4:	69ba      	ldr	r2, [r7, #24]
 80018d6:	693b      	ldr	r3, [r7, #16]
 80018d8:	4313      	orrs	r3, r2
 80018da:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80018dc:	4a12      	ldr	r2, [pc, #72]	@ (8001928 <HAL_GPIO_Init+0x334>)
 80018de:	69bb      	ldr	r3, [r7, #24]
 80018e0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80018e2:	69fb      	ldr	r3, [r7, #28]
 80018e4:	3301      	adds	r3, #1
 80018e6:	61fb      	str	r3, [r7, #28]
 80018e8:	69fb      	ldr	r3, [r7, #28]
 80018ea:	2b0f      	cmp	r3, #15
 80018ec:	f67f ae90 	bls.w	8001610 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80018f0:	bf00      	nop
 80018f2:	bf00      	nop
 80018f4:	3724      	adds	r7, #36	@ 0x24
 80018f6:	46bd      	mov	sp, r7
 80018f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018fc:	4770      	bx	lr
 80018fe:	bf00      	nop
 8001900:	40023800 	.word	0x40023800
 8001904:	40013800 	.word	0x40013800
 8001908:	40020000 	.word	0x40020000
 800190c:	40020400 	.word	0x40020400
 8001910:	40020800 	.word	0x40020800
 8001914:	40020c00 	.word	0x40020c00
 8001918:	40021000 	.word	0x40021000
 800191c:	40021400 	.word	0x40021400
 8001920:	40021800 	.word	0x40021800
 8001924:	40021c00 	.word	0x40021c00
 8001928:	40013c00 	.word	0x40013c00

0800192c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800192c:	b580      	push	{r7, lr}
 800192e:	b086      	sub	sp, #24
 8001930:	af00      	add	r7, sp, #0
 8001932:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	2b00      	cmp	r3, #0
 8001938:	d101      	bne.n	800193e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800193a:	2301      	movs	r3, #1
 800193c:	e267      	b.n	8001e0e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	f003 0301 	and.w	r3, r3, #1
 8001946:	2b00      	cmp	r3, #0
 8001948:	d075      	beq.n	8001a36 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800194a:	4b88      	ldr	r3, [pc, #544]	@ (8001b6c <HAL_RCC_OscConfig+0x240>)
 800194c:	689b      	ldr	r3, [r3, #8]
 800194e:	f003 030c 	and.w	r3, r3, #12
 8001952:	2b04      	cmp	r3, #4
 8001954:	d00c      	beq.n	8001970 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001956:	4b85      	ldr	r3, [pc, #532]	@ (8001b6c <HAL_RCC_OscConfig+0x240>)
 8001958:	689b      	ldr	r3, [r3, #8]
 800195a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800195e:	2b08      	cmp	r3, #8
 8001960:	d112      	bne.n	8001988 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001962:	4b82      	ldr	r3, [pc, #520]	@ (8001b6c <HAL_RCC_OscConfig+0x240>)
 8001964:	685b      	ldr	r3, [r3, #4]
 8001966:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800196a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800196e:	d10b      	bne.n	8001988 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001970:	4b7e      	ldr	r3, [pc, #504]	@ (8001b6c <HAL_RCC_OscConfig+0x240>)
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001978:	2b00      	cmp	r3, #0
 800197a:	d05b      	beq.n	8001a34 <HAL_RCC_OscConfig+0x108>
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	685b      	ldr	r3, [r3, #4]
 8001980:	2b00      	cmp	r3, #0
 8001982:	d157      	bne.n	8001a34 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001984:	2301      	movs	r3, #1
 8001986:	e242      	b.n	8001e0e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	685b      	ldr	r3, [r3, #4]
 800198c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001990:	d106      	bne.n	80019a0 <HAL_RCC_OscConfig+0x74>
 8001992:	4b76      	ldr	r3, [pc, #472]	@ (8001b6c <HAL_RCC_OscConfig+0x240>)
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	4a75      	ldr	r2, [pc, #468]	@ (8001b6c <HAL_RCC_OscConfig+0x240>)
 8001998:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800199c:	6013      	str	r3, [r2, #0]
 800199e:	e01d      	b.n	80019dc <HAL_RCC_OscConfig+0xb0>
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	685b      	ldr	r3, [r3, #4]
 80019a4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80019a8:	d10c      	bne.n	80019c4 <HAL_RCC_OscConfig+0x98>
 80019aa:	4b70      	ldr	r3, [pc, #448]	@ (8001b6c <HAL_RCC_OscConfig+0x240>)
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	4a6f      	ldr	r2, [pc, #444]	@ (8001b6c <HAL_RCC_OscConfig+0x240>)
 80019b0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80019b4:	6013      	str	r3, [r2, #0]
 80019b6:	4b6d      	ldr	r3, [pc, #436]	@ (8001b6c <HAL_RCC_OscConfig+0x240>)
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	4a6c      	ldr	r2, [pc, #432]	@ (8001b6c <HAL_RCC_OscConfig+0x240>)
 80019bc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80019c0:	6013      	str	r3, [r2, #0]
 80019c2:	e00b      	b.n	80019dc <HAL_RCC_OscConfig+0xb0>
 80019c4:	4b69      	ldr	r3, [pc, #420]	@ (8001b6c <HAL_RCC_OscConfig+0x240>)
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	4a68      	ldr	r2, [pc, #416]	@ (8001b6c <HAL_RCC_OscConfig+0x240>)
 80019ca:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80019ce:	6013      	str	r3, [r2, #0]
 80019d0:	4b66      	ldr	r3, [pc, #408]	@ (8001b6c <HAL_RCC_OscConfig+0x240>)
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	4a65      	ldr	r2, [pc, #404]	@ (8001b6c <HAL_RCC_OscConfig+0x240>)
 80019d6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80019da:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	685b      	ldr	r3, [r3, #4]
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d013      	beq.n	8001a0c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019e4:	f7ff f96c 	bl	8000cc0 <HAL_GetTick>
 80019e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80019ea:	e008      	b.n	80019fe <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80019ec:	f7ff f968 	bl	8000cc0 <HAL_GetTick>
 80019f0:	4602      	mov	r2, r0
 80019f2:	693b      	ldr	r3, [r7, #16]
 80019f4:	1ad3      	subs	r3, r2, r3
 80019f6:	2b64      	cmp	r3, #100	@ 0x64
 80019f8:	d901      	bls.n	80019fe <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80019fa:	2303      	movs	r3, #3
 80019fc:	e207      	b.n	8001e0e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80019fe:	4b5b      	ldr	r3, [pc, #364]	@ (8001b6c <HAL_RCC_OscConfig+0x240>)
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d0f0      	beq.n	80019ec <HAL_RCC_OscConfig+0xc0>
 8001a0a:	e014      	b.n	8001a36 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a0c:	f7ff f958 	bl	8000cc0 <HAL_GetTick>
 8001a10:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001a12:	e008      	b.n	8001a26 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001a14:	f7ff f954 	bl	8000cc0 <HAL_GetTick>
 8001a18:	4602      	mov	r2, r0
 8001a1a:	693b      	ldr	r3, [r7, #16]
 8001a1c:	1ad3      	subs	r3, r2, r3
 8001a1e:	2b64      	cmp	r3, #100	@ 0x64
 8001a20:	d901      	bls.n	8001a26 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001a22:	2303      	movs	r3, #3
 8001a24:	e1f3      	b.n	8001e0e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001a26:	4b51      	ldr	r3, [pc, #324]	@ (8001b6c <HAL_RCC_OscConfig+0x240>)
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d1f0      	bne.n	8001a14 <HAL_RCC_OscConfig+0xe8>
 8001a32:	e000      	b.n	8001a36 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a34:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	f003 0302 	and.w	r3, r3, #2
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d063      	beq.n	8001b0a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001a42:	4b4a      	ldr	r3, [pc, #296]	@ (8001b6c <HAL_RCC_OscConfig+0x240>)
 8001a44:	689b      	ldr	r3, [r3, #8]
 8001a46:	f003 030c 	and.w	r3, r3, #12
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d00b      	beq.n	8001a66 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001a4e:	4b47      	ldr	r3, [pc, #284]	@ (8001b6c <HAL_RCC_OscConfig+0x240>)
 8001a50:	689b      	ldr	r3, [r3, #8]
 8001a52:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001a56:	2b08      	cmp	r3, #8
 8001a58:	d11c      	bne.n	8001a94 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001a5a:	4b44      	ldr	r3, [pc, #272]	@ (8001b6c <HAL_RCC_OscConfig+0x240>)
 8001a5c:	685b      	ldr	r3, [r3, #4]
 8001a5e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d116      	bne.n	8001a94 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001a66:	4b41      	ldr	r3, [pc, #260]	@ (8001b6c <HAL_RCC_OscConfig+0x240>)
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	f003 0302 	and.w	r3, r3, #2
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d005      	beq.n	8001a7e <HAL_RCC_OscConfig+0x152>
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	68db      	ldr	r3, [r3, #12]
 8001a76:	2b01      	cmp	r3, #1
 8001a78:	d001      	beq.n	8001a7e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001a7a:	2301      	movs	r3, #1
 8001a7c:	e1c7      	b.n	8001e0e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a7e:	4b3b      	ldr	r3, [pc, #236]	@ (8001b6c <HAL_RCC_OscConfig+0x240>)
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	691b      	ldr	r3, [r3, #16]
 8001a8a:	00db      	lsls	r3, r3, #3
 8001a8c:	4937      	ldr	r1, [pc, #220]	@ (8001b6c <HAL_RCC_OscConfig+0x240>)
 8001a8e:	4313      	orrs	r3, r2
 8001a90:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001a92:	e03a      	b.n	8001b0a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	68db      	ldr	r3, [r3, #12]
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d020      	beq.n	8001ade <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001a9c:	4b34      	ldr	r3, [pc, #208]	@ (8001b70 <HAL_RCC_OscConfig+0x244>)
 8001a9e:	2201      	movs	r2, #1
 8001aa0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001aa2:	f7ff f90d 	bl	8000cc0 <HAL_GetTick>
 8001aa6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001aa8:	e008      	b.n	8001abc <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001aaa:	f7ff f909 	bl	8000cc0 <HAL_GetTick>
 8001aae:	4602      	mov	r2, r0
 8001ab0:	693b      	ldr	r3, [r7, #16]
 8001ab2:	1ad3      	subs	r3, r2, r3
 8001ab4:	2b02      	cmp	r3, #2
 8001ab6:	d901      	bls.n	8001abc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001ab8:	2303      	movs	r3, #3
 8001aba:	e1a8      	b.n	8001e0e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001abc:	4b2b      	ldr	r3, [pc, #172]	@ (8001b6c <HAL_RCC_OscConfig+0x240>)
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	f003 0302 	and.w	r3, r3, #2
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d0f0      	beq.n	8001aaa <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ac8:	4b28      	ldr	r3, [pc, #160]	@ (8001b6c <HAL_RCC_OscConfig+0x240>)
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	691b      	ldr	r3, [r3, #16]
 8001ad4:	00db      	lsls	r3, r3, #3
 8001ad6:	4925      	ldr	r1, [pc, #148]	@ (8001b6c <HAL_RCC_OscConfig+0x240>)
 8001ad8:	4313      	orrs	r3, r2
 8001ada:	600b      	str	r3, [r1, #0]
 8001adc:	e015      	b.n	8001b0a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001ade:	4b24      	ldr	r3, [pc, #144]	@ (8001b70 <HAL_RCC_OscConfig+0x244>)
 8001ae0:	2200      	movs	r2, #0
 8001ae2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ae4:	f7ff f8ec 	bl	8000cc0 <HAL_GetTick>
 8001ae8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001aea:	e008      	b.n	8001afe <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001aec:	f7ff f8e8 	bl	8000cc0 <HAL_GetTick>
 8001af0:	4602      	mov	r2, r0
 8001af2:	693b      	ldr	r3, [r7, #16]
 8001af4:	1ad3      	subs	r3, r2, r3
 8001af6:	2b02      	cmp	r3, #2
 8001af8:	d901      	bls.n	8001afe <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001afa:	2303      	movs	r3, #3
 8001afc:	e187      	b.n	8001e0e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001afe:	4b1b      	ldr	r3, [pc, #108]	@ (8001b6c <HAL_RCC_OscConfig+0x240>)
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	f003 0302 	and.w	r3, r3, #2
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d1f0      	bne.n	8001aec <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	f003 0308 	and.w	r3, r3, #8
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d036      	beq.n	8001b84 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	695b      	ldr	r3, [r3, #20]
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d016      	beq.n	8001b4c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001b1e:	4b15      	ldr	r3, [pc, #84]	@ (8001b74 <HAL_RCC_OscConfig+0x248>)
 8001b20:	2201      	movs	r2, #1
 8001b22:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b24:	f7ff f8cc 	bl	8000cc0 <HAL_GetTick>
 8001b28:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001b2a:	e008      	b.n	8001b3e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001b2c:	f7ff f8c8 	bl	8000cc0 <HAL_GetTick>
 8001b30:	4602      	mov	r2, r0
 8001b32:	693b      	ldr	r3, [r7, #16]
 8001b34:	1ad3      	subs	r3, r2, r3
 8001b36:	2b02      	cmp	r3, #2
 8001b38:	d901      	bls.n	8001b3e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001b3a:	2303      	movs	r3, #3
 8001b3c:	e167      	b.n	8001e0e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001b3e:	4b0b      	ldr	r3, [pc, #44]	@ (8001b6c <HAL_RCC_OscConfig+0x240>)
 8001b40:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001b42:	f003 0302 	and.w	r3, r3, #2
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d0f0      	beq.n	8001b2c <HAL_RCC_OscConfig+0x200>
 8001b4a:	e01b      	b.n	8001b84 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001b4c:	4b09      	ldr	r3, [pc, #36]	@ (8001b74 <HAL_RCC_OscConfig+0x248>)
 8001b4e:	2200      	movs	r2, #0
 8001b50:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b52:	f7ff f8b5 	bl	8000cc0 <HAL_GetTick>
 8001b56:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001b58:	e00e      	b.n	8001b78 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001b5a:	f7ff f8b1 	bl	8000cc0 <HAL_GetTick>
 8001b5e:	4602      	mov	r2, r0
 8001b60:	693b      	ldr	r3, [r7, #16]
 8001b62:	1ad3      	subs	r3, r2, r3
 8001b64:	2b02      	cmp	r3, #2
 8001b66:	d907      	bls.n	8001b78 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001b68:	2303      	movs	r3, #3
 8001b6a:	e150      	b.n	8001e0e <HAL_RCC_OscConfig+0x4e2>
 8001b6c:	40023800 	.word	0x40023800
 8001b70:	42470000 	.word	0x42470000
 8001b74:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001b78:	4b88      	ldr	r3, [pc, #544]	@ (8001d9c <HAL_RCC_OscConfig+0x470>)
 8001b7a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001b7c:	f003 0302 	and.w	r3, r3, #2
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d1ea      	bne.n	8001b5a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	f003 0304 	and.w	r3, r3, #4
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	f000 8097 	beq.w	8001cc0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001b92:	2300      	movs	r3, #0
 8001b94:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001b96:	4b81      	ldr	r3, [pc, #516]	@ (8001d9c <HAL_RCC_OscConfig+0x470>)
 8001b98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b9a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d10f      	bne.n	8001bc2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001ba2:	2300      	movs	r3, #0
 8001ba4:	60bb      	str	r3, [r7, #8]
 8001ba6:	4b7d      	ldr	r3, [pc, #500]	@ (8001d9c <HAL_RCC_OscConfig+0x470>)
 8001ba8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001baa:	4a7c      	ldr	r2, [pc, #496]	@ (8001d9c <HAL_RCC_OscConfig+0x470>)
 8001bac:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001bb0:	6413      	str	r3, [r2, #64]	@ 0x40
 8001bb2:	4b7a      	ldr	r3, [pc, #488]	@ (8001d9c <HAL_RCC_OscConfig+0x470>)
 8001bb4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bb6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001bba:	60bb      	str	r3, [r7, #8]
 8001bbc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001bbe:	2301      	movs	r3, #1
 8001bc0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001bc2:	4b77      	ldr	r3, [pc, #476]	@ (8001da0 <HAL_RCC_OscConfig+0x474>)
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d118      	bne.n	8001c00 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001bce:	4b74      	ldr	r3, [pc, #464]	@ (8001da0 <HAL_RCC_OscConfig+0x474>)
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	4a73      	ldr	r2, [pc, #460]	@ (8001da0 <HAL_RCC_OscConfig+0x474>)
 8001bd4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001bd8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001bda:	f7ff f871 	bl	8000cc0 <HAL_GetTick>
 8001bde:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001be0:	e008      	b.n	8001bf4 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001be2:	f7ff f86d 	bl	8000cc0 <HAL_GetTick>
 8001be6:	4602      	mov	r2, r0
 8001be8:	693b      	ldr	r3, [r7, #16]
 8001bea:	1ad3      	subs	r3, r2, r3
 8001bec:	2b02      	cmp	r3, #2
 8001bee:	d901      	bls.n	8001bf4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001bf0:	2303      	movs	r3, #3
 8001bf2:	e10c      	b.n	8001e0e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001bf4:	4b6a      	ldr	r3, [pc, #424]	@ (8001da0 <HAL_RCC_OscConfig+0x474>)
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d0f0      	beq.n	8001be2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	689b      	ldr	r3, [r3, #8]
 8001c04:	2b01      	cmp	r3, #1
 8001c06:	d106      	bne.n	8001c16 <HAL_RCC_OscConfig+0x2ea>
 8001c08:	4b64      	ldr	r3, [pc, #400]	@ (8001d9c <HAL_RCC_OscConfig+0x470>)
 8001c0a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001c0c:	4a63      	ldr	r2, [pc, #396]	@ (8001d9c <HAL_RCC_OscConfig+0x470>)
 8001c0e:	f043 0301 	orr.w	r3, r3, #1
 8001c12:	6713      	str	r3, [r2, #112]	@ 0x70
 8001c14:	e01c      	b.n	8001c50 <HAL_RCC_OscConfig+0x324>
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	689b      	ldr	r3, [r3, #8]
 8001c1a:	2b05      	cmp	r3, #5
 8001c1c:	d10c      	bne.n	8001c38 <HAL_RCC_OscConfig+0x30c>
 8001c1e:	4b5f      	ldr	r3, [pc, #380]	@ (8001d9c <HAL_RCC_OscConfig+0x470>)
 8001c20:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001c22:	4a5e      	ldr	r2, [pc, #376]	@ (8001d9c <HAL_RCC_OscConfig+0x470>)
 8001c24:	f043 0304 	orr.w	r3, r3, #4
 8001c28:	6713      	str	r3, [r2, #112]	@ 0x70
 8001c2a:	4b5c      	ldr	r3, [pc, #368]	@ (8001d9c <HAL_RCC_OscConfig+0x470>)
 8001c2c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001c2e:	4a5b      	ldr	r2, [pc, #364]	@ (8001d9c <HAL_RCC_OscConfig+0x470>)
 8001c30:	f043 0301 	orr.w	r3, r3, #1
 8001c34:	6713      	str	r3, [r2, #112]	@ 0x70
 8001c36:	e00b      	b.n	8001c50 <HAL_RCC_OscConfig+0x324>
 8001c38:	4b58      	ldr	r3, [pc, #352]	@ (8001d9c <HAL_RCC_OscConfig+0x470>)
 8001c3a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001c3c:	4a57      	ldr	r2, [pc, #348]	@ (8001d9c <HAL_RCC_OscConfig+0x470>)
 8001c3e:	f023 0301 	bic.w	r3, r3, #1
 8001c42:	6713      	str	r3, [r2, #112]	@ 0x70
 8001c44:	4b55      	ldr	r3, [pc, #340]	@ (8001d9c <HAL_RCC_OscConfig+0x470>)
 8001c46:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001c48:	4a54      	ldr	r2, [pc, #336]	@ (8001d9c <HAL_RCC_OscConfig+0x470>)
 8001c4a:	f023 0304 	bic.w	r3, r3, #4
 8001c4e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	689b      	ldr	r3, [r3, #8]
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d015      	beq.n	8001c84 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c58:	f7ff f832 	bl	8000cc0 <HAL_GetTick>
 8001c5c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c5e:	e00a      	b.n	8001c76 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001c60:	f7ff f82e 	bl	8000cc0 <HAL_GetTick>
 8001c64:	4602      	mov	r2, r0
 8001c66:	693b      	ldr	r3, [r7, #16]
 8001c68:	1ad3      	subs	r3, r2, r3
 8001c6a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001c6e:	4293      	cmp	r3, r2
 8001c70:	d901      	bls.n	8001c76 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001c72:	2303      	movs	r3, #3
 8001c74:	e0cb      	b.n	8001e0e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c76:	4b49      	ldr	r3, [pc, #292]	@ (8001d9c <HAL_RCC_OscConfig+0x470>)
 8001c78:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001c7a:	f003 0302 	and.w	r3, r3, #2
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d0ee      	beq.n	8001c60 <HAL_RCC_OscConfig+0x334>
 8001c82:	e014      	b.n	8001cae <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c84:	f7ff f81c 	bl	8000cc0 <HAL_GetTick>
 8001c88:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001c8a:	e00a      	b.n	8001ca2 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001c8c:	f7ff f818 	bl	8000cc0 <HAL_GetTick>
 8001c90:	4602      	mov	r2, r0
 8001c92:	693b      	ldr	r3, [r7, #16]
 8001c94:	1ad3      	subs	r3, r2, r3
 8001c96:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001c9a:	4293      	cmp	r3, r2
 8001c9c:	d901      	bls.n	8001ca2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001c9e:	2303      	movs	r3, #3
 8001ca0:	e0b5      	b.n	8001e0e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001ca2:	4b3e      	ldr	r3, [pc, #248]	@ (8001d9c <HAL_RCC_OscConfig+0x470>)
 8001ca4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001ca6:	f003 0302 	and.w	r3, r3, #2
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d1ee      	bne.n	8001c8c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001cae:	7dfb      	ldrb	r3, [r7, #23]
 8001cb0:	2b01      	cmp	r3, #1
 8001cb2:	d105      	bne.n	8001cc0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001cb4:	4b39      	ldr	r3, [pc, #228]	@ (8001d9c <HAL_RCC_OscConfig+0x470>)
 8001cb6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cb8:	4a38      	ldr	r2, [pc, #224]	@ (8001d9c <HAL_RCC_OscConfig+0x470>)
 8001cba:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001cbe:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	699b      	ldr	r3, [r3, #24]
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	f000 80a1 	beq.w	8001e0c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001cca:	4b34      	ldr	r3, [pc, #208]	@ (8001d9c <HAL_RCC_OscConfig+0x470>)
 8001ccc:	689b      	ldr	r3, [r3, #8]
 8001cce:	f003 030c 	and.w	r3, r3, #12
 8001cd2:	2b08      	cmp	r3, #8
 8001cd4:	d05c      	beq.n	8001d90 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	699b      	ldr	r3, [r3, #24]
 8001cda:	2b02      	cmp	r3, #2
 8001cdc:	d141      	bne.n	8001d62 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001cde:	4b31      	ldr	r3, [pc, #196]	@ (8001da4 <HAL_RCC_OscConfig+0x478>)
 8001ce0:	2200      	movs	r2, #0
 8001ce2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ce4:	f7fe ffec 	bl	8000cc0 <HAL_GetTick>
 8001ce8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001cea:	e008      	b.n	8001cfe <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001cec:	f7fe ffe8 	bl	8000cc0 <HAL_GetTick>
 8001cf0:	4602      	mov	r2, r0
 8001cf2:	693b      	ldr	r3, [r7, #16]
 8001cf4:	1ad3      	subs	r3, r2, r3
 8001cf6:	2b02      	cmp	r3, #2
 8001cf8:	d901      	bls.n	8001cfe <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001cfa:	2303      	movs	r3, #3
 8001cfc:	e087      	b.n	8001e0e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001cfe:	4b27      	ldr	r3, [pc, #156]	@ (8001d9c <HAL_RCC_OscConfig+0x470>)
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d1f0      	bne.n	8001cec <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	69da      	ldr	r2, [r3, #28]
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	6a1b      	ldr	r3, [r3, #32]
 8001d12:	431a      	orrs	r2, r3
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d18:	019b      	lsls	r3, r3, #6
 8001d1a:	431a      	orrs	r2, r3
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001d20:	085b      	lsrs	r3, r3, #1
 8001d22:	3b01      	subs	r3, #1
 8001d24:	041b      	lsls	r3, r3, #16
 8001d26:	431a      	orrs	r2, r3
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001d2c:	061b      	lsls	r3, r3, #24
 8001d2e:	491b      	ldr	r1, [pc, #108]	@ (8001d9c <HAL_RCC_OscConfig+0x470>)
 8001d30:	4313      	orrs	r3, r2
 8001d32:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001d34:	4b1b      	ldr	r3, [pc, #108]	@ (8001da4 <HAL_RCC_OscConfig+0x478>)
 8001d36:	2201      	movs	r2, #1
 8001d38:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d3a:	f7fe ffc1 	bl	8000cc0 <HAL_GetTick>
 8001d3e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001d40:	e008      	b.n	8001d54 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001d42:	f7fe ffbd 	bl	8000cc0 <HAL_GetTick>
 8001d46:	4602      	mov	r2, r0
 8001d48:	693b      	ldr	r3, [r7, #16]
 8001d4a:	1ad3      	subs	r3, r2, r3
 8001d4c:	2b02      	cmp	r3, #2
 8001d4e:	d901      	bls.n	8001d54 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001d50:	2303      	movs	r3, #3
 8001d52:	e05c      	b.n	8001e0e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001d54:	4b11      	ldr	r3, [pc, #68]	@ (8001d9c <HAL_RCC_OscConfig+0x470>)
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d0f0      	beq.n	8001d42 <HAL_RCC_OscConfig+0x416>
 8001d60:	e054      	b.n	8001e0c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d62:	4b10      	ldr	r3, [pc, #64]	@ (8001da4 <HAL_RCC_OscConfig+0x478>)
 8001d64:	2200      	movs	r2, #0
 8001d66:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d68:	f7fe ffaa 	bl	8000cc0 <HAL_GetTick>
 8001d6c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001d6e:	e008      	b.n	8001d82 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001d70:	f7fe ffa6 	bl	8000cc0 <HAL_GetTick>
 8001d74:	4602      	mov	r2, r0
 8001d76:	693b      	ldr	r3, [r7, #16]
 8001d78:	1ad3      	subs	r3, r2, r3
 8001d7a:	2b02      	cmp	r3, #2
 8001d7c:	d901      	bls.n	8001d82 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001d7e:	2303      	movs	r3, #3
 8001d80:	e045      	b.n	8001e0e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001d82:	4b06      	ldr	r3, [pc, #24]	@ (8001d9c <HAL_RCC_OscConfig+0x470>)
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d1f0      	bne.n	8001d70 <HAL_RCC_OscConfig+0x444>
 8001d8e:	e03d      	b.n	8001e0c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	699b      	ldr	r3, [r3, #24]
 8001d94:	2b01      	cmp	r3, #1
 8001d96:	d107      	bne.n	8001da8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001d98:	2301      	movs	r3, #1
 8001d9a:	e038      	b.n	8001e0e <HAL_RCC_OscConfig+0x4e2>
 8001d9c:	40023800 	.word	0x40023800
 8001da0:	40007000 	.word	0x40007000
 8001da4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001da8:	4b1b      	ldr	r3, [pc, #108]	@ (8001e18 <HAL_RCC_OscConfig+0x4ec>)
 8001daa:	685b      	ldr	r3, [r3, #4]
 8001dac:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	699b      	ldr	r3, [r3, #24]
 8001db2:	2b01      	cmp	r3, #1
 8001db4:	d028      	beq.n	8001e08 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001db6:	68fb      	ldr	r3, [r7, #12]
 8001db8:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001dc0:	429a      	cmp	r2, r3
 8001dc2:	d121      	bne.n	8001e08 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001dce:	429a      	cmp	r2, r3
 8001dd0:	d11a      	bne.n	8001e08 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001dd2:	68fa      	ldr	r2, [r7, #12]
 8001dd4:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8001dd8:	4013      	ands	r3, r2
 8001dda:	687a      	ldr	r2, [r7, #4]
 8001ddc:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001dde:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001de0:	4293      	cmp	r3, r2
 8001de2:	d111      	bne.n	8001e08 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001dee:	085b      	lsrs	r3, r3, #1
 8001df0:	3b01      	subs	r3, #1
 8001df2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001df4:	429a      	cmp	r2, r3
 8001df6:	d107      	bne.n	8001e08 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001e02:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001e04:	429a      	cmp	r2, r3
 8001e06:	d001      	beq.n	8001e0c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001e08:	2301      	movs	r3, #1
 8001e0a:	e000      	b.n	8001e0e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001e0c:	2300      	movs	r3, #0
}
 8001e0e:	4618      	mov	r0, r3
 8001e10:	3718      	adds	r7, #24
 8001e12:	46bd      	mov	sp, r7
 8001e14:	bd80      	pop	{r7, pc}
 8001e16:	bf00      	nop
 8001e18:	40023800 	.word	0x40023800

08001e1c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001e1c:	b580      	push	{r7, lr}
 8001e1e:	b084      	sub	sp, #16
 8001e20:	af00      	add	r7, sp, #0
 8001e22:	6078      	str	r0, [r7, #4]
 8001e24:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d101      	bne.n	8001e30 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001e2c:	2301      	movs	r3, #1
 8001e2e:	e0cc      	b.n	8001fca <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001e30:	4b68      	ldr	r3, [pc, #416]	@ (8001fd4 <HAL_RCC_ClockConfig+0x1b8>)
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	f003 0307 	and.w	r3, r3, #7
 8001e38:	683a      	ldr	r2, [r7, #0]
 8001e3a:	429a      	cmp	r2, r3
 8001e3c:	d90c      	bls.n	8001e58 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e3e:	4b65      	ldr	r3, [pc, #404]	@ (8001fd4 <HAL_RCC_ClockConfig+0x1b8>)
 8001e40:	683a      	ldr	r2, [r7, #0]
 8001e42:	b2d2      	uxtb	r2, r2
 8001e44:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e46:	4b63      	ldr	r3, [pc, #396]	@ (8001fd4 <HAL_RCC_ClockConfig+0x1b8>)
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	f003 0307 	and.w	r3, r3, #7
 8001e4e:	683a      	ldr	r2, [r7, #0]
 8001e50:	429a      	cmp	r2, r3
 8001e52:	d001      	beq.n	8001e58 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001e54:	2301      	movs	r3, #1
 8001e56:	e0b8      	b.n	8001fca <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	f003 0302 	and.w	r3, r3, #2
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d020      	beq.n	8001ea6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	f003 0304 	and.w	r3, r3, #4
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d005      	beq.n	8001e7c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001e70:	4b59      	ldr	r3, [pc, #356]	@ (8001fd8 <HAL_RCC_ClockConfig+0x1bc>)
 8001e72:	689b      	ldr	r3, [r3, #8]
 8001e74:	4a58      	ldr	r2, [pc, #352]	@ (8001fd8 <HAL_RCC_ClockConfig+0x1bc>)
 8001e76:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8001e7a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	f003 0308 	and.w	r3, r3, #8
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d005      	beq.n	8001e94 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001e88:	4b53      	ldr	r3, [pc, #332]	@ (8001fd8 <HAL_RCC_ClockConfig+0x1bc>)
 8001e8a:	689b      	ldr	r3, [r3, #8]
 8001e8c:	4a52      	ldr	r2, [pc, #328]	@ (8001fd8 <HAL_RCC_ClockConfig+0x1bc>)
 8001e8e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8001e92:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001e94:	4b50      	ldr	r3, [pc, #320]	@ (8001fd8 <HAL_RCC_ClockConfig+0x1bc>)
 8001e96:	689b      	ldr	r3, [r3, #8]
 8001e98:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	689b      	ldr	r3, [r3, #8]
 8001ea0:	494d      	ldr	r1, [pc, #308]	@ (8001fd8 <HAL_RCC_ClockConfig+0x1bc>)
 8001ea2:	4313      	orrs	r3, r2
 8001ea4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	f003 0301 	and.w	r3, r3, #1
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d044      	beq.n	8001f3c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	685b      	ldr	r3, [r3, #4]
 8001eb6:	2b01      	cmp	r3, #1
 8001eb8:	d107      	bne.n	8001eca <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001eba:	4b47      	ldr	r3, [pc, #284]	@ (8001fd8 <HAL_RCC_ClockConfig+0x1bc>)
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d119      	bne.n	8001efa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001ec6:	2301      	movs	r3, #1
 8001ec8:	e07f      	b.n	8001fca <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	685b      	ldr	r3, [r3, #4]
 8001ece:	2b02      	cmp	r3, #2
 8001ed0:	d003      	beq.n	8001eda <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001ed6:	2b03      	cmp	r3, #3
 8001ed8:	d107      	bne.n	8001eea <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001eda:	4b3f      	ldr	r3, [pc, #252]	@ (8001fd8 <HAL_RCC_ClockConfig+0x1bc>)
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d109      	bne.n	8001efa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001ee6:	2301      	movs	r3, #1
 8001ee8:	e06f      	b.n	8001fca <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001eea:	4b3b      	ldr	r3, [pc, #236]	@ (8001fd8 <HAL_RCC_ClockConfig+0x1bc>)
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	f003 0302 	and.w	r3, r3, #2
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d101      	bne.n	8001efa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001ef6:	2301      	movs	r3, #1
 8001ef8:	e067      	b.n	8001fca <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001efa:	4b37      	ldr	r3, [pc, #220]	@ (8001fd8 <HAL_RCC_ClockConfig+0x1bc>)
 8001efc:	689b      	ldr	r3, [r3, #8]
 8001efe:	f023 0203 	bic.w	r2, r3, #3
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	685b      	ldr	r3, [r3, #4]
 8001f06:	4934      	ldr	r1, [pc, #208]	@ (8001fd8 <HAL_RCC_ClockConfig+0x1bc>)
 8001f08:	4313      	orrs	r3, r2
 8001f0a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001f0c:	f7fe fed8 	bl	8000cc0 <HAL_GetTick>
 8001f10:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f12:	e00a      	b.n	8001f2a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001f14:	f7fe fed4 	bl	8000cc0 <HAL_GetTick>
 8001f18:	4602      	mov	r2, r0
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	1ad3      	subs	r3, r2, r3
 8001f1e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001f22:	4293      	cmp	r3, r2
 8001f24:	d901      	bls.n	8001f2a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001f26:	2303      	movs	r3, #3
 8001f28:	e04f      	b.n	8001fca <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f2a:	4b2b      	ldr	r3, [pc, #172]	@ (8001fd8 <HAL_RCC_ClockConfig+0x1bc>)
 8001f2c:	689b      	ldr	r3, [r3, #8]
 8001f2e:	f003 020c 	and.w	r2, r3, #12
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	685b      	ldr	r3, [r3, #4]
 8001f36:	009b      	lsls	r3, r3, #2
 8001f38:	429a      	cmp	r2, r3
 8001f3a:	d1eb      	bne.n	8001f14 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001f3c:	4b25      	ldr	r3, [pc, #148]	@ (8001fd4 <HAL_RCC_ClockConfig+0x1b8>)
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	f003 0307 	and.w	r3, r3, #7
 8001f44:	683a      	ldr	r2, [r7, #0]
 8001f46:	429a      	cmp	r2, r3
 8001f48:	d20c      	bcs.n	8001f64 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f4a:	4b22      	ldr	r3, [pc, #136]	@ (8001fd4 <HAL_RCC_ClockConfig+0x1b8>)
 8001f4c:	683a      	ldr	r2, [r7, #0]
 8001f4e:	b2d2      	uxtb	r2, r2
 8001f50:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f52:	4b20      	ldr	r3, [pc, #128]	@ (8001fd4 <HAL_RCC_ClockConfig+0x1b8>)
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	f003 0307 	and.w	r3, r3, #7
 8001f5a:	683a      	ldr	r2, [r7, #0]
 8001f5c:	429a      	cmp	r2, r3
 8001f5e:	d001      	beq.n	8001f64 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001f60:	2301      	movs	r3, #1
 8001f62:	e032      	b.n	8001fca <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	f003 0304 	and.w	r3, r3, #4
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d008      	beq.n	8001f82 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001f70:	4b19      	ldr	r3, [pc, #100]	@ (8001fd8 <HAL_RCC_ClockConfig+0x1bc>)
 8001f72:	689b      	ldr	r3, [r3, #8]
 8001f74:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	68db      	ldr	r3, [r3, #12]
 8001f7c:	4916      	ldr	r1, [pc, #88]	@ (8001fd8 <HAL_RCC_ClockConfig+0x1bc>)
 8001f7e:	4313      	orrs	r3, r2
 8001f80:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	f003 0308 	and.w	r3, r3, #8
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d009      	beq.n	8001fa2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001f8e:	4b12      	ldr	r3, [pc, #72]	@ (8001fd8 <HAL_RCC_ClockConfig+0x1bc>)
 8001f90:	689b      	ldr	r3, [r3, #8]
 8001f92:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	691b      	ldr	r3, [r3, #16]
 8001f9a:	00db      	lsls	r3, r3, #3
 8001f9c:	490e      	ldr	r1, [pc, #56]	@ (8001fd8 <HAL_RCC_ClockConfig+0x1bc>)
 8001f9e:	4313      	orrs	r3, r2
 8001fa0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001fa2:	f000 f821 	bl	8001fe8 <HAL_RCC_GetSysClockFreq>
 8001fa6:	4602      	mov	r2, r0
 8001fa8:	4b0b      	ldr	r3, [pc, #44]	@ (8001fd8 <HAL_RCC_ClockConfig+0x1bc>)
 8001faa:	689b      	ldr	r3, [r3, #8]
 8001fac:	091b      	lsrs	r3, r3, #4
 8001fae:	f003 030f 	and.w	r3, r3, #15
 8001fb2:	490a      	ldr	r1, [pc, #40]	@ (8001fdc <HAL_RCC_ClockConfig+0x1c0>)
 8001fb4:	5ccb      	ldrb	r3, [r1, r3]
 8001fb6:	fa22 f303 	lsr.w	r3, r2, r3
 8001fba:	4a09      	ldr	r2, [pc, #36]	@ (8001fe0 <HAL_RCC_ClockConfig+0x1c4>)
 8001fbc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001fbe:	4b09      	ldr	r3, [pc, #36]	@ (8001fe4 <HAL_RCC_ClockConfig+0x1c8>)
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	4618      	mov	r0, r3
 8001fc4:	f7fe fe38 	bl	8000c38 <HAL_InitTick>

  return HAL_OK;
 8001fc8:	2300      	movs	r3, #0
}
 8001fca:	4618      	mov	r0, r3
 8001fcc:	3710      	adds	r7, #16
 8001fce:	46bd      	mov	sp, r7
 8001fd0:	bd80      	pop	{r7, pc}
 8001fd2:	bf00      	nop
 8001fd4:	40023c00 	.word	0x40023c00
 8001fd8:	40023800 	.word	0x40023800
 8001fdc:	08003ab8 	.word	0x08003ab8
 8001fe0:	20000000 	.word	0x20000000
 8001fe4:	20000004 	.word	0x20000004

08001fe8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001fe8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001fec:	b090      	sub	sp, #64	@ 0x40
 8001fee:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001ff0:	2300      	movs	r3, #0
 8001ff2:	637b      	str	r3, [r7, #52]	@ 0x34
 8001ff4:	2300      	movs	r3, #0
 8001ff6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001ff8:	2300      	movs	r3, #0
 8001ffa:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8001ffc:	2300      	movs	r3, #0
 8001ffe:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002000:	4b59      	ldr	r3, [pc, #356]	@ (8002168 <HAL_RCC_GetSysClockFreq+0x180>)
 8002002:	689b      	ldr	r3, [r3, #8]
 8002004:	f003 030c 	and.w	r3, r3, #12
 8002008:	2b08      	cmp	r3, #8
 800200a:	d00d      	beq.n	8002028 <HAL_RCC_GetSysClockFreq+0x40>
 800200c:	2b08      	cmp	r3, #8
 800200e:	f200 80a1 	bhi.w	8002154 <HAL_RCC_GetSysClockFreq+0x16c>
 8002012:	2b00      	cmp	r3, #0
 8002014:	d002      	beq.n	800201c <HAL_RCC_GetSysClockFreq+0x34>
 8002016:	2b04      	cmp	r3, #4
 8002018:	d003      	beq.n	8002022 <HAL_RCC_GetSysClockFreq+0x3a>
 800201a:	e09b      	b.n	8002154 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800201c:	4b53      	ldr	r3, [pc, #332]	@ (800216c <HAL_RCC_GetSysClockFreq+0x184>)
 800201e:	63bb      	str	r3, [r7, #56]	@ 0x38
       break;
 8002020:	e09b      	b.n	800215a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002022:	4b53      	ldr	r3, [pc, #332]	@ (8002170 <HAL_RCC_GetSysClockFreq+0x188>)
 8002024:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002026:	e098      	b.n	800215a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002028:	4b4f      	ldr	r3, [pc, #316]	@ (8002168 <HAL_RCC_GetSysClockFreq+0x180>)
 800202a:	685b      	ldr	r3, [r3, #4]
 800202c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002030:	637b      	str	r3, [r7, #52]	@ 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002032:	4b4d      	ldr	r3, [pc, #308]	@ (8002168 <HAL_RCC_GetSysClockFreq+0x180>)
 8002034:	685b      	ldr	r3, [r3, #4]
 8002036:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800203a:	2b00      	cmp	r3, #0
 800203c:	d028      	beq.n	8002090 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800203e:	4b4a      	ldr	r3, [pc, #296]	@ (8002168 <HAL_RCC_GetSysClockFreq+0x180>)
 8002040:	685b      	ldr	r3, [r3, #4]
 8002042:	099b      	lsrs	r3, r3, #6
 8002044:	2200      	movs	r2, #0
 8002046:	623b      	str	r3, [r7, #32]
 8002048:	627a      	str	r2, [r7, #36]	@ 0x24
 800204a:	6a3b      	ldr	r3, [r7, #32]
 800204c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002050:	2100      	movs	r1, #0
 8002052:	4b47      	ldr	r3, [pc, #284]	@ (8002170 <HAL_RCC_GetSysClockFreq+0x188>)
 8002054:	fb03 f201 	mul.w	r2, r3, r1
 8002058:	2300      	movs	r3, #0
 800205a:	fb00 f303 	mul.w	r3, r0, r3
 800205e:	4413      	add	r3, r2
 8002060:	4a43      	ldr	r2, [pc, #268]	@ (8002170 <HAL_RCC_GetSysClockFreq+0x188>)
 8002062:	fba0 1202 	umull	r1, r2, r0, r2
 8002066:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002068:	460a      	mov	r2, r1
 800206a:	62ba      	str	r2, [r7, #40]	@ 0x28
 800206c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800206e:	4413      	add	r3, r2
 8002070:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002072:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002074:	2200      	movs	r2, #0
 8002076:	61bb      	str	r3, [r7, #24]
 8002078:	61fa      	str	r2, [r7, #28]
 800207a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800207e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8002082:	f7fe f8f5 	bl	8000270 <__aeabi_uldivmod>
 8002086:	4602      	mov	r2, r0
 8002088:	460b      	mov	r3, r1
 800208a:	4613      	mov	r3, r2
 800208c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800208e:	e053      	b.n	8002138 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002090:	4b35      	ldr	r3, [pc, #212]	@ (8002168 <HAL_RCC_GetSysClockFreq+0x180>)
 8002092:	685b      	ldr	r3, [r3, #4]
 8002094:	099b      	lsrs	r3, r3, #6
 8002096:	2200      	movs	r2, #0
 8002098:	613b      	str	r3, [r7, #16]
 800209a:	617a      	str	r2, [r7, #20]
 800209c:	693b      	ldr	r3, [r7, #16]
 800209e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80020a2:	f04f 0b00 	mov.w	fp, #0
 80020a6:	4652      	mov	r2, sl
 80020a8:	465b      	mov	r3, fp
 80020aa:	f04f 0000 	mov.w	r0, #0
 80020ae:	f04f 0100 	mov.w	r1, #0
 80020b2:	0159      	lsls	r1, r3, #5
 80020b4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80020b8:	0150      	lsls	r0, r2, #5
 80020ba:	4602      	mov	r2, r0
 80020bc:	460b      	mov	r3, r1
 80020be:	ebb2 080a 	subs.w	r8, r2, sl
 80020c2:	eb63 090b 	sbc.w	r9, r3, fp
 80020c6:	f04f 0200 	mov.w	r2, #0
 80020ca:	f04f 0300 	mov.w	r3, #0
 80020ce:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80020d2:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80020d6:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80020da:	ebb2 0408 	subs.w	r4, r2, r8
 80020de:	eb63 0509 	sbc.w	r5, r3, r9
 80020e2:	f04f 0200 	mov.w	r2, #0
 80020e6:	f04f 0300 	mov.w	r3, #0
 80020ea:	00eb      	lsls	r3, r5, #3
 80020ec:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80020f0:	00e2      	lsls	r2, r4, #3
 80020f2:	4614      	mov	r4, r2
 80020f4:	461d      	mov	r5, r3
 80020f6:	eb14 030a 	adds.w	r3, r4, sl
 80020fa:	603b      	str	r3, [r7, #0]
 80020fc:	eb45 030b 	adc.w	r3, r5, fp
 8002100:	607b      	str	r3, [r7, #4]
 8002102:	f04f 0200 	mov.w	r2, #0
 8002106:	f04f 0300 	mov.w	r3, #0
 800210a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800210e:	4629      	mov	r1, r5
 8002110:	028b      	lsls	r3, r1, #10
 8002112:	4621      	mov	r1, r4
 8002114:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002118:	4621      	mov	r1, r4
 800211a:	028a      	lsls	r2, r1, #10
 800211c:	4610      	mov	r0, r2
 800211e:	4619      	mov	r1, r3
 8002120:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002122:	2200      	movs	r2, #0
 8002124:	60bb      	str	r3, [r7, #8]
 8002126:	60fa      	str	r2, [r7, #12]
 8002128:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800212c:	f7fe f8a0 	bl	8000270 <__aeabi_uldivmod>
 8002130:	4602      	mov	r2, r0
 8002132:	460b      	mov	r3, r1
 8002134:	4613      	mov	r3, r2
 8002136:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002138:	4b0b      	ldr	r3, [pc, #44]	@ (8002168 <HAL_RCC_GetSysClockFreq+0x180>)
 800213a:	685b      	ldr	r3, [r3, #4]
 800213c:	0c1b      	lsrs	r3, r3, #16
 800213e:	f003 0303 	and.w	r3, r3, #3
 8002142:	3301      	adds	r3, #1
 8002144:	005b      	lsls	r3, r3, #1
 8002146:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco/pllp;
 8002148:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800214a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800214c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002150:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002152:	e002      	b.n	800215a <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002154:	4b05      	ldr	r3, [pc, #20]	@ (800216c <HAL_RCC_GetSysClockFreq+0x184>)
 8002156:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002158:	bf00      	nop
    }
  }
  return sysclockfreq;
 800215a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 800215c:	4618      	mov	r0, r3
 800215e:	3740      	adds	r7, #64	@ 0x40
 8002160:	46bd      	mov	sp, r7
 8002162:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002166:	bf00      	nop
 8002168:	40023800 	.word	0x40023800
 800216c:	00f42400 	.word	0x00f42400
 8002170:	017d7840 	.word	0x017d7840

08002174 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002174:	b480      	push	{r7}
 8002176:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002178:	4b03      	ldr	r3, [pc, #12]	@ (8002188 <HAL_RCC_GetHCLKFreq+0x14>)
 800217a:	681b      	ldr	r3, [r3, #0]
}
 800217c:	4618      	mov	r0, r3
 800217e:	46bd      	mov	sp, r7
 8002180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002184:	4770      	bx	lr
 8002186:	bf00      	nop
 8002188:	20000000 	.word	0x20000000

0800218c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800218c:	b580      	push	{r7, lr}
 800218e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002190:	f7ff fff0 	bl	8002174 <HAL_RCC_GetHCLKFreq>
 8002194:	4602      	mov	r2, r0
 8002196:	4b05      	ldr	r3, [pc, #20]	@ (80021ac <HAL_RCC_GetPCLK1Freq+0x20>)
 8002198:	689b      	ldr	r3, [r3, #8]
 800219a:	0a9b      	lsrs	r3, r3, #10
 800219c:	f003 0307 	and.w	r3, r3, #7
 80021a0:	4903      	ldr	r1, [pc, #12]	@ (80021b0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80021a2:	5ccb      	ldrb	r3, [r1, r3]
 80021a4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80021a8:	4618      	mov	r0, r3
 80021aa:	bd80      	pop	{r7, pc}
 80021ac:	40023800 	.word	0x40023800
 80021b0:	08003ac8 	.word	0x08003ac8

080021b4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80021b4:	b580      	push	{r7, lr}
 80021b6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80021b8:	f7ff ffdc 	bl	8002174 <HAL_RCC_GetHCLKFreq>
 80021bc:	4602      	mov	r2, r0
 80021be:	4b05      	ldr	r3, [pc, #20]	@ (80021d4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80021c0:	689b      	ldr	r3, [r3, #8]
 80021c2:	0b5b      	lsrs	r3, r3, #13
 80021c4:	f003 0307 	and.w	r3, r3, #7
 80021c8:	4903      	ldr	r1, [pc, #12]	@ (80021d8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80021ca:	5ccb      	ldrb	r3, [r1, r3]
 80021cc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80021d0:	4618      	mov	r0, r3
 80021d2:	bd80      	pop	{r7, pc}
 80021d4:	40023800 	.word	0x40023800
 80021d8:	08003ac8 	.word	0x08003ac8

080021dc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80021dc:	b580      	push	{r7, lr}
 80021de:	b082      	sub	sp, #8
 80021e0:	af00      	add	r7, sp, #0
 80021e2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d101      	bne.n	80021ee <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80021ea:	2301      	movs	r3, #1
 80021ec:	e03f      	b.n	800226e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80021f4:	b2db      	uxtb	r3, r3
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d106      	bne.n	8002208 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	2200      	movs	r2, #0
 80021fe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002202:	6878      	ldr	r0, [r7, #4]
 8002204:	f7fe fc14 	bl	8000a30 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	2224      	movs	r2, #36	@ 0x24
 800220c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	68da      	ldr	r2, [r3, #12]
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800221e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002220:	6878      	ldr	r0, [r7, #4]
 8002222:	f000 fd23 	bl	8002c6c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	691a      	ldr	r2, [r3, #16]
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002234:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	695a      	ldr	r2, [r3, #20]
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002244:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	68da      	ldr	r2, [r3, #12]
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002254:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	2200      	movs	r2, #0
 800225a:	641a      	str	r2, [r3, #64]	@ 0x40
  huart->gState = HAL_UART_STATE_READY;
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	2220      	movs	r2, #32
 8002260:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	2220      	movs	r2, #32
 8002268:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 800226c:	2300      	movs	r3, #0
}
 800226e:	4618      	mov	r0, r3
 8002270:	3708      	adds	r7, #8
 8002272:	46bd      	mov	sp, r7
 8002274:	bd80      	pop	{r7, pc}

08002276 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8002276:	b480      	push	{r7}
 8002278:	b085      	sub	sp, #20
 800227a:	af00      	add	r7, sp, #0
 800227c:	60f8      	str	r0, [r7, #12]
 800227e:	60b9      	str	r1, [r7, #8]
 8002280:	4613      	mov	r3, r2
 8002282:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800228a:	b2db      	uxtb	r3, r3
 800228c:	2b20      	cmp	r3, #32
 800228e:	d130      	bne.n	80022f2 <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 8002290:	68bb      	ldr	r3, [r7, #8]
 8002292:	2b00      	cmp	r3, #0
 8002294:	d002      	beq.n	800229c <HAL_UART_Transmit_IT+0x26>
 8002296:	88fb      	ldrh	r3, [r7, #6]
 8002298:	2b00      	cmp	r3, #0
 800229a:	d101      	bne.n	80022a0 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 800229c:	2301      	movs	r3, #1
 800229e:	e029      	b.n	80022f4 <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80022a6:	2b01      	cmp	r3, #1
 80022a8:	d101      	bne.n	80022ae <HAL_UART_Transmit_IT+0x38>
 80022aa:	2302      	movs	r3, #2
 80022ac:	e022      	b.n	80022f4 <HAL_UART_Transmit_IT+0x7e>
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	2201      	movs	r2, #1
 80022b2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    huart->pTxBuffPtr = pData;
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	68ba      	ldr	r2, [r7, #8]
 80022ba:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	88fa      	ldrh	r2, [r7, #6]
 80022c0:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	88fa      	ldrh	r2, [r7, #6]
 80022c6:	84da      	strh	r2, [r3, #38]	@ 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	2200      	movs	r2, #0
 80022cc:	641a      	str	r2, [r3, #64]	@ 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	2221      	movs	r2, #33	@ 0x21
 80022d2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	2200      	movs	r2, #0
 80022da:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	68da      	ldr	r2, [r3, #12]
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80022ec:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 80022ee:	2300      	movs	r3, #0
 80022f0:	e000      	b.n	80022f4 <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 80022f2:	2302      	movs	r3, #2
  }
}
 80022f4:	4618      	mov	r0, r3
 80022f6:	3714      	adds	r7, #20
 80022f8:	46bd      	mov	sp, r7
 80022fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022fe:	4770      	bx	lr

08002300 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002300:	b580      	push	{r7, lr}
 8002302:	b084      	sub	sp, #16
 8002304:	af00      	add	r7, sp, #0
 8002306:	60f8      	str	r0, [r7, #12]
 8002308:	60b9      	str	r1, [r7, #8]
 800230a:	4613      	mov	r3, r2
 800230c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002314:	b2db      	uxtb	r3, r3
 8002316:	2b20      	cmp	r3, #32
 8002318:	d11d      	bne.n	8002356 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 800231a:	68bb      	ldr	r3, [r7, #8]
 800231c:	2b00      	cmp	r3, #0
 800231e:	d002      	beq.n	8002326 <HAL_UART_Receive_IT+0x26>
 8002320:	88fb      	ldrh	r3, [r7, #6]
 8002322:	2b00      	cmp	r3, #0
 8002324:	d101      	bne.n	800232a <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8002326:	2301      	movs	r3, #1
 8002328:	e016      	b.n	8002358 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002330:	2b01      	cmp	r3, #1
 8002332:	d101      	bne.n	8002338 <HAL_UART_Receive_IT+0x38>
 8002334:	2302      	movs	r3, #2
 8002336:	e00f      	b.n	8002358 <HAL_UART_Receive_IT+0x58>
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	2201      	movs	r2, #1
 800233c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	2200      	movs	r2, #0
 8002344:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8002346:	88fb      	ldrh	r3, [r7, #6]
 8002348:	461a      	mov	r2, r3
 800234a:	68b9      	ldr	r1, [r7, #8]
 800234c:	68f8      	ldr	r0, [r7, #12]
 800234e:	f000 fab5 	bl	80028bc <UART_Start_Receive_IT>
 8002352:	4603      	mov	r3, r0
 8002354:	e000      	b.n	8002358 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8002356:	2302      	movs	r3, #2
  }
}
 8002358:	4618      	mov	r0, r3
 800235a:	3710      	adds	r7, #16
 800235c:	46bd      	mov	sp, r7
 800235e:	bd80      	pop	{r7, pc}

08002360 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002360:	b580      	push	{r7, lr}
 8002362:	b0ba      	sub	sp, #232	@ 0xe8
 8002364:	af00      	add	r7, sp, #0
 8002366:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	68db      	ldr	r3, [r3, #12]
 8002378:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	695b      	ldr	r3, [r3, #20]
 8002382:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8002386:	2300      	movs	r3, #0
 8002388:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 800238c:	2300      	movs	r3, #0
 800238e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8002392:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002396:	f003 030f 	and.w	r3, r3, #15
 800239a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 800239e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d10f      	bne.n	80023c6 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80023a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80023aa:	f003 0320 	and.w	r3, r3, #32
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d009      	beq.n	80023c6 <HAL_UART_IRQHandler+0x66>
 80023b2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80023b6:	f003 0320 	and.w	r3, r3, #32
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d003      	beq.n	80023c6 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80023be:	6878      	ldr	r0, [r7, #4]
 80023c0:	f000 fb99 	bl	8002af6 <UART_Receive_IT>
      return;
 80023c4:	e256      	b.n	8002874 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80023c6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	f000 80de 	beq.w	800258c <HAL_UART_IRQHandler+0x22c>
 80023d0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80023d4:	f003 0301 	and.w	r3, r3, #1
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d106      	bne.n	80023ea <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80023dc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80023e0:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	f000 80d1 	beq.w	800258c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80023ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80023ee:	f003 0301 	and.w	r3, r3, #1
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d00b      	beq.n	800240e <HAL_UART_IRQHandler+0xae>
 80023f6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80023fa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d005      	beq.n	800240e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002406:	f043 0201 	orr.w	r2, r3, #1
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800240e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002412:	f003 0304 	and.w	r3, r3, #4
 8002416:	2b00      	cmp	r3, #0
 8002418:	d00b      	beq.n	8002432 <HAL_UART_IRQHandler+0xd2>
 800241a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800241e:	f003 0301 	and.w	r3, r3, #1
 8002422:	2b00      	cmp	r3, #0
 8002424:	d005      	beq.n	8002432 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800242a:	f043 0202 	orr.w	r2, r3, #2
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002432:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002436:	f003 0302 	and.w	r3, r3, #2
 800243a:	2b00      	cmp	r3, #0
 800243c:	d00b      	beq.n	8002456 <HAL_UART_IRQHandler+0xf6>
 800243e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002442:	f003 0301 	and.w	r3, r3, #1
 8002446:	2b00      	cmp	r3, #0
 8002448:	d005      	beq.n	8002456 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800244e:	f043 0204 	orr.w	r2, r3, #4
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8002456:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800245a:	f003 0308 	and.w	r3, r3, #8
 800245e:	2b00      	cmp	r3, #0
 8002460:	d011      	beq.n	8002486 <HAL_UART_IRQHandler+0x126>
 8002462:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002466:	f003 0320 	and.w	r3, r3, #32
 800246a:	2b00      	cmp	r3, #0
 800246c:	d105      	bne.n	800247a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800246e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002472:	f003 0301 	and.w	r3, r3, #1
 8002476:	2b00      	cmp	r3, #0
 8002478:	d005      	beq.n	8002486 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800247e:	f043 0208 	orr.w	r2, r3, #8
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800248a:	2b00      	cmp	r3, #0
 800248c:	f000 81ed 	beq.w	800286a <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002490:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002494:	f003 0320 	and.w	r3, r3, #32
 8002498:	2b00      	cmp	r3, #0
 800249a:	d008      	beq.n	80024ae <HAL_UART_IRQHandler+0x14e>
 800249c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80024a0:	f003 0320 	and.w	r3, r3, #32
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d002      	beq.n	80024ae <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80024a8:	6878      	ldr	r0, [r7, #4]
 80024aa:	f000 fb24 	bl	8002af6 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	695b      	ldr	r3, [r3, #20]
 80024b4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80024b8:	2b40      	cmp	r3, #64	@ 0x40
 80024ba:	bf0c      	ite	eq
 80024bc:	2301      	moveq	r3, #1
 80024be:	2300      	movne	r3, #0
 80024c0:	b2db      	uxtb	r3, r3
 80024c2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024ca:	f003 0308 	and.w	r3, r3, #8
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d103      	bne.n	80024da <HAL_UART_IRQHandler+0x17a>
 80024d2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d04f      	beq.n	800257a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80024da:	6878      	ldr	r0, [r7, #4]
 80024dc:	f000 fa2c 	bl	8002938 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	695b      	ldr	r3, [r3, #20]
 80024e6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80024ea:	2b40      	cmp	r3, #64	@ 0x40
 80024ec:	d141      	bne.n	8002572 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	3314      	adds	r3, #20
 80024f4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80024f8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80024fc:	e853 3f00 	ldrex	r3, [r3]
 8002500:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8002504:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002508:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800250c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	3314      	adds	r3, #20
 8002516:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800251a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800251e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002522:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8002526:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800252a:	e841 2300 	strex	r3, r2, [r1]
 800252e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8002532:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002536:	2b00      	cmp	r3, #0
 8002538:	d1d9      	bne.n	80024ee <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800253e:	2b00      	cmp	r3, #0
 8002540:	d013      	beq.n	800256a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002546:	4a7d      	ldr	r2, [pc, #500]	@ (800273c <HAL_UART_IRQHandler+0x3dc>)
 8002548:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800254e:	4618      	mov	r0, r3
 8002550:	f7fe fdf2 	bl	8001138 <HAL_DMA_Abort_IT>
 8002554:	4603      	mov	r3, r0
 8002556:	2b00      	cmp	r3, #0
 8002558:	d016      	beq.n	8002588 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800255e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002560:	687a      	ldr	r2, [r7, #4]
 8002562:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8002564:	4610      	mov	r0, r2
 8002566:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002568:	e00e      	b.n	8002588 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800256a:	6878      	ldr	r0, [r7, #4]
 800256c:	f000 f990 	bl	8002890 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002570:	e00a      	b.n	8002588 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002572:	6878      	ldr	r0, [r7, #4]
 8002574:	f000 f98c 	bl	8002890 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002578:	e006      	b.n	8002588 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800257a:	6878      	ldr	r0, [r7, #4]
 800257c:	f000 f988 	bl	8002890 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	2200      	movs	r2, #0
 8002584:	641a      	str	r2, [r3, #64]	@ 0x40
      }
    }
    return;
 8002586:	e170      	b.n	800286a <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002588:	bf00      	nop
    return;
 800258a:	e16e      	b.n	800286a <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002590:	2b01      	cmp	r3, #1
 8002592:	f040 814a 	bne.w	800282a <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8002596:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800259a:	f003 0310 	and.w	r3, r3, #16
 800259e:	2b00      	cmp	r3, #0
 80025a0:	f000 8143 	beq.w	800282a <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80025a4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80025a8:	f003 0310 	and.w	r3, r3, #16
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	f000 813c 	beq.w	800282a <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80025b2:	2300      	movs	r3, #0
 80025b4:	60bb      	str	r3, [r7, #8]
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	60bb      	str	r3, [r7, #8]
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	685b      	ldr	r3, [r3, #4]
 80025c4:	60bb      	str	r3, [r7, #8]
 80025c6:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	695b      	ldr	r3, [r3, #20]
 80025ce:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80025d2:	2b40      	cmp	r3, #64	@ 0x40
 80025d4:	f040 80b4 	bne.w	8002740 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	685b      	ldr	r3, [r3, #4]
 80025e0:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80025e4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	f000 8140 	beq.w	800286e <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80025f2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80025f6:	429a      	cmp	r2, r3
 80025f8:	f080 8139 	bcs.w	800286e <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8002602:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002608:	69db      	ldr	r3, [r3, #28]
 800260a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800260e:	f000 8088 	beq.w	8002722 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	330c      	adds	r3, #12
 8002618:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800261c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002620:	e853 3f00 	ldrex	r3, [r3]
 8002624:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8002628:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800262c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002630:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	330c      	adds	r3, #12
 800263a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800263e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8002642:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002646:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800264a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800264e:	e841 2300 	strex	r3, r2, [r1]
 8002652:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8002656:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800265a:	2b00      	cmp	r3, #0
 800265c:	d1d9      	bne.n	8002612 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	3314      	adds	r3, #20
 8002664:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002666:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002668:	e853 3f00 	ldrex	r3, [r3]
 800266c:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800266e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002670:	f023 0301 	bic.w	r3, r3, #1
 8002674:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	3314      	adds	r3, #20
 800267e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8002682:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8002686:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002688:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800268a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800268e:	e841 2300 	strex	r3, r2, [r1]
 8002692:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8002694:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002696:	2b00      	cmp	r3, #0
 8002698:	d1e1      	bne.n	800265e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	3314      	adds	r3, #20
 80026a0:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80026a2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80026a4:	e853 3f00 	ldrex	r3, [r3]
 80026a8:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80026aa:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80026ac:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80026b0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	3314      	adds	r3, #20
 80026ba:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80026be:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80026c0:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80026c2:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80026c4:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80026c6:	e841 2300 	strex	r3, r2, [r1]
 80026ca:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80026cc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d1e3      	bne.n	800269a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	2220      	movs	r2, #32
 80026d6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	2200      	movs	r2, #0
 80026de:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	330c      	adds	r3, #12
 80026e6:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80026e8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80026ea:	e853 3f00 	ldrex	r3, [r3]
 80026ee:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80026f0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80026f2:	f023 0310 	bic.w	r3, r3, #16
 80026f6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	330c      	adds	r3, #12
 8002700:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8002704:	65ba      	str	r2, [r7, #88]	@ 0x58
 8002706:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002708:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800270a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800270c:	e841 2300 	strex	r3, r2, [r1]
 8002710:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8002712:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002714:	2b00      	cmp	r3, #0
 8002716:	d1e3      	bne.n	80026e0 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800271c:	4618      	mov	r0, r3
 800271e:	f7fe fc9b 	bl	8001058 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800272a:	b29b      	uxth	r3, r3
 800272c:	1ad3      	subs	r3, r2, r3
 800272e:	b29b      	uxth	r3, r3
 8002730:	4619      	mov	r1, r3
 8002732:	6878      	ldr	r0, [r7, #4]
 8002734:	f000 f8b6 	bl	80028a4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002738:	e099      	b.n	800286e <HAL_UART_IRQHandler+0x50e>
 800273a:	bf00      	nop
 800273c:	080029ff 	.word	0x080029ff
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002748:	b29b      	uxth	r3, r3
 800274a:	1ad3      	subs	r3, r2, r3
 800274c:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002754:	b29b      	uxth	r3, r3
 8002756:	2b00      	cmp	r3, #0
 8002758:	f000 808b 	beq.w	8002872 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 800275c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8002760:	2b00      	cmp	r3, #0
 8002762:	f000 8086 	beq.w	8002872 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	330c      	adds	r3, #12
 800276c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800276e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002770:	e853 3f00 	ldrex	r3, [r3]
 8002774:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8002776:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002778:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800277c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	330c      	adds	r3, #12
 8002786:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 800278a:	647a      	str	r2, [r7, #68]	@ 0x44
 800278c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800278e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8002790:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002792:	e841 2300 	strex	r3, r2, [r1]
 8002796:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8002798:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800279a:	2b00      	cmp	r3, #0
 800279c:	d1e3      	bne.n	8002766 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	3314      	adds	r3, #20
 80027a4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80027a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027a8:	e853 3f00 	ldrex	r3, [r3]
 80027ac:	623b      	str	r3, [r7, #32]
   return(result);
 80027ae:	6a3b      	ldr	r3, [r7, #32]
 80027b0:	f023 0301 	bic.w	r3, r3, #1
 80027b4:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	3314      	adds	r3, #20
 80027be:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80027c2:	633a      	str	r2, [r7, #48]	@ 0x30
 80027c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80027c6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80027c8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80027ca:	e841 2300 	strex	r3, r2, [r1]
 80027ce:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80027d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d1e3      	bne.n	800279e <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	2220      	movs	r2, #32
 80027da:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	2200      	movs	r2, #0
 80027e2:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	330c      	adds	r3, #12
 80027ea:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80027ec:	693b      	ldr	r3, [r7, #16]
 80027ee:	e853 3f00 	ldrex	r3, [r3]
 80027f2:	60fb      	str	r3, [r7, #12]
   return(result);
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	f023 0310 	bic.w	r3, r3, #16
 80027fa:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	330c      	adds	r3, #12
 8002804:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8002808:	61fa      	str	r2, [r7, #28]
 800280a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800280c:	69b9      	ldr	r1, [r7, #24]
 800280e:	69fa      	ldr	r2, [r7, #28]
 8002810:	e841 2300 	strex	r3, r2, [r1]
 8002814:	617b      	str	r3, [r7, #20]
   return(result);
 8002816:	697b      	ldr	r3, [r7, #20]
 8002818:	2b00      	cmp	r3, #0
 800281a:	d1e3      	bne.n	80027e4 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800281c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8002820:	4619      	mov	r1, r3
 8002822:	6878      	ldr	r0, [r7, #4]
 8002824:	f000 f83e 	bl	80028a4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002828:	e023      	b.n	8002872 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800282a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800282e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002832:	2b00      	cmp	r3, #0
 8002834:	d009      	beq.n	800284a <HAL_UART_IRQHandler+0x4ea>
 8002836:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800283a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800283e:	2b00      	cmp	r3, #0
 8002840:	d003      	beq.n	800284a <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8002842:	6878      	ldr	r0, [r7, #4]
 8002844:	f000 f8ef 	bl	8002a26 <UART_Transmit_IT>
    return;
 8002848:	e014      	b.n	8002874 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800284a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800284e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002852:	2b00      	cmp	r3, #0
 8002854:	d00e      	beq.n	8002874 <HAL_UART_IRQHandler+0x514>
 8002856:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800285a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800285e:	2b00      	cmp	r3, #0
 8002860:	d008      	beq.n	8002874 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8002862:	6878      	ldr	r0, [r7, #4]
 8002864:	f000 f92f 	bl	8002ac6 <UART_EndTransmit_IT>
    return;
 8002868:	e004      	b.n	8002874 <HAL_UART_IRQHandler+0x514>
    return;
 800286a:	bf00      	nop
 800286c:	e002      	b.n	8002874 <HAL_UART_IRQHandler+0x514>
      return;
 800286e:	bf00      	nop
 8002870:	e000      	b.n	8002874 <HAL_UART_IRQHandler+0x514>
      return;
 8002872:	bf00      	nop
  }
}
 8002874:	37e8      	adds	r7, #232	@ 0xe8
 8002876:	46bd      	mov	sp, r7
 8002878:	bd80      	pop	{r7, pc}
 800287a:	bf00      	nop

0800287c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800287c:	b480      	push	{r7}
 800287e:	b083      	sub	sp, #12
 8002880:	af00      	add	r7, sp, #0
 8002882:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8002884:	bf00      	nop
 8002886:	370c      	adds	r7, #12
 8002888:	46bd      	mov	sp, r7
 800288a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800288e:	4770      	bx	lr

08002890 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002890:	b480      	push	{r7}
 8002892:	b083      	sub	sp, #12
 8002894:	af00      	add	r7, sp, #0
 8002896:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002898:	bf00      	nop
 800289a:	370c      	adds	r7, #12
 800289c:	46bd      	mov	sp, r7
 800289e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a2:	4770      	bx	lr

080028a4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80028a4:	b480      	push	{r7}
 80028a6:	b083      	sub	sp, #12
 80028a8:	af00      	add	r7, sp, #0
 80028aa:	6078      	str	r0, [r7, #4]
 80028ac:	460b      	mov	r3, r1
 80028ae:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80028b0:	bf00      	nop
 80028b2:	370c      	adds	r7, #12
 80028b4:	46bd      	mov	sp, r7
 80028b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ba:	4770      	bx	lr

080028bc <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80028bc:	b480      	push	{r7}
 80028be:	b085      	sub	sp, #20
 80028c0:	af00      	add	r7, sp, #0
 80028c2:	60f8      	str	r0, [r7, #12]
 80028c4:	60b9      	str	r1, [r7, #8]
 80028c6:	4613      	mov	r3, r2
 80028c8:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	68ba      	ldr	r2, [r7, #8]
 80028ce:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	88fa      	ldrh	r2, [r7, #6]
 80028d4:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	88fa      	ldrh	r2, [r7, #6]
 80028da:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	2200      	movs	r2, #0
 80028e0:	641a      	str	r2, [r3, #64]	@ 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	2222      	movs	r2, #34	@ 0x22
 80028e6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	2200      	movs	r2, #0
 80028ee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	691b      	ldr	r3, [r3, #16]
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d007      	beq.n	800290a <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	68da      	ldr	r2, [r3, #12]
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002908:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	695a      	ldr	r2, [r3, #20]
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	f042 0201 	orr.w	r2, r2, #1
 8002918:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	68da      	ldr	r2, [r3, #12]
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	f042 0220 	orr.w	r2, r2, #32
 8002928:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800292a:	2300      	movs	r3, #0
}
 800292c:	4618      	mov	r0, r3
 800292e:	3714      	adds	r7, #20
 8002930:	46bd      	mov	sp, r7
 8002932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002936:	4770      	bx	lr

08002938 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002938:	b480      	push	{r7}
 800293a:	b095      	sub	sp, #84	@ 0x54
 800293c:	af00      	add	r7, sp, #0
 800293e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	330c      	adds	r3, #12
 8002946:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002948:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800294a:	e853 3f00 	ldrex	r3, [r3]
 800294e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8002950:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002952:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002956:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	330c      	adds	r3, #12
 800295e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002960:	643a      	str	r2, [r7, #64]	@ 0x40
 8002962:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002964:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8002966:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8002968:	e841 2300 	strex	r3, r2, [r1]
 800296c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800296e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002970:	2b00      	cmp	r3, #0
 8002972:	d1e5      	bne.n	8002940 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	3314      	adds	r3, #20
 800297a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800297c:	6a3b      	ldr	r3, [r7, #32]
 800297e:	e853 3f00 	ldrex	r3, [r3]
 8002982:	61fb      	str	r3, [r7, #28]
   return(result);
 8002984:	69fb      	ldr	r3, [r7, #28]
 8002986:	f023 0301 	bic.w	r3, r3, #1
 800298a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	3314      	adds	r3, #20
 8002992:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002994:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002996:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002998:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800299a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800299c:	e841 2300 	strex	r3, r2, [r1]
 80029a0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80029a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d1e5      	bne.n	8002974 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029ac:	2b01      	cmp	r3, #1
 80029ae:	d119      	bne.n	80029e4 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	330c      	adds	r3, #12
 80029b6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	e853 3f00 	ldrex	r3, [r3]
 80029be:	60bb      	str	r3, [r7, #8]
   return(result);
 80029c0:	68bb      	ldr	r3, [r7, #8]
 80029c2:	f023 0310 	bic.w	r3, r3, #16
 80029c6:	647b      	str	r3, [r7, #68]	@ 0x44
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	330c      	adds	r3, #12
 80029ce:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80029d0:	61ba      	str	r2, [r7, #24]
 80029d2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80029d4:	6979      	ldr	r1, [r7, #20]
 80029d6:	69ba      	ldr	r2, [r7, #24]
 80029d8:	e841 2300 	strex	r3, r2, [r1]
 80029dc:	613b      	str	r3, [r7, #16]
   return(result);
 80029de:	693b      	ldr	r3, [r7, #16]
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d1e5      	bne.n	80029b0 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	2220      	movs	r2, #32
 80029e8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	2200      	movs	r2, #0
 80029f0:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80029f2:	bf00      	nop
 80029f4:	3754      	adds	r7, #84	@ 0x54
 80029f6:	46bd      	mov	sp, r7
 80029f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029fc:	4770      	bx	lr

080029fe <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80029fe:	b580      	push	{r7, lr}
 8002a00:	b084      	sub	sp, #16
 8002a02:	af00      	add	r7, sp, #0
 8002a04:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002a0a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	2200      	movs	r2, #0
 8002a10:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	2200      	movs	r2, #0
 8002a16:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002a18:	68f8      	ldr	r0, [r7, #12]
 8002a1a:	f7ff ff39 	bl	8002890 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002a1e:	bf00      	nop
 8002a20:	3710      	adds	r7, #16
 8002a22:	46bd      	mov	sp, r7
 8002a24:	bd80      	pop	{r7, pc}

08002a26 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8002a26:	b480      	push	{r7}
 8002a28:	b085      	sub	sp, #20
 8002a2a:	af00      	add	r7, sp, #0
 8002a2c:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002a34:	b2db      	uxtb	r3, r3
 8002a36:	2b21      	cmp	r3, #33	@ 0x21
 8002a38:	d13e      	bne.n	8002ab8 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	689b      	ldr	r3, [r3, #8]
 8002a3e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002a42:	d114      	bne.n	8002a6e <UART_Transmit_IT+0x48>
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	691b      	ldr	r3, [r3, #16]
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d110      	bne.n	8002a6e <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	6a1b      	ldr	r3, [r3, #32]
 8002a50:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	881b      	ldrh	r3, [r3, #0]
 8002a56:	461a      	mov	r2, r3
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002a60:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	6a1b      	ldr	r3, [r3, #32]
 8002a66:	1c9a      	adds	r2, r3, #2
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	621a      	str	r2, [r3, #32]
 8002a6c:	e008      	b.n	8002a80 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	6a1b      	ldr	r3, [r3, #32]
 8002a72:	1c59      	adds	r1, r3, #1
 8002a74:	687a      	ldr	r2, [r7, #4]
 8002a76:	6211      	str	r1, [r2, #32]
 8002a78:	781a      	ldrb	r2, [r3, #0]
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002a84:	b29b      	uxth	r3, r3
 8002a86:	3b01      	subs	r3, #1
 8002a88:	b29b      	uxth	r3, r3
 8002a8a:	687a      	ldr	r2, [r7, #4]
 8002a8c:	4619      	mov	r1, r3
 8002a8e:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d10f      	bne.n	8002ab4 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	68da      	ldr	r2, [r3, #12]
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002aa2:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	68da      	ldr	r2, [r3, #12]
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002ab2:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8002ab4:	2300      	movs	r3, #0
 8002ab6:	e000      	b.n	8002aba <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8002ab8:	2302      	movs	r3, #2
  }
}
 8002aba:	4618      	mov	r0, r3
 8002abc:	3714      	adds	r7, #20
 8002abe:	46bd      	mov	sp, r7
 8002ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac4:	4770      	bx	lr

08002ac6 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8002ac6:	b580      	push	{r7, lr}
 8002ac8:	b082      	sub	sp, #8
 8002aca:	af00      	add	r7, sp, #0
 8002acc:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	68da      	ldr	r2, [r3, #12]
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002adc:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	2220      	movs	r2, #32
 8002ae2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8002ae6:	6878      	ldr	r0, [r7, #4]
 8002ae8:	f7ff fec8 	bl	800287c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8002aec:	2300      	movs	r3, #0
}
 8002aee:	4618      	mov	r0, r3
 8002af0:	3708      	adds	r7, #8
 8002af2:	46bd      	mov	sp, r7
 8002af4:	bd80      	pop	{r7, pc}

08002af6 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8002af6:	b580      	push	{r7, lr}
 8002af8:	b08c      	sub	sp, #48	@ 0x30
 8002afa:	af00      	add	r7, sp, #0
 8002afc:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002b04:	b2db      	uxtb	r3, r3
 8002b06:	2b22      	cmp	r3, #34	@ 0x22
 8002b08:	f040 80ab 	bne.w	8002c62 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	689b      	ldr	r3, [r3, #8]
 8002b10:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002b14:	d117      	bne.n	8002b46 <UART_Receive_IT+0x50>
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	691b      	ldr	r3, [r3, #16]
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d113      	bne.n	8002b46 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8002b1e:	2300      	movs	r3, #0
 8002b20:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b26:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	685b      	ldr	r3, [r3, #4]
 8002b2e:	b29b      	uxth	r3, r3
 8002b30:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002b34:	b29a      	uxth	r2, r3
 8002b36:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002b38:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b3e:	1c9a      	adds	r2, r3, #2
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	629a      	str	r2, [r3, #40]	@ 0x28
 8002b44:	e026      	b.n	8002b94 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b4a:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8002b4c:	2300      	movs	r3, #0
 8002b4e:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	689b      	ldr	r3, [r3, #8]
 8002b54:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002b58:	d007      	beq.n	8002b6a <UART_Receive_IT+0x74>
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	689b      	ldr	r3, [r3, #8]
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d10a      	bne.n	8002b78 <UART_Receive_IT+0x82>
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	691b      	ldr	r3, [r3, #16]
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d106      	bne.n	8002b78 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	685b      	ldr	r3, [r3, #4]
 8002b70:	b2da      	uxtb	r2, r3
 8002b72:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002b74:	701a      	strb	r2, [r3, #0]
 8002b76:	e008      	b.n	8002b8a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	685b      	ldr	r3, [r3, #4]
 8002b7e:	b2db      	uxtb	r3, r3
 8002b80:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002b84:	b2da      	uxtb	r2, r3
 8002b86:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002b88:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b8e:	1c5a      	adds	r2, r3, #1
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002b98:	b29b      	uxth	r3, r3
 8002b9a:	3b01      	subs	r3, #1
 8002b9c:	b29b      	uxth	r3, r3
 8002b9e:	687a      	ldr	r2, [r7, #4]
 8002ba0:	4619      	mov	r1, r3
 8002ba2:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d15a      	bne.n	8002c5e <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	68da      	ldr	r2, [r3, #12]
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	f022 0220 	bic.w	r2, r2, #32
 8002bb6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	68da      	ldr	r2, [r3, #12]
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002bc6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	695a      	ldr	r2, [r3, #20]
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	f022 0201 	bic.w	r2, r2, #1
 8002bd6:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	2220      	movs	r2, #32
 8002bdc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002be4:	2b01      	cmp	r3, #1
 8002be6:	d135      	bne.n	8002c54 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	2200      	movs	r2, #0
 8002bec:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	330c      	adds	r3, #12
 8002bf4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002bf6:	697b      	ldr	r3, [r7, #20]
 8002bf8:	e853 3f00 	ldrex	r3, [r3]
 8002bfc:	613b      	str	r3, [r7, #16]
   return(result);
 8002bfe:	693b      	ldr	r3, [r7, #16]
 8002c00:	f023 0310 	bic.w	r3, r3, #16
 8002c04:	627b      	str	r3, [r7, #36]	@ 0x24
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	330c      	adds	r3, #12
 8002c0c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002c0e:	623a      	str	r2, [r7, #32]
 8002c10:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c12:	69f9      	ldr	r1, [r7, #28]
 8002c14:	6a3a      	ldr	r2, [r7, #32]
 8002c16:	e841 2300 	strex	r3, r2, [r1]
 8002c1a:	61bb      	str	r3, [r7, #24]
   return(result);
 8002c1c:	69bb      	ldr	r3, [r7, #24]
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d1e5      	bne.n	8002bee <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	f003 0310 	and.w	r3, r3, #16
 8002c2c:	2b10      	cmp	r3, #16
 8002c2e:	d10a      	bne.n	8002c46 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002c30:	2300      	movs	r3, #0
 8002c32:	60fb      	str	r3, [r7, #12]
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	60fb      	str	r3, [r7, #12]
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	685b      	ldr	r3, [r3, #4]
 8002c42:	60fb      	str	r3, [r7, #12]
 8002c44:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8002c4a:	4619      	mov	r1, r3
 8002c4c:	6878      	ldr	r0, [r7, #4]
 8002c4e:	f7ff fe29 	bl	80028a4 <HAL_UARTEx_RxEventCallback>
 8002c52:	e002      	b.n	8002c5a <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8002c54:	6878      	ldr	r0, [r7, #4]
 8002c56:	f7fd fe87 	bl	8000968 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8002c5a:	2300      	movs	r3, #0
 8002c5c:	e002      	b.n	8002c64 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8002c5e:	2300      	movs	r3, #0
 8002c60:	e000      	b.n	8002c64 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8002c62:	2302      	movs	r3, #2
  }
}
 8002c64:	4618      	mov	r0, r3
 8002c66:	3730      	adds	r7, #48	@ 0x30
 8002c68:	46bd      	mov	sp, r7
 8002c6a:	bd80      	pop	{r7, pc}

08002c6c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002c6c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002c70:	b0c0      	sub	sp, #256	@ 0x100
 8002c72:	af00      	add	r7, sp, #0
 8002c74:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002c78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	691b      	ldr	r3, [r3, #16]
 8002c80:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8002c84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002c88:	68d9      	ldr	r1, [r3, #12]
 8002c8a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002c8e:	681a      	ldr	r2, [r3, #0]
 8002c90:	ea40 0301 	orr.w	r3, r0, r1
 8002c94:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002c96:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002c9a:	689a      	ldr	r2, [r3, #8]
 8002c9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002ca0:	691b      	ldr	r3, [r3, #16]
 8002ca2:	431a      	orrs	r2, r3
 8002ca4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002ca8:	695b      	ldr	r3, [r3, #20]
 8002caa:	431a      	orrs	r2, r3
 8002cac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002cb0:	69db      	ldr	r3, [r3, #28]
 8002cb2:	4313      	orrs	r3, r2
 8002cb4:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002cb8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	68db      	ldr	r3, [r3, #12]
 8002cc0:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8002cc4:	f021 010c 	bic.w	r1, r1, #12
 8002cc8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002ccc:	681a      	ldr	r2, [r3, #0]
 8002cce:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8002cd2:	430b      	orrs	r3, r1
 8002cd4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002cd6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	695b      	ldr	r3, [r3, #20]
 8002cde:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8002ce2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002ce6:	6999      	ldr	r1, [r3, #24]
 8002ce8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002cec:	681a      	ldr	r2, [r3, #0]
 8002cee:	ea40 0301 	orr.w	r3, r0, r1
 8002cf2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002cf4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002cf8:	681a      	ldr	r2, [r3, #0]
 8002cfa:	4b8f      	ldr	r3, [pc, #572]	@ (8002f38 <UART_SetConfig+0x2cc>)
 8002cfc:	429a      	cmp	r2, r3
 8002cfe:	d005      	beq.n	8002d0c <UART_SetConfig+0xa0>
 8002d00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002d04:	681a      	ldr	r2, [r3, #0]
 8002d06:	4b8d      	ldr	r3, [pc, #564]	@ (8002f3c <UART_SetConfig+0x2d0>)
 8002d08:	429a      	cmp	r2, r3
 8002d0a:	d104      	bne.n	8002d16 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002d0c:	f7ff fa52 	bl	80021b4 <HAL_RCC_GetPCLK2Freq>
 8002d10:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8002d14:	e003      	b.n	8002d1e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002d16:	f7ff fa39 	bl	800218c <HAL_RCC_GetPCLK1Freq>
 8002d1a:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002d1e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002d22:	69db      	ldr	r3, [r3, #28]
 8002d24:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002d28:	f040 810c 	bne.w	8002f44 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002d2c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002d30:	2200      	movs	r2, #0
 8002d32:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8002d36:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8002d3a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8002d3e:	4622      	mov	r2, r4
 8002d40:	462b      	mov	r3, r5
 8002d42:	1891      	adds	r1, r2, r2
 8002d44:	65b9      	str	r1, [r7, #88]	@ 0x58
 8002d46:	415b      	adcs	r3, r3
 8002d48:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002d4a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8002d4e:	4621      	mov	r1, r4
 8002d50:	eb12 0801 	adds.w	r8, r2, r1
 8002d54:	4629      	mov	r1, r5
 8002d56:	eb43 0901 	adc.w	r9, r3, r1
 8002d5a:	f04f 0200 	mov.w	r2, #0
 8002d5e:	f04f 0300 	mov.w	r3, #0
 8002d62:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002d66:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002d6a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002d6e:	4690      	mov	r8, r2
 8002d70:	4699      	mov	r9, r3
 8002d72:	4623      	mov	r3, r4
 8002d74:	eb18 0303 	adds.w	r3, r8, r3
 8002d78:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8002d7c:	462b      	mov	r3, r5
 8002d7e:	eb49 0303 	adc.w	r3, r9, r3
 8002d82:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8002d86:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002d8a:	685b      	ldr	r3, [r3, #4]
 8002d8c:	2200      	movs	r2, #0
 8002d8e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8002d92:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8002d96:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8002d9a:	460b      	mov	r3, r1
 8002d9c:	18db      	adds	r3, r3, r3
 8002d9e:	653b      	str	r3, [r7, #80]	@ 0x50
 8002da0:	4613      	mov	r3, r2
 8002da2:	eb42 0303 	adc.w	r3, r2, r3
 8002da6:	657b      	str	r3, [r7, #84]	@ 0x54
 8002da8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8002dac:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8002db0:	f7fd fa5e 	bl	8000270 <__aeabi_uldivmod>
 8002db4:	4602      	mov	r2, r0
 8002db6:	460b      	mov	r3, r1
 8002db8:	4b61      	ldr	r3, [pc, #388]	@ (8002f40 <UART_SetConfig+0x2d4>)
 8002dba:	fba3 2302 	umull	r2, r3, r3, r2
 8002dbe:	095b      	lsrs	r3, r3, #5
 8002dc0:	011c      	lsls	r4, r3, #4
 8002dc2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002dc6:	2200      	movs	r2, #0
 8002dc8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8002dcc:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8002dd0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8002dd4:	4642      	mov	r2, r8
 8002dd6:	464b      	mov	r3, r9
 8002dd8:	1891      	adds	r1, r2, r2
 8002dda:	64b9      	str	r1, [r7, #72]	@ 0x48
 8002ddc:	415b      	adcs	r3, r3
 8002dde:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002de0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8002de4:	4641      	mov	r1, r8
 8002de6:	eb12 0a01 	adds.w	sl, r2, r1
 8002dea:	4649      	mov	r1, r9
 8002dec:	eb43 0b01 	adc.w	fp, r3, r1
 8002df0:	f04f 0200 	mov.w	r2, #0
 8002df4:	f04f 0300 	mov.w	r3, #0
 8002df8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002dfc:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002e00:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002e04:	4692      	mov	sl, r2
 8002e06:	469b      	mov	fp, r3
 8002e08:	4643      	mov	r3, r8
 8002e0a:	eb1a 0303 	adds.w	r3, sl, r3
 8002e0e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8002e12:	464b      	mov	r3, r9
 8002e14:	eb4b 0303 	adc.w	r3, fp, r3
 8002e18:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8002e1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002e20:	685b      	ldr	r3, [r3, #4]
 8002e22:	2200      	movs	r2, #0
 8002e24:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8002e28:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8002e2c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8002e30:	460b      	mov	r3, r1
 8002e32:	18db      	adds	r3, r3, r3
 8002e34:	643b      	str	r3, [r7, #64]	@ 0x40
 8002e36:	4613      	mov	r3, r2
 8002e38:	eb42 0303 	adc.w	r3, r2, r3
 8002e3c:	647b      	str	r3, [r7, #68]	@ 0x44
 8002e3e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8002e42:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8002e46:	f7fd fa13 	bl	8000270 <__aeabi_uldivmod>
 8002e4a:	4602      	mov	r2, r0
 8002e4c:	460b      	mov	r3, r1
 8002e4e:	4611      	mov	r1, r2
 8002e50:	4b3b      	ldr	r3, [pc, #236]	@ (8002f40 <UART_SetConfig+0x2d4>)
 8002e52:	fba3 2301 	umull	r2, r3, r3, r1
 8002e56:	095b      	lsrs	r3, r3, #5
 8002e58:	2264      	movs	r2, #100	@ 0x64
 8002e5a:	fb02 f303 	mul.w	r3, r2, r3
 8002e5e:	1acb      	subs	r3, r1, r3
 8002e60:	00db      	lsls	r3, r3, #3
 8002e62:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8002e66:	4b36      	ldr	r3, [pc, #216]	@ (8002f40 <UART_SetConfig+0x2d4>)
 8002e68:	fba3 2302 	umull	r2, r3, r3, r2
 8002e6c:	095b      	lsrs	r3, r3, #5
 8002e6e:	005b      	lsls	r3, r3, #1
 8002e70:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8002e74:	441c      	add	r4, r3
 8002e76:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002e7a:	2200      	movs	r2, #0
 8002e7c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8002e80:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8002e84:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8002e88:	4642      	mov	r2, r8
 8002e8a:	464b      	mov	r3, r9
 8002e8c:	1891      	adds	r1, r2, r2
 8002e8e:	63b9      	str	r1, [r7, #56]	@ 0x38
 8002e90:	415b      	adcs	r3, r3
 8002e92:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002e94:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8002e98:	4641      	mov	r1, r8
 8002e9a:	1851      	adds	r1, r2, r1
 8002e9c:	6339      	str	r1, [r7, #48]	@ 0x30
 8002e9e:	4649      	mov	r1, r9
 8002ea0:	414b      	adcs	r3, r1
 8002ea2:	637b      	str	r3, [r7, #52]	@ 0x34
 8002ea4:	f04f 0200 	mov.w	r2, #0
 8002ea8:	f04f 0300 	mov.w	r3, #0
 8002eac:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8002eb0:	4659      	mov	r1, fp
 8002eb2:	00cb      	lsls	r3, r1, #3
 8002eb4:	4651      	mov	r1, sl
 8002eb6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002eba:	4651      	mov	r1, sl
 8002ebc:	00ca      	lsls	r2, r1, #3
 8002ebe:	4610      	mov	r0, r2
 8002ec0:	4619      	mov	r1, r3
 8002ec2:	4603      	mov	r3, r0
 8002ec4:	4642      	mov	r2, r8
 8002ec6:	189b      	adds	r3, r3, r2
 8002ec8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8002ecc:	464b      	mov	r3, r9
 8002ece:	460a      	mov	r2, r1
 8002ed0:	eb42 0303 	adc.w	r3, r2, r3
 8002ed4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002ed8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002edc:	685b      	ldr	r3, [r3, #4]
 8002ede:	2200      	movs	r2, #0
 8002ee0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8002ee4:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8002ee8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8002eec:	460b      	mov	r3, r1
 8002eee:	18db      	adds	r3, r3, r3
 8002ef0:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002ef2:	4613      	mov	r3, r2
 8002ef4:	eb42 0303 	adc.w	r3, r2, r3
 8002ef8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002efa:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002efe:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8002f02:	f7fd f9b5 	bl	8000270 <__aeabi_uldivmod>
 8002f06:	4602      	mov	r2, r0
 8002f08:	460b      	mov	r3, r1
 8002f0a:	4b0d      	ldr	r3, [pc, #52]	@ (8002f40 <UART_SetConfig+0x2d4>)
 8002f0c:	fba3 1302 	umull	r1, r3, r3, r2
 8002f10:	095b      	lsrs	r3, r3, #5
 8002f12:	2164      	movs	r1, #100	@ 0x64
 8002f14:	fb01 f303 	mul.w	r3, r1, r3
 8002f18:	1ad3      	subs	r3, r2, r3
 8002f1a:	00db      	lsls	r3, r3, #3
 8002f1c:	3332      	adds	r3, #50	@ 0x32
 8002f1e:	4a08      	ldr	r2, [pc, #32]	@ (8002f40 <UART_SetConfig+0x2d4>)
 8002f20:	fba2 2303 	umull	r2, r3, r2, r3
 8002f24:	095b      	lsrs	r3, r3, #5
 8002f26:	f003 0207 	and.w	r2, r3, #7
 8002f2a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	4422      	add	r2, r4
 8002f32:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002f34:	e106      	b.n	8003144 <UART_SetConfig+0x4d8>
 8002f36:	bf00      	nop
 8002f38:	40011000 	.word	0x40011000
 8002f3c:	40011400 	.word	0x40011400
 8002f40:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002f44:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002f48:	2200      	movs	r2, #0
 8002f4a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8002f4e:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8002f52:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8002f56:	4642      	mov	r2, r8
 8002f58:	464b      	mov	r3, r9
 8002f5a:	1891      	adds	r1, r2, r2
 8002f5c:	6239      	str	r1, [r7, #32]
 8002f5e:	415b      	adcs	r3, r3
 8002f60:	627b      	str	r3, [r7, #36]	@ 0x24
 8002f62:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002f66:	4641      	mov	r1, r8
 8002f68:	1854      	adds	r4, r2, r1
 8002f6a:	4649      	mov	r1, r9
 8002f6c:	eb43 0501 	adc.w	r5, r3, r1
 8002f70:	f04f 0200 	mov.w	r2, #0
 8002f74:	f04f 0300 	mov.w	r3, #0
 8002f78:	00eb      	lsls	r3, r5, #3
 8002f7a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002f7e:	00e2      	lsls	r2, r4, #3
 8002f80:	4614      	mov	r4, r2
 8002f82:	461d      	mov	r5, r3
 8002f84:	4643      	mov	r3, r8
 8002f86:	18e3      	adds	r3, r4, r3
 8002f88:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8002f8c:	464b      	mov	r3, r9
 8002f8e:	eb45 0303 	adc.w	r3, r5, r3
 8002f92:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8002f96:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002f9a:	685b      	ldr	r3, [r3, #4]
 8002f9c:	2200      	movs	r2, #0
 8002f9e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8002fa2:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8002fa6:	f04f 0200 	mov.w	r2, #0
 8002faa:	f04f 0300 	mov.w	r3, #0
 8002fae:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8002fb2:	4629      	mov	r1, r5
 8002fb4:	008b      	lsls	r3, r1, #2
 8002fb6:	4621      	mov	r1, r4
 8002fb8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002fbc:	4621      	mov	r1, r4
 8002fbe:	008a      	lsls	r2, r1, #2
 8002fc0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8002fc4:	f7fd f954 	bl	8000270 <__aeabi_uldivmod>
 8002fc8:	4602      	mov	r2, r0
 8002fca:	460b      	mov	r3, r1
 8002fcc:	4b60      	ldr	r3, [pc, #384]	@ (8003150 <UART_SetConfig+0x4e4>)
 8002fce:	fba3 2302 	umull	r2, r3, r3, r2
 8002fd2:	095b      	lsrs	r3, r3, #5
 8002fd4:	011c      	lsls	r4, r3, #4
 8002fd6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002fda:	2200      	movs	r2, #0
 8002fdc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8002fe0:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8002fe4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8002fe8:	4642      	mov	r2, r8
 8002fea:	464b      	mov	r3, r9
 8002fec:	1891      	adds	r1, r2, r2
 8002fee:	61b9      	str	r1, [r7, #24]
 8002ff0:	415b      	adcs	r3, r3
 8002ff2:	61fb      	str	r3, [r7, #28]
 8002ff4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002ff8:	4641      	mov	r1, r8
 8002ffa:	1851      	adds	r1, r2, r1
 8002ffc:	6139      	str	r1, [r7, #16]
 8002ffe:	4649      	mov	r1, r9
 8003000:	414b      	adcs	r3, r1
 8003002:	617b      	str	r3, [r7, #20]
 8003004:	f04f 0200 	mov.w	r2, #0
 8003008:	f04f 0300 	mov.w	r3, #0
 800300c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003010:	4659      	mov	r1, fp
 8003012:	00cb      	lsls	r3, r1, #3
 8003014:	4651      	mov	r1, sl
 8003016:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800301a:	4651      	mov	r1, sl
 800301c:	00ca      	lsls	r2, r1, #3
 800301e:	4610      	mov	r0, r2
 8003020:	4619      	mov	r1, r3
 8003022:	4603      	mov	r3, r0
 8003024:	4642      	mov	r2, r8
 8003026:	189b      	adds	r3, r3, r2
 8003028:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800302c:	464b      	mov	r3, r9
 800302e:	460a      	mov	r2, r1
 8003030:	eb42 0303 	adc.w	r3, r2, r3
 8003034:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8003038:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800303c:	685b      	ldr	r3, [r3, #4]
 800303e:	2200      	movs	r2, #0
 8003040:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003042:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8003044:	f04f 0200 	mov.w	r2, #0
 8003048:	f04f 0300 	mov.w	r3, #0
 800304c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8003050:	4649      	mov	r1, r9
 8003052:	008b      	lsls	r3, r1, #2
 8003054:	4641      	mov	r1, r8
 8003056:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800305a:	4641      	mov	r1, r8
 800305c:	008a      	lsls	r2, r1, #2
 800305e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8003062:	f7fd f905 	bl	8000270 <__aeabi_uldivmod>
 8003066:	4602      	mov	r2, r0
 8003068:	460b      	mov	r3, r1
 800306a:	4611      	mov	r1, r2
 800306c:	4b38      	ldr	r3, [pc, #224]	@ (8003150 <UART_SetConfig+0x4e4>)
 800306e:	fba3 2301 	umull	r2, r3, r3, r1
 8003072:	095b      	lsrs	r3, r3, #5
 8003074:	2264      	movs	r2, #100	@ 0x64
 8003076:	fb02 f303 	mul.w	r3, r2, r3
 800307a:	1acb      	subs	r3, r1, r3
 800307c:	011b      	lsls	r3, r3, #4
 800307e:	3332      	adds	r3, #50	@ 0x32
 8003080:	4a33      	ldr	r2, [pc, #204]	@ (8003150 <UART_SetConfig+0x4e4>)
 8003082:	fba2 2303 	umull	r2, r3, r2, r3
 8003086:	095b      	lsrs	r3, r3, #5
 8003088:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800308c:	441c      	add	r4, r3
 800308e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003092:	2200      	movs	r2, #0
 8003094:	673b      	str	r3, [r7, #112]	@ 0x70
 8003096:	677a      	str	r2, [r7, #116]	@ 0x74
 8003098:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 800309c:	4642      	mov	r2, r8
 800309e:	464b      	mov	r3, r9
 80030a0:	1891      	adds	r1, r2, r2
 80030a2:	60b9      	str	r1, [r7, #8]
 80030a4:	415b      	adcs	r3, r3
 80030a6:	60fb      	str	r3, [r7, #12]
 80030a8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80030ac:	4641      	mov	r1, r8
 80030ae:	1851      	adds	r1, r2, r1
 80030b0:	6039      	str	r1, [r7, #0]
 80030b2:	4649      	mov	r1, r9
 80030b4:	414b      	adcs	r3, r1
 80030b6:	607b      	str	r3, [r7, #4]
 80030b8:	f04f 0200 	mov.w	r2, #0
 80030bc:	f04f 0300 	mov.w	r3, #0
 80030c0:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80030c4:	4659      	mov	r1, fp
 80030c6:	00cb      	lsls	r3, r1, #3
 80030c8:	4651      	mov	r1, sl
 80030ca:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80030ce:	4651      	mov	r1, sl
 80030d0:	00ca      	lsls	r2, r1, #3
 80030d2:	4610      	mov	r0, r2
 80030d4:	4619      	mov	r1, r3
 80030d6:	4603      	mov	r3, r0
 80030d8:	4642      	mov	r2, r8
 80030da:	189b      	adds	r3, r3, r2
 80030dc:	66bb      	str	r3, [r7, #104]	@ 0x68
 80030de:	464b      	mov	r3, r9
 80030e0:	460a      	mov	r2, r1
 80030e2:	eb42 0303 	adc.w	r3, r2, r3
 80030e6:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80030e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80030ec:	685b      	ldr	r3, [r3, #4]
 80030ee:	2200      	movs	r2, #0
 80030f0:	663b      	str	r3, [r7, #96]	@ 0x60
 80030f2:	667a      	str	r2, [r7, #100]	@ 0x64
 80030f4:	f04f 0200 	mov.w	r2, #0
 80030f8:	f04f 0300 	mov.w	r3, #0
 80030fc:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8003100:	4649      	mov	r1, r9
 8003102:	008b      	lsls	r3, r1, #2
 8003104:	4641      	mov	r1, r8
 8003106:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800310a:	4641      	mov	r1, r8
 800310c:	008a      	lsls	r2, r1, #2
 800310e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8003112:	f7fd f8ad 	bl	8000270 <__aeabi_uldivmod>
 8003116:	4602      	mov	r2, r0
 8003118:	460b      	mov	r3, r1
 800311a:	4b0d      	ldr	r3, [pc, #52]	@ (8003150 <UART_SetConfig+0x4e4>)
 800311c:	fba3 1302 	umull	r1, r3, r3, r2
 8003120:	095b      	lsrs	r3, r3, #5
 8003122:	2164      	movs	r1, #100	@ 0x64
 8003124:	fb01 f303 	mul.w	r3, r1, r3
 8003128:	1ad3      	subs	r3, r2, r3
 800312a:	011b      	lsls	r3, r3, #4
 800312c:	3332      	adds	r3, #50	@ 0x32
 800312e:	4a08      	ldr	r2, [pc, #32]	@ (8003150 <UART_SetConfig+0x4e4>)
 8003130:	fba2 2303 	umull	r2, r3, r2, r3
 8003134:	095b      	lsrs	r3, r3, #5
 8003136:	f003 020f 	and.w	r2, r3, #15
 800313a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	4422      	add	r2, r4
 8003142:	609a      	str	r2, [r3, #8]
}
 8003144:	bf00      	nop
 8003146:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800314a:	46bd      	mov	sp, r7
 800314c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003150:	51eb851f 	.word	0x51eb851f

08003154 <siprintf>:
 8003154:	b40e      	push	{r1, r2, r3}
 8003156:	b510      	push	{r4, lr}
 8003158:	b09d      	sub	sp, #116	@ 0x74
 800315a:	ab1f      	add	r3, sp, #124	@ 0x7c
 800315c:	9002      	str	r0, [sp, #8]
 800315e:	9006      	str	r0, [sp, #24]
 8003160:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8003164:	480a      	ldr	r0, [pc, #40]	@ (8003190 <siprintf+0x3c>)
 8003166:	9107      	str	r1, [sp, #28]
 8003168:	9104      	str	r1, [sp, #16]
 800316a:	490a      	ldr	r1, [pc, #40]	@ (8003194 <siprintf+0x40>)
 800316c:	f853 2b04 	ldr.w	r2, [r3], #4
 8003170:	9105      	str	r1, [sp, #20]
 8003172:	2400      	movs	r4, #0
 8003174:	a902      	add	r1, sp, #8
 8003176:	6800      	ldr	r0, [r0, #0]
 8003178:	9301      	str	r3, [sp, #4]
 800317a:	941b      	str	r4, [sp, #108]	@ 0x6c
 800317c:	f000 f994 	bl	80034a8 <_svfiprintf_r>
 8003180:	9b02      	ldr	r3, [sp, #8]
 8003182:	701c      	strb	r4, [r3, #0]
 8003184:	b01d      	add	sp, #116	@ 0x74
 8003186:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800318a:	b003      	add	sp, #12
 800318c:	4770      	bx	lr
 800318e:	bf00      	nop
 8003190:	2000000c 	.word	0x2000000c
 8003194:	ffff0208 	.word	0xffff0208

08003198 <memset>:
 8003198:	4402      	add	r2, r0
 800319a:	4603      	mov	r3, r0
 800319c:	4293      	cmp	r3, r2
 800319e:	d100      	bne.n	80031a2 <memset+0xa>
 80031a0:	4770      	bx	lr
 80031a2:	f803 1b01 	strb.w	r1, [r3], #1
 80031a6:	e7f9      	b.n	800319c <memset+0x4>

080031a8 <__errno>:
 80031a8:	4b01      	ldr	r3, [pc, #4]	@ (80031b0 <__errno+0x8>)
 80031aa:	6818      	ldr	r0, [r3, #0]
 80031ac:	4770      	bx	lr
 80031ae:	bf00      	nop
 80031b0:	2000000c 	.word	0x2000000c

080031b4 <__libc_init_array>:
 80031b4:	b570      	push	{r4, r5, r6, lr}
 80031b6:	4d0d      	ldr	r5, [pc, #52]	@ (80031ec <__libc_init_array+0x38>)
 80031b8:	4c0d      	ldr	r4, [pc, #52]	@ (80031f0 <__libc_init_array+0x3c>)
 80031ba:	1b64      	subs	r4, r4, r5
 80031bc:	10a4      	asrs	r4, r4, #2
 80031be:	2600      	movs	r6, #0
 80031c0:	42a6      	cmp	r6, r4
 80031c2:	d109      	bne.n	80031d8 <__libc_init_array+0x24>
 80031c4:	4d0b      	ldr	r5, [pc, #44]	@ (80031f4 <__libc_init_array+0x40>)
 80031c6:	4c0c      	ldr	r4, [pc, #48]	@ (80031f8 <__libc_init_array+0x44>)
 80031c8:	f000 fc64 	bl	8003a94 <_init>
 80031cc:	1b64      	subs	r4, r4, r5
 80031ce:	10a4      	asrs	r4, r4, #2
 80031d0:	2600      	movs	r6, #0
 80031d2:	42a6      	cmp	r6, r4
 80031d4:	d105      	bne.n	80031e2 <__libc_init_array+0x2e>
 80031d6:	bd70      	pop	{r4, r5, r6, pc}
 80031d8:	f855 3b04 	ldr.w	r3, [r5], #4
 80031dc:	4798      	blx	r3
 80031de:	3601      	adds	r6, #1
 80031e0:	e7ee      	b.n	80031c0 <__libc_init_array+0xc>
 80031e2:	f855 3b04 	ldr.w	r3, [r5], #4
 80031e6:	4798      	blx	r3
 80031e8:	3601      	adds	r6, #1
 80031ea:	e7f2      	b.n	80031d2 <__libc_init_array+0x1e>
 80031ec:	08003b14 	.word	0x08003b14
 80031f0:	08003b14 	.word	0x08003b14
 80031f4:	08003b14 	.word	0x08003b14
 80031f8:	08003b18 	.word	0x08003b18

080031fc <__retarget_lock_acquire_recursive>:
 80031fc:	4770      	bx	lr

080031fe <__retarget_lock_release_recursive>:
 80031fe:	4770      	bx	lr

08003200 <_free_r>:
 8003200:	b538      	push	{r3, r4, r5, lr}
 8003202:	4605      	mov	r5, r0
 8003204:	2900      	cmp	r1, #0
 8003206:	d041      	beq.n	800328c <_free_r+0x8c>
 8003208:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800320c:	1f0c      	subs	r4, r1, #4
 800320e:	2b00      	cmp	r3, #0
 8003210:	bfb8      	it	lt
 8003212:	18e4      	addlt	r4, r4, r3
 8003214:	f000 f8e0 	bl	80033d8 <__malloc_lock>
 8003218:	4a1d      	ldr	r2, [pc, #116]	@ (8003290 <_free_r+0x90>)
 800321a:	6813      	ldr	r3, [r2, #0]
 800321c:	b933      	cbnz	r3, 800322c <_free_r+0x2c>
 800321e:	6063      	str	r3, [r4, #4]
 8003220:	6014      	str	r4, [r2, #0]
 8003222:	4628      	mov	r0, r5
 8003224:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003228:	f000 b8dc 	b.w	80033e4 <__malloc_unlock>
 800322c:	42a3      	cmp	r3, r4
 800322e:	d908      	bls.n	8003242 <_free_r+0x42>
 8003230:	6820      	ldr	r0, [r4, #0]
 8003232:	1821      	adds	r1, r4, r0
 8003234:	428b      	cmp	r3, r1
 8003236:	bf01      	itttt	eq
 8003238:	6819      	ldreq	r1, [r3, #0]
 800323a:	685b      	ldreq	r3, [r3, #4]
 800323c:	1809      	addeq	r1, r1, r0
 800323e:	6021      	streq	r1, [r4, #0]
 8003240:	e7ed      	b.n	800321e <_free_r+0x1e>
 8003242:	461a      	mov	r2, r3
 8003244:	685b      	ldr	r3, [r3, #4]
 8003246:	b10b      	cbz	r3, 800324c <_free_r+0x4c>
 8003248:	42a3      	cmp	r3, r4
 800324a:	d9fa      	bls.n	8003242 <_free_r+0x42>
 800324c:	6811      	ldr	r1, [r2, #0]
 800324e:	1850      	adds	r0, r2, r1
 8003250:	42a0      	cmp	r0, r4
 8003252:	d10b      	bne.n	800326c <_free_r+0x6c>
 8003254:	6820      	ldr	r0, [r4, #0]
 8003256:	4401      	add	r1, r0
 8003258:	1850      	adds	r0, r2, r1
 800325a:	4283      	cmp	r3, r0
 800325c:	6011      	str	r1, [r2, #0]
 800325e:	d1e0      	bne.n	8003222 <_free_r+0x22>
 8003260:	6818      	ldr	r0, [r3, #0]
 8003262:	685b      	ldr	r3, [r3, #4]
 8003264:	6053      	str	r3, [r2, #4]
 8003266:	4408      	add	r0, r1
 8003268:	6010      	str	r0, [r2, #0]
 800326a:	e7da      	b.n	8003222 <_free_r+0x22>
 800326c:	d902      	bls.n	8003274 <_free_r+0x74>
 800326e:	230c      	movs	r3, #12
 8003270:	602b      	str	r3, [r5, #0]
 8003272:	e7d6      	b.n	8003222 <_free_r+0x22>
 8003274:	6820      	ldr	r0, [r4, #0]
 8003276:	1821      	adds	r1, r4, r0
 8003278:	428b      	cmp	r3, r1
 800327a:	bf04      	itt	eq
 800327c:	6819      	ldreq	r1, [r3, #0]
 800327e:	685b      	ldreq	r3, [r3, #4]
 8003280:	6063      	str	r3, [r4, #4]
 8003282:	bf04      	itt	eq
 8003284:	1809      	addeq	r1, r1, r0
 8003286:	6021      	streq	r1, [r4, #0]
 8003288:	6054      	str	r4, [r2, #4]
 800328a:	e7ca      	b.n	8003222 <_free_r+0x22>
 800328c:	bd38      	pop	{r3, r4, r5, pc}
 800328e:	bf00      	nop
 8003290:	200004c8 	.word	0x200004c8

08003294 <sbrk_aligned>:
 8003294:	b570      	push	{r4, r5, r6, lr}
 8003296:	4e0f      	ldr	r6, [pc, #60]	@ (80032d4 <sbrk_aligned+0x40>)
 8003298:	460c      	mov	r4, r1
 800329a:	6831      	ldr	r1, [r6, #0]
 800329c:	4605      	mov	r5, r0
 800329e:	b911      	cbnz	r1, 80032a6 <sbrk_aligned+0x12>
 80032a0:	f000 fba4 	bl	80039ec <_sbrk_r>
 80032a4:	6030      	str	r0, [r6, #0]
 80032a6:	4621      	mov	r1, r4
 80032a8:	4628      	mov	r0, r5
 80032aa:	f000 fb9f 	bl	80039ec <_sbrk_r>
 80032ae:	1c43      	adds	r3, r0, #1
 80032b0:	d103      	bne.n	80032ba <sbrk_aligned+0x26>
 80032b2:	f04f 34ff 	mov.w	r4, #4294967295
 80032b6:	4620      	mov	r0, r4
 80032b8:	bd70      	pop	{r4, r5, r6, pc}
 80032ba:	1cc4      	adds	r4, r0, #3
 80032bc:	f024 0403 	bic.w	r4, r4, #3
 80032c0:	42a0      	cmp	r0, r4
 80032c2:	d0f8      	beq.n	80032b6 <sbrk_aligned+0x22>
 80032c4:	1a21      	subs	r1, r4, r0
 80032c6:	4628      	mov	r0, r5
 80032c8:	f000 fb90 	bl	80039ec <_sbrk_r>
 80032cc:	3001      	adds	r0, #1
 80032ce:	d1f2      	bne.n	80032b6 <sbrk_aligned+0x22>
 80032d0:	e7ef      	b.n	80032b2 <sbrk_aligned+0x1e>
 80032d2:	bf00      	nop
 80032d4:	200004c4 	.word	0x200004c4

080032d8 <_malloc_r>:
 80032d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80032dc:	1ccd      	adds	r5, r1, #3
 80032de:	f025 0503 	bic.w	r5, r5, #3
 80032e2:	3508      	adds	r5, #8
 80032e4:	2d0c      	cmp	r5, #12
 80032e6:	bf38      	it	cc
 80032e8:	250c      	movcc	r5, #12
 80032ea:	2d00      	cmp	r5, #0
 80032ec:	4606      	mov	r6, r0
 80032ee:	db01      	blt.n	80032f4 <_malloc_r+0x1c>
 80032f0:	42a9      	cmp	r1, r5
 80032f2:	d904      	bls.n	80032fe <_malloc_r+0x26>
 80032f4:	230c      	movs	r3, #12
 80032f6:	6033      	str	r3, [r6, #0]
 80032f8:	2000      	movs	r0, #0
 80032fa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80032fe:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80033d4 <_malloc_r+0xfc>
 8003302:	f000 f869 	bl	80033d8 <__malloc_lock>
 8003306:	f8d8 3000 	ldr.w	r3, [r8]
 800330a:	461c      	mov	r4, r3
 800330c:	bb44      	cbnz	r4, 8003360 <_malloc_r+0x88>
 800330e:	4629      	mov	r1, r5
 8003310:	4630      	mov	r0, r6
 8003312:	f7ff ffbf 	bl	8003294 <sbrk_aligned>
 8003316:	1c43      	adds	r3, r0, #1
 8003318:	4604      	mov	r4, r0
 800331a:	d158      	bne.n	80033ce <_malloc_r+0xf6>
 800331c:	f8d8 4000 	ldr.w	r4, [r8]
 8003320:	4627      	mov	r7, r4
 8003322:	2f00      	cmp	r7, #0
 8003324:	d143      	bne.n	80033ae <_malloc_r+0xd6>
 8003326:	2c00      	cmp	r4, #0
 8003328:	d04b      	beq.n	80033c2 <_malloc_r+0xea>
 800332a:	6823      	ldr	r3, [r4, #0]
 800332c:	4639      	mov	r1, r7
 800332e:	4630      	mov	r0, r6
 8003330:	eb04 0903 	add.w	r9, r4, r3
 8003334:	f000 fb5a 	bl	80039ec <_sbrk_r>
 8003338:	4581      	cmp	r9, r0
 800333a:	d142      	bne.n	80033c2 <_malloc_r+0xea>
 800333c:	6821      	ldr	r1, [r4, #0]
 800333e:	1a6d      	subs	r5, r5, r1
 8003340:	4629      	mov	r1, r5
 8003342:	4630      	mov	r0, r6
 8003344:	f7ff ffa6 	bl	8003294 <sbrk_aligned>
 8003348:	3001      	adds	r0, #1
 800334a:	d03a      	beq.n	80033c2 <_malloc_r+0xea>
 800334c:	6823      	ldr	r3, [r4, #0]
 800334e:	442b      	add	r3, r5
 8003350:	6023      	str	r3, [r4, #0]
 8003352:	f8d8 3000 	ldr.w	r3, [r8]
 8003356:	685a      	ldr	r2, [r3, #4]
 8003358:	bb62      	cbnz	r2, 80033b4 <_malloc_r+0xdc>
 800335a:	f8c8 7000 	str.w	r7, [r8]
 800335e:	e00f      	b.n	8003380 <_malloc_r+0xa8>
 8003360:	6822      	ldr	r2, [r4, #0]
 8003362:	1b52      	subs	r2, r2, r5
 8003364:	d420      	bmi.n	80033a8 <_malloc_r+0xd0>
 8003366:	2a0b      	cmp	r2, #11
 8003368:	d917      	bls.n	800339a <_malloc_r+0xc2>
 800336a:	1961      	adds	r1, r4, r5
 800336c:	42a3      	cmp	r3, r4
 800336e:	6025      	str	r5, [r4, #0]
 8003370:	bf18      	it	ne
 8003372:	6059      	strne	r1, [r3, #4]
 8003374:	6863      	ldr	r3, [r4, #4]
 8003376:	bf08      	it	eq
 8003378:	f8c8 1000 	streq.w	r1, [r8]
 800337c:	5162      	str	r2, [r4, r5]
 800337e:	604b      	str	r3, [r1, #4]
 8003380:	4630      	mov	r0, r6
 8003382:	f000 f82f 	bl	80033e4 <__malloc_unlock>
 8003386:	f104 000b 	add.w	r0, r4, #11
 800338a:	1d23      	adds	r3, r4, #4
 800338c:	f020 0007 	bic.w	r0, r0, #7
 8003390:	1ac2      	subs	r2, r0, r3
 8003392:	bf1c      	itt	ne
 8003394:	1a1b      	subne	r3, r3, r0
 8003396:	50a3      	strne	r3, [r4, r2]
 8003398:	e7af      	b.n	80032fa <_malloc_r+0x22>
 800339a:	6862      	ldr	r2, [r4, #4]
 800339c:	42a3      	cmp	r3, r4
 800339e:	bf0c      	ite	eq
 80033a0:	f8c8 2000 	streq.w	r2, [r8]
 80033a4:	605a      	strne	r2, [r3, #4]
 80033a6:	e7eb      	b.n	8003380 <_malloc_r+0xa8>
 80033a8:	4623      	mov	r3, r4
 80033aa:	6864      	ldr	r4, [r4, #4]
 80033ac:	e7ae      	b.n	800330c <_malloc_r+0x34>
 80033ae:	463c      	mov	r4, r7
 80033b0:	687f      	ldr	r7, [r7, #4]
 80033b2:	e7b6      	b.n	8003322 <_malloc_r+0x4a>
 80033b4:	461a      	mov	r2, r3
 80033b6:	685b      	ldr	r3, [r3, #4]
 80033b8:	42a3      	cmp	r3, r4
 80033ba:	d1fb      	bne.n	80033b4 <_malloc_r+0xdc>
 80033bc:	2300      	movs	r3, #0
 80033be:	6053      	str	r3, [r2, #4]
 80033c0:	e7de      	b.n	8003380 <_malloc_r+0xa8>
 80033c2:	230c      	movs	r3, #12
 80033c4:	6033      	str	r3, [r6, #0]
 80033c6:	4630      	mov	r0, r6
 80033c8:	f000 f80c 	bl	80033e4 <__malloc_unlock>
 80033cc:	e794      	b.n	80032f8 <_malloc_r+0x20>
 80033ce:	6005      	str	r5, [r0, #0]
 80033d0:	e7d6      	b.n	8003380 <_malloc_r+0xa8>
 80033d2:	bf00      	nop
 80033d4:	200004c8 	.word	0x200004c8

080033d8 <__malloc_lock>:
 80033d8:	4801      	ldr	r0, [pc, #4]	@ (80033e0 <__malloc_lock+0x8>)
 80033da:	f7ff bf0f 	b.w	80031fc <__retarget_lock_acquire_recursive>
 80033de:	bf00      	nop
 80033e0:	200004c0 	.word	0x200004c0

080033e4 <__malloc_unlock>:
 80033e4:	4801      	ldr	r0, [pc, #4]	@ (80033ec <__malloc_unlock+0x8>)
 80033e6:	f7ff bf0a 	b.w	80031fe <__retarget_lock_release_recursive>
 80033ea:	bf00      	nop
 80033ec:	200004c0 	.word	0x200004c0

080033f0 <__ssputs_r>:
 80033f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80033f4:	688e      	ldr	r6, [r1, #8]
 80033f6:	461f      	mov	r7, r3
 80033f8:	42be      	cmp	r6, r7
 80033fa:	680b      	ldr	r3, [r1, #0]
 80033fc:	4682      	mov	sl, r0
 80033fe:	460c      	mov	r4, r1
 8003400:	4690      	mov	r8, r2
 8003402:	d82d      	bhi.n	8003460 <__ssputs_r+0x70>
 8003404:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8003408:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800340c:	d026      	beq.n	800345c <__ssputs_r+0x6c>
 800340e:	6965      	ldr	r5, [r4, #20]
 8003410:	6909      	ldr	r1, [r1, #16]
 8003412:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003416:	eba3 0901 	sub.w	r9, r3, r1
 800341a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800341e:	1c7b      	adds	r3, r7, #1
 8003420:	444b      	add	r3, r9
 8003422:	106d      	asrs	r5, r5, #1
 8003424:	429d      	cmp	r5, r3
 8003426:	bf38      	it	cc
 8003428:	461d      	movcc	r5, r3
 800342a:	0553      	lsls	r3, r2, #21
 800342c:	d527      	bpl.n	800347e <__ssputs_r+0x8e>
 800342e:	4629      	mov	r1, r5
 8003430:	f7ff ff52 	bl	80032d8 <_malloc_r>
 8003434:	4606      	mov	r6, r0
 8003436:	b360      	cbz	r0, 8003492 <__ssputs_r+0xa2>
 8003438:	6921      	ldr	r1, [r4, #16]
 800343a:	464a      	mov	r2, r9
 800343c:	f000 fae6 	bl	8003a0c <memcpy>
 8003440:	89a3      	ldrh	r3, [r4, #12]
 8003442:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8003446:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800344a:	81a3      	strh	r3, [r4, #12]
 800344c:	6126      	str	r6, [r4, #16]
 800344e:	6165      	str	r5, [r4, #20]
 8003450:	444e      	add	r6, r9
 8003452:	eba5 0509 	sub.w	r5, r5, r9
 8003456:	6026      	str	r6, [r4, #0]
 8003458:	60a5      	str	r5, [r4, #8]
 800345a:	463e      	mov	r6, r7
 800345c:	42be      	cmp	r6, r7
 800345e:	d900      	bls.n	8003462 <__ssputs_r+0x72>
 8003460:	463e      	mov	r6, r7
 8003462:	6820      	ldr	r0, [r4, #0]
 8003464:	4632      	mov	r2, r6
 8003466:	4641      	mov	r1, r8
 8003468:	f000 faa6 	bl	80039b8 <memmove>
 800346c:	68a3      	ldr	r3, [r4, #8]
 800346e:	1b9b      	subs	r3, r3, r6
 8003470:	60a3      	str	r3, [r4, #8]
 8003472:	6823      	ldr	r3, [r4, #0]
 8003474:	4433      	add	r3, r6
 8003476:	6023      	str	r3, [r4, #0]
 8003478:	2000      	movs	r0, #0
 800347a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800347e:	462a      	mov	r2, r5
 8003480:	f000 fad2 	bl	8003a28 <_realloc_r>
 8003484:	4606      	mov	r6, r0
 8003486:	2800      	cmp	r0, #0
 8003488:	d1e0      	bne.n	800344c <__ssputs_r+0x5c>
 800348a:	6921      	ldr	r1, [r4, #16]
 800348c:	4650      	mov	r0, sl
 800348e:	f7ff feb7 	bl	8003200 <_free_r>
 8003492:	230c      	movs	r3, #12
 8003494:	f8ca 3000 	str.w	r3, [sl]
 8003498:	89a3      	ldrh	r3, [r4, #12]
 800349a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800349e:	81a3      	strh	r3, [r4, #12]
 80034a0:	f04f 30ff 	mov.w	r0, #4294967295
 80034a4:	e7e9      	b.n	800347a <__ssputs_r+0x8a>
	...

080034a8 <_svfiprintf_r>:
 80034a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80034ac:	4698      	mov	r8, r3
 80034ae:	898b      	ldrh	r3, [r1, #12]
 80034b0:	061b      	lsls	r3, r3, #24
 80034b2:	b09d      	sub	sp, #116	@ 0x74
 80034b4:	4607      	mov	r7, r0
 80034b6:	460d      	mov	r5, r1
 80034b8:	4614      	mov	r4, r2
 80034ba:	d510      	bpl.n	80034de <_svfiprintf_r+0x36>
 80034bc:	690b      	ldr	r3, [r1, #16]
 80034be:	b973      	cbnz	r3, 80034de <_svfiprintf_r+0x36>
 80034c0:	2140      	movs	r1, #64	@ 0x40
 80034c2:	f7ff ff09 	bl	80032d8 <_malloc_r>
 80034c6:	6028      	str	r0, [r5, #0]
 80034c8:	6128      	str	r0, [r5, #16]
 80034ca:	b930      	cbnz	r0, 80034da <_svfiprintf_r+0x32>
 80034cc:	230c      	movs	r3, #12
 80034ce:	603b      	str	r3, [r7, #0]
 80034d0:	f04f 30ff 	mov.w	r0, #4294967295
 80034d4:	b01d      	add	sp, #116	@ 0x74
 80034d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80034da:	2340      	movs	r3, #64	@ 0x40
 80034dc:	616b      	str	r3, [r5, #20]
 80034de:	2300      	movs	r3, #0
 80034e0:	9309      	str	r3, [sp, #36]	@ 0x24
 80034e2:	2320      	movs	r3, #32
 80034e4:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80034e8:	f8cd 800c 	str.w	r8, [sp, #12]
 80034ec:	2330      	movs	r3, #48	@ 0x30
 80034ee:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800368c <_svfiprintf_r+0x1e4>
 80034f2:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80034f6:	f04f 0901 	mov.w	r9, #1
 80034fa:	4623      	mov	r3, r4
 80034fc:	469a      	mov	sl, r3
 80034fe:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003502:	b10a      	cbz	r2, 8003508 <_svfiprintf_r+0x60>
 8003504:	2a25      	cmp	r2, #37	@ 0x25
 8003506:	d1f9      	bne.n	80034fc <_svfiprintf_r+0x54>
 8003508:	ebba 0b04 	subs.w	fp, sl, r4
 800350c:	d00b      	beq.n	8003526 <_svfiprintf_r+0x7e>
 800350e:	465b      	mov	r3, fp
 8003510:	4622      	mov	r2, r4
 8003512:	4629      	mov	r1, r5
 8003514:	4638      	mov	r0, r7
 8003516:	f7ff ff6b 	bl	80033f0 <__ssputs_r>
 800351a:	3001      	adds	r0, #1
 800351c:	f000 80a7 	beq.w	800366e <_svfiprintf_r+0x1c6>
 8003520:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8003522:	445a      	add	r2, fp
 8003524:	9209      	str	r2, [sp, #36]	@ 0x24
 8003526:	f89a 3000 	ldrb.w	r3, [sl]
 800352a:	2b00      	cmp	r3, #0
 800352c:	f000 809f 	beq.w	800366e <_svfiprintf_r+0x1c6>
 8003530:	2300      	movs	r3, #0
 8003532:	f04f 32ff 	mov.w	r2, #4294967295
 8003536:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800353a:	f10a 0a01 	add.w	sl, sl, #1
 800353e:	9304      	str	r3, [sp, #16]
 8003540:	9307      	str	r3, [sp, #28]
 8003542:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8003546:	931a      	str	r3, [sp, #104]	@ 0x68
 8003548:	4654      	mov	r4, sl
 800354a:	2205      	movs	r2, #5
 800354c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003550:	484e      	ldr	r0, [pc, #312]	@ (800368c <_svfiprintf_r+0x1e4>)
 8003552:	f7fc fe3d 	bl	80001d0 <memchr>
 8003556:	9a04      	ldr	r2, [sp, #16]
 8003558:	b9d8      	cbnz	r0, 8003592 <_svfiprintf_r+0xea>
 800355a:	06d0      	lsls	r0, r2, #27
 800355c:	bf44      	itt	mi
 800355e:	2320      	movmi	r3, #32
 8003560:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003564:	0711      	lsls	r1, r2, #28
 8003566:	bf44      	itt	mi
 8003568:	232b      	movmi	r3, #43	@ 0x2b
 800356a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800356e:	f89a 3000 	ldrb.w	r3, [sl]
 8003572:	2b2a      	cmp	r3, #42	@ 0x2a
 8003574:	d015      	beq.n	80035a2 <_svfiprintf_r+0xfa>
 8003576:	9a07      	ldr	r2, [sp, #28]
 8003578:	4654      	mov	r4, sl
 800357a:	2000      	movs	r0, #0
 800357c:	f04f 0c0a 	mov.w	ip, #10
 8003580:	4621      	mov	r1, r4
 8003582:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003586:	3b30      	subs	r3, #48	@ 0x30
 8003588:	2b09      	cmp	r3, #9
 800358a:	d94b      	bls.n	8003624 <_svfiprintf_r+0x17c>
 800358c:	b1b0      	cbz	r0, 80035bc <_svfiprintf_r+0x114>
 800358e:	9207      	str	r2, [sp, #28]
 8003590:	e014      	b.n	80035bc <_svfiprintf_r+0x114>
 8003592:	eba0 0308 	sub.w	r3, r0, r8
 8003596:	fa09 f303 	lsl.w	r3, r9, r3
 800359a:	4313      	orrs	r3, r2
 800359c:	9304      	str	r3, [sp, #16]
 800359e:	46a2      	mov	sl, r4
 80035a0:	e7d2      	b.n	8003548 <_svfiprintf_r+0xa0>
 80035a2:	9b03      	ldr	r3, [sp, #12]
 80035a4:	1d19      	adds	r1, r3, #4
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	9103      	str	r1, [sp, #12]
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	bfbb      	ittet	lt
 80035ae:	425b      	neglt	r3, r3
 80035b0:	f042 0202 	orrlt.w	r2, r2, #2
 80035b4:	9307      	strge	r3, [sp, #28]
 80035b6:	9307      	strlt	r3, [sp, #28]
 80035b8:	bfb8      	it	lt
 80035ba:	9204      	strlt	r2, [sp, #16]
 80035bc:	7823      	ldrb	r3, [r4, #0]
 80035be:	2b2e      	cmp	r3, #46	@ 0x2e
 80035c0:	d10a      	bne.n	80035d8 <_svfiprintf_r+0x130>
 80035c2:	7863      	ldrb	r3, [r4, #1]
 80035c4:	2b2a      	cmp	r3, #42	@ 0x2a
 80035c6:	d132      	bne.n	800362e <_svfiprintf_r+0x186>
 80035c8:	9b03      	ldr	r3, [sp, #12]
 80035ca:	1d1a      	adds	r2, r3, #4
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	9203      	str	r2, [sp, #12]
 80035d0:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80035d4:	3402      	adds	r4, #2
 80035d6:	9305      	str	r3, [sp, #20]
 80035d8:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800369c <_svfiprintf_r+0x1f4>
 80035dc:	7821      	ldrb	r1, [r4, #0]
 80035de:	2203      	movs	r2, #3
 80035e0:	4650      	mov	r0, sl
 80035e2:	f7fc fdf5 	bl	80001d0 <memchr>
 80035e6:	b138      	cbz	r0, 80035f8 <_svfiprintf_r+0x150>
 80035e8:	9b04      	ldr	r3, [sp, #16]
 80035ea:	eba0 000a 	sub.w	r0, r0, sl
 80035ee:	2240      	movs	r2, #64	@ 0x40
 80035f0:	4082      	lsls	r2, r0
 80035f2:	4313      	orrs	r3, r2
 80035f4:	3401      	adds	r4, #1
 80035f6:	9304      	str	r3, [sp, #16]
 80035f8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80035fc:	4824      	ldr	r0, [pc, #144]	@ (8003690 <_svfiprintf_r+0x1e8>)
 80035fe:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8003602:	2206      	movs	r2, #6
 8003604:	f7fc fde4 	bl	80001d0 <memchr>
 8003608:	2800      	cmp	r0, #0
 800360a:	d036      	beq.n	800367a <_svfiprintf_r+0x1d2>
 800360c:	4b21      	ldr	r3, [pc, #132]	@ (8003694 <_svfiprintf_r+0x1ec>)
 800360e:	bb1b      	cbnz	r3, 8003658 <_svfiprintf_r+0x1b0>
 8003610:	9b03      	ldr	r3, [sp, #12]
 8003612:	3307      	adds	r3, #7
 8003614:	f023 0307 	bic.w	r3, r3, #7
 8003618:	3308      	adds	r3, #8
 800361a:	9303      	str	r3, [sp, #12]
 800361c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800361e:	4433      	add	r3, r6
 8003620:	9309      	str	r3, [sp, #36]	@ 0x24
 8003622:	e76a      	b.n	80034fa <_svfiprintf_r+0x52>
 8003624:	fb0c 3202 	mla	r2, ip, r2, r3
 8003628:	460c      	mov	r4, r1
 800362a:	2001      	movs	r0, #1
 800362c:	e7a8      	b.n	8003580 <_svfiprintf_r+0xd8>
 800362e:	2300      	movs	r3, #0
 8003630:	3401      	adds	r4, #1
 8003632:	9305      	str	r3, [sp, #20]
 8003634:	4619      	mov	r1, r3
 8003636:	f04f 0c0a 	mov.w	ip, #10
 800363a:	4620      	mov	r0, r4
 800363c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003640:	3a30      	subs	r2, #48	@ 0x30
 8003642:	2a09      	cmp	r2, #9
 8003644:	d903      	bls.n	800364e <_svfiprintf_r+0x1a6>
 8003646:	2b00      	cmp	r3, #0
 8003648:	d0c6      	beq.n	80035d8 <_svfiprintf_r+0x130>
 800364a:	9105      	str	r1, [sp, #20]
 800364c:	e7c4      	b.n	80035d8 <_svfiprintf_r+0x130>
 800364e:	fb0c 2101 	mla	r1, ip, r1, r2
 8003652:	4604      	mov	r4, r0
 8003654:	2301      	movs	r3, #1
 8003656:	e7f0      	b.n	800363a <_svfiprintf_r+0x192>
 8003658:	ab03      	add	r3, sp, #12
 800365a:	9300      	str	r3, [sp, #0]
 800365c:	462a      	mov	r2, r5
 800365e:	4b0e      	ldr	r3, [pc, #56]	@ (8003698 <_svfiprintf_r+0x1f0>)
 8003660:	a904      	add	r1, sp, #16
 8003662:	4638      	mov	r0, r7
 8003664:	f3af 8000 	nop.w
 8003668:	1c42      	adds	r2, r0, #1
 800366a:	4606      	mov	r6, r0
 800366c:	d1d6      	bne.n	800361c <_svfiprintf_r+0x174>
 800366e:	89ab      	ldrh	r3, [r5, #12]
 8003670:	065b      	lsls	r3, r3, #25
 8003672:	f53f af2d 	bmi.w	80034d0 <_svfiprintf_r+0x28>
 8003676:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8003678:	e72c      	b.n	80034d4 <_svfiprintf_r+0x2c>
 800367a:	ab03      	add	r3, sp, #12
 800367c:	9300      	str	r3, [sp, #0]
 800367e:	462a      	mov	r2, r5
 8003680:	4b05      	ldr	r3, [pc, #20]	@ (8003698 <_svfiprintf_r+0x1f0>)
 8003682:	a904      	add	r1, sp, #16
 8003684:	4638      	mov	r0, r7
 8003686:	f000 f879 	bl	800377c <_printf_i>
 800368a:	e7ed      	b.n	8003668 <_svfiprintf_r+0x1c0>
 800368c:	08003ad8 	.word	0x08003ad8
 8003690:	08003ae2 	.word	0x08003ae2
 8003694:	00000000 	.word	0x00000000
 8003698:	080033f1 	.word	0x080033f1
 800369c:	08003ade 	.word	0x08003ade

080036a0 <_printf_common>:
 80036a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80036a4:	4616      	mov	r6, r2
 80036a6:	4698      	mov	r8, r3
 80036a8:	688a      	ldr	r2, [r1, #8]
 80036aa:	690b      	ldr	r3, [r1, #16]
 80036ac:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80036b0:	4293      	cmp	r3, r2
 80036b2:	bfb8      	it	lt
 80036b4:	4613      	movlt	r3, r2
 80036b6:	6033      	str	r3, [r6, #0]
 80036b8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80036bc:	4607      	mov	r7, r0
 80036be:	460c      	mov	r4, r1
 80036c0:	b10a      	cbz	r2, 80036c6 <_printf_common+0x26>
 80036c2:	3301      	adds	r3, #1
 80036c4:	6033      	str	r3, [r6, #0]
 80036c6:	6823      	ldr	r3, [r4, #0]
 80036c8:	0699      	lsls	r1, r3, #26
 80036ca:	bf42      	ittt	mi
 80036cc:	6833      	ldrmi	r3, [r6, #0]
 80036ce:	3302      	addmi	r3, #2
 80036d0:	6033      	strmi	r3, [r6, #0]
 80036d2:	6825      	ldr	r5, [r4, #0]
 80036d4:	f015 0506 	ands.w	r5, r5, #6
 80036d8:	d106      	bne.n	80036e8 <_printf_common+0x48>
 80036da:	f104 0a19 	add.w	sl, r4, #25
 80036de:	68e3      	ldr	r3, [r4, #12]
 80036e0:	6832      	ldr	r2, [r6, #0]
 80036e2:	1a9b      	subs	r3, r3, r2
 80036e4:	42ab      	cmp	r3, r5
 80036e6:	dc26      	bgt.n	8003736 <_printf_common+0x96>
 80036e8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80036ec:	6822      	ldr	r2, [r4, #0]
 80036ee:	3b00      	subs	r3, #0
 80036f0:	bf18      	it	ne
 80036f2:	2301      	movne	r3, #1
 80036f4:	0692      	lsls	r2, r2, #26
 80036f6:	d42b      	bmi.n	8003750 <_printf_common+0xb0>
 80036f8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80036fc:	4641      	mov	r1, r8
 80036fe:	4638      	mov	r0, r7
 8003700:	47c8      	blx	r9
 8003702:	3001      	adds	r0, #1
 8003704:	d01e      	beq.n	8003744 <_printf_common+0xa4>
 8003706:	6823      	ldr	r3, [r4, #0]
 8003708:	6922      	ldr	r2, [r4, #16]
 800370a:	f003 0306 	and.w	r3, r3, #6
 800370e:	2b04      	cmp	r3, #4
 8003710:	bf02      	ittt	eq
 8003712:	68e5      	ldreq	r5, [r4, #12]
 8003714:	6833      	ldreq	r3, [r6, #0]
 8003716:	1aed      	subeq	r5, r5, r3
 8003718:	68a3      	ldr	r3, [r4, #8]
 800371a:	bf0c      	ite	eq
 800371c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003720:	2500      	movne	r5, #0
 8003722:	4293      	cmp	r3, r2
 8003724:	bfc4      	itt	gt
 8003726:	1a9b      	subgt	r3, r3, r2
 8003728:	18ed      	addgt	r5, r5, r3
 800372a:	2600      	movs	r6, #0
 800372c:	341a      	adds	r4, #26
 800372e:	42b5      	cmp	r5, r6
 8003730:	d11a      	bne.n	8003768 <_printf_common+0xc8>
 8003732:	2000      	movs	r0, #0
 8003734:	e008      	b.n	8003748 <_printf_common+0xa8>
 8003736:	2301      	movs	r3, #1
 8003738:	4652      	mov	r2, sl
 800373a:	4641      	mov	r1, r8
 800373c:	4638      	mov	r0, r7
 800373e:	47c8      	blx	r9
 8003740:	3001      	adds	r0, #1
 8003742:	d103      	bne.n	800374c <_printf_common+0xac>
 8003744:	f04f 30ff 	mov.w	r0, #4294967295
 8003748:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800374c:	3501      	adds	r5, #1
 800374e:	e7c6      	b.n	80036de <_printf_common+0x3e>
 8003750:	18e1      	adds	r1, r4, r3
 8003752:	1c5a      	adds	r2, r3, #1
 8003754:	2030      	movs	r0, #48	@ 0x30
 8003756:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800375a:	4422      	add	r2, r4
 800375c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8003760:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8003764:	3302      	adds	r3, #2
 8003766:	e7c7      	b.n	80036f8 <_printf_common+0x58>
 8003768:	2301      	movs	r3, #1
 800376a:	4622      	mov	r2, r4
 800376c:	4641      	mov	r1, r8
 800376e:	4638      	mov	r0, r7
 8003770:	47c8      	blx	r9
 8003772:	3001      	adds	r0, #1
 8003774:	d0e6      	beq.n	8003744 <_printf_common+0xa4>
 8003776:	3601      	adds	r6, #1
 8003778:	e7d9      	b.n	800372e <_printf_common+0x8e>
	...

0800377c <_printf_i>:
 800377c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003780:	7e0f      	ldrb	r7, [r1, #24]
 8003782:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8003784:	2f78      	cmp	r7, #120	@ 0x78
 8003786:	4691      	mov	r9, r2
 8003788:	4680      	mov	r8, r0
 800378a:	460c      	mov	r4, r1
 800378c:	469a      	mov	sl, r3
 800378e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8003792:	d807      	bhi.n	80037a4 <_printf_i+0x28>
 8003794:	2f62      	cmp	r7, #98	@ 0x62
 8003796:	d80a      	bhi.n	80037ae <_printf_i+0x32>
 8003798:	2f00      	cmp	r7, #0
 800379a:	f000 80d1 	beq.w	8003940 <_printf_i+0x1c4>
 800379e:	2f58      	cmp	r7, #88	@ 0x58
 80037a0:	f000 80b8 	beq.w	8003914 <_printf_i+0x198>
 80037a4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80037a8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80037ac:	e03a      	b.n	8003824 <_printf_i+0xa8>
 80037ae:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80037b2:	2b15      	cmp	r3, #21
 80037b4:	d8f6      	bhi.n	80037a4 <_printf_i+0x28>
 80037b6:	a101      	add	r1, pc, #4	@ (adr r1, 80037bc <_printf_i+0x40>)
 80037b8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80037bc:	08003815 	.word	0x08003815
 80037c0:	08003829 	.word	0x08003829
 80037c4:	080037a5 	.word	0x080037a5
 80037c8:	080037a5 	.word	0x080037a5
 80037cc:	080037a5 	.word	0x080037a5
 80037d0:	080037a5 	.word	0x080037a5
 80037d4:	08003829 	.word	0x08003829
 80037d8:	080037a5 	.word	0x080037a5
 80037dc:	080037a5 	.word	0x080037a5
 80037e0:	080037a5 	.word	0x080037a5
 80037e4:	080037a5 	.word	0x080037a5
 80037e8:	08003927 	.word	0x08003927
 80037ec:	08003853 	.word	0x08003853
 80037f0:	080038e1 	.word	0x080038e1
 80037f4:	080037a5 	.word	0x080037a5
 80037f8:	080037a5 	.word	0x080037a5
 80037fc:	08003949 	.word	0x08003949
 8003800:	080037a5 	.word	0x080037a5
 8003804:	08003853 	.word	0x08003853
 8003808:	080037a5 	.word	0x080037a5
 800380c:	080037a5 	.word	0x080037a5
 8003810:	080038e9 	.word	0x080038e9
 8003814:	6833      	ldr	r3, [r6, #0]
 8003816:	1d1a      	adds	r2, r3, #4
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	6032      	str	r2, [r6, #0]
 800381c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003820:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8003824:	2301      	movs	r3, #1
 8003826:	e09c      	b.n	8003962 <_printf_i+0x1e6>
 8003828:	6833      	ldr	r3, [r6, #0]
 800382a:	6820      	ldr	r0, [r4, #0]
 800382c:	1d19      	adds	r1, r3, #4
 800382e:	6031      	str	r1, [r6, #0]
 8003830:	0606      	lsls	r6, r0, #24
 8003832:	d501      	bpl.n	8003838 <_printf_i+0xbc>
 8003834:	681d      	ldr	r5, [r3, #0]
 8003836:	e003      	b.n	8003840 <_printf_i+0xc4>
 8003838:	0645      	lsls	r5, r0, #25
 800383a:	d5fb      	bpl.n	8003834 <_printf_i+0xb8>
 800383c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8003840:	2d00      	cmp	r5, #0
 8003842:	da03      	bge.n	800384c <_printf_i+0xd0>
 8003844:	232d      	movs	r3, #45	@ 0x2d
 8003846:	426d      	negs	r5, r5
 8003848:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800384c:	4858      	ldr	r0, [pc, #352]	@ (80039b0 <_printf_i+0x234>)
 800384e:	230a      	movs	r3, #10
 8003850:	e011      	b.n	8003876 <_printf_i+0xfa>
 8003852:	6821      	ldr	r1, [r4, #0]
 8003854:	6833      	ldr	r3, [r6, #0]
 8003856:	0608      	lsls	r0, r1, #24
 8003858:	f853 5b04 	ldr.w	r5, [r3], #4
 800385c:	d402      	bmi.n	8003864 <_printf_i+0xe8>
 800385e:	0649      	lsls	r1, r1, #25
 8003860:	bf48      	it	mi
 8003862:	b2ad      	uxthmi	r5, r5
 8003864:	2f6f      	cmp	r7, #111	@ 0x6f
 8003866:	4852      	ldr	r0, [pc, #328]	@ (80039b0 <_printf_i+0x234>)
 8003868:	6033      	str	r3, [r6, #0]
 800386a:	bf14      	ite	ne
 800386c:	230a      	movne	r3, #10
 800386e:	2308      	moveq	r3, #8
 8003870:	2100      	movs	r1, #0
 8003872:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8003876:	6866      	ldr	r6, [r4, #4]
 8003878:	60a6      	str	r6, [r4, #8]
 800387a:	2e00      	cmp	r6, #0
 800387c:	db05      	blt.n	800388a <_printf_i+0x10e>
 800387e:	6821      	ldr	r1, [r4, #0]
 8003880:	432e      	orrs	r6, r5
 8003882:	f021 0104 	bic.w	r1, r1, #4
 8003886:	6021      	str	r1, [r4, #0]
 8003888:	d04b      	beq.n	8003922 <_printf_i+0x1a6>
 800388a:	4616      	mov	r6, r2
 800388c:	fbb5 f1f3 	udiv	r1, r5, r3
 8003890:	fb03 5711 	mls	r7, r3, r1, r5
 8003894:	5dc7      	ldrb	r7, [r0, r7]
 8003896:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800389a:	462f      	mov	r7, r5
 800389c:	42bb      	cmp	r3, r7
 800389e:	460d      	mov	r5, r1
 80038a0:	d9f4      	bls.n	800388c <_printf_i+0x110>
 80038a2:	2b08      	cmp	r3, #8
 80038a4:	d10b      	bne.n	80038be <_printf_i+0x142>
 80038a6:	6823      	ldr	r3, [r4, #0]
 80038a8:	07df      	lsls	r7, r3, #31
 80038aa:	d508      	bpl.n	80038be <_printf_i+0x142>
 80038ac:	6923      	ldr	r3, [r4, #16]
 80038ae:	6861      	ldr	r1, [r4, #4]
 80038b0:	4299      	cmp	r1, r3
 80038b2:	bfde      	ittt	le
 80038b4:	2330      	movle	r3, #48	@ 0x30
 80038b6:	f806 3c01 	strble.w	r3, [r6, #-1]
 80038ba:	f106 36ff 	addle.w	r6, r6, #4294967295
 80038be:	1b92      	subs	r2, r2, r6
 80038c0:	6122      	str	r2, [r4, #16]
 80038c2:	f8cd a000 	str.w	sl, [sp]
 80038c6:	464b      	mov	r3, r9
 80038c8:	aa03      	add	r2, sp, #12
 80038ca:	4621      	mov	r1, r4
 80038cc:	4640      	mov	r0, r8
 80038ce:	f7ff fee7 	bl	80036a0 <_printf_common>
 80038d2:	3001      	adds	r0, #1
 80038d4:	d14a      	bne.n	800396c <_printf_i+0x1f0>
 80038d6:	f04f 30ff 	mov.w	r0, #4294967295
 80038da:	b004      	add	sp, #16
 80038dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80038e0:	6823      	ldr	r3, [r4, #0]
 80038e2:	f043 0320 	orr.w	r3, r3, #32
 80038e6:	6023      	str	r3, [r4, #0]
 80038e8:	4832      	ldr	r0, [pc, #200]	@ (80039b4 <_printf_i+0x238>)
 80038ea:	2778      	movs	r7, #120	@ 0x78
 80038ec:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80038f0:	6823      	ldr	r3, [r4, #0]
 80038f2:	6831      	ldr	r1, [r6, #0]
 80038f4:	061f      	lsls	r7, r3, #24
 80038f6:	f851 5b04 	ldr.w	r5, [r1], #4
 80038fa:	d402      	bmi.n	8003902 <_printf_i+0x186>
 80038fc:	065f      	lsls	r7, r3, #25
 80038fe:	bf48      	it	mi
 8003900:	b2ad      	uxthmi	r5, r5
 8003902:	6031      	str	r1, [r6, #0]
 8003904:	07d9      	lsls	r1, r3, #31
 8003906:	bf44      	itt	mi
 8003908:	f043 0320 	orrmi.w	r3, r3, #32
 800390c:	6023      	strmi	r3, [r4, #0]
 800390e:	b11d      	cbz	r5, 8003918 <_printf_i+0x19c>
 8003910:	2310      	movs	r3, #16
 8003912:	e7ad      	b.n	8003870 <_printf_i+0xf4>
 8003914:	4826      	ldr	r0, [pc, #152]	@ (80039b0 <_printf_i+0x234>)
 8003916:	e7e9      	b.n	80038ec <_printf_i+0x170>
 8003918:	6823      	ldr	r3, [r4, #0]
 800391a:	f023 0320 	bic.w	r3, r3, #32
 800391e:	6023      	str	r3, [r4, #0]
 8003920:	e7f6      	b.n	8003910 <_printf_i+0x194>
 8003922:	4616      	mov	r6, r2
 8003924:	e7bd      	b.n	80038a2 <_printf_i+0x126>
 8003926:	6833      	ldr	r3, [r6, #0]
 8003928:	6825      	ldr	r5, [r4, #0]
 800392a:	6961      	ldr	r1, [r4, #20]
 800392c:	1d18      	adds	r0, r3, #4
 800392e:	6030      	str	r0, [r6, #0]
 8003930:	062e      	lsls	r6, r5, #24
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	d501      	bpl.n	800393a <_printf_i+0x1be>
 8003936:	6019      	str	r1, [r3, #0]
 8003938:	e002      	b.n	8003940 <_printf_i+0x1c4>
 800393a:	0668      	lsls	r0, r5, #25
 800393c:	d5fb      	bpl.n	8003936 <_printf_i+0x1ba>
 800393e:	8019      	strh	r1, [r3, #0]
 8003940:	2300      	movs	r3, #0
 8003942:	6123      	str	r3, [r4, #16]
 8003944:	4616      	mov	r6, r2
 8003946:	e7bc      	b.n	80038c2 <_printf_i+0x146>
 8003948:	6833      	ldr	r3, [r6, #0]
 800394a:	1d1a      	adds	r2, r3, #4
 800394c:	6032      	str	r2, [r6, #0]
 800394e:	681e      	ldr	r6, [r3, #0]
 8003950:	6862      	ldr	r2, [r4, #4]
 8003952:	2100      	movs	r1, #0
 8003954:	4630      	mov	r0, r6
 8003956:	f7fc fc3b 	bl	80001d0 <memchr>
 800395a:	b108      	cbz	r0, 8003960 <_printf_i+0x1e4>
 800395c:	1b80      	subs	r0, r0, r6
 800395e:	6060      	str	r0, [r4, #4]
 8003960:	6863      	ldr	r3, [r4, #4]
 8003962:	6123      	str	r3, [r4, #16]
 8003964:	2300      	movs	r3, #0
 8003966:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800396a:	e7aa      	b.n	80038c2 <_printf_i+0x146>
 800396c:	6923      	ldr	r3, [r4, #16]
 800396e:	4632      	mov	r2, r6
 8003970:	4649      	mov	r1, r9
 8003972:	4640      	mov	r0, r8
 8003974:	47d0      	blx	sl
 8003976:	3001      	adds	r0, #1
 8003978:	d0ad      	beq.n	80038d6 <_printf_i+0x15a>
 800397a:	6823      	ldr	r3, [r4, #0]
 800397c:	079b      	lsls	r3, r3, #30
 800397e:	d413      	bmi.n	80039a8 <_printf_i+0x22c>
 8003980:	68e0      	ldr	r0, [r4, #12]
 8003982:	9b03      	ldr	r3, [sp, #12]
 8003984:	4298      	cmp	r0, r3
 8003986:	bfb8      	it	lt
 8003988:	4618      	movlt	r0, r3
 800398a:	e7a6      	b.n	80038da <_printf_i+0x15e>
 800398c:	2301      	movs	r3, #1
 800398e:	4632      	mov	r2, r6
 8003990:	4649      	mov	r1, r9
 8003992:	4640      	mov	r0, r8
 8003994:	47d0      	blx	sl
 8003996:	3001      	adds	r0, #1
 8003998:	d09d      	beq.n	80038d6 <_printf_i+0x15a>
 800399a:	3501      	adds	r5, #1
 800399c:	68e3      	ldr	r3, [r4, #12]
 800399e:	9903      	ldr	r1, [sp, #12]
 80039a0:	1a5b      	subs	r3, r3, r1
 80039a2:	42ab      	cmp	r3, r5
 80039a4:	dcf2      	bgt.n	800398c <_printf_i+0x210>
 80039a6:	e7eb      	b.n	8003980 <_printf_i+0x204>
 80039a8:	2500      	movs	r5, #0
 80039aa:	f104 0619 	add.w	r6, r4, #25
 80039ae:	e7f5      	b.n	800399c <_printf_i+0x220>
 80039b0:	08003ae9 	.word	0x08003ae9
 80039b4:	08003afa 	.word	0x08003afa

080039b8 <memmove>:
 80039b8:	4288      	cmp	r0, r1
 80039ba:	b510      	push	{r4, lr}
 80039bc:	eb01 0402 	add.w	r4, r1, r2
 80039c0:	d902      	bls.n	80039c8 <memmove+0x10>
 80039c2:	4284      	cmp	r4, r0
 80039c4:	4623      	mov	r3, r4
 80039c6:	d807      	bhi.n	80039d8 <memmove+0x20>
 80039c8:	1e43      	subs	r3, r0, #1
 80039ca:	42a1      	cmp	r1, r4
 80039cc:	d008      	beq.n	80039e0 <memmove+0x28>
 80039ce:	f811 2b01 	ldrb.w	r2, [r1], #1
 80039d2:	f803 2f01 	strb.w	r2, [r3, #1]!
 80039d6:	e7f8      	b.n	80039ca <memmove+0x12>
 80039d8:	4402      	add	r2, r0
 80039da:	4601      	mov	r1, r0
 80039dc:	428a      	cmp	r2, r1
 80039de:	d100      	bne.n	80039e2 <memmove+0x2a>
 80039e0:	bd10      	pop	{r4, pc}
 80039e2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80039e6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80039ea:	e7f7      	b.n	80039dc <memmove+0x24>

080039ec <_sbrk_r>:
 80039ec:	b538      	push	{r3, r4, r5, lr}
 80039ee:	4d06      	ldr	r5, [pc, #24]	@ (8003a08 <_sbrk_r+0x1c>)
 80039f0:	2300      	movs	r3, #0
 80039f2:	4604      	mov	r4, r0
 80039f4:	4608      	mov	r0, r1
 80039f6:	602b      	str	r3, [r5, #0]
 80039f8:	f7fc ff32 	bl	8000860 <_sbrk>
 80039fc:	1c43      	adds	r3, r0, #1
 80039fe:	d102      	bne.n	8003a06 <_sbrk_r+0x1a>
 8003a00:	682b      	ldr	r3, [r5, #0]
 8003a02:	b103      	cbz	r3, 8003a06 <_sbrk_r+0x1a>
 8003a04:	6023      	str	r3, [r4, #0]
 8003a06:	bd38      	pop	{r3, r4, r5, pc}
 8003a08:	200004bc 	.word	0x200004bc

08003a0c <memcpy>:
 8003a0c:	440a      	add	r2, r1
 8003a0e:	4291      	cmp	r1, r2
 8003a10:	f100 33ff 	add.w	r3, r0, #4294967295
 8003a14:	d100      	bne.n	8003a18 <memcpy+0xc>
 8003a16:	4770      	bx	lr
 8003a18:	b510      	push	{r4, lr}
 8003a1a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003a1e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003a22:	4291      	cmp	r1, r2
 8003a24:	d1f9      	bne.n	8003a1a <memcpy+0xe>
 8003a26:	bd10      	pop	{r4, pc}

08003a28 <_realloc_r>:
 8003a28:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003a2c:	4607      	mov	r7, r0
 8003a2e:	4614      	mov	r4, r2
 8003a30:	460d      	mov	r5, r1
 8003a32:	b921      	cbnz	r1, 8003a3e <_realloc_r+0x16>
 8003a34:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003a38:	4611      	mov	r1, r2
 8003a3a:	f7ff bc4d 	b.w	80032d8 <_malloc_r>
 8003a3e:	b92a      	cbnz	r2, 8003a4c <_realloc_r+0x24>
 8003a40:	f7ff fbde 	bl	8003200 <_free_r>
 8003a44:	4625      	mov	r5, r4
 8003a46:	4628      	mov	r0, r5
 8003a48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003a4c:	f000 f81a 	bl	8003a84 <_malloc_usable_size_r>
 8003a50:	4284      	cmp	r4, r0
 8003a52:	4606      	mov	r6, r0
 8003a54:	d802      	bhi.n	8003a5c <_realloc_r+0x34>
 8003a56:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8003a5a:	d8f4      	bhi.n	8003a46 <_realloc_r+0x1e>
 8003a5c:	4621      	mov	r1, r4
 8003a5e:	4638      	mov	r0, r7
 8003a60:	f7ff fc3a 	bl	80032d8 <_malloc_r>
 8003a64:	4680      	mov	r8, r0
 8003a66:	b908      	cbnz	r0, 8003a6c <_realloc_r+0x44>
 8003a68:	4645      	mov	r5, r8
 8003a6a:	e7ec      	b.n	8003a46 <_realloc_r+0x1e>
 8003a6c:	42b4      	cmp	r4, r6
 8003a6e:	4622      	mov	r2, r4
 8003a70:	4629      	mov	r1, r5
 8003a72:	bf28      	it	cs
 8003a74:	4632      	movcs	r2, r6
 8003a76:	f7ff ffc9 	bl	8003a0c <memcpy>
 8003a7a:	4629      	mov	r1, r5
 8003a7c:	4638      	mov	r0, r7
 8003a7e:	f7ff fbbf 	bl	8003200 <_free_r>
 8003a82:	e7f1      	b.n	8003a68 <_realloc_r+0x40>

08003a84 <_malloc_usable_size_r>:
 8003a84:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003a88:	1f18      	subs	r0, r3, #4
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	bfbc      	itt	lt
 8003a8e:	580b      	ldrlt	r3, [r1, r0]
 8003a90:	18c0      	addlt	r0, r0, r3
 8003a92:	4770      	bx	lr

08003a94 <_init>:
 8003a94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003a96:	bf00      	nop
 8003a98:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003a9a:	bc08      	pop	{r3}
 8003a9c:	469e      	mov	lr, r3
 8003a9e:	4770      	bx	lr

08003aa0 <_fini>:
 8003aa0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003aa2:	bf00      	nop
 8003aa4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003aa6:	bc08      	pop	{r3}
 8003aa8:	469e      	mov	lr, r3
 8003aaa:	4770      	bx	lr
